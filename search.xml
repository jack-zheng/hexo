<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ASM 中的一些基本概念</title>
    <url>/hexo/2020/11/18/ASM-basic-concept/</url>
    <content><![CDATA[<p>记录下收集到的 ASM 的基础概念和例子</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://gitlab.ow2.org/asm/asm/-/blob/master/asm/src/test/java/org/objectweb/asm/TypeTest.java">ASM 官方 repo</a></p>
<h2 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h2><p>Type 类代 field 和 method 的 descriptor 属性。就是类似 <code>(Ljava/lang/String;)V</code> 这种表达式。该类中所有的方法几乎都是静态的，提供的功能也基本一致，传入某种类型的参数，然后返回代表 descriptor 的 type 对象。当传入为 method 类型的参数时，type 中会包含 <code>参数 + 返回值</code> 类型信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">    System.out.println(Type.getType(String.class));</span><br><span class="line">    System.out.println(Type.getType(<span class="keyword">this</span>.getClass().getMethod(<span class="string">&quot;testGetTypeFromDescriptor&quot;</span>, String.class)));</span><br><span class="line">    System.out.println(Arrays.toString(Type.getArgumentTypes(<span class="string">&quot;(Ljava/lang/String;)V&quot;</span>)));</span><br><span class="line">    System.out.println(Type.getType(<span class="keyword">this</span>.getClass().getMethod(<span class="string">&quot;getList&quot;</span>)));</span><br><span class="line">    System.out.println(Type.getType(<span class="keyword">this</span>.getClass().getMethod(<span class="string">&quot;getArr&quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetTypeFromDescriptor</span><span class="params">(<span class="keyword">final</span> String descriptor)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> Collections.emptyList();&#125;</span><br><span class="line"><span class="keyword">public</span> String[] getArr() &#123;<span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">&quot;A&quot;</span>&#125;;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Ljava/lang/String;</span></span><br><span class="line"><span class="comment">// (Ljava/lang/String;)V</span></span><br><span class="line"><span class="comment">// [Ljava/lang/String;]</span></span><br><span class="line"><span class="comment">// ()Ljava/util/List;</span></span><br><span class="line"><span class="comment">// ()[Ljava/lang/String;</span></span><br></pre></td></tr></table></figure>

<h2 id="Junit5-是怎么实现-Excutable-接口的？-看不懂"><a href="#Junit5-是怎么实现-Excutable-接口的？-看不懂" class="headerlink" title="Junit5 是怎么实现 Excutable 接口的？ 看不懂"></a>Junit5 是怎么实现 Excutable 接口的？ 看不懂</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConstructor_validApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Executable constructor = () -&gt; <span class="keyword">new</span> ClassVisitor(Opcodes.ASM4) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    assertDoesNotThrow(constructor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ClassReader"><a href="#ClassReader" class="headerlink" title="ClassReader"></a>ClassReader</h2><p>这个类可以看作字节码文件的读操作的入口，只负责读取，其他处理逻辑是在 XXXVisitor 里面实现的。</p>
<p>PS: 该类方法打印的类信息都是斜线 <code>/</code> 分割的</p>
<h2 id="官方测试是怎么测试-ClassReader-ClassVisitor-等类的"><a href="#官方测试是怎么测试-ClassReader-ClassVisitor-等类的" class="headerlink" title="官方测试是怎么测试 ClassReader, ClassVisitor 等类的"></a>官方测试是怎么测试 ClassReader, ClassVisitor 等类的</h2><p>ClassReader 其核心功能有两个，一个是解析文件流，拿到基本信息，比如编译版本，常量池信息等。另一个是定义 Visitor 接解析顺序。</p>
<p>测试时官方也分两类，第一类就是测试解析出来的信息，比如 ‘testGetClassName’ 等，第二类就是测试流程的，比如 ‘testAccept_emptyVisitor’。</p>
<p>测试 Visitor 时也很简单，定义一个自己的 Visitor，官方示例中是定义一个 LogMethodVisitor，然后直接调用对应 visitor.visitMethodInsn 等方法，测试自定义在 LogMethodVisitor 里的逻辑是不是符合预期就行了。这个还是很有启发的，可以用这种方法来完善 TraceSonar 的项目。</p>
<h2 id="Class-文件的格式"><a href="#Class-文件的格式" class="headerlink" title="Class 文件的格式"></a>Class 文件的格式</h2><p>以 ASM 官方例子的 <code>ClassVisitorTest.class</code> 为例，注意查看的是 <code>.class</code> 文件，不是 <code>.java</code> 文件。下载插件 BinEd 可以查看文件在不同进制下的内容。右键 class 文件 <code>open as Binary</code> 即可。</p>
<p>Class 文件在格式上有特殊的规定，比如以 16 进制打开 class 可以看到前 4 位值为：0xCAFE(B1100 1010 1111 1110/202 254)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadByte</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ClassReader classReader = <span class="keyword">new</span> ClassReader(getClass().getName());</span><br><span class="line">    System.out.println(bytesToHex(Arrays.copyOf(classReader.classFileBuffer, <span class="number">2</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] HEX_ARRAY = <span class="string">&quot;0123456789ABCDEF&quot;</span>.toCharArray();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">bytesToHex</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] hexChars = <span class="keyword">new</span> <span class="keyword">char</span>[bytes.length * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; bytes.length; j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = bytes[j] &amp; <span class="number">0xFF</span>;</span><br><span class="line">        hexChars[j * <span class="number">2</span>] = HEX_ARRAY[v &gt;&gt;&gt; <span class="number">4</span>];</span><br><span class="line">        hexChars[j * <span class="number">2</span> + <span class="number">1</span>] = HEX_ARRAY[v &amp; <span class="number">0x0F</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(hexChars);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: CAFE</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>asm</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章 an AWK tutorial</title>
    <url>/hexo/2021/06/16/AWK-c1-an-AWK-tutorial/</url>
    <content><![CDATA[<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>通过例子快速入门, 在如下结构化的数据中</p>
<ul>
<li>计算工作时长 &gt; 0 的总薪资</li>
<li>显示时常 = 0 的用户</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat emp.data</span><br><span class="line"><span class="comment">#name, pay rate per hour, work time(hour)</span></span><br><span class="line">Beth   4.00 0</span><br><span class="line">Dan    3.75 0</span><br><span class="line">Kathy  4.00 10</span><br><span class="line">Mark   5.00 20</span><br><span class="line">Mary   5.50 22</span><br><span class="line">Susie  4.25 18</span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;$3 == 0 &#123;print $1&#125;&#x27;</span> emp.data</span><br><span class="line">Beth</span><br><span class="line">Dan</span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;$3 &gt; 0 &#123;print $1, $2 * $3&#125;&#x27;</span> emp.data </span><br><span class="line">Kathy 40</span><br><span class="line">Mark 100</span><br><span class="line">Mary 121</span><br><span class="line">Susie 76.5</span><br></pre></td></tr></table></figure>

<h3 id="The-Structure-of-an-AWK-Program"><a href="#The-Structure-of-an-AWK-Program" class="headerlink" title="The Structure of an AWK Program"></a>The Structure of an AWK Program</h3><p>格式 <code>pattern &#123; action &#125;</code>, pattern 如果结果为 true 则执行 action 中定义的行为。然后执行下一行，一直到文本结束。</p>
<h3 id="Running-an-AWK-Program"><a href="#Running-an-AWK-Program" class="headerlink" title="Running an AWK Program"></a>Running an AWK Program</h3><p><code>awk &#39;program&#39; input files</code>, 多文件 <code>awk &#39;program&#39; input file1 file2</code>, 不接文件，则从标准输入拿内容</p>
<p>可以将程序部分写到文件中 <code>awk -f progfile optional_list_of_input_files</code></p>
<h2 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h2><p><strong>Print Event Line</strong> 没有写 pattern 表示每行都输出，<code>&#123; print &#125;</code> 和 <code>&#123; print $0 &#125;</code> 等价，都是打印全部</p>
<p><strong>Print Certain Fields</strong> <code>&#123; print $1, $3 &#125;</code></p>
<p><strong>NF, the Number of Fields</strong> 内置变量 NF 表示最后一个 field 的 number, 下面的例子答应 field 数量 + 名字 + 最后一个 field</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;print NF, $1, $NF&#125;&#x27;</span> emp.data</span><br><span class="line">3 Beth 0</span><br><span class="line">3 Dan 0</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>Computing and Printing</strong> field 可以直接用于计算 <code>&#123; print $1, $2 * $3 &#125;</code></p>
<p><strong>Printing Line Numbers</strong> NR 代表行号, number of row(record?)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;print NR, $0&#125;&#x27;</span> emp.data</span><br><span class="line">1 Beth 4.00 0</span><br><span class="line">2 Dan 3.75 0</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>Putting Text in the Output</strong> 输出内容中加入自己的文本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;print &quot;total pay for&quot;, $1, &quot;is&quot;, $2 * $3&#125;&#x27;</span> emp.data</span><br><span class="line">total pay <span class="keyword">for</span> Beth is 0</span><br><span class="line">total pay <span class="keyword">for</span> Dan is 0</span><br><span class="line">total pay <span class="keyword">for</span> Kathy is 40</span><br><span class="line">total pay <span class="keyword">for</span> Mark is 100</span><br><span class="line">total pay <span class="keyword">for</span> Mary is 121</span><br><span class="line">total pay <span class="keyword">for</span> Susie is 76.5</span><br></pre></td></tr></table></figure>

<h2 id="Fancier-Output"><a href="#Fancier-Output" class="headerlink" title="Fancier Output"></a>Fancier Output</h2><p>print 只是简单的打印内容，如果想要输出更丰富，使用 printf</p>
<p><strong>Lining Up Fields</strong> printf 格式 <code>printf(format, value1, value2..., valuen)</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;printf(&quot;total pay for %s is %.2f\n&quot;, $1, $2 * $3)&#125;&#x27;</span> emp.data</span><br><span class="line">total pay <span class="keyword">for</span> Beth is 0.00</span><br><span class="line">total pay <span class="keyword">for</span> Dan is 0.00</span><br><span class="line">total pay <span class="keyword">for</span> Kathy is 40.00</span><br><span class="line">total pay <span class="keyword">for</span> Mark is 100.00</span><br><span class="line">total pay <span class="keyword">for</span> Mary is 121.00</span><br><span class="line">total pay <span class="keyword">for</span> Susie is 76.50</span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;&#123;printf(&quot;%-8s $%6.2f\n&quot;, $1, $2 * $3)&#125;&#x27;</span> emp.data</span><br><span class="line">Beth     $  0.00</span><br><span class="line">Dan      $  0.00</span><br><span class="line">Kathy    $ 40.00</span><br><span class="line">Mark     <span class="variable">$100</span>.00</span><br><span class="line">Mary     <span class="variable">$121</span>.00</span><br><span class="line">Susie    $ 76.50</span><br></pre></td></tr></table></figure>

<p><strong>Sorting the Output</strong> 结合 pipe 进行排序</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;printf(&quot;%6.2f %s\n&quot;, $2 * $3, $0)&#125;&#x27;</span> emp.data | sort</span><br><span class="line">  0.00 Beth 4.00 0</span><br><span class="line">  0.00 Dan 3.75 0</span><br><span class="line"> 40.00 Kathy 4.00 10</span><br><span class="line"> 76.50 Susie 4.25 18</span><br><span class="line">100.00 Mark 5.00 20</span><br><span class="line">121.00 Mary 5.50 22</span><br></pre></td></tr></table></figure>

<h2 id="Selection"><a href="#Selection" class="headerlink" title="Selection"></a>Selection</h2><p>Awk 的 pattern 可用于筛选数据</p>
<p><strong>Selection by Comparison</strong> 通过比较筛选</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 时薪大于5</span></span><br><span class="line">awk <span class="string">&#x27;$2 &gt;= 5&#x27;</span> emp.data</span><br><span class="line">Mark 5.00 20</span><br><span class="line">Mary 5.50 22</span><br></pre></td></tr></table></figure>

<p><strong>Selection by Computation</strong> 结合计算筛选</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;$2 * $3 &gt;= 50 &#123; printf(&quot;$%.2f for %s\n&quot;, $2 * $3, $1)&#125;&#x27;</span> emp.data</span><br><span class="line"><span class="variable">$100</span>.00 <span class="keyword">for</span> Mark</span><br><span class="line"><span class="variable">$121</span>.00 <span class="keyword">for</span> Mary</span><br><span class="line"><span class="variable">$76</span>.50 <span class="keyword">for</span> Susie</span><br></pre></td></tr></table></figure>

<p><strong>Selection by Text Content</strong> 文本匹配选择, == 精确匹配，/match/ 包含</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;$1 == &quot;Susie&quot;&#x27;</span> emp.data</span><br><span class="line">Susie  4.25 18</span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;/Susie/&#x27;</span> emp.data</span><br><span class="line">Susie  4.25 18</span><br></pre></td></tr></table></figure>

<p><strong>Combinations of Patterns</strong> 使用 ||, &amp;&amp; 做逻辑操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;$2 &gt;= 4 || $3 &gt;= 20&#x27;</span> emp.data</span><br><span class="line">Beth   4.00 0</span><br><span class="line">Kathy  4.00 10</span><br><span class="line">Mark   5.00 20</span><br><span class="line">Mary   5.50 22</span><br><span class="line">Susie  4.25 18</span><br></pre></td></tr></table></figure>

<p>如果不加逻辑操作符号，则符合条件的语句会重复输出</p>
<p>‘$2 &gt;= 4 || $3 &gt;= 20’ 等价于 !($2 &lt; 4 &amp;&amp; $3 &lt; 20)</p>
<p><strong>Data Validation</strong> Awk 是一款很优秀的数据校验工具</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印 field 不等于 3 的行</span></span><br><span class="line">awk <span class="string">&#x27;NF != 3 &#123;print $0, &quot;number of fields is not equal to 3&quot;&#125;&#x27;</span> emp.data</span><br><span class="line"><span class="comment"># 打印时薪小于 3.35 的行</span></span><br><span class="line">awk <span class="string">&#x27;$2 &lt; 3.35 &#123; print $0, &quot;rate is below minimum wage&quot; &#125;&#x27;</span> emp.data</span><br></pre></td></tr></table></figure>

<p><strong>BEGIN and END</strong> 类似 before/after class 的操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN &#123; print &quot;NAME   RATE    HOURS&quot;; print &quot;&quot;&#125; &#123; print &#125;&#x27;</span> emp.data </span><br><span class="line">NAME   RATE    HOURS</span><br><span class="line"></span><br><span class="line">Beth   4.00 0</span><br><span class="line">Dan    3.75 0</span><br><span class="line">Kathy  4.00 10</span><br><span class="line">Mark   5.00 20</span><br><span class="line">Mary   5.50 22</span><br><span class="line">Susie  4.25 18</span><br></pre></td></tr></table></figure>

<h2 id="Computing-with-AWK"><a href="#Computing-with-AWK" class="headerlink" title="Computing with AWK"></a>Computing with AWK</h2><p><code>pattern &#123; action &#125;</code> 中的 action 是一系列用换行或冒号分割的语句。这节介绍一些字符，数字操作，一些内置变量和自定义变量。自定义变量不需要声明。</p>
<p><strong>Counting</strong> 统计时长大于 15 的用户</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27; $3 &gt; 15 &#123; emp++; &#125; END&#123; print emp, &quot;employees worked more than 15 hours&quot; &#125;&#x27;</span> emp.data </span><br><span class="line">3 employees worked more than 15 hours</span><br></pre></td></tr></table></figure>

<p><strong>Computing Sums and Averages</strong> 计算总值和平均值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;END &#123; print NR, &quot;employees&quot; &#125;&#x27;</span> emp.data                                              </span><br><span class="line">6 employees</span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;&#123; pay = pay + $2 * $3 &#125;</span></span><br><span class="line"><span class="string">END &#123;</span></span><br><span class="line"><span class="string">print NR, &quot;employees&quot;</span></span><br><span class="line"><span class="string">print &quot;total pay is&quot;, pay</span></span><br><span class="line"><span class="string">print &quot;average pay is&quot;, pay/NR</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> emp.data</span><br><span class="line">6 employees</span><br><span class="line">total pay is 337.5</span><br><span class="line">average pay is 56.25</span><br></pre></td></tr></table></figure>

<p><strong>Handling Text</strong> Awk 有处理文字的能力， awk 中的变量可以持有数字和字符串，下面的例子显示报酬最多的用户</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;                       </span></span><br><span class="line"><span class="string">$2 &gt; maxrate &#123; maxrate = $2; maxemp = $1 &#125;</span></span><br><span class="line"><span class="string">END &#123; print &quot;highest hourly rate:&quot;, maxrate, &quot;for&quot;, maxemp &#125;</span></span><br><span class="line"><span class="string">&#x27;</span> emp.data </span><br><span class="line">highest hourly rate: 5.50 <span class="keyword">for</span> Mary</span><br></pre></td></tr></table></figure>

<p>可以看出来，默认的变量初始值为 0</p>
<p><strong>String Concatenation</strong> 字符拼接</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123; names = names $1 &quot;  &quot; &#125;</span></span><br><span class="line"><span class="string">END &#123; print names &#125;&#x27;</span> emp.data </span><br><span class="line">Beth  Dan  Kathy  Mark  Mary  Susie </span><br></pre></td></tr></table></figure>

<p>names 变量的初始值为 null</p>
<p><strong>Printing the Last Input Line</strong> 打印最后一行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123; last = $0 &#125; END &#123; print last &#125;&#x27;</span> emp.data </span><br><span class="line">Susie  4.25 18</span><br></pre></td></tr></table></figure>

<p><strong>Built-in Functions</strong> awk 提供了很多内置函数，比如 length 计算字符串长度</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123; print $1, length($1) &#125;&#x27;</span> emp.data </span><br><span class="line">Beth 4</span><br><span class="line">Dan 3</span><br><span class="line">Kathy 5</span><br><span class="line">Mark 4</span><br><span class="line">Mary 4</span><br><span class="line">Susie 5</span><br></pre></td></tr></table></figure>

<p><strong>Counting Lines, Words and Characters</strong> 通过使用 length，NF, NR 统计行基本信息，为了便于计算，我们将每一个 field 都当作 String 对待</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;                                 </span></span><br><span class="line"><span class="string">    nc = nc + length($0) + 1</span></span><br><span class="line"><span class="string">    nw = nw + NF     </span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">END &#123; print NR, &quot;lines,&quot;, nw, &quot;words,&quot;, nc, &quot;characters&quot;&#125;&#x27;</span> emp.data </span><br><span class="line">6 lines, 18 words, 88 characters</span><br></pre></td></tr></table></figure>

<p><code>nc = nc + length($0) + 1</code> 1 代表换行符</p>
<h2 id="Control-Flow-Statemnets"><a href="#Control-Flow-Statemnets" class="headerlink" title="Control-Flow Statemnets"></a>Control-Flow Statemnets</h2><p>awk 中的流程控制和 C 语言中基本一直，这些控制语句只能用在 action 中</p>
<h3 id="If-Else-Statement"><a href="#If-Else-Statement" class="headerlink" title="If-Else Statement"></a>If-Else Statement</h3><p>统计时薪大于 6 的所有人的总收入及平均收入, 通过 if-else 控制打印的 loop</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;    </span></span><br><span class="line"><span class="string">$2 &gt; 6 &#123; n = n+1; pay = pay+$2*$3 &#125;</span></span><br><span class="line"><span class="string">END &#123;</span></span><br><span class="line"><span class="string">  if (n &gt; 0)</span></span><br><span class="line"><span class="string">    print n, &quot;employees, total pay is&quot;, pay, &quot;average pay is&quot;, pay/n</span></span><br><span class="line"><span class="string">  else     </span></span><br><span class="line"><span class="string">    print &quot;no employees are paid more than $6/hour&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> emp.data </span><br><span class="line">no employees are paid more than <span class="variable">$6</span>/hour</span><br></pre></td></tr></table></figure>

<h3 id="While-Statement"><a href="#While-Statement" class="headerlink" title="While Statement"></a>While Statement</h3><p>while = condition + body. 下面实现一个计算存款的功能，表达式可以概括为 value = amount (1 + rate)<sup>years</sup></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat interest1 </span><br><span class="line"><span class="comment"># interest1 - compute compound interest</span></span><br><span class="line"><span class="comment">#   input: amount rate years</span></span><br><span class="line"><span class="comment">#   output: compounded value at the end of each year</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    i = 1</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="variable">$3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t%.2f\n&quot;</span>, <span class="variable">$1</span> * (1 + <span class="variable">$2</span>) ^ i)</span><br><span class="line">        i = i + 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">awk -f interest1</span><br><span class="line">1000 .06 5</span><br><span class="line">        1060.00</span><br><span class="line">        1123.60</span><br><span class="line">        1191.02</span><br><span class="line">        1262.48</span><br><span class="line">        1338.23</span><br></pre></td></tr></table></figure>

<h3 id="For-Statement"><a href="#For-Statement" class="headerlink" title="For Statement"></a>For Statement</h3><p>同样的计算，用 for 实现</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat interest2  </span><br><span class="line"><span class="comment"># interest2 - compute compound interest</span></span><br><span class="line"><span class="comment">#   input: amount rate years</span></span><br><span class="line"><span class="comment">#   output: compounded value at the end of each year</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (i=1; i&lt;=<span class="variable">$3</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t%.2f\n&quot;</span>, <span class="variable">$1</span> * (1+<span class="variable">$2</span>) ^ i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">awk -f interest2</span><br><span class="line">1000 .06 5</span><br><span class="line">        1060.00</span><br><span class="line">        1123.60</span><br><span class="line">        1191.02</span><br><span class="line">        1262.48</span><br><span class="line">        1338.23</span><br></pre></td></tr></table></figure>

<h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p>awk 支持数组。下面的实验中，我们在 action 中将行信息存到数组中，在 END 中通过 while 倒序输出</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;           </span></span><br><span class="line"><span class="string">&#123; line[NR] = $0 &#125;</span></span><br><span class="line"><span class="string">END &#123;</span></span><br><span class="line"><span class="string">  i = NR  </span></span><br><span class="line"><span class="string">  while (i&gt;0) &#123;                                </span></span><br><span class="line"><span class="string">    print line[i]                            </span></span><br><span class="line"><span class="string">    i = i-1 </span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> emp.data </span><br><span class="line">Susie  4.25 18</span><br><span class="line">Mary   5.50 22</span><br><span class="line">Mark   5.00 20</span><br><span class="line">Kathy  4.00 10</span><br><span class="line">Dan    3.75 0</span><br><span class="line">Beth   4.00 0</span><br></pre></td></tr></table></figure>

<h2 id="A-Handful-of-Useful-“One-liners”"><a href="#A-Handful-of-Useful-“One-liners”" class="headerlink" title="A Handful of Useful “One-liners”"></a>A Handful of Useful “One-liners”</h2><p>摘录一些简短但是令人印象深刻的 awk 脚本</p>
<ul>
<li>print the total number of input lines <code>awk &#39;END &#123; print NR &#125;&#39; emp.data</code></li>
<li>打印第三行 <code>awk &#39;NR == 3&#39; emp.data</code></li>
<li>打印每行最后一个 field <code>awk &#39;&#123; print $NF &#125;&#39; emp.data</code></li>
<li>打印最后一行的最后一个 field <code>awk &#39;&#123; field = $NF &#125; END &#123; print field &#125;&#39; emp.data</code></li>
<li>打印 field 数量大于 4 的行 <code>awk &#39;NF &gt; 4&#39; emp.data</code></li>
<li>打印最后一个 field 大于 4 的行 <code>awk &#39;$NF &gt; 4&#39; emp.data</code></li>
<li>用行号代替第一个 field <code>awk &#39;&#123; $1 = NR; print &#125;&#39; emp.data</code></li>
<li>抹去第二个 field <code>awk &#39;&#123; $2=&quot;&quot;; print &#125;&#39; emp.data</code></li>
<li>倒序打印每一行 <code>awk &#39;&#123;for(i=NF; i&gt;0;i--) printf(&quot;%s&quot;, $i); printf(&quot;\n&quot;)&#125;&#39; emp.data</code></li>
</ul>
]]></content>
      <categories>
        <category>AWK</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title>704 二分查找</title>
    <url>/hexo/2021/10/13/Algorithm-binary-search/</url>
    <content><![CDATA[<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>
<p>示例 1:</p>
<p>输入: nums = [-1,0,3,5,9,12], target = 9<br>输出: 4<br>解释: 9 出现在 nums 中并且下标为 4<br>示例 2:</p>
<p>输入: nums = [-1,0,3,5,9,12], target = 2<br>输出: -1<br>解释: 2 不存在 nums 中因此返回 -1</p>
<p>提示：</p>
<p>你可以假设 nums 中的所有元素是不重复的。<br>n 将在 [1, 10000]之间。<br>nums 的每个元素都将在 [-9999, 9999]之间。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>出错的点：</p>
<ol>
<li>while 条件少了 ‘=’</li>
<li>mid 取值没有考虑越界</li>
<li>start, end 没有 +/-1 优化</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">S704</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> S704().search(arr, <span class="number">9</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start=<span class="number">0</span>, end=nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                 <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                start = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                end = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二分查找</tag>
        <tag>leetcode</tag>
        <tag>应试</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树专题讲解</title>
    <url>/hexo/2021/12/27/Algorithm-binary-tree-special/</url>
    <content><![CDATA[<h2 id="指南"><a href="#指南" class="headerlink" title="指南"></a>指南</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484852&idx=1&sn=85b50b8b0470bb4897e517955f4e5002&chksm=9bd7fbbcaca072aa75e2a241064a403fde1e579d57ab846cd8537a54253ceb2c8b93cc3bf38e&scene=21#wechat_redirect">数据结构和算法学习指南</a></p>
<p>数据结构的存储方式只有两种：数组(顺序存储) 和 链表(链式存储)。其他的结构，如队列，栈，图等都是以这两种为基础演变的。</p>
<p>数据结构的基本操作：遍历 + 访问，具体一点就是：增删改查。数据结构类型有很多，但是他们的目的都是在不同的应用场景下，尽可能高效的增删改查，这就是数据结构的使命。</p>
<p>数组遍历是典型的线性迭代结构，链表便利兼具迭代和递归，二叉树则是典型的非线性递归。</p>
<p>数据结构是工具，算法则是通过合适的工具解决特定问题的方法。算法刷题建议从二叉树开始。二叉树最容易培养框架思维，大部分算法技巧，本质上都是树的遍历问题。</p>
<h2 id="刷通二叉树第一期"><a href="#刷通二叉树第一期" class="headerlink" title="刷通二叉树第一期"></a>刷通二叉树第一期</h2><p>前置的一些基本概念：深度遍历/广度遍历。深度遍历有前序，中序和后序三种遍历方式。广度便利及我们平时说的层次遍历。</p>
<p>前序遍历: 根结点 -&gt; 左子树 -&gt; 右子树</p>
<p>中序遍历: 左子树 -&gt; 根结点 -&gt; 右子树</p>
<p>后序遍历: 左子树 -&gt; 右子树 -&gt; 根结点</p>
<p>层次便利: 只需按层次遍历既可</p>
<p>PS: 吐槽一下前中后的定义，老是搞错，抓住根本，这些形容词都是用来表述根节点的。前序就是 root 先，左右子树的顺序都是固定的。</p>
<p>完美二叉树(Perfect Binary Tree)：也翻译为满二叉树，理解为正三角形就行</p>
<p>完全二叉树(Complete Binary Tree)：倒数第二层为完美二叉树，最后一层不全，叶子结点左对齐</p>
<p>完满二叉树(Full Binary Tree): 只要有孩子，就是两个</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247487126&idx=1&sn=4de13e66397bc35970963c5a1330ce18&chksm=9bd7f09eaca0798853c41fba05ad5fa958b31054eba18b69c785ae92f4bd8e4cc7a2179d7838&scene=178&cur_album_id=2121994699837177859#rd">第一期</a></p>
<p>通过练习，熟悉树的遍历框架</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 二叉树遍历框架 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 前序遍历</span></span><br><span class="line">    traverse(root.left)</span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    traverse(root.right)</span><br><span class="line">    <span class="comment">// 后序遍历</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序</title>
    <url>/hexo/2021/04/20/Algorithm-bubble-sort/</url>
    <content><![CDATA[<ul>
<li><a href="https://zhuanlan.zhihu.com/p/42586566">示例带图</a></li>
</ul>
<p>算法描述</p>
<ol>
<li>遍历数组，比较相邻的两个元素的大小，如果前一个比后一个大就交换位置，如此循环，最后一个位置即最大值</li>
<li>重复上述过程，对前 n-1 个元素排序</li>
<li>重复直到所有元素都完成排序</li>
</ol>
<p>操作没问题，但是你难道不觉得，这个比较中间过程中的交换过程很浪费资源吗？为了省去中间的交换过程，我们有了选择排序。</p>
<p>时间复杂度：O(n<sup>2</sup>)</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 遍历数组，比较相邻的两个元素的大小，如果前一个比后一个大就交换位置，如此循环，最后一个位置即最大值</span></span><br><span class="line"><span class="comment"> * 2. 重复上述过程，对前 n-1 个元素排序</span></span><br><span class="line"><span class="comment"> * 3. 重复直到所有元素都完成排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSortDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] sample = <span class="keyword">new</span> Random().ints(<span class="number">0</span>, <span class="number">100</span>).limit(<span class="number">10</span>).toArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;Origin: &quot;</span> + Arrays.toString(sample));</span><br><span class="line">        bubbleSort(sample);</span><br><span class="line">        System.out.println(<span class="string">&quot;After:  &quot;</span> + Arrays.toString(sample));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] sample)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = sample.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123; <span class="comment">// 这里使用 i=length-1 的表达方式，第二层直接 j &lt; i, 书写起来比较好看</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sample[j] &gt; sample[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(sample, j, j + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> pos1, <span class="keyword">int</span> pos2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[pos1];</span><br><span class="line">        arr[pos1] = arr[pos2];</span><br><span class="line">        arr[pos2] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Origin: [62, 39, 37, 64, 84, 27, 68, 90, 55, 63]</span></span><br><span class="line"><span class="comment">// After:  [27, 37, 39, 55, 62, 63, 64, 68, 84, 90]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>冒泡排序</tag>
      </tags>
  </entry>
  <entry>
    <title>计数排序</title>
    <url>/hexo/2021/05/07/Algorithm-counting-sort/</url>
    <content><![CDATA[<p>计数排序不是比较排序，他将数据的值转化为键存储在额外空间中，时间复杂度是线性的。他要求输入的数据必须是有确定范围的整数。</p>
<p>算法说明：</p>
<ol>
<li>找出待排数组中的最大，最小元素</li>
<li>统计数组中每个值为 i 的元素出现的次数，存入索引数组的第 i 相中</li>
<li>对所有计数累加</li>
<li>反向填充目标数组：元素 i 放到新数组第 C[i] 位置，美方一个元素 C[i] - 1</li>
</ol>
<p>时间/空间复杂度：O(n+k)</p>
<h2 id="普通实现"><a href="#普通实现" class="headerlink" title="普通实现"></a>普通实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountingSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> Random().ints(<span class="number">0</span>, <span class="number">100</span>).limit(<span class="number">10</span>).toArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;Origin: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">        <span class="keyword">int</span>[] result = countingSort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;After:  &quot;</span> + Arrays.toString(result));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] countingSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">        <span class="comment">// 遍历数组，得到最大值</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];  <span class="comment">// 这里之前写的是 max = 0; 如果原数组包含负数就挂了。。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; j) &#123;</span><br><span class="line">                max = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根据这个值新建一个用于计数的数组, 比如原数组最大值为 2，新建的计数数组为 [0, 1, 2]，所以声明长度的时候为 max + 1</span></span><br><span class="line">        <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[max + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 再次遍历数组，将对应的 bucket 下标坐 ++ 操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            bucket[i]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历 bucket 数组，将统计结果塞到新建结果集中</span></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucket.length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (bucket[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                result[index] = i;</span><br><span class="line">                index++;</span><br><span class="line">                bucket[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Origin: [36, 7, 70, 84, 69, 65, 88, 11, 16, 87]</span></span><br><span class="line"><span class="comment">// After:  [7, 11, 16, 36, 65, 69, 70, 84, 87, 88]</span></span><br></pre></td></tr></table></figure>

<p>步骤和思路很都简单明了，容易理解</p>
<h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>但是上面的实现有一个弊端，就是，他是不稳定的。。。。</p>
<p>所谓的稳定性，简单来说，如果原数组中，有两个相等的值 arr[i], arr[j]，在排序后他们的前后顺序还保持一致，那么就是稳定的。</p>
<p>好处：稳定的算法，第一个键排序的结果可以当作第二次排序的输入使用</p>
<p>PS：这个说法我大致有感觉，但是具体还是没把握。。。</p>
<h2 id="保证稳定性的实现"><a href="#保证稳定性的实现" class="headerlink" title="保证稳定性的实现"></a>保证稳定性的实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountingSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> Random().ints(<span class="number">0</span>, <span class="number">10</span>).limit(<span class="number">10</span>).toArray();</span><br><span class="line">        System.out.printf(<span class="string">&quot;%-10s: %s%n&quot;</span>, <span class="string">&quot;Origin&quot;</span>, Arrays.toString(arr));</span><br><span class="line">        <span class="keyword">int</span>[] result = countingSort(arr);</span><br><span class="line">        System.out.printf(<span class="string">&quot;%-10s: %s%n&quot;</span>, <span class="string">&quot;After&quot;</span>, Arrays.toString(result));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] countingSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">int</span> max = getMax(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据这个值新建一个用于计数的数组, 比如原数组最大值为 2，新建的计数数组为 [0, 1, 2]，所以声明长度的时候为 max + 1</span></span><br><span class="line">        <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[max + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 再次遍历数组，将对应的 bucket 下标做 ++ 操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            bucket[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%-10s: %s%n&quot;</span>, <span class="string">&quot;Bucket&quot;</span>, Arrays.toString(bucket));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建一个数组存储下标结束的值，用于保证排序稳定性</span></span><br><span class="line">        <span class="keyword">int</span>[] endIndex = <span class="keyword">new</span> <span class="keyword">int</span>[bucket.length];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; endIndex.length; i++) &#123;</span><br><span class="line">            sum += bucket[i];</span><br><span class="line">            endIndex[i] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%-10s: %s%n&quot;</span>, <span class="string">&quot;endIndex&quot;</span>, Arrays.toString(endIndex));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历 bucket 数组，将统计结果塞到新建结果集中</span></span><br><span class="line">        <span class="comment">// 这一段实现踩了好多坑</span></span><br><span class="line">        <span class="comment">//  1. i 结束条件 &gt;= 0，第一次实现没有把 = 纳入</span></span><br><span class="line">        <span class="comment">//  2. 后两句的 endIndex[arr[i]] 老是写成 endIndex[i]，对应关系还是没有写清楚</span></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            result[endIndex[arr[i]] - <span class="number">1</span>] = arr[i];</span><br><span class="line">            endIndex[arr[i]]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 遍历数组，得到最大值</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; j) &#123;</span><br><span class="line">                max = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Origin    : [4, 6, 8, 3, 8, 0, 0, 4, 3, 5]</span></span><br><span class="line"><span class="comment">// Bucket    : [2, 0, 0, 2, 2, 1, 1, 0, 2]</span></span><br><span class="line"><span class="comment">// endIndex  : [2, 2, 2, 4, 6, 7, 8, 8, 10]</span></span><br><span class="line"><span class="comment">// After     : [0, 0, 3, 3, 4, 4, 5, 6, 8, 8]</span></span><br></pre></td></tr></table></figure>

<h2 id="不是从-0-开始的实现"><a href="#不是从-0-开始的实现" class="headerlink" title="不是从 0 开始的实现"></a>不是从 0 开始的实现</h2><p>之前的实现还是有瑕疵，作为统计数组的下标都是从 0 开始的，在一开始统计最值的时候可以同时统计最小值，缩小样本空间，减少空间消耗</p>
<p>在之前的练习中理解了下标，值之间的对应关系，修改一下并不十分麻烦，挺好理解的。</p>
<p>有的示例中会把 bucket 和 endIndex 合并来减少内存开销，我觉得都 OK，这样写思路会清晰一点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountingSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> Random().ints(<span class="number">0</span>, <span class="number">10</span>).limit(<span class="number">10</span>).toArray();</span><br><span class="line">        System.out.printf(<span class="string">&quot;%-10s: %s%n&quot;</span>, <span class="string">&quot;Origin&quot;</span>, Arrays.toString(arr));</span><br><span class="line">        <span class="keyword">int</span>[] result = countingSort(arr);</span><br><span class="line">        System.out.printf(<span class="string">&quot;%-10s: %s%n&quot;</span>, <span class="string">&quot;After&quot;</span>, Arrays.toString(result));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] countingSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">        <span class="comment">// 遍历数组，得到最值</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> min = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; j) &#123;</span><br><span class="line">                max = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; j) &#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据最值新建一个用于计数的数组, 比如原数组最大值为 4，最小值为 2，新建的计数数组为 [2，3，4]，所以声明长度的时候为 max - min + 1</span></span><br><span class="line">        <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[max - min + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 再次遍历数组，将对应的 bucket 下标做 ++ 操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            bucket[i - min]++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%-10s: %s%n&quot;</span>, <span class="string">&quot;Bucket&quot;</span>, Arrays.toString(bucket));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建一个数组存储下标结束的值，用于保证排序稳定性</span></span><br><span class="line">        <span class="keyword">int</span>[] endIndex = <span class="keyword">new</span> <span class="keyword">int</span>[bucket.length];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; endIndex.length; i++) &#123;</span><br><span class="line">            sum += bucket[i];</span><br><span class="line">            endIndex[i] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%-10s: %s%n&quot;</span>, <span class="string">&quot;endIndex&quot;</span>, Arrays.toString(endIndex));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历 bucket 数组，将统计结果塞到新建结果集中</span></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            result[endIndex[arr[i] - min] - <span class="number">1</span>] = arr[i];</span><br><span class="line">            endIndex[arr[i] - min]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Origin    : [5, 1, 7, 6, 1, 0, 5, 2, 0, 3]</span></span><br><span class="line"><span class="comment">// Bucket    : [2, 2, 1, 1, 0, 2, 1, 1]</span></span><br><span class="line"><span class="comment">// endIndex  : [2, 4, 5, 6, 6, 8, 9, 10]</span></span><br><span class="line"><span class="comment">// After     : [0, 0, 1, 1, 2, 3, 5, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>

<h2 id="继续演进"><a href="#继续演进" class="headerlink" title="继续演进"></a>继续演进</h2><p>既然都写到这里了，直接在源代码基础上，直接将 bucket 和 endIndex 合并了，so easy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountingSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> Random().ints(<span class="number">0</span>, <span class="number">10</span>).limit(<span class="number">10</span>).toArray();</span><br><span class="line">        System.out.printf(<span class="string">&quot;%-10s: %s%n&quot;</span>, <span class="string">&quot;Origin&quot;</span>, Arrays.toString(arr));</span><br><span class="line">        <span class="keyword">int</span>[] result = countingSort(arr);</span><br><span class="line">        System.out.printf(<span class="string">&quot;%-10s: %s%n&quot;</span>, <span class="string">&quot;After&quot;</span>, Arrays.toString(result));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] countingSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">        <span class="comment">// 遍历数组，得到最值</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> min = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; j) &#123;</span><br><span class="line">                max = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; j) &#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据最值新建一个用于计数的数组, 比如原数组最大值为 4，最小值为 2，新建的计数数组为 [2，3，4]，所以声明长度的时候为 max - min + 1</span></span><br><span class="line">        <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[max - min + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 再次遍历数组，将对应的 bucket 下标做 ++ 操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            bucket[i - min]++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%-10s: %s%n&quot;</span>, <span class="string">&quot;Bucket&quot;</span>, Arrays.toString(bucket));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建一个数组存储下标结束的值，用于保证排序稳定性</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; bucket.length; i++) &#123;</span><br><span class="line">            bucket[i] = bucket[i] + bucket[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%-10s: %s%n&quot;</span>, <span class="string">&quot;Index&quot;</span>, Arrays.toString(bucket));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历 bucket 数组，将统计结果塞到新建结果集中</span></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            result[bucket[arr[i] - min] - <span class="number">1</span>] = arr[i]; <span class="comment">// 下标计算注意一下，arr[i] - min 取出 bucket 存储的位置值，但是这个值比下标大1</span></span><br><span class="line">            bucket[arr[i] - min]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Origin    : [1, 4, 6, 3, 9, 5, 0, 0, 9, 8]</span></span><br><span class="line"><span class="comment">// Bucket    : [2, 1, 0, 1, 1, 1, 1, 0, 1, 2]</span></span><br><span class="line"><span class="comment">// Index     : [2, 3, 3, 4, 5, 6, 7, 7, 8, 10]</span></span><br><span class="line"><span class="comment">// After     : [0, 0, 1, 3, 4, 5, 6, 8, 9, 9]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>计数排序</tag>
      </tags>
  </entry>
  <entry>
    <title>堆排序</title>
    <url>/hexo/2021/05/05/Algorithm-heap-sort/</url>
    <content><![CDATA[<p>堆排序是一种利用堆特性的选择排序，复杂度为 O(nlog<sup>n</sup>)</p>
<p>堆是一颗完全二叉树</p>
<p>堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了</p>
<p>将数组映射为二叉树结构，对应关系如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">(50) --&gt; (45)</span><br><span class="line">(50) --&gt; (40)</span><br><span class="line">(45) --&gt; (20)</span><br><span class="line">(45) --&gt; (25)</span><br><span class="line">(40) --&gt; (35)</span><br><span class="line">(40) --&gt; (30)</span><br><span class="line">(20) --&gt; (10)</span><br><span class="line">(20) --&gt; (15)</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<img  src=http://www.plantuml.com/plantuml/svg/qp0rq5JGrRLJq30nrUJIGF0CW3oW48HdXCe3gJI1gJH6vO5K6i5uXgWyKqq0>

<table>
<thead>
<tr>
<th align="center">#</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">5</th>
<th align="center">6</th>
<th align="center">7</th>
<th align="center">8</th>
</tr>
</thead>
<tbody><tr>
<td align="center">arr</td>
<td align="center">50</td>
<td align="center">45</td>
<td align="center">40</td>
<td align="center">20</td>
<td align="center">25</td>
<td align="center">35</td>
<td align="center">30</td>
<td align="center">10</td>
<td align="center">15</td>
</tr>
</tbody></table>
<p>该数组从逻辑上讲就是一个堆结构，我们用简单的公式来描述一下堆的定义就是：</p>
<p>大顶堆：arr[i] &gt;= arr[2i+1] &amp;&amp; arr[i] &gt;= arr[2i+2]  </p>
<p>小顶堆：arr[i] &lt;= arr[2i+1] &amp;&amp; arr[i] &lt;= arr[2i+2]  </p>
<p>下标与节点位置关系：</p>
<ul>
<li>下标为 i 的节点父节点下标： (i-1)/2 整数除法</li>
<li>下标为 i 的节点的左孩子下标：i*2 + 1</li>
<li>下标为 i 的节点的右孩子下标：i*2 + 2</li>
<li>最后一个非叶子节点位置：(数组长度/2) - 1</li>
</ul>
<p>最后一点是怎么得到的？隐隐记得之前看过的那本数据结构数上貌似有类似的答案。。。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123; <span class="number">50</span>, <span class="number">45</span>, <span class="number">40</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">35</span>, <span class="number">30</span>, <span class="number">10</span>, <span class="number">15</span> &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;Origin: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">        heapSort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;After:  &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构建大顶堆, 即从最后一个非叶子节点开始对之前的节点分别做大顶堆调整</span></span><br><span class="line">        <span class="comment">// i=0 时也需要计算，指的时 0 号位元素的排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            heapify(arr, arr.length, i); <span class="comment">// 起始点是最后一个节点，有时候我会写成 0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 已经是大顶堆了，先交换，在调整，一直重复 n-1 次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            swap(arr, <span class="number">0</span>, i);</span><br><span class="line">            heapify(arr, i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> length, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> largest = pos;</span><br><span class="line">        <span class="keyword">int</span> lson = pos * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> rson = pos * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lson &lt; length, 不包含相等的情况，不然数组越界了</span></span><br><span class="line">        <span class="keyword">if</span> (lson &lt; length &amp;&amp; arr[largest] &lt; arr[lson]) &#123;</span><br><span class="line">            largest = lson;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rson &lt; length &amp;&amp; arr[largest] &lt; arr[rson]) &#123;</span><br><span class="line">            largest = rson;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (largest != pos) &#123;</span><br><span class="line">            swap(arr, largest, pos);</span><br><span class="line">            heapify(arr, length, largest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> pos1, <span class="keyword">int</span> pos2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[pos1];</span><br><span class="line">        arr[pos1] = arr[pos2];</span><br><span class="line">        arr[pos2] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h2><ul>
<li><a href="https://www.cnblogs.com/chengxiao/p/6129630.html">CNBLOG</a></li>
<li><a href="https://www.bilibili.com/video/BV1fp4y1D7cj?from=search&seid=3873546409410814895">虽然是 C 实现，但是思路很清晰</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>堆排序</tag>
      </tags>
  </entry>
  <entry>
    <title>插入排序</title>
    <url>/hexo/2021/04/20/Algorithm-insertion-sort/</url>
    <content><![CDATA[<ul>
<li>参考<a href="https://zhuanlan.zhihu.com/p/122293204">动图</a></li>
</ul>
<p>插入排序是一个很基础的排序方法，基本解法思路为：</p>
<p>将待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</p>
<p>时间复杂度：O(n<sup>2</sup>)</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 第一次计算，拿二号元素和一号元素比较，如果二号小于一号，交换位置。计算后前两个元素为规则元素</span></span><br><span class="line"><span class="comment"> * 2. 第二次计算，拿三号元素依次和二号，一号做比较，如果三号小于其中某个元素，交换位置</span></span><br><span class="line"><span class="comment"> * 3. 重复以上规则对剩余元素进行排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertionSortDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] sample = <span class="keyword">new</span> Random().ints(<span class="number">0</span>, <span class="number">100</span>).limit(<span class="number">10</span>).toArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;Origin: &quot;</span> + Arrays.toString(sample));</span><br><span class="line"></span><br><span class="line">        insertionSort(sample);</span><br><span class="line">        System.out.println(<span class="string">&quot;After:  &quot;</span> + Arrays.toString(sample));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span>[] sample)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sample.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sample[j] &lt; sample[j-<span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(sample, j, j-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] sample, <span class="keyword">int</span> pos1, <span class="keyword">int</span> pos2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = sample[pos1];</span><br><span class="line">        sample[pos1] = sample[pos2];</span><br><span class="line">        sample[pos2] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Origin: [54, 66, 34, 28, 0, 10, 6, 61, 42, 97]</span></span><br><span class="line"><span class="comment">// After:  [0, 6, 10, 28, 34, 42, 54, 61, 66, 97]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>插入排序</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/hexo/2021/04/28/Algorithm-merge-sort/</url>
    <content><![CDATA[<p>采用分治(Divide and Conquer)的思想，解题思路如下：</p>
<ol>
<li>先将整个数组分为有序数组(对半分，直到长度为1)</li>
<li>两两合并，并确保合并后的数组有序 - 二路归并</li>
<li>重复直到所有数组合并完成</li>
</ol>
<p>时间复杂度 O(nlog<sup>n</sup>)</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] sample = <span class="keyword">new</span> Random().ints(<span class="number">0</span>, <span class="number">100</span>).limit(<span class="number">10</span>).toArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;Origin: &quot;</span> + Arrays.toString(sample));</span><br><span class="line"></span><br><span class="line">        mergeSort(sample, <span class="number">0</span>, sample.length - <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Origin: &quot;</span> + Arrays.toString(sample));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] sample, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 结束条件</span></span><br><span class="line">        <span class="keyword">if</span> (low &gt;= high)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 对半分</span></span><br><span class="line">        <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 分别对两个子数组做归并排序</span></span><br><span class="line">        mergeSort(sample, low, mid);</span><br><span class="line">        mergeSort(sample, mid + <span class="number">1</span>, high);</span><br><span class="line">        <span class="comment">// 合并两个子数组</span></span><br><span class="line">        merge(sample, low, mid, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] sample, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 声明零时数组存放排序结果</span></span><br><span class="line">        <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[high - low + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> i = low, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 比较两个子数组的最值，并放到临时数组中</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sample[i] &lt; sample[j]) &#123;</span><br><span class="line">                tmp[index++] = sample[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp[index++] = sample[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将子数组剩余值放入临时数组中，经过上一步之后其中一个数组已经空了，所以下面两个 while 先后顺序没关系</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">            tmp[index++] = sample[i++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (j &lt;= high) &#123;</span><br><span class="line">            tmp[index++] = sample[j++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将临时数组中的结果覆盖到原数组中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> pos = <span class="number">0</span>; pos &lt; tmp.length; pos++) &#123;</span><br><span class="line">            sample[low + pos] = tmp[pos];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>归并排序</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/hexo/2021/04/08/Algorithm-quick-sort/</url>
    <content><![CDATA[<p>分而治之（divide and conquer，D&amp;C）- 种著名的递归式问题解决方法</p>
<h2 id="4-1-分而治之"><a href="#4-1-分而治之" class="headerlink" title="4.1 分而治之"></a>4.1 分而治之</h2><p>练习1: 有一块 1680 x 640 的土地，将它等分成一个个正方形，那么正方形面积最大时，边长为多少？</p>
<p>解决方案，根据<strong>欧几里得</strong>定律，我们先将长方形分解成 640x640 + 640x640 + 640x400，然后再将 640x400 的长方形按照同样的方式分解，到最后分解为正方形时就是我们要的答案了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSquar</span>(<span class="params">length, width</span>):</span> </span><br><span class="line">    <span class="keyword">if</span> length%width == <span class="number">0</span>: </span><br><span class="line">        <span class="keyword">return</span> width </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> getSquar(width, length%width) </span><br><span class="line"></span><br><span class="line">getSquar(<span class="number">1680</span>, <span class="number">640</span>) </span><br><span class="line"><span class="comment"># 80</span></span><br></pre></td></tr></table></figure>

<p>重申一下 D&amp;C 的工作原理：</p>
<ol>
<li>找出简单的基线条件</li>
<li>确定如何缩小问题的规模，使其符合基线条件</li>
</ol>
<p>练习2: 使用 D&amp;C 的思路计算一个数组的和, sum = first + sum(sec…end)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [sub <span class="keyword">for</span> sub <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">list</span>):</span></span><br><span class="line">    <span class="keyword">if</span> list:</span><br><span class="line">        <span class="keyword">return</span> list[<span class="number">0</span>] + sum(list[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">sum(list)</span><br><span class="line"><span class="comment"># 45</span></span><br></pre></td></tr></table></figure>

<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>练习：准备一个无序数组，使用快排重新排序</p>
<p>快排原理：随机从数组中选择一个数作为基准，然后将数组分为 大于基准的数 + 基准 + 小于基准的数，再按照同样的思路对两堆数进行同样的排序，直到堆的 len &lt; 2 为止，排序结束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = random.sample(range(<span class="number">0</span>, <span class="number">100</span>), <span class="number">10</span>)</span><br><span class="line"><span class="comment"># [71, 70, 99, 91, 12, 5, 80, 61, 17, 24]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qsort</span>(<span class="params">list</span>):</span> </span><br><span class="line">    <span class="keyword">if</span> len(list) &gt; <span class="number">1</span>: </span><br><span class="line">        pivot = list[<span class="number">0</span>] </span><br><span class="line">        small_partition = [sub <span class="keyword">for</span> sub <span class="keyword">in</span> list[<span class="number">1</span>:] <span class="keyword">if</span> sub &lt; pivot] </span><br><span class="line">        big_partition = [sub <span class="keyword">for</span> sub <span class="keyword">in</span> list[<span class="number">1</span>:] <span class="keyword">if</span> sub &gt;= pivot] </span><br><span class="line">        <span class="keyword">return</span> qsort(small_partition) + [pivot] + qsort(big_partition) </span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line"><span class="comment"># [5, 12, 17, 24, 61, 70, 71, 91, 80, 99]</span></span><br><span class="line"><span class="comment"># 看了下书上的答案基本一致 (●°u°●)​ 」</span></span><br></pre></td></tr></table></figure>

<h2 id="4-3-再谈大O表示法"><a href="#4-3-再谈大O表示法" class="headerlink" title="4.3 再谈大O表示法"></a>4.3 再谈大O表示法</h2><p>常见大O运行时间</p>
<p><img src="c4_01.png" alt="常见大O运行时间"></p>
<h3 id="4-3-2-平均情况和最糟情况"><a href="#4-3-2-平均情况和最糟情况" class="headerlink" title="4.3.2  平均情况和最糟情况"></a>4.3.2  平均情况和最糟情况</h3><p>当最糟情况时，n 个元素的数组，每层分析 n 次，栈深为 n, O(n) x O(n) = O(n<sup>2</sup>)</p>
<p>平均情况时，n 个元素的数组，每层分析 n 次，栈深为 log<sup>n</sup>, 时间复杂度为 O(n) x O(log<sup>n</sup>) = O(nlog<sup>n</sup>)</p>
<h2 id="Java-中的快排实现"><a href="#Java-中的快排实现" class="headerlink" title="Java 中的快排实现"></a>Java 中的快排实现</h2><p>Java 中快排的实现思路和 Python 中的是一样的，但是可能由于语法支持上的不同，感觉上，Java 的实现要比 Python 的复杂很多</p>
<p>PS: Java 实现中的异样感来源于他没有新建数组，所有的操作都是在原来的数组上实现的，节省了资源</p>
<p>示例说明：</p>
<p>以第一个元素为基准，先遍历一遍数组将数组分为 [小于等于 pivot] + [pivot] + [大于 pivot] 三部分, 然后再对大于和小于的两部分做同样的算法</p>
<p>参考 <a href="https://blog.csdn.net/Holmofy/article/details/71168530">CSDN</a> 讲解的很详细，难点集中在分组的算法上，这里使用<strong>挖坑法</strong>。</p>
<p>选取数组的第一个元素作为 pivot，分别记录起止点下标i，j. 先从右向左找<strong>小于</strong>pivot的元素, 找到了就和 i 做交换。然后从左向右找<strong>大于</strong>pivot的元素，和 j 做交换，直到 i &gt;= j 结束。</p>
<p>完了将 pivot 的值赋给 i 位置。这个时候 i 和 j 是相等的。经过这一次遍历，数组被分为以 pivot 为界的两个自数组，元素分别小于和大于 pivot。</p>
<p>PS: 必须先从右向左扫描，不然我们就丢失了 j 的初始值引用了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSortDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] sample = <span class="keyword">new</span> Random().ints(<span class="number">0</span>, <span class="number">100</span>).limit(<span class="number">10</span>).toArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;Origin: &quot;</span> + Arrays.toString(sample));</span><br><span class="line"></span><br><span class="line">        qsort(sample, <span class="number">0</span>, sample.length - <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;After:  &quot;</span> + Arrays.toString(sample));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pivot_index = partition(arr, start, end);</span><br><span class="line">        <span class="comment">// 子数组排序的时候，pivot 是不需要参与的，不然结果会出错！！</span></span><br><span class="line">        qsort(arr, start, pivot_index - <span class="number">1</span>);</span><br><span class="line">        qsort(arr, pivot_index + <span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以第一个元素为基准，对数组排序，排序完之后，格式为 [小于pivot + pivot + 大于pivot]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> pivot index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[start];</span><br><span class="line">        <span class="keyword">int</span> i = start, j = end;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[j] &gt; pivot &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            <span class="keyword">while</span> (arr[i] &lt;= pivot &amp;&amp; i &lt; j) &#123; <span class="comment">// 其中一个 while 必须包含 &#x27;=&#x27; 的情况，不然排序会失败</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = pivot;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [13, 40, 60, 68, 78, 82, 91, 92, 96, 99]</span></span><br></pre></td></tr></table></figure>

<h2 id="Arrays-sort-实现"><a href="#Arrays-sort-实现" class="headerlink" title="Arrays.sort 实现"></a>Arrays.sort 实现</h2><p>Arrays 在进行 sort 排序的时候可能会采用 插入排序，双轴快排 或 归并排序。具体判断流出如下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+--------------+                                                                                                                                      </span><br><span class="line">| Arrays.sort()|                                                                                                                                      </span><br><span class="line">+--------------+                                                                                                                                      </span><br><span class="line">        |                                                                                                                                             </span><br><span class="line">        |                                                                                                                                             </span><br><span class="line">        |                                                                                                                                             </span><br><span class="line">        |                                                                                                                                             </span><br><span class="line">        v                                                                                                                                             </span><br><span class="line"> +-------------+      N          +----------------------------+                                                                                       </span><br><span class="line"> |length &lt; 286 |---------------&gt; | check if arr nearly sorted |                                                                                       </span><br><span class="line"> +-------------+                 +----------------------------+                                                                                       </span><br><span class="line">        |             N                         |                                                                                                     </span><br><span class="line">        |&lt;--------------------------------------|                                                                                                     </span><br><span class="line">        |                                       |                                                                                                     </span><br><span class="line">        v                                       |                                                                                                     </span><br><span class="line"> +-------------+      N                         |                                                                                                     </span><br><span class="line"> |length &lt; 47  |--------------                  |Y                                                                                                    </span><br><span class="line"> +-------------+             |                  |                                                                                                     </span><br><span class="line">        |                    |                  |                                                                                                     </span><br><span class="line">        |Y                   |                  |                                                                                                     </span><br><span class="line">        |                    |                  |                                                                                                     </span><br><span class="line">        v                    v                  v                                                                                                     </span><br><span class="line">+----------------+     +------------+     +------------+                                                                                              </span><br><span class="line">| insertion sort |     | quick sort |     | merge sort |                                                                                              </span><br><span class="line">+----------------+     +------------+     +------------+                                                                                              </span><br><span class="line">        |                    |                  |                                                                                                     </span><br><span class="line">        |                    |                  |                                                                                                     </span><br><span class="line">        v                    |                  |                                                                                                     </span><br><span class="line">  +-------------+            |                  |                                                                                                     </span><br><span class="line">  | finish sort | &lt;------------------------------                                                                                                     </span><br><span class="line">  +-------------+                                                                                                                                     </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>快速排序</tag>
        <tag>quick sort</tag>
      </tags>
  </entry>
  <entry>
    <title>基数排序</title>
    <url>/hexo/2021/05/10/Algorithm-radix-sort/</url>
    <content><![CDATA[<p>算法描述：</p>
<ol>
<li>取得数组中的最大数，并取得位数</li>
<li>arr为原始数组，从最低位开始取每个位组成radix数组</li>
<li>对radix进行计数排序（利用计数排序适用于小范围数的特点）</li>
</ol>
<p>稳定，时间复杂度 O(d*2n)</p>
<h2 id="课外小知识"><a href="#课外小知识" class="headerlink" title="课外小知识"></a>课外小知识</h2><p>java 中的 n 次方计算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Math.pow(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">System.out.println(Math.pow(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line"><span class="comment">// 8.0</span></span><br><span class="line"><span class="comment">// 9.0</span></span><br></pre></td></tr></table></figure>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadixSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">67</span>, <span class="number">75</span>, <span class="number">61</span>, <span class="number">18</span>, <span class="number">60</span>, <span class="number">30</span>, <span class="number">90</span>, <span class="number">19</span>, <span class="number">89</span>, <span class="number">35</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="keyword">int</span> max = getMaxDigit(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;Max: &quot;</span> + max);</span><br><span class="line">        <span class="keyword">int</span>[] ret = radixSort(arr, max);</span><br><span class="line">        System.out.println(Arrays.toString(ret));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] radixSort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> length) &#123;</span><br><span class="line">        <span class="keyword">int</span> mod = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> dev = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++, mod *= <span class="number">10</span>, dev *= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> division = (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k : arr) &#123;</span><br><span class="line">                <span class="keyword">int</span> remainder = k / division % <span class="number">10</span>;</span><br><span class="line">                bucket[remainder]++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;bucket: &quot;</span> + Arrays.toString(bucket));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; bucket.length; j++) &#123;</span><br><span class="line">                bucket[j] = bucket[j] + bucket[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;bucket: &quot;</span> + Arrays.toString(bucket));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = arr.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123; <span class="comment">// 等于 0 时也要计算</span></span><br><span class="line">                System.out.println(<span class="string">&quot;arr[j]: &quot;</span> + arr[j] + <span class="string">&quot;; division: &quot;</span> + division + <span class="string">&quot;; reminder: &quot;</span> + arr[j] / division % <span class="number">10</span>);</span><br><span class="line">                <span class="keyword">int</span> indexOfBucket = bucket[arr[j] / division % <span class="number">10</span>];</span><br><span class="line">                System.out.println(<span class="string">&quot;index: &quot;</span> + index);</span><br><span class="line">                result[indexOfBucket - <span class="number">1</span>] = arr[j];</span><br><span class="line">                bucket[arr[j] / division % <span class="number">10</span>]--;</span><br><span class="line">                System.out.println(Arrays.toString(result));</span><br><span class="line">            &#125;</span><br><span class="line">            System.arraycopy(result, <span class="number">0</span>, arr, <span class="number">0</span>, arr.length);</span><br><span class="line">            System.out.println(<span class="string">&quot;Reset arr: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">            Arrays.fill(bucket, <span class="number">0</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Reset ret: &quot;</span> + Arrays.toString(result));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxDigit</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// get max value</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; i)</span><br><span class="line">                max = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get max value length</span></span><br><span class="line">        <span class="keyword">return</span> String.valueOf(max).length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种从低位开始的排序叫做：Least significant digital</p>
<h2 id="MSD"><a href="#MSD" class="headerlink" title="MSD"></a>MSD</h2><p>Most signficat digital</p>
<h2 id="考虑负数"><a href="#考虑负数" class="headerlink" title="考虑负数"></a>考虑负数</h2><h2 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h2>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>基数排序</tag>
        <tag>radix sort</tag>
      </tags>
  </entry>
  <entry>
    <title>链表反转</title>
    <url>/hexo/2021/03/18/Algorithm-reverse-list/</url>
    <content><![CDATA[<p>反转一个单链表。</p>
<p>示例:</p>
<p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL<br>进阶: 你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p>
<h2 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h2><p>先想象一下最简单的模型，怎么将第一个元素反转？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> val, ListNode next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iterVal(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">iterVal</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(node)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node.val + <span class="string">&quot; -&gt; &quot;</span> + iterVal(node.next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以声明一个空节点，然后把原始节点的第一个节点的 next 引用指向这个空节点就是我们想要的效果了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">1</span>, <span class="keyword">new</span> ListNode(<span class="number">2</span>, <span class="keyword">new</span> ListNode(<span class="number">3</span>, <span class="keyword">new</span> ListNode(<span class="number">4</span>, <span class="keyword">new</span> ListNode(<span class="number">5</span>, <span class="keyword">null</span>)))));</span><br><span class="line"></span><br><span class="line">        ListNode empty = <span class="keyword">null</span>;</span><br><span class="line">        head.next = empty;</span><br><span class="line">        System.out.println(head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 -&gt; null</span></span><br></pre></td></tr></table></figure>

<p>为了遍历后续的节点，我们需要在 head.next = empty 之前用另一变量来持有这个 next 引用 <code>ListNode holder1 = head.next;</code>。处理第二个节点的时候，我们其实重复了之前的操作，将它单独拆下来，然后拼接到 head 前面即可。按照这个思路，我可以直接联想使用 while 循环处理这个问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">1</span>, <span class="keyword">new</span> ListNode(<span class="number">2</span>, <span class="keyword">new</span> ListNode(<span class="number">3</span>, <span class="keyword">new</span> ListNode(<span class="number">4</span>, <span class="keyword">new</span> ListNode(<span class="number">5</span>, <span class="keyword">null</span>)))));</span><br><span class="line">        System.out.println(head);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ListNode result = <span class="keyword">null</span>;</span><br><span class="line">        ListNode holder;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            holder = head.next;</span><br><span class="line">            head.next = result;</span><br><span class="line">            result = head;</span><br><span class="line">            head = holder;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; null</span></span><br><span class="line"><span class="comment">// 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; null</span></span><br></pre></td></tr></table></figure>

<p>把上面的实现精简一下就是迭代法了 (●°u°●)​ 」</p>
<h2 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h2><p>想象的模型比较重要，我们准备两个空节点，一个用来拼接解析出来的节点，作为返回值，另一个用来持有后续节点，用来循环。</p>
<p>他这边有一个很奇特的点，就是平时我们在做链表操作的时候很多情况是<strong>持有一个最后的节点</strong>通过调用 node1.next = node2 的方式，在尾部拼接。但是这里的解体思路恰恰是相反的的，拿到一个新节点，通过 givenNode.next = node1 这种方式在头部拼接。第一次做的时候这个弯弯很难绕</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * input:  1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span></span><br><span class="line"><span class="comment"> * output: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseListSample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode fir = <span class="keyword">new</span> ListNode(<span class="number">1</span>, <span class="keyword">new</span> ListNode(<span class="number">2</span>, <span class="keyword">new</span> ListNode(<span class="number">3</span>, <span class="keyword">new</span> ListNode(<span class="number">4</span>, <span class="keyword">new</span> ListNode(<span class="number">5</span>)))));</span><br><span class="line">        System.out.println(fir.toString());</span><br><span class="line"></span><br><span class="line">        ListNode ret = reverseList(fir);</span><br><span class="line">        System.out.println(ret.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode next;</span><br><span class="line">        ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (Objects.nonNull(head)) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = pre;</span><br><span class="line">            pre = head;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; null</span></span><br><span class="line"><span class="comment">// 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; null</span></span><br></pre></td></tr></table></figure>

<h2 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h2><p>核心思想和前面的一致，具体到做表现形式上，我自己想出来的解法需要额外传入一个参数作为结果，有点累赘</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head, ListNode result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(head))</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    ListNode holder = head.next;</span><br><span class="line">    head.next = result;</span><br><span class="line">    <span class="comment">// 思路还是很清晰的， 先把传入的节点分离出来， 然后在作为 result 的节点前面一次添加分离出来的节点。当所有的节点都处理过后，返回</span></span><br><span class="line">    <span class="keyword">return</span> reverseList(holder, head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>搜索了一下单参数的解法</p>
<p>我们可以用 分治 的观点来看这个问题会更简单。终止条件为判空。否则，我们再次调用递归方法，拿到逆序结果。它骚就骚在一般我们的递归都是直接返回的，而它则是还要做一些操作。</p>
<p>但是值得注意的是，返回的结果是不能参与操作的，不然引用就会发生变化。必须通过现成的变量操作，不然循环就会被打破了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode current)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="keyword">null</span> || current.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line"></span><br><span class="line">    ListNode next = current.next; <span class="comment">// 拿到后续节点</span></span><br><span class="line">    </span><br><span class="line">    ListNode ret = reverseList(next); <span class="comment">// 拿到计算结果</span></span><br><span class="line">    current.next = <span class="keyword">null</span>; <span class="comment">// 打断当前节点, 防止闭环</span></span><br><span class="line">    next.next = current; <span class="comment">// 习惯性的写成 ret.next = current, 这样会打破迭代规律</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表反转</tag>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序</title>
    <url>/hexo/2021/04/20/Algorithm-selection-sort/</url>
    <content><![CDATA[<p>算法描述</p>
<ol>
<li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li>
<li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>
<li>重复第二步，直到所有元素均排序完毕。</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSortDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] sample = <span class="keyword">new</span> Random().ints(<span class="number">0</span>, <span class="number">100</span>).limit(<span class="number">10</span>).toArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;Origin: &quot;</span> + Arrays.toString(sample));</span><br><span class="line"></span><br><span class="line">        selectionSort(sample);</span><br><span class="line">        System.out.println(<span class="string">&quot;After:  &quot;</span> + Arrays.toString(sample));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] sample)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sample.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> max_idx = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; sample.length; j++) &#123; <span class="comment">// 这里注意一下，是对整个数组做 selection，所以为 sample.length, 如果写为 sample.length-1 则最后一个元素会跳过排序</span></span><br><span class="line">                <span class="keyword">if</span> (sample[max_idx] &lt; sample[j]) &#123;</span><br><span class="line">                    max_idx = j;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (max_idx != i) &#123;</span><br><span class="line">                swap(sample, i, max_idx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] sample, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = sample[i];</span><br><span class="line">        sample[i] = sample[j];</span><br><span class="line">        sample[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Origin: [32, 47, 97, 16, 3, 81, 61, 78, 43, 65]</span></span><br><span class="line"><span class="comment">// After:  [97, 81, 78, 65, 61, 47, 43, 32, 16, 3]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>选择排序</tag>
      </tags>
  </entry>
  <entry>
    <title>希尔排序</title>
    <url>/hexo/2021/05/04/Algorithm-shell-sort/</url>
    <content><![CDATA[<p>希尔排序是快排的一个变种，是首个突破 O(n<sup>2</sup>) 的排序算法。但是为什么说他快，看了一些知乎上的解释，这是一种实现简单，但是证明很难的算法。要用到很多数学概念，这里就算了。</p>
<p>算法说明：</p>
<ol>
<li>取一个固定的步长(通常为待排数组长度的一半), 将数组分组，进行插入排序。<ol>
<li>这里的分组并不是对半分，举例如下：假设有数组 [0, 1, 2, 3, 4, 5, 6, 7] 取步长 4，则 0，4 为一组，1，5为一组依次类推</li>
<li>分组后的排序，因为只有两个数比较，我也看到有直接用比较之后交换的，不一定是插入排序</li>
</ol>
</li>
<li>将固定步长取半重复之前的运算规则</li>
<li>直到排序完步长为 1 的情况，排序结束</li>
</ol>
<p>时间复杂度：</p>
<p>平均和最好： O(nlong<sup>n</sup>)<br>最坏： O(n<sup>2</sup>)</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>说实话，道理我都懂，但是在看 Java 版本的希尔排序实现的时候，我看是看了半天，加上搜索视频教程和本地 debug 才理解下来的，他别是在这个交替进行的点，奇数个元素分组规则上，卡了挺久的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] sample = <span class="keyword">new</span> Random().ints(<span class="number">0</span>, <span class="number">100</span>).limit(<span class="number">11</span>).toArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;Origin: &quot;</span> + Arrays.toString(sample));</span><br><span class="line">        shellSort(sample);</span><br><span class="line">        System.out.println(<span class="string">&quot;After:  &quot;</span> + Arrays.toString(sample));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] sample)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 步长操作</span></span><br><span class="line">        <span class="comment">// 边界条件为 step &gt; 0, 当 step = 1 时，即对整个 arr 做一次插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> step = sample.length / <span class="number">2</span>; step &gt; <span class="number">0</span>; step /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">//分组进行插入排序，这里需要注意的是，这个插入排序是交替进行的，这里困惑了很久</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = step; i &lt; sample.length; i++) &#123;</span><br><span class="line">                <span class="comment">// 以步长为基本单位做插入排序</span></span><br><span class="line">                <span class="keyword">int</span> j = i - step;</span><br><span class="line">                <span class="comment">// j &gt;= 0, 0 的时候也是合法的</span></span><br><span class="line">                <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; sample[j] &gt; sample[j + step]) &#123;</span><br><span class="line">                    <span class="comment">// 典型的通过中间变量交换值的逻辑</span></span><br><span class="line">                    <span class="keyword">int</span> temp = sample[j + step];</span><br><span class="line">                    sample[j + step] = sample[j];</span><br><span class="line">                    sample[j] = temp;</span><br><span class="line">                    j = j - step;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Origin: [84, 32, 55, 3, 57, 68, 75, 71, 12, 43, 50]</span></span><br><span class="line"><span class="comment">// After:  [3, 12, 32, 43, 50, 55, 57, 68, 71, 75, 84]</span></span><br></pre></td></tr></table></figure>

<h2 id="细节分析"><a href="#细节分析" class="headerlink" title="细节分析"></a>细节分析</h2><p>以 [84, 32, 55, 3, 57, 68, 75, 71, 12, 43, 50] 为例子分析</p>
<p>第一次分组，对半分，由于元素格式 11 个，步长 5，将整个数组分为了五组</p>
<table>
<thead>
<tr>
<th align="center">num</th>
<th align="center">elements</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">84, 68, 50</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">32, 75</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">55, 71</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">3, 12</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">57, 43</td>
</tr>
</tbody></table>
<p>我一开始以为代码实现的时候会先将 1 组中的各个元素抽出来，然后做一次插入排序，然后进行下第二组排序，一次类推。但实际上，在实现过程中，他会先将一组中第1，2 个元素用插入排序排完，然后直接跳到第二组，对1，2号元素排序，依次类推。等五个组的1，2 号元素都排完了，再回到第一组，对3号元素进行插入排序</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>希尔排序</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云购买服务器</title>
    <url>/hexo/2021/04/25/Alicloud-apply-new-service/</url>
    <content><![CDATA[<p>阿里云购买云服务，本地通过终端连接使用，终端工具，弹幕各种推荐 Mobaxtream, 打算试用一下</p>
<h2 id="创建安全组"><a href="#创建安全组" class="headerlink" title="创建安全组"></a>创建安全组</h2><p>阿里云上创建实例后，你只能通过他们提供的终端工具访问，如果你想要通过其他终端工具访问服务器，需要设置安全组。这个安全组你可以理解为云服务形势下的开启防火墙端口。</p>
<p>常用端口：</p>
<ul>
<li>21: FTP</li>
<li>22: SSH</li>
<li>80: HTTP</li>
<li>443: HTTPS</li>
<li>3306: mysql</li>
<li>8080: tomcat</li>
<li>6379: redis</li>
</ul>
<p>安全组 -&gt; 创建安全组，将常用端口添加进去即可</p>
<h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><p>实例可以理解为远程虚拟机，进入阿里云主界面，顶部选择 控制台 -&gt; 点右上角三条杠 -&gt; 下拉单选择 实例 -&gt; 右上角选择 创建实例</p>
<p>自定义购买下面选择：</p>
<ul>
<li>付费模式： 按量付费</li>
<li>地域：就近 - 上海</li>
<li>规格：测试 docker 选 1 核 2 G</li>
</ul>
<p>其他只需要注意一下安全组设置即可，创建完毕后，点击你创建的实例，进入面板后就可以看到你创建的实例的公网 IP，然后点击右上角的全部操作下拉单 -&gt; 修改密码</p>
<h2 id="远程链接"><a href="#远程链接" class="headerlink" title="远程链接"></a>远程链接</h2><p>下载 Mobaxtream 并安装，没什么好说的，新建 session 然后填写账号密码尝试链接，没什么问题的话都 OK 的</p>
<h2 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update</span><br><span class="line"></span><br><span class="line">yum install docker -y</span><br><span class="line"></span><br><span class="line">docker -v <span class="comment"># 检查版本</span></span><br><span class="line"></span><br><span class="line">service docker start <span class="comment"># 启动 docker 服务，不然 docker ps 都没法运行</span></span><br><span class="line">chkconfig docker on <span class="comment"># 设置开机运行</span></span><br></pre></td></tr></table></figure>

<h2 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h2><p>控制台界面搜索 容器镜像服务 -&gt; 镜像工具 -&gt; 镜像加速器</p>
<p>他会根据账号给出加速地址和配置方法，很直观， 对于 CentOS 可以通过修改 daemon 配置文件/etc/docker/daemon.json来使用加速器</p>
<p>sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-‘EOF’<br>{<br>  “registry-mirrors”: [“<a href="https://xxx.mirror.aliyuncs.com&quot;]">https://xxx.mirror.aliyuncs.com&quot;]</a><br>}<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker</p>
<h2 id="启动-nginx-镜像测试"><a href="#启动-nginx-镜像测试" class="headerlink" title="启动 nginx 镜像测试"></a>启动 nginx 镜像测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:80 --name my-nginx nginx </span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地测试</span></span><br><span class="line">curl localhost:8080</span><br><span class="line"><span class="comment"># &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment"># &lt;html&gt;</span></span><br><span class="line"><span class="comment"># &lt;head&gt;</span></span><br><span class="line"><span class="comment"># &lt;title&gt;Welcome to nginx!&lt;/title&gt;</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># &lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span></span><br><span class="line"><span class="comment"># &lt;p&gt;If you see this page, the nginx web server is successfully installed and</span></span><br><span class="line"><span class="comment"># working. Further configuration is required.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># &lt;/body&gt;</span></span><br><span class="line"><span class="comment"># &lt;/html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 外网直接通过浏览器输入 ip:8080 可以看到 nginx 页面显示成功！</span></span><br></pre></td></tr></table></figure>

<p>PS: 第一次测试内部访问成功，外部失败，查看安全组，发现添加输入框末端需要点击保存…</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache, Tomcat 和 Nginx 之间的关系</title>
    <url>/hexo/2020/07/03/Apache-vs-tomcat-vs-nginx/</url>
    <content><![CDATA[<p>想要解决的问题：</p>
<ol>
<li>Apache, Tomcat 和 Nginx 的定义/区别</li>
<li>Server 搭配拓扑图</li>
</ol>
<h2 id="Apache-Tomcat-和-Nginx-的定义-区别"><a href="#Apache-Tomcat-和-Nginx-的定义-区别" class="headerlink" title="Apache, Tomcat 和 Nginx 的定义/区别"></a>Apache, Tomcat 和 Nginx 的定义/区别</h2><p>名词解释：</p>
<ul>
<li>静态服务器，就是每次访问同一个地址只能返回同样的内容，不会改变</li>
</ul>
<p>Apache</p>
<blockquote>
<p>这里说的 Apache 指的是 Apache Http Server。静态服务器的一种，老牌(始于1995)，曾经的王者，近年来市场占有率下降。<br>模块多，性能稳定，rewrite 性能搞，配置相对复杂</p>
</blockquote>
<p>Nginx</p>
<blockquote>
<p>毛子出品，2004年首发，声势迅猛。如今是三巨头之一(另两个是Microsoft, Apache)，和 Apache 是同类产品。<br>支持反向代理，轻量级，非阻塞，高并发，社区活跃，bug 多</p>
</blockquote>
<p>Tomcat</p>
<blockquote>
<p>全名是 Apache Tomcat，Application Server 的一种，用来提供动态支持，和前面的不是一种类型。</p>
</blockquote>
<h2 id="Server-搭配拓扑图"><a href="#Server-搭配拓扑图" class="headerlink" title="Server 搭配拓扑图"></a>Server 搭配拓扑图</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">                                                       +-----------+</span><br><span class="line">                                              --------&gt;|  Tomcat01 |</span><br><span class="line">                                              |        |           |</span><br><span class="line">+--------------+          +------------+      |        +-----------+</span><br><span class="line">| Client       |          |Apache/Nginx|      |</span><br><span class="line">|              |--------&gt; |            |------|</span><br><span class="line">|              |          |            |      |</span><br><span class="line">+--------------+          +------------+      |</span><br><span class="line">                                              |        +-----------+</span><br><span class="line">                                              --------&gt;| Tomcat02  |</span><br><span class="line">                                                       |           |</span><br><span class="line">                                                       +-----------+</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
      <tags>
        <tag>解释</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 插件记事</title>
    <url>/hexo/2020/07/22/Chrome-%E6%8F%92%E4%BB%B6%E8%AE%B0%E4%BA%8B/</url>
    <content><![CDATA[<p>公司日常维护过程中，同事自己写的一个 Chrome 小插件很精巧，符合我小而美的审美，很适合处理某些需求，特此记录一下 Chrome 插件的小知识和一个阅读源码的收获</p>
<h2 id="插件目录结构"><a href="#插件目录结构" class="headerlink" title="插件目录结构"></a>插件目录结构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Root</span><br><span class="line">├── README.md</span><br><span class="line">├── background.js &lt;- 定义一些 js 脚本</span><br><span class="line">├── content.js</span><br><span class="line">├── doc</span><br><span class="line">│   └── images</span><br><span class="line">│       ├── extend_all.png</span><br><span class="line">│       ├── extend_status.png</span><br><span class="line">│       ├── extension_icon.png</span><br><span class="line">│       ├── extension_loaded.png</span><br><span class="line">│       └── load_unpacked_extension.png</span><br><span class="line">├── icon.png &lt;- icon 定义</span><br><span class="line">├── images</span><br><span class="line">│   ├── icon128.png</span><br><span class="line">│   ├── icon16.png</span><br><span class="line">│   └── icon48.png</span><br><span class="line">├── jquery-3.0.0.min.js</span><br><span class="line">├── manifest.json &lt;- 定义了 extension 的基本信息，权限等，可以概览整个应用</span><br><span class="line">├── options.html &lt;- 为客户提供可选项</span><br><span class="line">├── options.js</span><br><span class="line">├── popup.html &lt;- 点击弹出页面，用于交互</span><br><span class="line">├── popup.js</span><br><span class="line">├── style.css</span><br><span class="line">└── test.js</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://developer.chrome.com/extensions/getstarted">Chrome Extension Official</a> 官方文档好又多</li>
</ul>
<h2 id="JS-的一些知识点"><a href="#JS-的一些知识点" class="headerlink" title="JS 的一些知识点"></a>JS 的一些知识点</h2><ul>
<li>.aspx 页面，是基于微软 .Net 开发的站点</li>
<li>html 页面中可以直接在 onclick 里面写 logic，简直是随心所欲</li>
<li>通过 ajax 可以实现表单提交</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- click 中设置 confirm 内容 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ctl00$ContentPlaceHolder$GridViewLive$ctl02$Deletion&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Delete&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;if (!confirm(<span class="symbol">&amp;#39;</span>Are you sure you want to delete the company?<span class="symbol">&amp;#39;</span>)) return false; console.log(&#x27;Click Confirmed&#x27;)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  url: url,</span><br><span class="line">  data: data,</span><br><span class="line">  success: success,</span><br><span class="line">  dataType: dataType</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写形式</span></span><br><span class="line">$.post( <span class="string">&quot;ajax/test.html&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> data </span>) </span>&#123;</span><br><span class="line">  $( <span class="string">&quot;.result&quot;</span> ).html( data );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// form.serialize() 可以方便的实现数据提取</span></span><br><span class="line">$.post( <span class="string">&quot;test.php&quot;</span>, $( <span class="string">&quot;#testform&quot;</span> ).serialize() );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想要成功提示，还可以</span></span><br><span class="line">$.post(url, $(<span class="string">&quot;#ctl00&quot;</span>).serialize()).done(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"> data </span>) </span>&#123;</span><br><span class="line">    alert( <span class="string">&quot;extends success&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="调试脚本"><a href="#调试脚本" class="headerlink" title="调试脚本"></a>调试脚本</h2><p>由于这次只是查看代码，而且验证一些函数的功能，调试还是挺顺利的，直接通过 Chrome console 就完成了，各种变量自动装载完成，美滋滋儿。</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 渲染 ul 为树结构</title>
    <url>/hexo/2020/12/15/Code-snippet-use-html-show-ul-tag-in-tree-format/</url>
    <content><![CDATA[<p>看到网上有一段代码通过 CSS 把 ul+li 块渲染成目录树结构，很赞，加入收集。源代码链接: <a href="https://bootsnipp.com/snippets/ypNAe">bootsnipp</a></p>
<p>PS: 这个 post 最好是在这段代码下面嵌入一个页面显示效果，但是目前没时间做这方面的 re-search，以后如果有很多 html 示例的化可以考虑一下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;noindex, nofollow&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Tree<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/tree3.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bootstrap-css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;tree1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tree&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Node1</span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Node11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Node12<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Node13<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Node2</span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Company Maintenance<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Employee</span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Reports</span><br><span class="line">                            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Report1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Report2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Report3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Employee Maint<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Human Resources<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tree</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="comment">/* 画一条最外层 ul 边框的辅助线 */</span></span><br><span class="line">    <span class="comment">/* border: 1px solid red; */</span></span><br><span class="line">    <span class="attribute">position</span>: relative</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* 树状结构竖线部分 */</span></span><br><span class="line"><span class="selector-class">.tree</span> <span class="selector-tag">ul</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="comment">/* 伪类选择器，会选中 ul 的第一个元素 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tree</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#369</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="comment">/* font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* 树状结构横线部分 */</span></span><br><span class="line"> <span class="selector-class">.tree</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  覆盖最后一个节点多余的半截竖线 */</span></span><br><span class="line"><span class="selector-class">.tree</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一些平时发现的好的编程习惯</title>
    <url>/hexo/2021/01/08/Coding-best-practice/</url>
    <content><![CDATA[<h2 id="更抽象的命名"><a href="#更抽象的命名" class="headerlink" title="更抽象的命名"></a>更抽象的命名</h2><p>今天在写一个 Java bean 的时候，为了 merge bean 的属性，特意给这个 bean 写了一个 mergeUpdatedProperties(Properties props) 方法，同时 review 之后提出，直接用 merg(Bean bean) 的方式会更有扩展性，深以为然。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>习惯</tag>
      </tags>
  </entry>
  <entry>
    <title>编译好的 Java 类可以绕过类型检测？</title>
    <url>/hexo/2020/08/07/Compiled-Java-Class-Can-Bypass-Type-Check/</url>
    <content><![CDATA[<p>问题记录：</p>
<p>在做项目重构的时候遇到如下问题，repo1 下有 class A, 重构时我们在 repo1 中抽象出一个 interface FA 实现 A 的所有的方法，然后修改外部引用使 A 解偶。其中发现一个很有趣的现象，原先 repo2 使用 A 编译出来的 jar, 不做任何修改还是可以和 FA 源码进行编译，但是使用 repo2 的源码和 FA 源码进行编译会抛 mismatch 的 exception。猜测和 Java 编译规则有关系，难道是编译后的文件其实是一样的，所以原来的 jar 可以通用，但是源码的话和编译规则有冲突会挂。</p>
<p>本地试了下，并不能重现，不清楚是重现的不对还是公司的项目有什么特殊的处理方式，有机会再看看把 ╮(￣▽￣””)╭</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>编译器</tag>
      </tags>
  </entry>
  <entry>
    <title>原码，反码和补码</title>
    <url>/hexo/2019/12/07/Computer-science-basic-knowledge/</url>
    <content><![CDATA[<p>通过搜索 计算机组成原理 话题话的 计算机减法 了解更多细节</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>二进制数表示带符号值时，最高位位符号位，0表示正数，1表示负数，以 -1 为例：</p>
<p>反码：负数反码为其绝对值按位取反 1110<br>补码：负数补码等于反码 +1， -1 补码 1111</p>
<p>有符号的变量，内存中 1111 就表示 -1</p>
<p>反码，补码 这些概念都是为了方便计算机做减法而创建的，所有的数都以补码形式存在。正数的补码是本身，负数是以之前叙述的逻辑转化的数。减法结果和两个补码的加法就过时一样的。至此，我们就不必设计额外的减法器了，直接重用加法器就行了。</p>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
      <tags>
        <tag>原码</tag>
        <tag>反码</tag>
        <tag>补码</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome + SwitchyOmega 配置方案</title>
    <url>/hexo/2021/02/25/Configuration-for-chrome-and-switchyomega/</url>
    <content><![CDATA[<p>Chrome + SwitchyOmega 已经配置了无数遍了，抽出来单独写一篇详细教程</p>
<h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><p>外网限制，安装 Chrome 扩展极度不便。所有的第一步是安装 SwithyOmega 的扩展来翻墙。</p>
<ol>
<li>去 <a href="https://github.com/FelisCatus/SwitchyOmega">SwitchyOmega</a> 官网下载 crx 文件。</li>
<li>重命名，将后缀改为 zip，然后直接拖到浏览器 - <strong>直接将 crx 文件拖进去会报错 <code>CRX_HEADER_INVALID</code></strong></li>
<li>左键点击插件 icon -&gt; Options -&gt; New profile 添加 Profile Proxy 类型配置文件</li>
<li>Protocol, Server, Port 一次填入 SOCKS5, 127.0.0.1, 1086</li>
<li>选择 auto switch, <code>Rule List Config</code> 下选择 AutoProxy 类型</li>
<li><code>Rule List URL</code> 填入 <code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code> 点击下载更新文件</li>
<li>Apply Change, 打完收工</li>
</ol>
<p>PS: 公司里面有提供 PAC 解决方案，很方便，规则都给你定好了 New Profile 选择 PAC 类型，填入指定的 URL, 再点击 download 即可</p>
<h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul>
<li><a href="https://github.com/FelisCatus/SwitchyOmega/wiki/GFWList">GFWList 配置教程 - 官方</a></li>
<li><a href="https://github.com/gfwlist/gfwlist">GFW 规则主页</a></li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>DBeaver 设置国内 Maven 源</title>
    <url>/hexo/2020/08/18/DBeaver-Set-Maven-Resource/</url>
    <content><![CDATA[<p>打开 DBeaver -&gt; Preferences -&gt; 搜索 Maven -&gt; Add, 填入信息 <code>http://maven.aliyun.com/nexus/content/groups/public/</code>，调整一下顺序，放到第一位。打完收工～</p>
<p>PS: 设置只有在新建 connection 时生效，所以已经创建的，删了重建即可</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>DBeaver</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/hexo/2021/04/09/Design-pattern-adapter/</url>
    <content><![CDATA[<blockquote>
<p><strong>The Adapter Pattern</strong> converts the interface of a class into another interface the clients expect.  Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.<br>适配器模式将一种接口类型转化为另一种，他用来解决类中的类型适配问题</p>
</blockquote>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>举例一个现实生活中的案例：插头转换器。比如我们的手机是两脚插头，但是家里只有三脚插座，那怎么整？答案是找一个插口转化器，把两脚的转成三脚的即可。adapter 模式的工作方式和这种解决方案完全一致。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+--------------------+     +-------+     +-------------+                                                                                              </span><br><span class="line">| Your existing      |     |Adaptor|     | Vendor      |                                                                                              </span><br><span class="line">| system             |     |       |     | Class       |                                                                                              </span><br><span class="line">|                    |---&gt; |       |----&gt;|             |                                                                                              </span><br><span class="line">|                    |     |       |     |             |                                                                                              </span><br><span class="line">|                    |     |       |     |             |                                                                                              </span><br><span class="line">+--------------------+     +-------+     +-------------+                                                                                              </span><br></pre></td></tr></table></figure>

<p>好了现在让我们用第一章的鸭子来举例子。话说有一天，PM 突然找到小码农说，我们的客户有一个特殊要求，想要一种有着火鸡内在的鸭子。小码农满脸的黑人问号，这也行？但是 PM 不管，说下周就要产品掩饰了，你自己看着办。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 假设之前的鸭子实现是通过 interface 来做的, 我们现在已有了 Duck，Turkey 的接口定义，以及 Turkey 的实现</span></span><br><span class="line"><span class="comment">* 我们只需要新建一个适配器，实现目标接口的方法，并且适配器持有需要代理的实例。在对应的方法中通过调用实例方法即可</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildTurkey</span> <span class="keyword">implements</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Gobble...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Fly a short distance...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuckAdaptor</span> <span class="keyword">implements</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Turkey turkey;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DuckAdaptor</span><span class="params">(Turkey turkey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.turkey = turkey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        turkey.gobble();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        turkey.fly();</span><br><span class="line">        turkey.fly();</span><br><span class="line">        turkey.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DuckAdaptor adaptor = <span class="keyword">new</span> DuckAdaptor(<span class="keyword">new</span> WildTurkey());</span><br><span class="line">        adaptor.quack();</span><br><span class="line">        adaptor.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Gobble...</span></span><br><span class="line"><span class="comment">// Fly a short distance...</span></span><br><span class="line"><span class="comment">// Fly a short distance...</span></span><br><span class="line"><span class="comment">// Fly a short distance...</span></span><br></pre></td></tr></table></figure>

<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+-----------------+     +---------------+                                                                                                            </span><br><span class="line">|                 |---&gt; |&lt;&lt;Interface&gt;&gt;  |                                                                                                            </span><br><span class="line">|    Client       |     |  Target       |                                                                                                            </span><br><span class="line">|                 |     +---------------+                                                                                                            </span><br><span class="line">+-----------------+             ^                                                                                                                    </span><br><span class="line">                                |                                                                                                                    </span><br><span class="line">                                |                                                                                                                    </span><br><span class="line">                                |                                                                                                                    </span><br><span class="line">                         +-------------+      +-----------------+                                                                                    </span><br><span class="line">                         |   Adapter   |      |   Adaptee       |                                                                                    </span><br><span class="line">                         |-------------| ----&gt;|-----------------|                                                                                    </span><br><span class="line">                         | request()   |      | specialRequest()|                                                                                    </span><br><span class="line">                         |             |      |                 |                                                                                    </span><br><span class="line">                         +-------------+      +-----------------+                                                                                    </span><br></pre></td></tr></table></figure>

<p>这里展示的是类 adaptor, 还有一种 class adaptor，但是由于 Java 是单继承的，语法上就不能实现 class adaptor 的这种定义。不过支持多继承的语言是可以实现的。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+-----------------+      +-------------+     +-----------------+                                                                                     </span><br><span class="line">|                 |---&gt;  |   Target    |     |   Adaptee       |                                                                                     </span><br><span class="line">|    Client       |      |-------------|     |-----------------|                                                                                     </span><br><span class="line">|                 |      | request()   |     | specialRequest()|                                                                                     </span><br><span class="line">+-----------------+      |             |     |                 |                                                                                     </span><br><span class="line">                         +-------------+     +-----------------+                                                                                     </span><br><span class="line">                                     ^         ^                                                                                                     </span><br><span class="line">                                     |         |                                                                                                     </span><br><span class="line">                                     |         |                                                                                                     </span><br><span class="line">                                     |         |                                                                                                     </span><br><span class="line">                                    +-------------+                                                                                                  </span><br><span class="line">                                    |   Adapter   |                                                                                                  </span><br><span class="line">                                    |-------------|                                                                                                  </span><br><span class="line">                                    | request()   |                                                                                                  </span><br><span class="line">                                    |             |                                                                                                  </span><br><span class="line">                                    +-------------+                                                                                                  </span><br></pre></td></tr></table></figure>

<h2 id="项目中可能用到-Adapter-的地方"><a href="#项目中可能用到-Adapter-的地方" class="headerlink" title="项目中可能用到 Adapter 的地方"></a>项目中可能用到 Adapter 的地方</h2><p>比如老代码中，很多地方会用到 Enumeration 类，但是在 JDK 1.2 时就推出了 Iterator 接口代替他。如果新的代码都时采用的 Iterator 做迭代，那么怎么兼容老的 Enumeration 呢。</p>
<p>可以新建一个 adapter 类，实现 iterator 接口，持有 enumeration 实现。在 client 中通过这个 adaptor 访问 enumeration。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterToEnum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;String&gt; strings = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        strings.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; enumeration = strings.elements();</span><br><span class="line"></span><br><span class="line">        IteratorAdapter adapter = <span class="keyword">new</span> IteratorAdapter(enumeration);</span><br><span class="line">        <span class="keyword">while</span> (adapter.hasNext()) &#123;</span><br><span class="line">            System.out.println(adapter.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PS: 书中视角 EnumerationAdapter, 但是我觉得不是应该叫 迭代器适配器 才合适吗？应该是我和作者对数据流向的理解相反，但是对这里的使用没有造成影响</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IteratorAdapter</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Enumeration&lt;String&gt; enumeration;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IteratorAdapter</span><span class="params">(Enumeration&lt;String&gt; enumeration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enumeration = enumeration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enumeration.hasMoreElements();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enumeration.nextElement();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>生成器/建造者模式</title>
    <url>/hexo/2020/10/13/Design-pattern-builder/</url>
    <content><![CDATA[<blockquote>
<p>Builder Pattern: 将一个复杂对象的构建与它的表示分离, 使得同样的构建过程可以创建不同的表示. 建造者模式是一种对象创建型模式.</p>
</blockquote>
<p>关键词: 构建过程, 表示</p>
<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p>图示说明:</p>
<ul>
<li>Client 到 Director 为 实线普通箭头, 表示拥有</li>
<li>Client 到 ConcreateBuilder 为 虚线普通箭头, 表示使用关系, Java 中表现为局部变量</li>
<li>Director 到 Builder 为 空心菱形 + 实线 + 普通箭头, 表示聚合, 整体和局部的关系</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">                     +--------+                                                                                                                       </span><br><span class="line">        -------------| Client |-----------------                                                                                                      </span><br><span class="line">       |             +--------+                 |                                                                                                     </span><br><span class="line">       |                                        |                                                                                                     </span><br><span class="line">       |                                        |                                                                                                     </span><br><span class="line">       v                                        |                                                                                                     </span><br><span class="line">+-----------------+                             |                                                                                                     </span><br><span class="line">|    Director     |        +---------------+    |                                                                                                     </span><br><span class="line">|-----------------|&lt;&gt;-----&gt;|    Builder    |    |                                                                                                     </span><br><span class="line">| builder:Builder |        |---------------|    |                                                                                                     </span><br><span class="line">|-----------------|        |+ buildPart()  |    |                                                                                                     </span><br><span class="line">| construct()     |        +---------------+    |                                                                                                     </span><br><span class="line">|                 |              ^              |                                                                                                     </span><br><span class="line">+-----------------+              |              |                                                                                                     </span><br><span class="line">                                 |              |                                                                                                     </span><br><span class="line">                                 |              v                                                                                                     </span><br><span class="line">                           +----------------------+                                                                                                   </span><br><span class="line">                           |   ConcreateBuilder   |                                                                                                   </span><br><span class="line">                           |----------------------|                                                                                                   </span><br><span class="line">                           |+ buildPart()         |                                                                                                   </span><br><span class="line">                           |+ getResult():Product |                                                                                                   </span><br><span class="line">                           +----------------------+                                                                                                   </span><br><span class="line">                                             |                                                                                                        </span><br><span class="line">                                             |                                                                                                        </span><br><span class="line">                                             |                                                                                                        </span><br><span class="line">                                        +----v----+                                                                                                   </span><br><span class="line">                                        | Product |                                                                                                   </span><br><span class="line">                                        +---------+                                                                                                   </span><br></pre></td></tr></table></figure>

<h2 id="Java-简化版"><a href="#Java-简化版" class="headerlink" title="Java 简化版"></a>Java 简化版</h2><p>案例, 创建一个有五个属性的 computer 对象</p>
<p>创建方案有两种:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方案一, 重载构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(String cpu, String ram)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(cpu, ram, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(String cpu, String ram, <span class="keyword">int</span> usbCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(cpu, ram, usbCount, <span class="string">&quot;罗技键盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(String cpu, String ram, <span class="keyword">int</span> usbCount, String keyboard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(cpu, ram, usbCount, keyboard, <span class="string">&quot;三星显示器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(String cpu, String ram, <span class="keyword">int</span> usbCount, String keyboard, String display)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">        <span class="keyword">this</span>.ram = ram;</span><br><span class="line">        <span class="keyword">this</span>.usbCount = usbCount;</span><br><span class="line">        <span class="keyword">this</span>.keyboard = keyboard;</span><br><span class="line">        <span class="keyword">this</span>.display = display;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方案二, 使用 new + set</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpu</span><span class="params">(String cpu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略其他 set 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>使用构造函数 - 弊端: 参数过多, 增加阅读, 调用复杂度</li>
<li>使用 new + set - 弊端: 不连续, 可能少设置属性什么的</li>
</ol>
<p>Java 简化版方案:</p>
<ol>
<li>在对象内部创建一个 public 的内部静态类 Builder</li>
<li>复制一份对象的属性到 Builder 中</li>
<li>Builder 提供 set 方法</li>
<li>在对象内部添加一个私有的构造函数, 参数为 Builder</li>
<li>通过链式调用 Builder 创建对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;<span class="comment">//必须</span></span><br><span class="line">    <span class="keyword">private</span> String ram;<span class="comment">//必须</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> usbCount;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">private</span> String keyboard;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">private</span> String display;<span class="comment">//可选</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Computer</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = builder.cpu;</span><br><span class="line">        <span class="keyword">this</span>.ram = builder.ram;</span><br><span class="line">        <span class="keyword">this</span>.usbCount = builder.usbCount;</span><br><span class="line">        <span class="keyword">this</span>.keyboard = builder.keyboard;</span><br><span class="line">        <span class="keyword">this</span>.display = builder.display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String cpu;<span class="comment">//必须</span></span><br><span class="line">        <span class="keyword">private</span> String ram;<span class="comment">//必须</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> usbCount;<span class="comment">//可选</span></span><br><span class="line">        <span class="keyword">private</span> String keyboard;<span class="comment">//可选</span></span><br><span class="line">        <span class="keyword">private</span> String display;<span class="comment">//可选</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(String cup, String ram)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.cpu = cup;</span><br><span class="line">            <span class="keyword">this</span>.ram = ram;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setUsbCount</span><span class="params">(<span class="keyword">int</span> usbCount)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.usbCount = usbCount;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setKeyboard</span><span class="params">(String keyboard)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.keyboard = keyboard;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setDisplay</span><span class="params">(String display)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.display = display;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Computer <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Computer(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h2>

<p>涉及到的角色:</p>
<ul>
<li>Builder: 抽象接口, 定义了一系列需要实现的接口</li>
<li>ConcreateBuilder: 具体的 Builder 实现类</li>
<li>Production: 生成的产品</li>
<li>Director: 具体 Builder 调用方法顺序的类</li>
</ul>
<p>和上面的 Java 简化版相比, 传统模式只不过是把类内部的 Builder 实现独立出来了而已, 并没有什么其他很骚的操作. 不过相比于简单的版本, 它提供了 Builder 的扩展性, 在这个实现里, ConcreateBuilder 可以有多个版本的实现, 客户端可以根据实际需求调用所需要的 Builder.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// production 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;<span class="comment">//必须</span></span><br><span class="line">    <span class="keyword">private</span> String ram;<span class="comment">//必须</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> usbCount;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">private</span> String keyboard;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">private</span> String display;<span class="comment">//可选</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(String cpu, String ram)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">        <span class="keyword">this</span>.ram = ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsbCount</span><span class="params">(<span class="keyword">int</span> usbCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.usbCount = usbCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeyboard</span><span class="params">(String keyboard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.keyboard = keyboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDisplay</span><span class="params">(String display)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.display = display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Computer&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, ram=&#x27;&quot;</span> + ram + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, usbCount=&quot;</span> + usbCount +</span><br><span class="line">                <span class="string">&quot;, keyboard=&#x27;&quot;</span> + keyboard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, display=&#x27;&quot;</span> + display + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Builder 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUsbCount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setKeyboard</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDisplay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Computer <span class="title">getComputer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体实现类, 分别组装两种品牌的电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacBuilder</span> <span class="keyword">implements</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MacBuilder</span><span class="params">(String cpu, String ram)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer = <span class="keyword">new</span> Computer(cpu, ram);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsbCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer.setUsbCount(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeyboard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer.setKeyboard(<span class="string">&quot;Mac Keyboard&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDisplay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer.setDisplay(<span class="string">&quot;Mac Display&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">getComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LenovoBuilder</span> <span class="keyword">implements</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LenovoBuilder</span><span class="params">(String cpu, String ram)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer = <span class="keyword">new</span> Computer(cpu, ram);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsbCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer.setUsbCount(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeyboard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer.setKeyboard(<span class="string">&quot;Logic&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDisplay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer.setDisplay(<span class="string">&quot;ThinkVision&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">getComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// director 控制流程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerDirector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeComputer</span><span class="params">(ComputerBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定制组装顺序</span></span><br><span class="line">        builder.setDisplay();</span><br><span class="line">        builder.setKeyboard();</span><br><span class="line">        builder.setUsbCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ComputerDirector director = <span class="keyword">new</span> ComputerDirector();</span><br><span class="line"></span><br><span class="line">    MacBuilder macBuilder = <span class="keyword">new</span> MacBuilder(<span class="string">&quot;I5&quot;</span>, <span class="string">&quot;Sansong 4G&quot;</span>);</span><br><span class="line">    director.makeComputer(macBuilder);</span><br><span class="line">    System.out.println(macBuilder.getComputer());</span><br><span class="line"></span><br><span class="line">    LenovoBuilder lenovoBuilder = <span class="keyword">new</span> LenovoBuilder(<span class="string">&quot;I7&quot;</span>, <span class="string">&quot;Kingston 8G&quot;</span>);</span><br><span class="line">    director.makeComputer(lenovoBuilder);</span><br><span class="line">    System.out.println(lenovoBuilder.getComputer());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Computer&#123;cpu=&#x27;I5&#x27;, ram=&#x27;Sansong 4G&#x27;, usbCount=2, keyboard=&#x27;Mac Keyboard&#x27;, display=&#x27;Mac Display&#x27;&#125;</span></span><br><span class="line"><span class="comment">// Computer&#123;cpu=&#x27;I7&#x27;, ram=&#x27;Kingston 8G&#x27;, usbCount=3, keyboard=&#x27;Logic&#x27;, display=&#x27;ThinkVision&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="建造者模式在-StringBuilder-中的应用"><a href="#建造者模式在-StringBuilder-中的应用" class="headerlink" title="建造者模式在 StringBuilder 中的应用"></a>建造者模式在 StringBuilder 中的应用</h2><p>TODO</p>
<h2 id="Effective-Java-item-2-摘录"><a href="#Effective-Java-item-2-摘录" class="headerlink" title="Effective Java item 2 摘录"></a>Effective Java item 2 摘录</h2><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/58093669">逼乎</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>责任链模式</title>
    <url>/hexo/2021/07/23/Design-pattern-chain-of-responsibility/</url>
    <content><![CDATA[<blockquote>
<p>避免请求发送者和接受者的耦合，让多个对象都有可能接受请求，将这些对象连成一条链，并且沿着这条链传递请求，直到有对象处理它为止</p>
</blockquote>
<p>典型应用：</p>
<ul>
<li>JS 中的冒泡事件</li>
<li>tomcat 中对 Encoding 的处理</li>
<li>servlet 的 filter</li>
</ul>
<img  src=http://www.plantuml.com/plantuml/svg/Iyv9B2vMy4ZCIyb9BLAevkBKXR6BIvEJKukByuku5810EmCi79HQM9fQNAAXoLNBnUMSavcQLwAWPmVJpmNJgmJNhAIGhukGXokmgT7LLN3EpqikIaqiIOMAEkANTW80>

<ul>
<li>Handler(抽象处理者): 定义一个处理请求的接口，提供对后续处理者的引用</li>
<li>ConcreteHandler(具体处理者): 抽象处理者的子类，处理用户请求，可选择将请求处理掉或者传给下家；在具体处理者中可以访问链中的下一个对象，以便请求的转发。</li>
</ul>
<h2 id="Handler-示例"><a href="#Handler-示例" class="headerlink" title="Handler 示例"></a>Handler 示例</h2><p>示例描述：定义一个 handler 的抽象类以及三个对应的实现类。抽象类中定义 handleRequest() 方法作为统一的处理入口，最后创建一个 ChainClient 建立处理链并测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(String condition)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractHandler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHandler</span><span class="params">(AbstractHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandlerA</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(String condition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (condition.equals(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Concrete Handler A processed...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Concrete Handler A can&#x27;t process, call other handler...&quot;</span>);</span><br><span class="line">            getHandler().handleRequest(condition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandlerB</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(String condition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (condition.equals(<span class="string">&quot;B&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Concrete Handler B processed...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Concrete Handler B can&#x27;t process, call other handler...&quot;</span>);</span><br><span class="line">            getHandler().handleRequest(condition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandlerZ</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(String condition)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 一般就是最后一个处理器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Concrete handler z processed...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractHandler handlerA = <span class="keyword">new</span> ConcreteHandlerA();</span><br><span class="line">        AbstractHandler handlerB = <span class="keyword">new</span> ConcreteHandlerB();</span><br><span class="line">        AbstractHandler handlerZ = <span class="keyword">new</span> ConcreteHandlerZ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置链顺序</span></span><br><span class="line">        handlerA.setHandler(handlerB);</span><br><span class="line">        handlerB.setHandler(handlerZ);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------- handle A ---------------&quot;</span>);</span><br><span class="line">        handlerA.handleRequest(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------- handle B ---------------&quot;</span>);</span><br><span class="line">        handlerA.handleRequest(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------- handle Z ---------------&quot;</span>);</span><br><span class="line">        handlerA.handleRequest(<span class="string">&quot;Z&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// --------------- handle A ---------------</span></span><br><span class="line"><span class="comment">// Concrete Handler A processed...</span></span><br><span class="line"><span class="comment">// --------------- handle B ---------------</span></span><br><span class="line"><span class="comment">// Concrete Handler A can&#x27;t process, call other handler...</span></span><br><span class="line"><span class="comment">// Concrete Handler B processed...</span></span><br><span class="line"><span class="comment">// --------------- handle Z ---------------</span></span><br><span class="line"><span class="comment">// Concrete Handler A can&#x27;t process, call other handler...</span></span><br><span class="line"><span class="comment">// Concrete Handler B can&#x27;t process, call other handler...</span></span><br><span class="line"><span class="comment">// Concrete handler z processed...</span></span><br></pre></td></tr></table></figure>

<h2 id="Log-示例"><a href="#Log-示例" class="headerlink" title="Log 示例"></a>Log 示例</h2><p>目标：实现一个 log 机制，当 log level 比当前 log 类的 level 高是，记录它</p>
<p>这个示例的套路和上一个很类似，但是它把处理逻辑固定了，在抽象类中做了实现，每个具体的类只定制自己的 write 行为即可，和上一个在思路上有些许的不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> INFO = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> DEBUG = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> ERROR = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> level;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//责任链中的下一个元素</span></span><br><span class="line">    <span class="keyword">protected</span> AbstractLogger nextLogger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLogger</span><span class="params">(AbstractLogger nextLogger)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextLogger = nextLogger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logMessage</span><span class="params">(<span class="keyword">int</span> level, String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.level &lt;= level)&#123;</span><br><span class="line">            write(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nextLogger !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            nextLogger.logMessage(level, message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsoleLogger</span> <span class="keyword">extends</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsoleLogger</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Standard Console::Logger: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorLogger</span>  <span class="keyword">extends</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ErrorLogger</span><span class="params">(<span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Error Console::Logger: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileLogger</span> <span class="keyword">extends</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileLogger</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;File::Logger: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainPatternDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AbstractLogger <span class="title">getChainOfLoggers</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        AbstractLogger errorLogger = <span class="keyword">new</span> ErrorLogger(AbstractLogger.ERROR);</span><br><span class="line">        AbstractLogger fileLogger = <span class="keyword">new</span> FileLogger(AbstractLogger.DEBUG);</span><br><span class="line">        AbstractLogger consoleLogger = <span class="keyword">new</span> ConsoleLogger(AbstractLogger.INFO);</span><br><span class="line"></span><br><span class="line">        errorLogger.setNextLogger(fileLogger);</span><br><span class="line">        fileLogger.setNextLogger(consoleLogger);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> errorLogger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractLogger loggerChain = getChainOfLoggers();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------- handle info ---------------&quot;</span>);</span><br><span class="line">        loggerChain.logMessage(AbstractLogger.INFO, <span class="string">&quot;This is an information.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------- handle debug ---------------&quot;</span>);</span><br><span class="line">        loggerChain.logMessage(AbstractLogger.DEBUG, <span class="string">&quot;This is a debug level information.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------- handle Error ---------------&quot;</span>);</span><br><span class="line">        loggerChain.logMessage(AbstractLogger.ERROR, <span class="string">&quot;This is an error information.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------- handle info ---------------</span></span><br><span class="line"><span class="comment">// Standard Console::Logger: This is an information.</span></span><br><span class="line"><span class="comment">// --------------- handle debug ---------------</span></span><br><span class="line"><span class="comment">// File::Logger: This is a debug level information.</span></span><br><span class="line"><span class="comment">// Standard Console::Logger: This is a debug level information.</span></span><br><span class="line"><span class="comment">// --------------- handle Error ---------------</span></span><br><span class="line"><span class="comment">// Error Console::Logger: This is an error information.</span></span><br><span class="line"><span class="comment">// File::Logger: This is an error information.</span></span><br><span class="line"><span class="comment">// Standard Console::Logger: This is an error information.</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>命令模式</title>
    <url>/hexo/2021/03/16/Design-pattern-command/</url>
    <content><![CDATA[<p><strong>Command</strong> is a behavioral design pattern that turns a request into a stand-alone object that contains all information about the request. This transformation lets you parameterize methods with different requests, delay or queue a request’s execution, and support undoable operations.</p>
<blockquote>
<p>命令模式是行为模式的一种，它将请求包裹在一个单独的对象里面，包含了一个请求的所有信息，通过这种方式，它让你的处理方法有一个统一的参数格式，并且这种处理方式为处理延迟，队列和回滚等操作提供可行性</p>
</blockquote>
<p>优点：</p>
<ul>
<li>较容易的设计一个命令队列</li>
<li>容易将命令记入日志</li>
<li>允许请求放取消</li>
<li>容易的实现撤销和重做</li>
<li>加入新的命令不会影响已有的实现</li>
<li>将 command 从执行类中剥离出来，独立存在</li>
</ul>
<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>角色定义：</p>
<ul>
<li>Client: 终端，初始化对象，类似执行环境，可以代表一个人</li>
<li>Command: 代表一个命令的接口</li>
<li>Concrete Command: 具体的命令，会持有一个 Receiver 引用</li>
<li>Receiver: 有能力<strong>执行</strong>具体命令的主体</li>
<li>Invoker(Sender): <strong>持有</strong>命令的类似容器的东西</li>
</ul>
<p>PS: 感觉上，写 demo 的时候可以把 Client 和 Invoker 合并成一个东西</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;Receiver do something ...&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123; <span class="keyword">this</span>.receiver = receiver; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123; receiver.doSomething(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command cmd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invoker</span><span class="params">(Command cmd)</span> </span>&#123; <span class="keyword">this</span>.cmd = cmd; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123; cmd.execute(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">        Command cmd = <span class="keyword">new</span> ConcreteCommand(receiver);</span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker(cmd);</span><br><span class="line"></span><br><span class="line">        invoker.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Receiver do something ...</span></span><br></pre></td></tr></table></figure>

<h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><p>TIJ4 中 inner class 下的 Inner classes &amp; control frameworks 小结说的 GreenHouse 采用了 Command Pattern，说实话我不是理解，应该是我对这个模式的使用太刻板了，不够变通吧</p>
<h3 id="大话设计模式"><a href="#大话设计模式" class="headerlink" title="大话设计模式"></a>大话设计模式</h3><p>用烧烤摊和烧烤店来举例子，烧烤摊客户直接和摊主紧耦合，混乱。烧烤店中有服务员做中介，效率高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Barbecuer barbecuer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Command</span><span class="params">(Barbecuer barbecuer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.barbecuer = barbecuer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BakeChickenWingCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BakeChickenWingCommand</span><span class="params">(Barbecuer barbecuer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(barbecuer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        barbecuer.bakeChickenWing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BakeMuttonCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BakeMuttonCommand</span><span class="params">(Barbecuer barbecuer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(barbecuer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        barbecuer.bakeMutton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Barbecuer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bakeMutton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bake mutton...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bakeChickenWing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bake chicken wing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waiter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Command&gt; cmds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(Command cmd)</span> </span>&#123;</span><br><span class="line">        cmds.add(cmd);</span><br><span class="line">        System.out.println(<span class="string">&quot;Set order: &quot;</span> + cmd.getClass().getSimpleName() + <span class="string">&quot;, Time: &quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelOrder</span><span class="params">(Command cmd)</span> </span>&#123;</span><br><span class="line">        cmds.remove(cmd);</span><br><span class="line">        System.out.println(<span class="string">&quot;Cancel order: &quot;</span> + cmd.getClass().getSimpleName() + <span class="string">&quot;, Time: &quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">noteBaker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Command cmd : cmds) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Process order: &quot;</span> + cmd.getClass().getSimpleName() + <span class="string">&quot;, Time: &quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Barbecuer baker = <span class="keyword">new</span> Barbecuer();</span><br><span class="line">        Command bakeWing = <span class="keyword">new</span> BakeChickenWingCommand(baker);</span><br><span class="line">        Command bakeMutton = <span class="keyword">new</span> BakeMuttonCommand(baker);</span><br><span class="line"></span><br><span class="line">        Waiter waiter = <span class="keyword">new</span> Waiter();</span><br><span class="line">        waiter.setOrder(bakeMutton);</span><br><span class="line">        waiter.setOrder(bakeWing);</span><br><span class="line">        waiter.setOrder(bakeWing);</span><br><span class="line">        waiter.setOrder(bakeMutton);</span><br><span class="line">        waiter.cancelOrder(bakeMutton);</span><br><span class="line"></span><br><span class="line">        waiter.noteBaker();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Head First Design Pattern</strong></p>
<p>支持宏模式的 command pattern 它管这种模式叫 Meta Command Pattern</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://refactoring.guru/design-patterns/command">Refactoring Guru</a></li>
<li><a href="https://www.jianshu.com/p/5901e76a6348">Jianshu sample</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器模式</title>
    <url>/hexo/2021/04/13/Design-pattern-decorator/</url>
    <content><![CDATA[<p><strong>Design Principle:</strong> Classes should be open for extension, but closed for modification.</p>
<blockquote>
<p><strong>The Decorator Pattern</strong> attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.<br>装饰器模式可以让你的对象动态添加特性</p>
</blockquote>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>Starbuzz 设计了一款软件卖咖啡，但是设计太烂了，导致类膨胀了。如果是你你会怎么整？</p>
<p>原始设计, 有一个基类 Beverage，然后各种子类比如浓缩咖啡，美式等。但是光咖啡还不够，我们还可以加入各种调味料，比如抹茶，奶盖等。每加入新的调料都是一种新的类，比如浓缩+抹茶。类数量成指数上升</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">                     +-----------------+                                                                                                              </span><br><span class="line">                     |    Beverate     |                                                                                                              </span><br><span class="line">                     |---------------- |                                                                                                              </span><br><span class="line">                     | description     |                                                                                                              </span><br><span class="line">                     |---------------- |                                                                                                              </span><br><span class="line">                     | getDescription()|                                                                                                              </span><br><span class="line">                     | cost()          |                                                                                                              </span><br><span class="line">                     |                 |                                                                                                              </span><br><span class="line">                     +-----------------+                                                                                                              </span><br><span class="line">                       ^        ^   ^                                                                                                                 </span><br><span class="line">                       |        |   |---------------                                                                                                  </span><br><span class="line">                       |        |                  |                                                                                                  </span><br><span class="line">          +--------------+   +--------------+      |                                                                                                  </span><br><span class="line">          |  Espreesso   |   |  DarkRoast   |      |                                                                                                  </span><br><span class="line">          |--------------|   |--------------|     ...                                                                                                 </span><br><span class="line">          |  cost()      |   |  cost()      |                                                                                                         </span><br><span class="line">          +--------------+   +--------------+                                                                                                         </span><br><span class="line">            ^          ^                                                                                                                              </span><br><span class="line">            |          |                                                                                                                              </span><br><span class="line">            |          |                                                                                                                              </span><br><span class="line">+-----------------+    |                                                                                                                              </span><br><span class="line">|EspreessoWithMilk|    |                                                                                                                              </span><br><span class="line">|-----------------|   ...                                                                                                                             </span><br><span class="line">|  cost()         |                                                                                                                                   </span><br><span class="line">+-----------------+                                                                                                                              </span><br></pre></td></tr></table></figure>

<p>随之设计师又想到了另一种解决方案，可以将所有的属性和调味品设置成属性放到基类中，然后通过 flag 知道是否含有某种调味品，然后在子类中通过设置这些 flag 的值，定制 cost 结果</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+----------------+                                                                                                                                 </span><br><span class="line">|    Beverage    |                                                                                                                                 </span><br><span class="line">|----------------|                                                                                                                                 </span><br><span class="line">| description    |                                                                                                                                 </span><br><span class="line">| soy            |                                                                                                                                 </span><br><span class="line">| mocha          |                                                                                                                                 </span><br><span class="line">| ...            |                                                                                                                                 </span><br><span class="line">|----------------|                                                                                                                                 </span><br><span class="line">| hasSoy()       |                                                                                                                                 </span><br><span class="line">| hasMocha()     |                                                                                                                                 </span><br><span class="line">| ...            |                                                                                                                                 </span><br><span class="line">|                |                                                                                                                                 </span><br><span class="line">|                |                                                                                                                                 </span><br><span class="line">|                |                                                                                                                                 </span><br><span class="line">|                |                                                                                                                                 </span><br><span class="line">|                |                                                                                                                                 </span><br><span class="line">+----------------+                                                                                                                                 </span><br></pre></td></tr></table></figure>

<p>对应的代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="comment">// declear condiment</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> condimentCost = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">if</span> (hasMilk()) &#123;</span><br><span class="line">            codimentCost += milkCost;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (hasSoy()) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DarkRoast</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.00</span> + <span class="keyword">super</span>.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样做虽然避免的类爆炸式增长，但是导致了新的问题。比如每当调料价格变动，你就必须得改变老得代码。新加调料，你还得修改之前的 if 逻辑。而且如果有新的饮料，比如茶，那么这个继承关系在逻辑层面上就不是很合理了。为了解决类似的问题，我们引入装饰者模式</p>
<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><ul>
<li>每个 Component 可以自己调用自己，也可以被 Decorator 包裹</li>
<li>每个 Decorator 都持有一个 Component 的引用</li>
<li>ConcrateComponent 是 Component 的具体实现</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">                    +--------------+                            </span><br><span class="line">                    |  Component   |                            </span><br><span class="line">                    |--------------|------------------|         </span><br><span class="line">                    | +operation() |                  |         </span><br><span class="line">                    |              |                  |         </span><br><span class="line">                    +--------------+                  |         </span><br><span class="line">                    ^             ^                   |         </span><br><span class="line">                    |             |                   |         </span><br><span class="line">                    |             |                   |         </span><br><span class="line">+---------------------+          +--------------+     |         </span><br><span class="line">|  ConcreateComponent |          |  Decorator   |&lt;&gt;---|         </span><br><span class="line">|---------------------|          |--------------|               </span><br><span class="line">| +operation()        |          | +operation() |               </span><br><span class="line">|                     |          |              |               </span><br><span class="line">+---------------------+          +--------------+               </span><br><span class="line">                                  ^         ^                   </span><br><span class="line">                                  |         |                   </span><br><span class="line">                                  |         |                   </span><br><span class="line">              +---------------------+    +---------------------+</span><br><span class="line">              | ConcreateDecoratorA |    | ConcreateDecoratorA |</span><br><span class="line">              |---------------------|    |---------------------|</span><br><span class="line">              | +operation()        |    | +operation()        |</span><br><span class="line">              | +addBehavior()      |    | +addBehavior()      |</span><br><span class="line">              +---------------------+    +---------------------+</span><br></pre></td></tr></table></figure>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基类实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    String description = <span class="string">&quot;Unknown Beverage&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例咖啡实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        description = <span class="string">&quot;Espresso&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰类的基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰类实现，装饰类会持有基类引用，并对方法做扩展</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line">    Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mocha</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.cost() + .<span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot;, Mocha&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soy</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line">    Beverage beverage;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Soy</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.cost() + .<span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot;, Soy&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Beverage myBeverage = <span class="keyword">new</span> Mocha(<span class="keyword">new</span> Soy(<span class="keyword">new</span> Espresso()));</span><br><span class="line">        System.out.println(myBeverage.cost());</span><br><span class="line">        System.out.println(myBeverage.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.3400000000000003</span></span><br><span class="line"><span class="comment">// Espresso, Soy, Mocha</span></span><br></pre></td></tr></table></figure>

<p>问，我现在如果加了双份的抹茶，description 输出时会现实 Mocha, Mocha。那如果我想要他输出 Double Mocha 的话需要怎么做?</p>
<p>按照装饰模式的思路，可以将 description 的实现改为容器，比如 list, 然后在最外层加入一个 CustomizedDescDecorator 截取 description 做整合</p>
<h2 id="该模式在-JDK-中的应用"><a href="#该模式在-JDK-中的应用" class="headerlink" title="该模式在 JDK 中的应用"></a>该模式在 JDK 中的应用</h2><p>Java 的 I/O 包就使用了装饰器模式。IO 分两种，字节流（Input/OutputStream）和字符流（Reader/Writer）。</p>
<p>以输入字节流 InputStream 为例，继承关系如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                                +-------------+                                                 </span><br><span class="line">                                | InputStream |                                                 </span><br><span class="line">                                +-------------+                                                 </span><br><span class="line">                                       ^                                                        </span><br><span class="line">         ------------------------------|------------------------------------------------------  </span><br><span class="line">        |                              |              |                       |              |  </span><br><span class="line">        |                              |              |                       |              |  </span><br><span class="line">+-----------------+  +-------------------+  +-------------------+  +----------------------+  |  </span><br><span class="line">| FileInputStream |  | FilterInputStream |  | ObjectInputStream |  | ByteArrayInputStream |  ...</span><br><span class="line">+-----------------+  +-------------------+  +-------------------+  +----------------------+     </span><br><span class="line">                                  ^                                                             </span><br><span class="line">        --------------------------|-----------------------------------------------              </span><br><span class="line">       |                          |                           |                  |              </span><br><span class="line">       |                          |                           |                  |              </span><br><span class="line">+---------------------+   +---------------------+    +--------------------+      |              </span><br><span class="line">| BufferedInputStream |   | DataInputStream     |    | PushbakInputStream |     ...             </span><br><span class="line">+---------------------+   +---------------------+    +--------------------+                     </span><br></pre></td></tr></table></figure>

<p>一开始看岔了，把 FilterInputStream 和 FileInputStream 看成同一个了，所以没能把它和装饰模式匹配起来。在 IO 的实现中，FileInputStream, ObjectInputStream 等即对饮了 ConcreateComponent, 是具体实现。</p>
<p>FilterInputStream 对应了 Decorator, 是修饰器的基类，持有了 inputStream 的引用，而 BufferedInputStream 则为装饰器的具体实现，起到包装 Component 的作用。</p>
<p>BufferedInputStream 使用示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoDecoratorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassLoader classloader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        InputStream is = classloader.getResourceAsStream(<span class="string">&quot;c1_2.xml&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(is)) &#123;</span><br><span class="line">            <span class="keyword">byte</span> data;</span><br><span class="line">            <span class="keyword">while</span> ((data = (<span class="keyword">byte</span>) bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Finish read...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>外观模式</title>
    <url>/hexo/2021/08/10/Design-pattern-facade-md/</url>
    <content><![CDATA[<blockquote>
<p><strong>The Facade Pattern</strong> provides a unified interface to a set of interfaces in a subsytem.  Facade defines a higher-level interface that makes the subsystem easier to use.<br>提供一套更 high-level 的接口简化子系统调用</p>
</blockquote>
<h2 id="Facade-外观-Pattern"><a href="#Facade-外观-Pattern" class="headerlink" title="Facade(外观) Pattern"></a>Facade(外观) Pattern</h2><p>假设我们要组一套家庭影院，我们有好多设备，比如投影仪，音响，爆米花机，DVD 等。我们每次想要看一场电影需要做如下事情</p>
<ol>
<li>开启 爆米花 机</li>
<li>开始爆米花</li>
<li>开启影响</li>
<li>设置音量</li>
<li>开启投影仪</li>
<li>摄制亮度</li>
<li>开启 DVD</li>
<li>塞入光盘</li>
<li>…</li>
</ol>
<p>而且等我们看完了，我们还需要逐个将上面的设备关掉，一套下来，可能以后再也不看电影了。</p>
<p>Facade 模式就是用来解决这种问题的。</p>
<blockquote>
<p>A facade not only simplifies an interface, it decouples a client from a subsystem of components.<br>Facades and adapters may wrap multiple classes, but a facade’s intent is to simplify, while an adapter’s is to convert the interface to something different.<br>外观模式不仅仅是简化接口，同时他还将子系统和客户端解耦了<br>Facade 和 Adapter 都会在类外面包一层，但是 Facade 是为了简化，而 Adapter 是为了转换</p>
</blockquote>
<p>为了简化代码，我们一拿 DVD 和投影仪举例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Player 类表示 DVD 机的开/关/放电影功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DvdPlayer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startPlayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Start DVD Player...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endPlayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;End DVD Player...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMovie</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Show movie: &quot;</span> + name + <span class="string">&quot; ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示屏幕功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Screen</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Down screen...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Up screen...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 家庭影院简化版</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeTheaterFacade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Screen screen;</span><br><span class="line">    <span class="keyword">private</span> DvdPlayer player;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeTheaterFacade</span><span class="params">(Screen screen, DvdPlayer player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.screen = screen;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startMovie</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        screen.downScreen();</span><br><span class="line">        player.startPlayer();</span><br><span class="line">        player.playMovie(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endMovie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        screen.upScreen();</span><br><span class="line">        player.endPlayer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端播放和结束放映</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HomeTheaterFacade facade = <span class="keyword">new</span> HomeTheaterFacade(<span class="keyword">new</span> Screen(), <span class="keyword">new</span> DvdPlayer());</span><br><span class="line">        facade.startMovie(<span class="string">&quot;&lt;&lt;NeZha&gt;&gt;&quot;</span>);</span><br><span class="line">        facade.endMovie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Down screen...</span></span><br><span class="line"><span class="comment">// Start DVD Player...</span></span><br><span class="line"><span class="comment">// Show movie: &lt;&lt;NeZha&gt;&gt; ...</span></span><br><span class="line"><span class="comment">// Up screen...</span></span><br><span class="line"><span class="comment">// End DVD Player...</span></span><br></pre></td></tr></table></figure>

<p>其实说是 Facade 模式，但是我这里平时经常会用到，只不过我一般把这种类型的东西叫做 Util 或者 Action 类。封装一些经常使用的方法，感觉效果上还是很相似的。</p>
<h2 id="The-Principle-of-Least-Knowledge"><a href="#The-Principle-of-Least-Knowledge" class="headerlink" title="The Principle of Least Knowledge"></a>The Principle of Least Knowledge</h2><p>这个规则是说，我们在写代码的时候要尽量减少涉及到多种返回值类型的链式调用。</p>
<blockquote>
<p>Principle of Least Knowledge - talk only to your immediate friends.</p>
</blockquote>
<p>在你的代码中，你只能调用下列对象的方法：</p>
<ul>
<li>对象本身</li>
<li>通过方法参数传入的对象</li>
<li>任何在本类中创建的对象</li>
<li>任何本对象的 field</li>
</ul>
<p>这样做可以减少两个对象之间的 dependencies 但是同时也有一个弊端，你需要写跟多的代码，项目会变得更大，还可能会性能下降。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/hexo/2021/05/08/Design-pattern-factory/</url>
    <content><![CDATA[<ul>
<li>简单工厂并不是一种设计模式，而是一种良好的编码习惯</li>
</ul>
<blockquote>
<p><strong>The Factory Method Pattern</strong> defines an interface for creating an object, but lets subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.<br>工厂方法 模式，这个名字可以说是很形象了，哈哈。它定义一个方法来创建对象，并把创建对象的逻辑托付给子类。</p>
</blockquote>
<p>简单工厂，工厂只是一个其他的对象，而 工厂方法 这个设计模式中，工厂是一个子类</p>
<p>SimpleFactory, which gives you a way to encapsulate object creation, but not give you the flexibility of the Factory Method</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器模式</title>
    <url>/hexo/2021/04/16/Design-pattern-iterator/</url>
    <content><![CDATA[<blockquote>
<p><strong>The Iterator Pattern</strong> provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.<br>迭代器模式可以让我们在不需要知道一个集合的具体实现的情况下，依次访问集合中的各个元素</p>
</blockquote>
<p>it also places the task of traveral(遍历) on the iterator object, not on the aggregate, which simplifies the aggregate interface and implementation, and places the responsibility where it should be.</p>
<blockquote>
<p><strong>Design Principle:</strong> A class should have only one reason to change</p>
</blockquote>
<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">skinparam linetype ortho</span><br><span class="line"></span><br><span class="line">Interface Aggregate &#123;</span><br><span class="line">    +Iterator createIterator()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Interface Iterator &#123;</span><br><span class="line">    +Object next()</span><br><span class="line">    +boolean hasNext()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreateAgg implements Aggregate &#123;</span><br><span class="line">    +Iterator createIterator()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreateIter implements Iterator &#123;</span><br><span class="line">    +Object next()</span><br><span class="line">    +boolean hasNext()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Client</span><br><span class="line"></span><br><span class="line">Aggregate -&gt; Client</span><br><span class="line">Client -&gt; Iterator</span><br><span class="line">ConcreateAgg -&gt; ConcreateIter</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<img  src=http://www.plantuml.com/plantuml/svg/fOzB3i8m34JN-1HUWYgkW42ike4pk95f0_bKZYk147SdKLKex13PH7cU6K-sIKbqy0xInOQUX3mw6rXlFMCKxI907PJbH8PnrxR2BIdZ7HPLdJ5f53J2cKtFvGeUSzDBLZp7vin6CV1LimxpgPeO7LF0Zj9XnDbk7AM4-nZ6xBmOhUyTUmwQVkdn5LI6ywH_oZcR8m3UPTQR2OvN0TC2-FXBKSuhFG40>

<p>ASCII 版本图示:</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+------------------+                              +--------------------+                                                                             </span><br><span class="line">|  &lt;&lt;interface&gt;&gt;   |         +-----------+        |   &lt;&lt;interface&gt;&gt;    |                                                                             </span><br><span class="line">|    Aggregate     |&lt;--------|  Client   |------&gt; |      Iterator      |                                                                             </span><br><span class="line">|------------------|         |           |        |--------------------|                                                                             </span><br><span class="line">| createIterator() |         +-----------+        | hasNext()          |                                                                             </span><br><span class="line">|                  |                              | next()             |                                                                             </span><br><span class="line">+------------------+                              | remove()           |                                                                             </span><br><span class="line">        ^                                         +--------------------+                                                                             </span><br><span class="line">        |                                                     ^                                                                                      </span><br><span class="line">        |                                                     |                                                                                      </span><br><span class="line">        |                                                     |                                                                                      </span><br><span class="line">        |                                                     |                                                                                      </span><br><span class="line">+--------------------+                            +--------------------+                                                                             </span><br><span class="line">| ConcreateAggregate |---------------------------&gt;| ConcreateIterator  |                                                                             </span><br><span class="line">|--------------------|                            |--------------------|                                                                             </span><br><span class="line">| createIterator()   |                            | hasNext()          |                                                                             </span><br><span class="line">|                    |                            | next()             |                                                                             </span><br><span class="line">+--------------------+                            | remove()           |                                                                             </span><br><span class="line">                                                  +--------------------+                                                                             </span><br></pre></td></tr></table></figure>

<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>现在你是餐饮部的大老板了，上周你刚收购了两家餐厅，现在你要整合他们的业务，将他们的菜单合并以统一的用户体验，所幸，他们的底层菜品条目是一致的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuItem</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String description;</span><br><span class="line">    <span class="keyword">boolean</span> vegetarian;</span><br><span class="line">    <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">        <span class="keyword">this</span>.vegetarian = vegetarian;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;, desc:&#x27;&quot;</span> + description + <span class="string">&#x27;\&#x27;&#x27;</span> +  <span class="string">&quot;, vegetarian:&quot;</span> + vegetarian + <span class="string">&quot;, price:&quot;</span> + price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两家店铺的菜单实现代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 煎饼电，通过 List 来存储菜单</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PancakeHouseMenu</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;MenuItem&gt; menuItems;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PancakeHouseMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        menuItems = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        addItem(<span class="string">&quot;K &amp; B’s Pancake Breakfast&quot;</span>, <span class="string">&quot;Pancakes with scrambled eggs, and toast&quot;</span>, <span class="keyword">true</span>, <span class="number">2.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Regular Pancake Breakfast&quot;</span>, <span class="string">&quot;Pancakes with fried eggs, sausage&quot;</span>, <span class="keyword">false</span>, <span class="number">2.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Blueberry Pancakes&quot;</span>, <span class="string">&quot;Pancakes made with fresh blueberries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.49</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Waffles&quot;</span>, <span class="string">&quot;Waffles, with your choice of blueberries or strawberries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.59</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetarian, price);</span><br><span class="line">        menuItems.add(menuItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;MenuItem&gt; <span class="title">getMenuItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小吃店，通过 Array 存储菜单</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DinerMenu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> MAX_ITEMS = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> numberOfItems = <span class="number">0</span>;</span><br><span class="line">    MenuItem[] menuItems;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DinerMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        menuItems = <span class="keyword">new</span> MenuItem[MAX_ITEMS];</span><br><span class="line">        addItem(<span class="string">&quot;Vegetarian BLT&quot;</span>, <span class="string">&quot; (Fakin’)Bacon with lettuce &amp; tomato on whole wheat&quot;</span>, <span class="keyword">true</span>, <span class="number">2.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;BLT&quot;</span>, <span class="string">&quot;Bacon with lettuce &amp; tomato on whole wheat&quot;</span>, <span class="keyword">false</span>, <span class="number">2.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Soup of the day&quot;</span>, <span class="string">&quot;Soup of the day, with a side of potato salad&quot;</span>, <span class="keyword">false</span>, <span class="number">3.29</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Hotdog&quot;</span>, <span class="string">&quot;A hot dog, with saurkraut, relish, onions, topped with cheese&quot;</span>, <span class="keyword">false</span>, <span class="number">3.05</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Steamed Veggies and Brown Rice&quot;</span>, <span class="string">&quot;Steamed vegetables over brown rice&quot;</span>, <span class="keyword">false</span>, <span class="number">3.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Pasta&quot;</span>, <span class="string">&quot;Spaghetti with Marinara Sauce, and a slice of sourdough bread&quot;</span>, <span class="keyword">false</span>, <span class="number">3.89</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetarian, price);</span><br><span class="line">        <span class="keyword">if</span> (numberOfItems &gt;= MAX_ITEMS) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Sorry, menu is full !Can’t add item to menu&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            menuItems[numberOfItems] = menuItem;</span><br><span class="line">            numberOfItems = numberOfItems + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MenuItem[] getMenuItems() &#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在没有做重构的情况下，每当你想要打印所有的菜单，你就得用两个循环，分别 loop 一下这两家店的菜单, 并且更糟糕的是，下次你再收购店面，你就必须再改一次这部分代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopMenu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MenuItem[] dinerMenu = <span class="keyword">new</span> DinerMenu().getMenuItems();</span><br><span class="line">        <span class="keyword">for</span> (MenuItem menu : dinerMenu) &#123;</span><br><span class="line">            System.out.println(menu);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;MenuItem&gt; menuItemList = <span class="keyword">new</span> PancakeHouseMenu().getMenuItems();</span><br><span class="line">        <span class="keyword">for</span> (MenuItem menuItem : menuItemList) &#123;</span><br><span class="line">            System.out.println(menuItem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了解决这个问题，我们新建一个 Iterator 接口来解决这个问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为小吃店新建一个 Iterator 实现并在小吃点的菜单中添加返回 Iterator 的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DinerMenuIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    MenuItem[] items;</span><br><span class="line">    <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DinerMenuIterator</span><span class="params">(MenuItem[] items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// position 这里不用做 +1 处理，拿长度为 1 的 arr 做例子。初始化后，调用 hasNext()，0 &lt; 1 &amp;&amp; obj != null 返回 true</span></span><br><span class="line">        <span class="keyword">return</span> position &lt; items.length &amp;&amp; items[position] != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MenuItem item = items[position];</span><br><span class="line">        position++;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DinerMenu</span> </span>&#123;</span><br><span class="line">    <span class="comment">// duplicated before</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DinerMenuIterator(menuItems);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对煎饼摊做同样的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PancakeHouseMenuIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    List&lt;MenuItem&gt; menuItemList;</span><br><span class="line">    <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PancakeHouseMenuIterator</span><span class="params">(List&lt;MenuItem&gt; menuItemList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menuItemList = menuItemList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> position &lt; menuItemList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MenuItem item = menuItemList.get(position);</span><br><span class="line">        position++;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PancakeHouseMenu</span> </span>&#123;</span><br><span class="line">    <span class="comment">// duplicated before</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PancakeHouseMenuIterator(menuItems);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Iterator it1 = <span class="keyword">new</span> PancakeHouseMenu().createIterator();</span><br><span class="line">        Iterator it2 = <span class="keyword">new</span> DinerMenu().createIterator();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;MENU\n----\nBREAKFAST&quot;</span>);</span><br><span class="line">        printMenu(it1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\nLUNCH&quot;</span>);</span><br><span class="line">        printMenu(it2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">(Iterator it)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MENU</span></span><br><span class="line"><span class="comment">// ----</span></span><br><span class="line"><span class="comment">// BREAKFAST</span></span><br><span class="line"><span class="comment">// K &amp; B’s Pancake Breakfast, 2.99 -- Pancakes with scrambled eggs, and toast</span></span><br><span class="line"><span class="comment">// Regular Pancake Breakfast, 2.99 -- Pancakes with fried eggs, sausage</span></span><br><span class="line"><span class="comment">// Blueberry Pancakes, 3.49 -- Pancakes made with fresh blueberries</span></span><br><span class="line"><span class="comment">// Waffles, 3.59 -- Waffles, with your choice of blueberries or strawberries</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LUNCH</span></span><br><span class="line"><span class="comment">// Vegetarian BLT, 2.99 --  (Fakin’)Bacon with lettuce &amp; tomato on whole wheat</span></span><br><span class="line"><span class="comment">// BLT, 2.99 -- Bacon with lettuce &amp; tomato on whole wheat</span></span><br><span class="line"><span class="comment">// Soup of the day, 3.29 -- Soup of the day, with a side of potato salad</span></span><br><span class="line"><span class="comment">// Hotdog, 3.05 -- A hot dog, with saurkraut, relish, onions, topped with cheese</span></span><br><span class="line"><span class="comment">// Steamed Veggies and Brown Rice, 3.99 -- Steamed vegetables over brown rice</span></span><br><span class="line"><span class="comment">// Pasta, 3.89 -- Spaghetti with Marinara Sauce, and a slice of sourdough bread</span></span><br></pre></td></tr></table></figure>

<p>其实 Java util 包下有自己的 Iterator 实现，集合类是这个设计模式的重度使用者，下面我们用官方实现替换我们自己的实现。</p>
<p>代码会更简单，除了在各 class 文件中引入的引用外，PancakeHouseMenuIterator 可以删除， 在 PancakeHouseMenu 的 createIterator() 直接返回 List.iterator() 即可。</p>
<p>为了让实现更精简，我们还可以抽象出一个 Menu 类作为基类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Menu</span> </span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;MenuItem&gt; <span class="title">createIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后两个 Menu 实体类实现这个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DinerMenu</span> <span class="keyword">implements</span> <span class="title">Menu</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PancakeHouseMenu</span> <span class="keyword">implements</span> <span class="title">Menu</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端中通过 Menu 基类访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Menu menu1 = <span class="keyword">new</span> PancakeHouseMenu();</span><br><span class="line">        Menu menu2 = <span class="keyword">new</span> DinerMenu();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;MENU\n----\nBREAKFAST&quot;</span>);</span><br><span class="line">        printMenu(menu1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\nLUNCH&quot;</span>);</span><br><span class="line">        printMenu(menu2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        Iterator&lt;MenuItem&gt; it = menu.createIterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样最大的好处是，客户端只和接口做交互，不需要关心具体实现，这就是传说中的 面向接口编程</p>
<p>时隔半个月，你又收购了一家咖啡店，是时候测试一下你的策略是否好使了。咖啡店菜单如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CafeMenu</span> </span>&#123;</span><br><span class="line">    Hashtable menuItems = <span class="keyword">new</span> Hashtable();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CafeMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        addItem(<span class="string">&quot;Veggie Burger and Air Fries&quot;</span>, <span class="string">&quot;Veggie burger on a whole wheat bun, lettuce, tomato, and fries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Soup of the day&quot;</span>, <span class="string">&quot;A cup of the soup of the day, with a side salad&quot;</span>, <span class="keyword">false</span>, <span class="number">3.69</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Burrito&quot;</span>, <span class="string">&quot;A large burrito, with whole pinto beans, salsa, guacamole&quot;</span>, <span class="keyword">true</span>, <span class="number">4.29</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetarian, price);</span><br><span class="line">        menuItems.put(menuItem.getName(), menuItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hashtable <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们按照之前的重构方案，让他实现 Menu 接口并提对应的方法实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CafeMenu</span> <span class="keyword">implements</span> <span class="title">Menu</span></span>&#123;</span><br><span class="line">    Hashtable&lt;String, MenuItem&gt; menuItems = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CafeMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        addItem(<span class="string">&quot;Veggie Burger and Air Fries&quot;</span>, <span class="string">&quot;Veggie burger on a whole wheat bun, lettuce, tomato, and fries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Soup of the day&quot;</span>, <span class="string">&quot;A cup of the soup of the day, with a side salad&quot;</span>, <span class="keyword">false</span>, <span class="number">3.69</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Burrito&quot;</span>, <span class="string">&quot;A large burrito, with whole pinto beans, salsa, guacamole&quot;</span>, <span class="keyword">true</span>, <span class="number">4.29</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetarian, price);</span><br><span class="line">        menuItems.put(menuItem.getName(), menuItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hashtable&lt;String, MenuItem&gt; <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;MenuItem&gt; <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems.values().iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在 IteratorClient 中添加对应的调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Menu menu1 = <span class="keyword">new</span> PancakeHouseMenu();</span><br><span class="line">        Menu menu2 = <span class="keyword">new</span> DinerMenu();</span><br><span class="line">        Menu menu3 = <span class="keyword">new</span> CafeMenu();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;MENU\n----\nBREAKFAST&quot;</span>);</span><br><span class="line">        printMenu(menu1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\nLUNCH&quot;</span>);</span><br><span class="line">        printMenu(menu2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n DRINK&quot;</span>);</span><br><span class="line">        printMenu(menu3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        Iterator&lt;MenuItem&gt; it = menu.createIterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MENU</span></span><br><span class="line"><span class="comment">// ----</span></span><br><span class="line"><span class="comment">// BREAKFAST</span></span><br><span class="line"><span class="comment">// K &amp; B’s Pancake Breakfast, 2.99 -- Pancakes with scrambled eggs, and toast</span></span><br><span class="line"><span class="comment">// Regular Pancake Breakfast, 2.99 -- Pancakes with fried eggs, sausage</span></span><br><span class="line"><span class="comment">// Blueberry Pancakes, 3.49 -- Pancakes made with fresh blueberries</span></span><br><span class="line"><span class="comment">// Waffles, 3.59 -- Waffles, with your choice of blueberries or strawberries</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LUNCH</span></span><br><span class="line"><span class="comment">// Vegetarian BLT, 2.99 --  (Fakin’)Bacon with lettuce &amp; tomato on whole wheat</span></span><br><span class="line"><span class="comment">// BLT, 2.99 -- Bacon with lettuce &amp; tomato on whole wheat</span></span><br><span class="line"><span class="comment">// Soup of the day, 3.29 -- Soup of the day, with a side of potato salad</span></span><br><span class="line"><span class="comment">// Hotdog, 3.05 -- A hot dog, with saurkraut, relish, onions, topped with cheese</span></span><br><span class="line"><span class="comment">// Steamed Veggies and Brown Rice, 3.99 -- Steamed vegetables over brown rice</span></span><br><span class="line"><span class="comment">// Pasta, 3.89 -- Spaghetti with Marinara Sauce, and a slice of sourdough bread</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  DRINK</span></span><br><span class="line"><span class="comment">// Soup of the day, 3.69 -- A cup of the soup of the day, with a side salad</span></span><br><span class="line"><span class="comment">// Burrito, 4.29 -- A large burrito, with whole pinto beans, salsa, guacamole</span></span><br></pre></td></tr></table></figure>

<p>一切和预期的一样 ╮(￣▽￣””)╭</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/hexo/2020/10/12/Design-pattern-proxy/</url>
    <content><![CDATA[<p>记录一下代理模式的学习路径。代理模式常用的两种形式：静态代理，动态代理。其中，动态代理在两个国民级框架 mybatis 和 spring 中都有用到。</p>
<p>代理模式的定义：为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p>
<p>通过代理模式我们可以：</p>
<ol>
<li>隐藏委托类的具体实现</li>
<li>客户和委托类解偶，在不改变委托类的情况下添加额外功能</li>
</ol>
<p>插入类图 Here…</p>
<p>这里我们举一个生活中常见的例子，外卖小哥。在这个情境下，外卖小哥就是我们的代理。帮我们执行买餐这个动作。同时作为扩展，它还可以帮我们买烟买水，倒垃圾等。。。虽然我不提倡这种做法，只用于举例，无伤大雅。</p>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>公共接口，用来点单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">order</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户实现，这个类代表叫外卖的人</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Order and pay money...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>外卖小哥类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryGuy</span> <span class="keyword">implements</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeliveryGuy</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customer = customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        customer.order();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        Order order = <span class="keyword">new</span> DeliveryGuy(customer);</span><br><span class="line">        order.order();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ol>
<li>简单直接</li>
<li>解偶</li>
<li>代理类扩展业务方便</li>
</ol>
<p>缺点：</p>
<p>每个业务都需要一个代理类，冗余代码很多</p>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>常见的有两种方式：JDK 原生动态代理和 CGLib 动态代理，这里只介绍第一种。</p>
<p>JDK 根据代理模式的特性，制定了一套规范，参照他的规范，可以在很方便的在运行时产生代理类代码，而不需要在编译器写源码，更方便，当然代价就是增加了学习成本，代码不像之前那么一目了然了。实现时主要依赖两个 reflect 下的原生类 Proxy 和 InvocationHandler。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        Object obj = method.invoke(target, args);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;buy something...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;take out the trash...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LogHandler logHandler = <span class="keyword">new</span> LogHandler(<span class="keyword">new</span> Customer());</span><br><span class="line">        Order order = (Order) (Proxy.newProxyInstance(Order.class.getClassLoader(), <span class="keyword">new</span> Class[] &#123;Order.class&#125;, logHandler));</span><br><span class="line">        order.order();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LogHandler 的实现中 invok 的是要要特别注意一下，method.invoke 的参数是<strong>target</strong>。我一开始直接把 proxy 但参数传入了，排查了好久 （；￣ェ￣）</p>
<p>中的来说没什么难度，最花时间的部分是熟悉这种使用方式，第一次理解起来可能花点时间。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/hexo/2021/08/11/Design-pattern-singleton-md/</url>
    <content><![CDATA[<p>目的：保证一个类只有一个实例，并提供一个访问他的全局访问点</p>
<p>关键代码：</p>
<ul>
<li>构造函数<strong>私有化</strong></li>
<li>私有静态变量</li>
<li>对外的静态方法</li>
</ul>
<p>介绍几种单例模式的实现方式 - 有种回字的几种写法的意思，略无聊</p>
<h2 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式 - 线程不安全"></a>懒汉式 - 线程不安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton01</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton01 instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton01</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton01 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton01();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单易懂，但是线程不安全</p>
<h2 id="懒汉式-线程安全"><a href="#懒汉式-线程安全" class="headerlink" title="懒汉式 - 线程安全"></a>懒汉式 - 线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton02 instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton02</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton02 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton02();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现简单，线程安全，方法体加锁比较耗资源，当 getInstance() 调用不频繁时可以使用</p>
<h2 id="饿汉式-线程安全"><a href="#饿汉式-线程安全" class="headerlink" title="饿汉式 - 线程安全"></a>饿汉式 - 线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton03</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton03 instance = <span class="keyword">new</span> Singleton03();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton03</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton03 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现简单，线程安全，通过 classloader 避免同步问题，缺点是类加载就初始化，浪费内存</p>
<h2 id="双检锁-双重校验锁-DCL-double-checked-locking"><a href="#双检锁-双重校验锁-DCL-double-checked-locking" class="headerlink" title="双检锁/双重校验锁 DCL double-checked locking"></a>双检锁/双重校验锁 DCL double-checked locking</h2><p>注意 volatile 的使用，避免指令重排</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton04</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton04 instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton04</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton04 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton04.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton04();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>略显复杂，但是性能良好效率高，懒加载，线程安全 Java 1.5 后有效。</p>
<ul>
<li><a href="https://www.cnblogs.com/xz816111/p/8470048.html">CNBLOG</a></li>
</ul>
<h2 id="登记式-静态内部类"><a href="#登记式-静态内部类" class="headerlink" title="登记式/静态内部类"></a>登记式/静态内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton05</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton05 INSTANCE = <span class="keyword">new</span> Singleton05();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton05</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton05 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现简单，线程安全，懒加载。效果和双检锁一致。但是由于只在被使用时才通过 classloader 加载，效率回更高</p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton06 &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>理论上来说最安全，最简单的实现，不过不流行。 Effective Java 作者推荐的写法</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>应试</tag>
        <tag>Design Pattern</tag>
        <tag>剑指 offer</tag>
      </tags>
  </entry>
  <entry>
    <title>访问者模式</title>
    <url>/hexo/2020/09/09/Design-pattern-visitor/</url>
    <content><![CDATA[<blockquote>
<p>GoF 定义: Allows for one or more operation to be applied to a set of objects at runtime, decoupling the operations from the object structure. </p>
</blockquote>
<p>访问者模式讲的是表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>
<p>行为模式之一，目的是将<strong>行为</strong>和<strong>对象</strong>分开。</p>
<p>缺点：<strong>每增</strong>加一种支持的 object，你就必须在 visitor 及其实现类中添加新的方法支持这个改动。</p>
<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>被访问者就是上文中的 object，他持有数据，我们想把他和数据运算分离，保持其独立性</p>
<p>访问者代表着 operations，通过它可以实现数据运算</p>
<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="From-DZone"><a href="#From-DZone" class="headerlink" title="From DZone"></a>From DZone</h3><ul>
<li><a href="https://dzone.com/articles/design-patterns-visitor">DZone - Visitor Pattern</a></li>
</ul>
<p>抽象一个邮寄业务，计算购物车中所有的物件总的邮费。每样物件都有自己的属性，比如价格，重量之类的。我们将邮费计算的规则单独封装在 Visitor 中，在物件类中通过调用 accept 实现计算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代表 object 的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 accept 的实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price = <span class="number">8.0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> weight = <span class="number">3.2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// visitor 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Book book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Shoes shoes)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// visitor 实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostageVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> totalPostageForCart;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// rule to calculate book postage cost</span></span><br><span class="line">        <span class="comment">// if price over 10, free postage.</span></span><br><span class="line">        <span class="keyword">if</span>(book.getPrice() &lt; <span class="number">10.0</span>) &#123;</span><br><span class="line">            totalPostageForCart += book.getWeight() * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Shoes shoes)</span> </span>&#123; <span class="comment">//TODO &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalPostageForCart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.totalPostageForCart;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        Shoes shoes = <span class="keyword">new</span> Shoes();</span><br><span class="line">        PostageVisitor postageVisitor = <span class="keyword">new</span> PostageVisitor();</span><br><span class="line"></span><br><span class="line">        book.accept(postageVisitor);</span><br><span class="line">        shoes.accept(postageVisitor);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Total cost: &quot;</span> + postageVisitor.getTotalPostageForCart());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="From-Refactoring-Guru"><a href="#From-Refactoring-Guru" class="headerlink" title="From Refactoring Guru"></a>From Refactoring Guru</h3><ul>
<li><a href="https://refactoringguru.cn/design-patterns/visitor/java/example">重构大师</a></li>
</ul>
<p>根据定义的图形打印信息到 XML 文件中，这个例子本质上和前一个没什么区别，但是他提供了组合类型的 object 支持，并且输出 xml, 还有 format 都让我眼前一亮。反正感觉很赞！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义持有 accept 的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dot</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dot</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// move shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// draw shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.visitDot(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getter + setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义组合类型的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompoundShape</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Shape&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CompoundShape</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// move shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// draw shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.visitCompoundGraphic(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Shape shape)</span> </span>&#123;</span><br><span class="line">        children.add(shape);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 visitor 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">visitDot</span><span class="params">(Dot dot)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">visitCircle</span><span class="params">(Circle circle)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">visitRectangle</span><span class="params">(Rectangle rectangle)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">visitCompoundGraphic</span><span class="params">(CompoundShape cg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// visitor 实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLExportVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">export</span><span class="params">(Shape... args)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : args) &#123;</span><br><span class="line">            sb.append(shape.accept(<span class="keyword">this</span>)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">visitDot</span><span class="params">(Dot d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;dot&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;id&gt;&quot;</span> + d.getId() + <span class="string">&quot;&lt;/id&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;x&gt;&quot;</span> + d.getX() + <span class="string">&quot;&lt;/x&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;y&gt;&quot;</span> + d.getY() + <span class="string">&quot;&lt;/y&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/dot&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">visitCompoundGraphic</span><span class="params">(CompoundShape cg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;compound_graphic&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;   &lt;id&gt;&quot;</span> + cg.getId() + <span class="string">&quot;&lt;/id&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                _visitCompoundGraphic(cg) +</span><br><span class="line">                <span class="string">&quot;&lt;/compound_graphic&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">_visitCompoundGraphic</span><span class="params">(CompoundShape cg)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : cg.children) &#123;</span><br><span class="line">            String obj = shape.accept(<span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">// Proper indentation for sub-objects.</span></span><br><span class="line">            obj = <span class="string">&quot;    &quot;</span> + obj.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;\n    &quot;</span>) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            sb.append(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dot dot = <span class="keyword">new</span> Dot(<span class="number">1</span>, <span class="number">10</span>, <span class="number">55</span>);</span><br><span class="line">        Circle circle = <span class="keyword">new</span> Circle(<span class="number">2</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">10</span>);</span><br><span class="line">        Rectangle rectangle = <span class="keyword">new</span> Rectangle(<span class="number">3</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        CompoundShape compoundShape = <span class="keyword">new</span> CompoundShape(<span class="number">4</span>);</span><br><span class="line">        compoundShape.add(dot);</span><br><span class="line">        compoundShape.add(circle);</span><br><span class="line">        compoundShape.add(rectangle);</span><br><span class="line"></span><br><span class="line">        CompoundShape c = <span class="keyword">new</span> CompoundShape(<span class="number">5</span>);</span><br><span class="line">        c.add(dot);</span><br><span class="line">        compoundShape.add(c);</span><br><span class="line"></span><br><span class="line">        export(circle, compoundShape);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">export</span><span class="params">(Shape... shapes)</span> </span>&#123;</span><br><span class="line">        XMLExportVisitor exportVisitor = <span class="keyword">new</span> XMLExportVisitor();</span><br><span class="line">        System.out.println(exportVisitor.export(shapes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 mybatis</title>
    <url>/hexo/2020/10/12/Dive-into-mybatis/</url>
    <content><![CDATA[<p>通过阅读 mybatis 源码，尝试深入理解其设计理念和实现方式。学习思路，通过对比 mybatis 代码结构和传统的 JDBC 实现来理解。说白了 mybatis 只是把传统的实现做了封装，避免了很多冗余代码。</p>
<p>JDBC 流程和 mybatis 的对应比较：</p>
<table>
<thead>
<tr>
<th align="left">JDBC</th>
<th align="left">Mybatis</th>
</tr>
</thead>
<tbody><tr>
<td align="left">加载驱动, 获取连接</td>
<td align="left">mybatis-config.xml</td>
</tr>
<tr>
<td align="left">执行 SQL</td>
<td align="left">SqlSessionFactory, SqlSession</td>
</tr>
<tr>
<td align="left">组装结果</td>
<td align="left">MappedStatement</td>
</tr>
</tbody></table>
<h2 id="配置加载"><a href="#配置加载" class="headerlink" title="配置加载"></a>配置加载</h2><p>在 JDBC 实现中，我们通过类似如下代码得到连接信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtils</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">//1.加载驱动程序</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="comment">//2.获得数据库的连接</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(URL, NAME, PASSWORD);</span><br><span class="line">    <span class="comment">// other actions...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 mybatis 中，这些信息都是写在核心配置文件 xml 中的。样板如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?...&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12345678&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/jzheng/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>加载相关的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="comment">// 获取文件流</span></span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource); </span><br><span class="line"><span class="comment">// 构建工厂</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure>

<p>想要了解的点：</p>
<ol>
<li>mybatis 是如何解析 xml 的 - 写一篇 Builder pattern 的文章，解析的时候重度使用这种模式</li>
<li>在解析的时候都塞了一些什么东西</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Item 34 能用枚举就别用 int 常量</title>
    <url>/hexo/2020/06/05/Effective-Java-Item-34-%E8%83%BD%E7%94%A8%E6%9E%9A%E4%B8%BE%E5%B0%B1%E5%88%AB%E7%94%A8-int-%E5%B8%B8%E9%87%8F/</url>
    <content><![CDATA[<p>本节要点：</p>
<ul>
<li>使用 enum 代替 整型/字符型枚举模式</li>
<li>enum 是 final，单例的安全</li>
<li>在 enum 内部使用 abstract 方法使得实例和方法绑定</li>
<li>用 values() 遍历，用 valueOf() 反向索取</li>
<li>使用策略枚举来封装算法</li>
</ul>
<p>在枚举类加入到 java 大家族之前，为了表达达到枚举的效果，我们使用整形常量来表示，这种表达方式被叫做： int 枚举模式(int enum pattern), 例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> APPLE_FUJI = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> APPLE_PIPPIN = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> APPLE_GRANNY_SMITH = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORANGE_NAVEL = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORANGE_TEMPLE = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORANGE_BLOOD = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>缺点： 类型不安全 + 描述性不好， 与之类似的还有 String 枚举模式(String enum pattern)。就是用 String 来代替上例中的 int, 这种做法更糟糕，就算拼写错误也能编译通过，很容易引入 bug。</p>
<p>枚举中每个实例都是单例的，是 public static final 的 field。 枚举没有可访问的构造器，所以不能被继承，是真正的 final 类型的 class。enum 提供了一个命名空间，所以不同 enum 中重名是允许的。示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Apple &#123; FUJI, PIPPIN, GRANNY_SMITH &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Orange &#123; NAVEL, TEMPLE, BLOOD &#125;</span><br></pre></td></tr></table></figure>

<p>太阳系八大行星枚举示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Planet &#123;</span><br><span class="line">    MERCURY(<span class="number">3.302e+23</span>, <span class="number">2.439e6</span>),</span><br><span class="line">    VENUS(<span class="number">4.869e+24</span>, <span class="number">6.052e6</span>),</span><br><span class="line">    EARTH(<span class="number">5.975e+24</span>, <span class="number">6.378e6</span>), </span><br><span class="line">    MARS(<span class="number">6.419e+23</span>, <span class="number">3.393e6</span>),</span><br><span class="line">    JUPITER(<span class="number">1.899e+27</span>, <span class="number">7.149e7</span>), </span><br><span class="line">    SATURN(<span class="number">5.685e+26</span>, <span class="number">6.027e7</span>),</span><br><span class="line">    URANUS(<span class="number">8.683e+25</span>, <span class="number">2.556e7</span>), </span><br><span class="line">    NEPTUNE(<span class="number">1.024e+26</span>, <span class="number">2.477e7</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> mass;           <span class="comment">// In kilograms</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> radius;         <span class="comment">// In meters</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> surfaceGravity; <span class="comment">// In m / s^2</span></span><br><span class="line">    <span class="comment">// Universal gravitational constant in m^3 / kg s^2</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> G = <span class="number">6.67300E-11</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    Planet(<span class="keyword">double</span> mass, <span class="keyword">double</span> radius) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mass = mass;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">        surfaceGravity = G * mass / (radius * radius);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">radius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">surfaceGravity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> surfaceGravity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">surfaceWeight</span><span class="params">(<span class="keyword">double</span> mass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mass * surfaceGravity;  <span class="comment">// F = ma&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>枚举中所有的 field 都应该是 final 的。枚举都有 values() 静态方法， 按照声明顺序返回枚举值。</p>
<p>根据枚举类的适用范围制定他的访问权限，如果是普适的，就把他定义成顶层类，比如 math 中控制舍入模式的 RoundingMode 类。</p>
<p>枚举绑定行为的最佳实践：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通表示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Operation &#123;</span><br><span class="line">    PLUS, MINUS, TIMES, DIVIDE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> PLUS:</span><br><span class="line">                <span class="keyword">return</span> x + y;</span><br><span class="line">            <span class="keyword">case</span> MINUS:</span><br><span class="line">                <span class="keyword">return</span> x - y;</span><br><span class="line">            <span class="keyword">case</span> TIMES:</span><br><span class="line">                <span class="keyword">return</span> x * y;</span><br><span class="line">            <span class="keyword">case</span> DIVIDE:</span><br><span class="line">                <span class="keyword">return</span> x / y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">&quot;Unknown op: &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺点：</p>
<ul>
<li>没有 throw exception 会编译失败</li>
<li>代码脆弱，在添加新操作，如果没有添加 switch 分支的话，新操作不能生效</li>
</ul>
<p>改进版：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Operation &#123;</span><br><span class="line">    PLUS(<span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, MINUS(<span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x - y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, TIMES(<span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x * y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, DIVIDE(<span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x / y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line"></span><br><span class="line">    Operation(String symbol) &#123;</span><br><span class="line">        <span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过将 apply 方法声明为 abstrct 类型迫使枚举类的每个 field 都必须实现自己的 apply 方法达到绑定的效果，这种做法称为：constant-specific method implementation。</p>
<p>通过使用 values() 方法，可以很方便的实现迭代</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">2.0</span>;</span><br><span class="line"><span class="keyword">double</span> y = <span class="number">4.0</span>;</span><br><span class="line"><span class="keyword">for</span> (Operation op : Operation.values()) &#123;</span><br><span class="line">    System.out.printf(<span class="string">&quot;%f %s %f = %f%n&quot;</span>, x, op , y, op.apply(x, y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果 enum 的 toString 方法被重写了，可以订制 fromString() 方法实现字符到枚举的转化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将枚举的名称和枚举类型配对，存到 map 中</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Operation&gt; stringToEnum = Stream.of(Operation.values()).collect(Collectors.toMap(Object::toString, e-&gt; e));</span><br><span class="line"><span class="comment">// 新增 fromString 方法根据 toString 的值到 map 中取数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;Operation&gt; <span class="title">fromString</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(stringToEnum.get(symbol));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(fromString(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">System.out.println(fromString(<span class="string">&quot;-&quot;</span>));</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Optional.empty</span></span><br><span class="line"><span class="comment">// Optional[-]</span></span><br></pre></td></tr></table></figure>

<p>通过 switch 来控制 enum 中的条件选择的例子, 该例用于计算薪资，根据工作日和休息日采取不同的薪资计算。在这个例子中周末工资的理解很有意思，它等于<strong>基本工资 + 从一开始就累加的加班工资</strong>，这样想的话这个例子理解起来会容易一点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> PayrollDay &#123;</span><br><span class="line">    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINS_PER_SHIFT = <span class="number">8</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> minutesWorked, <span class="keyword">int</span> payRate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> basePay = minutesWorked * payRate;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> overtimePay;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// weekends</span></span><br><span class="line">            <span class="keyword">case</span> SATURDAY:</span><br><span class="line">            <span class="keyword">case</span> SUNDAY:</span><br><span class="line">                overtimePay = basePay / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// work day</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                overtimePay = minutesWorked &lt;= MINS_PER_SHIFT ? <span class="number">0</span> : (minutesWorked - MINS_PER_SHIFT) * payRate / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> basePay + overtimePay;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 enum 中使用 switch 有一个弊端， 新添加的类型，比如我想加一个国亲节加班的薪资计算，如果忘了在 switch 中添加相应的分支， 虽然编译能过，然是薪资计算的规则已经出错了。我们通过在该 enum 中添加一个策略枚举来改善它</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> PayrollDay &#123;</span><br><span class="line">    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY,</span><br><span class="line">    SATURDAY(PayType.WEEKEND), SUNDAY(PayType.WEEKEND);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PayType payType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINS_PER_SHIFT = <span class="number">8</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    PayrollDay(PayType payType) &#123;</span><br><span class="line">        <span class="keyword">this</span>.payType = payType;</span><br><span class="line">    &#125; <span class="comment">// constructor for weekend</span></span><br><span class="line"></span><br><span class="line">    PayrollDay() &#123;</span><br><span class="line">        <span class="keyword">this</span>(PayType.WEEKDAY);</span><br><span class="line">    &#125; <span class="comment">// constructor for weekday</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> minutesWorked, <span class="keyword">int</span> payRate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> payType.pay(minutesWorked, payRate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> PayType &#123;</span><br><span class="line">        WEEKDAY &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">overtimePay</span><span class="params">(<span class="keyword">int</span> minsWorked, <span class="keyword">int</span> payRate)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> minsWorked &lt;= MINS_PER_SHIFT ? <span class="number">0</span> : (minsWorked - MINS_PER_SHIFT) * payRate / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        WEEKEND &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">overtimePay</span><span class="params">(<span class="keyword">int</span> minsWorked, <span class="keyword">int</span> payRate)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> minsWorked * payRate / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">overtimePay</span><span class="params">(<span class="keyword">int</span> minsWorked, <span class="keyword">int</span> payRate)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINS_PER_SHIFT = <span class="number">8</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> minsWorked, <span class="keyword">int</span> payRate)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> basePay = minsWorked * payRate;</span><br><span class="line">            <span class="keyword">return</span> basePay + overtimePay(minsWorked, payRate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以总结起来就是在枚举内部别用 switch， 在外部鼓励使用。枚举在性能上与 int 相当，但是由于包装成对象形肯定要略差的，但是使用上感觉不出来。所以<strong>每当需要一组固定常量，并且在编译时就知道其成员的时候，就应该使用枚举</strong></p>
<p>多个枚举共享行为是可以用<strong>策略枚举</strong>的形式</p>
<p>枚举中的常量集并不一定要始终保持不变(?不是很清楚怎么理解，没碰到过这种情况)</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effective java</tag>
        <tag>枚举和注解</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Item 42 Lambda 优先于匿名类</title>
    <url>/hexo/2020/06/04/Effective-Java-Item-42-Lambda-%E4%BC%98%E5%85%88%E4%BA%8E%E5%8C%BF%E5%90%8D%E7%B1%BB/</url>
    <content><![CDATA[<p>本节要点：</p>
<ul>
<li>使用 lambda 代替匿名函数</li>
<li>不要指定 lambda 中的数据类型，除非报错</li>
<li>主要长度，最多三行</li>
</ul>
<p>名词对照表</p>
<table>
<thead>
<tr>
<th>EN</th>
<th>CN</th>
</tr>
</thead>
<tbody><tr>
<td>function type</td>
<td>函数类型</td>
</tr>
<tr>
<td>function object</td>
<td>函数对象</td>
</tr>
<tr>
<td>function interface</td>
<td>函数接口</td>
</tr>
<tr>
<td>type inference</td>
<td>类型推导</td>
</tr>
<tr>
<td>raw type</td>
<td>原生类型</td>
</tr>
</tbody></table>
<p>自从 java 1.1 发布依赖，如果我们想要创建一个方法对象那么就需要使用到匿名函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;jerry&quot;</span>, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(o1.length(), o2.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// tom</span></span><br><span class="line"><span class="comment">// jerry</span></span><br></pre></td></tr></table></figure>

<p>这种表述方式可以实现我们的需求，但是实现繁琐并且语义表达不顺畅， 在 java 8 中，我们可以使用 lambda 来代替匿名函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;jerry&quot;</span>, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">Collections.sort(list, (s1, s2) -&gt; Integer.compare(s1.length(), s2.length()));</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 甚至可以简写为</span></span><br><span class="line">Collections.sort(list, Comparator.comparingInt(String::length));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者更甚</span></span><br><span class="line">list.sort(Comparator.comparingInt(String::length));</span><br></pre></td></tr></table></figure>

<p>再使用 lambda 的时候有一条原则<strong>去掉 lambda 中的所有参数类型，除非它能使你的表达更清楚</strong>。默认情况下，程序会根据上下文推断出类型，实在不行它会报错的，那个时候你再自己修不迟。</p>
<p>Operator 枚举类优化，可以将参数使用 DoubleBinaryOperator 这个方法接口做优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原始代码</span></span><br><span class="line"><span class="keyword">enum</span> Operation &#123;</span><br><span class="line">    PLUS(<span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    MINUS(<span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x - y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    TIMES(<span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x * y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    DIVIDE(<span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line"></span><br><span class="line">    Operation(String symbol) &#123; <span class="keyword">this</span>.symbol = symbol; &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> symbol; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过将上面的 apply() 方法抽象，这个 Operation 的枚举中的行为可以看作是传入两个数，进行计算， 我们将计算抽象，得到如下的简化形式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Operation &#123;</span><br><span class="line">    PLUS(<span class="string">&quot;+&quot;</span>, (x, y) -&gt; x + y),</span><br><span class="line">    MINUS(<span class="string">&quot;-&quot;</span>, (x, y) -&gt; x - y),</span><br><span class="line">    TIMES(<span class="string">&quot;*&quot;</span>, (x, y) -&gt; x * y),</span><br><span class="line">    DIVIDE(<span class="string">&quot;/&quot;</span>, (x, y) -&gt; x / y);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DoubleBinaryOperator operator;</span><br><span class="line"></span><br><span class="line">    Operation(String symbol, DoubleBinaryOperator operator) &#123;</span><br><span class="line">        <span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">        <span class="keyword">this</span>.operator = operator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> symbol; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> operator.applyAsDouble(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺点：lambda 没有名字和文档，如果一段算法不能自我描述，或者超出了几行，就别把他放到一个 lambda 函数中。 </p>
<p>lambda 注意点：</p>
<ul>
<li>一个 lambda 一行是最理想的，最多不能超过三行！</li>
<li>绝大多视情况下，使用 lambda 代替匿名函数，但是如果是对抽象类的实现，还是得依靠匿名函数， lambda 并不能完成这样的功能。</li>
<li>lambda 不能获取自身引用， 在 lambda 中 this 指代的是外围示例，匿名类中 this 指自己</li>
<li>可能的话，别去序列化 lambda 和 匿名函数</li>
<li>lambda 是小函数的最佳表现方式，除非万不得已，不然就别用匿名类实现函数接口</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effective java</tag>
        <tag>Lambda和Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Item 55 谨慎返回 Optional</title>
    <url>/hexo/2020/06/08/Effective-Java-Item-55-%E8%B0%A8%E6%85%8E%E8%BF%94%E5%9B%9E-Optional/</url>
    <content><![CDATA[<p>在 Java 8 中，引入了 Optional class 给我们在处理无法返回任何值的情况下，有了第三种选择。</p>
<h2 id="Optional-概览，基于-Java-1"><a href="#Optional-概览，基于-Java-1" class="headerlink" title="Optional 概览，基于 Java 1"></a>Optional 概览，基于 Java 1</h2><p>他是一个 final 类， 方法列表如下</p>
<table>
<thead>
<tr>
<th>name</th>
<th>返回值</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>empty()</td>
<td>Optional<T></td>
<td>返回一个空的实例</td>
</tr>
<tr>
<td>filter(Predicate&lt;? super T&gt; predicate)</td>
<td>Optional<T></td>
<td>过滤</td>
</tr>
<tr>
<td>flatMap(Function&lt;? super T, ? extends Optional&lt;? extends U&gt;&gt; mapper)</td>
<td>Optional<U></td>
<td>扁平化操作</td>
</tr>
<tr>
<td>get()</td>
<td>T</td>
<td>取值</td>
</tr>
<tr>
<td>ifPresent(Consumer&lt;? super T&gt; action)</td>
<td>void</td>
<td>如果值存在，执行给定的操作</td>
</tr>
<tr>
<td>ifPresentOrElse(Consumer&lt;? super T&gt; action, Runnable emptyAction)</td>
<td>void</td>
<td>如果存在，执行给定操作，否则运行 empty-base action</td>
</tr>
<tr>
<td>isEmpty()</td>
<td>boolean</td>
<td>是否为空</td>
</tr>
<tr>
<td>isPresent()</td>
<td>boolean</td>
<td>是否有值</td>
</tr>
<tr>
<td>map(Function&lt;? super T, ? extends U&gt; mapper)</td>
<td>Optional<U></td>
<td>对每个元素操作</td>
</tr>
<tr>
<td>of(T value)</td>
<td>Optional<T></td>
<td>生成对象</td>
</tr>
<tr>
<td>ofNullable(T value)</td>
<td>Optional<T></td>
<td>生成 empty 或 有值的 optional 对象</td>
</tr>
<tr>
<td>or(Supplier&lt;? extends Optional&lt;? extends T&gt;&gt; supplier)</td>
<td>Optional<T></td>
<td>present 返回自己，否则返回 supplier 生成的对象</td>
</tr>
<tr>
<td>orElse(T other)</td>
<td>T</td>
<td>present 返回自己，否则返回 else 中指定的值</td>
</tr>
<tr>
<td>orElseGet(Supplier&lt;? extends T&gt; supplier)</td>
<td>T</td>
<td>present 返回自己，否则返回 else 中指定的 spplier 生成的对象</td>
</tr>
<tr>
<td>orElseThrow()</td>
<td>T</td>
<td>存在值，返回，否则抛 NoSuchElementException</td>
</tr>
<tr>
<td>stream()</td>
<td>Stream<T></td>
<td>产生流</td>
</tr>
<tr>
<td>toString()</td>
<td>String</td>
<td>/</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; op = Optional.of(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">System.out.println(op.isEmpty()); <span class="comment">// false</span></span><br><span class="line">System.out.println(op.isPresent()); <span class="comment">// true</span></span><br><span class="line">Optional&lt;String&gt; op2 = Optional.empty();</span><br><span class="line">op2.get(); <span class="comment">// Exception in thread &quot;main&quot; java.util.NoSuchElementException</span></span><br><span class="line">String ret = op2.orElse(<span class="string">&quot;backup&quot;</span>); <span class="comment">// backup</span></span><br></pre></td></tr></table></figure>

<p>or vs orElseGet: 返回值不同，前者返回 Optional 对象，后者返回的泛型指定的值</p>
<h2 id="item-55"><a href="#item-55" class="headerlink" title="item 55"></a>item 55</h2><p>本节要点：</p>
<ul>
<li>Optional 强制客户端对返回值做校验</li>
<li>如果不能从 Optional 中 get 值，会抛 NoSuchElementException</li>
<li>永远不要通过返回 Optional 的方法返回 null, 这违背了设计的本意</li>
<li>Optional 本质上与受检测异常相似</li>
<li>容器类，比如 map, stream, 数组和 optional 都不应该装载在 optional 中，你可以返回空的容器，比如空的数组</li>
<li>不要返回基本包装类型的 Option， 有其他的替代品比如 OptionalInt</li>
<li>Optional 不要作为map， set 中的键元素，数组也不行</li>
<li>Optional 相对而言还是比较消耗资源的，性能要求高的场景谨慎使用</li>
</ul>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">E <span class="title">max</span><span class="params">(Collection&lt;E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Empty collection&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (E e : c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span> || e.compareTo(result) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result =  Objects.requireNonNull(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 Optional 优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">Optional&lt;E&gt; <span class="title">max</span><span class="params">(Collection&lt;E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (E e : c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span> || e.compareTo(result) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result =  Objects.requireNonNull(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Optional.of(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 Stream 优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">Optional&lt;E&gt; <span class="title">max</span><span class="params">(Collection&lt;E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c.stream().max(Comparator.naturalOrder());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果没有返回备选</span></span><br><span class="line">max(words).orElse(<span class="string">&quot;other words...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有，抛出异常</span></span><br><span class="line">max(toys).orElseThrow(TmperTantrumException::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">ph.parent().map(h -&gt; String.valueIf(h.pid())).orElse(<span class="string">&quot;N/A&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤非空的 Optional 集合</span></span><br><span class="line">List&lt;Optional&lt;String&gt;&gt; listOfOptionals = Arrays.asList(Optional.empty(), Optional.of(<span class="string">&quot;foo&quot;</span>), Optional.empty(), Optional.of(<span class="string">&quot;bar&quot;</span>));</span><br><span class="line"><span class="comment">// Java 8 </span></span><br><span class="line">List&lt;String&gt; filteredList = listOfOptionals.stream()</span><br><span class="line">  .filter(Optional::isPresent)</span><br><span class="line">  .map(Optional::get)</span><br><span class="line">  .collect(Collectors.toList());</span><br><span class="line"><span class="comment">// Java9 中可以简化为</span></span><br><span class="line">List&lt;String&gt; filteredList = listOfOptionals.stream()</span><br><span class="line">  .flatMap(Optional::stream)</span><br><span class="line">  .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effective java</tag>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java chapter 2 creating and destorying objects</title>
    <url>/hexo/2020/10/20/Effective-Java-chapter-2-creating-and-destorying-objects/</url>
    <content><![CDATA[<p>第二章 对象的生成和销毁 读书笔记</p>
<h2 id="实体类有很多构造函数的时候，使用-Builder"><a href="#实体类有很多构造函数的时候，使用-Builder" class="headerlink" title="实体类有很多构造函数的时候，使用 Builder"></a>实体类有很多构造函数的时候，使用 Builder</h2><blockquote>
<p>In summary, the Builder pattern is a good choice when designing classes whose constructors or static factories would have more than a handful of parameters, especially if many of the parameters are optional or of identical type. Client code is much easier to read and write with builders than with telescoping constructors, and builders are much safer than JavaBeans.</p>
<p>总的来说，builder 模式适用于实体类有多个构造函数并且参数大于 5 个，参数可选并且参数类型相同的情况。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单的多构造函数实体类例子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;  <span class="comment">// (mL)            required</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;     <span class="comment">// (per container) required</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;     <span class="comment">// (per serving)   optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;          <span class="comment">// (g/serving)     optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;       <span class="comment">// (mg/serving)    optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate; <span class="comment">// (g/serving)     optional</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, fat, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat, <span class="keyword">int</span> sodium)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, fat, sodium, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat, <span class="keyword">int</span> sodium, <span class="keyword">int</span> carbohydrate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servingSize = servingSize;</span><br><span class="line">        <span class="keyword">this</span>.servings = servings;</span><br><span class="line">        <span class="keyword">this</span>.calories = calories;</span><br><span class="line">        <span class="keyword">this</span>.fat = fat;</span><br><span class="line">        <span class="keyword">this</span>.sodium = sodium;</span><br><span class="line">        <span class="keyword">this</span>.carbohydrate = carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多构造函数能够工作，但是对客户端来说多个参数的构造函数在调用和阅读上比较容易出错。</p>
<p>为了解决上面的多构造器模式的弊端，还有一种解决方案是采用 简单构造函数 + setter 的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单构造函数 + Setter 的模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFactsV2</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Parameters initialized to default values (if any)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> servingSize = -<span class="number">1</span>; <span class="comment">// Required; no default value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> servings = -<span class="number">1</span>; <span class="comment">// Required; no default value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFactsV2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServingSize</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        servingSize = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServings</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        servings = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCalories</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        calories = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFat</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        fat = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSodium</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        sodium = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCarbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        carbohydrate = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>弊端：调用是分散的，类属性可能存在不一致；这种模式不可能把一类做成不可变，需要额外的努力来确保线程安全。</p>
<p>以下是建造者模式的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Required parameters</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Optional parameters - initialized to default values</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.servingSize = servingSize;</span><br><span class="line">            <span class="keyword">this</span>.servings = servings;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">calories</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            calories = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            fat = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            sodium = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">carbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            carbohydrate = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NutritionFacts <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NutritionFacts(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NutritionFacts</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        servingSize = builder.servingSize;</span><br><span class="line">        servings = builder.servings;</span><br><span class="line">        calories = builder.calories;</span><br><span class="line">        fat = builder.fat;</span><br><span class="line">        sodium = builder.sodium;</span><br><span class="line">        carbohydrate = builder.carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端调用代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NutritionFacts cocaCola = <span class="keyword">new</span> NutritionFacts.Builder(<span class="number">240</span>, <span class="number">8</span>).calories(<span class="number">100</span>).sodium(<span class="number">35</span>).carbohydrate(<span class="number">27</span>).build();</span><br></pre></td></tr></table></figure>

<p>多态下使用 Builder 模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Topping &#123;HAM, MUSHROOM, ONION, PEPPER, SAUSAGE&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Set&lt;Topping&gt; toppings;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Builder</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> EnumSet&lt;Topping&gt; toppings = EnumSet.noneOf(Topping.class);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">addTopping</span><span class="params">(Topping topping)</span> </span>&#123;</span><br><span class="line">            toppings.add(Objects.requireNonNull(topping));</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> Pizza <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Subclasses must override this method to return &quot;this&quot;</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">self</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Pizza(Builder&lt;?&gt; builder) &#123;</span><br><span class="line">        toppings = builder.toppings.clone(); <span class="comment">// See Item 50&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类其一</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Size &#123;SMALL, MEDIUM, LARGE&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Size size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NYPizza</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(builder);</span><br><span class="line">        <span class="keyword">this</span>.size = builder.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NYPizza&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;size=&quot;</span> + size +</span><br><span class="line">                <span class="string">&quot;, toppings=&quot;</span> + toppings +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">Pizza</span>.<span class="title">Builder</span>&lt;<span class="title">Builder</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Size size;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Size size)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.size = Objects.requireNonNull(size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function">NYPizza <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NYPizza(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Builder <span class="title">self</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类其二</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calzone</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> sauceInside;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Calzone</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(builder);</span><br><span class="line">        <span class="keyword">this</span>.sauceInside = builder.sauceInside;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Calzone&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;sauceInside=&quot;</span> + sauceInside +</span><br><span class="line">                <span class="string">&quot;, toppings=&quot;</span> + toppings +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">Pizza</span>.<span class="title">Builder</span>&lt;<span class="title">Builder</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> sauceInside = <span class="keyword">false</span>; <span class="comment">// Default</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sauceInside</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            sauceInside = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function">Calzone <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Calzone(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Builder <span class="title">self</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NYPizza nyPizza = <span class="keyword">new</span> NYPizza.Builder(NYPizza.Size.LARGE).addTopping(Pizza.Topping.ONION).addTopping(Pizza.Topping.HAM).build();</span><br><span class="line">        System.out.println(nyPizza);</span><br><span class="line"></span><br><span class="line">        Calzone calzone = <span class="keyword">new</span> Calzone.Builder().sauceInside().addTopping(Pizza.Topping.HAM).addTopping(Pizza.Topping.SAUSAGE).build();</span><br><span class="line">        System.out.println(calzone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Builder 模式出了比较冗长之外没有其他坏处，而且扩展性好。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>使用 final 修饰属性有什么好处?<ul>
<li>可以保证对应的变量只被赋值一次，并且 final 修饰的变量必须得赋值</li>
</ul>
</li>
</ul>
<p>PS: 外部类可以访问内部类的私有变量，这个我之前倒是没有想到的</p>
<ul>
<li><p><code>Builder&lt;T extends Builder&lt;T&gt;&gt;</code> 语法</p>
<ul>
<li>这种语法叫做 递归类型参数(recursive type parameter), 是泛型的一种，指代泛型参数必须是自己的子类，不理解可以先记着</li>
</ul>
</li>
<li><p><code>protected abstract T self();</code> 为什么不直接返回 <code>this</code>?</p>
<ul>
<li>亲自写一下就会发现，builder 本身是个抽象类，所以是没有 <code>this</code> 这个指代的</li>
</ul>
</li>
<li><p>父类的构造器是 <code>protected</code> 的，不然子类无法继承, 同理 <code>toppings</code> 也应该是 protected 的，不然子类根本就访问不了 (´Д` )</p>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effective java</tag>
      </tags>
  </entry>
  <entry>
    <title>Email protocal</title>
    <url>/hexo/2022/03/23/Email-protocal/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Usage</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SMTP</td>
<td align="left">simple mail transfer protocal, 相当于中转站，将邮件发送到客户端</td>
</tr>
<tr>
<td align="left">POP3</td>
<td align="left">Post Office Protocol 3，将邮件从服务器下载到本地，同时删除邮件。是接收邮件的协。</td>
</tr>
<tr>
<td align="left">IMAP</td>
<td align="left">Internet Mail Access Protocol, 支持文件夹功能</td>
</tr>
<tr>
<td align="left">Exchange server</td>
<td align="left">微软提供的邮件服务</td>
</tr>
</tbody></table>
<h2 id="python-案例"><a href="#python-案例" class="headerlink" title="python 案例"></a>python 案例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"></span><br><span class="line">smtp = smtplib.SMTP(<span class="string">&quot;mail.sap.corp&quot;</span>, <span class="number">587</span>)</span><br><span class="line">smtp.starttls() <span class="comment"># this seting is required</span></span><br><span class="line">smtp.login(<span class="string">&quot;sf-pla-usermanagement-authentication-mails&quot;</span>,<span class="string">&quot;Authentication1&quot;</span>)</span><br><span class="line">smtp.sendmail(<span class="string">&#x27;noreply+sf_pla_usermanagement_authentication@sap.corp&#x27;</span>, <span class="string">&#x27;jiabin.zheng01@sap.com&#x27;</span>, message)</span><br><span class="line">smtp.quit()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.mail.host&#x3D;mail.sap.corp</span><br><span class="line">spring.mail.port&#x3D;587</span><br><span class="line">spring.mail.username&#x3D;sf-pla-usermanagement-authentication-mails</span><br><span class="line">spring.mail.password&#x3D;Authentication1</span><br><span class="line">spring.mail.properties.mail.smtp.auth&#x3D;true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.enable&#x3D;true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.required&#x3D;true</span><br><span class="line">spring.mail.properties.mail.smtp.from&#x3D;noreply+sf_pla_usermanagement_authentication@sap.corp</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>协议</category>
      </categories>
      <tags>
        <tag>email</tag>
      </tags>
  </entry>
  <entry>
    <title>Equals in python</title>
    <url>/hexo/2020/06/12/Equals-in-python/</url>
    <content><![CDATA[<ul>
<li><code>==</code> 和 <code>is</code> 的区别</li>
<li>怎么使得 Object 使用 <code>==</code> 比较相等</li>
<li>Set 集合中判断相等</li>
</ul>
<h2 id="Vs-is"><a href="#Vs-is" class="headerlink" title="== Vs is"></a>== Vs is</h2><p><code>==</code> 用来判断值相等，<code>is</code> 用来判断引用相等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line"></span><br><span class="line">a == b <span class="comment"># true</span></span><br><span class="line">a <span class="keyword">is</span> b <span class="comment"># true</span></span><br><span class="line"></span><br><span class="line">b = a[:]</span><br><span class="line">a == b <span class="comment"># true</span></span><br><span class="line">a <span class="keyword">is</span> b <span class="comment"># false</span></span><br></pre></td></tr></table></figure>

<h2 id="怎么使得-Object-使用-比较相等"><a href="#怎么使得-Object-使用-比较相等" class="headerlink" title="怎么使得 Object 使用 == 比较相等"></a>怎么使得 Object 使用 <code>==</code> 比较相等</h2><p>你需要重写 class 的 <strong>eq</strong> 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, id, name</span>):</span></span><br><span class="line">        self.id = id</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(other, Person):</span><br><span class="line">            <span class="comment"># don&#x27;t attempt to compare against unrelated types</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line">        <span class="keyword">return</span> self.id == other.id</span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">p2 = Person(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">p3 = Person(<span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p1 == p2 <span class="comment"># false</span></span><br><span class="line">p1 == p3 <span class="comment"># true</span></span><br></pre></td></tr></table></figure>

<p>Note: 重写 <strong>eq</strong> 将会使对象变为 unhashable，在存到 Set， Map 等集合中会有影响，你可以重写 <strong>hash</strong> 来定制</p>
<h2 id="Set-集合中判断相等"><a href="#Set-集合中判断相等" class="headerlink" title="Set 集合中判断相等"></a>Set 集合中判断相等</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, id, name</span>):</span></span><br><span class="line">        self.id = id</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(other, Person):</span><br><span class="line">            <span class="comment"># don&#x27;t attempt to compare against unrelated types</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line">        <span class="keyword">return</span> self.id == other.id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># necessary for instances to behave sanely in dicts and sets.</span></span><br><span class="line">        <span class="keyword">return</span> hash(self.id)</span><br><span class="line"></span><br><span class="line">set([p1, p2, p3]) <span class="comment"># only  p1, p2 will be stored</span></span><br></pre></td></tr></table></figure>

<p>set 中并没有使用新的 object 代替旧的的方法，所以如果想要更新的话只能 remove + add 了</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Get Know About Java Annotation</title>
    <url>/hexo/2020/08/05/Get-Know-About-Java-Annotation/</url>
    <content><![CDATA[<p>记录一下 Java 注解的学习过程</p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>设计一个测试案例，创建一个名为 Marked 的注解类，该注解可以添加在 method 上用来表示方法是否被标记过。在测试用力中遍历被标记的类并打印信息</p>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSelected;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter/Setter methods</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Marked</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Marked(value = true)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自己创建的注解类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Marked &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_print_by_anno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Method[] methods = Person.class.getDeclaredMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">        Marked myAnno = m.getAnnotation(Marked.class);</span><br><span class="line">        <span class="keyword">if</span> (myAnno != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Method: &quot;</span> + m.getName() + <span class="string">&quot; has marked annotation.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Marked value: &quot;</span> + myAnno.value());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Method: &quot;</span> + m.getName() + <span class="string">&quot; don&#x27;t has marked annotation.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>终端打印：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Method: getName has marked annotation.</span><br><span class="line">Marked value: false</span><br><span class="line">Method: setName don&#x27;t has marked annotation.</span><br><span class="line">Method: getAge has marked annotation.</span><br><span class="line">Marked value: true</span><br><span class="line">Method: setAge don&#x27;t has marked annotation.</span><br><span class="line">Method: isSelected don&#x27;t has marked annotation.</span><br><span class="line">Method: setSelected don&#x27;t has marked annotation.</span><br></pre></td></tr></table></figure>

<p>从这个例子可以看出来，Annotation 都是处理 class level 的问题的，和类延伸出来的实例基本没关系了</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>annotation</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 拾遗之 泛型</title>
    <url>/hexo/2020/08/07/Get-Know-About-Java-Generic/</url>
    <content><![CDATA[<p>记录一下泛型的定义，历史，使用案例等。素材主要来源于 On Java 8, Thinking in Java 和 Effective Java。</p>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>1.5 版本引入，主要动机是支持 Collection 类</p>
<h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>把这一块放到最前面时为了避免理解上的误区，泛型方法和泛型类，泛型接口没有从属关系，就算是普通的 Utils 方法也可以声明泛型方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">printParam</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    GenericUtils.printParam(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    GenericUtils.printParam(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Jack</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>即在声明类时添加类型声明，最常见的如 Collection 系列下的 ArrayList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>泛型接口只是在接口定义的时候在接口名称后接上类型声明而已。使用 lang 包中自带的 <code>Supplier</code> 接口为例，接口在声明时指定类型，并在 get() 方法中指定返回类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.8 中引入的接口，充当工厂方法的角色</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="function">T <span class="title">get</span><span class="params">()</span></span>; &#125;</span><br><span class="line"></span><br><span class="line">Supplier&lt;Integer&gt; integerSupplier = () -&gt; (<span class="keyword">new</span> Random()).nextInt();</span><br><span class="line">System.out.println(integerSupplier.get());</span><br></pre></td></tr></table></figure>

<h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><p>记录一下工作生活中遇到的具体使用案例</p>
<h3 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a>代码重构</h3><p>公司代码重构时遇到下面这种情况：</p>
<p>比如原来有个类叫 Background, 重构时为他抽了一个 interface IBackground。但是在替换一些集合相关的代码时出现了不兼容的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line">List&lt;Background&gt; list = someClass.getBackgroundList();</span><br><span class="line"><span class="comment">// what I prefer to, but compile failed</span></span><br><span class="line">List&lt;IBackground&gt; list = someClass.getBackgroundList();</span><br><span class="line"><span class="comment">// what I should do</span></span><br><span class="line">List&lt;IBackground&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(someClass.getBackgroundList());</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">List&lt;? extends IBackground&gt; list = someClass.getBackgroundList();</span><br></pre></td></tr></table></figure>

<p>上面的这种转换失败就是由泛型转化异常造成的</p>
<h3 id="指定泛型返回值为某个类的子类"><a href="#指定泛型返回值为某个类的子类" class="headerlink" title="指定泛型返回值为某个类的子类"></a>指定泛型返回值为某个类的子类</h3><p>可以使用泛型方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> &lt;T extends Sup&gt;  <span class="function">T <span class="title">getSometing</span><span class="params">()</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="返回-Map-类型的泛型方法？"><a href="#返回-Map-类型的泛型方法？" class="headerlink" title="返回 Map 类型的泛型方法？"></a>返回 Map 类型的泛型方法？</h2><p>这种用法称为 multi-level wildcards，参考 <a href="http://www.angelikalanger.com/GenericsFAQ/FAQSections/TypeArguments.html#FAQ101">这篇</a> 文章中的定义</p>
<p>子类现有方法为 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Sub&gt;&gt; getResult() &#123;</span><br><span class="line">    <span class="keyword">new</span> HashMap&lt;String, List&lt;Sub&gt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>想要给他一个抽 interface 类似 <code>Map&lt;String, List&lt;? extends Sup&gt;&gt; getResult();</code> 但是会编译错误，需要怎么写？</p>
<ul>
<li><a href="https://stackoverflow.com/questions/22806202/java-nested-generic-type">Stack Overflow 精彩解答</a></li>
</ul>
<p>先说答案，可以使用 <code>Map&lt;String, ? extends List&lt;? extends Sup&gt;&gt; getResult();</code> 这样的语法来适配上面说的这种场景</p>
<p>关于这个问题的几个点：</p>
<ol>
<li>List&lt;Sub&gt; 并不是 List&lt;Sup&gt; 的子类，想要表达子类的概念，Java 使用的是 <code>List&lt;? extends Sup&gt;</code> 这样的语法</li>
<li><code>List&lt;List&lt;?&gt;&gt;</code> 适配所有的参数类型的 list</li>
<li><code>List&lt;? extends List&lt;String&gt;&gt;</code> 适配任何 List 及其子类</li>
<li>两者结合一下 <code>List&lt;? extends List&lt;?&gt;&gt;</code> 适配任何 list 及其子类，并且适配所有参数类型</li>
</ol>
<p>Code sample:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sup</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Sup</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Father</span> </span>&#123; </span><br><span class="line">    Map&lt;String, ? extends List &lt;? extends Sup&gt;&gt; getNestMap(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">implements</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, List&lt;Sub&gt;&gt; getNestMap() &#123;</span><br><span class="line">        Map&lt;String, List&lt;Sub&gt;&gt; map =  <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        List&lt;Sub&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Sub());</span><br><span class="line">        map.put(<span class="string">&quot;Jack&quot;</span>, list);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS: List 前的 <code>? extends</code> 是不可少的，不然 Override 方法会编译错误，应为实现中是用 ArrayList 这个子类实现的，所以接口定义时语意上要有这个声明</p>
<h3 id="工作中遇到的问题"><a href="#工作中遇到的问题" class="headerlink" title="工作中遇到的问题"></a>工作中遇到的问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面两个方法有没有区别？</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WildCardTest</span> </span>&#123;</span><br><span class="line">    &lt;T extends Sup&gt; <span class="function">List&lt;T&gt; <span class="title">getList01</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    List&lt;? extends Sup&gt; getList02();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有。。。看了一下这两个方法编译出来的字节码是完全一样的，除了行号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; access flags 0x401</span><br><span class="line">&#x2F;&#x2F; signature &lt;T::Lcom&#x2F;playground&#x2F;genericsample&#x2F;Sup;&gt;()Ljava&#x2F;util&#x2F;List&lt;TT;&gt;;</span><br><span class="line">&#x2F;&#x2F; declaration: java.util.List&lt;T&gt; getList01&lt;T extends com.playground.genericsample.Sup&gt;()</span><br><span class="line">public abstract getList01()Ljava&#x2F;util&#x2F;List;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; access flags 0x401</span><br><span class="line">&#x2F;&#x2F; signature ()Ljava&#x2F;util&#x2F;List&lt;+Lcom&#x2F;playground&#x2F;genericsample&#x2F;Sup;&gt;;</span><br><span class="line">&#x2F;&#x2F; declaration: java.util.List&lt;? extends com.playground.genericsample.Sup&gt; getList02()</span><br><span class="line">public abstract getList02()Ljava&#x2F;util&#x2F;List;</span><br></pre></td></tr></table></figure>

<p>但是这两种表达方式在实现的时候还是有区别的，用界限符(?)的这种，要求在集合类型前面也加上界限符。。。</p>
<h3 id="向-List-lt-extends-Number-gt-中添加数据失败"><a href="#向-List-lt-extends-Number-gt-中添加数据失败" class="headerlink" title="向 List&lt;? extends Number&gt; 中添加数据失败"></a>向 List&lt;? extends Number&gt; 中添加数据失败</h3><p><code>List&lt;? extends Number&gt; list = new ArrayList&lt;&gt;(); list.add(3);</code> 向该 list 中添加数据 3 有编译错误。这是应为通过 <code>List&lt;? extends Number&gt; list</code> 声明的 list 可以存储 Number 及其子类，效果上来看下面这些声明的集合只是 <code>? extends Number</code> 的一部分，那么我们加 3 这个行为在类型一致这个前提下就会有与以上的错误。一般这种声明方式拿到的结果只用于读操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;? extends Number&gt; foo3 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();  <span class="comment">// Number &quot;extends&quot; Number</span></span><br><span class="line">List&lt;? extends Number&gt; foo3 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(); <span class="comment">// Integer extends Number</span></span><br><span class="line">List&lt;? extends Number&gt; foo3 = <span class="keyword">new</span> ArrayList&lt;Double&gt;();  <span class="comment">// Double extends Number</span></span><br></pre></td></tr></table></figure>

<h3 id="方法中同时有-Class-T-和-T-bean-的情况怎么兼容"><a href="#方法中同时有-Class-T-和-T-bean-的情况怎么兼容" class="headerlink" title="方法中同时有 Class T 和 T bean 的情况怎么兼容"></a>方法中同时有 Class T 和 T bean 的情况怎么兼容</h3><p>声明一个 list 类型是 <code>&lt;? extends Number&gt;</code> 我们还有一个方法参数列表 <code>Class&lt;T&gt; clz1, T clz2</code> 这种情况下怎么兼容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Class&lt;? extends Number&gt;&gt; list = Arrays.asList(Integer.class, Double.class, Long.class);</span><br><span class="line">        <span class="comment">// !testGeneric(list.get(0), 1); // compile failed</span></span><br><span class="line">        testGeneric(Integer.class, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">testGeneric</span><span class="params">(Class&lt;T&gt; clz1, T clz2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>语法上就兼容不了，无解，最后通过重新理解 event 系统，根据框架重新安排逻辑绕过了 （；￣ェ￣） 等读完泛型相关的章节可以再回头看看，不知道到时会不会有新解</p>
<p>最新消息，上面的有解，只需要在前面加上强转到 Class 类型即可 <code>testGeneric((Class)list.get(0), 1);</code> 资深的还是厉害啊，佩服佩服 (●°u°●)​ 」不过直接把 Class 类强转就能绕过检测我是没想到，六的飞起。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>拾遗</tag>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 拾遗之 反射</title>
    <url>/hexo/2020/07/31/Get-Know-About-Java-Reflection/</url>
    <content><![CDATA[<p>记录一些 Java 反射基础知识</p>
<h2 id="准备测试-Bean"><a href="#准备测试-Bean" class="headerlink" title="准备测试 Bean"></a>准备测试 Bean</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflectiontest.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUser</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">public</span>  String gender;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Getter and Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="getFields-VS-getDeclaredFields"><a href="#getFields-VS-getDeclaredFields" class="headerlink" title="getFields VS getDeclaredFields"></a>getFields VS getDeclaredFields</h2><p>getFields 只会返回 public 类型的 fields, getDeclaredFields 会返回所有类型的 fieds</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_class_field</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Field[] fields = TestUser.class.getFields();</span><br><span class="line">System.out.println(<span class="string">&quot;Output of getFields...&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">Field[] declareFields = TestUser.class.getDeclaredFields();</span><br><span class="line">System.out.println(<span class="string">&quot;Output of getDeclaredFields...&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Field f : declareFields) &#123;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output of getFields...</span></span><br><span class="line"><span class="comment">// public java.lang.String reflectiontest.bean.TestUser.gender</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Output of getDeclaredFields...</span></span><br><span class="line"><span class="comment">// private java.lang.String reflectiontest.bean.TestUser.name</span></span><br><span class="line"><span class="comment">// private int reflectiontest.bean.TestUser.age</span></span><br><span class="line"><span class="comment">// public java.lang.String reflectiontest.bean.TestUser.gender</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>拾遗</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 拾遗之 Stream 类</title>
    <url>/hexo/2020/06/07/Get-Know-About-Java-Stream/</url>
    <content><![CDATA[<p>概要：</p>
<ul>
<li>Stream 不是数据结构，更像是算法的集合</li>
<li>在流操作过程中不会修改元数据</li>
<li>以 lambda 表达式为参数</li>
<li>惰性</li>
<li>免费提供并行计算能力</li>
<li>元数据可以无限大</li>
<li>类型确定时使用 IntStream 之类的 class 可以提高效率</li>
</ul>
<h2 id="API-简介"><a href="#API-简介" class="headerlink" title="API 简介"></a>API 简介</h2><p>在 Java 8 的 API 中， Stream 内置了 39 个方法。</p>
<p>匹配，检测 source 中是否有符合条件的元素</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>allMatch(Predicate&lt;? super T&gt; predicate)</td>
<td>boolean</td>
<td>全部匹配返回 true</td>
</tr>
<tr>
<td>anyMatch(Predicate&lt;? super T&gt; predicate)</td>
<td>boolean</td>
<td>只要有一个匹配 true</td>
</tr>
<tr>
<td>noneMatch(Predicate&lt;? super T&gt; predicate)</td>
<td>boolean</td>
<td>全部匹配返回 true</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测Stream 中是否有数能被 2 整除</span></span><br><span class="line"><span class="keyword">boolean</span> ret = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).anyMatch(x -&gt; x % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">System.out.println(ret);</span><br><span class="line"><span class="comment">// output: true</span></span><br></pre></td></tr></table></figure>

<p>用于产生流对象的方法</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>builder()</td>
<td>static <T> Stream.Builder<T></td>
<td>返回一个流的构造器</td>
</tr>
<tr>
<td>concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</td>
<td>static <T> Stream<T></td>
<td>拼接多个流并一起操作</td>
</tr>
<tr>
<td>empty()</td>
<td>static <T> Stream<T></td>
<td>创建一个空的流对象</td>
</tr>
<tr>
<td>generate(Supplier<T> s)</td>
<td>static <T> Stream<T></td>
<td>传入一个 Supplier 构造器，返回构造器指定的对象</td>
</tr>
<tr>
<td>iterate(T seed, UnaryOperator<T> f)</td>
<td>static <T> Stream<T></td>
<td>seed 为初始值，UnaryOperator 为算法</td>
</tr>
<tr>
<td>limit(long maxSize)</td>
<td>Stream<T></td>
<td>配合其他生成方法指定生成个数</td>
</tr>
<tr>
<td>skip(long n)</td>
<td>Stream<T></td>
<td>跳过几个元素，可以结合 iterate, generate 使用</td>
</tr>
<tr>
<td>of(T… values)</td>
<td>static <T> Stream<T></td>
<td>生成一个流</td>
</tr>
<tr>
<td>of(T t)</td>
<td>static <T> Stream<T></td>
<td>/</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.Builder&lt;String&gt; builder = Stream.builder();</span><br><span class="line">Stream&lt;String&gt; stream = builder.add(<span class="string">&quot;Jerry&quot;</span>).add(<span class="string">&quot;Tom&quot;</span>).build();</span><br><span class="line">stream.forEach(System.out::println);</span><br><span class="line"><span class="comment">// output: Jerry Tom</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// concat sample, concat 中为需要拼接的流对象</span></span><br><span class="line">Stream.concat(Stream.of(<span class="string">&quot;Jerry&quot;</span>), Stream.of(<span class="string">&quot;Tom&quot;</span>)).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机产生 3 个整形</span></span><br><span class="line">Stream&lt;Integer&gt; ret = Stream.generate(<span class="keyword">new</span> Random()::nextInt).limit(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// iterate sample, 0 作为初始值，每次返回值 +1， 返回 3 次</span></span><br><span class="line">Stream.iterate(<span class="number">0</span>, x -&gt; x+<span class="number">1</span>).limit(<span class="number">3</span>).forEach(System.out::print);</span><br><span class="line"><span class="comment">// output: 012</span></span><br></pre></td></tr></table></figure>

<p>常用的查找函数 max/min/distinct</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>distinct()</td>
<td>Stream<T></td>
<td>去重</td>
</tr>
<tr>
<td>max(Comparator&lt;? super T&gt; comparator)</td>
<td>Optional<T></td>
<td>查找最大值</td>
</tr>
<tr>
<td>min(Comparator&lt;? super T&gt; comparator)</td>
<td>Optional<T></td>
<td>查找最小值</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// distinct sample</span></span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).distinct().forEach(System.out::print);</span><br><span class="line"><span class="comment">// output: 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果传入的时对象，那个会更具 equals, hashCode 来判断是不是重复</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// Constructor, getter and setter</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(age, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> + <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stream.of(<span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>, <span class="number">30</span>), <span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>, <span class="number">30</span>), <span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>, <span class="number">20</span>)).distinct().forEach(System.out::print);</span><br><span class="line"><span class="comment">// output: Person&#123;name=&#x27;Jack&#x27;, age=30&#125; Person&#123;name=&#x27;Jack&#x27;, age=20&#125;</span></span><br></pre></td></tr></table></figure>

<p>生成指定类型的 Stream 对象</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>map(Function&lt;? super T,? extends R&gt; mapper)</td>
<td>Stream<T></td>
<td>返回指定类型的 Stream</td>
</tr>
<tr>
<td>mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper)</td>
<td>DoubleStream</td>
<td>返回 Double 类型的 Stream</td>
</tr>
<tr>
<td>mapToInt(ToIntFunction&lt;? super T&gt; mapper)</td>
<td>IntStream</td>
<td>返回 Int 类型的 Stream</td>
</tr>
<tr>
<td>mapToLong(ToLongFunction&lt;? super T&gt; mapper)</td>
<td>LongStream</td>
<td>返回 Long 类型的 Stream</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>).map(x -&gt; <span class="string">&quot;Name: &quot;</span> + x).forEach(System.out::println);</span><br><span class="line"><span class="comment">// output: Name: Jack Name: Tom</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他几个类似，只不过把返回类型指定了</span></span><br></pre></td></tr></table></figure>

<p>将流中的处理结果整合输出到集合中</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>collect(Collector&lt;? super T,A,R&gt; collector)</td>
<td>&lt;R,A&gt; R</td>
<td>/</td>
</tr>
<tr>
<td>collect(Supplier<R> supplier, BiConsumer&lt;R,? super T&gt; accumulator, BiConsumer&lt;R,R&gt; combiner)</td>
<td><R> R</td>
<td>/</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将流中的值连接起来</span></span><br><span class="line">Stream.of(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>).collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串组成 string, length 的键值对</span></span><br><span class="line">Map&lt;String, Integer&gt; ret = Stream.of(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>).collect(Collectors.toMap(Function.identity(), String::length));</span><br></pre></td></tr></table></figure>

<p>map 及类似的操作</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>map(Function&lt;? super T,? extends R&gt; mapper)</td>
<td><R> Stream<R></td>
<td>对流中的元素逐个操作</td>
</tr>
<tr>
<td>mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper)</td>
<td>DoubleStream</td>
<td>/</td>
</tr>
<tr>
<td>mapToInt(ToIntFunction&lt;? super T&gt; mapper)</td>
<td>IntStream</td>
<td>/</td>
</tr>
<tr>
<td>mapToLong(ToLongFunction&lt;? super T&gt; mapper)</td>
<td>LongStream</td>
<td>/</td>
</tr>
<tr>
<td>flatMap(Function&lt;? super T,? extends Stream&lt;? extends R&gt;&gt; mapper)</td>
<td><R> Stream<R></td>
<td>和 map 主要的区别时<strong>扁平化</strong></td>
</tr>
<tr>
<td>flatMapToDouble(Function&lt;? super T,? extends DoubleStream&gt; mapper)</td>
<td>DoubleStream</td>
<td>/</td>
</tr>
<tr>
<td>flatMapToInt(Function&lt;? super T,? extends IntStream&gt; mapper)</td>
<td>IntStream</td>
<td>/</td>
</tr>
<tr>
<td>flatMapToLong(Function&lt;? super T,? extends LongStream&gt; mapper)</td>
<td>LongStream</td>
<td>/</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扁平化就是将集合中的集合拆散成基本元素，下例中将 list 中的最基本的元素做平方操作</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; listOfList = Arrays.asList(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>), Arrays.asList(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">listOfList.stream().flatMap(Collection::stream).map(x -&gt; x*x).forEach(System.out::println);</span><br><span class="line"><span class="comment">// output: 1, 4, 9 ,16</span></span><br></pre></td></tr></table></figure>

<p>过滤</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>filter(Predicate&lt;? super T&gt; predicate)</td>
<td>Stream<T></td>
<td>根据 predicate 过滤</td>
</tr>
<tr>
<td>reduce(BinaryOperator<T> accumulator)</td>
<td>Optional<T></td>
<td>从多个元素中产生一个结果</td>
</tr>
<tr>
<td>reduce(T identity, BinaryOperator<T> accumulator)</td>
<td>T</td>
<td>identity - 初始值</td>
</tr>
<tr>
<td>reduce(U identity, BiFunction&lt;U,? super T,U&gt; accumulator, BinaryOperator<U> combiner)</td>
<td><U> U</td>
<td>combiner 是并行运算时需要指定的值</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; ret = Stream.of(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>).reduce(String::concat);</span><br><span class="line">System.out.println(ret.get());</span><br><span class="line"><span class="comment">// output: JackTom</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 identity 作为初始值</span></span><br><span class="line">Optional&lt;String&gt; ret = Optional.ofNullable(Stream.of(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>).reduce(<span class="string">&quot;Name Ret:&quot;</span>, String::concat));</span><br><span class="line">System.out.println(ret.get());</span><br><span class="line"><span class="comment">// output: Name Ret:JackTom</span></span><br></pre></td></tr></table></figure>

<p>Find*</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>findAny()</td>
<td>Optional<T></td>
<td>随机返回一个值，并不关心值的内容，在单线程中一般返回第一个，但是不保证</td>
</tr>
<tr>
<td>findFirst()</td>
<td>Optional<T></td>
<td>返回第一个</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).findFirst().get());</span><br></pre></td></tr></table></figure>

<p>forEach*</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>forEach(Consumer&lt;? super T&gt; action)</td>
<td>void</td>
<td>遍历不保证顺序(多线程下可能会顺序不定)</td>
</tr>
<tr>
<td>forEachOrdered(Consumer&lt;? super T&gt; action)</td>
<td>void</td>
<td>遍历保证顺序</td>
</tr>
</tbody></table>
<p>count</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>count()</td>
<td>long</td>
<td>输出元素个数</td>
</tr>
<tr>
<td>peek(Consumer&lt;? super T&gt; action)</td>
<td>Stream<T></td>
<td>得到流对象，可用于调试</td>
</tr>
<tr>
<td>sorted()</td>
<td>Stream<T></td>
<td>使用自然排序</td>
</tr>
<tr>
<td>sorted(Comparator&lt;? super T&gt; comparator)</td>
<td>Stream<T></td>
<td>定制排序</td>
</tr>
<tr>
<td>toArray()</td>
<td>Object[]</td>
<td>生成数组</td>
</tr>
<tr>
<td>toArray(IntFunction&lt;A[]&gt; generator)</td>
<td><A> A[]</td>
<td>/</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// steam 转化为 array</span></span><br><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">String[] stringArray = stringStream.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">Arrays.stream(stringArray).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h2><p>创建实例或者调用方法时可以使用 <code>::</code> 两个冒号的形式调用</p>
<h2 id="Supplier-使用举例"><a href="#Supplier-使用举例" class="headerlink" title="Supplier 使用举例"></a>Supplier 使用举例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">Supplier&lt;LocalDateTime&gt; s = LocalDateTime::now;</span><br><span class="line">System.out.println(s.get());</span><br><span class="line"></span><br><span class="line">Supplier&lt;String&gt; s1 = () -&gt; dtf.format(LocalDateTime.now());</span><br><span class="line">System.out.println(s1.get());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>枚举和注解</tag>
        <tag>拾遗</tag>
        <tag>stream</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 集合类初探</title>
    <url>/hexo/2021/01/14/Get-know-about-java-collection/</url>
    <content><![CDATA[<p>想要解决的问题：</p>
<ol>
<li>了解集合类的大致情况，包括名称，类关系</li>
<li>HashMap 和 Collection 的关系</li>
<li>自己画一个关系图并和 TIJ4 做对比</li>
<li>为什么 ArrayList 在继承了 AbstractList 之后还要 impl List 接口？意义上不是重复了吗</li>
</ol>
<p>Answers:</p>
<ol start="4">
<li>这样做，语义上没有改变，便于阅读，省的你再去一层层的去父类找接口实现， Stackoverflow 上是这么说的</li>
</ol>
<p>基本上能将这一簇类的关系图画出来即可</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 拾遗之 final 关键字</title>
    <url>/hexo/2020/10/22/Get-know-about-java-final/</url>
    <content><![CDATA[<p>从定义上来说 final 表达的是只能赋值一次，赋之后不能改变的意思。下面介绍几种常见使用形式。</p>
<h2 id="final-attr"><a href="#final-attr" class="headerlink" title="final + attr"></a>final + attr</h2><p>这种形式即实体类有 final 变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;default&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// public Test(int i) &#123;&#125; -- compile fail</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于 name 由 final 修饰，所以要求每个构造函数都要有 name 的初始化，或者声明时直接赋值。不然不就等于允许在运行时改变 name 值了</p>
<h2 id="static-final-attr"><a href="#static-final-attr" class="headerlink" title="static + final + attr"></a>static + final + attr</h2><p>这种形式常见于 class 属性，声明时就得赋值，static block 都不好使</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="final-method"><a href="#final-method" class="headerlink" title="final + method"></a>final + method</h2><blockquote>
<p><code>final</code> is used with a Java method to mark that the method can’t be overridden (for object scope) or hidden (for static). This allows the original developer to create functionality that cannot be changed by subclasses, and that is all the guarantee it provides.</p>
<p>方法不能被重写，防止继承之后方法语意发生变化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">printT3</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;printT3...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub3</span> <span class="keyword">extends</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// compile error, can&#x27;t override final method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">printT3</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub3...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>拾遗</tag>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 小贴士</title>
    <url>/hexo/2019/11/15/Git-Tips/</url>
    <content><![CDATA[<h2 id="怎么更新-fork-repo"><a href="#怎么更新-fork-repo" class="headerlink" title="怎么更新 fork repo"></a>怎么更新 fork repo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查 repo 状态</span></span><br><span class="line">git remote -v</span><br><span class="line">origin    git@github.corp:jack/vault.git (fetch)</span><br><span class="line">origin    git@github.corp:jack/vault.git (push)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联到原项目</span></span><br><span class="line">git remote add upstream git@github.corp:platform-core/vault.git</span><br><span class="line"><span class="comment"># 检查 repo 状态</span></span><br><span class="line">git remote -v</span><br><span class="line">origin    git@github.corp:jack/vault.git (fetch)</span><br><span class="line">origin    git@github.corp:jack/vault.git (push)</span><br><span class="line">upstream    git@github.corp:platform-core/vault.git (fetch)</span><br><span class="line">upstream    git@github.corp:platform-core/vault.git (push)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将原项目改动 sync 到本地</span></span><br><span class="line">git fetch upstream</span><br><span class="line"><span class="comment"># 更新本地分支</span></span><br><span class="line">git merge upstream/master</span><br><span class="line"><span class="comment"># 推送到本地分支的 remote，打完收工</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<h2 id="怎么查看一个月之前的版本信息"><a href="#怎么查看一个月之前的版本信息" class="headerlink" title="怎么查看一个月之前的版本信息"></a>怎么查看一个月之前的版本信息</h2><p>最近发现一个 bug 不知道是不是自己的代码改出来的，由于是一些 context 的改动不好查。打算直接一点，使用一个月之前(我的改动还没有进去的节点)的 build 起一个服务测试一下, git 支持类似的查找</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --after=<span class="string">&quot;2014-02-12T16:36:00-07:00&quot;</span></span><br><span class="line">git <span class="built_in">log</span> --before=<span class="string">&quot;2014-02-12T16:36:00-07:00&quot;</span></span><br><span class="line">git <span class="built_in">log</span> --since=<span class="string">&quot;1 month ago&quot;</span></span><br><span class="line">git <span class="built_in">log</span> --since=<span class="string">&quot;2 weeks 3 days 2 hours 30 minutes 59 seconds ago&quot;</span></span><br></pre></td></tr></table></figure>

<p>结合 reverse 使用效果更佳 <code>git log --since=&quot;1 month ago&quot; --reverse</code></p>
<h2 id="怎么添加-commited-file-到-gitignore-中"><a href="#怎么添加-commited-file-到-gitignore-中" class="headerlink" title="怎么添加 commited file 到 .gitignore 中"></a>怎么添加 commited file 到 <code>.gitignore</code> 中</h2><blockquote>
<p><a href="https://stackoverflow.com/questions/7527982/applying-gitignore-to-committed-files/7528016">StackOverflow: applying-gitignore-to-committed-files</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm --cached path/to/file</span><br></pre></td></tr></table></figure>

<h2 id="怎么把local-master-branch-还原成和-remote-端一致"><a href="#怎么把local-master-branch-还原成和-remote-端一致" class="headerlink" title="怎么把local master branch 还原成和 remote 端一致"></a>怎么把local master branch 还原成和 remote 端一致</h2><blockquote>
<p><a href="https://stackoverflow.com/questions/1628088/reset-local-repository-branch-to-be-just-like-remote-repository-head">StackOverflow: reset-local-repository-branch-to-be-just-like-remote-repository-head</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure>

<h2 id="移除本地的-commit"><a href="#移除本地的-commit" class="headerlink" title="移除本地的 commit"></a>移除本地的 commit</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD~1</span><br></pre></td></tr></table></figure>

<h2 id="将-remote-会滚到上个-commit"><a href="#将-remote-会滚到上个-commit" class="headerlink" title="将 remote 会滚到上个 commit"></a>将 remote 会滚到上个 commit</h2><p><code>git revert -m 1 commit_hash</code> 将对应的 commit 改动回滚， 很棒！</p>
<p>PS: <code>-m 1</code> 会使用默认的 comment 信息，如果你想自定义 comment 内容，可以将这个参数去掉</p>
<h2 id="reset-VS-revert"><a href="#reset-VS-revert" class="headerlink" title="reset VS revert"></a>reset VS revert</h2><p>reset 历史记录后退，revert 前进</p>
<p>reset 会将历史记录也一并会滚，这样就会导致记录缺失。不是很好，但是在自己 local branch 做了改动想还原的这种 scenario 还是和合适的。还有 <code>reset --hard commit_hash + git push --force</code> 也可以重置代码，但是会修改历史记录，操作比较危险</p>
<p>revert 会在原有的基础上将对应的 commit 改动重置并添加新的历史记录，路径更完成</p>
<p>这个 <a href="https://juejin.im/post/6844903614767448072">文章</a> 比较两者的区别，写的挺清楚的</p>
<h2 id="将本地的-commit-回退到前一个-commit"><a href="#将本地的-commit-回退到前一个-commit" class="headerlink" title="将本地的 commit 回退到前一个 commit"></a>将本地的 commit 回退到前一个 commit</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD~1 <span class="comment"># 保留改动，回退到 index 状态（add 之前）</span></span><br><span class="line">git reset --soft HEAD~1 <span class="comment"># 保留改动到 stage 状态 (add 之后，commit 之前)</span></span><br><span class="line">git reset --hard HEAD~1 <span class="comment"># 同时将改动也去掉</span></span><br></pre></td></tr></table></figure>

<h2 id="将本地的单个文件还原成-master-版本"><a href="#将本地的单个文件还原成-master-版本" class="headerlink" title="将本地的单个文件还原成 master 版本"></a>将本地的单个文件还原成 master 版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout origin/master -- /path/to/file</span><br></pre></td></tr></table></figure>

<h2 id="将远端删除的文件找回来"><a href="#将远端删除的文件找回来" class="headerlink" title="将远端删除的文件找回来"></a>将远端删除的文件找回来</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -- /path/of/deleted/file <span class="comment"># 找到删除 commit 的前一个 commit number</span></span><br><span class="line"></span><br><span class="line">git checkout pre-commit-num -- /path/of/deleted/file</span><br></pre></td></tr></table></figure>

<h2 id="将-git-add-commit-合并到一个命令中"><a href="#将-git-add-commit-合并到一个命令中" class="headerlink" title="将 git add, commit 合并到一个命令中"></a>将 git add, commit 合并到一个命令中</h2><blockquote>
<p><a href="https://stackoverflow.com/questions/4298960/git-add-and-commit-in-one-command">StackOverflow: git-add-and-commit-in-one-command</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># config git alias</span></span><br><span class="line">git config --global alias.add-commit <span class="string">&#x27;!git add -A &amp;&amp; git commit&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># and use it with</span></span><br><span class="line">git add-commit -m <span class="string">&#x27;My commit message&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Rename-local-repo"><a href="#Rename-local-repo" class="headerlink" title="Rename local repo"></a>Rename local repo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout &lt;repo need to re-name&gt;</span><br><span class="line">git branch -m &lt;new name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># or make sure you are not at renamed repo</span></span><br><span class="line">git branch -m &lt;old repo name&gt; &lt;new repo name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="移除-merge-内容"><a href="#移除-merge-内容" class="headerlink" title="移除 merge 内容"></a>移除 merge 内容</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">git merge --abort</span><br></pre></td></tr></table></figure>

<h2 id="国内-git-clone-有时会卡住-有没有-debug-的选项"><a href="#国内-git-clone-有时会卡住-有没有-debug-的选项" class="headerlink" title="国内 git clone 有时会卡住, 有没有 debug 的选项"></a>国内 git clone 有时会卡住, 有没有 debug 的选项</h2><blockquote>
<p><a href="https://stackoverflow.com/questions/6178401/how-can-i-debug-git-git-shell-related-problems">StackOverflow: how-can-i-debug-git-git-shell-related-problems</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIT_CURL_VERBOSE&#x3D;1 GIT_TRACE&#x3D;1 git pull origin master</span><br></pre></td></tr></table></figure>

<h2 id="已创建-repo-添加证书"><a href="#已创建-repo-添加证书" class="headerlink" title="已创建 repo 添加证书"></a>已创建 repo 添加证书</h2><blockquote>
<p>跳转到项目页面，添加文件 ‘create a new file’ -&gt; 输入 ‘license’ 会给出提示</p>
</blockquote>
<h2 id="查看某人的-commit-记录"><a href="#查看某人的-commit-记录" class="headerlink" title="查看某人的 commit 记录"></a>查看某人的 commit 记录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --author=<span class="string">&#x27;jack&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="查看-log-反序"><a href="#查看-log-反序" class="headerlink" title="查看 log 反序"></a>查看 log 反序</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --reverse</span><br></pre></td></tr></table></figure>

<h2 id="对比文件"><a href="#对比文件" class="headerlink" title="对比文件"></a>对比文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff &lt;base-commit&gt; &lt;changed-commit&gt; -- &lt;file-path&gt;</span><br></pre></td></tr></table></figure>

<p>比如我像比较 8ab244e3b2de31ca 相对于 f31762ada1764 有什么改动可以使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff f31762ada1764 8ab244e3b2de31ca -- &lt;file-path&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是相对于 header 的改动，可以省略第一个 commit 内容</span></span><br></pre></td></tr></table></figure>

<h2 id="查看被删除文件的历史记录"><a href="#查看被删除文件的历史记录" class="headerlink" title="查看被删除文件的历史记录"></a>查看被删除文件的历史记录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -- &lt;file path&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --full-log -- &lt;file path&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种会包含各种 merge 的信息， 比较全。但是一般第一种就够用了</span></span><br></pre></td></tr></table></figure>

<h2 id="查看文件某一行删除记录"><a href="#查看文件某一行删除记录" class="headerlink" title="查看文件某一行删除记录"></a>查看文件某一行删除记录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -G 直接支持正则，-S 需要添加其他参数来支持正则</span></span><br><span class="line">git <span class="built_in">log</span> -S/G<span class="string">&#x27;key&#x27;</span> /path/to/file</span><br></pre></td></tr></table></figure>

<h2 id="已经-check-in-的文件夹加入-gitignore"><a href="#已经-check-in-的文件夹加入-gitignore" class="headerlink" title="已经 check in 的文件夹加入 .gitignore"></a>已经 check in 的文件夹加入 .gitignore</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 处理文件夹</span></span><br><span class="line">git rm -r --cached /folder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理文件</span></span><br><span class="line">git rm --cached /path/to/file</span><br></pre></td></tr></table></figure>

<h2 id="显示-repo-关联的远端地址"><a href="#显示-repo-关联的远端地址" class="headerlink" title="显示 repo 关联的远端地址"></a>显示 repo 关联的远端地址</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure>

<h2 id="cherry-pick-提取某一个-commit-和并到目标分支"><a href="#cherry-pick-提取某一个-commit-和并到目标分支" class="headerlink" title="cherry pick 提取某一个 commit 和并到目标分支"></a>cherry pick 提取某一个 commit 和并到目标分支</h2><p>情景描述：</p>
<p>我自己有一个分支 A， 同时创建了另一个分支 B 并在上面做了改动，commit 为 c1。我对他的这个 commit 有依赖，又不想自己 CV 代码或者以后有 conflict 什么的，这时可以 checkout 到我自己的分支，然后 <code>git cherry-pick c1</code> 来合并代码。他的代码 merge 之后我也不用解决冲突，美滋滋儿。</p>
<p>PS: 在合并 B 分支上的 commit 的时候我并不需要指定分支名字，是不是从侧面验证了，每个 git commit 都是唯一的，不同分支的 commit 也保证 id 不重复</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">^                  ^                                               </span><br><span class="line">|                  |                                               </span><br><span class="line">|   cherry-pick    |                                               </span><br><span class="line">|C1 &lt;---------     |C2                                             </span><br><span class="line">|            |     |                                               </span><br><span class="line">|            |     |                                               </span><br><span class="line">|C1&#x27;         ----- |C1                                             </span><br><span class="line">|                  |                                               </span><br><span class="line">|                  |                                               </span><br><span class="line">|Branch-A          |Branch-B                                       </span><br><span class="line">|------------------|                                               </span><br><span class="line">          ^                                                        </span><br><span class="line">          |                                                        </span><br><span class="line">          |                                                        </span><br><span class="line">          |                                                        </span><br><span class="line">          | Master                                                 </span><br><span class="line">          |                                                        </span><br><span class="line">          |                                                        </span><br></pre></td></tr></table></figure>

<h2 id="cherry-pick-revert"><a href="#cherry-pick-revert" class="headerlink" title="cherry pick revert"></a>cherry pick revert</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<h3 id="How-to-drop"><a href="#How-to-drop" class="headerlink" title="How to drop"></a>How to drop</h3><p>如果本地有改动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git reset --hard HEAD^</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<p>如果没有直接 <code>git reset --hard HEAD^</code>, <code>cherry-pick</code> 本质上就是新加了一个 commit 到 branch 而已。</p>
<h2 id="使用-rebase-来合并自己分支的-commit-记录，强迫症福音"><a href="#使用-rebase-来合并自己分支的-commit-记录，强迫症福音" class="headerlink" title="使用 rebase 来合并自己分支的 commit 记录，强迫症福音"></a>使用 rebase 来合并自己分支的 commit 记录，强迫症福音</h2><p>check out 一个测试 branch，修改 readme</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;a&#x27;</span> &gt;&gt; README.md</span><br><span class="line">git add-commit -m <span class="string">&#x27;edit01&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;b&#x27;</span> &gt;&gt; README.md</span><br><span class="line">git add-commit -m <span class="string">&#x27;edit01&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;c&#x27;</span> &gt;&gt; README.md</span><br><span class="line">git add-commit -m <span class="string">&#x27;edit01&#x27;</span></span><br></pre></td></tr></table></figure>

<p>git log –oneline 查看 commit 记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dc0a087 (HEAD -&gt; testrebase2) edit03</span><br><span class="line">c6feb2a edit02</span><br><span class="line">0436650 edit01</span><br><span class="line">0dcdaac init porject</span><br></pre></td></tr></table></figure>

<p>现在通过 rebase 将 edit01-03 合并为一个 commit。这里有一个地方要注意的是如果指定 commit id，start point 是你想要合并的 ID 的前一个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~3 或者 git rebase -i 0dcdaac</span><br></pre></td></tr></table></figure>

<p>terminal 给出提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pick 0436650 edit01</span><br><span class="line">pick c6feb2a edit02</span><br><span class="line">pick dc0a087 edit03</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 0dcdaac..dc0a087 onto 0dcdaac (3 commands)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick &lt;commit&gt; = use commit</span></span><br><span class="line"><span class="comment"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span><br><span class="line"><span class="comment"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment"># f, fixup &lt;commit&gt; = like &quot;squash&quot;, but discard this commit&#x27;s log message</span></span><br><span class="line"><span class="comment"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment"># b, break = stop here (continue rebase later with &#x27;git rebase --continue&#x27;)</span></span><br><span class="line"><span class="comment"># d, drop &lt;commit&gt; = remove commit</span></span><br><span class="line"><span class="comment"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br><span class="line"><span class="comment"># t, reset &lt;label&gt; = reset HEAD to a label</span></span><br><span class="line"><span class="comment"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span></span><br><span class="line"><span class="comment"># .       create a merge commit using the original merge commit&#x27;s</span></span><br></pre></td></tr></table></figure>

<p>将 edit02, 03 的前缀改成 s，然后 :wq 进入下一个界面需改 commit message</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pick 0436650 edit01</span><br><span class="line">s c6feb2a edit02</span><br><span class="line">s dc0a087 edit03</span><br></pre></td></tr></table></figure>

<p>提示信息如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is a combination of 3 commits.</span></span><br><span class="line"><span class="comment"># This is the 1st commit message:</span></span><br><span class="line"></span><br><span class="line">edit01</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #2:</span></span><br><span class="line"></span><br><span class="line">edit02</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #3:</span></span><br><span class="line"></span><br><span class="line">edit03</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Date:      Wed Jul 8 17:10:52 2020 +0800</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># interactive rebase in progress; onto 0dcdaac</span></span><br><span class="line"><span class="comment"># Last commands done (3 commands done):</span></span><br></pre></td></tr></table></figure>

<p>带 # 号的行不会显示，只需要修改之前我们自己添加的那些行就行了，这里修改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">merge commit edit01-03</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Date:      Wed Jul 8 17:10:52 2020 +0800</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># interactive rebase in progress; onto 0dcdaac</span></span><br><span class="line"><span class="comment"># Last commands done (3 commands done):</span></span><br><span class="line"><span class="comment">#    squash c6feb2a edit02</span></span><br><span class="line"><span class="comment">#    squash dc0a087 edit03</span></span><br><span class="line"><span class="comment"># No commands remaining.</span></span><br><span class="line"><span class="comment"># You are currently rebasing branch &#x27;testrebase2&#x27; on &#x27;0dcdaac&#x27;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#   modified:   README.md</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>esc + :wq 退出，终端会给出修改成功的提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[detached HEAD 6c42812] merge commit edit01-03</span><br><span class="line"> Date: Wed Jul 8 17:10:52 2020 +0800</span><br><span class="line"> 1 file changed, 3 insertions(+)</span><br><span class="line">Successfully rebased and updated refs/heads/testrebase2.</span><br></pre></td></tr></table></figure>

<p>这是再使用 git log –oneline 查看，可以发现目标 commit 已经合并成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">6c42812 (HEAD -&gt; testrebase2) merge commit edit01-03</span><br><span class="line">0dcdaac init porject</span><br></pre></td></tr></table></figure>

<h2 id="怎么避免-branch-上出现很多-merge-的-commit-强迫症福音-2-0"><a href="#怎么避免-branch-上出现很多-merge-的-commit-强迫症福音-2-0" class="headerlink" title="怎么避免 branch 上出现很多 merge 的 commit, 强迫症福音 2.0"></a>怎么避免 branch 上出现很多 merge 的 commit, 强迫症福音 2.0</h2><p>TODO</p>
<h2 id="Git-SS-加速"><a href="#Git-SS-加速" class="headerlink" title="Git SS 加速"></a>Git SS 加速</h2><p>修改 .gitconfig 文件，添加配置如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># config your &#96;~&#x2F;.gitconfig&#96; file</span><br><span class="line">[http]</span><br><span class="line">proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">sslVerify &#x3D; false</span><br><span class="line"></span><br><span class="line">[https]</span><br><span class="line">proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>或者在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># or you can config it by typing terminal</span></span><br><span class="line">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global http.sslVerify <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># turn off proxy, 开启后 git commit 会受影响</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 多账户设置</title>
    <url>/hexo/2021/08/17/Git-multiple-account/</url>
    <content><![CDATA[<p>公司使用 GitHub 企业版管理代码，我自己也时常会需要在公用版 Github 上更新一些代码，经常要交互使用。2021-08-13 的时候，GitHub 官方静止了 password 类型提交代码，这不只能找找怎么本地配置双账号了，解决方案如下</p>
<p>前置，初始化配置：</p>
<ol>
<li>删除 ～/.gitconfig 中的账户信息</li>
<li>删除 ～/.ssh 下的配置信息</li>
</ol>
<p>配置：</p>
<ol>
<li>cd 到 ～/.ssh 目录下运行 <code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code> 生成公私密码，之前参考了官方文档指定类型 ed25519, 不知道为啥，配置不生效</li>
<li>在提示 <code>Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]</code> 时添加后缀指定环境, 我本地的配置情况 <code>id_rsa_github id_rsa_github.pub id_rsa_sap id_rsa_sap.pub</code></li>
<li>后面直接回车到文件生成成功。</li>
<li>运行 <code>eval &quot;$(ssh-agent -s)&quot;</code> 启动代理并运行 <code>ssh-add ~/.ssh/id_rsa_github</code> 和 <code>ssh-add ~/.ssh/id_rsa_sap</code> 将私钥添加到密钥链中。通过 <code>ssh-add -l</code> 可以查看已经添加的 key 信息. PS: 如果你是 Mac 系统需要加一个 -K 不然重启之后 key 就没了 <code>ssh-add -K ~/.ssh/id_rsa_github</code></li>
<li>在 ~/.ssh/config 文件中配置账号，网站的对应关系, 示例如下</li>
<li>打开 github 网站，将 id_rsa_github.pub 这个公钥信息添加到目标网站 头像 -&gt; Settings -&gt; SSH and GPG keys -&gt;  New SSH key</li>
<li>测试配置是否成功，终端输入 <code>ssh -T git@github.com</code> 和 <code>ssh -T git@github.wdf.sap.corp</code> 看提示信息是否正确</li>
<li>配置 commit 账号，如果没有设置，commit 的时候, git 会用电脑主机号作为提交账号。我本地是将常用的公司账号信息通过 git config –global 配置为全局信息，在自己的 repo 中通过 git config –local 单独配置</li>
</ol>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Host github</span><br><span class="line">HostName github.com</span><br><span class="line">User jack-zheng</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line">Host gitlab</span><br><span class="line">HostName github.wdf.sap.corp</span><br><span class="line">User Ixxxx</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_sap</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex01 创建一个简易的 Server</title>
    <url>/hexo/2021/07/05/HTW-ex01/</url>
    <content><![CDATA[<h2 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce"></a>Introduce</h2><p>Basically there are three things that a servlet container does to service a request for a servlet:</p>
<ul>
<li>创建 request 对象并塞入后续要用到的信息，比如 parameters，cookies 等。request 是 javax.servlet(.http).ServletRequest 的一个实现</li>
<li>创建一个 response 对象返回给 web client. response 是 javax.servlet(.http).ServletResponse 的一个实现</li>
<li>调用 service 方法，service 中接受 request 的参数，处理结果塞入 response 中</li>
</ul>
<h3 id="Catalina-Block-Diagram"><a href="#Catalina-Block-Diagram" class="headerlink" title="Catalina Block Diagram"></a>Catalina Block Diagram</h3><p>Catalina 很复杂，但是他的设计很优雅，采用模块化的思想。主要可以分为两部分 Connector 和 Container，关系如下</p>
<img  src=http://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNBEpyjBJIx9Br9GqbBIqbKoL5802fKaPkQb5W40>

<p>connector 主要作用是构建 request/response 并传递给 container 处理，这里只是简化的模型。container 除了处理 request 还有很多东西需要做，比如加载 servlet，更新 session 等。</p>
<h2 id="A-Simple-Web-Server"><a href="#A-Simple-Web-Server" class="headerlink" title="A Simple Web Server"></a>A Simple Web Server</h2><blockquote>
<p><strong>Chapter1</strong> starts this book by presenting a simple HTTP server.<br>To build a working HTTP server, you need to know the internal workings of two classes in the java.net package: Socket and ServerSocket.<br>There is sufficient background information in this chapter about these two classes for you to understand how the accompanying application works.</p>
</blockquote>
<p>第一个练习的目标，创建一个简单的 web server. 服务启动后，浏览器输入地址，server 返回请求的静态资源.</p>
<p>逻辑层面上来说模型可以像下面这样展示，但是代码层面上却不行。</p>
<img  src=http://www.plantuml.com/plantuml/svg/oyjFILLmpibCpIlXoWEnWrEBobABkBWWOWgwTb0H1Ii5fQBKmjBKuX8bBgWGK1Ag32nPNA040000>

<p>按照上面的图示，难道 client 是直接 new 一个 request 和 web server 进行交互吗？难道 web server 会 new 一个 response 发送给 client 吗? 非也。模型画成下面的样子应该更合适</p>
<img  src=http://www.plantuml.com/plantuml/svg/JOmn3i8m40JxUyNALLBa0mZHy8GKrCOvp2d6DlQ1X53-JW84iSrgPwK9V59eGX5_LWnIsAcaI7MKc6sn5sJhHkkvrqTWBBUDFZ1Him_2KLlwCPW37z5pkNCnU1Bck91k0qoTeJXUwPAcyBNzNpL_vaJlMltOTjqENm4sgCcDh3Iz0000>

<p>Client 和 Web Server 之间通过 socket 进行交互。在 server 内部，会将 socket 分化为 input 和 output 两个 IO 流，分别对应读取 Client 发送的数据和发送给 Client 相应</p>
<p>项目目录设置如下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">how-tomcat-works</span><br><span class="line">├── ex01</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── ex01</span><br><span class="line">│           ├── HttpServer.java</span><br><span class="line">│           ├── Request.java</span><br><span class="line">│           └── Response.java</span><br><span class="line">├── pom.xml</span><br><span class="line">└── webroot</span><br><span class="line">    ├── images</span><br><span class="line">    │   └── logo.gif</span><br><span class="line">    └── index.html</span><br></pre></td></tr></table></figure>

<p>HttpServer 表示服务器类，内部实现主要依赖于 ServerSocket 这个 java.net 包下的类，他在绑定本地端口并死循环等待 Client 端的 socket 访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 指定静态资源目录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String WEB_ROOT = System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + File.separator + <span class="string">&quot;webroot&quot;</span>;</span><br><span class="line">    <span class="comment">// shutdown command</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SHUTDOWN_COMMAND = <span class="string">&quot;/SHUTDOWN&quot;</span>;</span><br><span class="line">    <span class="comment">// the shutdown command received</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> shutdown = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HttpServer server = <span class="keyword">new</span> HttpServer();</span><br><span class="line">        server.await();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">        <span class="comment">// 绑定端口和地址</span></span><br><span class="line">        serverSocket = <span class="keyword">new</span> ServerSocket(port, <span class="number">1</span>, InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>));</span><br><span class="line">        <span class="comment">// 死循环等待 request</span></span><br><span class="line">        <span class="keyword">while</span> (!shutdown) &#123;</span><br><span class="line">            Socket socket = <span class="keyword">null</span>;</span><br><span class="line">            InputStream input = <span class="keyword">null</span>;</span><br><span class="line">            OutputStream output = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 拿到 socket</span></span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line">            <span class="comment">// 分化 socket</span></span><br><span class="line">            input = socket.getInputStream();</span><br><span class="line">            output = socket.getOutputStream();</span><br><span class="line">            <span class="comment">// create Request object and parse</span></span><br><span class="line">            Request request = <span class="keyword">new</span> Request(input);</span><br><span class="line">            request.parse();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// create Response object</span></span><br><span class="line">            Response response = <span class="keyword">new</span> Response(output);</span><br><span class="line">            response.setRequest(request);</span><br><span class="line">            response.sendStaticResource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Close the socket</span></span><br><span class="line">            socket.close();</span><br><span class="line">            <span class="comment">// check if the previous URI is a shutdown command</span></span><br><span class="line">            shutdown = request.getUri().equals(SHUTDOWN_COMMAND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Request 类的主要职责是拿到 socket 的输入流，解析并提取 Client 发送过来的信息，这个例子中主要是提取请求的资源路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream input;</span><br><span class="line">    <span class="keyword">private</span> String uri;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(InputStream input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.input = input;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Read a set of characters from the socket</span></span><br><span class="line">        StringBuilder request = <span class="keyword">new</span> StringBuilder(<span class="number">2048</span>);</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">        i = input.read(buffer);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            request.append((<span class="keyword">char</span>) buffer[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印请求信息</span></span><br><span class="line">        System.out.print(request);</span><br><span class="line">        uri = parseUri(request.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析请求，拿到请求的路径</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">parseUri</span><span class="params">(String requestString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index1, index2;</span><br><span class="line">        index1 = requestString.indexOf(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (index1 != -<span class="number">1</span>) &#123;</span><br><span class="line">            index2 = requestString.indexOf(<span class="string">&#x27; &#x27;</span>, index1 + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (index2 &gt; index1)</span><br><span class="line">                <span class="keyword">return</span> requestString.substring(index1 + <span class="number">1</span>, index2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUri</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Response 负责向 Client 返回信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER_SIZE = <span class="number">1024</span>;</span><br><span class="line">    Request request;</span><br><span class="line">    OutputStream output;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Response</span><span class="params">(OutputStream output)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.output = output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendStaticResource</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE];</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(HttpServer.WEB_ROOT, request.getUri());</span><br><span class="line">            <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">                <span class="comment">// 书上这段是没有的，当时 browser 比较老，不检测格式，现在浏览器不加这个页面会不能显示，curl 测试倒是不受影响</span></span><br><span class="line">                String header = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Content-Type: text/html\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">                output.write(header.getBytes());</span><br><span class="line"></span><br><span class="line">                fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">                <span class="keyword">int</span> ch = fis.read(bytes, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">                <span class="keyword">while</span> (ch != -<span class="number">1</span>) &#123;</span><br><span class="line">                    output.write(bytes, <span class="number">0</span>, ch);</span><br><span class="line">                    ch = fis.read(bytes, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// file not found</span></span><br><span class="line">                String errorMessage = <span class="string">&quot;HTTP/1.1 404 File Not Found\r\n&quot;</span></span><br><span class="line">                        + <span class="string">&quot;Content-Type: text/html\r\n&quot;</span></span><br><span class="line">                        + <span class="string">&quot;Content-Length: 23\r\n&quot;</span> + <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;h1&gt;File Not Found&lt;/h1&gt;&quot;</span>;</span><br><span class="line">                output.write(errorMessage.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// thrown if cannot instantiate a File object</span></span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结合计算机网络的知识做下分层的整理：Tomcat 处理的问题属于 Application 层，HTTP 规范是在处理 socket 的时候体现的. 那么写 reponse 的时候，需要特殊指定 HTTP 版本，header 等信息，这些参数都是服务器端指定的。</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex02 创建一个简易的 Servlet Container</title>
    <url>/hexo/2021/07/09/HTW-ex02/</url>
    <content><![CDATA[<blockquote>
<p><strong>Chapter2</strong> explains how simple servlet containers work.<br>This chapter comes with two servlet container applications that can service requests for static resources as well as very simple servlets.<br>In particular, you will learn how you can create request and response objects and pass them to the requested servlet’s service method.<br>There is also a servlet that can be run inside the servlet containers and that you can invoke from a web browser.</p>
</blockquote>
<p>servlet container 会为 servlet 做如下事情</p>
<ul>
<li>第一次调用 servlet 时，加载 servlet 并执行 init 方法</li>
<li>接收 server 创建的 ServletRequest 和 ServletResponse 对象</li>
<li>调用 service 方法，传入前面声明的两个对象</li>
<li>servlet 生命周期结束时，调用 destroy 方法</li>
</ul>
<h2 id="练习01"><a href="#练习01" class="headerlink" title="练习01"></a>练习01</h2><p>ex02 的第一个 demo 并不是完整功能的 server，没有实现 init 和 destroy 的功能，它主要关注以下几个方面</p>
<ul>
<li>等待请求</li>
<li>构建 ServletRequest 和 ServletResponse 对象</li>
<li>如果请求静态资源，调用 StaticResourceProcessor 相关方法</li>
<li>如果请求 servlet， 加载 servlet 并调用 service 方法</li>
</ul>
<p><img src="F2.1.png" alt="Figure 2.1"></p>
<p>主要类介绍</p>
<p>HttpServer1 即服务器主体类，通过 while 死循环等待连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServer1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HttpServer1 server = <span class="keyword">new</span> HttpServer1();</span><br><span class="line">        server.await();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">        serverSocket = <span class="keyword">new</span> ServerSocket(port, <span class="number">1</span>, InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Loop waiting for a request</span></span><br><span class="line">        <span class="keyword">while</span> (!shutdown) &#123;</span><br><span class="line">            Socket socket = serverSocket.accept();</span><br><span class="line">            InputStream input = socket.getInputStream();</span><br><span class="line">            OutputStream output = socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// create Request object and parse</span></span><br><span class="line">            Request request = <span class="keyword">new</span> Request(input);</span><br><span class="line">            request.parse();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// create Response object</span></span><br><span class="line">            Response response = <span class="keyword">new</span> Response(output);</span><br><span class="line">            response.setRequest(request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// check if this is a request for a servlet or a static resource</span></span><br><span class="line">            <span class="comment">// a request for a servlet begins with &quot;/servlet/&quot;</span></span><br><span class="line">            <span class="keyword">if</span> (request.getUri().startsWith(<span class="string">&quot;/servlet/&quot;</span>)) &#123;</span><br><span class="line">                ServletProcessor1 processor = <span class="keyword">new</span> ServletProcessor1();</span><br><span class="line">                processor.process(request, response);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                StaticResourceProcessor processor = <span class="keyword">new</span> StaticResourceProcessor();</span><br><span class="line">                processor.process(request, response);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Close the socket</span></span><br><span class="line">            socket.close();</span><br><span class="line">            <span class="comment">//check if the previous URI is a shutdown command</span></span><br><span class="line">            shutdown = request.getUri().equals(SHUTDOWN_COMMAND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Request 和 Response 与 ex01 唯一的不同是，它们分别实现了 servlet 包中定义的 ServletReqeust 和 ServletResponse 的接口，需要实现很多额外的方法，但是本次练习中基本都是使用默认实现，不做介绍</p>
<p>Response 稍微多了一点逻辑，作者将处理静态页面的逻辑放到了 response 中，我觉得这个不好，应该写到 StaticResourceProcessor 中去的，和 ServletProcessor1 相对应，职责更分明才好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Response</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> <span class="keyword">implements</span> <span class="title">ServletResponse</span> </span>&#123;</span><br><span class="line">    <span class="comment">// constructor ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This method is used to serve a static page */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendStaticResource</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// write response header</span></span><br><span class="line">        String header = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Content-Type: text/html\r\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">        output.write(header.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE];</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* request.getUri has been replaced by request.getRequestURI */</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(Constants.WEB_ROOT, request.getUri());</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">         HTTP Response = Status-Line</span></span><br><span class="line"><span class="comment">           *(( general-header | response-header | entity-header ) CRLF)</span></span><br><span class="line"><span class="comment">           CRLF</span></span><br><span class="line"><span class="comment">           [ message-body ]</span></span><br><span class="line"><span class="comment">         Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">            <span class="keyword">int</span> ch = fis.read(bytes, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">            <span class="keyword">while</span> (ch != -<span class="number">1</span>) &#123;</span><br><span class="line">                output.write(bytes, <span class="number">0</span>, ch);</span><br><span class="line">                ch = fis.read(bytes, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            String errorMessage = <span class="string">&quot;HTTP/1.1 404 File Not Found\r\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Content-Type: text/html\r\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Content-Length: 23\r\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&lt;h1&gt;File Not Found&lt;/h1&gt;&quot;</span>;</span><br><span class="line">            output.write(errorMessage.getBytes());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>)</span><br><span class="line">                fis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// other required methods defined in ServletResponse</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StaticResourceProcessor 很简单的一个类，其实就是提供了一个 process 方法，但是实现只是调用了 response 中定义的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticResourceProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Request request, Response response)</span> </span>&#123;</span><br><span class="line">        response.sendStaticResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ServletProcessor1 即处理 servlet 的类，作者参考了 tomcat 中的处理方式，通过 url 解析出来请求的 servlet 名字，再通过 URLClassLoader 做类加载，最后生成实体类并调用 service 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletProcessor1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Request request, Response response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 解析 servlet 名字</span></span><br><span class="line">        String uri = request.getUri();</span><br><span class="line">        String servletName = uri.substring(uri.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create a URLClassLoader</span></span><br><span class="line">        URL[] urls = <span class="keyword">new</span> URL[<span class="number">1</span>];</span><br><span class="line">        URLStreamHandler streamHandler = <span class="keyword">null</span>;</span><br><span class="line">        File classPath = <span class="keyword">new</span> File(Constants.WEB_ROOT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the forming of repository is taken from the createClassLoader</span></span><br><span class="line">        <span class="comment">// method in org.apache.catalina.startup.ClassLoaderFactory</span></span><br><span class="line">        String repository = (<span class="keyword">new</span> URL(<span class="string">&quot;file&quot;</span>, <span class="keyword">null</span>, classPath.getCanonicalPath() + File.separator)).toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the code for forming the URL is taken from the addRepository</span></span><br><span class="line">        <span class="comment">// method in org.apache.catalina.loader.StandardClassLoader class.</span></span><br><span class="line">        urls[<span class="number">0</span>] = <span class="keyword">new</span> URL(<span class="keyword">null</span>, repository, streamHandler);</span><br><span class="line">        URLClassLoader loader = <span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; myClass = myClass = loader.loadClass(servletName);</span><br><span class="line">        Servlet servlet = (Servlet) myClass.newInstance();</span><br><span class="line">        servlet.service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动 server 通过终端访问测试地址. 现在的浏览器对 response 格式要求都挺严格的，默认的代码访问会因为 header 不全被 block，通过终端访问则没这么多问题。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">curl &#x27;http://localhost:8080/servlet/PrimitiveServlet&#x27;</span><br><span class="line">Hello. Roses are red.</span><br><span class="line"></span><br><span class="line">curl &#x27;http://localhost:8080/index.html&#x27;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Welcome to BrainySoftware&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=&quot;images/logo.gif&quot;&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">Welcome to BrainySoftware.</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="练习-02"><a href="#练习-02" class="headerlink" title="练习 02"></a>练习 02</h2><p>这一节练习主要解决一个安全问题-恶意强转。上面的例子中，在 ServletProcessor1 中，我们直接将 request/response 对象作为参数传入 service 方法中，如果使用方知道我们对应的实现，就可以做对象强转并调用 public 方法，比如调用解析静态资源的 sendStaticResource() 方法，这是不安全的，所以我们通过 Facade 的模式，将 request/response 作为内部私有变量持有并调用，以达到隐藏实现的目的。</p>
<p>Facade 和 request/response 的关系</p>
<img  src=http://www.plantuml.com/plantuml/svg/oymhIIrAIqnELSXAB4kiq2jEBIhBIItH2uRGGQc5fQd59Lpu91LiQlJq54XMwPQOd9YIoiMLISW5nGNvUSMfN7XbOIQJhXRY3000>

<p>ServletProcessor1 和 ServletProcessor2 最大的区别只有下面这些</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">Servlet servlet = <span class="keyword">null</span>;</span><br><span class="line">RequestFacade requestFacade = <span class="keyword">new</span> RequestFacade(request);</span><br><span class="line">ResponseFacade responseFacade = <span class="keyword">new</span> ResponseFacade(response);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    servlet = (Servlet) myClass.newInstance();</span><br><span class="line">    servlet.service((ServletRequest) requestFacade, (ServletResponse) responseFacade);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    System.out.println(e.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">    System.out.println(e.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><blockquote>
<p>Servlet 到底是什么？</p>
</blockquote>
<p>先看这个英文单词的意思：小服务程序。Javaweb 三个组建之一(其二为 Listener 和 Filter)，定义了一类特殊的 Java class 可以在访问特定的地址时执行特定的业务逻辑。我觉得理解到这里就足够了。</p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><blockquote>
<p>启动 server 之后访问 URL 报错 <code>Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: javax/servlet/ServletRequest</code>。检查了 pom.xml 什么都正常，Google 了一下，发现是 pom 中包的 scope 有问题.</p>
</blockquote>
<p>maven 网站上 copy 时，scope 是 provided 需要改成 compile</p>
<ul>
<li>compile，缺省值，适用于所有阶段，会随着项目一起发布。 </li>
<li>provided，类似compile，期望JDK、容器或使用者会提供这个依赖。</li>
<li>runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。 </li>
<li>test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。 </li>
<li>system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。</li>
</ul>
<blockquote>
<p>PrimitiveServlet 访问异常</p>
</blockquote>
<p>idea 抄过来的会带包名的，所以会出问题。从成功项目 copy 过来的不带，所以能 work</p>
<blockquote>
<p>Servlet 中的内容 browser 访问出问题</p>
</blockquote>
<p>和之前静态页面的问题一样，不过 servlet 文件我拿到的源码就是 class 的不好改</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex05 自定义 Container</title>
    <url>/hexo/2021/07/22/HTW-ex05/</url>
    <content><![CDATA[<blockquote>
<p><strong>Chapter 5</strong> discusses the container module.<br>A container is represented by the org.apache.catalina.Container interface and there are four types of containers: engine, host, context, and wrapper.<br>This chapter offers two applications that work with contexts and wrappers.</p>
</blockquote>
<p>Tomcat 中有 4 种 container: Wrapper, Context, Engine and Host. container module 的主要作用是用来处理 request 并向 response 中填充处理结果。这节主要介绍前两种，后两种将在 13 节中介绍。</p>
<p>这节的主要目标是理解一下几个概念分别代表了什么</p>
<p>Container: 这个类注释解释的挺好的。container 表示的是可以执行 client 传过来的 request 的类。container 会将他的 invoke 委托给 pipeline 执行</p>
<blockquote>
<p>A Container is an object that can execute requests received from a client, and return responses based on those requests.</p>
</blockquote>
<p>Pipeline: 表示装载着 container 将会 invoke 的 tasks 的容器</p>
<p>Valve: 表示将会被执行的 task, 有一个特殊的 valve 叫做 basic valve, 要求最后执行。在这章的例子中，basic valve 用于处理 servlet，不知道实际应用中是不是也是这样处理的，第六章应该可以看到结果。</p>
<ul>
<li>ValveContext: 由一个内部类作为实现，由此可以访问外部类的成员变量，遍历所有的 valve。</li>
</ul>
<h2 id="The-Container-Interface"><a href="#The-Container-Interface" class="headerlink" title="The Container Interface"></a>The Container Interface</h2><p>container 必须实现 catalina 的 Container 接口。connector 会调用实现类的 invoke 逻辑(怎么调用的我一直没看到，估摸着应该在 Lifecycle 部分才涉及到)。按处理的业务来分，有四种类型的 Container</p>
<ul>
<li>Engine: 代表整个 Catalina servlet engine - 虽然我对这里说的 engine 是个什么东西不怎么清楚</li>
<li>Host: 代表了含有 contexts 的虚拟 host </li>
<li>Context: 代表了一个 web application, 一个 application 可以包含一个或多个 wrapper</li>
<li>Wrapper: 代表一个独立的 servlet</li>
</ul>
<p>以上四种概念的接口定义放在 org.apache.catalina 包下，对应的实现放在 org.apache.catalina.core 下</p>
<img  src=http://www.plantuml.com/plantuml/svg/TP6n3i8W48RtFWLXDA69U-DWOs9d1mVZG0IrYQ5DON3muQMqXtVNkfJmtN5VVsXSiCDTtwoeEnTqw-nGD9aTt2CI18wT3sWxdh5lJCw3xliuetvfxtypzzhReiXRKNsKWkcC9WLZu64uon0kIswTD49TdgqnrbrtasByO8WTSSKbyCmhFuKJfjYde9tHWu6014xv2CfgGi4A0L8sDZg588LyVMC6KW4Bf235B2E1H1LlcQVvsq1VRb5UFEAY8_y4LGgvbQ9JGcuaTU7DMXCOsNwjTLP_0G00>

<p>一个可用的 container 并不需要具备四种 container 类型，最简单的案例只需要一个 wrapper 即可。wrapper 是最低等级的 container，不能再包含其他 container。container 支持的常规操作</p>
<ol>
<li>addChild() - wrapper 除外</li>
<li>removeChild()</li>
<li>findChild()</li>
<li>findChildren()</li>
</ol>
<p>container 还可以包含其他辅助类，比如 Loader, Logger, Manager, Realm 和 Resources. container 还可以通过配置 server.xml 使他在启动服务器时达到动态指定的效果。这种特性是通过 pipeline 和 valves 达到的。</p>
<h2 id="Pipeline-Tasks"><a href="#Pipeline-Tasks" class="headerlink" title="Pipeline Tasks"></a>Pipeline Tasks</h2><p>这节介绍当 container 的 invoke 方法被调用的时候会发生什么。主要涉及到四个接口 Pipeline, Valve, ValveContext 和 Contained. pipeline 包含了 container 将要执行的 tasks, valve 即将要执行的 task. container 默认有一个 valves 但是我们可以自己添加任意多个自定义的 valves. valves 也可以通过配置 server.xml 指定。</p>
<p>这里有个图，但是没显示，我猜是这种责任链的图</p>
<p><img src="pipeline_valve.png" alt="pipeline and valves"></p>
<p>pipeline 的工作原理和 servlet 的 filter 是一样的, 使用责任链模式。pipeline 相当于链，valves 相当去 filter。当一个 valve 执行完了之后，会调用下一个 valve 继续执行。自带的那个 basic valve 总是在最后才被调用。</p>
<p>按上面的逻辑，你可能会用如下方式实现 pipeline</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// invoke each valve added to the pipeline</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;valves.length; n++) &#123;</span><br><span class="line">    valves[n].invoke(...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// then, invoke the basic valve</span></span><br><span class="line">basicValve.invoke(...);</span><br></pre></td></tr></table></figure>

<p>但是 Tomcat 的设计者通过引入 ValveContext 这个 interface 来解决这个问题，工作原理如下</p>
<p>Container 的 invoke() 方法被调用的时候，并不是 hard code 需要做的事情，而是通过调用 pipeline 的 invoke() 方法。pipeline 和 container 的 invoke() 方法定义如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pipeline</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// container 的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerBase</span> <span class="keyword">implements</span> <span class="title">Container</span>, <span class="title">Lifecycle</span>, <span class="title">Pipeline</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Pipeline pipeline = <span class="keyword">new</span> StandardPipeline(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        pipeline.invoke(request, response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>pipeline 需要保证所有被添加进来的 valves 和 basic valve 只被调用一次。pipeline 是通过 ValveContext 这个接口实现该功能的。ValveContext 是 pipeline 的一个内部类(innerClass)，通过这种定义使得 ValveContext 可以访问 pipeline 中的所有对象。ValveContext 中最重要的方法是 invokeNext</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValveContext</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeNext</span><span class="params">(Request request, Response response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePipeline</span> <span class="keyword">implements</span> <span class="title">Pipeline</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Valve valves[] = <span class="keyword">new</span> Valve[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addValve</span><span class="params">(Valve valve)</span> </span>&#123;...&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePipelineValveContext</span> <span class="keyword">implements</span> <span class="title">ValveContext</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">int</span> stage = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeNext</span><span class="params">(Request request, Response response)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">            <span class="comment">// subscript: 下标 + stage 用来标记被调用的 valve</span></span><br><span class="line">            <span class="keyword">int</span> subscript = stage;</span><br><span class="line">            stage = stage + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// Invoke the requested Valve for the current request thread</span></span><br><span class="line">            <span class="keyword">if</span> (subscript &lt; valves.length) &#123;</span><br><span class="line">                valves[subscript].invoke(request, response, <span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((subscript == valves.length) &amp;&amp; (basic != <span class="keyword">null</span>)) &#123;</span><br><span class="line">                basic.invoke(request, response, <span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;No valve&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ValveContxt 会调用第一个 valve 的 invoke 方法，第一个 valve 会调用第二个 valve 的 invoke 方法。Valve 的 invoke 方法的参数列表中包含 ValveContext 方便调用 invokeNext 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Valve</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response, ValveContext context)</span> <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="The-Pipeline-Interface"><a href="#The-Pipeline-Interface" class="headerlink" title="The Pipeline Interface"></a>The Pipeline Interface</h3><p>Pipeline 接口定义, container 通过调用它来处理 valves 和 basic valve.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pipeline</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 操作 basic valve</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Valve <span class="title">getBasic</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBasic</span><span class="params">(Valve valve)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addValve</span><span class="params">(Valve valve)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> Valve[] getValves();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeValve</span><span class="params">(Valve valve)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="The-Valve-Interface"><a href="#The-Valve-Interface" class="headerlink" title="The Valve Interface"></a>The Valve Interface</h3><p>这个 component 用于处理一个 request，只有两个方法 invoke 和 getInfo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Valve</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response, ValveContext context)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="The-ValveContext-Interface"><a href="#The-ValveContext-Interface" class="headerlink" title="The ValveContext Interface"></a>The ValveContext Interface</h3><p>只有 invokeNext 和 getInfo 两个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValveContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeNext</span><span class="params">(Request request, Response response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="The-Contained-Interface"><a href="#The-Contained-Interface" class="headerlink" title="The Contained Interface"></a>The Contained Interface</h3><p>valve 可以选择性的实现 Contained 接口，这个接口表明对应的实现最多只能和一个 container 有关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Contained</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Container <span class="title">getContainer</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContainer</span><span class="params">(Container container)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="The-Wrapper-Interface"><a href="#The-Wrapper-Interface" class="headerlink" title="The Wrapper Interface"></a>The Wrapper Interface</h2><p>Wrapper 表示一个独立的 servlet 定义。Wrapper 的实现类负责管理 servlet 的生命周期。比如调用 init, service 和 destroy 方法。它是最底层的 container 实现，所以不能添加 child, 添加会抛错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addChild</span><span class="params">(Container child)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(sm.getString(<span class="string">&quot;standardWrapper.notChild&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他一些比较重要的方法比如 allocate 和 load</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Wrapper</span> <span class="keyword">extends</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Servlet <span class="title">allocate</span><span class="params">()</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>allocate 用于指定 wrapper 指代的 servlet，load 用于加载 servlet 的实例。</p>
<h2 id="The-Context-Interface"><a href="#The-Context-Interface" class="headerlink" title="The Context Interface"></a>The Context Interface</h2><p>Context 指代一个 web application. 一个 context 可以包含一个或多个 wrapper</p>
<h2 id="The-Wrapper-Application"><a href="#The-Wrapper-Application" class="headerlink" title="The Wrapper Application"></a>The Wrapper Application</h2><p>下面是本章的第一个例子，一个简单的 container，只由一个 wrapper 来充当 container 主体。包含七个类</p>
<ul>
<li>SimpleWrapper: Wrapper 的实现类，包含一个 Pipeline, 通过一个 Loader 来加载 servlet。</li>
<li>SimplePipeline: Pipeline 的实现类，包含一个 basic valve 和两个额外 valve</li>
<li>SimpleLoader: 用于加载 servlet</li>
<li>SimpleWrapperValve: basic valve 的实现类</li>
<li>ClientIPLoggerValve, HeaderLoggerValve: 额外 valve 的实现类</li>
<li>Bootstrap1: 启动类</li>
</ul>
<p>SimpleWrapperValve 和额外的 Valve 最大的区别是，SimpleWrapperValve 没有在调用 invkeNext, 因为规则上来说，它是最后一个需要调用的 valve 了。</p>
<img  src=http://www.plantuml.com/plantuml/svg/RP0n2y8m48Nt_8gGKKZ1NLowA7Ge23g8Gx1dFOX9Y6bnyCURrfYBw7J7-zwxkmHD07zHP-2DLHruzYvyzQmgliERqv00msojhGaA3Rd5KaWl5x4Kh0WSl78kIXd6-L9ccQMct9ePJMdHWOxfR9V7AtOTc1CXzkd-pVh7A4cBzagFGExfMLPoOKGYR2vSE0yZsk4kv3gH10my0eb9_JsepCoqrWWcRDl6zlsCXo-yWUct2_W2>

<h3 id="Running-the-Application"><a href="#Running-the-Application" class="headerlink" title="Running the Application"></a>Running the Application</h3><p>启动服务器，访问 <code>http://localhost:8080</code> 终端显内容如下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ModernServlet -- init</span><br><span class="line">Client IP Logger Valve</span><br><span class="line">0:0:0:0:0:0:0:1</span><br><span class="line">------------------------------------</span><br><span class="line">Header Logger Valve</span><br><span class="line">host:localhost:8080</span><br><span class="line">connection:keep-alive</span><br><span class="line">sec-ch-ua:&quot;Chromium&quot;;v=&quot;92&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;92&quot;</span><br><span class="line">sec-ch-ua-mobile:?0</span><br><span class="line">upgrade-insecure-requests:1</span><br><span class="line">user-agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36</span><br><span class="line">accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">sec-fetch-site:none</span><br><span class="line">sec-fetch-mode:navigate</span><br><span class="line">sec-fetch-user:?1</span><br><span class="line">sec-fetch-dest:document</span><br><span class="line">accept-encoding:gzip, deflate, br</span><br><span class="line">accept-language:en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,zh-TW;q=0.6</span><br><span class="line">cookie:loginMethodCookieKey=PWD; bizxThemeId=2wyfwkupsp; fontstyle=null; _pk_id.1.1fff=9a13b6b396550ca6.1619008137.; Idea-12b942b0=d6d70da6-7368-4631-b3f7-a91eafcb1e9f; Idea-cead54cd=ce25569f-051c-4d11-b8f4-6b99d512503d; JSESSIONID=B3BD850D653D266A9BB2346D7D97B8A2</span><br><span class="line">------------------------------------</span><br></pre></td></tr></table></figure>

<h2 id="The-Context-Application"><a href="#The-Context-Application" class="headerlink" title="The Context Application"></a>The Context Application</h2><p>当服务器需要处理多个 servlet 时，就需要用到 context 和 mapper 了。mapper 帮助父容器选择子 container 处理 request。</p>
<p>PS: mapper 只在 Tomcat4 中使用，到 Tomcat5 就淘汰了。</p>
<p>一个 container 可以使用多个 mapper 支持多种 protocols. 这个例子中只处理一种。比如一个 container 可以配置一个 mapper 处理 http 请求，配置另一个 mapper 处理 https.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Container <span class="title">map</span><span class="params">(Request request, <span class="keyword">boolean</span> update)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//this method is taken from the map method in org.apache.cataline.core.ContainerBase</span></span><br><span class="line">    <span class="comment">//the findMapper method always returns the default mapper, if any, regardless the</span></span><br><span class="line">    <span class="comment">//request&#x27;s protocol</span></span><br><span class="line">    Mapper mapper = findMapper(request.getRequest().getProtocol());</span><br><span class="line">    <span class="keyword">if</span> (mapper == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this Mapper to perform this mapping</span></span><br><span class="line">    <span class="keyword">return</span> (mapper.map(request, update));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个例子的实现中没有做 protocol 的处理，直接返回默认的 mapper。Mapper 接口的定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Container <span class="title">getContainer</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContainer</span><span class="params">(Container container)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProtocol</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProtocol</span><span class="params">(String protocol)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Container <span class="title">map</span><span class="params">(Request request, <span class="keyword">boolean</span> update)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img  src=http://www.plantuml.com/plantuml/svg/RL8z2uCm5Dpz5I6Z4A5hSNDfmO9GQ8VI8UYh3TWOh9GE_lWcJNm-FwQ4ktVtBgTAzz0zP0aiQtKlbOOkKeZbhQncm4aQOu78dup7NCHynuaORypYmd71PDIaGvAmitgP1jmiVFjWwkSeFohLBAHL4EJQUVM45Cf0OnCGw2AR3qHHK3DnUwgg0dr7TJW9WoxZXN313XdtobZGBRw1T1028o_WSVEKQbqCnY8Kwd0x8TUXDqotE7ITZP8dByR-JzqmznMisA1RiLcZGFV78c_hUeC-WFl-b5paSyMtjapx7yutxHalVTzl_WC0>

<p>Context 的例子中定义了两个 map, 一个是 url_path - servlet_name 的 map, 另一个是 servlet_name - servlet_class 的 map。就我看来有点啰嗦，这样做可能是为了实现定制 url path 的功能(个人感觉，没有细究)。</p>
<p>处理过程和 SimpleWrapper 一样，通过 pipeline 处理所有的 valves, 最后处理 basic valve. 这里定义的 basic valve 叫做 SimpleContextValve. 他的实现中通过调用 <code>container.map(request, true)</code> 拿到指定的 wrapper，之后调用 <code>wrapper.invoke(req, resp)</code> 完成 servlet 的调用。invoke 的实现中会调用 SimpleWrapperValve 完成 servlet 类加载，并执行 service 方法，完成功能调用。</p>
<p>PS: SimpleWrapper 和 SimpleWrapperValve 是强绑定的，之前找了好久，通过 debug 确定了相互关系。</p>
<p>过程：</p>
<ol>
<li>SimpleContext 调用 pipeline 的 invoke 方法</li>
<li>pipeline 的 invoke 方先调用额外 valves 再调用 basic valve</li>
<li>basic valve 的 invoke 方法会调用 map 方法找到子 wrapper，如果存在则调用其 invoke 方法</li>
</ol>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex06 生命周期</title>
    <url>/hexo/2021/07/29/HTW-ex06/</url>
    <content><![CDATA[<blockquote>
<p><strong>Chapter 6</strong> explains the Lifecycle interface.<br>This interface defines the lifecycle of a Catalina component and provides an elegant way of notifying other components of events that occur in that component.<br>In addition, the Lifecycle interface provides an elegant mechanism for starting and stopping all the components in Catalina by one single start/stop.</p>
</blockquote>
<p>Catalina 是由多个模块组成的，当 Catalina 启动时，这些模块也要一起启动，停止时也是。比如 destroy 所有的 servlet，将 session 存到二级缓存等。Catalina 通过 Lifecycle 接口管理这些事件。</p>
<p>实现了 Lifecycle 的组件可以出发以下事件</p>
<ul>
<li>BEFORE_START_EVENT</li>
<li>START_EVENT</li>
<li>AFTER_START_EVENT</li>
<li>BEFORE_STOP_EVENT</li>
<li>STOP_EVENT</li>
<li>AFTER_STOP_EVENT</li>
</ul>
<p>LifecycleEvent 这个接口表示上面这些事件。这些事件可以由 LifecycleListener 监听。本章会介绍上面这些类，介绍 LifecycleSupport，他可以帮助组件处理事件和监听器。</p>
<p>理解本章的关键点是理解如下概念</p>
<p>Lifecycle: 实现这个接口的 component 可以发送 event</p>
<p>LifecycleEvent: 代表具体的 event 事件，比如 开始，停止之类的</p>
<p>LifecycleListener: 监听事件的类</p>
<p>LifecycleSupport: Util 类，提供简化处理事件的方法. 一个实现了 Lifecycle 的 class 如果要添加 Listener 就得内部创建一些容器，比如 ArrayList 管理这些 Listener。LifecycleSupport 就是用来代替这些容器的。</p>
<h2 id="The-Lifecycle-Interface"><a href="#The-Lifecycle-Interface" class="headerlink" title="The Lifecycle Interface"></a>The Lifecycle Interface</h2><p>Catalina 允许一个 component 包含另一个 component。比如 container 可以包含 loader，manager 等。父组件需要管理子组件的起止。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line">    String START_EVENT = <span class="string">&quot;start&quot;</span>;</span><br><span class="line">    String BEFORE_START_EVENT = <span class="string">&quot;before_start&quot;</span>;</span><br><span class="line">    String AFTER_START_EVENT = <span class="string">&quot;after_start&quot;</span>;</span><br><span class="line">    String STOP_EVENT = <span class="string">&quot;stop&quot;</span>;</span><br><span class="line">    String BEFORE_STOP_EVENT = <span class="string">&quot;before_stop&quot;</span>;</span><br><span class="line">    String AFTER_STOP_EVENT = <span class="string">&quot;after_stop&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addLifecycleListener</span><span class="params">(LifecycleListener var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    LifecycleListener[] findLifecycleListeners();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeLifecycleListener</span><span class="params">(LifecycleListener var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>start 和 stop 是其中的核心方法，component 提供对应的实现，parent component 可以 调用start/stop 方法。其他三个方法是用来监听事件的。</p>
<h2 id="The-LifecycleEvent-Class"><a href="#The-LifecycleEvent-Class" class="headerlink" title="The LifecycleEvent Class"></a>The LifecycleEvent Class</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleEvent</span> <span class="keyword">extends</span> <span class="title">EventObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LifecycleEvent</span><span class="params">(Lifecycle lifecycle, String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(lifecycle, type, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LifecycleEvent</span><span class="params">(Lifecycle lifecycle, String type, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(lifecycle);</span><br><span class="line">        <span class="keyword">this</span>.lifecycle = lifecycle;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object data = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Lifecycle lifecycle = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">getLifecycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.lifecycle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="The-LifecycleListener-Interface"><a href="#The-LifecycleListener-Interface" class="headerlink" title="The LifecycleListener Interface"></a>The LifecycleListener Interface</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LifecycleListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Acknowledge the occurrence of the specified event.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event LifecycleEvent that has occurred</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="The-LifecycleSupport-Class"><a href="#The-LifecycleSupport-Class" class="headerlink" title="The LifecycleSupport Class"></a>The LifecycleSupport Class</h2><p>这个 support 类内部声明了一个 Array 变量存储要操作的 Listener: <code>private LifecycleListener listeners[] = new LifecycleListener[0];</code>. 主就三个方法:</p>
<ul>
<li>addLifecycleListener</li>
<li>findLifecycleListeners</li>
<li>fireLifecycleEvent</li>
<li>removeLifecycleListener</li>
</ul>
<p>addLifecycleListener(LifecycleListener listener) 被调用时，老的 listener list size + 1， 老的 listener 被拷贝，最后再加上新的这个 listener。</p>
<p>removeLifecycleListener(LifecycleListener listener): 遍历所有的 listener 如果有则删除，最后新建一个 size - 1 的 list，将原来的 list 拷贝进去</p>
<h2 id="The-Application"><a href="#The-Application" class="headerlink" title="The Application"></a>The Application</h2><p>实验环境是在 ex05 之上，删掉了额外 valves，context 实现了 Lifecycle 和 listener 接口。</p>
<img  src=http://www.plantuml.com/plantuml/svg/Iyv9B2vMyCbCIqskJCv93IujACWlAk7Ap2j9BKfBJ4v5I64JyyaiBadDIotYua8tGS56Jqz1gRGujLX98JWpjo0drJaVgB-YX0YLuKM91GKeXYhOr00LuJ07MHAc5QjaG6P1QavcNYfsMP_yn1HSEg5s-gAx2-P_B6hnXP62dXrc6080>

<p>启动项目可以看到如下 log</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">HttpConnector Opening server socket on all host IP addresses</span><br><span class="line">HttpConnector[8080] Starting background thread</span><br><span class="line">SimpleContextLifecycleListener&#x27;s event before_start</span><br><span class="line">Starting SimpleLoader</span><br><span class="line">Starting Wrapper Primitive</span><br><span class="line">Starting Wrapper Modern</span><br><span class="line">SimpleContextLifecycleListener&#x27;s event start</span><br><span class="line">Starting context.</span><br><span class="line">SimpleContextLifecycleListener&#x27;s event after_start</span><br><span class="line"></span><br><span class="line">SimpleContextLifecycleListener&#x27;s event before_stop</span><br><span class="line">SimpleContextLifecycleListener&#x27;s event stop</span><br><span class="line">Stopping context.</span><br><span class="line">Stopping wrapper Primitive</span><br><span class="line">Stopping wrapper Modern</span><br><span class="line">SimpleContextLifecycleListener&#x27;s event after_stop</span><br></pre></td></tr></table></figure>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Q: SimpleContext 中 fire 的 event 是什么时候被 listener 执行的，代码在哪里</p>
<p>A: 在 SimpleContext 的 start() 里。但是和我臆想的事件处理不同，感觉这最多是个伪事件。我本以为他会有一个多线程之类的东西。<br>实际处理的时候，start() 方法一开始就通过 support 发出了一个 before 的 event，support 发送的时候会调用 listener 实现对应的逻辑。说到底还是串行操作。</p>
<p>Q: 这个 event 和 listener 是不是用了观察这模式啊，复习一下</p>
<p>A: 貌似没有，没看出来</p>
<h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><p>复盘一下这个 Lifecycle 的原理。Tomcat 提供了一个机制，通过套娃的方式，让所有相关的组件知道某个事件发生了，并让他可以采取相应的动作。</p>
<p>PS: 解构的时候才注意到，start() 和 stop() 方法中操作的 component 对象，顺序上是相反的，666</p>
<p>这里当 event 发生时，有两种对象需要进行操作，一种是 Component，代表 Tomcat 里的 service 组件。另一种是 Listener，我的理解是，独立于 Tomcat 之外的一些 service，比如 log 之类的东西。</p>
<p>Listener 说白了就是定义了一个接口，接受 event 作为参数，实现中通过 if-else 判断 event 类型并采取对应的行为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LifecycleListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Acknowledge the occurrence of the specified event.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event LifecycleEvent that has occurred</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有理解透彻，不能很顺利的重构出这个模型，但是理解层面的话已经做到了。</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex07 实现 Logger 机制</title>
    <url>/hexo/2021/07/30/HTW-ex07/</url>
    <content><![CDATA[<p><strong>Chapter 7</strong> covers loggers, which are components used for recording error messages and other messages.</p>
<p>分三节介绍 Catalina 中的 log 机制。第一部分介绍 Logger 接口，Catalina 中所有的 logger 都要实现的。第二节介绍 Tomcat 中的 loggers。第三节介绍本章中使用案例。</p>
<h2 id="The-Logger-Interface"><a href="#The-Logger-Interface" class="headerlink" title="The Logger Interface"></a>The Logger Interface</h2><p>理论上来说，Logger 可以 attach 到任何 container，但是实际操作中，我们基本只会 attach 到 Context level 以上的 container 中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FATAL = Integer.MIN_VALUE; <span class="comment">// 严重的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ERROR = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WARNING = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INFORMATION = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEBUG = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Container <span class="title">getContainer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContainer</span><span class="params">(Container container)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVerbosity</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVerbosity</span><span class="params">(<span class="keyword">int</span> verbosity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPropertyChangeListener</span><span class="params">(PropertyChangeListener listener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------- 一系列重载的 log 方法，有些还支持 verbosity 设置，如果传入的 level 比当前的小就会被记载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(Exception exception, String msg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message, Throwable throwable)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message, <span class="keyword">int</span> verbosity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message, Throwable throwable, <span class="keyword">int</span> verbosity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removePropertyChangeListener</span><span class="params">(PropertyChangeListener listener)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提供了很多 log 方法，最简单的只需要一个 string 参数即可。定义了五种 log 级别，还有 container 相关的方法将 logger 实体和 container 结合起来。</p>
<h2 id="Tomcat’s-Loggers"><a href="#Tomcat’s-Loggers" class="headerlink" title="Tomcat’s Loggers"></a>Tomcat’s Loggers</h2><p>Tomcat 自带的 logger 有 FileLogger，SystemErrLogger 和 SystemOutLogger. 他们都继承自 LoggerBase 类， LoggerBase 实现了 Logger 接口</p>
<img  src=http://www.plantuml.com/plantuml/svg/oymhIIrAIqnELV39JqzFBUA2K0esDNfw2ZbWjXv4o2cnE9MB2qC8g59N5wOokBAu93NNlxG4QXWngbsBYeXIxPQPamgH0W00>

<h3 id="The-LoggerBase-Class"><a href="#The-LoggerBase-Class" class="headerlink" title="The LoggerBase Class"></a>The LoggerBase Class</h3><p>Tomcat5 的 LoggerBase 由于结合了 MBeans 的功能，所以变得有些复杂，在 20 章会介绍。这里用 Tomcat4 的做例子。</p>
<p>Tomcat4 中的 LoggerBase 实现了除 log(string) 外的所有接口方法，这个方法的实现放在子类中完成。默认的 verbosity level 是 ERROR。可以通过 setVerbosity() 来改变这个值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerBase</span> <span class="keyword">implements</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Container container = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> debug = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String info = <span class="string">&quot;org.apache.catalina.logger.LoggerBase/1.0&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> PropertyChangeSupport support = <span class="keyword">new</span> PropertyChangeSupport(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> verbosity = ERROR;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Container <span class="title">getContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (container);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContainer</span><span class="params">(Container container)</span> </span>&#123;</span><br><span class="line">        Container oldContainer = <span class="keyword">this</span>.container;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">        support.firePropertyChange(<span class="string">&quot;container&quot;</span>, oldContainer, <span class="keyword">this</span>.container);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDebug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.debug);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDebug</span><span class="params">(<span class="keyword">int</span> debug)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.debug = debug;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVerbosity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.verbosity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVerbosity</span><span class="params">(<span class="keyword">int</span> verbosity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.verbosity = verbosity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVerbosityLevel</span><span class="params">(String verbosity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;FATAL&quot;</span>.equalsIgnoreCase(verbosity))</span><br><span class="line">            <span class="keyword">this</span>.verbosity = FATAL;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;ERROR&quot;</span>.equalsIgnoreCase(verbosity))</span><br><span class="line">            <span class="keyword">this</span>.verbosity = ERROR;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;WARNING&quot;</span>.equalsIgnoreCase(verbosity))</span><br><span class="line">            <span class="keyword">this</span>.verbosity = WARNING;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;INFORMATION&quot;</span>.equalsIgnoreCase(verbosity))</span><br><span class="line">            <span class="keyword">this</span>.verbosity = INFORMATION;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;DEBUG&quot;</span>.equalsIgnoreCase(verbosity))</span><br><span class="line">            <span class="keyword">this</span>.verbosity = DEBUG;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPropertyChangeListener</span><span class="params">(PropertyChangeListener listener)</span> </span>&#123;</span><br><span class="line">        support.addPropertyChangeListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(Exception exception, String msg)</span> </span>&#123;</span><br><span class="line">        log(msg, exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        CharArrayWriter buf = <span class="keyword">new</span> CharArrayWriter();</span><br><span class="line">        PrintWriter writer = <span class="keyword">new</span> PrintWriter(buf);</span><br><span class="line">        writer.println(msg);</span><br><span class="line">        throwable.printStackTrace(writer);</span><br><span class="line">        Throwable rootCause = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> LifecycleException)</span><br><span class="line">            rootCause = ((LifecycleException) throwable).getThrowable();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> ServletException)</span><br><span class="line">            rootCause = ((ServletException) throwable).getRootCause();</span><br><span class="line">        <span class="keyword">if</span> (rootCause != <span class="keyword">null</span>) &#123;</span><br><span class="line">            writer.println(<span class="string">&quot;----- Root Cause -----&quot;</span>);</span><br><span class="line">            rootCause.printStackTrace(writer);</span><br><span class="line">        &#125;</span><br><span class="line">        log(buf.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message, <span class="keyword">int</span> verbosity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.verbosity &gt;= verbosity)</span><br><span class="line">            log(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message, Throwable throwable, <span class="keyword">int</span> verbosity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.verbosity &gt;= verbosity)</span><br><span class="line">            log(message, throwable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removePropertyChangeListener</span><span class="params">(PropertyChangeListener listener)</span> </span>&#123;</span><br><span class="line">        support.removePropertyChangeListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="The-SystemOutLogger-Class"><a href="#The-SystemOutLogger-Class" class="headerlink" title="The SystemOutLogger Class"></a>The SystemOutLogger Class</h3><p>在它的实现中，所有 log 都会被输出到终端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemOutLogger</span> <span class="keyword">extends</span> <span class="title">LoggerBase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String info = <span class="string">&quot;org.apache.catalina.logger.SystemOutLogger/1.0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="The-SystemErrLogger-Class"><a href="#The-SystemErrLogger-Class" class="headerlink" title="The SystemErrLogger Class"></a>The SystemErrLogger Class</h3><p>与上面雷同，只不过用了 <code>System.err.println(msg);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemErrLogger</span> <span class="keyword">extends</span> <span class="title">LoggerBase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String info = <span class="string">&quot;org.apache.catalina.logger.SystemErrLogger/1.0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.err.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="The-FileLogger-Class"><a href="#The-FileLogger-Class" class="headerlink" title="The FileLogger Class"></a>The FileLogger Class</h3><p>FileLogger 是所有 tomcat 子类中最复杂的一个，他会将 log 记录到文件并附带时间戳信息。当初始化时他会创建一个附带当天日期的 log 文件，如果日期变了，他会创建一个新的文件保存日志。我们还可以自定义前缀后缀。</p>
<p>按天为单位常见新文件记录信息，允许指定前/后缀。Tomcat4 中这个类也实现了 Lifecycle 接口，这样我们实现了开启/停止服务的托管。在 Tomcat5 中，这个接口被移到父类去了。</p>
<p>PS: 这个类的 log 方法拿时间戳的方法挺有意思，以后同样的功能可以借鉴一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileLogger</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Timestamp ts = <span class="keyword">new</span> Timestamp(System.currentTimeMillis());</span><br><span class="line">        System.out.println(ts);</span><br><span class="line"></span><br><span class="line">        String tsString = ts.toString().substring(<span class="number">0</span>, <span class="number">19</span>);</span><br><span class="line">        System.out.println(tsString);</span><br><span class="line"></span><br><span class="line">        String tsDate = tsString.substring(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(tsDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2021-09-03 15:20:49.025</span></span><br><span class="line"><span class="comment">// 2021-09-03 15:20:49</span></span><br><span class="line"><span class="comment">// 2021-09-03</span></span><br></pre></td></tr></table></figure>

<p>实现了 Lifecycle 接口之后，stop/start 方法实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileLogger</span> <span class="keyword">extends</span> <span class="title">LoggerBase</span> <span class="keyword">implements</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        <span class="comment">// Validate and update our current component state</span></span><br><span class="line">        <span class="keyword">if</span> (started)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(sm.getString(<span class="string">&quot;fileLogger.alreadyStarted&quot;</span>));</span><br><span class="line">        lifecycle.fireLifecycleEvent(START_EVENT, <span class="keyword">null</span>);</span><br><span class="line">        started = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        <span class="comment">// Validate and update our current component state</span></span><br><span class="line">        <span class="keyword">if</span> (!started)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(sm.getString(<span class="string">&quot;fileLogger.notStarted&quot;</span>));</span><br><span class="line">        lifecycle.fireLifecycleEvent(STOP_EVENT, <span class="keyword">null</span>);</span><br><span class="line">        started = <span class="keyword">false</span>;</span><br><span class="line">        close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要方法 log(String msg) 实现如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Construct the timestamp we will use, if requested</span></span><br><span class="line">    Timestamp ts = <span class="keyword">new</span> Timestamp(System.currentTimeMillis());</span><br><span class="line">    String tsString = ts.toString().substring(<span class="number">0</span>, <span class="number">19</span>);</span><br><span class="line">    String tsDate = tsString.substring(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the date has changed, switch log files</span></span><br><span class="line">    <span class="keyword">if</span> (!date.equals(tsDate)) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!date.equals(tsDate)) &#123;</span><br><span class="line">                close();</span><br><span class="line">                date = tsDate;</span><br><span class="line">                open();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Log this message, timestamped if necessary</span></span><br><span class="line">    <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timestamp) &#123;</span><br><span class="line">            writer.println(tsString + <span class="string">&quot; &quot;</span> + msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            writer.println(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通常情况下 FileLogger 会操作多个文件，在操作下一个时会把当前的关掉。</p>
<h3 id="The-open-method"><a href="#The-open-method" class="headerlink" title="The open method"></a>The open method</h3><p>先检查目录是否村子啊，没有就建一个。然后再创建 log 文件的 PrintWriter 并返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the directory if necessary</span></span><br><span class="line">    File dir = <span class="keyword">new</span> File(directory);</span><br><span class="line">    <span class="keyword">if</span> (!dir.isAbsolute())</span><br><span class="line">        dir = <span class="keyword">new</span> File(System.getProperty(<span class="string">&quot;catalina.base&quot;</span>), directory);</span><br><span class="line">    dir.mkdirs();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open the current log file</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String pathname = dir.getAbsolutePath() + File.separator +</span><br><span class="line">            prefix + date + suffix;</span><br><span class="line">        writer = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(pathname, <span class="keyword">true</span>), <span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        writer = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="The-close-method"><a href="#The-close-method" class="headerlink" title="The close method"></a>The close method</h3><p>很简单，flush IO 流并重制变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (writer == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    writer.flush();</span><br><span class="line">    writer.close();</span><br><span class="line">    writer = <span class="keyword">null</span>;</span><br><span class="line">    date = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="The-log-method"><a href="#The-log-method" class="headerlink" title="The log method"></a>The log method</h3><p>这小节就是将之前贴的这些方法穿起来描述一下，log 中的工作流如下：</p>
<ul>
<li>调用 lang 包下的类和方法，拿到当前时间戳</li>
<li>比较当前时间，如有必要则创建新的 log 文件</li>
<li>根据 timestamp 这个 flag 决定是否在写 log 的时候加入时间戳</li>
<li>写入 log，打完收工</li>
</ul>
<h3 id="The-Application"><a href="#The-Application" class="headerlink" title="The Application"></a>The Application</h3><p>测试代码和第 6 章基本一样，只是在 Bootstrap 部分添加了对 log 文件的定制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------ add logger --------</span></span><br><span class="line">System.setProperty(<span class="string">&quot;catalina.base&quot;</span>, System.getProperty(<span class="string">&quot;user.dir&quot;</span>));</span><br><span class="line">FileLogger logger = <span class="keyword">new</span> FileLogger();</span><br><span class="line">logger.setPrefix(<span class="string">&quot;FileLog_&quot;</span>);</span><br><span class="line">logger.setSuffix(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">logger.setTimestamp(<span class="keyword">true</span>);</span><br><span class="line">logger.setDirectory(<span class="string">&quot;webroot&quot;</span>);</span><br><span class="line">context.setLogger(logger);</span><br></pre></td></tr></table></figure>

<p>访问 <code>http://localhost:8080/Modern</code> 后在 webroot 文件夹下面会生成定制的 log 文件 <code>FileLog_2021-08-02.txt</code></p>
<p>这个案例运行的时候大概卡了快一分钟才执行完，看了 log 原来是有 class 找不到, 应该是我用的 jar 包已经是 Catalina 了，不是 tomcat 了，版本太高</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-08-02 10:38:13 HttpProcessor[8080][4] process.invoke</span><br><span class="line">java.lang.NoClassDefFoundError: org&#x2F;apache&#x2F;tomcat&#x2F;util&#x2F;log&#x2F;SystemLogHandler</span><br><span class="line">    at org.apache.catalina.connector.RequestBase.recycle(RequestBase.java:562)</span><br><span class="line">    at org.apache.catalina.connector.HttpRequestBase.recycle(HttpRequestBase.java:417)</span><br><span class="line">    at org.apache.catalina.connector.http.HttpRequestImpl.recycle(HttpRequestImpl.java:195)</span><br><span class="line">    at org.apache.catalina.connector.http.HttpProcessor.process(HttpProcessor.java:1101)</span><br><span class="line">    at org.apache.catalina.connector.http.HttpProcessor.run(HttpProcessor.java:1151)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:836)</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.apache.tomcat.util.log.SystemLogHandler</span><br><span class="line">    at java.net.URLClassLoader.findClass(URLClassLoader.java:444)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:480)</span><br><span class="line">    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:384)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:413)</span><br><span class="line">    ... 6 more</span><br></pre></td></tr></table></figure>

<p>这个类被放到 tomcat-util 中去了，添加对应的 reference 到 pom 中即可解决</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/tomcat/tomcat-util --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-util<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再后来，遇到了很多麻烦，最后将 Tomcat 源码整合到项目中了，所有问题都没了。。。</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex08 类加载器</title>
    <url>/hexo/2021/08/02/HTW-ex08-classloader/</url>
    <content><![CDATA[<blockquote>
<p><strong>Chapter 8</strong> explains about loaders. A loader is an important Catalina module responsible for loading servlet and other classes that a web application uses. This chapter also shows how application reloading is achieved.</p>
</blockquote>
<p>之前章节我们已经给出了一个简单的 loader 实现用于加载 servlet。这章我们将介绍 tomcat 的 standard web application loader. servlet container 必须实现自己的 loader，而不能使用系统自带的那个。因为它不信任运行的 servlets。如果它像我们之前的例子那样使用默认的类加载器，那么 servlet 将可以访问任何 JVM classpath 下的 class 和 lib，这和 security 的规则相违背。</p>
<p>一个 servlet 只允许加载 WEB-INF/classes 和 WEB-INF/lib 文件夹下的内容, 那个 web application(context) 需要有它自己的 loader。Catalina 中，org.apache.catalina.Loader 表示 loader 类。</p>
<p>另一个 tomcat 需要自己的 loader 的原因是它需要支持自动加载的功能。当 WEB-INF/classes 和 lib 下的内容发生改变时，这个 loader 需要自动检测并重新加载。Tomcat 新起一个线程完成这个功能, org.apache.catalina.loader.Reloader 即代表了 reload 这个行为。</p>
<p>本章第一部分介绍 Java 中的类加载机制。之后介绍 Loader 接口，最后演示 tomcat 的 loader 使用案例</p>
<p>本章中两个术语 repository 表示 class loader 会搜索的地方，resources 表示 DirContext，它指向 context 的 document 目录。</p>
<h2 id="Java-Class-Loader"><a href="#Java-Class-Loader" class="headerlink" title="Java Class Loader"></a>Java Class Loader</h2><p>查看 深入理解 Java 虚拟机 第 7，9 章节，说的很清楚了。</p>
<p>Java 允许你定制自己的 class loader，只需继承 java.lang.ClassLoader 即可。以下是 tomcat 需要定制 loader 的原因</p>
<ul>
<li>To specify certain rules in loading classes.</li>
<li>To cache the previously loaded classes.</li>
<li>To pre-load classes so they are ready to use.</li>
</ul>
<h2 id="The-Loader-Interface"><a href="#The-Loader-Interface" class="headerlink" title="The Loader Interface"></a>The Loader Interface</h2><img  src=http://www.plantuml.com/plantuml/svg/ROwn3i8m34HtliBgtdm1Oc7DL54nc_OGbj8qgZtoyHIL2aUmMU_ETsTY2NHvWEBC8nQIR5ZkF80uZoIc95D9c92DJUPy-1gs3mSwf0qDYLMfx-BvVKGFhxXnAPvNmiu-QuxF46fbx_2IJwjBLrVR_klqcTJq2ct2wTVu0W00>

<h2 id="The-Reloader-Interface"><a href="#The-Reloader-Interface" class="headerlink" title="The Reloader Interface"></a>The Reloader Interface</h2><p>为了提供自动重载的功能，loader 必须实现 org.apache.catalina.loader.Reloader 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Reloader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRepository</span><span class="params">(String repository)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] findRepositories();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modified</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中最重要的是 modified() 方法，当应用中的 servlet 或者 supporting classes 有改动时，他会返回 true。</p>
<h2 id="The-WebappLoader-Class"><a href="#The-WebappLoader-Class" class="headerlink" title="The WebappLoader Class"></a>The WebappLoader Class</h2><p>WebappLoader 是 Loader 接口的一个实现，他代表一个 web application 负责为这个应用加载 class。WebappLoader 会创建一个 WebappClassLoader 作为他的类加载器。和其他 Catalina 组件一样，WebappLoader 也实现了 Lifecycle 和 Runnable 接口。前者借由相关组件控制开启停止，后者可以通过多线程实现类的重载。class 重载由 Context 执行，而不是 WebappLoader， 细节将在 Chapter 12 的 StandardContext 介绍。</p>
<p>WebappLoader 中的主要方任务：</p>
<ul>
<li>Creating a class loader</li>
<li>Setting repositories</li>
<li>Setting the class path</li>
<li>Setting permissions</li>
<li>Starting a new thread for auto-reload</li>
</ul>
<h3 id="Create-A-Class-Loader"><a href="#Create-A-Class-Loader" class="headerlink" title="Create A Class Loader"></a>Create A Class Loader</h3><p>WebappLoader 将类加载委托给了一个内部的类加载器，外部并不能直接直接创建这个加载器。但是可以通过 getClassLoader() 拿到它。如果你想要指定自己的应用加载器，可以通过 setLoaderClass() 方法传入加载器全路径，需要注意的是，加载器最终是通过 createClassLoader() 方法创建的，所以自定义的类加载器必须继承自 WebappClassLoader 不然会抛异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> WebappClassLoader <span class="title">createClassLoader</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    Class clazz = Class.forName(loaderClass);</span><br><span class="line">    WebappClassLoader classLoader = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parentClassLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Will cause a ClassCast is the class does not extend WCL, but</span></span><br><span class="line">        <span class="comment">// this is on purpose (the exception will be caught and rethrown)</span></span><br><span class="line">        classLoader = (WebappClassLoader) clazz.newInstance();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Class[] argTypes = &#123; ClassLoader.class &#125;;</span><br><span class="line">        Object[] args = &#123; parentClassLoader &#125;;</span><br><span class="line">        Constructor constr = clazz.getConstructor(argTypes);</span><br><span class="line">        classLoader = (WebappClassLoader) constr.newInstance(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> classLoader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Setting-Repositories"><a href="#Setting-Repositories" class="headerlink" title="Setting Repositories"></a>Setting Repositories</h3><p>WebappLoader 的 start() 方法中调用 setRepsitories 向 class loader 中添加 repositories。WEB-INF/classes 传给了 addRepository()，WEB-INF/lib 传给了 setJarPath()。</p>
<h3 id="Setting-the-Class-Path"><a href="#Setting-the-Class-Path" class="headerlink" title="Setting the Class Path"></a>Setting the Class Path</h3><p>这个 task 通过在 start() 方法中调用 setClassPath() 实现。</p>
<h3 id="Setting-a-New-Thread-for-Auto-Reload"><a href="#Setting-a-New-Thread-for-Auto-Reload" class="headerlink" title="Setting a New Thread for Auto-Reload"></a>Setting a New Thread for Auto-Reload</h3><p>当 WEB-INF/classes 或者 WEB-INF/lib 下的文件被修改了，修改的类需要在 Tomcat 不重启的情况下自动刷新。为了达到这个效果，WebappLoader 新启了一个线程，周期性的检查文件的时间戳，默认检查周期为 15s, 用户可以通过 get/setCheckinterval() 设置这个值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (debug &gt;= <span class="number">1</span>)</span><br><span class="line">        log(<span class="string">&quot;BACKGROUND THREAD Starting&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Loop until the termination semaphore is set</span></span><br><span class="line">    <span class="keyword">while</span> (!threadDone) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Wait for our check interval</span></span><br><span class="line">        threadSleep();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!started)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Perform our modification check</span></span><br><span class="line">            <span class="keyword">if</span> (!classLoader.modified())</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log(sm.getString(<span class="string">&quot;webappLoader.failModifiedCheck&quot;</span>), e);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle a need for reloading</span></span><br><span class="line">        notifyContext();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (debug &gt;= <span class="number">1</span>)</span><br><span class="line">        log(<span class="string">&quot;BACKGROUND THREAD Stopping&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS: Tomcat5 中将这部分 task 移到 StandardContext 中的 backgroundProcess() 中去了</p>
<p>run() 中的核心方法是通过 while 循环定时检测 modified 的值，流程如下</p>
<ul>
<li>Sleep 一定时间</li>
<li>调用 modified() 查看 flag, 如果 false，continue</li>
<li>返回 true，调用 notifyContext() 方法，通过 Context 做 reload</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    WebappContextNotifier notifier = <span class="keyword">new</span> WebappContextNotifier();</span><br><span class="line">    (<span class="keyword">new</span> Thread(notifier)).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>notifyContext 并没有直接调用 Context 的 relaod 方法，而是通过启动内部类 WebappContextNotifier 线程做的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">WebappContextNotifier</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ((Context) container).reload();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="The-WebappClassLoader-Class"><a href="#The-WebappClassLoader-Class" class="headerlink" title="The WebappClassLoader Class"></a>The WebappClassLoader Class</h2><p>WebappClassLoader 继承自 URLClassLoader，在实现时兼顾了性能和安全。性能方面，它会将之前还在的类 cache 一下，当需要加载类时先从 cache 中寻在，找不到在通过加载器加载。之前加载失败的也有对应的 cache.</p>
<p>安全方面，WebappClassLoader 有一个黑名单，阻止加载一些类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] triggers = &#123;</span><br><span class="line">    <span class="string">&quot;javax.servlet.Servlet&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] packageTriggers = &#123;</span><br><span class="line">    <span class="string">&quot;javax&quot;</span>,                                     <span class="comment">// Java extensions</span></span><br><span class="line">    <span class="string">&quot;org.xml.sax&quot;</span>,                               <span class="comment">// SAX 1 &amp; 2</span></span><br><span class="line">    <span class="string">&quot;org.w3c.dom&quot;</span>,                               <span class="comment">// DOM 1 &amp; 2</span></span><br><span class="line">    <span class="string">&quot;org.apache.xerces&quot;</span>,                         <span class="comment">// Xerces 1 &amp; 2</span></span><br><span class="line">    <span class="string">&quot;org.apache.xalan&quot;</span>                           <span class="comment">// Xalan</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h3><p>为了性能考虑，加载的类会被 cache 住，后面 class 加载时，会先从 cache 中拿。Caching 是通过 WebappClassLoader 中的 local cache 实现的，同时之前加载过的类通过 ClassLoader 中的 Vector 管理避免类被垃圾回收掉。</p>
<p>能被 WebappClassLoader 加载的类统称为 resource，通过 org.apache.catalina.loader.ResourceEntry 表示。ResourceEntry 会持有类的 byte 数据，最后修改日期，Manifest 等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceEntry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> lastModified = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] binaryContent = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> Class loadedClass = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> URL source = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> URL codeBase = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> Manifest manifest = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> Certificate[] certificates = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>cached resources 存在名为 resourceEntries 的 HashMap 中，以 resource name 作为 key. 没有找到的 resource 存在名为 notFoundResources 的 HashMap 中。</p>
<h3 id="Loading-Classes"><a href="#Loading-Classes" class="headerlink" title="Loading Classes"></a>Loading Classes</h3><p>下面是 WebappClassLoader 加载 class 的规则</p>
<ul>
<li>All previously loaded classes are cached, so first check the local cache.</li>
<li>If not found in the local cache, check in the cache, i.e. by calling the findLoadedClass of the java.lang.ClassLoader class. </li>
<li>If not found in both caches, use the system’s class loader to prevent the web application from overriding J2EE class.</li>
<li>If SecurityManager is used, check if the class is allowed to be loaded. If the class is not allowed, throw a ClassNotFoundException.</li>
<li>If the delegate flag is on or if the class to be loaded belongs to the package name in the package trigger, use the parent class loader to load the class. If the parent class loader is null, use the system class loader.</li>
<li>Load the class from the current repositories.</li>
<li>If the class is not found in the current repositories, and if the delegate flag is not on, use the parent class loader. If the parent class loader is null, use the system class loader.</li>
<li>If the class is still not found, throw a ClassNotFoundException.</li>
</ul>
<h2 id="The-Application"><a href="#The-Application" class="headerlink" title="The Application"></a>The Application</h2><p>本章使用现成的 StandardContext 管理上下文，12 章会具体介绍，目前你只需要知道 StandardContext 会结合 listener 处理 event 即可。</p>
<p>本章自定义的 listener</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleContextConfig</span> <span class="keyword">implements</span> <span class="title">LifecycleListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Lifecycle.START_EVENT.equals(event.getType())) &#123;</span><br><span class="line">            Context context = (Context) event.getLifecycle();</span><br><span class="line">            context.setConfigured(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们创建 StandardContext 和 SimpleContextConfig 的实例并将 SimpleContextConfig 注册到 StandardContext 中。</p>
<p>同时我们复用前面章节的 SimplePipeline, SimpleWrapper 和 SimpleWrapperValve.</p>
<p>由于使用了 StandardContext 我们必须将测试 servlet 放到 WEB-INF/classes 下，这个例子中，我们创建一个新的目录 myApp 并创建对应的目录，通过 <code>System.setProperty(&quot;catalina.base&quot;, System.getProperty(&quot;user.dir&quot;));</code> 指定 myApp 文件夹。</p>
<p>简单过一下 Bootstrap 的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Bootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//invoke: http://localhost:8080/Modern or  http://localhost:8080/Primitive</span></span><br><span class="line"></span><br><span class="line">        System.setProperty(<span class="string">&quot;catalina.base&quot;</span>, System.getProperty(<span class="string">&quot;user.dir&quot;</span>));</span><br><span class="line">        Connector connector = <span class="keyword">new</span> HttpConnector();</span><br><span class="line">        Wrapper wrapper1 = <span class="keyword">new</span> SimpleWrapper();</span><br><span class="line">        <span class="comment">// ... 设置 wrapper</span></span><br><span class="line"></span><br><span class="line">        Context context = <span class="keyword">new</span> StandardContext();</span><br><span class="line">        <span class="comment">// StandardContext&#x27;s start method adds a default mapper</span></span><br><span class="line">        context.setPath(<span class="string">&quot;/myApp&quot;</span>);</span><br><span class="line">        context.setDocBase(<span class="string">&quot;myApp&quot;</span>);</span><br><span class="line"></span><br><span class="line">        context.addChild(wrapper1);</span><br><span class="line">        context.addChild(wrapper2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// context.addServletMapping()...</span></span><br><span class="line">        <span class="comment">// add ContextConfig. This listener is important because it configures</span></span><br><span class="line">        <span class="comment">// StandardContext (sets configured to true), otherwise StandardContext</span></span><br><span class="line">        <span class="comment">// won&#x27;t start</span></span><br><span class="line">        LifecycleListener listener = <span class="keyword">new</span> SimpleContextConfig();</span><br><span class="line">        ((Lifecycle) context).addLifecycleListener(listener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// here is our loader</span></span><br><span class="line">        Loader loader = <span class="keyword">new</span> WebappLoader();</span><br><span class="line">        <span class="comment">// associate the loader with the Context</span></span><br><span class="line">        context.setLoader(loader);</span><br><span class="line"></span><br><span class="line">        connector.setContainer(context);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connector.initialize();</span><br><span class="line">            ((Lifecycle) connector).start();</span><br><span class="line">            ((Lifecycle) context).start();</span><br><span class="line">            <span class="comment">// now we want to know some details about WebappLoader</span></span><br><span class="line">            WebappClassLoader classLoader = (WebappClassLoader) loader.getClassLoader();</span><br><span class="line">            System.out.println(<span class="string">&quot;Resources&#x27; docBase: &quot;</span> + ((ProxyDirContext) classLoader.getResources()).getDocBase());</span><br><span class="line">            String[] repositories = classLoader.findRepositories();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; repositories.length; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;  repository: &quot;</span> + repositories[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// make the application wait until we press a key.</span></span><br><span class="line">            System.in.read();</span><br><span class="line">            ((Lifecycle) context).stop();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整理一下思路：这张讲的内容调用点在 SimpleWrapper 的 loadServlet() 方法中。当访问页面时，最终到这个方法中，从 context 中拿到 class loader 并通过 classLoader.loadClass(cls) 加载类。这个 loader 和 classLoader 就是本章中的 WebappLoader 和 WebappClassLoader.</p>
<p>看完了感觉和 JVM 那边看到的有出入，很多自定义的 loader 都没讲到，热加载也没讲到，往后看看再说。</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex09 Session 管理</title>
    <url>/hexo/2021/09/10/HTW-ex09/</url>
    <content><![CDATA[<blockquote>
<p><strong>Chapter 9</strong> discusses the manager, the component that manages sessions in session management. It explains the various types of managers and how a manager can persist session objects into a store. At the end of the chapter, you will learn how to build an application that uses a StandardManager instance to run a servlet that uses session objects to store values. </p>
</blockquote>
<p>PS: 本节实验失败了，页面显示不出来，追踪了一下，servlet 可以正常加载，但是执行 init() 方法的时候报错了。感觉可以先用之前的 javaweb 项目把这个页面显示出来，在看看问题。有可能是依赖有问题。</p>
<p>主要知识点</p>
<ul>
<li>Session 相关的接口关系</li>
<li>通过 Manager 管理 session</li>
<li>实现了 Lifecycle 接口</li>
<li>提供 swap out 功能，节省内存资源 - 长时间不用的 session 暂存</li>
<li>持久化</li>
</ul>
<p>没什么成就感，暂时先记怎么多把</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex10 安全</title>
    <url>/hexo/2021/09/13/HTW-ex10/</url>
    <content><![CDATA[<blockquote>
<p><strong>Chapter 10</strong> covers web application security constraints for restricting access to certain contents. You will learn entities related to security such as principals, roles, login config, authenticators, etc. You will also write two applications that install an authenticator valve in the StandardContext object and uses basic authentication to authenticate users.</p>
</blockquote>
<p>主体和之前的一样，新加的内容是安全相关的东西，更具体来说，是授权相关。可以根据配置的账户密码信息限制用户访问。这个功能现在应该挺鸡肋了，因为一般的 App 都是将这部分功能坐在内部的 login service 中的，哪里会通过这种方式作授权啊，除非买现成的但是不提供授权服务，这也太蠢了吧。。。</p>
<p>问题：Bootstrap2 中貌似做了一次授权之后，会将信息 cache 起来，看看它是存在哪里的</p>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>有些网站服务需要有访问限制，Tomcat 可以通过配置文件达到这种效果，访问页面时只有输入正确的用户名密码之后才能访问。</p>
<p>Tomcat 有一个 authenticator valve 可以用来做授权，他在系统启动后加入 context 的 pipeline 中，他会在 wrapper valve 之前被调用，做用户验证。</p>
<h2 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h2><p>Tomcat 中 realm 模块可以做用户验证。一个 context 只能有一个 realm 服务，我们可以通过 context 的 setRealm() 方法设置它。</p>
<p>Realm 中用户信息存放的地址由配置决定，默认情况下，Tomcat 会拿 conf/tomcat-users.xml 中的用户信息做比对。当然我们也可以配置其他数据源，比如 DB。</p>
<p>Catalina 中使用 org.apache.catalina.Realm 这个接口表示这个概念，核心就那四个授权方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Realm</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Principal <span class="title">authenticate</span><span class="params">(String username, String credentials)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Principal <span class="title">authenticate</span><span class="params">(String username, <span class="keyword">byte</span>[] credentials)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Principal <span class="title">authenticate</span><span class="params">(String username, String digest,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  String nonce, String nc, String cnonce,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  String qop, String realm,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  String md5a2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Principal <span class="title">authenticate</span><span class="params">(X509Certificate certs[])</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时这个接口还包含 <code>public boolean hasRole(Principal principal, String role);</code> 方法。这个接口有一个抽象实现 org.apache.catalina.realm.RealmBase 还有几个具体实现都在同一个包下：JDBCRealm, JNDIRealm, MemoryRealm, and UserDatabaseRealm。默认使用的是 MemoryRealm，当 server 启动时，他会读取 tomcat-users.xml。</p>
<h2 id="GenericPrincipal"><a href="#GenericPrincipal" class="headerlink" title="GenericPrincipal"></a>GenericPrincipal</h2><p>java.security.Principal 代表 Principal 这个概念，具体实现为 org.apache.catalina.realm.GenericPrincipal。GenericPrincipal 必须关联一个 realm, 构造函数如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GenericPrincipal</span><span class="params">(Realm realm, String name, String password)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(realm, name, password, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GenericPrincipal</span><span class="params">(Realm realm, String name, String password, List roles)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.realm = realm;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.password = password;</span><br><span class="line">    <span class="keyword">if</span> (roles != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.roles = <span class="keyword">new</span> String[roles.size()];</span><br><span class="line">        <span class="keyword">this</span>.roles = (String[]) roles.toArray(<span class="keyword">this</span>.roles);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.roles.length &gt; <span class="number">0</span>)</span><br><span class="line">            Arrays.sort(<span class="keyword">this</span>.roles);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Principal 中也包含 <code>hasRole()</code> 方法，你可以传入 <code>*</code> 作为参数检测是否包含任意 role 的意思。</p>
<h2 id="LoginConfig"><a href="#LoginConfig" class="headerlink" title="LoginConfig"></a>LoginConfig</h2><p>login config 包含 realm name 由 org.apache.catalina.deploy.LoginConfig 这个 final class 表示. LoginConfig 包含 realm 和 authentication 的信息，auth name 必须是 BASIC, DIGEST, FORM, or CLIENT-CERT。</p>
<p>当服务器启动的时候，Tomcat 会读取 web.xml 信息，如果 xml 包含 login-config 元素，tomcat 就会创建一个 LoginConfig 对象并为他设置属性。authentication valve 会调用 LoginConfig 的 getRealmName() 方法并传送给浏览器的登陆界面。</p>
<h2 id="Authenticator"><a href="#Authenticator" class="headerlink" title="Authenticator"></a>Authenticator</h2><p>org.apache.catalina.Authenticator 是 authenticator 的表现类，他没有任何方法，只是一个壳子。有一个抽象的实现类 org.apache.catalina.authenticator.AuthenticatorBase，它还集策划给你了 ValveBase 表明它是一个 valve。具体的实现类由 BasicAuthenticator, FormAuthenticator, DigestAuthentication 和 SSLAuthenticator。如果没有具体指明 authentication 类型，则会默认使用 NonLoginAuthenticator。它表示只检测安全限制而不需要授权。</p>
<img  src=http://www.plantuml.com/plantuml/svg/ZOx12i8m44Jl-OhyGFe5lIZYgUWXu4KyBEcQBiGD9D5JFrvff3IjGcx3p9lP9KuOxc1GNi2zK1W7CMQzXuY2vdptJ0Do8WF91o4cHBPZqopeMKbr7QZlaM_hNZwWYQr3JPRF_BKARbfRpBMZKcLfbMtRXPCV_N5YO-MvZo9JVlw7rBghueu-FAh00rcCgGezUUwy9IxYDm00>

<h2 id="Installing-the-Authenticator-Valve"><a href="#Installing-the-Authenticator-Valve" class="headerlink" title="Installing the Authenticator Valve"></a>Installing the Authenticator Valve</h2><p>login-config element 在 deployment 文件中只能出现一次，其中包含有 auth-method 元素。这意味着 context 中只能有一个 LoginConfig 实例并且只能有一个 authentication class 实现。</p>
<table>
<thead>
<tr>
<th align="left">Type</th>
<th align="left">Impl</th>
</tr>
</thead>
<tbody><tr>
<td align="left">BASIC</td>
<td align="left">BasicAuthenticator</td>
</tr>
<tr>
<td align="left">FORM</td>
<td align="left">FormAuthenticator</td>
</tr>
<tr>
<td align="left">DIGEST</td>
<td align="left">DigestAuthenticator</td>
</tr>
<tr>
<td align="left">CLIENT-CERT</td>
<td align="left">SSLAuthenticator</td>
</tr>
</tbody></table>
<p>如果 auth-method 没有设置，就表示使用的是 NonLoginAuthenticator。org.apache.catalina.startup.ContextConfig 是 Context 的配置类，包含 authentication 信息。下面的例子中，我们使用 SimpleContextConfig 动态加载 BasicAuthenticator 作为 StandardContext 的配置项。</p>
<h2 id="The-Applications"><a href="#The-Applications" class="headerlink" title="The Applications"></a>The Applications</h2><h3 id="Bootsrap1"><a href="#Bootsrap1" class="headerlink" title="Bootsrap1"></a>Bootsrap1</h3><p>第一个例子，没有使用配置文件，而是直接在 Bootstrap 类中做了设置。新建了一个 SimpleContextConfig，它是一个 Listener，添加到 context 的监听器列表中，当 context start 时，接受到 event 并配置 context</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bootstrap1 中代码如下</span></span><br><span class="line">LifecycleListener listener = <span class="keyword">new</span> SimpleContextConfig();</span><br><span class="line">((Lifecycle) context).addLifecycleListener(listener);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">((Lifecycle) context).start();</span><br></pre></td></tr></table></figure>

<p>实现如下,  context start 后，event 触发，在 listener 中拿到对应的 context，并进行 auth 相关的设置，内容包括</p>
<ul>
<li>设置 login config</li>
<li>设置 authenticator 到 context 的 pipeline</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleContextConfig</span> <span class="keyword">implements</span> <span class="title">LifecycleListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Lifecycle.START_EVENT.equals(event.getType())) &#123;</span><br><span class="line">            context = (Context) event.getLifecycle();</span><br><span class="line">            authenticatorConfig();</span><br><span class="line">            context.setConfigured(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">authenticatorConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Does this Context require an Authenticator?</span></span><br><span class="line">        SecurityConstraint constraints[] = context.findConstraints();</span><br><span class="line">        <span class="keyword">if</span> ((constraints == <span class="keyword">null</span>) || (constraints.length == <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        LoginConfig loginConfig = context.getLoginConfig();</span><br><span class="line">        <span class="keyword">if</span> (loginConfig == <span class="keyword">null</span>) &#123;</span><br><span class="line">            loginConfig = <span class="keyword">new</span> LoginConfig(<span class="string">&quot;NONE&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            context.setLoginConfig(loginConfig);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Has an authenticator been configured already?</span></span><br><span class="line">        Pipeline pipeline = ((StandardContext) context).getPipeline();</span><br><span class="line">        <span class="keyword">if</span> (pipeline != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Valve basic = pipeline.getBasic();</span><br><span class="line">            <span class="keyword">if</span> ((basic != <span class="keyword">null</span>) &amp;&amp; (basic <span class="keyword">instanceof</span> Authenticator))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            Valve valves[] = pipeline.getValves();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valves.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (valves[i] <span class="keyword">instanceof</span> Authenticator)</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// no Pipeline, cannot install authenticator valve</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Has a Realm been configured for us to authenticate against?</span></span><br><span class="line">        <span class="keyword">if</span> (context.getRealm() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Identify the class name of the Valve we should configure</span></span><br><span class="line">        String authenticatorName = <span class="string">&quot;org.apache.catalina.authenticator.BasicAuthenticator&quot;</span>;</span><br><span class="line">        <span class="comment">// Instantiate and install an Authenticator of the requested class</span></span><br><span class="line">        Valve authenticator = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class authenticatorClass = Class.forName(authenticatorName);</span><br><span class="line">            authenticator = (Valve) authenticatorClass.newInstance();</span><br><span class="line">            ((StandardContext) context).addValve(authenticator);</span><br><span class="line">            System.out.println(<span class="string">&quot;Added authenticator valve to Context&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着在 Bootstrap1 中设置 security constraint 相关的配置. 这里指定了 constraint 中只有 role 是 manager 的可以访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add constraint</span></span><br><span class="line">SecurityCollection securityCollection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">securityCollection.addPattern(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">securityCollection.addMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line"></span><br><span class="line">SecurityConstraint constraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">constraint.addCollection(securityCollection);</span><br><span class="line">constraint.addAuthRole(<span class="string">&quot;manager&quot;</span>);</span><br><span class="line">LoginConfig loginConfig = <span class="keyword">new</span> LoginConfig();</span><br><span class="line">loginConfig.setRealmName(<span class="string">&quot;Simple Realm&quot;</span>);</span><br><span class="line"><span class="comment">// add realm</span></span><br><span class="line">Realm realm = <span class="keyword">new</span> SimpleRealm();</span><br><span class="line"></span><br><span class="line">context.setRealm(realm);</span><br><span class="line">context.addConstraint(constraint);</span><br><span class="line">context.setLoginConfig(loginConfig);</span><br></pre></td></tr></table></figure>

<p>SimpleRealm 实现如下, 它其实就是模拟了一个内存中的 DB，当开启 security constrain 后，通过 GET 访问页面就会跳出验证弹窗。输入账户信息，就会调用到下面 authenticate() 方法中做判断了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleRealm</span> <span class="keyword">implements</span> <span class="title">Realm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        createUserDatabase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Container container;</span><br><span class="line">    <span class="keyword">private</span> ArrayList users = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Container <span class="title">getContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContainer</span><span class="params">(Container container)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A simple Realm implementation&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPropertyChangeListener</span><span class="params">(PropertyChangeListener listener)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Principal <span class="title">authenticate</span><span class="params">(String username, String credentials)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SimpleRealm.authenticate()&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span> || credentials == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        User user = getUser(username, credentials);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GenericPrincipal(<span class="keyword">this</span>, user.username, user.password, user.getRoles());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Principal <span class="title">authenticate</span><span class="params">(String username, <span class="keyword">byte</span>[] credentials)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Principal <span class="title">authenticate</span><span class="params">(String username, String digest, String nonce,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  String nc, String cnonce, String qop, String realm, String md5a2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Principal <span class="title">authenticate</span><span class="params">(X509Certificate certs[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(Principal principal, String role)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((principal == <span class="keyword">null</span>) || (role == <span class="keyword">null</span>) ||</span><br><span class="line">                !(principal <span class="keyword">instanceof</span> GenericPrincipal))</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">false</span>);</span><br><span class="line">        GenericPrincipal gp = (GenericPrincipal) principal;</span><br><span class="line">        <span class="keyword">if</span> (!(gp.getRealm() == <span class="keyword">this</span>))</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">boolean</span> result = gp.hasRole(role);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removePropertyChangeListener</span><span class="params">(PropertyChangeListener listener)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> User <span class="title">getUser</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        Iterator iterator = users.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            User user = (User) iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (user.username.equals(username) &amp;&amp; user.password.equals(password))</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createUserDatabase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">&quot;ken&quot;</span>, <span class="string">&quot;blackcomb&quot;</span>);</span><br><span class="line">        user1.addRole(<span class="string">&quot;manager&quot;</span>);</span><br><span class="line">        user1.addRole(<span class="string">&quot;programmer&quot;</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="string">&quot;cindy&quot;</span>, <span class="string">&quot;bamboo&quot;</span>);</span><br><span class="line">        user2.addRole(<span class="string">&quot;programmer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        users.add(user1);</span><br><span class="line">        users.add(user2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.username = username;</span><br><span class="line">            <span class="keyword">this</span>.password = password;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String username;</span><br><span class="line">        <span class="keyword">public</span> ArrayList roles = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">public</span> String password;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRole</span><span class="params">(String role)</span> </span>&#123;</span><br><span class="line">            roles.add(role);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ArrayList <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> roles;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动服务器，当我们用 role 是 manager 的 user 去访问，页面显示正常，当我们用 programer 去访问，页面不显示</p>
<p>流程大致描述如下</p>
<ol>
<li>启动 server 加载配置</li>
<li>访问页面</li>
<li>context 调用 pipeline</li>
<li>pipeline 调用 valve</li>
<li>调用 BasicAuthenticator 的 auth 方法验证 - 在 listener 中指定</li>
</ol>
<h2 id="Bootstrap2"><a href="#Bootstrap2" class="headerlink" title="Bootstrap2"></a>Bootstrap2</h2><p>第二个例子和第一个例子很想，唯一区别就是将 Realm 的配置指定到了 tomcat-users.xml 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add realm</span></span><br><span class="line">Realm realm = <span class="keyword">new</span> SimpleUserDatabaseRealm();</span><br><span class="line">((SimpleUserDatabaseRealm) realm).createDatabase(<span class="string">&quot;conf/tomcat-users.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>SimpleUserDatabaseRealm 实现如下, 里面一个比较有意思的点是 MemoryUserDatabase 这个类，它会默认加载 conf/tomcat-users.xml 的内容，解析出来，格式是 hard code 的，挺有意思。逻辑和之前的基本一样，没什么新鲜的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleUserDatabaseRealm</span> <span class="keyword">extends</span> <span class="title">RealmBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> UserDatabase database = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String name = <span class="string">&quot;SimpleUserDatabaseRealm&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String resourceName = <span class="string">&quot;UserDatabase&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Principal <span class="title">authenticate</span><span class="params">(String username, String credentials)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Does a user with this username exist?</span></span><br><span class="line">        User user = database.findUser(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do the credentials specified by the user match?</span></span><br><span class="line">        <span class="comment">// FIXME - Update all realms to support encoded passwords</span></span><br><span class="line">        <span class="keyword">boolean</span> validated = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (hasMessageDigest()) &#123;</span><br><span class="line">            <span class="comment">// Hex hashes should be compared case-insensitive</span></span><br><span class="line">            validated = (digest(credentials).equalsIgnoreCase(user.getPassword()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            validated = (digest(credentials).equals(user.getPassword()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!validated) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ArrayList combined = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        Iterator roles = user.getRoles();</span><br><span class="line">        <span class="keyword">while</span> (roles.hasNext()) &#123;</span><br><span class="line">            Role role = (Role) roles.next();</span><br><span class="line">            String rolename = role.getRolename();</span><br><span class="line">            <span class="keyword">if</span> (!combined.contains(rolename)) &#123;</span><br><span class="line">                combined.add(rolename);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator groups = user.getGroups();</span><br><span class="line">        <span class="keyword">while</span> (groups.hasNext()) &#123;</span><br><span class="line">            Group group = (Group) groups.next();</span><br><span class="line">            roles = group.getRoles();</span><br><span class="line">            <span class="keyword">while</span> (roles.hasNext()) &#123;</span><br><span class="line">                Role role = (Role) roles.next();</span><br><span class="line">                String rolename = role.getRolename();</span><br><span class="line">                <span class="keyword">if</span> (!combined.contains(rolename)) &#123;</span><br><span class="line">                    combined.add(rolename);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> GenericPrincipal(<span class="keyword">this</span>, user.getUsername(),</span><br><span class="line">                user.getPassword(), combined));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------------------------------------------ Lifecycle Methods</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Prepare for active use of the public methods of this Component.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Principal <span class="title">getPrincipal</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getPassword</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDatabase</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        database = <span class="keyword">new</span> MemoryUserDatabase(name);</span><br><span class="line">        ((MemoryUserDatabase) database).setPathname(path);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            database.open();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)  &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex11 StandardWrapper</title>
    <url>/hexo/2021/09/14/HTW-ex11/</url>
    <content><![CDATA[<blockquote>
<p><strong>Chapter 11</strong> explains in detail the org.apache.catalina.core.StandardWrapper class that represents a servlet in a web application. In particular, this chapter explains how filters and a servlet’s service method are invoked. The application accompanying this chapter uses StandardWrapper instances to represents servlets.</p>
</blockquote>
<p>本章主要介绍 Tomcat 的默认 Wrapper 实现，已经相关的接口 SingleThreadModel</p>
<h2 id="Sequence-of-Methods-Invocation"><a href="#Sequence-of-Methods-Invocation" class="headerlink" title="Sequence of Methods Invocation"></a>Sequence of Methods Invocation</h2><p>当 connector 收到一个 HTTP request 之后，调用链如下</p>
<p><img src="ex11_method_invocation.png" alt="method invocation"></p>
<p>主要步骤：</p>
<ul>
<li>connector 创建 request/response 实例</li>
<li>connector 调用 StandardContext 的 invoke 方法</li>
<li>StandardContext 调用 StandardContextValve 的 invoke 方法</li>
<li>StandardContextValve 找到对应的 wrapper 并调用其 invoke 方法</li>
<li>wrapper 调用对应的 StandardWrapperValve 的 invoke 方法</li>
<li>StandardWrapperValve 调用 wrapper 的 allocate() 方法加载 servlet 实例</li>
<li>allocate 调用 load 方法加载 servlet</li>
<li>load 方法调用 servlet 的 init 方法</li>
<li>StandardWrapperValve 调用 servlet 的 service 方法</li>
</ul>
<h2 id="SingleThreadModel"><a href="#SingleThreadModel" class="headerlink" title="SingleThreadModel"></a>SingleThreadModel</h2><p>servlet 可以选择实现 javax.servlet.SingleThreadMode 接口，实现了该接口的 class 称为 SingleThreadModel (STM) servlet。</p>
<p>Servlet 2.4 specification 中关于这个借口的描述如下: </p>
<blockquote>
<p>If a servlet implements this interface, you are guaranteed that no two threads will execute concurrently in a servlet’s service method. The servlet container can guarantee this by synchronizing access to a single instance of the servlet,<br>or by maintaining a pool of servlet instances and dispatching each new request to a free servlet. This interface does not prevent synchronization problems that result from servlets accessing shared resources such as static class variables or classes outside the scope of the servlet.</p>
</blockquote>
<p>实现这个接口可以保证再一个时间点上，只有一个 servlet 被处理。实现方式可能是 synchronized 或者 pool，但这并不意味着保证线程安全。比如一些静态变量，或者共享资源的调用还是有可能会长生多线程问题的。</p>
<p>It is true that by implementing SingleThreadModel no two threads will execute a servlet’s service method at the same time. However, to enhance performance the servlet container can create multiple instances of an STM servlet. That means, the STM servlet’s service method can be executed concurrently in different instances. This will introduce synchronization problems if the servlet need to access static class variables or other resources outside the class.</p>
<h2 id="StandardWrapper"><a href="#StandardWrapper" class="headerlink" title="StandardWrapper"></a>StandardWrapper</h2><p>StandardWrapper 的职责是加载对应的 servlet 并创建实例，调用 servlet 的 service 方法并不在它的职责范围内，是由 StandardWrapperValve 完成的。具体的调用点是在 ApplicationFilterChain 类中。</p>
<p>加载在 <code>StandardWrapper#loadServlet</code> 中完成，过程的后段会置位 singleThreadModel flag</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Register our newly initialized instance</span></span><br><span class="line">singleThreadModel = servlet <span class="keyword">instanceof</span> SingleThreadModel;</span><br><span class="line"><span class="keyword">if</span> (singleThreadModel) &#123;</span><br><span class="line">    <span class="keyword">if</span> (instancePool == <span class="keyword">null</span>)</span><br><span class="line">        instancePool = <span class="keyword">new</span> Stack();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>StandardWrapper#allocate</code> 实现如下, 主要逻辑如下</p>
<ol>
<li>加载目标 servlet</li>
<li>置位 singleThreadModel flag</li>
<li>根据 flag 选择对应的维护 servlet 的形式，单例模式/Pool</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Servlet <span class="title">allocate</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (debug &gt;= <span class="number">1</span>)</span><br><span class="line">        log(<span class="string">&quot;Allocating an instance&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we are currently unloading this servlet, throw an exception</span></span><br><span class="line">    <span class="keyword">if</span> (unloading)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServletException</span><br><span class="line">            (sm.getString(<span class="string">&quot;standardWrapper.unloading&quot;</span>, getName()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If not SingleThreadedModel, return the same instance every time</span></span><br><span class="line">    <span class="keyword">if</span> (!singleThreadModel) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load and initialize our instance if necessary</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        instance = loadServlet();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> e;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ServletException</span><br><span class="line">                            (sm.getString(<span class="string">&quot;standardWrapper.allocate&quot;</span>), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!singleThreadModel) &#123;</span><br><span class="line">            <span class="keyword">if</span> (debug &gt;= <span class="number">2</span>)</span><br><span class="line">                log(<span class="string">&quot;  Returning non-STM instance&quot;</span>);</span><br><span class="line">            countAllocated++;</span><br><span class="line">            <span class="keyword">return</span> (instance);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (instancePool) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (countAllocated &gt;= nInstances) &#123;</span><br><span class="line">            <span class="comment">// Allocate a new instance if possible, or else wait</span></span><br><span class="line">            <span class="keyword">if</span> (nInstances &lt; maxInstances) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    instancePool.push(loadServlet());</span><br><span class="line">                    nInstances++;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ServletException</span><br><span class="line">                        (sm.getString(<span class="string">&quot;standardWrapper.allocate&quot;</span>), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    instancePool.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (debug &gt;= <span class="number">2</span>)</span><br><span class="line">            log(<span class="string">&quot;  Returning allocated STM instance&quot;</span>);</span><br><span class="line">        countAllocated++;</span><br><span class="line">        <span class="keyword">return</span> (Servlet) instancePool.pop();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="StandardWrapperValve"><a href="#StandardWrapperValve" class="headerlink" title="StandardWrapperValve"></a>StandardWrapperValve</h2><p>StandardWrapperValve 是 StandardWrapper 的默认的 valve 实现，这个设置在 StandardWrapper 的构造函数中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StandardWrapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    pipeline.setBasic(<span class="keyword">new</span> StandardWrapperValve());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要干两件事</p>
<ul>
<li>执行 servlet 相关的所有 filters</li>
<li>调用 sender 的 service 方法</li>
</ul>
<p>在这个 valve 的 invoke 中具体做了如下事情</p>
<ul>
<li>调用 StandardWrapper 的 allocate 方法，拿到 servlet 的实例</li>
<li>调用 createFilterChain 创建 filter chain</li>
<li>调用 chain 的 doFilter 方法，过程中会调用 servlet 的 service 方法</li>
<li>释放 filter chain</li>
<li>调用 wrapper 的 deallocate 方法</li>
<li>如果 servlet 永远不可用了，调用 wrapper 的 unload 方法</li>
</ul>
<h2 id="FilterDef"><a href="#FilterDef" class="headerlink" title="FilterDef"></a>FilterDef</h2><p>org.apache.catalina.deploy.FilterDef 表示配置文件中的 filter 定义，他的每一个 property 都代表文件中该元素的一个可配置项。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDef</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String description = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">    <span class="keyword">private</span> String displayName = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">    <span class="keyword">private</span> String filterClass = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ApplicationFilterConfig"><a href="#ApplicationFilterConfig" class="headerlink" title="ApplicationFilterConfig"></a>ApplicationFilterConfig</h2><p>org.apache.catalina.core.ApplicationFilterConfig 实现了 javax.servlet.FilterConfig 接口，管理 web application 启动时创建的  filter 实例。构造函数如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApplicationFilterConfig</span><span class="params">(Context context, FilterDef filterDef)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ClassCastException, ClassNotFoundException, IllegalAccessException, InstantiationException, ServletException </span>&#123;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>context 代表 web application, FilterDef 代表 filter 的定义。他有一个 getFilter() 方法可以返回 javax.servlet.Filter 对象实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Filter <span class="title">getFilter</span><span class="params">()</span> <span class="keyword">throws</span> ClassCastException, ClassNotFoundException,</span></span><br><span class="line"><span class="function">    IllegalAccessException, InstantiationException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the existing filter instance, if any</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.filter != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.filter);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Identify the class loader we will be using</span></span><br><span class="line">    String filterClass = filterDef.getFilterClass();</span><br><span class="line">    ClassLoader classLoader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (filterClass.startsWith(<span class="string">&quot;org.apache.catalina.&quot;</span>))</span><br><span class="line">        classLoader = <span class="keyword">this</span>.getClass().getClassLoader();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        classLoader = context.getLoader().getClassLoader();</span><br><span class="line"></span><br><span class="line">    ClassLoader oldCtxClassLoader =</span><br><span class="line">        Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Instantiate a new instance of this filter and return it</span></span><br><span class="line">    Class clazz = classLoader.loadClass(filterClass);</span><br><span class="line">    <span class="keyword">this</span>.filter = (Filter) clazz.newInstance();</span><br><span class="line">    filter.init(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.filter);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ApplicationFilterChain"><a href="#ApplicationFilterChain" class="headerlink" title="ApplicationFilterChain"></a>ApplicationFilterChain</h2><p>org.apache.catalina.core.ApplicationFilterChain class 实现了 javax.servlet.FilterChain 接口，StandardWrapperValve 创建这个 chain 的实例并调用 doFilter 方法，doFilter 签名如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException</span>;</span><br></pre></td></tr></table></figure>

<p>原理和 Valve 一致也用了 责任链 模式，下面是一个实现的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, </span></span></span><br><span class="line"><span class="function"><span class="params">    FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123; </span><br><span class="line">    <span class="comment">// do something here </span></span><br><span class="line">    ... </span><br><span class="line">    chain.doFilter(request, response); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="The-Application"><a href="#The-Application" class="headerlink" title="The Application"></a>The Application</h2><p>和之前的章节基本一致，最大的区别是在 Bootstrap 中使用了默认的 StandardWrapper 作为 wrapper 的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Wrapper wrapper1 = <span class="keyword">new</span> StandardWrapper();</span><br><span class="line">wrapper1.setName(<span class="string">&quot;Primitive&quot;</span>);</span><br><span class="line">wrapper1.setServletClass(<span class="string">&quot;PrimitiveServlet&quot;</span>);</span><br><span class="line">Wrapper wrapper2 = <span class="keyword">new</span> StandardWrapper();</span><br><span class="line">wrapper2.setName(<span class="string">&quot;Modern&quot;</span>);</span><br><span class="line">wrapper2.setServletClass(<span class="string">&quot;ModernServlet&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h2><p>setup 项目之后，访问 URL，抛异常</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StandardWrapperValve[Primitive]: Allocate exception for servlet Primitive</span><br><span class="line">javax.servlet.ServletException: Error allocating a servlet instance</span><br><span class="line">javax.servlet.ServletException: Error allocating a servlet instance</span><br><span class="line">    at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:654)</span><br><span class="line">    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:137)</span><br><span class="line">    at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:642)</span><br><span class="line">    at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:479)</span><br><span class="line">    at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:993)</span><br><span class="line">    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:185)</span><br><span class="line">    at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:642)</span><br><span class="line">    at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:479)</span><br><span class="line">    at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:993)</span><br><span class="line">    at org.apache.catalina.core.StandardContext.invoke(StandardContext.java:2377)</span><br><span class="line">    at org.apache.catalina.connector.http.HttpProcessor.process(HttpProcessor.java:972)</span><br><span class="line">    at org.apache.catalina.connector.http.HttpProcessor.run(HttpProcessor.java:1085)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>

<p>可以将 StandardWrapper 的 loadServlet() 中 SystemLogHandler 相关的方法注释掉即可。这个应该是 log 相关的操作，功能上没什么影响</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">    SystemLogHandler.startCapture();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// &#125; finally &#123;</span></span><br><span class="line">    String log = SystemLogHandler.stopCapture();</span><br><span class="line">    <span class="keyword">if</span> (log != <span class="keyword">null</span> &amp;&amp; log.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (getServletContext() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            getServletContext().log(log);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            out.println(log);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>最后 Chain 相关的章节，在返回 chain 实例的时候用的是 servlet 包下 filter 的实例，这部分配合的部分可以深入探究一下</p>
<p>Filter Vs Valve: 在 tomcat 中效果是一样的，但是 Filter 更像是一个行业标准，Jetty 中也可以用，Valve 更像是一个 Tomcat 实现，其他框架中是没有的。</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex12 StandardContext</title>
    <url>/hexo/2021/09/15/HTW-ex12/</url>
    <content><![CDATA[<blockquote>
<p><strong>Chapter 12</strong> covers the org.apache.catalina.core.StandardContext class that represents a web application. In particular this chapter discusses how a StandardContext object is configured, what happens in it for each incoming HTTP request, how it supports automatic reloading, and how Tomcat 5 shares a thread that executes periodic tasks in its associated components.</p>
</blockquote>
<p>本章沿用 11 章的代码，主要介绍一下内容</p>
<ul>
<li>StanadradContextMapper 和 ContextConfig</li>
<li>Http request 接收到之后的调用链</li>
<li>StandardContext 中的重要属性</li>
<li>Tomcat 5 中的 backgroundProcess</li>
</ul>
<h2 id="StandardContext-Configuration"><a href="#StandardContext-Configuration" class="headerlink" title="StandardContext Configuration"></a>StandardContext Configuration</h2><p>创建完 StandardContext 的实例后必须调用一下他的 start() 方法，这个过程中他会做以下事情</p>
<ul>
<li>置位 available flag</li>
<li>读取 CATALINA_HOME/conf 路径下的配置文件</li>
<li>在 listener 中进行 context 的配置</li>
</ul>
<p>细节在 15 章中再讲</p>
<h3 id="StandardContext-Class’s-Constructor"><a href="#StandardContext-Class’s-Constructor" class="headerlink" title="StandardContext Class’s Constructor"></a>StandardContext Class’s Constructor</h3><p>构造函数，设置默认的 valve</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StandardContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    pipeline.setBasic(<span class="keyword">new</span> StandardContextValve());</span><br><span class="line">    namingResources.setContainer(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Starting-StandardContext"><a href="#Starting-StandardContext" class="headerlink" title="Starting StandardContext"></a>Starting StandardContext</h3><p>只要做了 flag 置位和 listener 的处理，代码很清楚，主要做了如下事情</p>
<ul>
<li>fire BEFORE_START event</li>
<li>availability flag 置位</li>
<li>configured flag 置位</li>
<li>set resources</li>
<li>set manager</li>
<li>init character set manager</li>
<li>启动 context 相关联的其他 component</li>
<li>启动子 container</li>
<li>启动 pipeline</li>
<li>启动 manager</li>
<li>fire START event, listener(ContextConfig) 会进行一些配置，成功了之后 configured flag 置位</li>
<li>如果 configured 为 true，进行一些其他配置工作</li>
<li>fire AFTER_START event</li>
</ul>
<p>PS: Tomcat 5 中逻辑基本一致，此外还增加了 JMX 相关的代码</p>
<h2 id="StandardContextMapper"><a href="#StandardContextMapper" class="headerlink" title="StandardContextMapper"></a>StandardContextMapper</h2><p>StandardContext 的 invoke 方法调用时，会调用自己的 StandardContextValve 的 invoke 方法，它做的第一件事是拿到处理 request 匹配的 wrapper。</p>
<p>ContainerBase 类中有 addDefaultMapper() 方法，实现如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addDefaultMapper</span><span class="params">(String mapperClass)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do we need a default Mapper?</span></span><br><span class="line">    <span class="keyword">if</span> (mapperClass == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (mappers.size() &gt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Instantiate and add a default Mapper</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class clazz = Class.forName(mapperClass);</span><br><span class="line">        Mapper mapper = (Mapper) clazz.newInstance();</span><br><span class="line">        mapper.setProtocol(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">        addMapper(mapper);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log(sm.getString(<span class="string">&quot;containerBase.addDefaultMapper&quot;</span>, mapperClass),</span><br><span class="line">            e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StandardContext 中定义了对应的 mapperClass 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String mapperClass = <span class="string">&quot;org.apache.catalina.core.StandardContextMapper&quot;</span></span><br></pre></td></tr></table></figure>

<p>Mapper 中最核心的方法为 map 方法 <code>public Container map(Request request, boolean update)</code> 返回 request 对应的 wrapper。mapper 中会一次通过四种筛选条件过滤出目标 wrapper</p>
<ul>
<li>精确匹配</li>
<li>前缀匹配</li>
<li>后缀匹配</li>
<li>默认匹配</li>
</ul>
<p>如果还是没找到，就返回 null. Tomcat 5 中做了改进，直接从 request 中可以拿到对应的 wrapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Wrapper wrapper = request.getWrapper();</span><br></pre></td></tr></table></figure>

<h2 id="Support-for-Reloading"><a href="#Support-for-Reloading" class="headerlink" title="Support for Reloading"></a>Support for Reloading</h2><p>StandardContext 中又一个 reloadable 属性，当 web.xml 改变或者 WEB-INF/classes 文件夹下文件发生改变时，这个 flag 会置位</p>
<p>StandardContext 的 loader - WebappLoader 在执行 setContainer 时会启动一个线程，当上述目录的文件发生改变，loader 会重新加载 application</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set the Container with which this Logger has been associated.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> container The associated Container</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContainer</span><span class="params">(Container container)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Deregister from the old Container (if any)</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">this</span>.container != <span class="keyword">null</span>) &amp;&amp; (<span class="keyword">this</span>.container <span class="keyword">instanceof</span> Context))</span><br><span class="line">        ((Context) <span class="keyword">this</span>.container).removePropertyChangeListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process this property change</span></span><br><span class="line">    Container oldContainer = <span class="keyword">this</span>.container;</span><br><span class="line">    <span class="keyword">this</span>.container = container;</span><br><span class="line">    support.firePropertyChange(<span class="string">&quot;container&quot;</span>, oldContainer, <span class="keyword">this</span>.container);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register with the new Container (if any)</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">this</span>.container != <span class="keyword">null</span>) &amp;&amp; (<span class="keyword">this</span>.container <span class="keyword">instanceof</span> Context)) &#123;</span><br><span class="line">        setReloadable( ((Context) <span class="keyword">this</span>.container).getReloadable() );</span><br><span class="line">        ((Context) <span class="keyword">this</span>.container).addPropertyChangeListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后一段的 setReloadable() 方法实现如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Set the reloadable flag for this Loader.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> reloadable The new reloadable flag</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReloadable</span><span class="params">(<span class="keyword">boolean</span> reloadable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process this property change</span></span><br><span class="line"><span class="keyword">boolean</span> oldReloadable = <span class="keyword">this</span>.reloadable;</span><br><span class="line"><span class="keyword">this</span>.reloadable = reloadable;</span><br><span class="line">support.firePropertyChange(<span class="string">&quot;reloadable&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> Boolean(oldReloadable),</span><br><span class="line">                            <span class="keyword">new</span> Boolean(<span class="keyword">this</span>.reloadable));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start or stop our background thread if required</span></span><br><span class="line"><span class="keyword">if</span> (!started)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (!oldReloadable &amp;&amp; <span class="keyword">this</span>.reloadable)</span><br><span class="line">    threadStart();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oldReloadable &amp;&amp; !<span class="keyword">this</span>.reloadable)</span><br><span class="line">    threadStop();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>threadStart() 会启动一个线程，持续监测 WEB-INF 文件夹下文件的时间戳，threadStop() 则用来停止这个线程</p>
<p>PS：Tomcat 5 中这个监测过程使用专门的 backgroundProcess 来完成</p>
<h2 id="The-backgroundProcess-Method"><a href="#The-backgroundProcess-Method" class="headerlink" title="The backgroundProcess Method"></a>The backgroundProcess Method</h2><p>略</p>
<p>PS：这本书看完之后，为了巩固他，可以看看 Stackoverflow 上 Tomcat 相关的问题，找找灵感</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex13 Engine 和 Host</title>
    <url>/hexo/2021/09/16/HTW-ex13/</url>
    <content><![CDATA[<blockquote>
<p><strong>Chapter 13</strong> presents the two other containers: host and engine. You can also find the standard implementation of these two containers: org.apache.catalina.core.StandardHost and org.apache.catalina.core.StandardEngine.</p>
</blockquote>
<p>介绍了另外两个 Container 概念：engine 和 host。如果你的系统需要有一个以上的 context，那你就需要 host 了。如果只有一个 context，理论上可以不用 host。</p>
<h2 id="The-Host-Interface"><a href="#The-Host-Interface" class="headerlink" title="The Host Interface"></a>The Host Interface</h2><p>Container 的一个接口实现，最重要的方法为 map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Return the Context that would be used to process the specified</span></span><br><span class="line"><span class="comment">* host-relative request URI, if any; otherwise return &lt;code&gt;null&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> uri Request URI to be mapped</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Context <span class="title">map</span><span class="params">(String uri)</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="StandardHost"><a href="#StandardHost" class="headerlink" title="StandardHost"></a>StandardHost</h2><p>Host 的具体实现，也没什么新鲜的，还是 Container + pipeline + valve 三件套。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StandardHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    pipeline.setBasic(<span class="keyword">new</span> StandardHostValve());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在它的 start() 方法中还会添加两个新的 valve 进 pipeline, 一个是 ErrorReportValve 另一个是 ErrorDispatcherValve</p>
<p>StandardHost 的 map() 用来寻找匹配的 context。</p>
<p>PS: Tomcat 5 已经不用 Mapper 机制的，直接从 request 中找到正确的 context</p>
<h2 id="StandardHostMapper"><a href="#StandardHostMapper" class="headerlink" title="StandardHostMapper"></a>StandardHostMapper</h2><p>略</p>
<h2 id="StandardHostValve"><a href="#StandardHostValve" class="headerlink" title="StandardHostValve"></a>StandardHostValve</h2><p>里面有涉及 Session 的操作，挺有意思</p>
<h2 id="Why-You-Cannot-Live-without-a-Host"><a href="#Why-You-Cannot-Live-without-a-Host" class="headerlink" title="Why You Cannot Live without a Host"></a>Why You Cannot Live without a Host</h2><p>如果你的应用使用了默认的 ContextConfig 作为配置的对象，那你必须创建 Host。因为它的加载配置文件的方法 applicationConfig() 的实现如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URL url = servletContext.getResource(Constants.ApplicationWebXml);</span><br><span class="line"></span><br><span class="line">InputSource is = <span class="keyword">new</span> InputSource(url.toExternalForm());</span><br><span class="line">is.setByteStream(stream);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">webDigester.parse(is);</span><br></pre></td></tr></table></figure>

<p>servletContext 的实现如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> URL <span class="title">getResource</span><span class="params">(String path)</span> <span class="keyword">throws</span> MalformedURLException </span>&#123;</span><br><span class="line">    DirContext resources = context.getResources();</span><br><span class="line">    <span class="keyword">if</span> (resources != <span class="keyword">null</span>) &#123;</span><br><span class="line">        String fullPath = context.getName() + path;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// this is the problem. Host must not be null</span></span><br><span class="line">        String hostName = context.getParent().getName();</span><br><span class="line">        <span class="comment">//...</span></span><br></pre></td></tr></table></figure>

<p>最后一行表示，当使用 ContextConfig 时，你必须有一个 Host 类型的 parent</p>
<h2 id="Bootstrap1"><a href="#Bootstrap1" class="headerlink" title="Bootstrap1"></a>Bootstrap1</h2><p>使用 Host 的案例</p>
<h2 id="The-Engine-Interface"><a href="#The-Engine-Interface" class="headerlink" title="The Engine Interface"></a>The Engine Interface</h2><p>Engin 表示整个 Catalina servlet engine, 让你想要你的应用有多个 Host 的时候可以使用它。</p>
<p>对应的实现是 org.apache.catalina.core.StandardEngine。和其他 Container 实现相比，StandardEngine 要单薄的多。套路还是一样，结合 valve 使用。在 addChild() 时，如果不是 Host 类型的 container 会抛异常。 setParent() 时，由于它是顶层 Container，setParent() 会抛异常。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>按理来说，学到这里应该就可以设置一个网站，多个域名了，怎么实现？</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex14 Server &amp; Service</title>
    <url>/hexo/2021/09/17/HTW-ex14/</url>
    <content><![CDATA[<blockquote>
<p><strong>Chapter 14</strong> offers the server and service components. A server provides an elegant start and stop mechanism for the whole servlet container, a service serves as a holder for a container and one or more connectors. The application accompanying this chapter shows how to use a server and a service.</p>
</blockquote>
<p>前面的实验中，一个 container 只能和一个 connector 关联，并且启动和停止时通过多条指令完成的，Server + Service 可以帮助你更优雅的管理这些服务。</p>
<h2 id="Server-amp-Implementation"><a href="#Server-amp-Implementation" class="headerlink" title="Server &amp; Implementation"></a>Server &amp; Implementation</h2><p>Server 表示的是 Catalina servlet container 以及所属的所有子 component。它提供了一种优雅的方式管理所有服务的开启和停止。</p>
<p>官方定义如下：A Server element represents the entire Catalina servlet container. </p>
<p>对应的是现实 org.apache.catalina.core.StandardServer，同时还实现了 Lifecycle 接口(start/stop 方法)，以 initialize 方法为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Invoke a pre-startup initialization. This is used to allow connectors</span></span><br><span class="line"><span class="comment">* to bind to restricted ports under Unix operating environments.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialized)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException (</span><br><span class="line">            sm.getString(<span class="string">&quot;standardServer.initialize.initialized&quot;</span>));</span><br><span class="line">    initialized = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize our defined Services</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) &#123;</span><br><span class="line">        services[i].initialize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类似的还有 start, stop 方法，处理的逻辑都是类似的，先发送对应的 event，然后 for 循环调用 service 对应的方法</p>
<h3 id="The-await-Method"><a href="#The-await-Method" class="headerlink" title="The await Method"></a>The await Method</h3><p>这个方法用来监听停止信号，当条件达成时跳出循环，这个方法是用来代替原来例子中的 <code>System.in.read()</code> 方法的</p>
<h2 id="Service-amp-Implementation"><a href="#Service-amp-Implementation" class="headerlink" title="Service &amp; Implementation"></a>Service &amp; Implementation</h2><blockquote>
<p>A Service is a group of one or more Connectors that share a single Container to process their incoming requests.</p>
</blockquote>
<p>Service 可以持有多个 connector 和一个 container。多个 connector 可以用来匹配多种 protocol，比如 http 和 https。实现类为 org.apache.catalina.core.StandardService.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Connector connectors[] = <span class="keyword">new</span> Connector[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">private</span> Container container = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>service 在 setContainer 时会调用 container 的 start() 方法，并将它关联到 connector</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContainer</span><span class="params">(Container container)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Container oldContainer = <span class="keyword">this</span>.container;</span><br><span class="line">    <span class="keyword">if</span> ((oldContainer != <span class="keyword">null</span>) &amp;&amp; (oldContainer <span class="keyword">instanceof</span> Engine))</span><br><span class="line">        ((Engine) oldContainer).setService(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">this</span>.container = container;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">this</span>.container != <span class="keyword">null</span>) &amp;&amp; (<span class="keyword">this</span>.container <span class="keyword">instanceof</span> Engine))</span><br><span class="line">        ((Engine) <span class="keyword">this</span>.container).setService(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (started &amp;&amp; (<span class="keyword">this</span>.container != <span class="keyword">null</span>) &amp;&amp;</span><br><span class="line">        (<span class="keyword">this</span>.container <span class="keyword">instanceof</span> Lifecycle)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ((Lifecycle) <span class="keyword">this</span>.container).start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (connectors) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; connectors.length; i++)</span><br><span class="line">            connectors[i].setContainer(<span class="keyword">this</span>.container);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (started &amp;&amp; (oldContainer != <span class="keyword">null</span>) &amp;&amp;</span><br><span class="line">        (oldContainer <span class="keyword">instanceof</span> Lifecycle)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ((Lifecycle) oldContainer).stop();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Report this property change to interested listeners</span></span><br><span class="line">    support.firePropertyChange(<span class="string">&quot;container&quot;</span>, oldContainer, <span class="keyword">this</span>.container);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的，在 addConnector() 的时候，会将它和 container 关联起来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addConnector</span><span class="params">(Connector connector)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (connectors) &#123;</span><br><span class="line">        connector.setContainer(<span class="keyword">this</span>.container);</span><br><span class="line">        connector.setService(<span class="keyword">this</span>);</span><br><span class="line">        Connector results[] = <span class="keyword">new</span> Connector[connectors.length + <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(connectors, <span class="number">0</span>, results, <span class="number">0</span>, connectors.length);</span><br><span class="line">        results[connectors.length] = connector;</span><br><span class="line">        connectors = results;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (initialized) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connector.initialize();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">                e.printStackTrace(System.err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (started &amp;&amp; (connector <span class="keyword">instanceof</span> Lifecycle)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ((Lifecycle) connector).start();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Report this property change to interested listeners</span></span><br><span class="line">        support.firePropertyChange(<span class="string">&quot;connector&quot;</span>, <span class="keyword">null</span>, connector);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Service 也实现了 Lifecycle 接口，在 initialize() 和 start() 方法中会调用 connector 和 container 对应的方法。</p>
<h2 id="The-Application"><a href="#The-Application" class="headerlink" title="The Application"></a>The Application</h2><p>Bootstrap 实现和前面基本一致，最大的区别是在 Engine 声明之后，声明了这节介绍的 Server 和 Service 作为管理 Engine 的容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Service service = <span class="keyword">new</span> StandardService();</span><br><span class="line">service.setName(<span class="string">&quot;Stand-alone Service&quot;</span>);</span><br><span class="line">Server server = <span class="keyword">new</span> StandardServer();</span><br><span class="line">server.addService(service);</span><br><span class="line">service.addConnector(connector);</span><br></pre></td></tr></table></figure>

<p>并且使用 await 代替 <code>System.in.read();</code></p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex15 Digester</title>
    <url>/hexo/2021/09/17/HTW-ex15/</url>
    <content><![CDATA[<blockquote>
<p><strong>Chapter 15</strong> explains the configuration of a web application through Digester, an exciting open source project from the Apache Software Foundation. For those not initiated, this chapter presents a section that gently introduces the digester library<br>and how to use it to convert the nodes in an XML document to Java objects. It then explains the ContextConfig object that configures a StandardContext instance.</p>
</blockquote>
<p>PS: 创建完 project 后将 lib 添加到项目的 classpath 中, 不然会缺少依赖</p>
<p>本章先介绍一个 xml 解析工具包 Digester，它是给予 SAX 的解析工具，然后介绍了 Tomcat 中解析配置文件的类 StandardContext 和 ContextConfig。最后实验部分，可以看到主函数中我们并没有声明 StandardWrapper 但是通过解析 xml 程序还是能正常运行。</p>
<h2 id="Digester"><a href="#Digester" class="headerlink" title="Digester"></a>Digester</h2><p>Digester 是 Apache 的 Jakarta 项目的一个子项目，是对 SAX 的封装和抽象，使用起来挺简单的，下面是几个小例子.</p>
<p>比如我们有一下 xml 文件并切想要将它解析成 employee 对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">employee</span> <span class="attr">firstName</span>=<span class="string">&quot;Brian&quot;</span> <span class="attr">lastName</span>=<span class="string">&quot;May&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们可以使用如下代码, 先定义好 employee 的结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Creating Employee&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Setting firstName : &quot;</span> + firstName);</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Setting lastName : &quot;</span> + lastName);</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My name is &quot;</span> + firstName + <span class="string">&quot; &quot;</span> + lastName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后调用 Digester 方法解析，主要方法解释如下</p>
<ul>
<li>addObjectCreate: 添加一条创建对象的 rule，应该就是创建指定 element 的对象的意思</li>
<li>addSetProperties: 添加一条 set properties 的 rule，应该就是将属性 set 到对象里的意思</li>
<li>addCallMethod: 添加一条调用方法的 rule</li>
<li>parse: 使用定制好的 rule 解析文件流</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String path = System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + File.separator  + <span class="string">&quot;etc&quot;</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path, <span class="string">&quot;employee1.xml&quot;</span>);</span><br><span class="line">        Digester digester = <span class="keyword">new</span> Digester();</span><br><span class="line">        <span class="comment">// add rules</span></span><br><span class="line">        digester.addObjectCreate(<span class="string">&quot;employee&quot;</span>, <span class="string">&quot;com.jzheng.digestertest.Employee&quot;</span>);</span><br><span class="line">        digester.addSetProperties(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        digester.addCallMethod(<span class="string">&quot;employee&quot;</span>, <span class="string">&quot;printName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Employee employee = (Employee) digester.parse(file);</span><br><span class="line">            System.out.println(<span class="string">&quot;First name : &quot;</span> + employee.getFirstName());</span><br><span class="line">            System.out.println(<span class="string">&quot;Last name : &quot;</span> + employee.getLastName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creating Employee</span></span><br><span class="line"><span class="comment">// Setting firstName : Brian</span></span><br><span class="line"><span class="comment">// Setting lastName : May</span></span><br><span class="line"><span class="comment">// My name is Brian May</span></span><br><span class="line"><span class="comment">// First name : Brian</span></span><br><span class="line"><span class="comment">// Last name : May</span></span><br></pre></td></tr></table></figure>

<p>上面的例子是单个 node 的情况，如果 xml 是嵌套的话，可以如下处理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">employee</span> <span class="attr">firstName</span>=<span class="string">&quot;Freddie&quot;</span> <span class="attr">lastName</span>=<span class="string">&quot;Mercury&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">office</span> <span class="attr">description</span>=<span class="string">&quot;Headquarters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">address</span> <span class="attr">streetName</span>=<span class="string">&quot;Wellington Avenue&quot;</span> <span class="attr">streetNumber</span>=<span class="string">&quot;223&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">office</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">office</span> <span class="attr">description</span>=<span class="string">&quot;Client site&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">address</span> <span class="attr">streetName</span>=<span class="string">&quot;Downing Street&quot;</span> <span class="attr">streetNumber</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">office</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据实际情况，将对应的 Office 和 address 的定义写出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Office</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Office</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;..Creating Office&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;..Setting office description : &quot;</span> + description);</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;..Setting office address : &quot;</span> + address);</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String streetName;</span><br><span class="line">    <span class="keyword">private</span> String streetNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;....Creating Address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStreetName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> streetName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStreetName</span><span class="params">(String streetName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;....Setting streetName : &quot;</span> + streetName);</span><br><span class="line">        <span class="keyword">this</span>.streetName = streetName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStreetNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> streetNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStreetNumber</span><span class="params">(String streetNumber)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;....Setting streetNumber : &quot;</span> + streetNumber);</span><br><span class="line">        <span class="keyword">this</span>.streetNumber = streetNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;....&quot;</span> + streetNumber + <span class="string">&quot; &quot;</span> + streetName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主体部分唯一的区别就是在嵌套对象的表示和 addSetNext 方法。当元素是嵌套在内部的元素时，通过斜杠(/)表示自元素</p>
<ul>
<li>addSetNext(String pattern, String method): pattern 表示处理的对象类型，method 表示触发的方法。如 <code>digester.addSetNext(&quot;employee/office&quot;, &quot;addOffice&quot;);</code> 就表示当遇到 addOffice(Office office) 时，将两个对象关联起来</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String path = System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + File.separator  + <span class="string">&quot;etc&quot;</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path, <span class="string">&quot;employee2.xml&quot;</span>);</span><br><span class="line">        Digester digester = <span class="keyword">new</span> Digester();</span><br><span class="line">        <span class="comment">// add rules</span></span><br><span class="line">        digester.addObjectCreate(<span class="string">&quot;employee&quot;</span>, <span class="string">&quot;com.jzheng.digestertest.Employee&quot;</span>);</span><br><span class="line">        digester.addSetProperties(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        digester.addObjectCreate(<span class="string">&quot;employee/office&quot;</span>, <span class="string">&quot;com.jzheng.digestertest.Office&quot;</span>);</span><br><span class="line">        digester.addSetProperties(<span class="string">&quot;employee/office&quot;</span>);</span><br><span class="line">        digester.addSetNext(<span class="string">&quot;employee/office&quot;</span>, <span class="string">&quot;addOffice&quot;</span>);</span><br><span class="line">        digester.addObjectCreate(<span class="string">&quot;employee/office/address&quot;</span>, <span class="string">&quot;com.jzheng.digestertest.Address&quot;</span>);</span><br><span class="line">        digester.addSetProperties(<span class="string">&quot;employee/office/address&quot;</span>);</span><br><span class="line">        digester.addSetNext(<span class="string">&quot;employee/office/address&quot;</span>, <span class="string">&quot;setAddress&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Employee employee = (Employee) digester.parse(file);</span><br><span class="line">            ArrayList offices = employee.getOffices();</span><br><span class="line">            Iterator iterator = offices.iterator();</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------------------------------------&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                Office office = (Office) iterator.next();</span><br><span class="line">                Address address = office.getAddress();</span><br><span class="line">                System.out.println(office.getDescription());</span><br><span class="line">                System.out.println(<span class="string">&quot;Address : &quot;</span> +</span><br><span class="line">                        address.getStreetNumber() + <span class="string">&quot; &quot;</span> + address.getStreetName());</span><br><span class="line">                System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creating Employee</span></span><br><span class="line"><span class="comment">// Setting firstName : Freddie</span></span><br><span class="line"><span class="comment">// Setting lastName : Mercury</span></span><br><span class="line"><span class="comment">// ..Creating Office</span></span><br><span class="line"><span class="comment">// ..Setting office description : Headquarters</span></span><br><span class="line"><span class="comment">// ....Creating Address</span></span><br><span class="line"><span class="comment">// ....Setting streetName : Wellington Avenue</span></span><br><span class="line"><span class="comment">// ....Setting streetNumber : 223</span></span><br><span class="line"><span class="comment">// ..Setting office address : ....223 Wellington Avenue</span></span><br><span class="line"><span class="comment">// Adding Office to this employee</span></span><br><span class="line"><span class="comment">// ..Creating Office</span></span><br><span class="line"><span class="comment">// ..Setting office description : Client site</span></span><br><span class="line"><span class="comment">// ....Creating Address</span></span><br><span class="line"><span class="comment">// ....Setting streetName : Downing Street</span></span><br><span class="line"><span class="comment">// ....Setting streetNumber : 10</span></span><br><span class="line"><span class="comment">// ..Setting office address : ....10 Downing Street</span></span><br><span class="line"><span class="comment">// Adding Office to this employee</span></span><br><span class="line"><span class="comment">// -------------------------------------------------</span></span><br><span class="line"><span class="comment">// Headquarters</span></span><br><span class="line"><span class="comment">// Address : 223 Wellington Avenue</span></span><br><span class="line"><span class="comment">// --------------------------------</span></span><br><span class="line"><span class="comment">// Client site</span></span><br><span class="line"><span class="comment">// Address : 10 Downing Street</span></span><br><span class="line"><span class="comment">// --------------------------------</span></span><br></pre></td></tr></table></figure>

<p>当 rule 很多时，还可以将这些 rule 封装到一个类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeRuleSet</span> <span class="keyword">extends</span> <span class="title">RuleSetBase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRuleInstances</span><span class="params">(Digester digester)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// add rules</span></span><br><span class="line">        digester.addObjectCreate(<span class="string">&quot;employee&quot;</span>, <span class="string">&quot;com.jzheng.digestertest.Employee&quot;</span>);</span><br><span class="line">        digester.addSetProperties(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        digester.addObjectCreate(<span class="string">&quot;employee/office&quot;</span>, <span class="string">&quot;com.jzheng.digestertest.Office&quot;</span>);</span><br><span class="line">        digester.addSetProperties(<span class="string">&quot;employee/office&quot;</span>);</span><br><span class="line">        digester.addSetNext(<span class="string">&quot;employee/office&quot;</span>, <span class="string">&quot;addOffice&quot;</span>);</span><br><span class="line">        digester.addObjectCreate(<span class="string">&quot;employee/office/address&quot;</span>, <span class="string">&quot;com.jzheng.digestertest.Address&quot;</span>);</span><br><span class="line">        digester.addSetProperties(<span class="string">&quot;employee/office/address&quot;</span>);</span><br><span class="line">        digester.addSetNext(<span class="string">&quot;employee/office/address&quot;</span>, <span class="string">&quot;setAddress&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应的主体简化为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String path = System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + File.separator  + <span class="string">&quot;etc&quot;</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path, <span class="string">&quot;employee2.xml&quot;</span>);</span><br><span class="line">        Digester digester = <span class="keyword">new</span> Digester();</span><br><span class="line">        digester.addRuleSet(<span class="keyword">new</span> EmployeeRuleSet());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Employee employee = (Employee) digester.parse(file);</span><br><span class="line">            ArrayList offices = employee.getOffices();</span><br><span class="line">            Iterator iterator = offices.iterator();</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------------------------------------&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                Office office = (Office) iterator.next();</span><br><span class="line">                Address address = office.getAddress();</span><br><span class="line">                System.out.println(office.getDescription());</span><br><span class="line">                System.out.println(<span class="string">&quot;Address : &quot;</span> + address.getStreetNumber() + <span class="string">&quot; &quot;</span> + address.getStreetName());</span><br><span class="line">                System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ContextConfig"><a href="#ContextConfig" class="headerlink" title="ContextConfig"></a>ContextConfig</h2><p>StandardContext 必须要设置一个 ContextConfig 才能正常工作，它只要干几件事，设置 flag，设置 valve，解析 xml. ContextConfig 是以 listener 的形式出现的，监听 start/stop 事件。加载 xml 的逻辑在 defaultConig() 和 applicationConfig() 中。</p>
<h3 id="defaultConfig"><a href="#defaultConfig" class="headerlink" title="defaultConfig"></a>defaultConfig</h3><p>解析 conf/web.xml 的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">defaultConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open the default web.xml file, if it exists</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(Constants.DefaultWebXml);</span><br><span class="line">    <span class="keyword">if</span> (!file.isAbsolute())</span><br><span class="line">        file = <span class="keyword">new</span> File(System.getProperty(<span class="string">&quot;catalina.base&quot;</span>),</span><br><span class="line">                        Constants.DefaultWebXml);</span><br><span class="line">    FileInputStream stream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stream = <span class="keyword">new</span> FileInputStream(file.getCanonicalPath());</span><br><span class="line">        stream.close();</span><br><span class="line">        stream = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        log(sm.getString(<span class="string">&quot;contextConfig.defaultMissing&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log(sm.getString(<span class="string">&quot;contextConfig.defaultMissing&quot;</span>), e);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process the default web.xml file</span></span><br><span class="line">    <span class="keyword">synchronized</span> (webDigester) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputSource is =</span><br><span class="line">                <span class="keyword">new</span> InputSource(<span class="string">&quot;file://&quot;</span> + file.getAbsolutePath());</span><br><span class="line">            stream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            is.setByteStream(stream);</span><br><span class="line">            webDigester.setDebug(getDebug());</span><br><span class="line">            <span class="keyword">if</span> (context <span class="keyword">instanceof</span> StandardContext)</span><br><span class="line">                ((StandardContext) context).setReplaceWelcomeFiles(<span class="keyword">true</span>);</span><br><span class="line">            webDigester.clear();</span><br><span class="line">            webDigester.push(context);</span><br><span class="line">            webDigester.parse(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SAXParseException e) &#123;</span><br><span class="line">            log(sm.getString(<span class="string">&quot;contextConfig.defaultParse&quot;</span>), e);</span><br><span class="line">            log(sm.getString(<span class="string">&quot;contextConfig.defaultPosition&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;&quot;</span> + e.getLineNumber(),</span><br><span class="line">                                <span class="string">&quot;&quot;</span> + e.getColumnNumber()));</span><br><span class="line">            ok = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log(sm.getString(<span class="string">&quot;contextConfig.defaultParse&quot;</span>), e);</span><br><span class="line">            ok = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                log(sm.getString(<span class="string">&quot;contextConfig.defaultClose&quot;</span>), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="The-applicationConfig-Method"><a href="#The-applicationConfig-Method" class="headerlink" title="The applicationConfig Method"></a>The applicationConfig Method</h3><p>applicationConfig 的逻辑和 defaultConfig 基本一致，只是将解析的路径改了, 解析的路径为 <code>/WEB-INF/web.xml</code></p>
<h3 id="Creating-Web-Digester"><a href="#Creating-Web-Digester" class="headerlink" title="Creating Web Digester"></a>Creating Web Digester</h3><p>创建解析用的 digester</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Digester <span class="title">createWebDigester</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    URL url = <span class="keyword">null</span>;</span><br><span class="line">    Digester webDigester = <span class="keyword">new</span> Digester();</span><br><span class="line">    webDigester.setValidating(<span class="keyword">true</span>);</span><br><span class="line">    url = ContextConfig.class.getResource(Constants.WebDtdResourcePath_22);</span><br><span class="line">    webDigester.register(Constants.WebDtdPublicId_22,</span><br><span class="line">                            url.toString());</span><br><span class="line">    url = ContextConfig.class.getResource(Constants.WebDtdResourcePath_23);</span><br><span class="line">    webDigester.register(Constants.WebDtdPublicId_23,</span><br><span class="line">                            url.toString());</span><br><span class="line">    webDigester.addRuleSet(<span class="keyword">new</span> WebRuleSet());</span><br><span class="line">    <span class="keyword">return</span> (webDigester);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>WebRuleSet 中就是解析的规则，比如下面这些是用来解析 filter 的规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">digester.addObjectCreate(prefix + <span class="string">&quot;web-app/filter&quot;</span>, <span class="string">&quot;org.apache.catalina.deploy.FilterDef&quot;</span>);</span><br><span class="line">digester.addSetNext(prefix + <span class="string">&quot;web-app/filter&quot;</span>, <span class="string">&quot;addFilterDef&quot;</span>, <span class="string">&quot;org.apache.catalina.deploy.FilterDef&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>整个程序段应该是解析之前，通过 digester.push(context) 将要解析的对象塞进去，然后通过 parse(is) 关联起来的</p>
<p>PS: Digester 和 SAX 的整合关系分析，有兴趣可以做一做</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex16 Shutdown Hook</title>
    <url>/hexo/2021/09/20/HTW-ex16/</url>
    <content><![CDATA[<blockquote>
<p><strong>Chapter 16</strong> explains the shutdown hook that Tomcat uses to always get a chance to do clean-up regardless how the user stops it (i.e. either appropriately by sending a shutdown command or inappropriately by simply closing the console.)</p>
</blockquote>
<p>本章介绍了 Tomcat 如何优雅的执行 stop 方法，前面先通过两个例子介绍实现原理，后面分析 Tomcat 的实现方式</p>
<p>java 中，虚拟机可以通过两种方式 shut down</p>
<ul>
<li>调用 System.exit 结束</li>
<li>非正常结束，比如 CTRL+C，直接关闭终端等</li>
</ul>
<p>当虚拟机结束时，会一次执行下面两个步骤</p>
<ul>
<li>jvm 会执行所有注册的 shutdown hook. 这些 hook 被 attach 在 Runtime 对象中，结束时并行执行</li>
<li>jvm 执行所有没有被调用的 finalizers 方法</li>
</ul>
<p>本章中的例子都是针对第一点做实现的</p>
<p>创建一个 shutdown hook 的方式很简单，分一下几步</p>
<ul>
<li>创建 class 继承 Thread</li>
<li>run 方法中实现定制的逻辑</li>
<li>在目标应用中，实例话你的 hook class</li>
<li>注册 hook 到 Runtime</li>
</ul>
<p>下面是一个示例程序, 不管怎么结束程序，ShutdownHook 的 run() 方法都会被调用到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShutdownHookDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Demo&quot;</span>);</span><br><span class="line">        ShutdownHook shutdownHook = <span class="keyword">new</span> ShutdownHook();</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(shutdownHook);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ShutdownHookDemo demo = <span class="keyword">new</span> ShutdownHookDemo();</span><br><span class="line">        demo.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShutdownHook</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Shutting down...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Demo</span></span><br><span class="line"><span class="comment">// Shutting down...</span></span><br></pre></td></tr></table></figure>

<h2 id="A-Shutdown-Hook-Example"><a href="#A-Shutdown-Hook-Example" class="headerlink" title="A Shutdown Hook Example"></a>A Shutdown Hook Example</h2><p>这里通过一个 UI 组件做例子，应用启动时会创建一个临时文件，我们的目标是，推出后，这个文件必须被删除。原始实现如下，当点击 Exit 推出时，文件可以被删除，但是如果通过点击 x 按钮推出，则文件还会保留。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySwingApp</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    JButton exitButton = <span class="keyword">new</span> JButton();</span><br><span class="line">    JTextArea jTextArea1 = <span class="keyword">new</span> JTextArea();</span><br><span class="line">    String dir = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">    String filename = <span class="string">&quot;temp.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySwingApp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        exitButton.setText(<span class="string">&quot;Exit&quot;</span>);</span><br><span class="line">        exitButton.setBounds(<span class="keyword">new</span> Rectangle(<span class="number">304</span>, <span class="number">248</span>, <span class="number">76</span>, <span class="number">37</span>));</span><br><span class="line">        exitButton.addActionListener(e -&gt; exitButton_actionPerformed(e));</span><br><span class="line">        <span class="keyword">this</span>.getContentPane().setLayout(<span class="keyword">null</span>);</span><br><span class="line">        jTextArea1.setText(<span class="string">&quot;Click the Exit button to quit&quot;</span>);</span><br><span class="line">        jTextArea1.setBounds(<span class="keyword">new</span> Rectangle(<span class="number">9</span>, <span class="number">7</span>, <span class="number">371</span>, <span class="number">235</span>));</span><br><span class="line">        <span class="keyword">this</span>.getContentPane().add(exitButton, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.getContentPane().add(jTextArea1, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">330</span>);</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        initialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// create a temp file</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(dir, filename);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Creating temporary file&quot;</span>);</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Failed creating temporary file.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// delete the temp file</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(dir, filename);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Deleting temporary file.&quot;</span>);</span><br><span class="line">            file.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exitButton_actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        shutdown();</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MySwingApp mySwingApp = <span class="keyword">new</span> MySwingApp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改进方案是，将 shutdown() 的内容包装到单独的内部类中并实现 Thread 接口。在应用启动时，在 initialize() 方法中通过 hook 的方式注册到 Runtime。这样不管怎么退出，都能保证 shutdown() 方法会被执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySwingAppWithShutdownHook</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    JButton exitButton = <span class="keyword">new</span> JButton();</span><br><span class="line">    JTextArea jTextArea1 = <span class="keyword">new</span> JTextArea();</span><br><span class="line">    String dir = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">    String filename = <span class="string">&quot;temp.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySwingAppWithShutdownHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        exitButton.setText(<span class="string">&quot;Exit&quot;</span>);</span><br><span class="line">        exitButton.setBounds(<span class="keyword">new</span> Rectangle(<span class="number">304</span>, <span class="number">248</span>, <span class="number">76</span>, <span class="number">37</span>));</span><br><span class="line">        exitButton.addActionListener(e -&gt; exitButton_actionPerformed(e));</span><br><span class="line">        <span class="keyword">this</span>.getContentPane().setLayout(<span class="keyword">null</span>);</span><br><span class="line">        jTextArea1.setText(<span class="string">&quot;Click the Exit button to quit&quot;</span>);</span><br><span class="line">        jTextArea1.setBounds(<span class="keyword">new</span> Rectangle(<span class="number">9</span>, <span class="number">7</span>, <span class="number">371</span>, <span class="number">235</span>));</span><br><span class="line">        <span class="keyword">this</span>.getContentPane().add(exitButton, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.getContentPane().add(jTextArea1, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">330</span>);</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        initialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// add shutdown hook</span></span><br><span class="line">        MyShutdownHook shutdownHook = <span class="keyword">new</span> MyShutdownHook();</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(shutdownHook);</span><br><span class="line">        <span class="comment">// create a temp file</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(dir, filename);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Creating temporary file&quot;</span>);</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Failed creating temporary file.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// delete the temp file</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(dir, filename);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Deleting temporary file.&quot;</span>);</span><br><span class="line">            file.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exitButton_actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        shutdown();</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MySwingAppWithShutdownHook mySwingApp = <span class="keyword">new</span> MySwingAppWithShutdownHook();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyShutdownHook</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Shutdown-Hook-in-Tomcat"><a href="#Shutdown-Hook-in-Tomcat" class="headerlink" title="Shutdown Hook in Tomcat"></a>Shutdown Hook in Tomcat</h2><p>Tomcat 也通过同样的原理，在 Catalina 这个类中定义了一个 hook</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">CatalinaShutdownHook</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (server != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ((Lifecycle) server).stop();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Catalina.stop: &quot;</span> + e);</span><br><span class="line">                e.printStackTrace(System.out);</span><br><span class="line">                <span class="keyword">if</span> (e.getThrowable() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;----- Root Cause -----&quot;</span>);</span><br><span class="line">                    e.getThrowable().printStackTrace(System.out);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Catalina 运行 start() 方法的时候 attach 到 Runtime 对象中去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread shutdownHook = <span class="keyword">new</span> CatalinaShutdownHook();</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">Runtime.getRuntime().addShutdownHook(shutdownHook);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex17 Tomcat Startup</title>
    <url>/hexo/2021/09/20/HTW-ex17/</url>
    <content><![CDATA[<blockquote>
<p><strong>Chapter 17</strong> discusses the starting and stopping of Tomcat through the use of batch files and shell scripts. </p>
</blockquote>
<p>Tomcat 中通过两个 class 管理容器的启动分别是 Catalina 和 Bootstrap。Catalina 用来管理服务器的开启和停止，同时负责解析 server.xml 配置文件。 Bootstrap 用来创建 Catalina 实体并运行。理论上来说，这两个类可以合并，但是为了支持多模式运行，还是分开了。</p>
<p>这章先介绍了 Catalina 和 Bootstrap，然后介绍了管理 Tomcat 的 dot 和 shell 文件的编写</p>
<h2 id="The-Catalina-Class"><a href="#The-Catalina-Class" class="headerlink" title="The Catalina Class"></a>The Catalina Class</h2><p>管理主入口为 process 方法，通过 Bootstrap 管理，但其实它本身就包含一个 main() 函数，调用方式和 Bootstrap 一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    setCatalinaHome();</span><br><span class="line">    setCatalinaBase();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arguments(args))</span><br><span class="line">            execute();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace(System.out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="The-start-Mehtod"><a href="#The-start-Mehtod" class="headerlink" title="The start Mehtod"></a>The start Mehtod</h3><p>start 方法中，会做如下事情</p>
<ol>
<li>创建对应的 digester 对象处理 server.xml</li>
<li>调用解析得到的 server 容器的 start 方法</li>
<li>注册 shutdown hook</li>
<li>卡在 await 等待结束信号</li>
<li>正常结束时会先移掉 hook 避免重复执行</li>
</ol>
<h3 id="The-stop-Mehtod"><a href="#The-stop-Mehtod" class="headerlink" title="The stop Mehtod"></a>The stop Mehtod</h3><p>执行原理和逻辑和 start 一致，跳过。</p>
<h3 id="Start-Stop-Digester"><a href="#Start-Stop-Digester" class="headerlink" title="Start/Stop Digester"></a>Start/Stop Digester</h3><p>逻辑一致，创建了一个 Digester 对象，主要的逻辑都在 rule set 那一部分，很直观</p>
<h2 id="The-Bootstrap-Class"><a href="#The-Bootstrap-Class" class="headerlink" title="The Bootstrap Class"></a>The Bootstrap Class</h2><p>Tomcat 通过 Bootstrap 调用 Catalina，我们平时启动用的 dot/shll 文件也是直接调用的 Bootstrap 类。其中的 main 方法创建了三个 class loader 并对 Catalina 做了实例话，最后调用了他的 process 方法启动服务器。</p>
<p>PS: 这部分后面可以结合第八章仔细看看，应该挺有意思</p>
<h2 id="Running-Tomcat-on-Windows-Linux"><a href="#Running-Tomcat-on-Windows-Linux" class="headerlink" title="Running Tomcat on Windows/Linux"></a>Running Tomcat on Windows/Linux</h2><p>略</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>HTW ex18</title>
    <url>/hexo/2021/09/22/HTW-ex18/</url>
    <content><![CDATA[<blockquote>
<p><strong>Chapter 18</strong> presents the deployer, the component responsible for deploying and installing web applications. </p>
</blockquote>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 搜索</title>
    <url>/hexo/2020/05/28/Hexo-Search-Plugin/</url>
    <content><![CDATA[<p>Hexo 提供全区搜索功能很方便，在两个 <code>_config.yml</code> 文件下添加配置就行了，一个在 hexo 下，一个在 next 皮肤下。</p>
<p>root -&gt; _config.yml 添加配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Config for search service</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">    <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>root -&gt; themes -&gt; next -&gt; _config.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h2><p>某一天突然发现部分 Post 不能被 search 出来了。 看这个插件的配置信息，建立的索引应该是放在这个 search.xml 文件里了。排查发现是 Splunk 之后一个都失效了。继续排查，是这片文章中有个 ‘Steps:’ 的节点，在编辑器里面查看是没什么问题的，但是贴到其他工具，比如 idea 或者 browser 里面时，他会带一个 [BS] 的前缀。太神奇了。。。所以之前一直没发现。</p>
<p>在 VSCode 里面看结构还是 <code>&lt;p&gt;Steps&lt;/p&gt;</code> 但是用 linux cat 时就变成 <code>&lt;pSteps:&lt;/p&gt;</code> 所以后面的 search 解析就出问题了。查了下 BS 代表的是退格键 0x008, 也解释了为什么 xml p 标签会少一个尖括号了 ╮(￣▽￣””)╭</p>
<p><strong>2021-05-20</strong></p>
<p>Docker 弹射起步的那篇文章并没有建立索引，搜索不到，只能通过 tag 导航过去。稍微检查了一下，和之前的文章里面混入了特殊字符的问题还不一样，有待查证</p>
<p>搜索引擎使用技巧的那篇文章也不能搜索出来</p>
<p><strong>2021-06-02</strong></p>
<p>jmockit, testng 等关键字也没有建索引，感觉我的忍耐快要到极限了 (#ﾟДﾟ)</p>
<p><strong>2021-06-03</strong></p>
<p>本地启动 server，search 了一下，很多关键字都是可以找出来的。。。难道是远端的部署有问题？！</p>
<p>通过 F12 + network 的 tab, 点击 search 看网络加载。remote 的 search.xml 位于 <code>https://jack-zheng.github.io/hexo/search.xml</code> 这路径下。加载的时候 terminal 会报错，难道我找到了华点？！！</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">This page contains the following errors:</span><br><span class="line">error on line 3463 at column 23: Input is not proper UTF-8, indicate encoding !</span><br><span class="line">Bytes: 0x08 0x20 0xE5 0x88</span><br><span class="line">Below is a rendering of the page up to the first error.</span><br></pre></td></tr></table></figure>

<p>灯噔, 密码正确，删掉了对应的文件，search 正常了，但是我反复看了下那个文件，没看出什么问题啊。。。</p>
<p>终于找到问题所在了！！！关键字没有设置对，害我绕了老大一圈才找到答案。如果早点用关键字 <code>Hexo search.xml Input is not proper UTF-8</code> 的话，早就出结果了。之前一直纠结在 Chrome 等主题那边</p>
<p>用 hexo 插件等关键字发现几个和我一样的案例，很快的解决了问题。。。</p>
<p>解决步骤：在 vscode 中打开你的项目，点搜索，点正则匹配，根据你的世纪情况搜索你要的关键字。比如我报错是 <code>0x08 0x20 0xE5 0x88</code> 就直接搜索 <code>\x08</code>, 把搜索出来的地方都改了就行。</p>
<p>选中出问题的字段直接把它复制黏贴到终端，可以看到 <code>code, ^H如果是</code> 的显示，好神奇</p>
<p><img src="search_issue.png" alt="Search issue"></p>
<p>又做了一些深入调查，这种字符好像是控制字符，可能是打字的时候无意间打出来的，你可以通过 vscdoe 里面的设置，将它默认显示出来</p>
<p>Code -&gt; Perferences -&gt; Settings -&gt; 搜索 renderControlCharacters 勾选上即可</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>search</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客 Setup</title>
    <url>/hexo/2019/11/12/Hexo-blog-setup/</url>
    <content><![CDATA[<p>Hexo setup 笔记。网上有好多 setup 的教程，这里就不赘述了。记录一下我 setup 时候用到的命令，作为备忘。</p>
<p>这里使用的 Next 版本 <strong>V7.5.0</strong></p>
<h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><ol>
<li>安装 node/npm, <code>brew install node</code>, type <code>node -v</code>, <code>npm -v</code> to check if install successfully.</li>
<li>run command: <code>npm install -g hexo-cli</code>, 安装 hexo 工具, 安装完成，type <code>hexo</code> to check</li>
<li>Setup 博客基础架构 <code>hexo init &lt;folder&gt;</code>, cd &lt;folder&gt;, run command: <code>hexo server</code> 就可以得到一个本地可访问的 hello world 博客模版</li>
<li><code>hexo new post_name</code>, 在 source 文件夹下面会创建一个新的 post_name.md 文件作为新博客的载体</li>
<li>为你的博客新建一个git repo, repo name 必须是<strong>你的Git用户名.github.io</strong>, 如果已经创建了, rename 一下</li>
<li>编辑 &lt;folder&gt;_config.yml 关联 git repo</li>
<li><code>npm install hexo-deployer-git --save</code> 安装 git 集成工具</li>
<li><code>hexo g</code> 生成工程目录及相关文件</li>
<li><code>hexo s</code> 启动本地 server 验证</li>
<li><code>hexo d</code> 部署发布到 github, 等一两分钟访问 <code>https://&lt;你的Git用户名&gt;.github.io</code> 就可以看到你的作品了 (^з^)-☆</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;&lt;username&gt;.github.io.git</span><br><span class="line">  # SSH 格式的也OK, 简单理解就是去 github repo 页面, 把你的 repo 地址复制一下</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h3 id="异地环境-setup"><a href="#异地环境-setup" class="headerlink" title="异地环境 setup"></a>异地环境 setup</h3><h4 id="Win10"><a href="#Win10" class="headerlink" title="Win10"></a>Win10</h4><p>在其他机子上面重新 setup 环境只需要安装 git 和 nodejs, 把项目 clone 到本地之后 cd 到博客根目录下运行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>就行了，在 Windows 下使用 VS Code 的默认命令行时还遇到另外一个问题，hexo 命令不能执行，抛出 Exception:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\lanmo\gitStore\hexo&gt; hexo</span><br><span class="line">hexo : 无法加载文件 C:\Users\lanmo\AppData\Roaming\npm\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft</span><br><span class="line">.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ hexo</span><br><span class="line">+ ~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure>

<p>这是由于 powershell 的默认脚本执行策略把这个 command 阻塞了，可以执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许本地脚本执行</span></span><br><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br></pre></td></tr></table></figure>

<p>来开放权限，其他可用命令还有</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看可用策略</span></span><br><span class="line">Get-ExecutionPolicy -List</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前策略</span></span><br><span class="line">Get-ExecutionPolicy</span><br></pre></td></tr></table></figure>

<p>更多可以参考官方文档 <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-6">About Execution Policies</a></p>
<h4 id="Win10-WSL"><a href="#Win10-WSL" class="headerlink" title="Win10 WSL"></a>Win10 WSL</h4><p>WSL 默认已经安装了 git, 所以只需要额外安装 nodejs 就行了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果速度慢可以使用 taobao 源加速</span></span><br><span class="line">npm --registry https://registry.npm.taobao.org install nodejs</span><br><span class="line"><span class="comment"># 配置永久源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>安装完后运行 <code>node -v</code> 和 <code>npm -v</code> 查看是否安装成功。我本地安装完后，node 可以正常调用，但是 npm 不行，报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jack@DESKTOP-9TGTFK1:~$ npm -v</span><br><span class="line">: not foundram Files/nodejs/npm: 3: /mnt/c/Program Files/nodejs/npm:</span><br><span class="line">: not foundram Files/nodejs/npm: 5: /mnt/c/Program Files/nodejs/npm:</span><br><span class="line">/mnt/c/Program Files/nodejs/npm: 6: /mnt/c/Program Files/nodejs/npm: Syntax error: word unexpected (expecting <span class="string">&quot;in&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 which npm 查看路径</span></span><br><span class="line">jack@DESKTOP-9TGTFK1:~$ <span class="built_in">which</span> npm</span><br><span class="line">/usr/bin/npm</span><br></pre></td></tr></table></figure>

<p>是应为路径有问题，修改 WSL 下的 <code>~/.profile</code> 文件，添加 npm 执行路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PATH=<span class="string">&quot;<span class="variable">$HOME</span>/bin:<span class="variable">$HOME</span>/.local/bin:/usr/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后 <code>source ~/.profile</code> 在运行 <code>npm -v</code>, 成功。</p>
<p>该问题可以参考 <a href="https://github.com/microsoft/WSL/issues/1512">VSCode Git Issue</a></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://hexo.io/docs/github-pages">Hexo 官方文档</a></li>
<li><a href="https://juejin.im/post/5bebfe51e51d45332a456de0">Juejin-最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26625249">Zhihu-GitHub+Hexo 搭建个人网站详细教程</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>setup</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo bug 记录</title>
    <url>/hexo/2021/05/18/Hexo-bugs-investigation/</url>
    <content><![CDATA[<h2 id="navigation-side-bar-issue"><a href="#navigation-side-bar-issue" class="headerlink" title="navigation side bar issue"></a>navigation side bar issue</h2><p>发现一个 Hexo 的 bug. 使用版本</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">hexo version </span><br><span class="line">INFO  Validating config</span><br><span class="line">hexo: 5.0.0</span><br><span class="line">hexo-cli: 4.1.0</span><br><span class="line">os: Darwin 20.4.0 darwin x64</span><br><span class="line">node: 15.10.0</span><br><span class="line">v8: 8.6.395.17-node.25</span><br><span class="line">uv: 1.41.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.17.1</span><br><span class="line">modules: 88</span><br><span class="line">nghttp2: 1.42.0</span><br><span class="line">napi: 7</span><br><span class="line">llhttp: 2.1.3</span><br><span class="line">openssl: 1.1.1j</span><br><span class="line">cldr: 38.1</span><br><span class="line">icu: 68.2</span><br><span class="line">tz: 2020d</span><br><span class="line">unicode: 13.0</span><br></pre></td></tr></table></figure>

<p>问题描述：</p>
<p>Outline 中的中文导航会失败，英文的可以正常工作</p>
<p><img src="outline.png" alt="Outline display issue"></p>
<p>怎么修还不清楚，简单搜索了一下并没有查到解决方案，有机会的话可以看看 Hexo 源码再提一个 fix 的 PR ╮(￣▽￣””)╭</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 换皮肤</title>
    <url>/hexo/2019/11/15/Hexo-change-theme/</url>
    <content><![CDATA[<p>今天决定尝试一下给 blog 换皮肤。就拿时下最流行的 Next 主题好了，用的人多，文档齐全，熟悉了之后有需求再发挥。</p>
<h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>安装很简单，官方地址 <a href="https://github.com/theme-next/hexo-theme-next">hexo-theme-next</a>。</p>
<ol>
<li><code>cd hexo</code></li>
<li><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></li>
<li>到 <code>themes/next</code> 目录下把 repo 的 .git, .github 删掉</li>
<li>起 server 验证，打完收工</li>
</ol>
<p>其他一些比较个人的配置去 next 目录下的 <code>_config.yml</code> 里面配置，像什么头像啦，github 三角标什么的都要有的。</p>
<h3 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h3><p>如果你只是将 next clone 下来没有删掉 .git 就 add 的话会有 warning 给出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .gitignore _config.yml themes&#x2F;warning: adding embedded git repository: themes&#x2F;nexthint: You&#39;ve added another git repository inside your current repository.</span><br><span class="line">hint: Clones of the outer repository will not contain the contents of</span><br><span class="line">hint: the embedded repository and will not know how to obtain it.</span><br><span class="line">hint: If you meant to add a submodule, use:</span><br><span class="line">hint:</span><br><span class="line">hint:   git submodule add &lt;url&gt; themes&#x2F;next</span><br><span class="line">hint:</span><br><span class="line">hint: If you added this path by mistake, you can remove it from the</span><br><span class="line">hint: index with:</span><br><span class="line">hint:</span><br><span class="line">hint:   git rm --cached themes&#x2F;next</span><br><span class="line">hint:</span><br><span class="line">hint: See &quot;git help submodule&quot; for more information.</span><br></pre></td></tr></table></figure>

<p>这是应为 git 是不支持嵌套 repo 管理的，你可以通过 submodules 来管理，不过使用上会有点冲突，按 submodules 的定义来说，它是为那些需要使用子模块但是那些模块不需要更新，或者只需要跟着官方的 branch 走就行了。就 hexo 这种情况，你可以自己 fork 一个，然后作为子模块管理，但是这样你 fork 的 repo 就不能跟进官方的 repo 了 ┑(￣Д ￣)┍， 反正就我的情况来说，用最简单的删 .git 就行了，真有需求以后在研究。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>theme</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 评论功能</title>
    <url>/hexo/2019/11/18/Hexo-enable-comment/</url>
    <content><![CDATA[<p>为博客增加评论功能，参考 next 的配置文件，截止 2019-11-18 号为止，next 已经默认支持了 changyan | disqus | disqusjs | gitalk | livere | valine 这些评论系统。这里出于兼容性和可靠性的原则，选择 gitalk 作为评论系统。</p>
<p>Steps:</p>
<ol>
<li>github 创建一个新的 repo 用于存放 comments，比如叫做 hexo-comments</li>
<li>去到 github 账号的配置页面新建一个 Oauth 授权，<a href="https://github.com/settings/applications/new">点这里快速跳转</a></li>
<li>填写授权信息 Homepage URL 和 Authorization callback URL 都写自己的博客地址就行了</li>
<li>确认后跳转到授权信息页面，记下他的 app id 和 secret</li>
<li>配置 next 的 _config.yml 如下</li>
<li>提交代码测试</li>
</ol>
<p>测试评论，成功。新添加的评论会出现在 hexo-comments 的 issues tab 下面，按这样的操作的话，我觉的可能都不需要自建创建 comments repo 了，直接放在一个 repo 下面就完事了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id: jack-zheng # GitHub repo owner</span><br><span class="line">  repo: hexo-comments # 新建的用于存放评论的repo</span><br><span class="line">  client_id: d44xxxxxxe3a # GitHub Application Client ID</span><br><span class="line">  client_secret: 9b3c4xxxxxb708ef # GitHub Application Client Secret</span><br><span class="line">  admin_user: jack-zheng # GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line">  # Gitalk&#39;s display language depends on user&#39;s browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure>

<p>PS: 用这种方案的话，默认只有 github 的用户才能评论，不过看这种文章的应该都是github用户，所以问题不大<br>PPS: 网上很多文章都会要你去配置 swig 文件，最新版的 next 已经不需要这个步骤了</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://github.com/gitalk/gitalk">gitalk</a></li>
<li><a href="https://www.jianshu.com/p/b5f509f25872">简书-Jonzzs</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>comment</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 设置 tags 和 Categories 分类</title>
    <url>/hexo/2019/11/15/Hexo-tags-and-categories/</url>
    <content><![CDATA[<p>默认设置下 Hexo Next 主题是关闭 <code>tag</code> 和 <code>categories</code> 的，你可以通过一下步骤打开它。</p>
<ol>
<li>去到 next folder 下，打开 <code>_config.yml</code>, 去掉 menu 下的 tags 和 categories 的注释。此时刷新页面，主页上会在 Archive 旁边多两个icon.</li>
<li>repo 目录下 run command: <code>hexo new page categories</code>, 并向该文件中添加新行 <code>type: &quot;categories&quot;</code>。新文件目录 <code>path/to/blog/source/categories/index.md</code></li>
<li>repo 目录下 run command: <code>hexo new page tags</code>, 并向该文件中添加新行 <code>type: &quot;tags&quot;</code>。新文件目录 <code>path/to/blog/source/tags/index.md</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># categories index.md</span><br><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2019-11-15 16:42:15</span><br><span class="line">type: &quot;categories&quot;  &lt;--- 新行</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tags index.md</span><br><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-11-15 16:29:40</span><br><span class="line">type: &quot;tags&quot;  &lt;--- 新行</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>顺便还可以去 <code>path/to/blog/scaffolds/post.md</code>，在 post.md 中添加新行 <code>categories:</code>， 这样每次 new post 的时候都会自动带上这个标签了 ♪(´ε｀ )</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/">linlif-Hexo</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>tags</tag>
        <tag>categories</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 保存博客源码</title>
    <url>/hexo/2019/11/13/Hexo-use-travis-to-auto-publish/</url>
    <content><![CDATA[<p>按照之前的教程，虽然 github page 上顺利发布了，但是 blog 的 source code 并没有一起同步过去，还在本地。Hexo 工具只是把你翻译之后的 web 信息同步过去了。search 了一下，想要同步 source 有大概三种路子：</p>
<ol>
<li>hexo 插件: hexo-git-backup</li>
<li>在原来的 blog repo 里面新建分支存储</li>
<li>官方方法，集成 Travis CI，每次 push 自动帮你部署</li>
</ol>
<p>本文只描述怎么集成 Travis CI, 其他的方案有机会再补，网上教程很多，随便找找就有了。</p>
<blockquote>
<p>采用 Travis CI 的方案之后，原来的 repo name 需要改变，不然 blog 访问不了, 针对这种情况，其实还有另一种解决方案，将 master 用来存放编译好的 blog, 源码用新的 branch 存放，和前面的那些原理都一样</p>
</blockquote>
<h3 id="Travis-CI-集成"><a href="#Travis-CI-集成" class="headerlink" title="Travis CI 集成"></a>Travis CI 集成</h3><ol>
<li>新建一个 repo, 这里我用 hexo 作为 repo name</li>
<li>clone 到本地，将之前的 blog source copy 进去，添加 <code>.gitignore</code> 文件，把 <code>public\</code> 添加进 list</li>
<li>注册 Travis 账号，用 github 授权就行，授权 repo, 添加 token. 官方文档都有链接，很方便</li>
<li>update <code>_config.yml</code> 里的 url 和 root 值</li>
<li>添加 <code>.travis.yml</code> 做 CI 集成管理</li>
<li>commit + push 这些改动，Travis 自动 build 就会被触发了</li>
<li>build 完成后，repo 会有一个新的 branch 叫 gh-pages. 访问 <code>https://jack-zheng.github.io/hexo</code> 查看改动结果</li>
</ol>
<p>国内，第一次访问会比较慢，cache 了文件之后后面访问会快一点</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml setting</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://jack-zheng.github.io/hexo</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/hexo/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#.gitignore</span><br><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br><span class="line">.vscode</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .travis.yml</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10</span> <span class="comment"># use nodejs v10 LTS</span></span><br><span class="line"><span class="attr">cache:</span> <span class="string">npm</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span> <span class="comment"># build master branch only</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="comment"># generate static files</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip-cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github-token:</span> <span class="string">$GH_TOKEN</span></span><br><span class="line">  <span class="attr">keep-history:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">local-dir:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure>

<h3 id="Issue-Trace"><a href="#Issue-Trace" class="headerlink" title="Issue Trace"></a>Issue Trace</h3><p>在按照官方教程走完流程后，repo 的 setting page 会有如下 Warning, 删了 <code>themes/landscape/README.md</code> 这个文件再 build 一下就行了</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Your site is having problems building: The tag fancybox on line 77 in themes/landscape/README.md is not a recognized Liquid tag. For more information, see https://help.github.com/en/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#unknown-tag-error.</span><br></pre></td></tr></table></figure>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://hexo.io/docs/github-pages">Travis CI 集成 - 官方</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>travis</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 设置阅读数，文章授权</title>
    <url>/hexo/2019/11/20/Hexo-view-and-auth/</url>
    <content><![CDATA[<p>本篇将介绍如何设置统计文章阅读量和文章授权。</p>
<h2 id="阅读量统计"><a href="#阅读量统计" class="headerlink" title="阅读量统计"></a>阅读量统计</h2><p>Hexo 默认使用’不蒜子’做阅读量统计，而且已经配置好了，如果想要开启它只需要到 <code>next/_config.yml</code> 下将 <code>busuanzi_count:</code> 下的 <code>enable:</code> 设置为 true 即可。重启后访问也看可以看到文章标题下多处一只眼睛标志，旁边就是总阅读量。</p>
<p><a href="http://ibruce.info/2015/04/04/busuanzi/">不蒜子</a>, 貌似是某程序员建的站，托管在七牛上的，赞！</p>
<h2 id="文章授权"><a href="#文章授权" class="headerlink" title="文章授权"></a>文章授权</h2><p>Hexo 默认授权是关闭的，可以在 <code>next/_config.yml</code> 的 <code>creative_commons</code> 模块做设置。默认是 <code>by-nc-sa</code> 授权。</p>
<p><a href="https://zh.wikipedia.org/wiki/%E7%9F%A5%E8%AF%86%E5%85%B1%E4%BA%AB%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE">常见授权方式Wiki</a></p>
<table>
<thead>
<tr>
<th>许可协议</th>
<th align="center">简称</th>
</tr>
</thead>
<tbody><tr>
<td>创作共享 署名</td>
<td align="center">CC BY</td>
</tr>
<tr>
<td>创作共享 署名-相同方式共享</td>
<td align="center">CC BY-SA</td>
</tr>
<tr>
<td>创作共享 署名-非商业性</td>
<td align="center">CC BY-NC</td>
</tr>
<tr>
<td>创作共享 署名-禁止演绎</td>
<td align="center">CC BY-ND</td>
</tr>
<tr>
<td>创作共享 署名-非商业性-禁止演绎</td>
<td align="center">CC BY-NC-ND</td>
</tr>
<tr>
<td>创作共享 署名-非商业性-相同方式共享</td>
<td align="center">CC BY-NC-SA</td>
</tr>
<tr>
<td>创作共享 相同方式共享</td>
<td align="center">CC SA</td>
</tr>
<tr>
<td>创作共享 非商业性</td>
<td align="center">CC NC</td>
</tr>
<tr>
<td>创作共享 禁止演绎</td>
<td align="center">CC ND</td>
</tr>
<tr>
<td>创作共享 非商业性-相同方式共享</td>
<td align="center">CC NC-SA</td>
</tr>
<tr>
<td>创作共享 非商业性-禁止演绎</td>
<td align="center">CC NC-ND</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>auth</tag>
        <tag>view count</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客添加 sitemap</title>
    <url>/hexo/2019/11/22/Hexo-with-sitemap/</url>
    <content><![CDATA[<p>为博客添加 sitemap 并将博客添加至搜索引擎</p>
<h2 id="Google-Search-Console"><a href="#Google-Search-Console" class="headerlink" title="Google Search Console"></a>Google Search Console</h2><p>到博客根目录下运行 command 安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>

<p>在根目录下的 _config.yml 中添加 sitemap 配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Config sitemap to enable SEO</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure>

<p>重新生成文件，启动 server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>访问 url/sitemap.xml 可以看到新生成的 sitemap xml 文件</p>
<p>访问 <a href="https://search.google.com/search-console/about">Google Search Console</a> 注册你的页面。<br>如果你的博客挂在 github 上，选右边的那个，输入你的 github 博客地址，比如我的是 <code>https://jack-zheng.github.io/hexo</code><br><img src="seo01.jpg" alt="资源类型"></p>
<p>结下来是验证所有权, 选择 HTML 标记会简单一点。点击他，你会得到一串码。复制它然后到 themes/next/_config.yml 中，找到 <code>google_site_verification:</code> 将值写在后面</p>
<p><img src="seo02.png" alt="所有权验证"></p>
<p>添加完后，将你的博客部署，在次访问是查看页面源码，你会发现头部多了一段 meta 数据</p>
<p><img src="seo_meta.png" alt="文件头"></p>
<p>然后点击 Verify 按钮，验证成功</p>
<p><img src="seo03.png" alt="所有权验证"></p>
<p>点击 <code>站点地图</code> 在 1 处填写你的 sitemap 地址。添加完成后，他会显示在 2 处</p>
<p><img src="seo04.png" alt="添加站点"></p>
<p>等一段时间后，google 就会将你的博客抓去出来了， 通过在搜索框中输入 <code>site:https://jack-zheng.github.io/</code> 可以看到结果，我是在第二天看的，不是很清楚精确需要等多久</p>
<p><img src="seo05.png" alt="Google Search 结果"></p>
<h2 id="博客添加图片引用"><a href="#博客添加图片引用" class="headerlink" title="博客添加图片引用"></a>博客添加图片引用</h2><ul>
<li><a href="https://hexo.io/zh-cn/docs/asset-folders.html">官方文档</a></li>
</ul>
<p>由于我的博客是挂载在 subdirectory 下面的，在 source 下面创建 images 的方案不生效，也没有找到对应的解决办法，我还以为可以在 _config.yml 里面配置来着，残念 ┑(￣Д ￣)┍</p>
<p>最后采用了 post_asset_folder 的配置，这个配置默认就有的，默认关闭，把他设置成 true 打开，之后每次创建新 post 的时候，会在 _posts 下面新建文件夹，将你要上传的图片放在里面，在 post 正文中使用 <code>![Google Search 结果](seo05.png)</code> 引用即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># folder structure sample</span></span><br><span class="line"><span class="built_in">source</span></span><br><span class="line">├── _posts</span><br><span class="line">│   ├── git-commands.md</span><br><span class="line">│   ├── hexo-comments.md</span><br><span class="line">│   ├── hexo-search-seo</span><br><span class="line">│   │   ├── seo01.jpg</span><br><span class="line">│   │   ├── ...</span><br><span class="line">│   │   └── seo05.png</span><br><span class="line">│   ├── hexo-search-seo.md</span><br><span class="line">│   ├── ...</span><br><span class="line">│   └── setup-hexo-tag-category.md</span><br><span class="line">├── categories</span><br><span class="line">│   └── index.md</span><br><span class="line">└── tags</span><br><span class="line">    └── index.md</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>sitemap</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 添加字数显示，更改语言</title>
    <url>/hexo/2019/11/19/Hexo-word-count-and-language/</url>
    <content><![CDATA[<p>本篇包含两个配置</p>
<ol>
<li>文章字数，阅读时间显示</li>
<li>语言设置，显示中文</li>
</ol>
<h2 id="配置字数"><a href="#配置字数" class="headerlink" title="配置字数"></a>配置字数</h2><p>参靠 repo: <a href="https://github.com/theme-next/hexo-symbols-count-time">hexo-symbols-count-time</a></p>
<ol>
<li>到根目录下执行 <code>npm install hexo-symbols-count-time</code> 安装插件</li>
<li>到根目录下的 _config.yml 中添加配置</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br></pre></td></tr></table></figure>

<h2 id="配置中文显示"><a href="#配置中文显示" class="headerlink" title="配置中文显示"></a>配置中文显示</h2><p>查看 Next 主题下面的 language 文件夹，找到其中的中文显示文件名，把根目录下的 _config.yml 里的 language 改为这个名字就行了。我这边文件名为 <code>zh-CN.yml</code>，将 yml 中 language 改为 <code>zh-CN</code></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>word count</tag>
        <tag>language</tag>
      </tags>
  </entry>
  <entry>
    <title>Brew in China</title>
    <url>/hexo/2021/05/07/HomeBrew-in-China/</url>
    <content><![CDATA[<p>使用 HomeBrew 安装软件各种卡断，搜索了一下，在 gitee 上看到一个很赞的项目，对 HomeBrew 进行了本土优化，速度很快 - <a href="https://gitee.com/cunkai/HomebrewCN">HomebrewCN</a></p>
<p>突然对这个国内的 gitee 倍生好感，而且稍微撇了一下他的 UI，感觉要比 github 好看诶，666</p>
<p>有兴趣可以看一下他是怎么实现加速的，难道是将所有 HomeBrew 的相关安装包都在 gitee 上做了备份吗？！</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title>如何给心仪的项目提交 PR</title>
    <url>/hexo/2020/09/25/How-to-give-PR-to-the-repo-you-like/</url>
    <content><![CDATA[<ol>
<li>fork 项目，下载到本地</li>
<li>新建分支，修改代码</li>
<li>命令行提交改动，push 到远端</li>
<li>登陆到 github，查看 fork 的项目，手动选择将改动作为一个 PR 推送到你原始项目</li>
</ol>
<p>打完收工～</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea 常用配置</title>
    <url>/hexo/2019/12/26/Idea-configuration/</url>
    <content><![CDATA[<p>Idea 中关于 Maven 的一些配置</p>
<h2 id="Configurations"><a href="#Configurations" class="headerlink" title="Configurations"></a>Configurations</h2><h3 id="避免-import"><a href="#避免-import" class="headerlink" title="避免 import *"></a>避免 import *</h3><p>默认设置下，同一个包下 import 数量超过 5 个就会用 * 来代替，可以去 Setting -&gt; editor -&gt; code style -&gt; java, 然后右边选择 Imports tab, 修改 ‘Class count to use import *’ 的值即可</p>
<h3 id="Maven-下载仓库配"><a href="#Maven-下载仓库配" class="headerlink" title="Maven 下载仓库配"></a>Maven 下载仓库配</h3><ol>
<li>Shift + Ctrl + A -&gt; 搜索 <code>Settings.xml</code>, Open/Create 这个文件 -&gt; 添加仓库地址  </li>
<li>localRepository 这个变量的地址应该是对应到本地的 <code>.m</code> folder 下的 repository 文件夹  </li>
<li>Settings.xml 路径可以在 ‘Build, Excutations, Deployment’ 下的 maven tag 下查看</li>
</ol>
<h3 id="设置-Maven-自动下载包源码"><a href="#设置-Maven-自动下载包源码" class="headerlink" title="设置 Maven 自动下载包源码"></a>设置 Maven 自动下载包源码</h3><ol>
<li>Build, Excutations, Deployment -&gt; Maven -&gt; Importing -&gt; Automatically download: source, documentation 打勾  </li>
<li>回到主界面，在侧边栏的 Maven 里面会出现 ‘Download source and/or documentation’ 的按钮</li>
</ol>
<h3 id="Win10-下-Idea-NVIDIA-快捷键冲突"><a href="#Win10-下-Idea-NVIDIA-快捷键冲突" class="headerlink" title="Win10 下 Idea/NVIDIA 快捷键冲突"></a>Win10 下 Idea/NVIDIA 快捷键冲突</h3><ol>
<li>NVIDIA Graphic 开启的时候 Ctrl + Alt + 方向键会变成调整显示方向的设置，和 Idea 的代码跳转冲突</li>
<li>右键桌面 -&gt; 图形属性 -&gt; 选项和支持 -&gt; 禁用快捷键</li>
</ol>
<h3 id="Idea-查看-JDK-源码"><a href="#Idea-查看-JDK-源码" class="headerlink" title="Idea 查看 JDK 源码"></a>Idea 查看 JDK 源码</h3><p>File -&gt; project setting -&gt; SDKs -&gt; 右边有个 Sourcepath -&gt; 导航到 JDK 文件目录下找到 src.zip 就行了</p>
<h3 id="设置条件断点"><a href="#设置条件断点" class="headerlink" title="设置条件断点"></a>设置条件断点</h3><p>添加断点之后，在断点上右键输入你想要的条件，比如： a==10</p>
<h3 id="Debug-显示设置"><a href="#Debug-显示设置" class="headerlink" title="Debug 显示设置"></a>Debug 显示设置</h3><p>debug 时一些值比如 <code>byte[]</code> 想要看具体的值时多少，可以右键 -&gt; Evaluate Expression… 输入表达式 <code>new String(dmBytes)</code> 查看，也可以通过 add to watch 输入同样的表达式</p>
<h3 id="复制代码段的时候，取消格式复制"><a href="#复制代码段的时候，取消格式复制" class="headerlink" title="复制代码段的时候，取消格式复制"></a>复制代码段的时候，取消格式复制</h3><p>cmd+shift+A 打开搜索框，输入关键字 ‘copy as rich text’, 关闭对应的开关</p>
<h3 id="IDEA中显示空格"><a href="#IDEA中显示空格" class="headerlink" title="IDEA中显示空格"></a>IDEA中显示空格</h3><p>cmd+shift+A 打开搜索框，输入关键字 ‘show withspace’, 操作对应的开关</p>
<h3 id="快速实现-tab-lt-gt-space-转化"><a href="#快速实现-tab-lt-gt-space-转化" class="headerlink" title="快速实现 tab &lt;-&gt; space 转化"></a>快速实现 tab &lt;-&gt; space 转化</h3><ol>
<li>cmd+shift+A 打开搜索框，输入关键字 ‘convert indents’, 选择 ‘To Spaces’</li>
<li>或者在输入关键字的时候直接选择 ‘To Spaces’</li>
</ol>
<h3 id="查看类继承关系"><a href="#查看类继承关系" class="headerlink" title="查看类继承关系"></a>查看类继承关系</h3><p>Navigate -&gt; Type Hierarchy 或者 Ctrl + H</p>
<h3 id="关闭-Idea-自动更新提示"><a href="#关闭-Idea-自动更新提示" class="headerlink" title="关闭 Idea 自动更新提示"></a>关闭 Idea 自动更新提示</h3><p>快捷搜索 <code>Automatically check update for</code> 然后将更新选项去掉</p>
<h3 id="设置注释文字不顶格子"><a href="#设置注释文字不顶格子" class="headerlink" title="设置注释文字不顶格子"></a>设置注释文字不顶格子</h3><p>搜索 comment code 并将 Line comment at first column 和 Block comment at frist column 的选项 disable 掉</p>
<p><img src="comment_code.png" alt="comment code"></p>
<h3 id="Class-生成-Enter就会提示自动创建serialVersionUID"><a href="#Class-生成-Enter就会提示自动创建serialVersionUID" class="headerlink" title="Class 生成 Enter就会提示自动创建serialVersionUID"></a>Class 生成 Enter就会提示自动创建serialVersionUID</h3><ol>
<li>Setting-&gt;Inspections-&gt;Serialization issues-&gt;Serializable class without ’serialVersionUID’ </li>
<li>选上以后，在你的class中：Alt+Enter就会提示自动创建serialVersionUID了。</li>
</ol>
<h3 id="设置终端-log-size"><a href="#设置终端-log-size" class="headerlink" title="设置终端 log size"></a>设置终端 log size</h3><p>默认终端数量有限，稍微多点就把前面的给冲掉了，可以设置 Preferences &gt; Editor &gt; General &gt; Console, 勾选 Override console cycle buffer size (1024 KB)，并把值调大就行</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul>
<li>查看字节码：安装 jclasslib，重启。选中文件，选择导航栏上的 view -&gt; Show byte code with jclasslib 选项即可</li>
</ul>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table>
<thead>
<tr>
<th align="left">功能</th>
<th align="center">Mac</th>
<th align="center">Win</th>
</tr>
</thead>
<tbody><tr>
<td align="left">万能快捷键</td>
<td align="center">CMD + Shift + A</td>
<td align="center">TODO</td>
</tr>
<tr>
<td align="left">查找类</td>
<td align="center">CMD+ O</td>
<td align="center">TODO</td>
</tr>
</tbody></table>
<h2 id="Spring-中-Autowired-warning"><a href="#Spring-中-Autowired-warning" class="headerlink" title="Spring 中 Autowired warning"></a>Spring 中 Autowired warning</h2><p>Settings -&gt; Editor -&gt; Code Style -&gt; Inspections -&gt; Spring Core -&gt; Code -&gt; Field injection warning 选项 disable 掉</p>
<h2 id="maven-assembly-plugin-not-found"><a href="#maven-assembly-plugin-not-found" class="headerlink" title="maven-assembly-plugin not found"></a>maven-assembly-plugin not found</h2><p>For newer versions of IntelliJ, enable the use plugin registry option within the Maven settings as follows:</p>
<ol>
<li>Click File -&gt; Settings.</li>
<li>Expand Build, Execution, Deployment -&gt; Build Tools -&gt; Maven. Check Use plugin registry.</li>
<li>Click OK or Apply.</li>
</ol>
<p>For IntelliJ 14.0.1, open the preferences—not settings—to find the plugin registry option:</p>
<ol>
<li>Click File -&gt; Preferences. Regardless of version, also invalidate the caches:</li>
<li>Click File -&gt; Invalidate Caches / Restart.</li>
<li>Click Invalidate and Restart.</li>
</ol>
<p>When IntelliJ starts again the problem should be vanquished.</p>
<h2 id="默认注释格式"><a href="#默认注释格式" class="headerlink" title="默认注释格式"></a>默认注释格式</h2><p>默认注释格式会把双斜杠放到最前面，和习惯很不搭配，可以通过 Perferences -&gt; settings -&gt; Editor -&gt; Code style -&gt; java 跳出设置界面</p>
<p>到 Code generic tab 下面，将 Comment Code 选项下的 <code>Line comment at first coumn</code> 去掉，下一级的 <code>Add a space at comment start</code> 选上即可</p>
<h2 id="2021-04-15"><a href="#2021-04-15" class="headerlink" title="2021-04-15"></a>2021-04-15</h2><p>升级 Idea 之后，原来的项目在 Idea 里面编译失败，但是终端却可以。由此断定项目肯定是好的。Google 了一下，可以通过 File -&gt; Invalidate caches -&gt; Invalidate and Restart 重启 Idea 解决问题</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>maven</tag>
        <tag>配置</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea 破解</title>
    <url>/hexo/2019/12/26/Idea-cracking/</url>
    <content><![CDATA[<p>简单记录一下怎么破解 idea, 主要是记录下破解的文章引用，方便以后查找，引用的文章 po 主说会持续跟新的 (～￣▽￣)～</p>
<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><blockquote>
<p>PS: 预算充足的一定要支持正版啊啊啊啊 (●’◡’●)</p>
</blockquote>
<ol>
<li>去官网下载最新的 Pro 版</li>
<li>下载 JetbrainsCrack.jar 破解包，放到 idea 安装路径的 bin 文件夹下</li>
<li>打开安装好的 idea，选择试用 30 天。 进入界面之后 Help -&gt; Edit Custom VM Options, 如果提示是否创建文件，选择 Yes</li>
<li>拿到刚刚的 jar 文件的绝对路径，添加到末尾，比如我这里是：<code>-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2019.2.4\bin\JetbrainsCrack.jar</code></li>
<li>重启 idea, 再到 Help -&gt; Register, 选择 License server 方式，idea 会自动填入 <code>http://jetbrains-license-server</code>，确定</li>
<li>在重启一波，根据提示信息可以看到破解完成</li>
</ol>
<h2 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h2><ul>
<li><a href="https://www.jetbrains.com/idea/download/other.html">历史版本</a></li>
<li><a href="https://www.algerfan.cn/articles/2019/03/06/1551868940012.html">感谢给出资源和解决方案的 - AlgerFan</a></li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>破解</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea tomcat log 乱码</title>
    <url>/hexo/2020/11/02/Idea-tomcat-terminal-garbled/</url>
    <content><![CDATA[<p>Windows 平台练习 spring 项目的时候，idea 终端 tomcat 乱码，不方便调试排错，可以改动如下</p>
<p>先确定 tomcat 本身是不是有乱码。先启动一个 tomcat，查看 Windows 终端的显示情况，这部分可以查看 tomcat 安装目录的配置文件 <code>C:\Program Files\Apache Software Foundation\Tomcat 9.0\conf\logging.properties</code>，所有的编码设置成 UTF-8 <code>encoding = UTF-8</code> </p>
<p>配置 Idea 编码选项</p>
<ol>
<li>Editor -&gt; File Encoding， Global 和 Project 都设置成 UTF-8</li>
<li>Java compiler 页面的 ‘Additional command line parameters:’ 添加 <code>-encoding utf-8</code></li>
<li>项目的 tomcat 服务器 VM options: 添加 <code>-Dfile.encoding=UTF-8</code></li>
<li>Help -&gt; <code>Edit Custom VM Options...</code> 添加配置 <code>-Dfile.encoding=utf-8</code></li>
</ol>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>乱码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 面试之多线程</title>
    <url>/hexo/2021/03/26/Interview-concurrency/</url>
    <content><![CDATA[<p>备忘一下多线程相关的面试题</p>
<h2 id="Java-如何开启线程，怎么保证线程安全"><a href="#Java-如何开启线程，怎么保证线程安全" class="headerlink" title="Java 如何开启线程，怎么保证线程安全"></a>Java 如何开启线程，怎么保证线程安全</h2><p>进程是操作系统分配<strong>资源</strong>的最小系统，线程是系统进行分配<strong>任务</strong>的最小单元，线程隶属于进程。</p>
<p>如何开启：</p>
<ol>
<li>继承 Thread, 重写 run 方法</li>
<li>实现 Runable 接口，实现 run 方法</li>
<li>实现 Callable 接口，实现 call 方法。通过 FeatureTask 创建一个线程，获取线程执行返回结果</li>
<li>通过线程池开启线程</li>
</ol>
<p>3，4 有对应的只是储备可以延伸一下，不然就别提了, 这两个都是在 concurrent 包下的，等学习那个包的时候再看</p>
<p>为什么要有以上两种方式：Java 采用单继承，多实现的设计模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// extends class 实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ThreadDemo print count: &quot;</span> + i)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadDemo threadDemo1 = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        ThreadDemo threadDemo2 = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        ThreadDemo threadDemo3 = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        threadDemo1.start();</span><br><span class="line">        threadDemo2.start();</span><br><span class="line">        threadDemo3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以用 lambda 简写, 但是 lambda 的形式是不能复用的，一次性产品</span></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">&quot;ThreadDemo print count: &quot;</span> + i)).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// implement class 实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - RunnableDemo count: &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RunnableDemo runnableDemo = <span class="keyword">new</span> RunnableDemo();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(runnableDemo, <span class="string">&quot;1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnableDemo, <span class="string">&quot;2&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnableDemo, <span class="string">&quot;3&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>怎么保证线程安全：加锁</p>
<ol>
<li>JVM 锁， Synchronized</li>
<li>JDK 锁， Lock</li>
</ol>
<h2 id="Volatile-和-Synchronized-有什么区别？-Volatile-能不能保证线程安全？-DCL-Double-Check-Lock-单例为什么要加-Volatile"><a href="#Volatile-和-Synchronized-有什么区别？-Volatile-能不能保证线程安全？-DCL-Double-Check-Lock-单例为什么要加-Volatile" class="headerlink" title="Volatile 和 Synchronized 有什么区别？ Volatile 能不能保证线程安全？ DCL(Double Check Lock) 单例为什么要加 Volatile?"></a>Volatile 和 Synchronized 有什么区别？ Volatile 能不能保证线程安全？ DCL(Double Check Lock) 单例为什么要加 Volatile?</h2><p>Syncronized 用于加锁。Volatile 只保持变量的线程可见性，通常用于一个线程写，多个线程读取的情况</p>
<p>Volatile 不能保证线程安全，只保证可见行，不保证原子性</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="comment">/**volatile**/</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;-------- End Thread --------&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------- Set flag to false --------&quot;</span>);</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当注释掉 volatile 时，终端只输出 set flag 提示并挂起</span></span><br><span class="line"><span class="comment">// -------- Set flag to false --------</span></span><br><span class="line"><span class="comment">// 当使用 volatile 时，程序正常结束</span></span><br><span class="line"><span class="comment">// -------- Set flag to false --------</span></span><br><span class="line"><span class="comment">// -------- End Thread --------</span></span><br></pre></td></tr></table></figure>

<p>TODO: 补一张主/从内存 copy 图</p>
<p>DCL(Double Check Lock) 单例为什么要加 Volatile：防止指令重排，防止高并发下指令重拍导致的线程安全问题。</p>
<p>DCL 示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 懒汉式 DCL, 懒加载, 只在要用到的时候实例化</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 一定要加 volatile 不然并不安全, 第一次写的时候还错了。 https://www.jianshu.com/p/246e8f72dc9a 解释的挺清楚,</span></span><br><span class="line"><span class="comment">    * 简而言之，不加的话会有指令重排的可能。</span></span><br><span class="line"><span class="comment">    * singleDemo = new SingleDemo(); 在代码层面可以分为三步:</span></span><br><span class="line"><span class="comment">    *   分配空间</span></span><br><span class="line"><span class="comment">    *   构建实例</span></span><br><span class="line"><span class="comment">    *   实例赋值</span></span><br><span class="line"><span class="comment">    * 重排之后 实例赋值 可能要比构建实例先执行，</span></span><br><span class="line"><span class="comment">    * 那么其他线程在判断 null == singleDemo 时就会判断为 true, 但是后续对该实例地址上对象操作时可能由于实例还没有构建完成而出现异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingleDemo singleDemo; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleDemo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleDemo <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singleDemo) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingleDemo.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == singleDemo) &#123;</span><br><span class="line">                    singleDemo = <span class="keyword">new</span> SingleDemo();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleDemo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 饿汉式 DCL, 类加载即实例化</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single single = <span class="keyword">new</span> Single();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getSingle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TODO: 补图</p>
<h2 id="Java-线程锁机制是什么怎么样的？偏向锁，轻量级锁，重量级锁有什么区别，锁机制如何升级"><a href="#Java-线程锁机制是什么怎么样的？偏向锁，轻量级锁，重量级锁有什么区别，锁机制如何升级" class="headerlink" title="Java 线程锁机制是什么怎么样的？偏向锁，轻量级锁，重量级锁有什么区别，锁机制如何升级"></a>Java 线程锁机制是什么怎么样的？偏向锁，轻量级锁，重量级锁有什么区别，锁机制如何升级</h2><p>和视频给的结果不一样，视频中，只有 markword 不一样，体现出这个标志位表示了锁状态，表示很清楚问什么，难道是平台问题，回去后用 Windows 试一下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jol/jol-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jol<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jol-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以打印出 Java 对象在内存中的分布情况 --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.openjdk.jol.info.ClassLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JolDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object o = <span class="keyword">new</span> Object();</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">            System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.lang.Object object internals:</span></span><br><span class="line"><span class="comment">//  OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span></span><br><span class="line"><span class="comment">//       0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span></span><br><span class="line"><span class="comment">//       4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span></span><br><span class="line"><span class="comment">//       8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)</span></span><br><span class="line"><span class="comment">//      12     4        (loss due to the next object alignment)</span></span><br><span class="line"><span class="comment">// Instance size: 16 bytes</span></span><br><span class="line"><span class="comment">// Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// java.lang.Object object internals:</span></span><br><span class="line"><span class="comment">//  OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span></span><br><span class="line"><span class="comment">//       0     4        (object header)                           d0 a9 41 0d (11010000 10101001 01000001 00001101) (222407120)</span></span><br><span class="line"><span class="comment">//       4     4        (object header)                           00 70 00 00 (00000000 01110000 00000000 00000000) (28672)</span></span><br><span class="line"><span class="comment">//       8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)</span></span><br><span class="line"><span class="comment">//      12     4        (loss due to the next object alignment)</span></span><br><span class="line"><span class="comment">// Instance size: 16 bytes</span></span><br><span class="line"><span class="comment">// Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</span></span><br></pre></td></tr></table></figure>

<p>Java 的锁就是在对象的 Markword 中记录的一种状态，无锁，偏向锁，轻量级锁，重量级锁 对应标志位的不同状态</p>
<p>Java 的锁机制就是根据资源竞争的激烈程度不断进行锁升级的过程</p>
<p>TODO：补图</p>
<p>JVM 锁优化：休眠 5s 之后对象自带偏向锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JolDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Object o = <span class="keyword">new</span> Object();</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// -XX:UseBiasedLocking 是否打开偏向所，默认关闭</span></span><br><span class="line">        <span class="comment">// -XX:BiasedLockingStartupDelay 默认开启</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        Object o2 = <span class="keyword">new</span> Object();</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(o2).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.lang.Object object internals:</span></span><br><span class="line"><span class="comment">//  OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span></span><br><span class="line"><span class="comment">//       0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span></span><br><span class="line"><span class="comment">//       4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span></span><br><span class="line"><span class="comment">//       8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)</span></span><br><span class="line"><span class="comment">//      12     4        (loss due to the next object alignment)</span></span><br><span class="line"><span class="comment">// Instance size: 16 bytes</span></span><br><span class="line"><span class="comment">// Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// java.lang.Object object internals:</span></span><br><span class="line"><span class="comment">//  OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span></span><br><span class="line"><span class="comment">//       0     4        (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)</span></span><br><span class="line"><span class="comment">//       4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span></span><br><span class="line"><span class="comment">//       8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)</span></span><br><span class="line"><span class="comment">//      12     4        (loss due to the next object alignment)</span></span><br><span class="line"><span class="comment">// Instance size: 16 bytes</span></span><br><span class="line"><span class="comment">// Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</span></span><br></pre></td></tr></table></figure>

<h2 id="谈谈对-AQS-的理解"><a href="#谈谈对-AQS-的理解" class="headerlink" title="谈谈对 AQS 的理解"></a>谈谈对 AQS 的理解</h2><h2 id="有-ABC-三个线程，如何保证三个线程同时执行，如何在并发情况下保证三个线程一次执行，如何保证三个线程有序交错进行"><a href="#有-ABC-三个线程，如何保证三个线程同时执行，如何在并发情况下保证三个线程一次执行，如何保证三个线程有序交错进行" class="headerlink" title="有 ABC 三个线程，如何保证三个线程同时执行，如何在并发情况下保证三个线程一次执行，如何保证三个线程有序交错进行"></a>有 ABC 三个线程，如何保证三个线程同时执行，如何在并发情况下保证三个线程一次执行，如何保证三个线程有序交错进行</h2><h2 id="如何对一个字符串快速进行排序（多线程快排）"><a href="#如何对一个字符串快速进行排序（多线程快排）" class="headerlink" title="如何对一个字符串快速进行排序（多线程快排）"></a>如何对一个字符串快速进行排序（多线程快排）</h2>]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>interview</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>找出数组中重复的数字</title>
    <url>/hexo/2021/10/11/Interview-find-repeat-number/</url>
    <content><![CDATA[<p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>
<p>示例 1：</p>
<p>输入：<br>[2, 3, 1, 0, 2, 5, 3]<br>输出：2 或 3 </p>
<h2 id="解题-1"><a href="#解题-1" class="headerlink" title="解题 1"></a>解题 1</h2><p>通过 Set 的特性解题，将元素一次存入 set, 如果 add 失败，则为重复元素，返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span> &#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution().findRepeatNumber(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.add(num)) &#123;</span><br><span class="line">                <span class="keyword">return</span> num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我很喜欢这个解法，很直接了当，时间/空间 复杂度都是 O(n)</p>
<h2 id="解题-2"><a href="#解题-2" class="headerlink" title="解题 2"></a>解题 2</h2><p>活用题中另一个条: 件数字范围 0-(n-1), 如果将数组中的值一次排开，重复数字会在相同的下标下有冲突这一特性解题，时间复杂度 O(n), 空间复杂度 O(1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution2().findRepeatNumber(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; nums.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == nums[i]) &#123;</span><br><span class="line">                i ++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[nums[i]]) <span class="keyword">return</span> nums[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> tmp = nums[i];</span><br><span class="line">            nums[i] = nums[tmp]; <span class="comment">// 使用 tmp 做索引，nums[i] 会改变</span></span><br><span class="line">            nums[tmp] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>应试</tag>
        <tag>剑指 offer</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存模型与线程</title>
    <url>/hexo/2021/04/01/JVM-c12-java-memory-model-and-thread/</url>
    <content><![CDATA[<p>深入理解 Java 虚拟机第 12 章Java内存模型与线程笔记</p>
<h2 id="12-3-Java-内存模型"><a href="#12-3-Java-内存模型" class="headerlink" title="12.3 Java 内存模型"></a>12.3 Java 内存模型</h2><p>Java 内存模型(JMM) 用来屏蔽各种硬件和操作系统的内存访问差异，已实现 Java 程序在各种平台下都能达到一致的内存访问效果。 PS：看起来这就是传说中的一次编译，到处运行的功能吧。</p>
<h3 id="12-3-1-主内存和工作内存"><a href="#12-3-1-主内存和工作内存" class="headerlink" title="12.3.1 主内存和工作内存"></a>12.3.1 主内存和工作内存</h3><p>JMM 规定，</p>
<ul>
<li>所有变量都存储在主内存(Main Memory)中</li>
<li>每条线程有自己的工作内存(Working Memory)</li>
<li>线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存中的数据</li>
<li>不同线程不能访问对方的工作内存中的变量</li>
<li>线程间值传递需要通过主内存完成</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+-----------+          +-----------+           +-------+                                                                                             </span><br><span class="line">| Java      |  &lt;-----&gt; | Working   |  &lt;-----&gt;  |       |                                                                                             </span><br><span class="line">| Thread    |          | Memory    |           |       |         +---------------+                                                                   </span><br><span class="line">+-----------+          +-----------+           | Save  |         |               |                                                                   </span><br><span class="line">                                               | &amp;     |         |  Main Memory  |                                                                   </span><br><span class="line">+-----------+          +-----------+           | Load  | &lt;-----&gt; |               |                                                                   </span><br><span class="line">| Java      |          | Working   |           |       |         |               |                                                                   </span><br><span class="line">| Thread    |  &lt;-----&gt; | Memory    |  &lt;-----&gt;  |       |         |               |                                                                   </span><br><span class="line">+-----------+          +-----------+           |       |         |               |                                                                   </span><br><span class="line">                                               |       |         |               |                                                                   </span><br><span class="line">+-----------+          +-----------+           |       |         +---------------+                                                                   </span><br><span class="line">| Java      |          | Working   |           |       |                                                                                             </span><br><span class="line">| Thread    |  &lt;-----&gt; | Memory    |  &lt;-----&gt;  |       |                                                                                             </span><br><span class="line">+-----------+          +-----------+           +-------+                                </span><br></pre></td></tr></table></figure>

<h3 id="12-3-2-内存间交互操作"><a href="#12-3-2-内存间交互操作" class="headerlink" title="12.3.2 内存间交互操作"></a>12.3.2 内存间交互操作</h3><p>JMM 规定了主内存和工作内存之间的具体交互协议，定义了 8 中操作，这些操作都要求是原子的，不可再分的(对 double/long 类型的变量来说， laod, store,read,write 操作在某些平台上允许例外)</p>
<ul>
<li>lock - 作用主内存，把变量标识为线程独占</li>
<li>unlock - 作用主内存，把变量从锁定状态释放</li>
<li>read - 作用主内存，将变量从主内存传输到工作内存</li>
<li>load - 作用工作内存，把 read 操作得到的变量放入工作内存的变量副本中</li>
<li>use - 作用工作内存，把变量传给执行引擎</li>
<li>assign - 作用工作内存，将工作引擎计算结果赋值给变量</li>
<li>store - 作用工作内存，将工作内存变量值传给主内存</li>
<li>write - 作用主内存，把 store 操作传过来的变量放入主内存</li>
</ul>
<p>JMM 还对这八种操作做了一些限制，比如 store 和 write 必须顺序执行，不允许一个线程丢弃它最近的 assign 操作等，这些细节这里就不深究了，感觉是很理论的东西，以后真的用到了，再回头看啊。</p>
<h3 id="12-3-3-对于-volatile-型变量的特殊规则"><a href="#12-3-3-对于-volatile-型变量的特殊规则" class="headerlink" title="12.3.3 对于 volatile 型变量的特殊规则"></a>12.3.3 对于 volatile 型变量的特殊规则</h3><p>volatile 是 JVM 提供的最轻量级的同步机制，JMM 专门为他定义了一些特殊规则。当一个变量定义为 volatile 后，它具备两个特性：</p>
<ol>
<li>保证变量对所有线程的可见性，当一条线程修改了这个变量的值，新值对于其他线程立即可知</li>
<li>禁止指令重排序优化 - PS: java 1.5 之前这个关键字有问题，并不能保证可见性</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实验 #1 volatile 虽然是线程可见的，但是多线程同时写操作时依然线程不安全</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 声明一个 volatile 的 int 变量，给初始值 0，起 20 个线程，每个线程都对变量做 10000 次加 1 操作，统计最终计算结果。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 结论：虽然 volatile 保证了变量的线程可见性，但是由于 race++ 是非原子性的。具体情况可能如下：</span></span><br><span class="line"><span class="comment">* 线程A：进行累加操作，取得计算前的值 100，并进行累加操作</span></span><br><span class="line"><span class="comment">* 线程B：取得累加前的值 100 进行操作</span></span><br><span class="line"><span class="comment">* 线程A：完成操作 101 并赋值给主内存</span></span><br><span class="line"><span class="comment">* 线程B：完成操作 101 并赋值给主内存</span></span><br><span class="line"><span class="comment">* 所以计算结果总是小于理论值 20 0000</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> race = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                    race++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 这个实验用 Idea 会失败，Idea 在起线程的时候会通过守护进程的方式，所以 activeCount 一直为 2, 死循环。使用 Eclipse 则能正常工作。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(race);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 34490</span></span><br></pre></td></tr></table></figure>

<p>volatile 只保证可见性，在不符合以下两条规则的运算场景中，还是需要通过加锁保证原子性：</p>
<ul>
<li>运算结果并不依赖变量的当前值，或者能够保证只有单一的线程修改变量值</li>
<li>变量不需要与其他的状态变量共同参与不变约束</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实验 #2-1</span></span><br><span class="line"><span class="comment">* 禁止指令重排序优化为代码。在没有添加 volatile 修饰的时候，由于指令重排序优化，initialized = true 可能被提前执行，导致线程 B 执行异常</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">Map configOptions;</span><br><span class="line"><span class="keyword">char</span>[] configText;</span><br><span class="line"><span class="comment">// 此变量必须定义为 volatile</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> initialized = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设以下代码在线程 A 中进行</span></span><br><span class="line"><span class="comment">// 模拟读取配置星系，当读取完成后</span></span><br><span class="line"><span class="comment">// 将 initialized 设置为 true，同志其他线程配置可用</span></span><br><span class="line">configOptions = <span class="keyword">new</span> HashMap();</span><br><span class="line">configText = readConfigFile(fileName);</span><br><span class="line">processConfigOptions(configText, configOptions);</span><br><span class="line">initialized = <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设以下代码在线程 B 中进行</span></span><br><span class="line"><span class="comment">// 等待 initialized 为 true，代表 A 已完成初始化</span></span><br><span class="line"><span class="keyword">while</span>(!initialized) &#123;</span><br><span class="line">    sleep();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用线程 A 中初始化好的配置信息</span></span><br><span class="line">doSomethingWithConfig();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实验 #2-2</span></span><br><span class="line"><span class="comment">* DCL 双锁检测</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            syncronized(Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本章最后还介绍了 volatile 底层实现和 JMM 中定义的规则，暂时就不深入了。</p>
<h3 id="12-3-4-针对-long-和-double-型变量的特殊规则"><a href="#12-3-4-针对-long-和-double-型变量的特殊规则" class="headerlink" title="12.3.4 针对 long 和 double 型变量的特殊规则"></a>12.3.4 针对 long 和 double 型变量的特殊规则</h3><p>虚拟机允许将没有被 volatile 修饰的 64 位数据的读写操作分为两次 32 位的操作进行，即不保证 64 位数据类型的 load, store, read, write 的原子性。这就是所谓的 ‘long 和 double 的非原子性协定’， 目前主流商用 64 位虚拟机并不会出现非原子访问。</p>
<h3 id="12-3-5-原子性，可见性与有序性"><a href="#12-3-5-原子性，可见性与有序性" class="headerlink" title="12.3.5 原子性，可见性与有序性"></a>12.3.5 原子性，可见性与有序性</h3><p><strong>原子性</strong>：JMM 直接保证 read, load, assign, use, store 和 write 操作的原子性，对于一个更大范围的原子性保证，JMM 提供了 lock 和 unlock 这两个操作，反应到字节码就是 monitorenter/monitorexit，Java 代码层面就是 synchronized 关键字了</p>
<p><strong>可见性</strong>：当一个线程修改了共享变量值时，其他线程能够立即得知这个修改。对于 volatile 类型的数据，JMM 通过修改后立即同步回主内存，在变量读取前刷新变量值以保证可见性，普通变量不是立即执行的。</p>
<p>除了 volatile 外，synchronized 和 final 也能实现可见性。synchronized 通过规则：在 unlock 之前必须把此变量同步回主内存中(执行 store，write)来达到目的。final 的可见性指：被 final 修饰的字段在构造器中一旦被初始化完成，并且构造器没有吧 this 引用传递出去，那么其他线程就能看到 final 字段的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* i， j 都具备可见性，不许同步就可以被其他线程访问</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 后续省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 可也以在构造函数中初始化</span></span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 后续省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>有序性</strong>：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有操作都是无序的。volatile 和 synchronized 关键字可用于保证线程操作之间的有序性，volatile 本省包含禁止指令重排的语义，而 synchronized 则是由 ‘一个变量在同一时刻只允许一条线程对其进行 lock 操作’ 的这条规则决定。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>JMM</tag>
        <tag>内存模型</tag>
        <tag>concurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM c9 class loader and sub system execution samples</title>
    <url>/hexo/2021/09/10/JVM-c9-class-loader-and-sub-system-execution-samples/</url>
    <content><![CDATA[<p>代码编译的结果从本地机器码转为字节码，是存储格式发展的一小步，却是编程语言发展的一大步。</p>
<h2 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h2><p>在 Class 文件格式与执行引擎这部分里，用户的程序能直接参与的内容并不多，Class 以何种格式存储，类型和施加在，如何连接，以及虚拟机如何执行字节码指令等都是由虚拟机直接控制的行为，用户程序无法对其进行改变。能操作的，主要是字节码生成与类加载两个部分的功能，但仅仅在如何处理这两点上，就已经出现了许多值得欣赏借鉴的思路，这些思路后来成为很多常用功能和程序实现的基础。</p>
<h2 id="9-2-案例分析"><a href="#9-2-案例分析" class="headerlink" title="9.2 案例分析"></a>9.2 案例分析</h2><p>四个案例，关于类加载和字节码各两个。</p>
<h3 id="9-2-1-Tomcat-正统的类加载架构"><a href="#9-2-1-Tomcat-正统的类加载架构" class="headerlink" title="9.2.1 Tomcat: 正统的类加载架构"></a>9.2.1 Tomcat: 正统的类加载架构</h3><p>主流的 Java Web 服务器，如 Tomcat, Jetty 等都实现了自己定义的类加载器，而且还不止一个。因为一个功能健全的 Web 服务器，都要解决如下这些问题：</p>
<ul>
<li>部署在同一个服务器上的两个 web 应用程序所使用的 Java 类库可以实现互相隔离。两个不同应用可能依赖同一个第三方类库的不同版本，不能要求每个类库在一个服务器中只能有一份，服务器应该能够保证两个独立应用程序的类库可以互相独立使用。</li>
<li>部署在同一个服务器上的两个 web 应用所使用的 Java 类库可以互相共享。与前一个相反，但很常见，如用户可能有 10 个使用 Spring 的应用部署在统一台服务器，如果把 10 份 Spring 分别存在应用的隔离目录，将会很大的浪费资源。磁盘空间是其次，主要是良妃内存，很容易造成方法去过度膨胀的风险。</li>
<li>服务器需要尽可能保证自身的安全不受部署的 Web 应用程序的影响。一般来说，给予安全考虑，服务器所使用的类库应该与程序类库相互独立。</li>
<li>只是 JSP 应用的 Web 服务器，十有八九都需要支持 HotSwap 功能。JSP 由于其纯文本特性，修改几率远大于第三方类库和自己的 Class 文件。ASP，PHP 和 JSP 这些网页应用也将修改后无需重启作为优势来看待，因此，主流 Web 服务器都会支持 JSP 生成类的热替换。</li>
</ul>
<p>由于以上问题，不是 web 应用时，单独一个 ClassPath 就不能满足要求了，所以各种 web 服务器不约而同的提供了好几个不同还以的 ClassPath 路径供用户存放第三方类库。一般这些路径都以 lib 或 classes 命名。不同路径中的类库，具备不同的访问范围和服务对象，通常每个目录都会对应一个自定义类加载器去加载防止在里面的 Java 类库。下面以 Tomcat 为例，分析其规划。</p>
<p>Tomcat 目录结构中，有三组目录可以设置，一组默认，供4组。分别是</p>
<ul>
<li>/common 目录，类库可被 Tomcat 和所有 Web 应用共同使用</li>
<li>/server 目录，类库可被 Tomcat 使用，对所有 Web 应用不可见</li>
<li>/shared 目录，类库可以被所有 Web 应用共同使用，对 Tomcat 不可见</li>
<li>/WebApp/WEB-INF 目录，仅被该 Web 应用使用，对 Tomcat 和其他应用不可见</li>
</ul>
<img  src=http://www.plantuml.com/plantuml/svg/bPAnJiCm54LtVuKbvl81b0Kg5iG64WDYU8cVH91ZH_53z0Ew40c9eGmWLC5M9jI50TJFSS9du2HE98imPFEzyRt7yJCb996VwJG6Ab_kRV5cdzRLywBQVDlYzMUxBLUVvMh1cD82UHHBVi7imuSjrlqE5s27MfEX738-as0CFz4WC6UNFeTDhhnxjvl787Sq9rGcqMeu1otlQrajGzv1bid47VdVPEoIE-3sO2HlS2eJXNlzQbTe8XHJmZarheFCT9fg5K1QgwdlsdbN3-JA5Ooc-5p8yURmdvYnZDCho544XDOQxh_52B9iBEGS8pU30D9Qmv1hCvfmRC9wfp7_qrw_oFt9f7vX3FtQJOKny2AkHTo9VcozPUhlnelkBbX_ARNR7FuN>

<p>实线节点是 JDK 自带加载起，虚线是 Tomcat 自建的加载器。Common类加载器，Catalina类加载器(也称为Server类加载器)，Shared类加载器和Webapp类加载器则是 Tomcat 自定义的类加载器，分别加载 /common/<em>, /server/</em>, shared/* 和 /WebApp/WEB-INF/* 中的 Java 类库。WebApp 类加载器和 JSP 类加载器通常还会有多个实例，每个 Web 应用对应一个 WebApp 类加载器，每个 JSP 文件对应一个 JasperLoader 类加载器。</p>
<p>从图可以看出，Common 类加载器能加载的类都可以被 Catalina 类加载器和 Shared 类加载器使用，而 Catalina 类加载器和 Shared 类加载器自己能加载的类则与对方相互隔离。WebApp类加载器可以使用Shared类加载器加载到的类，但各个WebApp类加载器实例之间相互隔离。而JasperLoader的加载范围仅仅是这个JSP文件所编译出来的那一个Class文件，它存在的目的就是为了被丢弃：当服务器检测到JSP文件被修改时，会替换掉目前的JasperLoader的实例，并通过再建立一个新的JSP类加载器来实现JSP文件的HotSwap功能。</p>
<p>上面讲的是 Tomcat6 之前的加载器架构，Tomcat6 之后对默认的目录结构做了简化，只有指定 tomcat/conf/catalina.properties 的 server.loader 和 share.loader 后才会真正建立 Catalina类加载器和Shared类加载器实例，否则用到的地方都会用 Common 类加载器实例代替，而默认的配置文件中没有设置这两项，所以 Tomcat6 之后顺理成章的把 /common, /server 和 /shared 三个目录合并在一起变成 /lib 目录，相当于之前的 /common 目录的作用，是 Tomcat 团队简化部署的一项改动。</p>
<h3 id="9-2-2-OSGi：灵活的类加载器架构"><a href="#9-2-2-OSGi：灵活的类加载器架构" class="headerlink" title="9.2.2 OSGi：灵活的类加载器架构"></a>9.2.2 OSGi：灵活的类加载器架构</h3><p>没兴趣，用到再看</p>
<h3 id="9-2-3-字节码生成技术与动态代理的实现"><a href="#9-2-3-字节码生成技术与动态代理的实现" class="headerlink" title="9.2.3 字节码生成技术与动态代理的实现"></a>9.2.3 字节码生成技术与动态代理的实现</h3><p>有兴趣，等 Tomcat 完结了再看，不过应该要先看完第八章的内容才行</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>类加载</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Autocloseable</title>
    <url>/hexo/2022/07/22/Java-Autocloseable/</url>
    <content><![CDATA[<p>最近在看其他 team 的代码时，看到一个在 Filter 中添加 AutoCloseable 的方式来达到记录 perf log 的目的，听新颖的，记录一下并熟悉一下 AutoCloseable 接口的用法</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>在这之前，我一直以为，想要在方法(request)执行前后记录执行时间，只能通过新建一个 拦截器 或者使用类似 Aspect 的技术。API team 的这个实现着实让我对 AutoCloseable 的使用有了新认识，之前对这个接口只是看到过的程度，哈哈。大致模型如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// perf 类实现 AutoCloseable 接口，在 close</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAutoCloseable</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleAutoCloseable</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Start to record time cost for scope: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Stop record, print time cost: xx ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(SimpleAutoCloseable auto = <span class="keyword">new</span> SimpleAutoCloseable(<span class="string">&quot;Request&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;special filter logic...&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;filterChain.doFilter(request, response)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类中，我们调用 client 的方法触发 try-with-resource 流程，查看 console log, 可以看到当 chain 的 doFilter 整体执行结束之后，自动打印了 perf 信息，666</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_AutoCloseable_class_will_execute_close_after_try_block</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Client client = <span class="keyword">new</span> Client();</span><br><span class="line">    client.doFilter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start to record time cost for scope: Request</span></span><br><span class="line"><span class="comment">// special filter logic...</span></span><br><span class="line"><span class="comment">// filterChain.doFilter(request, response)</span></span><br><span class="line"><span class="comment">// Stop record, print time cost: xx ms</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>AutoCloseable</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 中 C 语言风格的参数声明</title>
    <url>/hexo/2020/08/13/Java-C-Style-Declaration/</url>
    <content><![CDATA[<p>最近在调查一个 build issue 的时候发现有一段函数声明大致如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ParameterTest parameterTest = <span class="keyword">new</span> ParameterTest();</span><br><span class="line">        parameterTest.test(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;Jack&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String list[])</span> </span>&#123;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是就感觉很好奇，<code>test(String list[])</code> 这样的声明竟然能通过编译检测。查了下资料，这中做法是合法的，是 C 语言中数组的声明方式，大概是早期为了让 C 程序员能更好的迁移过来做的兼容把，表达的语意和 <code>test(String[] list)</code> 是完全一样的。</p>
<p>果然一个老项目里面什么情况都能遇到 ╮(￣▽￣””)╭</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 通过 ClassLoader 获取 resources</title>
    <url>/hexo/2020/11/06/Java-ClassLoader-getResources/</url>
    <content><![CDATA[<p>今天突然发现了一个 class loader 的新用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Enumeration&lt;URL&gt; urls = Thread.currentThread().getContextClassLoader().getResources(<span class="string">&quot;my.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>getResources</code> 竟然连 jar 包中的资源文件也会加载，以前一只以为只会加载当前项目的资源的，孤陋寡闻了，哈哈哈哈 ε-(´∀｀; )</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>Java HashMap things</title>
    <url>/hexo/2021/03/09/Java-HashMap-things/</url>
    <content><![CDATA[<p>今天再看一个 defect 的时候涉及到 HashMap 存储的问题，回头想一下发现自己只对 HashMap 以 key 的 Hash 作为依存储依据这点比较清楚外，其他的印象很模糊，写这篇文章记录一下。想要了解的问题如下：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> HashMap 再存储时是否只用 key 的 hash 做依据，和 value 有关系吗 - 只和 key 有关系，只用 key 的 hashCode 做 hash 后的结果作为判断依据</li>
<li><input checked="" disabled="" type="checkbox"> HashMap 底层使用什么数据结构存储的 - array + list/tree(红黑树)</li>
<li><input checked="" disabled="" type="checkbox"> HashMap 的类继承关系</li>
</ul>
<p>以后对 HashMap 的知识点都可以考虑在这篇中做扩展，做成一个总集篇</p>
<p>有趣的知识点：</p>
<ul>
<li>为什么因子选在 0.75? - 在头部注释中给出了解释，根据统计学的结果，hash 冲突符合泊松分布，在 7-8 之间时冲突概率最低</li>
</ul>
<h2 id="HashMap-图示"><a href="#HashMap-图示" class="headerlink" title="HashMap 图示"></a>HashMap 图示</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"> +-------------------------------------------+ </span><br><span class="line"> |      |      |       |       |             | </span><br><span class="line"> | Node | Node | Tree  | Node  | ...         | </span><br><span class="line"> |      |      |       |       |             | </span><br><span class="line"> |      |      |       |       |             | </span><br><span class="line"> |------|------|       |------ |             | </span><br><span class="line"> | next | next |       | next  |             | </span><br><span class="line"> +------|------|-------|-------|-------------+ </span><br><span class="line">    .                                          </span><br><span class="line">    .                                          </span><br><span class="line">    .                                          </span><br><span class="line">+------+                                       </span><br><span class="line">| Node |                                       </span><br><span class="line">|      |                                       </span><br><span class="line">|      |                                       </span><br><span class="line">|----- |                                       </span><br><span class="line">| next |                                       </span><br><span class="line">+------+                                       </span><br></pre></td></tr></table></figure>

<h2 id="HashMap-的类继承关系"><a href="#HashMap-的类继承关系" class="headerlink" title="HashMap 的类继承关系"></a>HashMap 的类继承关系</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  I               I                                                                                                                               </span><br><span class="line"> +--------+      +----------------------------+                                                                                                   </span><br><span class="line"> |  Map   |      | Map/Cloneable/Serializable |                                                                                                   </span><br><span class="line"> +--------+      +----------------------------+                                                                                                   </span><br><span class="line">      ^                    ^                                                                                                                      </span><br><span class="line">      |                    |                                                                                                                      </span><br><span class="line"> C    |                    |                                                                                                                      </span><br><span class="line">+-------------+            |                                                                                                                      </span><br><span class="line">| AbstractMap |            |                                                                                                                      </span><br><span class="line">+-------------+            |                                                                                                                      </span><br><span class="line">      ^                    |                                                                                                                      </span><br><span class="line">      |                    |                                                                                                                      </span><br><span class="line">      |                    |                                                                                                                      </span><br><span class="line">      |                    |                                                                                                                      </span><br><span class="line">      |                    |                                                                                                                      </span><br><span class="line">   +-------------------------------+                                                                                                              </span><br><span class="line">   |           HashMap             |                                                                                                              </span><br><span class="line">   |                               |                                                                                                              </span><br><span class="line">   +-------------------------------+ </span><br></pre></td></tr></table></figure>

<p>JDK8 中对 HashMap 的实现做了改动，原先是 Array + link list, 时间复杂度 O(1)+O(n) 当哈希冲突严重时，性能就取决于后者了。新的实现采用 Array + list/tree, 当 list 长度大于 8 时就会将 list 转化为红黑树，即 O(1)+O(logn) 比原先会有提升</p>
<h2 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a>基本数据结构</h2><p>Map.Entry: 定义了基本 get/set 方法的接口</p>
<p>HashMap.Node: 单项可延伸的链表结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line"><span class="keyword">final</span> K key;</span><br><span class="line">V value;</span><br><span class="line">Node&lt;K,V&gt; next;</span><br></pre></td></tr></table></figure>

<p>LinkedHashMap.Entry: 增加了 before，after 属性，但是没有调用，好奇怪</p>
<p>HashMap.TreeNode: 红黑树实现，extends LinkedHashMap.Entry, 但是在我看来直接继承 HashMap.Node 不是更好？</p>
<h2 id="put-方法实现"><a href="#put-方法实现" class="headerlink" title="put 方法实现"></a>put 方法实现</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">               +----------------+                             </span><br><span class="line">               |   Start        |                             </span><br><span class="line">               | Give node info |                             </span><br><span class="line">               +----------------+                             </span><br><span class="line">                       |                                      </span><br><span class="line">                       |                                      </span><br><span class="line">                       v                                      </span><br><span class="line">                 +-----------+                                </span><br><span class="line">                 |If Conflict|                                </span><br><span class="line">                 +-----------+                                </span><br><span class="line">             No   /         \   Yes                           </span><br><span class="line">                 /           \                                </span><br><span class="line">                v             v                               </span><br><span class="line">+------------------+      +------------------+                </span><br><span class="line">|  Creae new node  |      | Check key &amp; node |                </span><br><span class="line">+------------------+      +------------------+                </span><br><span class="line"> |                            /      |      \                 </span><br><span class="line"> |                           /       |       \                </span><br><span class="line"> |                          /        |        \               </span><br><span class="line"> |                         /         |         \              </span><br><span class="line"> |                        /          |          \             </span><br><span class="line"> |                       v           v           v            </span><br><span class="line"> |       +---------------+ +------------------+ +-----------+ </span><br><span class="line"> |       | key same with | |Node is tree type | |List type  | </span><br><span class="line"> |       | first element | +------------------+ +-----------+ </span><br><span class="line"> |       +---------------+    |                  /            </span><br><span class="line"> |                |           |                 /             </span><br><span class="line"> |                |           |                /              </span><br><span class="line"> |                v           v               v               </span><br><span class="line"> |           +-----------------------------------+            </span><br><span class="line"> |--------&gt;  |          Check if resize          |            </span><br><span class="line">             +-----------------------------------+            </span><br><span class="line">                         |                                    </span><br><span class="line">                         |                                    </span><br><span class="line">                         v                                    </span><br><span class="line">                     +--------+                               </span><br><span class="line">                     |  End   |                               </span><br><span class="line">                     +--------+                               </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) <span class="comment">// 如果 tab 是空的，给一个初始 size</span></span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>) <span class="comment">// 如果 bucket 位置没有值，直接填充一个</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 如果 bucket 位置上有值，则再看</span></span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) <span class="comment">// 如果 key 已经存在，将值放入 e 在后面做 value 替换</span></span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode) <span class="comment">// 如果是 tree, 则在 tree 后面添加节点</span></span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">// 处理 linked list 的情况</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123; <span class="comment">// 如果是末尾节点，直接 append</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// 如果达到转化阀值，将链表转化为树</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) <span class="comment">// 如果 key 重复，跳出循环</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e; <span class="comment">// 给 p 赋值，继续循环</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// 对已经存在的 node 做值替换</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="get-方法实现"><a href="#get-方法实现" class="headerlink" title="get 方法实现"></a>get 方法实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Implements Map.get and related methods.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the node, or null if none</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">   Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">   <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp; (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (first.hash == hash &amp;&amp; ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) <span class="comment">// always check first node</span></span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">      <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode) <span class="comment">// 如果是 tree 类型，调用 tree 的 get 方法</span></span><br><span class="line">               <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123; <span class="comment">// 否则遍历链表</span></span><br><span class="line">               <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                  ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                  <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h2><p>可以参考这篇内容: <a href="https://segmentfault.com/a/1190000015812438">https://segmentfault.com/a/1190000015812438</a> , 现在状态不太好，看不进去。。。</p>
<h2 id="Idea-调试优化"><a href="#Idea-调试优化" class="headerlink" title="Idea 调试优化"></a>Idea 调试优化</h2><p>当调试 HashMap 时，默认设置下 Node 只显示 K，V 值，对其他细节，比如静态变量，Node 的 next 都是忽略的，可以通过以下方式查看</p>
<p><strong>临时方案</strong></p>
<p>在底部 debug 界面，选中需要查看的 entry, 右键 View as -&gt; Object 即可，但是下次调试是会重制，需要再次设置</p>
<p><strong>永久方案</strong></p>
<p>Debug 是选中 tab 下的元素，右键 View as -&gt; Create… -&gt; Apply render to object of type 中输入 <code>java.util.HashMap$Node</code> 再 Apply 以下就行了。我这边是自动填充好了的</p>
<p><strong>查看静态变量</strong></p>
<p>Customize Data Views -&gt; 勾选 static fields, static final fields</p>
<p>PS: 我本地设置了貌似没什么效果 （；￣ェ￣）</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.devwu.com/2018/06/07/IntelliJ%20IDEA%20%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%97%B6%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E5%8F%98%E9%87%8F/">Debug 设置</a></li>
<li><a href="https://yikun.github.io/2015/04/01/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/">HashMap 原理</a></li>
<li><a href="http://openjdk.java.net/jeps/180">官方针对 7-8 HashMap 实现修改的说明</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>collection</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JMX</title>
    <url>/hexo/2021/09/24/Java-JMX/</url>
    <content><![CDATA[<p>Tomcat 中用到这个技术，但是很陌生，手机一下资料，整理如下。</p>
<p>JMX - java management extension, 简单理解就是 Java 提供了一套规范，可以在 JVM 运行时，操作对象。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>新建一个类并在 MBeanServer 中注册，等程序运行时，我们可以通过 jconsole 对运行时的对象进行操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloMBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloWorld</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloWorld</span><span class="params">(String str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTelephone</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">implements</span> <span class="title">HelloMBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTelephone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get Telephone&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloWorld</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;helloWorld:&quot;</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get name 123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set name 123&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get age 123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set age 123&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> javax.management.ObjectName;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MBeanServer server = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">        ObjectName helloName = <span class="keyword">new</span> ObjectName(<span class="string">&quot;jmxBean:name=hello&quot;</span>);</span><br><span class="line">        <span class="comment">//create mbean and register mbean</span></span><br><span class="line">        server.registerMBean(<span class="keyword">new</span> Hello(), helloName);</span><br><span class="line">        Thread.sleep(<span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ObjectName(&quot;jmxBean:name=hello&quot;);</code> 中括号中的内容类似 entrypoint 可以确定我们要监测的节点。下一句就是注册 bean 到 MBeanServer。运行程序后 thread 会 hold.</p>
<p>这时启动 jdk 的 bin 目录下的 jconsole 客户端，选择 main 这个 thread, 链接上去</p>
<p><img src="jconsole_connection.png" alt="connection"></p>
<p>选中 MBean tab，展开 jmxBean 可以看到我们定义的 MBean</p>
<p><img src="mbbean_show.png" alt="show"></p>
<h2 id="其他链接方式"><a href="#其他链接方式" class="headerlink" title="其他链接方式"></a>其他链接方式</h2><p>JMX 是一个规范，除了 jconsole 这中修改方式，还是通过 web, client 等，只需要实现了对应的接口就行。暂时没用到，略。</p>
<p>这篇博客说的很详细，有需要可以参考一下 <a href="https://www.cnblogs.com/dongguacai/p/5900507.html">cnblog</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>JMX</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 中实现 base64 编码/解码</title>
    <url>/hexo/2021/05/17/Java-base64-encode-and-decode/</url>
    <content><![CDATA[<p>Java util 包中自带了 base 64 的编码/解码方法，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base64Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String origin = <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">        String encodeRet = Base64.getEncoder().encodeToString(origin.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;Encode result: &quot;</span> + encodeRet);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Decode result: &quot;</span> + <span class="keyword">new</span> String(Base64.getDecoder().decode(encodeRet)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Encode result: SGVsbG9Xb3JsZA==</span></span><br><span class="line"><span class="comment">// Decode result: HelloWorld</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>base64</tag>
      </tags>
  </entry>
  <entry>
    <title>Class 这个类中的方法使用记录</title>
    <url>/hexo/2020/12/24/Java-class-methods-note/</url>
    <content><![CDATA[<p>最近在使用 Class 这个类的时候遇到一些问题，顺便记录一下这个类中方法的使用案例</p>
<h2 id="isAssignFrom"><a href="#isAssignFrom" class="headerlink" title="isAssignFrom"></a>isAssignFrom</h2><p>简单来说就是测试传入的 Class 是不是前面的 Class 本身或子类, 同时适用于接口实现的情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Number isAssignableFrom Number.class: &quot;</span> + Number.class.isAssignableFrom(Number.class));</span><br><span class="line">System.out.println(<span class="string">&quot;Number isAssignableFrom Integer.class: &quot;</span> + Number.class.isAssignableFrom(Integer.class));</span><br><span class="line">System.out.println(<span class="string">&quot;Integer.class isAssignableFrom Number: &quot;</span> + Integer.class.isAssignableFrom(Number.class));</span><br><span class="line">System.out.println(<span class="string">&quot;Collection.class isAssignableFrom ArrayList.class: &quot;</span> + Collection.class.isAssignableFrom(ArrayList.class));</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Number isAssignableFrom Number.class: true</span></span><br><span class="line"><span class="comment">// Number isAssignableFrom Integer.class: true</span></span><br><span class="line"><span class="comment">// Integer.class isAssignableFrom Number: false</span></span><br><span class="line"><span class="comment">// Collection.class isAssignableFrom ArrayList.class: true</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>Java clone object</title>
    <url>/hexo/2021/05/04/Java-clone-object/</url>
    <content><![CDATA[<h2 id="为什么要拷贝"><a href="#为什么要拷贝" class="headerlink" title="为什么要拷贝"></a>为什么要拷贝</h2><p>因为方便，如果我有一个类有好多属性，固然可以用 new Object + set attribute 的方式达到拷贝的目的，但是麻烦。。。</p>
<h2 id="如何拷贝"><a href="#如何拷贝" class="headerlink" title="如何拷贝"></a>如何拷贝</h2><ol>
<li>实现 Cloneable 接口，否则会抛 CloneNotSupportedException </li>
<li>重写 clone 方法，修改修饰符为 public</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        Person clone = person.clone();</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor + toString</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = (Person)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person&#123;age=1, name=&#x27;jack&#x27;&#125;</span></span><br><span class="line"><span class="comment">// Person&#123;age=1, name=&#x27;jack&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="浅拷贝-shallow-Vs-深拷贝-deep"><a href="#浅拷贝-shallow-Vs-深拷贝-deep" class="headerlink" title="浅拷贝(shallow) Vs 深拷贝(deep)"></a>浅拷贝(shallow) Vs 深拷贝(deep)</h2><blockquote>
<p>浅拷贝</p>
</blockquote>
<p>引用类型(接口，对象等复杂类型)的成员变量不会做拷贝，克隆对象会持有和原对象同一个引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 修改 Person 类定义，新增一个引用类型的成员变量 Address</span></span><br><span class="line"><span class="comment">* 为原型 person 设置 Address 变量，并设置值为 shanghai</span></span><br><span class="line"><span class="comment">* clone 一个 person，然后修改 Address 值为 hangzhou</span></span><br><span class="line"><span class="comment">* 由于是浅拷贝，持有的 Address 引用是同一个，所以两个 Person 实例的 Address 都改变了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        Address addr = <span class="keyword">new</span> Address(<span class="string">&quot;shanghai&quot;</span>);</span><br><span class="line">        person.addr = addr;</span><br><span class="line"></span><br><span class="line">        Person clone = person.clone();</span><br><span class="line">        addr.addr = <span class="string">&quot;hangzhou&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    Address addr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor + toString</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = (Person)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    String addr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor + toString </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面这种表现方式和我们想要的有很大的出入, 我们想要的是连这些 field 也一起拷贝，深拷贝由此而来</p>
<blockquote>
<p>深拷贝</p>
</blockquote>
<p>在浅拷贝的基础上，你还需要做如下事情</p>
<ol>
<li>成员变量也需要实现 Cloneable 接口并重写 clone 方法</li>
<li>在原来 clone 方法后面，添加成员变量的 clone 调用并赋值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        Address addr = <span class="keyword">new</span> Address(<span class="string">&quot;shanghai&quot;</span>);</span><br><span class="line">        person.addr = addr;</span><br><span class="line"></span><br><span class="line">        Person clone = person.clone();</span><br><span class="line">        addr.addr = <span class="string">&quot;hangzhou&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    Address addr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor + toString</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = (Person)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        clone.addr = addr.clone(); <span class="comment">// field 的 clone 调用和赋值</span></span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    String addr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor + toString</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Address <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Address addr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            addr = (Address) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person&#123;age=1, name=&#x27;jack&#x27;, addr=Address&#123;addr=&#x27;hangzhou&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">// Person&#123;age=1, name=&#x27;jack&#x27;, addr=Address&#123;addr=&#x27;shanghai&#x27;&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="解决多层-clone-问题"><a href="#解决多层-clone-问题" class="headerlink" title="解决多层 clone 问题"></a>解决多层 clone 问题</h2><p>如果需要复制的对象包含很多成员变量，或者潜逃了很多层，那么重写 clone 也会变得相当麻烦，这个时候可以使用 Serializable 接口来简化序列化操作</p>
<p>这种实现不需要实现 Cloneable 接口，只需要相关的类实现 Serializable 接口即可，感觉就是代码看着会复杂一点，其他倒是没什么弊端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        Address addr = <span class="keyword">new</span> Address(<span class="string">&quot;shanghai&quot;</span>);</span><br><span class="line">        person.addr = addr;</span><br><span class="line"></span><br><span class="line">        Person clone = person.clone();</span><br><span class="line">        addr.addr = <span class="string">&quot;hangzhou&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">926205369611773951L</span>;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    Address addr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor + toString</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将该对象序列化成流,因为写在流里的是对象的一个拷贝，而原对象仍然存在于JVM里面。所以利用这个特性可以实现对象的深拷贝</span></span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">            oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">// 将流序列化成对象</span></span><br><span class="line">            ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">            clone = (Person) ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1360519918551295988L</span>;</span><br><span class="line">    String addr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor + toString</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Person&#123;age=1, name=&#x27;jack&#x27;, addr=Address&#123;addr=&#x27;hangzhou&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">// Person&#123;age=1, name=&#x27;jack&#x27;, addr=Address&#123;addr=&#x27;shanghai&#x27;&#125;&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>拷贝</tag>
        <tag>clone</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 代码块记录</title>
    <url>/hexo/2020/08/10/Java-code-snippet/</url>
    <content><![CDATA[<p>记录平时遇到的一些精巧的小代码段</p>
<h2 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h2><p>摘自 On Java 8 泛型章节。元组的定义：用户只能取值而不能设置值，所以这里没有使用 getter/setter 的封装形式，而是使用 public + final 关键字实现了该功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tuple2</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> A a1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> B a2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tuple2</span><span class="params">(A a, B b)</span> </span>&#123; a1 = a; a2 = b; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">rep</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> a1 + <span class="string">&quot;, &quot;</span> + a2; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + rep() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><h3 id="实现-interface"><a href="#实现-interface" class="headerlink" title="实现 interface"></a>实现 interface</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyPrint print;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print = System.out::println;</span><br><span class="line">        print.print(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyPrint</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: jack</span></span><br></pre></td></tr></table></figure>

<h3 id="判断-collection-中是否包含某元素"><a href="#判断-collection-中是否包含某元素" class="headerlink" title="判断 collection 中是否包含某元素"></a>判断 collection 中是否包含某元素</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).stream.anyMatch(sub -&gt; sub &gt; <span class="number">3</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>Comparator 比较器</title>
    <url>/hexo/2021/11/17/Java-comparator-interface/</url>
    <content><![CDATA[<p>看 Spring 的 BeanFactoryProcessor 部分的时候，看到 sort processor 方法中用了 Comparator 做比较依据， 已经忘的差不多了，复习一下</p>
<p>创建一个简单的对象，有 name 和 age 属性，分别新建两个比较器，一个是 name 字母顺序，一个是 age 大小逆序。自定义的比较器实现 Comparator 接口并重写 compare 方法即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a1 = <span class="keyword">new</span> A(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        A a2 = <span class="keyword">new</span> A(<span class="string">&quot;b&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        List&lt;A&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(a1);</span><br><span class="line">        list.add(a2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;before sort: &quot;</span> + list);</span><br><span class="line">        list.sort(<span class="keyword">new</span> AgeSort());</span><br><span class="line">        System.out.println(<span class="string">&quot;after sort age: &quot;</span> + list);</span><br><span class="line">        list.sort(<span class="keyword">new</span> NameSort());</span><br><span class="line">        System.out.println(<span class="string">&quot;after sort name: &quot;</span> + list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// before sort: [A(name=a, age=1), A(name=b, age=2)]</span></span><br><span class="line"><span class="comment">// after sort age: [A(name=b, age=2), A(name=a, age=1)]</span></span><br><span class="line"><span class="comment">// after sort name: [A(name=a, age=1), A(name=b, age=2)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * age 逆序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AgeSort</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">A</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(A o1, A o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o2.getAge() - o1.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * name 顺序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameSort</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">A</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(A o1, A o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>comparator</tag>
      </tags>
  </entry>
  <entry>
    <title>创建可运行 jar 应用</title>
    <url>/hexo/2021/11/11/Java-create-jar-application/</url>
    <content><![CDATA[<p>gradle, maven 都提供了现成的打 jar 功能</p>
<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>这里以 maven 为例，创建工程如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── java</span><br><span class="line">│   └── com</span><br><span class="line">│       └── jk</span><br><span class="line">│           └── Main.java</span><br><span class="line">└── resources</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Index: &quot;</span> + i + <span class="string">&quot;, Value: &quot;</span> + args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 pom 文件中添加配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.jk.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>终端输入命令：<code>mvn package assembly:single</code>, 运行后在 src 同级目录下会生产 target 文件夹，其中包含了对应的 jar 包, 选择带 with-dependencies 的那个</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">java -jar app-jar-1.0-SNAPSHOT-jar-with-dependencies.jar hello world </span><br><span class="line">Index: 0, Value: hello</span><br><span class="line">Index: 1, Value: world</span><br></pre></td></tr></table></figure>

<p>PS: 直接选 plugins -&gt; assembly -&gt; assembly:single 不 work，不是很了解为啥，需要系统学一下 maven 才知道</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jar</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 异常处理</title>
    <url>/hexo/2022/02/21/Java-exception/</url>
    <content><![CDATA[<h2 id="记录-log-并附带-stack-trace"><a href="#记录-log-并附带-stack-trace" class="headerlink" title="记录 log 并附带 stack trace"></a>记录 log 并附带 stack trace</h2><p>今天看到同事给我代码 review 的时候推荐使用 log.info(e.getMessage()) 时，不太清楚推荐的原因，特意 Google 了一下几种 log 记录方式</p>
<ul>
<li>info(ex)</li>
<li>info(ex.getMessage())</li>
<li>info(“msg”, ex)</li>
</ul>
<p>总的来说，第三种最好，前两种只会记录当前类的异常抛出记录，之前的信息都 miss 掉了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(ExpClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ExpTest.testMethod();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------------------------------&gt; msg, e &lt;------------------------------&quot;</span>);</span><br><span class="line">            logger.info(<span class="string">&quot;err...&quot;</span>, e);</span><br><span class="line">            System.out.println(<span class="string">&quot;------------------------------&gt; e &lt;------------------------------&quot;</span>);</span><br><span class="line">            logger.info(e);</span><br><span class="line">            System.out.println(<span class="string">&quot;------------------------------&gt; msg &lt;------------------------------&quot;</span>);</span><br><span class="line">            logger.info(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终端输出如下：</span></span><br><span class="line"><span class="comment">// ------------------------------&gt; msg, e &lt;------------------------------</span></span><br><span class="line"><span class="comment">//  INFO [main] (ExpClient.java:14) - err...</span></span><br><span class="line"><span class="comment">// java.lang.ArithmeticException: / by zero</span></span><br><span class="line"><span class="comment">//     at sementic.ExpTest.testMethod(ExpTest.java:5)</span></span><br><span class="line"><span class="comment">//     at sementic.ExpClient.main(ExpClient.java:11)</span></span><br><span class="line"><span class="comment">// ------------------------------&gt; e &lt;------------------------------</span></span><br><span class="line"><span class="comment">//  INFO [main] (ExpClient.java:16) - java.lang.ArithmeticException: / by zero</span></span><br><span class="line"><span class="comment">// ------------------------------&gt; msg &lt;------------------------------</span></span><br><span class="line"><span class="comment">//  INFO [main] (ExpClient.java:18) - / by zero</span></span><br></pre></td></tr></table></figure>

<h2 id="try-catch-执行流程"><a href="#try-catch-执行流程" class="headerlink" title="try-catch 执行流程"></a>try-catch 执行流程</h2><p>今天在写一段补偿代码的时候突然想到一个问题，当异常发生时，后续代码是否还会被执行的问题。测试前根据主观猜测，感觉如果有 try-catch, 那么会继续执行；没有则直接跳出了，相当于 return.</p>
<h2 id="Scenario-1"><a href="#Scenario-1" class="headerlink" title="Scenario 1"></a>Scenario 1</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Log after exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt; Task :idl-sfutil:idl-sfutil-service:Test1.main()</span></span><br><span class="line"><span class="comment">// Log after exception</span></span><br></pre></td></tr></table></figure>

<p>抛错后继续执行</p>
<h2 id="Scenario-2"><a href="#Scenario-2" class="headerlink" title="Scenario 2"></a>Scenario 2</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Log after exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exception in thread &quot;main&quot; java.lang.ArithmeticException: / by zero</span></span><br><span class="line"><span class="comment">//     at com.sf.sfv4.util.Test1.main(Test1.java:5)</span></span><br></pre></td></tr></table></figure>

<p>抛错后没有执行</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>exception</tag>
      </tags>
  </entry>
  <entry>
    <title>Class 类下的 getEnclosingClass() 方法使用案例</title>
    <url>/hexo/2021/05/06/Java-getEnclosingClass-in-Class/</url>
    <content><![CDATA[<p>今天在查找某个 bug 的 root cause 的时候，发现一个 Class.getEnclosingClass() 的调用。从来没有用个这玩意儿，做下笔记。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>人话就是：返回这个类的外部类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the immediately enclosing class of the underlying</span></span><br><span class="line"><span class="comment"> * class.  If the underlying class is a top level class this</span></span><br><span class="line"><span class="comment"> * method returns &#123;<span class="doctag">@code</span> null&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the immediately enclosing class of the underlying class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  SecurityException</span></span><br><span class="line"><span class="comment"> *             If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and the caller&#x27;s</span></span><br><span class="line"><span class="comment"> *             class loader is not the same as or an ancestor of the class</span></span><br><span class="line"><span class="comment"> *             loader for the enclosing class and invocation of &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> *             SecurityManager#checkPackageAccess s.checkPackageAccess()&#125;</span></span><br><span class="line"><span class="comment"> *             denies access to the package of the enclosing class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getEnclosingClass() <span class="keyword">throws</span> SecurityException</span><br></pre></td></tr></table></figure>

<h2 id="案件重现"><a href="#案件重现" class="headerlink" title="案件重现"></a>案件重现</h2><p>以前有一段 code 组织形式如下，定义了一个 MyOuterClass，它有一个 field 动态实现了 MyAbsClass 这个抽象类。那么，当我们调用 MyOuterClass 实例的 <code>field.getClass().getEcloseingClass()</code> 的时候会返回外部类的 class name</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println((<span class="keyword">new</span> MyOuterClass()).field.getClass().getEnclosingClass().getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAbsClass</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOuterClass</span> </span>&#123;</span><br><span class="line">    MyAbsClass field = <span class="keyword">new</span> MyAbsClass() &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// MyOuterClass</span></span><br></pre></td></tr></table></figure>

<p>然后有个德国的 team 将这段代码重构了，形式如下。他们新建了一个类，继承了抽象类，并将原先的类成员变量声明的地方用这个新建类代替了。这种情况下，getEnclosingClass() 的调用方就变为一个 top level class 了，返回 null，随之导致 getSimpleName() 抛出 NPE 了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println((<span class="keyword">new</span> MyOuterClass()).field.getClass().getEnclosingClass().getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAbsClass</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAbsClassIns</span> <span class="keyword">extends</span> <span class="title">MyAbsClass</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOuterClass</span> </span>&#123;</span><br><span class="line">    MyAbsClass field = <span class="keyword">new</span> MyAbsClassIns();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Exception in thread &quot;main&quot; java.lang.NullPointerException</span></span><br><span class="line"><span class="comment">//     at reading.container.Test.main(Test.java:5)</span></span><br></pre></td></tr></table></figure>

<h2 id="其他的使用测试"><a href="#其他的使用测试" class="headerlink" title="其他的使用测试"></a>其他的使用测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;log when init person: &quot;</span> + getClass().getEnclosingClass());</span><br><span class="line">        <span class="keyword">new</span> Outer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;log when init Outer: &quot;</span> + getClass().getEnclosingClass());</span><br><span class="line">            <span class="keyword">new</span> Inner();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;log when init Inner: &quot;</span> + getClass().getEnclosingClass());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// log when init person: null</span></span><br><span class="line"><span class="comment">// log when init Outer: class reading.container.Person</span></span><br><span class="line"><span class="comment">// log when init Inner: class reading.container.Person$Outer</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP 中 include jspf</title>
    <url>/hexo/2021/07/09/Java-include-jspf-page-in-jsp/</url>
    <content><![CDATA[<p>问题：</p>
<ul>
<li>父 JSP 页面中声明了一个变量，子 JSPF 文件中不显示的声明能直接使用这个变量吗</li>
<li>上面的情况如果是子 JSP 又如何</li>
</ul>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>新建一个 servlet 在 request 中传入 name 属性，然后 forward 到 parent.jsp 页面中。parent 页面包含三个子页面，分别是 sub.jspf, sub2.jsp 和 sub3.jsp. 前两个通过 <code>&lt;%@ include file=&quot;xxx&quot; %&gt;</code> 引入，sub3.jsp 通过 <code>&lt;jsp:include page=&quot;xxx&quot;/&gt;</code> 引入。目录结构如下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── java</span><br><span class="line">│   └── com</span><br><span class="line">│       └── jzheng</span><br><span class="line">│           └── servlet</span><br><span class="line">│               └── ParentServlet.java</span><br><span class="line">└── webapp</span><br><span class="line">    ├── WEB-INF</span><br><span class="line">    │   └── web.xml</span><br><span class="line">    ├── parent.jsp</span><br><span class="line">    ├── sub.jspf</span><br><span class="line">    ├── sub2.jsp</span><br><span class="line">    └── sub3.jsp</span><br></pre></td></tr></table></figure>

<p>代码实现如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParentServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        getServletContext().getRequestDispatcher(<span class="string">&quot;/parent.jsp&quot;</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>parent.jsp 页面取得 request 中的属性，并重命名为 myname</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    String myname = (String)request.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;h1&gt; include jspf file &lt;/h1&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">&quot;sub.jspf&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;h1&gt; include jsp file &lt;/h1&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">&quot;sub2.jsp&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;h1&gt; jsp:include jsp file &lt;/h1&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;sub3.jsp&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>sub 页面内容如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- sub.jsp --&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;h2&gt; Name: &lt;%= myname%&gt; &lt;h2/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- sub2.jsp --&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;h2&gt; Name: &lt;%=myname%&gt; &lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- sub3.jsp --&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;h2&gt;Name: $&#123;name&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure>

<p>PS: 这里插入一个语法点，<code>&lt;%= myname%&gt;</code> 这种语法是结合 <code>String myname = (String)request.getAttribute(&quot;name&quot;);</code> 只有 jsp 中声明的变量可以这么用，其实这种写法有点累赘，可以通过 EL 表示式 <code>$&#123;name&#125;</code> 直接从内置对象中取值。</p>
<p>配置 web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ParentServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.jzheng.servlet.ParentServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ParentServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/parent<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动服务器访问 <code>/parent</code> 可以看到如下结果, 几种方式都能 work.</p>
<p><img src="parent.png" alt="parent"></p>
<h2 id="深入理解"><a href="#深入理解" class="headerlink" title="深入理解"></a>深入理解</h2><p>查看编译生成的 JSP 文件，可以看到 parent.jsp 和 sub3.jsp 被编译成了 java/class, sub.jsp 和 sub2.jsp 没有。原因是 <code>&lt;%@ include file=&quot;xxx&quot; %&gt;</code> 会将页面直接整合到父页面中，而 <code>&lt;jsp:include page=&quot;xxx&quot;/&gt;</code> 则是通过 request 转发达到这个效果的。查看 parent_jsp.java 文件可以更清晰一点. sub 页面处理部分已表明。所以 <code>&lt;%@ include file=&quot;xxx&quot; %&gt;</code> 中直接使用父页面定义的变量是可以，这种做法更像是定义了一写通用脚本做包含。但是这些变量都会爆红，非常的不爽</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,</span><br><span class="line">        <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext.getServletContext();</span><br><span class="line">config = pageContext.getServletConfig();</span><br><span class="line">session = pageContext.getSession();</span><br><span class="line">out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br><span class="line"></span><br><span class="line">out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;html&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;head&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;    &lt;title&gt;Title&lt;/title&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;/head&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;body&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">String myname = (String)request.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;hr&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;h1&gt; include jspf file &lt;/h1&gt;\n&quot;</span>); <span class="comment">// &lt;---------- sub.jsp part</span></span><br><span class="line">out.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">out.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;h2&gt; Name: &quot;</span>);</span><br><span class="line">out.print( myname);</span><br><span class="line">out.write(<span class="string">&quot; &lt;h2/&gt;&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;hr&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;h1&gt; include jsp file &lt;/h1&gt;\n&quot;</span>); <span class="comment">// &lt;---------- sub2.jsp part</span></span><br><span class="line">out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;h2&gt; Name: &quot;</span>);</span><br><span class="line">out.print(myname);</span><br><span class="line">out.write(<span class="string">&quot; &lt;/h2&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;hr&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;h1&gt; jsp:include jsp file &lt;/h1&gt;\n&quot;</span>); <span class="comment">// &lt;---------- sub3.jsp part</span></span><br><span class="line">org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, <span class="string">&quot;sub3.jsp&quot;</span>, out, <span class="keyword">false</span>);</span><br><span class="line">out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;/body&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;/html&gt;\n&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jsp</tag>
        <tag>jspf</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP 页面中 include 的自页面是否能访问父业页面的 request</title>
    <url>/hexo/2021/07/09/Java-include-tag-of-jsp/</url>
    <content><![CDATA[<p>问题：</p>
<ul>
<li>jsp 中如果 include 了其他的 jsp 页面时 request 属性是否能传递到 include 的页面中</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>新建一个 IndexServlet 为 request 设置 name 属性并 forward 到 index.jsp. index.jsp 包含一个子页面 mypage.jsp 这个页面会拿尝试那 index.jsp 中的 request 属性并显示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">        dispatcher.forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>jsp 页面代码如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- index.jsp --&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;mypage.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- mypage.jsp --&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;h2&gt;Name: &lt;%=request.getAttribute(&quot;name&quot;)%&gt;&lt;/h2&gt;</span><br></pre></td></tr></table></figure>

<p>配置 web.xml 指定路由</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>IndexServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.jzheng.servlet.IndexServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>IndexServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/indexServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动 server 时跳出来的首页，name 为 null, 访问 <code>/indexServlet</code> 显示的首页 name 属性可以被拿到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&#x27;http://localhost:8080/&#x27;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h2&gt;Name: null&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">curl <span class="string">&#x27;http://localhost:8080/indexServlet&#x27;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h2&gt;Name: jack&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h2><p>Mac 环境下配置的 Tomcat 服务，jsp 编译的页面会放在 <code>/Users/jack/Library/Caches/JetBrains/IntelliJIdea2021.1/tomcat/a0a1bd57-0f17-404d-9ff8-9f185e6d4d97/work/Catalina/localhost/ROOT/org/apache/jsp</code> 这个路径下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── index_jsp.class</span><br><span class="line">├── index_jsp.java</span><br><span class="line">├── mypage_jsp.class</span><br><span class="line">└── mypage_jsp.java</span><br></pre></td></tr></table></figure>

<p>index_jsp.java 和 mypage_jsp.java 核心代码显示如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index_jsp.java</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response, <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext.getServletContext();</span><br><span class="line">config = pageContext.getServletConfig();</span><br><span class="line">session = pageContext.getSession();</span><br><span class="line">out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br><span class="line"></span><br><span class="line">out.write(<span class="string">&quot;&lt;html&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;body&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;h2&gt;Hello World!&lt;/h2&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, <span class="string">&quot;mypage.jsp&quot;</span>, out, <span class="keyword">false</span>);</span><br><span class="line">out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;/body&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;/html&gt;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mypage_jsp.java</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response, <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext.getServletContext();</span><br><span class="line">config = pageContext.getServletConfig();</span><br><span class="line">session = pageContext.getSession();</span><br><span class="line">out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br><span class="line"></span><br><span class="line">out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;h2&gt;Name: &quot;</span>);</span><br><span class="line">out.print(request.getAttribute(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">out.write(<span class="string">&quot;&lt;/h2&gt;\n&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>可以看到父页面中通过 <code>org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, &quot;mypage.jsp&quot;, out, false);</code> 包含页面，这个过程中是会把 request 当成参数传递的，自然在自页面中是能访问到这个对象的。</p>
<p>PS: 在配置 Tomcat 服务器时有两种 type, Tomcat 和 TomEE 之前选错了 TomEE 起不来 server （；￣ェ￣）</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jsp</tag>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda 使用时遇到的一些奇奇怪怪的问题</title>
    <url>/hexo/2021/03/10/Java-lambda-confusing-opints/</url>
    <content><![CDATA[<ul>
<li><code>Predicate pre = Boolean::valueOf;</code> compile failed, 提示说: <code>Cannot resolve method &#39;valueOf&#39;</code> 改为 <code>Predicate&lt;Boolean&gt; pre = Boolean::valueOf;</code> works</li>
<li><code>Predicate&lt;Boolean&gt; pre = Boolean::valueOf; pre.test(null);</code> 会抛出 NPE</li>
<li><code>Predicate&lt;Boolean&gt; pre2 = Objects::isNull; pre2.test(null);</code> 类似的调用 Objects 的 isNull 等方法却不会跑错</li>
</ul>
<p>貌似无解，根据这个 <a href="https://stackoverflow.com/questions/29143803/java-lambdas-how-it-works-in-jvm-is-it-oop">StackOverflow lambda</a> 相关的问题来看，JVM 解析 lambda 的时候，直接将我们写的表达式编译成字节码，然后 JVM 通过 <code>InvokeDynamic</code> 指令就执行了，如果是这样的还，我是我发看到他的中间状态的，上面的那些问题看来只能通过经验来解决了 （；￣ェ￣）</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 函数式编程</title>
    <url>/hexo/2020/05/28/Java-lambda/</url>
    <content><![CDATA[<p>Java 8 函数式编程读书笔记</p>
<h2 id="第一章-简介"><a href="#第一章-简介" class="headerlink" title="第一章 简介"></a>第一章 简介</h2><ul>
<li>Java 8 增加 Lambda 表达式来支持对大型数据的并发操作 - 核实一下</li>
<li>面向对象式对数据进行抽象，函数式编程时对行为进行抽象</li>
</ul>
<h2 id="第二章-Lambda-表达式"><a href="#第二章-Lambda-表达式" class="headerlink" title="第二章 Lambda 表达式"></a>第二章 Lambda 表达式</h2><p>以 Swing 为例，传统做法中监听事件需要如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">button.addActionListener(</span><br><span class="line">    <span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent event)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;button clicked&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>当我们使用 lambda 表达式时可以简写为 <code>button.addActionListener(event -&gt; System.out.println(&quot;button clicked&quot;));</code></p>
<p>Lambda 表达式中的类型都是由编译器推断出来的，但你也可以显示的声明参数类型。</p>
<p>Lambda 表达式引用的是值，而不是变量。</p>
<table>
<thead>
<tr>
<th>接口</th>
<th>参数</th>
<th>返回类型</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>Predicate&lt;T&gt;</td>
<td>T</td>
<td>boolean</td>
<td>唱片是否发行</td>
</tr>
<tr>
<td>Consumer&lt;T&gt;</td>
<td>T</td>
<td>void</td>
<td>输出一个值</td>
</tr>
<tr>
<td>Function&lt;T, R&gt;</td>
<td>T</td>
<td>R</td>
<td>获取Artist 对象的名字</td>
</tr>
<tr>
<td>Supplier&lt;T&gt;</td>
<td>None</td>
<td>T</td>
<td>工厂方法</td>
</tr>
<tr>
<td>UnaryOperator&lt;T&gt;</td>
<td>T</td>
<td>T</td>
<td>逻辑非(!)</td>
</tr>
<tr>
<td>BinaryOperator&lt;T&gt;</td>
<td>(T, T)</td>
<td>T</td>
<td>求连个数的乘积(*)</td>
</tr>
</tbody></table>
<p>在复杂的情况下需要指定泛型类型才能使编译通过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果省略掉 &lt;Long&gt; 编译报错：Operator&#x27;&amp;#x002B;&#x27;cannotbeappliedtojava.lang.Object,java.lang.Object.</span></span><br><span class="line">BinaryOperator&lt;Long&gt; addLongs = (x, y) -&gt; x + y;</span><br></pre></td></tr></table></figure>

<p>Predicate 可用于检测对象是否符合要求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测字符串是否以 J 开头</span></span><br><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Jerry&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">List&lt;String&gt; ret = names.stream().filter(name -&gt; name.charAt(<span class="number">0</span>) == <span class="string">&#x27;J&#x27;</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter 中的部分就是 Predicate 表达式，也可以分开定义写成如下形式</span></span><br><span class="line">Predicate&lt;String&gt; filterTom = input -&gt; input.equals(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">ret = names.stream().filter(filterTom).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义 predicate 表达式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicateSamples</span> </span>&#123;</span><br><span class="line">    Predicate&lt;String&gt; checkLength = input -&gt; input.length() &gt; <span class="number">5</span>;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_checkLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(checkLength.test(<span class="string">&quot;1234&quot;</span>));</span><br><span class="line">        <span class="comment">// true</span></span><br><span class="line">        System.out.println(checkLength.test(<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义方法生成 predicate 作为返回值</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Predicate&lt;String&gt; <span class="title">generatePredicateExpression</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> test -&gt; prefix.startsWith(test);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_generate_expression</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// true</span></span><br><span class="line">    System.out.println(generatePredicateExpression(<span class="string">&quot;jack123&quot;</span>).test(<span class="string">&quot;jack&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Consumer 对传入的参数做操作，没有返回值，例如可以用它实现打印，断言等操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ret.forEach(System.out::print);</span><br><span class="line">names.forEach(name -&gt; Assert.assertEquals(name, <span class="string">&quot;Jerry&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>Function 对传入的对象操作并放回结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; ret = names.stream().map(String::toUpperCase).collect(Collectors.toList());</span><br><span class="line">ret.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>Supplier 可以帮你生产数据, 但是只能使用应用于无参的 constructor，不支持传入参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Supplier&lt;User&gt; userSupplier = User::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure>

<h2 id="第三章-流"><a href="#第三章-流" class="headerlink" title="第三章 流"></a>第三章 流</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for 处理集合模板</span></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Artist artist : allArtists) &#123;</span><br><span class="line">    <span class="keyword">if</span> (artist.isFrom(<span class="string">&quot;London&quot;</span>)) &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">外部迭代方式： 通过拿到 iterator， 然后通过 hasNext(), next() 方法完成迭代</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">Iterator&lt;Artist&gt; iterator = allArtists.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Artistartist = iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (artist.isFrom(<span class="string">&quot;London&quot;</span>)) &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部迭代：通过 Steam 对集合类进行复杂操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// filter：只保留通过某项测试的对象，整个过程被分为两步，过滤和计算</span></span><br><span class="line"><span class="keyword">long</span> count = allArtists.stream().filter(artist -&gt; artist.isFrom(<span class="string">&quot;London&quot;</span>)).count();</span><br></pre></td></tr></table></figure>

<p>filter 中的表达式是惰性求值方法，count 是及早求职方法，惰性求值并不会真正执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此实例中并不会在控制台打印文字</span></span><br><span class="line">allArtists.stream().filter(artist -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;print artist&#x27;s location: &quot;</span> + artist.location);</span><br><span class="line">            <span class="keyword">return</span> artist.isFrom(<span class="string">&quot;London&quot;</span>);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p>如果返回值是 Stream 则为 惰性求值；如果返回值是另一个值或为空则是 及早求值。使用这些操作的理想方式就是形成一个惰性求值的链，最后用一个及早求值的操作返回想要的结果，这正是它的合理之处。</p>
<h3 id="常用的流操作"><a href="#常用的流操作" class="headerlink" title="常用的流操作"></a>常用的流操作</h3><table>
<thead>
<tr>
<th>操作</th>
<th>用途</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>collect</td>
<td>生成集合</td>
<td>Stream.of(“a”, “b”, “c”).collect(Collectors.toList());</td>
</tr>
<tr>
<td>map</td>
<td>类型转换</td>
<td>Stream.of(“a”).map(string -&gt; string.toUpperCase()).collect(Collectors.toList());</td>
</tr>
<tr>
<td>filter</td>
<td>检查过滤</td>
<td>Stream.of(“a”, “12b”).filter(val -&gt; isDigit(val.charAt(0))).(Collectors.toList());</td>
</tr>
<tr>
<td>flatMap</td>
<td>拼接多个 Stream</td>
<td>Stream.of(asList(1, 2), asList(3, 4)).flatMap(numbers -&gt; numbers.stream()).collect(toList());</td>
</tr>
<tr>
<td>max/min</td>
<td>最值</td>
<td>tracks.stream().min(Comparator.comparing(track -&gt; track.getLength())).get();</td>
</tr>
<tr>
<td>reduce</td>
<td>提供计算功能</td>
<td>Stream.of(1,2,3).reduce(0, (acc, ele) - &gt; acc + ele);</td>
</tr>
</tbody></table>
<h2 id="第四章-类库"><a href="#第四章-类库" class="headerlink" title="第四章 类库"></a>第四章 类库</h2><p>日志优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger = <span class="keyword">new</span> Logger();</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">    logger.debug(<span class="string">&quot;Look at this:&quot;</span> + expensiveOperation());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 Lambda 优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger = <span class="keyword">new</span> Logger();</span><br><span class="line">logger.debug(() -&gt; <span class="string">&quot;Look at this:&quot;</span> + expensiveOperation());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Logger 类中添加方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(Supplier&lt;String&gt; message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isDebugEnabled()) &#123;</span><br><span class="line">        debug(message.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Supplier -&gt; get(), Predicate -&gt; test, Function -&gt; apply.</p>
<p>如果可以的话，在流中尽量使用对基本类型的操作，而不是封装类型。 mapToInt 之类的操作还提供了很多简便操作得到最值和平均值。</p>
<p><strong>Optional</strong>是一个新设计的数据类新来替换 null 值。 使用它有两个目的：</p>
<ul>
<li>Optional 对象鼓励程序员适时检测变量是否为空，以避免代码缺陷</li>
<li>将一个类的 API 中可能为空的值文档化，这比阅读实现代码要简单的很多</li>
</ul>
<h2 id="第五章-高级集合类和收集器"><a href="#第五章-高级集合类和收集器" class="headerlink" title="第五章 高级集合类和收集器"></a>第五章 高级集合类和收集器</h2><p><code>方法引用</code>语法， artist -&gt; artist.getName() 等价于 Artist::getName, 标准语法为 Classname::methodName. 由此，新建 Artist 对象的代码可以由 （name, nationality） -&gt; new Artist(name, nationality) 简化为 Artist::new, 类似的可以通过 String[]::new 创建新的数组。</p>
<p><code>stream.collect()</code> 可以生成你想要的集合形式。例如：<code>stream.collect(toCollection(TreeSet::new));</code></p>
<p><code>partitioningBy</code> 收集器可用于分流, 与之类似的还有 <code>groupingBy</code> 关键字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;Boolean, List&lt;Artist&gt;&gt; bandsAndSolo(Stream&lt;Artist&gt; artists) &#123;</span><br><span class="line">    <span class="keyword">return</span> artist.collect(partitioningBy(artist -&gt; artist.isSolo())); <span class="comment">// artist -&gt; artist.isSolo() 可替换为 Artist::isSolo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>字符串流操作示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String ret = artists.steam().map(Artist::getName).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>查询并加入 map 的简化操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Artist <span class="title">getArtist</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    Artist artist = artistCache.get(name);</span><br><span class="line">    <span class="keyword">if</span> (artist == <span class="keyword">null</span>) &#123;</span><br><span class="line">        artist = readArtistFromDB(name);</span><br><span class="line">        artistCache.put(name, artist);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> artist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// after</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Artist <span class="title">getArtist</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> artistCache.computeIfAbsent(name, <span class="keyword">this</span>::readArtistFromDB);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 forEach 简化 map 的统计操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line">Map&lt;Artist, Integer&gt; countOfAlbums = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Artist, List&lt;Album&gt;&gt; entry : albumsByArtist.entrySet()) &#123;</span><br><span class="line">    Artist artist = entry.getKey();</span><br><span class="line">    List&lt;Album&gt; albums = entry.getValue();</span><br><span class="line">    countOfAlbums.put(artist, albums.size());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// after</span></span><br><span class="line">Map&lt;Artist, Integer&gt; countOfAlbums = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">albumsByArtist.forEach((artist, albums) -&gt; &#123;</span><br><span class="line">    countOfAlbums.put(artist, albums.size());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="第六章-数据并行化"><a href="#第六章-数据并行化" class="headerlink" title="第六章 数据并行化"></a>第六章 数据并行化</h2><p>并行化：同一任务拆分，多核执行<br>并发化：单核多任务</p>
<p>实现上只需要在调用方法时将 <code>.stream()</code> 改为 <code>.parallelStream()</code> 就行了。但是并不是并行了就快，取决于处理量等其他因素。</p>
<p>影响因素：数据大小， 源数据结构， 装箱， 核的数量， 单元处理开销， 底层还是使用了 fork/join 的模式。</p>
<p>数据结构并行性能：ArrayList, 数组， IntStream.range &gt; HashSet, Treeset &gt; LinkedList, Streams.iterate, BufferedReader.lines</p>
<p>为 array 赋初值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">Arrays.setAll(a, i-&gt;i);</span><br><span class="line"><span class="comment">// 输出：0，1，3.。。99</span></span><br></pre></td></tr></table></figure>

<h2 id="第七章-测试，调试和重构"><a href="#第七章-测试，调试和重构" class="headerlink" title="第七章 测试，调试和重构"></a>第七章 测试，调试和重构</h2><p>ThreadLocal 优化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line">ThreadLocal&lt;album&gt; thisAlbum = <span class="keyword">new</span> ThreadLocal&lt;Album&gt; () &#123;</span><br><span class="line">    <span class="meta">@Overrride</span> <span class="function"><span class="keyword">protected</span> Album <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> database.lookupCurrentAlbum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// after</span></span><br><span class="line">ThreadLocal&lt;Album&gt; thisAlbum = ThreadLocal.withInitial(() -&gt; database.lookupCurrentAlbum());</span><br></pre></td></tr></table></figure>

<p>可以使用 peek 进行流的调试</p>
<h2 id="第八章-设计和架构的原则"><a href="#第八章-设计和架构的原则" class="headerlink" title="第八章 设计和架构的原则"></a>第八章 设计和架构的原则</h2><p>列举了 Lambda 和 设计模式， DSL 的结合的例子，和我看这本书的初衷有点远了，先跳过。</p>
<h2 id="第九章-使用-Lambda-表达式编写并发程序"><a href="#第九章-使用-Lambda-表达式编写并发程序" class="headerlink" title="第九章 使用 Lambda 表达式编写并发程序"></a>第九章 使用 Lambda 表达式编写并发程序</h2><p>使用 Vertx 框架结合 Lambda 的知识点，实现一个聊天室，跳过。但是它的这个框架我倒是感觉很有意思，灵感是从 NodeJS 那边来的，支持并发。</p>
<h2 id="工作中遇到的一些例子"><a href="#工作中遇到的一些例子" class="headerlink" title="工作中遇到的一些例子"></a>工作中遇到的一些例子</h2><h3 id="如果集合包含范型信息，在没有指定具体的范型类的时候，调用-lambda-会报编译错误"><a href="#如果集合包含范型信息，在没有指定具体的范型类的时候，调用-lambda-会报编译错误" class="headerlink" title="如果集合包含范型信息，在没有指定具体的范型类的时候，调用 lambda 会报编译错误"></a>如果集合包含范型信息，在没有指定具体的范型类的时候，调用 lambda 会报编译错误</h3><p>当使用注释掉的语句代替现有的语句时就会报编译错误：Non-static method cannot be referenced from a static contex</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Set&lt;MyProp&gt; props = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">  MyProp p1 = <span class="keyword">new</span> MyProp(<span class="number">1</span>);</span><br><span class="line">  MyProp p2 = <span class="keyword">new</span> MyProp(<span class="number">2</span>);</span><br><span class="line">  props.add(p1);</span><br><span class="line">  props.add(p2);</span><br><span class="line">  MyInterface&lt;String&gt; i0 = <span class="keyword">new</span> MyInterface&lt;&gt;(props); <span class="comment">// MyInterface i0 = new MyInterface&lt;&gt;(props);</span></span><br><span class="line">  System.out.println(i0.getList().stream().map(MyProp::getId).collect(Collectors.toList()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Set props;</span><br><span class="line">  MyInterface(Set props) &#123;</span><br><span class="line">    <span class="keyword">this</span>.props = props;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Set&lt;MyProp&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123; <span class="comment">// public Set getList() </span></span><br><span class="line">    <span class="keyword">return</span> props;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProp</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyProp</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找了一下网上的解释，虽然有重现和解决方案，但是对它的底层原因并没有很清楚的解释，以后如果有机会再深入了解 lambda 的语法的话，可以再看看</p>
<p>PS: 个人感觉应该是在没有指定 type 的时候，类型判断有问题</p>
<h3 id="从-List-中抽取属性组成新的集合"><a href="#从-List-中抽取属性组成新的集合" class="headerlink" title="从 List 中抽取属性组成新的集合"></a>从 List 中抽取属性组成新的集合</h3><p>List of BeanProperty, BeanProperty 有 <code>getName()</code> 方法，如何通过 lambda 函数抽取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; ret = list.stream().map(BeanProperty::getName).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="Map-gt-Map-转化"><a href="#Map-gt-Map-转化" class="headerlink" title="Map -&gt; Map 转化"></a>Map -&gt; Map 转化</h3><p>Map&lt;String, List&lt;Obj&gt;&gt; 对 list 中的值进行修改，案例简化为 Map&lt;String, List&lt;String&gt;&gt; 将 list 中的 String 转化为大写</p>
<p>第一步先熟悉 list -&gt; list 转化方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; test = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">List&lt;String&gt; answer = test.stream().map(String::toUpperCase).collect(Collectors.toList());</span><br><span class="line">System.out.println(answer);</span><br><span class="line"><span class="comment">//output: [A, C]</span></span><br></pre></td></tr></table></figure>

<p>熟悉 map 转化方式并结合 list 转化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, List&lt;String&gt;&gt; origin = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">origin.put(<span class="string">&quot;a&quot;</span>, Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;n&quot;</span>));</span><br><span class="line">origin.put(<span class="string">&quot;b&quot;</span>, Arrays.asList(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">origin.put(<span class="string">&quot;c&quot;</span>, Arrays.asList(<span class="string">&quot;c&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(origin);</span><br><span class="line"></span><br><span class="line">Map&lt;String, List&lt;String&gt;&gt; after = origin.entrySet().stream().</span><br><span class="line">        collect(Collectors.toMap(</span><br><span class="line">                Map.Entry::getKey, (entry) -&gt; entry.getValue().stream().map(String::toUpperCase).collect(Collectors.toList()))</span><br><span class="line">        );</span><br><span class="line">System.out.println(after);</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// &#123;a=[a, n], b=[b], c=[c]&#125;</span></span><br><span class="line"><span class="comment">// &#123;a=[A, N], b=[B], c=[C]&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Collectors-toMap-怎么使用"><a href="#Collectors-toMap-怎么使用" class="headerlink" title="Collectors.toMap() 怎么使用"></a>Collectors.toMap() 怎么使用</h3><p>函数定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K, U&gt;</span><br><span class="line">    Collector&lt;T, ?, Map&lt;K,U&gt;&gt; toMap(Function&lt;? <span class="keyword">super</span> T, ? extends K&gt; keyMapper,</span><br><span class="line">                                    Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; valueMapper) &#123;</span><br><span class="line">        <span class="keyword">return</span> toMap(keyMapper, valueMapper, throwingMerger(), HashMap::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>简单理解就是两个参数分别是两个计算式，得到 key 和 value 的对应的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Class&lt;? extends Number&gt;&gt; list = Arrays.asList(Integer.class, Double.class, Long.class);</span><br><span class="line">Map map = list.stream().collect(Collectors.toMap(Function.identity(), x-&gt;<span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<p><code>Function.identity()</code> 等价于 x -&gt; x</p>
<p><code>x -&gt; 0</code> 等价于设置常量</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>lambda</tag>
        <tag>函数式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 中重写 equals 和 hashcode 的问题</title>
    <url>/hexo/2020/12/01/Java-methods-equals-and-hashcode/</url>
    <content><![CDATA[<p>刚好最近遇到需要重写 equals 和 hashcode 的情况，总结记录一下，加深印象。</p>
<h2 id="官方对-hashCode-方法的描述"><a href="#官方对-hashCode-方法的描述" class="headerlink" title="官方对 hashCode 方法的描述"></a>官方对 hashCode 方法的描述</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by HashMap.</span><br><span class="line"></span><br><span class="line">The general contract of hashCode is:</span><br><span class="line"></span><br><span class="line">1. Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application.</span><br><span class="line">2. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.</span><br><span class="line">3. It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.</span><br><span class="line"></span><br><span class="line">As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the JavaTM programming language.)</span><br></pre></td></tr></table></figure>

<p>概括起来就是 equals 相等的两个对象 hashcode 必须相同，反过来，hashcode 相等的像个对象，equals 可以不想等。</p>
<p>hashcode 是需要结合集合类才能体现出来的。试想一下，如果没有 hashcode, 那么我们在一个存了 1000 个对象的 HashSet 中添加一个新的对象就要进行 1000 次的 equals 比较，这样的性能消耗无疑是巨大的。所以 HashXXX 的数据结构引入 hash 算法来简化比较。</p>
<p>hash 的数据结构中是允许存在 hash 值相同的对象的，这种情况下，他会在 hash 的地址位置创建一个链表存储 hash 值相同的对象。</p>
<p>当集合存入一个对象时，他会先根据 hash 值判断是否有重复的元素， 如果 hash 值已经存在，那么他会找到对应的链表然后一次进行对象的 equals 判断重复。好的 hash 算法要尽量减少 hash 冲突来提高检索效率。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>equals</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 操作符优先级</title>
    <url>/hexo/2020/10/22/Java-operator-precedence/</url>
    <content><![CDATA[<p>记录一下工作中遇到的操作符优先级的问题，总体的逻辑是：从左到右依次计算</p>
<p><a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html">Java Operator Precedence</a></p>
<table>
<thead>
<tr>
<th align="center">Operators</th>
<th align="center">Precedence</th>
</tr>
</thead>
<tbody><tr>
<td align="center">postfix</td>
<td align="center">expr++ expr–</td>
</tr>
<tr>
<td align="center">unary</td>
<td align="center">++expr –expr +expr -expr ~ !</td>
</tr>
<tr>
<td align="center">multiplicative</td>
<td align="center">* / %</td>
</tr>
<tr>
<td align="center">additive</td>
<td align="center">+ -</td>
</tr>
<tr>
<td align="center">shift</td>
<td align="center">&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td>
</tr>
<tr>
<td align="center">relational</td>
<td align="center">&lt; &gt; &lt;= &gt;= instanceof</td>
</tr>
<tr>
<td align="center">equality</td>
<td align="center">== !=</td>
</tr>
<tr>
<td align="center">bitwise AND</td>
<td align="center">&amp;</td>
</tr>
<tr>
<td align="center">bitwise exclusive OR</td>
<td align="center">^</td>
</tr>
<tr>
<td align="center">bitwise inclusive OR</td>
<td align="center">|</td>
</tr>
<tr>
<td align="center">logical AND</td>
<td align="center">&amp;&amp;</td>
</tr>
<tr>
<td align="center">logical OR</td>
<td align="center">||</td>
</tr>
<tr>
<td align="center">ternary</td>
<td align="center">? :</td>
</tr>
<tr>
<td align="center">assignment</td>
<td align="center">= += -= *= /= %= &amp;= ^= | = &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</td>
</tr>
</tbody></table>
<h2 id="逻辑与-和-逻辑非"><a href="#逻辑与-和-逻辑非" class="headerlink" title="逻辑与 和 逻辑非"></a>逻辑与 和 逻辑非</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != params &amp;&amp; params.isFeatureExist(FeatureEnum.FEATURE_01) &amp;&amp; !(ElementTypeEnum.ADDRESS.equals(Element.getElementTypeEnum()) || ElementTypeEnum.BUSINESS_ADDRESS.equals(Element.getElementTypeEnum())) &amp;&amp; !ElementTypeEnum.PERSON_GLOBAL_INFO.getElementId().equals(Element.getId()))</span><br></pre></td></tr></table></figure>

<p>从左到右依次判断就完事儿啦。。。感觉上面表格中的 逻辑与 &gt; 逻辑非 的表示还混淆了我的判断（；￣ェ￣）</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>优先级</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 生成随机数</title>
    <url>/hexo/2021/04/21/Java-random-int/</url>
    <content><![CDATA[<p>遇到一个问题，在写测试的时候需要产生一串随机数，找了一下解决方案，记录一下</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>需求：</p>
<ol>
<li>字符串以 Test 开头</li>
<li>中间加指定格式的日期</li>
<li>结尾加上前面补0的4位随机整数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String prefix = <span class="string">&quot;Test&quot;</span>;</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat sdfDate = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyMMdd&quot;</span>);</span><br><span class="line">        String mid = sdfDate.format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        String suffix = String.format(<span class="string">&quot;%04d&quot;</span>, <span class="keyword">new</span> Random().nextInt(<span class="number">10000</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(prefix + mid + suffix);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Test2104215709</span></span><br></pre></td></tr></table></figure>

<p>%04d 的含义：</p>
<ul>
<li>0: 前面补0</li>
<li>4: 长度为4</li>
<li>d: 对整形做操作</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>随机数</tag>
      </tags>
  </entry>
  <entry>
    <title>forward Vs redirect</title>
    <url>/hexo/2021/07/09/Java-servlet-forward-vs-redirect/</url>
    <content><![CDATA[<p>问题：</p>
<ul>
<li>forward 和 redirect 时 request 传递的区别</li>
<li>forward 和 redirect 时 url 传递的区别</li>
</ul>
<h2 id="问-forward-和-redirect-时-request-传递的区别"><a href="#问-forward-和-redirect-时-request-传递的区别" class="headerlink" title="问: forward 和 redirect 时 request 传递的区别"></a>问: forward 和 redirect 时 request 传递的区别</h2><p>forward 可以将 request 传递下去，而 redirect 不能。其实写了 code 之后才意识到，forward 的传递性是因为它直接把之前的 request 当参数传递了，当然是一致的。而 redirect 是不带 request 参数的。</p>
<p>新建一个 ForwardServlet 在这个 servlet 中我们向 request 中设置 name 属性，然后 forward 到 ForwardedServlet. 在 ForwardServlet 中打印处之前设置的属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(<span class="string">&quot;/forwarded&quot;</span>);</span><br><span class="line">        dispatcher.forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardedServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Name in request: &quot;</span> + req.getAttribute(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 web.xml 中配置 mapping 关系</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Forward<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.jzheng.servlet.ForwardServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Forward<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/forward<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Forwarded<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.jzheng.servlet.ForwardedServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Forwarded<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/forwarded<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>name 在终端正确显示。其实光看 dispatch 部分的代码应该就有数了 <code>dispatcher.forward(req, resp);</code> 会将 request 传递下去，能拿到也不奇怪</p>
<p>同样的思路我们设计一个 redirect 的测试。新建 RedirectServlet 并在 request 对象中设置 name 属性，接着 redirect 到 RedirectedServlet 并打印 name</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedirectServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        req.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;context path: &quot;</span> + req.getContextPath());</span><br><span class="line">        resp.sendRedirect(req.getContextPath() + <span class="string">&quot;/redirected&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedirectedServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Name in request: &quot;</span> + req.getAttribute(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>name 为 null. 原因也很简单 <code>resp.sendRedirect(req.getContextPath() + &quot;/redirected&quot;);</code> 并没有传递 request 参数。</p>
<h2 id="问-forward-和-redirect-时-url-传递的区别"><a href="#问-forward-和-redirect-时-url-传递的区别" class="headerlink" title="问: forward 和 redirect 时 url 传递的区别"></a>问: forward 和 redirect 时 url 传递的区别</h2><p>forward 方式不会改变 URL，redirect 会变。上面的实验中，我们访问 <code>/redirect</code> 时，最终浏览器显示的是 <code>/redirected</code></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>servlet</tag>
        <tag>forward</tag>
        <tag>redirect</tag>
      </tags>
  </entry>
  <entry>
    <title>Java syntax track</title>
    <url>/hexo/2021/11/24/Java-syntax-track/</url>
    <content><![CDATA[<h2 id="如果是-null-返回默认值"><a href="#如果是-null-返回默认值" class="headerlink" title="如果是 null 返回默认值"></a>如果是 null 返回默认值</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Optional.ofNullable(<span class="string">&quot;a&quot;</span>).orElse(<span class="string">&quot;b&quot;</span>)); <span class="comment">// a</span></span><br><span class="line">System.out.println(Optional.ofNullable(<span class="keyword">null</span>).orElse(<span class="string">&quot;b&quot;</span>)); <span class="comment">// b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是 JDK9 还可以使用 Objects</span></span><br><span class="line">Objects.requireNonNullElse(T obj, T defaultObj);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 表示一棵树</title>
    <url>/hexo/2020/11/10/Java-tree-related-code/</url>
    <content><![CDATA[<p>最近在看 TraceSonar 的源码的时候，看到生成树相关的代码， 感觉我自己徒手写应该是没戏了，至少他的这个方案是可以 work 的，同时像收集一下网上能找到的生成树的一些优秀代码</p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; parent = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Node&lt;T&gt;&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node&lt;T&gt; <span class="title">addChild</span><span class="params">(Node&lt;T&gt; child)</span> </span>&#123;</span><br><span class="line">        child.setParent(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.children.add(child);</span><br><span class="line">        <span class="keyword">return</span> child;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addChildren</span><span class="params">(List&lt;Node&lt;T&gt;&gt; children)</span> </span>&#123;</span><br><span class="line">        children.forEach(each -&gt; each.setParent(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">this</span>.children.addAll(children);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Node&lt;T&gt;&gt; getChildren() &#123;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(Node&lt;T&gt; parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node&lt;T&gt; <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node&lt;T&gt; <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent.getRoot();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node&lt;String&gt; root = <span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Node&lt;String&gt; node1 = root.addChild(<span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;node 1&quot;</span>));</span><br><span class="line"></span><br><span class="line">    Node&lt;String&gt; node11 = node1.addChild(<span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;node 11&quot;</span>));</span><br><span class="line">    node11.addChild(<span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;node 111&quot;</span>));</span><br><span class="line">    node11.addChild(<span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;node 112&quot;</span>));</span><br><span class="line"></span><br><span class="line">    node1.addChild(<span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;node 12&quot;</span>));</span><br><span class="line"></span><br><span class="line">    Node&lt;String&gt; node2 = root.addChild(<span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;node 2&quot;</span>));</span><br><span class="line"></span><br><span class="line">    node2.addChild(<span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;node 21&quot;</span>));</span><br><span class="line">    node2.addChild(<span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;node 22&quot;</span>));</span><br><span class="line"></span><br><span class="line">    printTree(root, <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">printTree</span><span class="params">(Node&lt;T&gt; node, String appender)</span> </span>&#123;</span><br><span class="line">    System.out.println(appender + node.getData());</span><br><span class="line">    node.getChildren().forEach(each -&gt; printTree(each, appender + appender));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// root</span></span><br><span class="line"><span class="comment">//   node 1</span></span><br><span class="line"><span class="comment">//     node 11</span></span><br><span class="line"><span class="comment">//         node 111</span></span><br><span class="line"><span class="comment">//         node 112</span></span><br><span class="line"><span class="comment">//     node 12</span></span><br><span class="line"><span class="comment">//   node 2</span></span><br><span class="line"><span class="comment">//     node 21</span></span><br><span class="line"><span class="comment">//     node 22</span></span><br></pre></td></tr></table></figure>

<p>这种解法，首先把树这种结构解析出来，单独作为一个载体，你可以根据自己的需求填充树中的内容，其次打印的时候用的 lambda 表达式也很简洁，很喜欢这个例子。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.javagists.com/java-tree-data-structure">javagists</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>try-catch-with-resources 语法中各分支的执行顺序</title>
    <url>/hexo/2021/12/02/Java-try-with-resources/</url>
    <content><![CDATA[<p>Refer: <a href="https://stackoverflow.com/questions/24129088/are-resources-closed-before-or-after-the-finally">StackOverflow</a></p>
<p>结论：先执行 try 中内容，再执行关闭资源的行为，然后是 catch 最后再 finally</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloseableDummy</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;closing&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloseableDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (CloseableDummy closableDummy = <span class="keyword">new</span> CloseableDummy()) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;try exit&quot;</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;catch&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// try exit</span></span><br><span class="line"><span class="comment">// closing</span></span><br><span class="line"><span class="comment">// catch</span></span><br><span class="line"><span class="comment">// finally</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 SAX 解析 XM</title>
    <url>/hexo/2020/11/03/Java-use-SAX-parse-xml/</url>
    <content><![CDATA[<p>简单记录一下 Java 解析 xml 的例子。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>DefaulHandler: 为了简化代码将几个常用的 handler 合并为这个 DefaultHandler</li>
<li>EntityResolver: 提供获取外部文件的方法， Spring 在介些 xml 的时候也定义过这个方法，可以参考下</li>
<li>DTDHandler: 这个类都没有使用例子，是不是一个很冷门的类啊 （；￣ェ￣） 以后有机会看到再记录把</li>
<li>ContentHandler: 负责处理 xml 节点的逻辑</li>
<li>ErrorHandler: 结合 DTD 处理异常</li>
<li>systemId: 外部资源(多半是DTD)的URI，比如本地文件 <code>file:///usr/share/dtd/somefile.dtd</code> 或者网络某个地址的文件 <code>http://www.w3.org/somefile.dtd</code></li>
<li>publicId: 和 systemId 类似，区别在于<strong>间接性</strong><ul>
<li>publicID 就相当于一个名字，这个名字代表了一个外部资源。比如，我们规定 <code>W3C HTML 4.01</code> 这个字符串对应 <code>http://www.w3.org/somedir/somefile.dtd</code> 这个资源。那么，<code>publicID=&quot;W3C HTML 4.01&quot;</code> 和 <code>systemID=&quot;http://www.w3.org/somedir/somefile.dtd&quot;</code> 是一样的，二者都引用了 <code>http://www.w3.org/somedir/somefile.dtd</code> 作为该文档的外部DTD。</li>
</ul>
</li>
<li>xmlReader.setFeature(url, flag): 用来表示某个特定的验证规则是否打开了</li>
<li>XML schema, 就是我们在 Spring 项目中经常能看到的 <code>.xsd</code> 文件，他是 DTD 的替代品，支持的验证功能更多，格式和 XML 一致</li>
</ul>
<p>基本套路：</p>
<ol>
<li>自定义一个 hander 继承 DefaultHandler, 重写其中的解析逻辑</li>
<li>客户端代码中通过 SAXParserFactory 拿到 parser</li>
<li>parser 中传入要解析的文件和自定义 handler</li>
<li>parse 是 handler 中定义的 bean 被解析</li>
<li>parse 完成后重 handler 中拿到解析结果</li>
</ol>
<p>下面展示的例子都存在 mybatis 的 repo 的</p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul>
<li>add URL here</li>
<li>SAX 是怎么做到事件触发的，光想想找不到思路。。。得看看源码</li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="http://www.saxproject.org/quickstart.html">官方文档</a></li>
<li><a href="https://docstore.mik.ua/orelly/xml/sax2/index.htm">Orelly 书集</a></li>
</ul>
<h2 id="Parse-xml-并生成对应的实体类"><a href="#Parse-xml-并生成对应的实体类" class="headerlink" title="Parse xml 并生成对应的实体类"></a>Parse xml 并生成对应的实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义 handler，解析 element 并被 emp bean 赋值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// List to hold Employees object</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Employee&gt; empList = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Employee emp = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder data = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter method for employee list</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getEmpList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> bAge = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> bName = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> bGender = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> bRole = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;Employee&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// create a new Employee and put it in Map</span></span><br><span class="line">            String id = attributes.getValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="comment">// initialize Employee object and set id attribute</span></span><br><span class="line">            emp = <span class="keyword">new</span> Employee();</span><br><span class="line">            emp.setId(Integer.parseInt(id));</span><br><span class="line">            <span class="comment">// initialize list</span></span><br><span class="line">            <span class="keyword">if</span> (empList == <span class="keyword">null</span>)</span><br><span class="line">                empList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;name&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// set boolean values for fields, will be used in setting Employee variables</span></span><br><span class="line">            bName = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;age&quot;</span>)) &#123;</span><br><span class="line">            bAge = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;gender&quot;</span>)) &#123;</span><br><span class="line">            bGender = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;role&quot;</span>)) &#123;</span><br><span class="line">            bRole = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// create the data container</span></span><br><span class="line">        data = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bAge) &#123;</span><br><span class="line">            <span class="comment">// age element, set Employee age</span></span><br><span class="line">            emp.setAge(Integer.parseInt(data.toString()));</span><br><span class="line">            bAge = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bName) &#123;</span><br><span class="line">            emp.setName(data.toString());</span><br><span class="line">            bName = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bRole) &#123;</span><br><span class="line">            emp.setRole(data.toString());</span><br><span class="line">            bRole = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bGender) &#123;</span><br><span class="line">            emp.setGender(data.toString());</span><br><span class="line">            bGender = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;Employee&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// add Employee object to list</span></span><br><span class="line">            empList.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span> ch[], <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        data.append(<span class="keyword">new</span> String(ch, start, length));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_myhandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SAXParser saxParser = saxParserFactory.newSAXParser();</span><br><span class="line">        MyHandler handler = <span class="keyword">new</span> MyHandler();</span><br><span class="line"></span><br><span class="line">        ClassLoader classLoader = getClass().getClassLoader();</span><br><span class="line">        File file = <span class="keyword">new</span> File(Objects.requireNonNull(classLoader.getResource(<span class="string">&quot;employees.xml&quot;</span>)).getFile());</span><br><span class="line"></span><br><span class="line">        saxParser.parse(file, handler);</span><br><span class="line">        <span class="comment">//Get Employees list</span></span><br><span class="line">        List&lt;Employee&gt; empList = handler.getEmpList();</span><br><span class="line">        <span class="comment">//print employee information</span></span><br><span class="line">        <span class="keyword">for</span> (Employee emp : empList)</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParserConfigurationException | SAXException | IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用 employees.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Employees</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Employee</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>29<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pankaj<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">role</span>&gt;</span>Java Developer<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Employee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Employee</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>35<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Lisa<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>Female<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">role</span>&gt;</span>CEO<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Employee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Employee</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>40<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">role</span>&gt;</span>Manager<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Employee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Employee</span> <span class="attr">id</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>25<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Meghna<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>Female<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">role</span>&gt;</span>Manager<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Employee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Employees</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="SAXParser-Vs-XMLReader"><a href="#SAXParser-Vs-XMLReader" class="headerlink" title="SAXParser Vs XMLReader"></a>SAXParser Vs XMLReader</h2><p>SAXParser 和 XMLReader 的关系：SAXParser 隶属于 javax 包， XMLReader 是从 saxproject 这个项目拿过来的。他们都可以读取 xml, SAXParser 底层还是调用了 XMLReader, 前者调用简单，只提供常规用法，后者使用稍显繁琐，但是可以实现的定制化功能多。</p>
<p>类关系上：SAXParser 继承了 AbstractSAXParser, AbstractSAXParser 实现了 XMLReader 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saxParser_vs_xmlReader</span><span class="params">()</span> <span class="keyword">throws</span> ParserConfigurationException, SAXException, IOException </span>&#123;</span><br><span class="line">    String emp =</span><br><span class="line">            <span class="string">&quot;&lt;Employee id=\&quot;1\&quot;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;age&gt;29&lt;/age&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;name&gt;Pankaj&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;gender&gt;Male&lt;/gender&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;role&gt;Java Developer&lt;/role&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &lt;/Employee&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    MyHandler handler = <span class="keyword">new</span> MyHandler();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parse with sax parser</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SaxParser result: &quot;</span>);</span><br><span class="line">    SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">    SAXParser saxParser= factory.newSAXParser();</span><br><span class="line">    saxParser.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(emp)), handler);</span><br><span class="line">    System.out.println(handler.getEmpList());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;XMLReader result: &quot;</span>);</span><br><span class="line">    XMLReader xmlReader = SAXParserFactory.newInstance().newSAXParser().getXMLReader();</span><br><span class="line">    xmlReader.setContentHandler(handler);</span><br><span class="line">    xmlReader.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(emp)));</span><br><span class="line">    System.out.println(handler.getEmpList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output, 第二次打印的时候</span></span><br><span class="line"><span class="comment">// SaxParser result: </span></span><br><span class="line"><span class="comment">// [Employee(id=1, name=Pankaj, gender=Male, age=29, role=Java Developer)]</span></span><br><span class="line"><span class="comment">// XMLReader result: </span></span><br><span class="line"><span class="comment">// [Employee(id=1, name=Pankaj, gender=Male, age=29, role=Java Developer), Employee(id=1, name=Pankaj, gender=Male, age=29, role=Java Developer)]</span></span><br></pre></td></tr></table></figure>

<h2 id="ErrorHandler-DTD-验证-XML"><a href="#ErrorHandler-DTD-验证-XML" class="headerlink" title="ErrorHandler + DTD 验证 XML"></a>ErrorHandler + DTD 验证 XML</h2><p>在原来的基础上，我们想要在解析 xml 的时候添加一些限制，比如 Employee 元素必须包含 gender 不然抛错。这种功能可以通过添加 DTD 规则并且打开 xml 验证功能来实现。</p>
<p>定义 DTD 文件，DTD 中会包含 xml 各个 element 的从属关系，可以设置的属性值，属性数量等信息。如下方的例子中我们就规定 Employee 元素必须有至少一个的 gender 信息， 并且 Employee 必须包含 id 属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorHandler</span> <span class="keyword">implements</span> <span class="title">ErrorHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warning</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        show(<span class="string">&quot;--Warning--&quot;</span>, exception);</span><br><span class="line">        <span class="keyword">throw</span> (exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        show(<span class="string">&quot;--Error--&quot;</span>, exception);</span><br><span class="line">        <span class="keyword">throw</span> (exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fatalError</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        show(<span class="string">&quot;--Fatal Error--&quot;</span>, exception);</span><br><span class="line">        <span class="keyword">throw</span> (exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String type, SAXParseException e)</span> </span>&#123;</span><br><span class="line">        System.out.println(type + <span class="string">&quot;: &quot;</span> + e.getMessage());</span><br><span class="line">        System.out.println(<span class="string">&quot;Line &quot;</span> + e.getLineNumber() + <span class="string">&quot; Column &quot;</span> + e.getColumnNumber());</span><br><span class="line">        System.out.println(<span class="string">&quot;System ID: &quot;</span> + e.getSystemId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> ParserConfigurationException, SAXException, IOException </span>&#123;</span><br><span class="line">    String str_with_dtd =</span><br><span class="line">            <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;!DOCTYPE Employees [\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;!ELEMENT Employees (Employee)*&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;!ELEMENT Employee (age?, name?, gender+, role*)&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;!ATTLIST Employee\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                id CDATA #REQUIRED\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                &gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;!ELEMENT age (#PCDATA)&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;!ELEMENT name (#PCDATA)&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;!ELEMENT gender (#PCDATA)&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;!ELEMENT role (#PCDATA)&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        ]&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;Employees&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &lt;Employee id=\&quot;1\&quot;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;age&gt;29&lt;/age&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;name&gt;Pankaj&lt;/name&gt;\n&quot;</span> +</span><br><span class="line"><span class="comment">//                &quot;        &lt;gender&gt;Male&lt;/gender&gt;\n&quot; +</span></span><br><span class="line">            <span class="string">&quot;        &lt;role&gt;Java Developer&lt;/role&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &lt;/Employee&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;/Employees&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    XMLReader xmlReader = SAXParserFactory.newInstance().newSAXParser().getXMLReader();</span><br><span class="line">    xmlReader.setFeature(<span class="string">&quot;http://xml.org/sax/features/validation&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    xmlReader.setErrorHandler(<span class="keyword">new</span> MyErrorHandler());</span><br><span class="line">    xmlReader.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(str_with_dtd)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// --Error--: The content of element type &quot;Employee&quot; must match &quot;(age?,name?,gender+,role*)&quot;.</span></span><br><span class="line"><span class="comment">// Line 18 Column 16</span></span><br><span class="line"><span class="comment">// System ID: null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.xml.sax.SAXParseException; lineNumber: 18; columnNumber: 16; The content of element type &quot;Employee&quot; must match &quot;(age?,name?,gender+,role*)&quot;.</span></span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong> 在这个例子中我们只能用 XMLReader, 应为我们只实现了 ErrorHandler 接口。SaxParser 只能处理继承了 DefaultHandler 的类</p>
<h2 id="EntityResolver-samples"><a href="#EntityResolver-samples" class="headerlink" title="EntityResolver samples"></a>EntityResolver samples</h2><p>Spring中使用DelegatingEntityResolver 类作为 EntityResolver 的实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InputSource <span class="title">resolveEntity</span><span class="params">(String publicId, String systemId)</span> <span class="keyword">throws</span> SAXException, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (systemId != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果是DTD从这里开始</span></span><br><span class="line">        <span class="keyword">if</span> (systemId.endsWith(DTD_SUFFIX)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.dtdResolver.resolveEntity(publicId, systemId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是XSD从这里开始</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (systemId.endsWith(XSD_SUFFIX)) &#123;</span><br><span class="line">            <span class="comment">// 通过调用META-INF/Spring.schemas解析</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.schemaResolver.resolveEntity(publicId, systemId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例二:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEntityResolver</span> <span class="keyword">implements</span> <span class="title">EntityResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputSource <span class="title">resolveEntity</span><span class="params">(String publicId, String systemId)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;----- Call MyEntityResolver, PID: %s + SID: + %s&quot;</span>, publicId, systemId));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> ParserConfigurationException, SAXException, IOException </span>&#123;</span><br><span class="line">    String str_with_dtd = <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;!DOCTYPE succession-data-model PUBLIC \&quot;Self_defined_plublic_name\&quot; \&quot;http://self/defined/public/name\&quot;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;succession-data-model&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;/succession-data-model&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    XMLReader xmlReader = XMLReaderFactory.createXMLReader();</span><br><span class="line">    xmlReader.setEntityResolver(<span class="keyword">new</span> MyEntityResolver());</span><br><span class="line">    xmlReader.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(str_with_dtd)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">// ----- Call MyEntityResolver, PID: Self_defined_plublic_name + SID: + http://self/defined/public/name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// java.net.UnknownHostException: self</span></span><br><span class="line"><span class="comment">// at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:196)</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>在输出了 publicId 和 systemId 之后，他会试图通过 http 拿到 inputStream 中指定的文件数据，但是我随便写的，所以报错了，但是实验目的已经达到了</p>
<h2 id="External-DTD-XSD-sample"><a href="#External-DTD-XSD-sample" class="headerlink" title="External DTD/XSD sample"></a>External DTD/XSD sample</h2><p>这部分我们可以等到以后看 spring 或者 mybatis 解析 xml 的时候看，直接是现成的例子， 他是通过 EntityResolver 指定的解析规则</p>
<h2 id="XMLFilter-使用案例"><a href="#XMLFilter-使用案例" class="headerlink" title="XMLFilter 使用案例"></a>XMLFilter 使用案例</h2><p>解析 XML 时如果需要过滤某些节点，可以使用该技术，优点：避免修改原有逻辑，使得逻辑更清晰，分层</p>
<p>Scenario: 解析 Employee 只处理 deptid = 3 的节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FemaleFilter</span> <span class="keyword">extends</span> <span class="title">XMLFilterImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FemaleFilter</span> <span class="params">(XMLReader parent)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes atts)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;employee&quot;</span>.equals(qName) &amp;&amp; atts.getValue(<span class="string">&quot;deptid&quot;</span>).equals(<span class="string">&quot;3&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">super</span>.startElement(uri, localName, qName, atts);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FemaleHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;employee&quot;</span>.equals(qName)) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;QName: %s, id: %s, deptid: %s %n&quot;</span>, qName, attributes.getValue(<span class="string">&quot;empid&quot;</span>), attributes.getValue(<span class="string">&quot;deptid&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> SAXException, IOException </span>&#123;</span><br><span class="line">    String xml = <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;personnel&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;employee empid=\&quot;332\&quot; deptid=\&quot;24\&quot; shift=\&quot;night\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;         status=\&quot;contact\&quot;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    JennyBerman\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;/employee&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;employee empid=\&quot;994\&quot; deptid=\&quot;24\&quot; shift=\&quot;day\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;         status=\&quot;donotcontact\&quot;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    AndrewFule\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;/employee&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;employee empid=\&quot;948\&quot; deptid=\&quot;3\&quot; shift=\&quot;night\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;         status=\&quot;contact\&quot;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    AnnaBangle\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;/employee&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;employee empid=\&quot;1032\&quot; deptid=\&quot;3\&quot; shift=\&quot;day\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;         status=\&quot;contact\&quot;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    DavidBaines\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;/employee&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;/personnel&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    XMLReader reader = XMLReaderFactory.createXMLReader();</span><br><span class="line">    XMLFilter femaleFilter = <span class="keyword">new</span> FemaleFilter(reader);</span><br><span class="line">    femaleFilter.setContentHandler(<span class="keyword">new</span> FemaleHandler());</span><br><span class="line">    femaleFilter.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(xml)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// QName: employee, id: 948, deptid: 3</span></span><br><span class="line"><span class="comment">// QName: employee, id: 1032, deptid: 3</span></span><br></pre></td></tr></table></figure>

<p>例子里面的示例比较简单，如果判断条件分散在好几个 node 里面，可能解析起来就不方便了，不过得具体问题具体分析</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>xml</tag>
        <tag>sax</tag>
      </tags>
  </entry>
  <entry>
    <title>变量赋值，跌进了坑中</title>
    <url>/hexo/2021/03/19/Java-variable-assignment/</url>
    <content><![CDATA[<p>今天在修一个 feature 的时候，掉进了一个很初级的坑中而不自觉，debug 了好久才发现的，汗颜</p>
<h2 id="问题简化"><a href="#问题简化" class="headerlink" title="问题简化"></a>问题简化</h2><p>求解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String , Integer&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScope</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Integer&gt; tmp = person.getMap();</span><br><span class="line">        System.out.println(tmp); <span class="comment">// null</span></span><br><span class="line">        System.out.println(person.getMap()); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">        tmp = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        tmp.put(<span class="string">&quot;jack&quot;</span>, <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(tmp); <span class="comment">// &#123;jack=31&#125;</span></span><br><span class="line">        System.out.println(person.getMap()); <span class="comment">// null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>debug 的时候还一直纳闷，怎么 person 引用没有被赋值。。。作为对比看下面的例子应该就很清楚了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String , Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 带初始化引用类型的</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScope</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Integer&gt; tmp = person.getMap();</span><br><span class="line">        System.out.println(tmp); <span class="comment">// &#123;&#125;</span></span><br><span class="line">        System.out.println(person.getMap()); <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">        tmp.put(<span class="string">&quot;jack&quot;</span>, <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(tmp); <span class="comment">// &#123;jack=31&#125;</span></span><br><span class="line">        System.out.println(person.getMap()); <span class="comment">// &#123;jack=31&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在特殊化一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScope</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Integer&gt; tmp = person.getMap();</span><br><span class="line">        System.out.println(tmp); <span class="comment">// &#123;&#125;</span></span><br><span class="line">        System.out.println(person.getMap()); <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">        tmp.put(<span class="string">&quot;jack&quot;</span>, <span class="number">31</span>);</span><br><span class="line">        tmp = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        tmp.put(<span class="string">&quot;jerry&quot;</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(tmp); <span class="comment">// &#123;jack=21&#125;</span></span><br><span class="line">        System.out.println(person.getMap()); <span class="comment">// &#123;jack=31&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结一下就是，改变引用类型的值没什么问题，但是如果一开始是 null 的话它就不会随着一起改了</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Java xml parser compare</title>
    <url>/hexo/2020/11/05/Java-xml-parser-compare/</url>
    <content><![CDATA[<p>记录一下公司实际项目中新老两种 XML 解析框架的实现方式，作为以后类似问题的参考</p>
<h2 id="老的实现方式"><a href="#老的实现方式" class="headerlink" title="老的实现方式"></a>老的实现方式</h2><p>用的是最传统的 SAX 解析模式，优点是很直观，在这个模块规模还小的时候挺好的，只要熟悉 SAX 的使用方式上手很快，但是不管什么功能，在经过十几年的反复堆砌之后都会变成一个难以维护的怪物。</p>
<p>实现的时候，最大的弊端应该是参杂了很多的业务逻辑到解析过程中，就我看来，解析就应该是纯粹的过程，业务相关的验证应该放到解析后做才对！</p>
<p>重构前：</p>
<ul>
<li>最外层有 3k 的代码来解析 xml</li>
<li>最外层到 DefaultHandler 接口，中间还有 2 个父类继承关系存放各种公共变量和方法</li>
<li>所有的模块组都在一个 class 中维护代码，很臃肿，很多冗余</li>
<li>一些公共的 element, 比如 description, label 之类的每个模块都可能出一些奇葩用法，维护更难</li>
<li>在最外层的 Handler 实现中需要存储很多变量来存储中间状态的值</li>
</ul>
<p>实现伪代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LegacyParser</span> <span class="keyword">extends</span> <span class="title">SuperParser3</span>...<span class="title">SuperParser1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ParsedResultBean bean;</span><br><span class="line">    <span class="keyword">private</span> ModuleElement1 element1;</span><br><span class="line">    <span class="keyword">private</span> ModuleElement2 element1;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> ModuleElementN elementn;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, IModuleElement&gt; elementGroup1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, IModuleElement&gt; elementGroupn = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多种重载的构造函数包含 module 各自的 flag 参数，再定制后面 module 内容部的处理逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">LegacyParser</span><span class="params">(ParsedResultBean bean)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">LegacyParser</span><span class="params">(ParsedResultBean bean, <span class="keyword">boolean</span> moduleFlag1)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">LegacyParser</span><span class="params">(ParsedResultBean bean, <span class="keyword">boolean</span> moduleFlag1, <span class="keyword">boolean</span> moduleFlag2)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个集合存储可用解析器</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, ElementParser&gt; availableParsers = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ElementParser1</span> <span class="keyword">extends</span> <span class="title">BaseElementParser</span>...<span class="title">DefaultHander</span> <span class="keyword">implements</span> <span class="title">IElementParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getElementName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ElementName1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attrs)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">          <span class="comment">// module logic</span></span><br><span class="line">          elementGroup1.put(...);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moduleMehtods</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ElementParser2</span>...<span class="title">N</span> <span class="keyword">extends</span> <span class="title">BaseElementParser</span>...<span class="title">DefaultHander</span> <span class="keyword">implements</span> <span class="title">IElementParser</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最外部一个</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String name, Attributes attrs)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (availableParsers.containsKey(name)) &#123;</span><br><span class="line">            elementParsers.get(name).startElement(uri, localName, name, attrs);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SAXException(<span class="string">&quot;Unexpected element &quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String name, Attributes attrs)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (availableParsers.containsKey(name)) &#123;</span><br><span class="line">            elementParsers.get(name).endElement(uri, localName, name, attrs);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SAXException(<span class="string">&quot;Unexpected element &quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>lang 包类简介</title>
    <url>/hexo/2020/01/08/Lang%20%E5%8C%85%E7%B1%BB%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>用人话解释我用过的 Class 类中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 食用方法：classA.isAssignableFrom(classB)</span></span><br><span class="line"><span class="comment">* 表达的意思：classB 是不是 classA 的子类/接口 或 本身</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isAssignableFrom</span><span class="params">(Class&lt;?&gt; cls)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Samples, all tests passed.</span></span><br><span class="line"><span class="keyword">import</span> org.testng.Assert;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIsAssignableFrom</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_isAssignableFrom</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 对自己使用，返回 true</span></span><br><span class="line">        Assert.assertTrue(ClassA.class.isAssignableFrom(ClassA.class));</span><br><span class="line">        <span class="comment">// 父类对子类使用，返回 true</span></span><br><span class="line">        Assert.assertTrue(ClassA.class.isAssignableFrom(ClassB.class));</span><br><span class="line">        <span class="comment">// 子类对父类使用，返回 false</span></span><br><span class="line">        Assert.assertFalse(ClassB.class.isAssignableFrom(ClassA.class));</span><br><span class="line">        <span class="comment">// 父接口对自接口使用，返回 true</span></span><br><span class="line">        Assert.assertTrue(InterfaceC.class.isAssignableFrom(InterfaceD.class));</span><br><span class="line">        <span class="comment">// 子接口对父接口使用，返回 false</span></span><br><span class="line">        Assert.assertFalse(InterfaceD.class.isAssignableFrom(InterfaceC.class));</span><br><span class="line">        <span class="comment">// 接口对实现了自己的类使用，返回 true</span></span><br><span class="line">        Assert.assertTrue(InterfaceC.class.isAssignableFrom(ClassB.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> <span class="keyword">extends</span> <span class="title">ClassA</span> <span class="keyword">implements</span> <span class="title">InterfaceC</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterfaceC</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterfaceD</span> <span class="keyword">extends</span> <span class="title">InterfaceC</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>lang</tag>
        <tag>class</tag>
      </tags>
  </entry>
  <entry>
    <title>学徒的心</title>
    <url>/hexo/2022/07/04/Lesson-keep-humble/</url>
    <content><![CDATA[<p>最近这个从 session 中删除 provisioner bean 的工作做的确实不细致，有点懈怠了。在项目开始之前就没有做好工作安排，导致测试环境上出了 bug, 而且被其他 team challenge 了，实力打脸。以后应该吸取这个教训，案件还原如下。</p>
<p>某日 MCAP 的需求提上日程(MCAP 是将现有服务移到公有云上的这么一个项目，所以要减小内存开销)，突然要落地这个 remove 的项目。前期有调研过，可行性方面还是没问题的，原始业务如下：</p>
<p>在登陆时，将 provisioner bean 塞入 session， 在后续如果需要用到这个 bean, 通过 <code>context.get(&quot;provisionerBean&quot;)</code> 或者 <code>@Inject ProvisionerBean provisionerBean</code> 的方式获取。在查看原有业务时，我们发现，在存入 bean 的时候还会将对应的 id 存入 session。 那么作为解决方案，我们可以在现有拿 bean 的地方，通过拿 id 并查 DB 拿到 user 的方式绕过去。</p>
<p>在给 module team 实施修改方案的时候，他们提出一些 concern：多了访问 DB 的过程，有降低 performance 的风险。和 arch review 了这种风险，结合我们的实际使用场景，这个 provisioner 是后台管理人员，作为维护和系统 setup 的角色，使用频率很低，所以可以忽略这种风险。</p>
<p>目前为止都 OK 但是改代码的时候就有点粗暴，原来使用方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ProvisionerBean provisionerBean = SFContext.getContext().getInstance(SessionConstants.PROVISIONER_BEAN, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="meta">@Qualifier(SessionConstants.PROVISIONER_BEAN)</span></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">private</span> ProvisionerBean provisionerBean;</span><br></pre></td></tr></table></figure>

<p>这种使用方式是不会抛异常的，只要 get 就行了，但是用查 DB 的方式代替之后，会额外附带异常处理类似</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String provisionerId = SFContext.getContext().getInstance(SessionConstants.PROVISIONER_ID, <span class="keyword">false</span>);</span><br><span class="line">ProvisionerDataService provisionerDataService = SFContext.getContext().getInstance(ProvisionerDataService.NAME, <span class="keyword">true</span>);</span><br><span class="line">ProvisionerBean provisionerBean = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    provisionerBean = provisionerDataService.findProvisionerById(provisionerId);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ServiceApplicationException e) &#123;</span><br><span class="line">    LOGGER.error(<span class="string">&quot;Exception occured while getting provisionerBean&quot;</span>,e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>module team 反馈这种改法侵入性太强，会对他们的代码结构有很大的改变，涉及到源码和大批的 UT 改动。和他们讨论之后，我们打算将这个改动封装到我们内部的类中，并通过统一的接口暴露给外部使用。接口中处理异常，module 只负责调用而不产生其他副作用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// provisionerServiceImpl.class</span></span><br><span class="line">fetchProvisionerFromContext() &#123;</span><br><span class="line">    String provisionerId = context.get(<span class="string">&quot;provisionerId&quot;</span>);</span><br><span class="line">    ProvisionerBean provisionerBean = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (provisionerId != empty) &#123;</span><br><span class="line">        provisionerBean = service.findProvisionerFromDB(provisionerId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        provisionerBean = context.get(provisionerBean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> provisionerBean</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的只是简化版，实际代码中的逻辑还包括了从 session 中拿 provisioner bean 和 db 中查询结果做比较，如果不同则返回 session 中的结果并打印 log 记录。然后我们有另外一套 Splunk 的系统，我们可以在代码部署后通过检查 log 检测是否有预期外的行为，而且这种方式不会对现有的行为产生任何影响。</p>
<p>然而世事难料，和 Arch review 代码的时候，他提出了一种新的修改方式，由于我们要改的那些东西是在 SFContext 里面的，我们也许可以通过框架层面的修改来改变 bean 的生成方式，这种方式的侵入性是最小的。ProvisionerBean 是通过 factory bean 的方式向 context 的中注入 bean 的，我们可以 refactor 一下生成方式，改为先从 session 中拿到 id 然后调用 service 拿 DB 数据组成 bean。这样的话，所有调用点都不用改了，perfect！</p>
<p>又经过一轮 research，大致确定了通过修改 factory bean 的方案，我们返回 prototype 类型的 bean, 使用过后通过 GC 回收。而且后续其他 module 需要修改的代码量减少了很多, 对比如下</p>
<table>
<thead>
<tr>
<th align="left">Before</th>
<th align="left">After</th>
</tr>
</thead>
<tbody><tr>
<td align="left">repo:13, call: 34</td>
<td align="left">repo: 6, call: 9</td>
</tr>
</tbody></table>
<p>如果修改点比较多，还需要专门建立一个文档记录修改做追踪用</p>
<p>感觉这才是 Arch 这个角色的价值。contract, 就硬改，也不会看修改的地方是什么feature，不会想测测是不是有可能做回归。我现能达到的程度是，能够将这个 refactor 的任务条理理清楚，做改动的时候有这个 sense 去看看调用栈，看看会不会有什么没考虑到的情况并考虑如何测试改动。Arch 则是看了要改的地方，先看看系统本身是不是有地方提供了统一处理的能里，在达到目的的同时，将影响最小化，做法很优雅。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 命令小贴士</title>
    <url>/hexo/2020/07/08/Linux-cmd-tips/</url>
    <content><![CDATA[<p>常用 Linux command 备忘录</p>
<h2 id="sh-Vs-bash"><a href="#sh-Vs-bash" class="headerlink" title="sh Vs bash"></a>sh Vs bash</h2><p><code>sh</code> 是一种协议 shell command language. 而 <code>/bin/sh</code> 和 <code>/bin/bash</code> 是对他的两种不同的实现, 早起他们基本是一致的，但是随着 bash 的发展，他们变得不兼容起来。<code>/bin/sh</code> 还是标准，<code>/bin/bash</code> 则效率更高</p>
<h2 id="查看当前目录下文件最近修改时间"><a href="#查看当前目录下文件最近修改时间" class="headerlink" title="查看当前目录下文件最近修改时间"></a>查看当前目录下文件最近修改时间</h2><p>两种方式，一种是通过 <code>ls --full-time</code> 显示</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls --full-time</span><br><span class="line">total 60</span><br><span class="line">drwxr-xr-x    2 root     root          4096 2021-04-14 10:24:04 +0000 srv</span><br><span class="line">dr-xr-xr-x   13 root     root             0 2021-07-12 02:52:11 +0000 sys</span><br><span class="line">drwxr-xr-x    2 root     root          4096 2021-07-12 02:53:15 +0000 <span class="built_in">test</span></span><br><span class="line">drwxrwxrwt    1 root     root          4096 2021-05-04 17:21:05 +0000 tmp</span><br></pre></td></tr></table></figure>

<p>另一种是 <code>stat file_name</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stat</span> <span class="built_in">test</span></span><br><span class="line">  File: <span class="built_in">test</span></span><br><span class="line">  Size: 4096          Blocks: 8          IO Block: 4096   directory</span><br><span class="line">Device: bbh/187d    Inode: 1055968     Links: 2</span><br><span class="line">Access: (0755/drwxr-xr-x)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Access: 2021-07-12 02:53:32.000000000</span><br><span class="line">Modify: 2021-07-12 02:53:15.000000000</span><br><span class="line">Change: 2021-07-12 02:53:15.000000000</span><br></pre></td></tr></table></figure>

<h2 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h2><p>查看信息的同时做写入操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ps  | tee info.log      <span class="comment"># ps 输出进程信息的同时，将结果导入 info.log 中</span></span><br><span class="line"><span class="comment">#   PID TTY           TIME CMD</span></span><br><span class="line"><span class="comment"># 23438 ttys000    0:59.10 /bin/zsh -l</span></span><br><span class="line"><span class="comment"># 48670 ttys002    0:01.91 /bin/zsh --login -i</span></span><br><span class="line"><span class="comment"># 71565 ttys003    0:02.87 -zsh</span></span><br><span class="line"><span class="comment"># 72395 ttys003    0:00.00 tee info.log</span></span><br><span class="line">cat info.log            <span class="comment"># 查看文本信息</span></span><br><span class="line"><span class="comment">#   PID TTY           TIME CMD</span></span><br><span class="line"><span class="comment"># 23438 ttys000    0:59.10 /bin/zsh -l</span></span><br><span class="line"><span class="comment"># 48670 ttys002    0:01.91 /bin/zsh --login -i</span></span><br><span class="line"><span class="comment"># 71565 ttys003    0:02.87 -zsh</span></span><br><span class="line"><span class="comment"># 72395 ttys003    0:00.00 tee info.log</span></span><br></pre></td></tr></table></figure>

<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&lt;: 输入重定向</span><br><span class="line">&gt;: 输出重定向</span><br><span class="line">&lt;&lt;: 截取标准输入</span><br><span class="line">&gt;&gt;: 输出重定向，追加，不覆盖</span><br><span class="line">EOF: 自定义终止符</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只能在一条命令中完成，文本过长会很累赘</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;eeeeecho&quot;</span> &gt;&gt; echo.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 aaa 写入 a.txt</span></span><br><span class="line">cat &lt;&lt; EOF &gt; a.txt</span><br><span class="line">aaa</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># a.txt 中追加 bbb</span></span><br><span class="line">cat &lt;&lt; EOF &gt;&gt; a.txt</span><br><span class="line">bbb</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># a.txt 拷贝到 b.txt</span></span><br><span class="line">cat a.txt &gt; b.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 和 cat 类似不过它还有附带显示内容的效果</span></span><br><span class="line"><span class="comment"># tee &lt;&lt; EOF &gt; d.txt 会将显示部分吞掉，文件倒是还是生产</span></span><br><span class="line">tee c.txt &lt;&lt; EOF</span><br><span class="line">ccc</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>终端获取资源，Sample: <code>curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python</code></p>
<p>-s: 静默模式，去掉显示进度等信息<br>-S: 显示错误信息<br>-L: 自动站点跳转</p>
<p>将 query 结果存到本地文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl url &gt;&gt; ret.json</span><br></pre></td></tr></table></figure>

<h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p><code>ping</code> 命令不需要带 protocal，如果要指定端口可以加 <code>-p</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping -p 8089 cloudsearch-dc8.cld.ondemand.com</span><br></pre></td></tr></table></figure>

<h2 id="容量查询"><a href="#容量查询" class="headerlink" title="容量查询"></a>容量查询</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示系统容量</span></span><br><span class="line">df -hl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前目录下个文件夹大小</span></span><br><span class="line">du -sh *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示文件大小并倒序排列</span></span><br><span class="line">du -sh * | sort -hr</span><br></pre></td></tr></table></figure>

<h2 id="ps-命令保留表头"><a href="#ps-命令保留表头" class="headerlink" title="ps 命令保留表头"></a>ps 命令保留表头</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个命令不是很好，比较繁琐，效率也不高。</span></span><br><span class="line"><span class="comment"># 实现方式是先 ps 一下拿到 head 打印出来，再 ps 一次拿到我们想要的结果</span></span><br><span class="line">ps | head -1; ps | grep java</span><br></pre></td></tr></table></figure>
<h2 id="查看文件-夹大小"><a href="#查看文件-夹大小" class="headerlink" title="查看文件/夹大小"></a>查看文件/夹大小</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># du: disk usage</span></span><br><span class="line">du -sh *</span><br></pre></td></tr></table></figure>

<h2 id="链接-SFTP"><a href="#链接-SFTP" class="headerlink" title="链接 SFTP"></a>链接 SFTP</h2><p>建立联接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sfpt username@1.1.1.1 <span class="comment"># 回车输入密码</span></span></span><br></pre></td></tr></table></figure>

<p>获取文件下载到指定路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">sftp&gt;</span><span class="bash"> get /<span class="built_in">export</span>/sftp/test.csv /Users/my/Downloads</span></span><br><span class="line">Fetching /export/sftp/test.csv to /Users/my/Downloads/test.csv</span><br><span class="line">/export/sftp/test.csv            100%  133     0.3KB/s   00:00</span><br></pre></td></tr></table></figure>

<p>上传本地文件到服务器指定路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">sftp&gt;</span><span class="bash"> put /Users/my/Downloads/re-produce.gif /<span class="built_in">export</span>/sftp</span></span><br><span class="line">Uploading /Users/my/Downloads/re-produce.gif to /export/sftp/re-produce.gif</span><br><span class="line">/Users/my/Downloads/re-produce.gif            100%  257KB  86.6KB/s   00:02</span><br></pre></td></tr></table></figure>

<h2 id="统计文件"><a href="#统计文件" class="headerlink" title="统计文件"></a>统计文件</h2><ul>
<li>当前目录下的文件个数，不包含文件夹 <code>ls -l | grep &#39;^-&#39; | wc -l</code></li>
<li>当前目录下的文件个数，递归 <code>ls -lR | grep &#39;^-&#39; | wc -l</code></li>
<li>当前目录下的文件夹个数 <code>ls -l | grep &#39;^d&#39; | wc -l</code></li>
</ul>
<p>解释：</p>
<ul>
<li><code>ls -l</code>: 显示当前目录下所有文件，文件+文件夹</li>
<li><code>grep &#39;^-&#39;</code>: 删选文件，<code>grep &#39;^-&#39;</code> 筛选文件夹。 示例 <code>-rw-r--r--    1 jack  staff     1061 Aug  3 16:53 LICENSE</code></li>
<li><code>wc -l</code>: 统计行数</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 弹射起步</title>
    <url>/hexo/2021/04/28/Linux-quick-start/</url>
    <content><![CDATA[<h2 id="走进-Linux-系统"><a href="#走进-Linux-系统" class="headerlink" title="走进 Linux 系统"></a>走进 Linux 系统</h2><p>开机会启动很多程序，Windows 叫服务(service)，Linux 叫守护进程(daemon)</p>
<h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><p>linux 中没有报错，即成功</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sync            <span class="comment"># 同步数据</span></span><br><span class="line"></span><br><span class="line">shutdown -h now <span class="comment"># 马上关机</span></span><br><span class="line"></span><br><span class="line">reboot          <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure>

<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ol>
<li>一切皆文件</li>
<li>根目录 <code>/</code>，所有文件都挂载在这个节点下</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls</span><br><span class="line"><span class="comment"># bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span></span><br><span class="line"><span class="comment"># bin: binary, 存放经常使用的命令</span></span><br><span class="line"><span class="comment"># boot: 启动 Linux 时使用的一些核心文件，包括连接文件和镜像文件</span></span><br><span class="line"><span class="comment"># dev: device, 存放外部设备，Linux 中访问设备和访问文件是一样的</span></span><br><span class="line"><span class="comment"># *etc: 存放所有系统管理所需的配置文件和子目录</span></span><br><span class="line"><span class="comment"># home: 用户主目录，每个用户有一个自己的目录，以自己命名</span></span><br><span class="line"><span class="comment"># lib: 系统最基本的动态连接共享库，类似于 Windows 的 dll 文件</span></span><br><span class="line"><span class="comment"># mnt: 系统提供目录为用户临时挂载文件系统，如光驱等</span></span><br><span class="line"><span class="comment"># lost+found: 一般为空，当系统非正常关机时，这里就会存放一些文件</span></span><br><span class="line"><span class="comment"># media: 媒体设备，U盘，光驱等</span></span><br><span class="line"><span class="comment"># *opt: 额外安装的软件所摆放的位置，比如安装一个数据库什么的，默认为空</span></span><br><span class="line"><span class="comment"># proc: 虚拟目录，系统映射，不管</span></span><br><span class="line"><span class="comment"># *root: 管理员目录</span></span><br><span class="line"><span class="comment"># sbin: s for super user, 村系统管理员使用的管理程序</span></span><br><span class="line"><span class="comment"># srv: 存放一些服务启动后需要提取的数据</span></span><br><span class="line"><span class="comment"># sys: linux2.6之后一个很大的变化，2.6后该目录下新出现一个文件系统 sysfs</span></span><br><span class="line"><span class="comment"># tmp: 临时文件，用完就丢</span></span><br><span class="line"><span class="comment"># *usr: 非常重要的目录，用户很多应用程序和文件都放在这个目录下，类似 Windows 的 program files 目录</span></span><br><span class="line"><span class="comment"># usr/bin: 系统用户使用的应用程序</span></span><br><span class="line"><span class="comment"># usr/sbin: 超级用户使用的应用程序</span></span><br><span class="line"><span class="comment"># usr/src: 内核源代码默认放置位置</span></span><br><span class="line"><span class="comment"># var: 放不断扩充的东西，比如日志</span></span><br><span class="line"><span class="comment"># run: 临时文件系统，存储系统启动以来的信息。重启时，这个目录下的文件应该被删除或清空</span></span><br><span class="line"><span class="comment"># www: 存放服务器网站相关资源，环境，网站目录</span></span><br></pre></td></tr></table></figure>

<h2 id="常用基本命令"><a href="#常用基本命令" class="headerlink" title="常用基本命令"></a>常用基本命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p f1/f2/f3   <span class="comment"># 递归创建文件夹</span></span><br><span class="line">rmdir -p f1         <span class="comment"># 递归删除</span></span><br><span class="line">rmdir f1            <span class="comment"># 如果有子文件，删除会失败</span></span><br></pre></td></tr></table></figure>

<h2 id="内容查看"><a href="#内容查看" class="headerlink" title="内容查看"></a>内容查看</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat <span class="comment"># 顺序</span></span><br><span class="line">tac <span class="comment"># 倒叙</span></span><br><span class="line">nl  <span class="comment"># 带行号</span></span><br><span class="line"></span><br><span class="line">less 比 more 好，功能多，向下查询 /，向上查询 ？</span><br><span class="line">tail -n 20 <span class="comment"># 最后20行</span></span><br></pre></td></tr></table></figure>

<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>硬链接：A…B, 假设 B 是 A 的硬连接，那么他们指向同一个文件，允许一个文件多个路径，用这种机制可以放置误删<br>软连接：类似 Windows 下的快捷方式</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">touch f1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt; f1</span><br><span class="line"></span><br><span class="line">ln f1 f2 <span class="comment"># 创建硬链接</span></span><br><span class="line"></span><br><span class="line">ln -s f1 f3 <span class="comment"># 创建软链接</span></span><br><span class="line"></span><br><span class="line">rm f1</span><br><span class="line"></span><br><span class="line">cat f2      <span class="comment"># f1, f2 硬连接，删除还存在</span></span><br><span class="line"><span class="comment"># hello</span></span><br><span class="line"></span><br><span class="line">cat f3      <span class="comment"># f1, f3 软链接，删除即不见</span></span><br><span class="line"><span class="comment"># cat: f3: No such file or directory</span></span><br></pre></td></tr></table></figure>

<h2 id="账户管理"><a href="#账户管理" class="headerlink" title="账户管理"></a>账户管理</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">useradd -m jack002 <span class="comment"># 创建 user 并在 home 下创建对应的文件夹</span></span><br><span class="line"><span class="comment"># root@945e2e63f891:/home# ls</span></span><br><span class="line"><span class="comment"># f2  f3  jack  jack002</span></span><br><span class="line"><span class="comment"># Linux 一切皆文件，添加用户其实就是往某一个文件中写入用户信息 /etc/passwd</span></span><br><span class="line"></span><br><span class="line">userdel -r jack002 <span class="comment"># 删除 user 并清空文件夹</span></span><br><span class="line"></span><br><span class="line">usermod -d /home/233 jack002 <span class="comment"># 修改用户目录, 233 并不存在，但是对应的信息还是设置到 passwd 中去了，所以修改前必须先手动创建文件夹</span></span><br><span class="line"><span class="comment"># root@945e2e63f891:/home# cat /etc/passwd</span></span><br><span class="line"><span class="comment"># jack002:x:1001:1001::/home/233:/bin/sh</span></span><br><span class="line"><span class="comment"># root@945e2e63f891:/home# ls</span></span><br><span class="line"><span class="comment"># f2  f3  jack  jack002</span></span><br><span class="line"></span><br><span class="line">root@945e2e63f891:/home<span class="comment">#</span></span><br><span class="line"><span class="comment"># root: 当前用户</span></span><br><span class="line"><span class="comment"># 945e2e63f891: 主机名</span></span><br><span class="line"><span class="comment"># /home: 当前路径</span></span><br><span class="line"><span class="comment"># &#x27;#&#x27; 超级用户</span></span><br><span class="line"></span><br><span class="line">su username <span class="comment"># 切换用户</span></span><br><span class="line"><span class="comment"># $: 提示符也会跟着改</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出用户切换</span></span><br><span class="line"></span><br><span class="line">hostname <span class="comment"># 查看主机名</span></span><br><span class="line">hostname xxx <span class="comment"># 修改主机名，需要重联生效</span></span><br><span class="line"></span><br><span class="line">passwd username <span class="comment"># 修改密码</span></span><br><span class="line"></span><br><span class="line">passwd -l username <span class="comment"># 锁用户</span></span><br><span class="line">passwd -d username <span class="comment"># 用户密码清空，也不能登陆</span></span><br></pre></td></tr></table></figure>

<h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p>本质是对 /etc/group 进行修改</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -g        # 指定 gid, 不指定就自增</span></span><br><span class="line">groupadd jackgroup</span><br><span class="line"><span class="comment"># root@945e2e63f891:/# cat /etc/group</span></span><br><span class="line"><span class="comment"># jackgroup:x:1002:</span></span><br><span class="line"><span class="comment"># jack520:x:520:</span></span><br><span class="line"></span><br><span class="line">groupdel jackgroup <span class="comment"># 删除 group</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -n    # 修改 id</span></span><br><span class="line"><span class="comment"># -G    # 设置用户组</span></span><br><span class="line">groupmod -g 555 -n jack555 jack520</span><br><span class="line"></span><br><span class="line">newgroup root <span class="comment"># 切换组</span></span><br></pre></td></tr></table></figure>

<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>/etc/passwd</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">jack002:x:1001:1001::/home/jack002:/bin/sh</span><br><span class="line">用户名：密码（不可见，所以是x）：用户标识号（自增）：组标识号：注释性描述：主目录：登陆 shell</span><br></pre></td></tr></table></figure>

<p>密码放在 /etc/shadow 加密过的 jack002:$6$/me.SpanXkOPad04$XO/jFHniPIenQQXFZhSOfwL7eQ0hQ..X5EWNigGrfh8sqZ6KA8wAFQtzCPpwgf.Ov9RIVp8hr9GcXB3un4Oax1:18746:0:99999:7:::</p>
<h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">df <span class="comment"># 列出整体磁盘使用量</span></span><br><span class="line"><span class="comment"># root@945e2e63f891:/# df -h</span></span><br><span class="line"><span class="comment"># Filesystem      Size  Used Avail Use% Mounted on</span></span><br><span class="line"><span class="comment"># overlay          59G   21G   35G  38% /</span></span><br><span class="line"><span class="comment"># tmpfs            64M     0   64M   0% /dev</span></span><br><span class="line"><span class="comment"># tmpfs           7.9G     0  7.9G   0% /sys/fs/cgroup</span></span><br><span class="line"><span class="comment"># shm              64M     0   64M   0% /dev/shm</span></span><br><span class="line"><span class="comment"># /dev/vda1        59G   21G   35G  38% /etc/hosts</span></span><br><span class="line"><span class="comment"># tmpfs           7.9G     0  7.9G   0% /proc/acpi</span></span><br><span class="line"><span class="comment"># tmpfs           7.9G     0  7.9G   0% /sys/firmware</span></span><br><span class="line">du <span class="comment"># 当前磁盘使用量</span></span><br><span class="line"><span class="comment"># root@945e2e63f891:/home# du -a</span></span><br><span class="line"><span class="comment"># 4       ./jack002/.bashrc</span></span><br><span class="line"><span class="comment"># 4       ./jack002/.profile</span></span><br><span class="line"><span class="comment"># 4       ./jack002/.bash_logout</span></span><br><span class="line"><span class="comment"># 16      ./jack002</span></span><br><span class="line"><span class="comment"># 4       ./f2</span></span><br><span class="line"><span class="comment"># 4       ./jack/f1/f2/f3</span></span><br><span class="line"><span class="comment"># 8       ./jack/f1/f2</span></span><br><span class="line"><span class="comment"># 12      ./jack/f1</span></span><br><span class="line"><span class="comment"># 16      ./jack</span></span><br><span class="line"><span class="comment"># 0       ./f3</span></span><br><span class="line"><span class="comment"># 40      .</span></span><br><span class="line"></span><br><span class="line">du -sm /*       <span class="comment"># 系统根目录下每个文件夹占用空间</span></span><br><span class="line"><span class="comment"># 5       /bin</span></span><br><span class="line"><span class="comment"># 1       /boot</span></span><br><span class="line"><span class="comment"># 0       /dev</span></span><br><span class="line"></span><br><span class="line">mount /dev/jack /mnt/jack <span class="comment"># 将外部设备 jack 挂载到 mnt 下，实现访问</span></span><br><span class="line"></span><br><span class="line">umount -f /mnt/jakc <span class="comment"># 强制卸载</span></span><br></pre></td></tr></table></figure>

<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ol>
<li>每个进程都有父进程</li>
<li>两种运行方式：前台，后台</li>
<li>服务基本都是后台运行，程序都是前台运行</li>
<li>每个进程都有一个 id 号</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -a 当前终端运行的所有进程信息</span></span><br><span class="line"><span class="comment"># -u 一用户的信息显示进程</span></span><br><span class="line"><span class="comment"># -x 显示后台运行进程的参数</span></span><br><span class="line">ps <span class="comment"># 查看当前正在运行的进程信息</span></span><br><span class="line"><span class="comment"># ps -aux       </span></span><br><span class="line"><span class="comment"># ps -ef 可以查看父进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -p 显示父 id</span></span><br><span class="line"><span class="comment"># -u 显示组信息</span></span><br><span class="line">pstree -pu <span class="comment"># 进程树</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> -9 pid <span class="comment"># 结束进程</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>弹射起步</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 换源</title>
    <url>/hexo/2019/12/02/Linux-update-software-sources/</url>
    <content><![CDATA[<p>Linux 配置国内源加速，以 Ubuntu 为例子</p>
<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><p>运行 command</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换 sources.list 中的源信息</span></span><br><span class="line">sudo sed -i <span class="string">&#x27;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新索引</span></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>如果配置不生效，查看 sources.list 文件中的源信息，可能不是 <code>archive.ubuntu.com</code> 所以更新失败，比如我的 WSL环境中，原始的源就 <code>security.ubuntu.com</code> 需要把上面的命令改为, 使之生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/security.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://mirrors.ustc.edu.cn/help/ubuntu.html">Ubuntu 源使用帮助</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>换源</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongo DB 安装</title>
    <url>/hexo/2021/12/02/Mongo-install/</url>
    <content><![CDATA[<p>使用 Docker 的方式安装 MongoDB</p>
<ol>
<li>docker pull mongo</li>
<li><code>docker run --name mymongo -d mongo</code> 使用默认设置启动</li>
<li><code>docker exec -it mymongo bash</code> 链接控制台输入 <code>mongod --version</code> 验证安装情况</li>
<li><code>mongo</code> 链接数据库, <code>exit</code> 退出</li>
</ol>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> dbs <span class="comment">-- 查看库</span></span><br><span class="line"></span><br><span class="line">db <span class="comment">-- 当前库名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> 库名 <span class="comment">-- 使用</span></span><br><span class="line"></span><br><span class="line">&gt; db.students.insertOne(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Jack&quot;</span>&#125;) <span class="comment">-- 插入数据</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;acknowledged&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;insertedId&quot;</span> : ObjectId(<span class="string">&quot;61a8bfa9e0344414ad0ee1e3&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">show</span> collections <span class="comment">-- 查看插入结果</span></span><br><span class="line">students</span><br><span class="line"></span><br><span class="line">&gt; db.students.find() <span class="comment">-- 查询</span></span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;61a8bfa9e0344414ad0ee1e3&quot;</span>), <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Jack&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Mac 上测试，启动立马停止，通过 <code>docker logs mymongo</code> 可以看到异常</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&#123;&quot;t&quot;:&#123;&quot;$date&quot;:&quot;2021-12-02T12:12:30.478+00:00&quot;&#125;,&quot;s&quot;:&quot;E&quot;,  &quot;c&quot;:&quot;STORAGE&quot;,  &quot;id&quot;:22312,   &quot;ctx&quot;:&quot;initandlisten&quot;,&quot;msg&quot;:&quot;Error creating journal directory&quot;,&quot;attr&quot;:&#123;&quot;directory&quot;:&quot;/data/db/journal&quot;,&quot;error&quot;:&quot;boost::filesystem::create_directory: No space left on device: \&quot;/data/db/journal\&quot;&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>Google 了一下，说是 Mac 才有的，docker volumn 不够了，可以通过指定挂在的 volumn 或者清理不用的 volumn 解决问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3000:27017 -v /Users/user/work/m1:/data/db --name m1 --net mongo-net mongo mongod</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">docker volume prune</span><br><span class="line"><span class="comment"># 最后，上面那个 prune 没用，用了下面这个简化版的</span></span><br><span class="line">docker  run -d -p 3000:27017 -v /Users/xxxx/mongodb/data/db:/data/db --name mymongo mongo</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it some-mongo bash</span><br><span class="line">docker logs some-mongo</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 基本概念 + Python 访问</title>
    <url>/hexo/2022/01/18/MongoDB-Python/</url>
    <content><![CDATA[<h2 id="Setup-MongoDB-the-Docker-Way"><a href="#Setup-MongoDB-the-Docker-Way" class="headerlink" title="Setup MongoDB the Docker Way"></a>Setup MongoDB the Docker Way</h2><ul>
<li><a href="https://hub.docker.com/_/mongo">镜像地址</a>, 包含了很多常用操作，比如挂载卷，导出数据，设置密码等</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载并启动一个镜像, 映射到 27017 端口并设置密码访问</span></span><br><span class="line"><span class="comment"># docker run -itd --name mymongo -p 27017:27017 mongo --auth</span></span><br><span class="line"><span class="comment"># 测试时不要加 --auth, 自找麻烦</span></span><br><span class="line">docker run -itd --name mymongo -v /Users/i306454/mongodb/data/db:/data/db -p 27017:27017 mongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接到 db 终端</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mymongo mongo admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 root/root 用户, 指定可操作的数据库</span></span><br><span class="line">db.createUser(&#123; user:<span class="string">&#x27;root&#x27;</span>,<span class="built_in">pwd</span>:<span class="string">&#x27;root&#x27;</span>,roles:[ &#123; role:<span class="string">&#x27;userAdminAnyDatabase&#x27;</span>, db: <span class="string">&#x27;admin&#x27;</span>&#125;,<span class="string">&quot;readWriteAnyDatabase&quot;</span>]&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以指定用户登陆</span></span><br><span class="line">db.auth(<span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;root&#x27;</span>)</span><br><span class="line"><span class="comment"># 1 授权成功</span></span><br><span class="line"></span><br><span class="line">use admin</span><br><span class="line"><span class="comment"># 查看系统信息</span></span><br><span class="line">db.getCollectionNames()</span><br></pre></td></tr></table></figure>

<h3 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h3><p>mymongo 启动失败(之前遇到过，我记得我记录过了，怎么找不到那片文章了呢（；￣ェ￣）), 使用 docker logs mymongo 可以看到异常信息 “{“t”:{“$date”:”2022-01-18T08:26:55.448+00:00”},”s”:”E”,  “c”:”STORAGE”,  “id”:22312,   “ctx”:”initandlisten”,”msg”:”Error creating journal directory”,”attr”:{“directory”:”/data/db/journal”,”error”:”boost::filesystem::create_directory: No space left on device: &quot;/data/db/journal&quot;“}}”，创建容器时指定挂在位置即可</p>
<h2 id="MongoDB-基本操作"><a href="#MongoDB-基本操作" class="headerlink" title="MongoDB 基本操作"></a>MongoDB 基本操作</h2><table>
<thead>
<tr>
<th align="left">RDBMS</th>
<th align="left">MongoDB</th>
</tr>
</thead>
<tbody><tr>
<td align="left">表</td>
<td align="left">集合</td>
</tr>
<tr>
<td align="left">行</td>
<td align="left">文档</td>
</tr>
<tr>
<td align="left">列</td>
<td align="left">字段</td>
</tr>
<tr>
<td align="left">表联合</td>
<td align="left">嵌入文档</td>
</tr>
<tr>
<td align="left">主键</td>
<td align="left">主键(MongoDB 提供了 key 为 _id)</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前库对象，默认为 test 库</span></span><br><span class="line">db</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并使用库</span></span><br><span class="line">use <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据时会自动创建数据库</span></span><br><span class="line">db.local.insert(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Jack&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据库</span></span><br><span class="line">use <span class="built_in">local</span></span><br><span class="line">db.dropDatabase()</span><br><span class="line"><span class="comment"># 查看结果</span></span><br><span class="line">show dbs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集合</span></span><br><span class="line">db.createCollection(<span class="string">&quot;runoob&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集合</span></span><br><span class="line">show collections</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集合并指定参数</span></span><br><span class="line">db.createCollection(<span class="string">&quot;mycol&quot;</span>, &#123; capped: <span class="literal">true</span>, autoIndexId: <span class="literal">true</span>, size: 6142800, max: 10000&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其实不需要特别创建集合，插入文档时会自动生成</span></span><br><span class="line">db.mycal2.insert(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Jack&quot;</span>&#125;)</span><br><span class="line">&gt; show collections </span><br><span class="line">mycal2</span><br><span class="line">mycol</span><br><span class="line">runoob</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除集合</span></span><br><span class="line">db.mycal2.drop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入文档</span></span><br><span class="line">db.collection_name.insert(doc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入多个文档</span></span><br><span class="line"><span class="comment"># db.collection.insertMany(</span></span><br><span class="line"><span class="comment">#    [ &lt;document 1&gt; , &lt;document 2&gt;, ... ],</span></span><br><span class="line"><span class="comment">#    &#123;</span></span><br><span class="line"><span class="comment">#       writeConcern: &lt;document&gt;,</span></span><br><span class="line"><span class="comment">#       ordered: &lt;boolean&gt;</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line">db.runoob.insertMany([&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;name&quot;</span>&#125;, &#123;<span class="string">&quot;a&quot;</span>:1&#125;])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已插入的文档</span></span><br><span class="line">db.runoob.find()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新文档</span></span><br><span class="line">db.runoob.update(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Jack&quot;</span>&#125;, &#123;<span class="variable">$set</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Jerry&quot;</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># 修改多条</span></span><br><span class="line">db.col.update(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Jack&quot;</span>&#125;, &#123;<span class="variable">$set</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Jerry&quot;</span>&#125;&#125;,&#123;multi:<span class="literal">true</span>&#125;)</span><br><span class="line"><span class="comment"># save 主键存在就更新，不存在就插入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文档</span></span><br><span class="line"><span class="comment"># db.collection.remove(</span></span><br><span class="line"><span class="comment">#    &lt;query&gt;,</span></span><br><span class="line"><span class="comment">#    &lt;justOne&gt;</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"><span class="comment"># 2.6以上版本</span></span><br><span class="line"><span class="comment"># db.collection.remove(</span></span><br><span class="line"><span class="comment">#    &lt;query&gt;,</span></span><br><span class="line"><span class="comment">#    &#123;</span></span><br><span class="line"><span class="comment">#      justOne: &lt;boolean&gt;,</span></span><br><span class="line"><span class="comment">#      writeConcern: &lt;document&gt;</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line">db.runoob.remove(&#123;<span class="string">&quot;a&quot;</span>:1&#125;)</span><br><span class="line"><span class="comment"># remove 已过时，官方推荐 deleteOne(), deleteMany()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询文档</span></span><br><span class="line"><span class="comment"># db.collection.find(query, projection)</span></span><br><span class="line"><span class="comment"># .pretty() 格式化输出</span></span><br><span class="line">db.runoob.find(&#123;<span class="variable">$or</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Jerry&quot;</span>&#125;, &#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;test&quot;</span>&#125;]&#125;).pretty()</span><br><span class="line"></span><br><span class="line"><span class="comment"># AND + OR 的例子</span></span><br><span class="line">db.col.find(&#123;<span class="string">&quot;likes&quot;</span>: &#123;<span class="variable">$gt</span>:50&#125;, <span class="variable">$or</span>: [&#123;<span class="string">&quot;by&quot;</span>: <span class="string">&quot;菜鸟教程&quot;</span>&#125;,&#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;MongoDB 教程&quot;</span>&#125;]&#125;).pretty()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 条件操作</span></span><br><span class="line"><span class="comment"># (&gt;) 大于 - $gt</span></span><br><span class="line"><span class="comment"># (&lt;) 小于 - $lt</span></span><br><span class="line"><span class="comment"># (&gt;=) 大于等于 - $gte</span></span><br><span class="line"><span class="comment"># (&lt;= ) 小于等于 - $lte</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空集合</span></span><br><span class="line">db.col.remove(&#123;&#125;)</span><br><span class="line"><span class="comment"># 查看 likes &gt; 100 的数据</span></span><br><span class="line">db.col.find(&#123;likes : &#123;<span class="variable">$gt</span> : 100&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># type 操作</span></span><br><span class="line">db.col.find(&#123;title: &#123;<span class="variable">$type</span>:2&#125;&#125;)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">db.col.find(&#123;title: &#123;<span class="variable">$type</span>:<span class="string">&#x27;string&#x27;</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># limit, 同 SQL 中的 limit</span></span><br><span class="line"><span class="comment"># db.collection.find(query, projection)</span></span><br><span class="line"><span class="comment"># 查询返回所有数据，只显示 title, _id 属性</span></span><br><span class="line">db.col.find(&#123;&#125;,&#123;<span class="string">&quot;title&quot;</span>:1,_id:0&#125;).<span class="built_in">limit</span>(2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># skip 跳过指定数量的数据</span></span><br><span class="line">db.col.find(&#123;&#125;,&#123;<span class="string">&quot;title&quot;</span>:1,_id:0&#125;).<span class="built_in">limit</span>(1).skip(1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序，1 升序，-1 降序</span></span><br><span class="line">db.col.find(&#123;&#125;,&#123;<span class="string">&quot;title&quot;</span>:1,_id:0&#125;).sort(&#123;<span class="string">&quot;likes&quot;</span>:-1&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line">db.col.createIndex(&#123;<span class="string">&quot;title&quot;</span>:1&#125;)</span><br><span class="line"><span class="comment"># 也可以创建复合索引</span></span><br><span class="line"><span class="comment"># 索引可以有额外参数</span></span><br><span class="line">db.values.createIndex(&#123;open: 1, close: 1&#125;, &#123;background: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 聚合，类似 count(*)</span></span><br><span class="line">db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其实只是 count 的话有更简单的方法</span></span><br><span class="line">db.col.count()</span><br><span class="line">db.col.count(&#123;<span class="string">&#x27;age&#x27;</span>:24&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="集成-pymongo"><a href="#集成-pymongo" class="headerlink" title="集成 pymongo"></a>集成 pymongo</h2><p>安装 lib <code>pip install pymongo</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是默认配置</span></span><br><span class="line">client = MongoClient()</span><br><span class="line"><span class="comment"># 如果特殊配制</span></span><br><span class="line"><span class="comment"># myclient = pymongo.MongoClient(&quot;mongodb://localhost:27017/&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 db 名字</span></span><br><span class="line">client.list_database_names()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集合</span></span><br><span class="line">collection = client[<span class="string">&quot;ttt&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示集合名字</span></span><br><span class="line">collection.list_collection_names()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文档</span></span><br><span class="line">mydoc = collection[<span class="string">&quot;sites&quot;</span>]</span><br><span class="line"><span class="comment"># 插入集合</span></span><br><span class="line">mydict = &#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RUNOOB&quot;</span>, <span class="string">&quot;alexa&quot;</span>: <span class="string">&quot;10000&quot;</span>, <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://www.runoob.com&quot;</span> &#125;</span><br><span class="line">mydoc.insert_one(mydict)</span><br><span class="line"><span class="comment"># 插入多条</span></span><br><span class="line">mydoc.insert_many(mylist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line">mydoc.find_one()</span><br><span class="line"><span class="comment"># 查询所有</span></span><br><span class="line"><span class="keyword">for</span> sub <span class="keyword">in</span> mydoc.find():</span><br><span class="line">    print(sub)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定字段</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> mydoc.find(&#123;&#125;,&#123; <span class="string">&quot;_id&quot;</span>: <span class="number">0</span>, <span class="string">&quot;name&quot;</span>: <span class="number">1</span>, <span class="string">&quot;alexa&quot;</span>: <span class="number">1</span> &#125;): </span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定条件</span></span><br><span class="line">mydoc.find(&#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RUNOOB&quot;</span> &#125;)</span><br><span class="line"><span class="comment"># 比较</span></span><br><span class="line">mydoc.find(&#123; <span class="string">&quot;name&quot;</span>: &#123; <span class="string">&quot;$gt&quot;</span>: <span class="string">&quot;H&quot;</span> &#125; &#125;)</span><br><span class="line"><span class="comment"># 正则</span></span><br><span class="line">mydoc.find(&#123; <span class="string">&quot;name&quot;</span>: &#123; <span class="string">&quot;$regex&quot;</span>: <span class="string">&quot;^R&quot;</span> &#125; &#125;)</span><br><span class="line"><span class="comment"># 限制数量</span></span><br><span class="line">mydoc.find().limit(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">myquery = &#123; <span class="string">&quot;alexa&quot;</span>: <span class="string">&quot;10000&quot;</span> &#125;</span><br><span class="line">newvalues = &#123; <span class="string">&quot;$set&quot;</span>: &#123; <span class="string">&quot;alexa&quot;</span>: <span class="string">&quot;12345&quot;</span> &#125; &#125;</span><br><span class="line">mydoc.update_one(myquery, newvalues)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">mydoc.find().sort(<span class="string">&quot;alexa&quot;</span>)</span><br><span class="line">mydoc.find().sort(<span class="string">&quot;alexa&quot;</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">myquery = &#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Taobao&quot;</span> &#125;</span><br><span class="line">mydoc.delete_one(myquery)</span><br><span class="line"><span class="comment"># 删除多个</span></span><br><span class="line">myquery = &#123; <span class="string">&quot;name&quot;</span>: &#123;<span class="string">&quot;$regex&quot;</span>: <span class="string">&quot;^F&quot;</span>&#125; &#125;</span><br><span class="line">mydoc.delete_many(myquery)</span><br><span class="line"><span class="comment"># 删除所有</span></span><br><span class="line">mydoc.delete_many(&#123;&#125;)</span><br><span class="line"><span class="comment"># 删除集合</span></span><br><span class="line">mydoc.drop()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 安装教程</title>
    <url>/hexo/2020/09/16/Mysql-Installation/</url>
    <content><![CDATA[<h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><p>直接跟着官方文档走就行了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># -e MYSQL_ROOT_PASSWORD=my-secret-pw           # 按官方镜像文档提示，启动容器时设置密码</span></span><br><span class="line">docker run -d -p 3000:3306 -v /Users/id/tmp/mysql/conf:/etc/mysql/conf.d -v /Users/id/tmp/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name=mysql01 mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 DBeaver，链接数据库，报错：`Unable to load authentication plugin &#x27;caching_sha2_password&#x27;.`</span></span><br><span class="line"><span class="comment"># 搜索之后，发现是 mysql 驱动有跟新，需要修稿客户端的 pom, 升级到 8.x 就行。DBeaver 直接就在创建选项里给了方案，选 8.x 那个就行 [GitIssue](https://github.com/dbeaver/dbeaver/issues/4691)</span></span><br><span class="line"><span class="comment"># 使用高版本的 Mysql connection 还是有问题，不过 msg 变了：`Public Key Retrieval is not allowed`</span></span><br><span class="line"><span class="comment"># 搜索之后，发现还要改配置, connection setting -&gt; Driver properties -&gt; &#x27;allowPlblicKeyRetrieval&#x27; 改为 true</span></span><br><span class="line"><span class="comment"># 还有问题。。。继续抛错：`Access denied for user &#x27;root&#x27;@&#x27;localhost&#x27; (using password: YES)`</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql01 /bin/bash               <span class="comment"># 进去容器，输入 `mysql -u root -p` 尝试登陆，成功。推测是链接客户端的问题</span></span><br><span class="line">ps -ef | grep mysql                             <span class="comment"># 查看了一下，突然想起来，本地我也有安装 mysql 可能有冲突。果断将之前安装的 docker mysql 删除，重新指定一个新的端口，用 DBeaver 链接，成功！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过客户端创建一个新的数据库 new_test, 在本地映射的 data 目录下 ls 一下，可以看到新数据库文件可以同步创建</span></span><br><span class="line"><span class="comment"># &gt; ~/tmp/mydb/data ls</span></span><br><span class="line"><span class="comment"># auto.cnf           ca.pem             client-key.pem     ib_logfile0        ibdata1            mysql              performance_schema public_key.pem     server-key.pem</span></span><br><span class="line"><span class="comment"># ca-key.pem         client-cert.pem    ib_buffer_pool     ib_logfile1        ibtmp1             new_test           private_key.pem    server-cert.pem    sys</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器，本地文件依然存在！</span></span><br></pre></td></tr></table></figure>

<h2 id="Windows-版本安装"><a href="#Windows-版本安装" class="headerlink" title="Windows 版本安装"></a>Windows 版本安装</h2><ol>
<li>下载安装包 <a href="https://dev.mysql.com/downloads/mysql/">官方地址</a> 下载比较小的，不到测试套件的版本即可</li>
<li>C 盘下新建 Mysql 文件夹，将下载的压缩包解压</li>
<li>进去解压文件夹下，新建一个 my.ini 配置文件并添加配置</li>
<li>将对应的 bin 路径添加到系统的 path 中去，做法和添加 JAVA_HOME 一样</li>
<li>管理员模式打开终端，输入命令 <code>mysqld --initialize-insecure --user=mysql</code> 初始化，并且用户密码为空</li>
<li>输入 <code>mysqld -install</code> 安装数据库，终端出现 <code>Service successfully installed</code> 表示安装成功</li>
<li><code>net start mysql</code> 启动服务器</li>
<li>输入 <code>mysql -u root -p</code> 不用输入密码直接回车, 出现mysql&gt;表示配置完成</li>
<li>输入 <code>alter user user() identified by &quot;your-password&quot;;</code> 修改 root 用户密码</li>
<li>输入 <code>net stop mysql</code> 关闭数据库</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port&#x3D;3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir&#x3D;C:\Mysql\mysql-8.0.21-winx64</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir&#x3D;C:\Mysql\mysql-8.0.21-winx64\data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections&#x3D;200</span><br><span class="line"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="line">max_connect_errors&#x3D;10</span><br><span class="line"># 服务端使用的字符集默认为UTF8</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line"># 默认使用“mysql_native_password”插件认证</span><br><span class="line">default_authentication_plugin&#x3D;mysql_native_password</span><br></pre></td></tr></table></figure>

<h2 id="Windows-part-issues"><a href="#Windows-part-issues" class="headerlink" title="Windows part issues"></a>Windows part issues</h2><p>Windows 运行 <code>mysqld --initialize-insecure --user=mysql</code> 配置时报错 <code>由于找不到vcruntime140_1.dll,无法继续执行代码</code> 可以去 <a href="https://cn.dll-files.com/vcruntime140_1.dll.html">官网</a> 下载 dll 文件放到 <code>C:\Windows\System32</code> 下即可</p>
<p>Idea 链接 mysql 后报错 <code>Server returns invalid timezone. Go to &#39;Advanced&#39; tab and set &#39;serverTimezone&#39; property manually</code>，可以通过设置 mysql 时区解决</p>
<ol>
<li>cmd -&gt; mysql -uroot -p 登录 DB</li>
<li><code>show variables like&#39;%time_zone&#39;;</code> 查看时区， Value 为 SYSTEM 则表示没有设置过</li>
<li><code>set global time_zone = &#39;+8:00&#39;;</code> 修改时区为东八区</li>
<li>重试链接，问题解决</li>
</ol>
<p>这只是临时方案，重启 DB 后时区会重置，可以去 my.ini 配置文件中添加配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 设置默认时区</span><br><span class="line">default-time_zone&#x3D;&#39;+8:00&#39;</span><br></pre></td></tr></table></figure>

<h2 id="MacOS-版本安装"><a href="#MacOS-版本安装" class="headerlink" title="MacOS 版本安装"></a>MacOS 版本安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install mysql <span class="comment"># 使用 homebrew 安装</span></span><br></pre></td></tr></table></figure>

<p>安装完毕的时候，终端回给出提示，最后的那段话比较值得注意</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">We&#x27;ve installed your MySQL database without a root password. To secure it run:</span><br><span class="line">    mysql_secure_installation</span><br><span class="line"></span><br><span class="line">MySQL is configured to only allow connections from localhost by default</span><br><span class="line"></span><br><span class="line">To connect run:</span><br><span class="line">    mysql -uroot</span><br><span class="line"></span><br><span class="line">To have launchd start mysql now and restart at login:</span><br><span class="line">  brew services start mysql</span><br><span class="line">Or, if you don&#x27;t want/need a background service you can just run:</span><br><span class="line">  mysql.server start</span><br></pre></td></tr></table></figure>

<p>翻译成人话就是</p>
<ol>
<li>DB 安装成功，但是数据库 root 用户是没有密码的，你直接登陆会失败</li>
<li>运行 mysql_secure_installation 给数据库设置密码</li>
<li>使用命令 <code>mysql -uroot</code> 联接数据库</li>
<li>后台启动使用 <code>brew services start mysql</code> 前台启动使用 <code>mysql.server start</code></li>
</ol>
<p>PS: 想要改密码得先启动服务，即运行 <code>brew services start mysql</code> 命令</p>
<p>在安全设置脚本中，mysql 会让你进行如重设 root 密码，删除匿名用户等操作，按照提示操作即可。以下是提示样本：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Jack &gt; ~ &gt; mysql_secure_installation</span><br><span class="line"></span><br><span class="line">## 开始进行设置</span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Connecting to MySQL using a blank password.</span><br><span class="line"></span><br><span class="line">VALIDATE PASSWORD COMPONENT can be used to test passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to set only those passwords which are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD component?</span><br><span class="line"></span><br><span class="line">## 是否进行安全设置</span><br><span class="line">Press y|Y for Yes, any other key for No: y</span><br><span class="line"></span><br><span class="line">There are three levels of password validation policy:</span><br><span class="line"></span><br><span class="line">LOW    Length &gt;= 8</span><br><span class="line">MEDIUM Length &gt;= 8, numeric, mixed case, and special characters</span><br><span class="line">STRONG Length &gt;= 8, numeric, mixed case, special characters and dictionary                  file</span><br><span class="line"></span><br><span class="line">## 设置密码复杂度，最低也要 *8* 位密码起步</span><br><span class="line">Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 0</span><br><span class="line">Please set the password for root here.</span><br><span class="line"></span><br><span class="line">New password:</span><br><span class="line"></span><br><span class="line">Re-enter new password:</span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 50</span><br><span class="line">Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : y</span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them. This is intended only for</span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">## 是否删除匿名用户</span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">&#x27;localhost&#x27;. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line"></span><br><span class="line">## 是否开放 root 用户远程访问</span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) :</span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, MySQL comes with a database named &#x27;test&#x27; that</span><br><span class="line">anyone can access. This is also intended only for testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">## 是否删除测试表</span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) :</span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">## 是否重新加载使得配置生效</span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All done!</span><br></pre></td></tr></table></figure>

<p>设置完毕之后就可以使用 <code>mysql -uroot -p</code> 登陆测试了。没有遇到其他问题，还挺顺利的 ε-(´∀｀; )</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>新系统初始化设置</title>
    <url>/hexo/2020/08/03/New-OS-Setup/</url>
    <content><![CDATA[<p>记录一下新系统常用配置和软件安装</p>
<h2 id="MacOS-显示隐藏文件"><a href="#MacOS-显示隐藏文件" class="headerlink" title="MacOS 显示隐藏文件"></a>MacOS 显示隐藏文件</h2><p><code>cmd + shift + .</code></p>
<h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>官网推荐的通过 curl raw 文件安装，本地没有 proxy 的话 pass，基本不动。可以直接通过 <code>git clone https://github.com/Homebrew/install</code> 这个 repo 然后 <code>cd</code> 到 install 文件夹下执行 <code>/bin/bash -c ./install.sh</code> 来触发任务</p>
<h3 id="速度测试"><a href="#速度测试" class="headerlink" title="速度测试"></a>速度测试</h3><p>运行如下命令，查看是哪个步骤速度比较慢</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update --verbose</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jack@PC /usr/<span class="built_in">local</span>/Homebrew/stable brew update --verbose</span><br><span class="line">Checking <span class="keyword">if</span> we need to fetch /usr/<span class="built_in">local</span>/Homebrew...</span><br><span class="line">Checking <span class="keyword">if</span> we need to fetch /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-cask...</span><br><span class="line">Fetching /usr/<span class="built_in">local</span>/Homebrew...</span><br><span class="line">Checking <span class="keyword">if</span> we need to fetch /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core...</span><br><span class="line">Checking <span class="keyword">if</span> we need to fetch /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-services...</span><br><span class="line">Fetching /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core...</span><br><span class="line">Fetching /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-cask...</span><br><span class="line">remote: Counting objects: 5806, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (2626/2626), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 5806 (delta 4179), reused 4564 (delta 3087)</span><br><span class="line">Receiving objects: 100% (5806/5806), 1.30 MiB | 203.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (4179/4179), completed with 375 <span class="built_in">local</span> objects.</span><br><span class="line">From https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew</span><br><span class="line">   7b67ac5e3..a4d7bb64a  master     -&gt; origin/master</span><br><span class="line"> * [new tag]             2.1.10     -&gt; 2.1.10</span><br><span class="line"> * [new tag]             2.1.11     -&gt; 2.1.11</span><br><span class="line"> * [new tag]             2.1.12     -&gt; 2.1.12</span><br><span class="line"> * [new tag]             2.1.13     -&gt; 2.1.13</span><br><span class="line"> * [new tag]             2.1.14     -&gt; 2.1.14</span><br><span class="line"> * [new tag]             2.1.15     -&gt; 2.1.15</span><br><span class="line"> * [new tag]             2.1.16     -&gt; 2.1.16</span><br><span class="line"> * [new tag]             2.1.3      -&gt; 2.1.3</span><br><span class="line"> * [new tag]             2.1.4      -&gt; 2.1.4</span><br><span class="line"> * [new tag]             2.1.5      -&gt; 2.1.5</span><br><span class="line"> * [new tag]             2.1.6      -&gt; 2.1.6</span><br><span class="line"> * [new tag]             2.1.7      -&gt; 2.1.7</span><br><span class="line"> * [new tag]             2.1.8      -&gt; 2.1.8</span><br><span class="line"> * [new tag]             2.1.9      -&gt; 2.1.9</span><br><span class="line">remote: Counting objects: 71830, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (27226/27226), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 71830 (delta 53303), reused 62922 (delta 44592)</span><br><span class="line">Receiving objects: 100% (71830/71830), 21.95 MiB | 11.70 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (53303/53303), completed with 4020 <span class="built_in">local</span> objects.</span><br><span class="line">From https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core</span><br><span class="line">   ea056b500e..6ec9c907ea master     -&gt; origin/master</span><br><span class="line">remote: Enumerating objects: 235987, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (215906/215906), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (58941/58941), <span class="keyword">done</span>.</span><br><span class="line">Receiving objects:  45% (92674/205138), 23.64 MiB | 345.00 KiB/s</span><br></pre></td></tr></table></figure>

<h3 id="更新-Brew-配置"><a href="#更新-Brew-配置" class="headerlink" title="更新 Brew 配置"></a>更新 Brew 配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换brew.git:</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换homebrew-core.git:</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换homebrew-cask.git:</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span>/Library/Taps/homebrew/homebrew-cask</span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 homebrew bottles 源, zsh 用户:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 homebrew bottles 源, bash 用户:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>如果这个源挂了可以试试清华的</p>
<h2 id="update-warning"><a href="#update-warning" class="headerlink" title="update warning"></a>update warning</h2><p>brew update 抛 warning</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Updating /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core...</span><br><span class="line">fatal: It seems that there is already a rebase-apply directory, and</span><br><span class="line">I wonder <span class="keyword">if</span> you are <span class="keyword">in</span> the middle of another rebase.  If that is the</span><br><span class="line"><span class="keyword">case</span>, please try</span><br><span class="line">    git rebase (--<span class="built_in">continue</span> | --abort | --skip)</span><br><span class="line">If that is not the <span class="keyword">case</span>, please</span><br><span class="line">    rm -fr <span class="string">&quot;.git/rebase-apply&quot;</span></span><br><span class="line">and run me again.  I am stopping <span class="keyword">in</span> <span class="keyword">case</span> you still have something</span><br><span class="line">valuable there.</span><br></pre></td></tr></table></figure>

<p>存在 <code>/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/.git/rebase-apply</code> 这样的备份文件，通过 <code>rm -rf rebase-apply</code> 删掉就好了</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://www.raydbg.com/2019/Homebrew-Update-Slow/">RayDBG</a></li>
<li><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git">USTC Guide</a></li>
</ul>
<h2 id="Iterm2"><a href="#Iterm2" class="headerlink" title="Iterm2"></a>Iterm2</h2><ul>
<li>最大化窗口：CMD + Ctrl + F</li>
<li>Item2 最大化终端：CMD + Enter</li>
</ul>
<p>可以通过下载 <a href="https://www.iterm2.com/downloads.html">官方 zip</a> 包离线安装，也可以通过 brew 安装 <code>brew cask install iterm2</code>。brew 会比较慢</p>
<p>修改提示符 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">prompt_context</span></span> () &#123;</span><br><span class="line">    prompt_segment black default <span class="string">&quot;Jack&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置-solarized-配色方案"><a href="#配置-solarized-配色方案" class="headerlink" title="配置 solarized 配色方案"></a>配置 solarized 配色方案</h3><p>最新版的系统已经默认支持这个配色方案了，打开 iterm2 终端，<code>cmd + ,</code> 打开配置窗口。 Preferences -&gt; Profiles -&gt; Colors -&gt; Color Presets -&gt; Solarized Dark</p>
<h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><p>官方 <a href="https://github.com/ohmyzsh/ohmyzsh">git</a> 地址， 应为网络原因选择 clone repo 安装: <code>git clone https://github.com/ohmyzsh/ohmyzsh.git</code> + <code>sh -c &#39;./install.sh</code></p>
<p>重启后终端抛出 warning</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Last login: Mon Aug  3 18:08:08 on ttys000</span><br><span class="line">[oh-my-zsh] Insecure completion-dependent directories detected:</span><br><span class="line">drwxrwxr-x  3 jack  admin   96 Aug  3 13:18 /usr/<span class="built_in">local</span>/share/zsh</span><br><span class="line">drwxrwxr-x  4 jack  admin  128 Aug  3 13:22 /usr/<span class="built_in">local</span>/share/zsh/site-functions</span><br><span class="line"></span><br><span class="line">[oh-my-zsh] For safety, we will not load completions from these directories until</span><br><span class="line">[oh-my-zsh] you fix their permissions and ownership and restart zsh.</span><br><span class="line">[oh-my-zsh] See the above list <span class="keyword">for</span> directories with group or other writability.</span><br><span class="line"></span><br><span class="line">[oh-my-zsh] To fix your permissions you can <span class="keyword">do</span> so by disabling</span><br><span class="line">[oh-my-zsh] the write permission of <span class="string">&quot;group&quot;</span> and <span class="string">&quot;others&quot;</span> and making sure that the</span><br><span class="line">[oh-my-zsh] owner of these directories is either root or your current user.</span><br><span class="line">[oh-my-zsh] The following <span class="built_in">command</span> may <span class="built_in">help</span>:</span><br><span class="line">[oh-my-zsh]     compaudit | xargs chmod g-w,o-w</span><br><span class="line"></span><br><span class="line">[oh-my-zsh] If the above didn<span class="string">&#x27;t help or you want to skip the verification of</span></span><br><span class="line"><span class="string">[oh-my-zsh] insecure directories you can set the variable ZSH_DISABLE_COMPFIX to</span></span><br><span class="line"><span class="string">[oh-my-zsh] &quot;true&quot; before oh-my-zsh is sourced in your zshrc file.</span></span><br></pre></td></tr></table></figure>

<p>运行如下 cmd 修复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 755 /usr/<span class="built_in">local</span>/share/zsh</span><br><span class="line">chmod 755 /usr/<span class="built_in">local</span>/share/zsh/site-functions</span><br></pre></td></tr></table></figure>

<p>配置命令高亮: <code>brew install zsh-syntax-highlighting</code> 并在 .zshrc 中添加配置行 <code>source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</code></p>
<p>配置命令自动补全提示: <code>git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</code> 添加 .zshrc 配置 <code>plugins=(zsh-autosuggestions)</code></p>
<p>为提示插件绑定快捷键: 在 zshrc 文件中添加配置 <code>bindkey &#39;^ &#39; autosuggest-accept</code>, MacOS 下这个快捷键和系统默认的输入法切换冲突，在 System Preferences -&gt; keyboard -&gt; shortcuts -&gt; input sources 下将 select the previous input source 和 selet the next input soure menue 的勾选去掉就行了</p>
<p>PS: 这个快捷键在 VSCode 的 terminal 上不能 work, 试着把 vscode 自带的 <code>ctrl + space</code> 都改掉还是没效果(´Д`) 先凑合着用把，干</p>
<p>PPS: 想要重新绑定 <code>shift + space</code> 为补全，不过找不到对应的 zsh code， 擦擦擦。在 linux 下有款终端工具叫 showkey 的貌似可以解决这个问题， 也可以试试终端输入 cat 回车，按键他就会打印出来键符，不过 shift 貌似没给提示。。。</p>
<p>solarized dark 配色和 zsh-autosuggestion 自动提示配色有冲突，会看不到，参考 <a href="https://github.com/zsh-users/zsh-autosuggestions/issues/416#issuecomment-486516333">issue</a>。我本地直接把配色改成系统自带的 Tango Dark 了</p>
<h3 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h3><p>使用 <code>agnoster</code> 主题时需要加载一个字体，不然很多箭头之类的表示符会显示乱码。下载字体：<code>git clone https://github.com/powerline/fonts.git</code>, 找到 <code>fonts/Meslo Slashed/Meslo LG M Regular for Powerline.ttf</code> 双击安装。 然后打开 iTerm2，按 <code>Command + ,</code> 键，打开 Preferences 配置界面，然后Profiles -&gt; Text -&gt; Font -&gt; Chanage Font，选择 Meslo LG M Regular for Powerline 字体。</p>
<h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><p>打开 VSCode, <code>CMD + SHIFT + P</code>, 选择 <code>Shell Command: Install &#39;code&#39; command in PATH</code> 命令，应用会自动安装好，在终端输入 <code>code</code> 测试</p>
<p>配置完 zsh 之后，VSCode 的终端会显示乱码，<code>cmd + shift + p</code> 搜索 ‘Preferences: Open Settings(JSON)’ 添加配置 <code>&#123; &quot;terminal.integrated.fontFamily&quot;: &quot;Meslo LG M for Powerline&quot; &#125;</code> 即可修复，保存后可以看到效果。</p>
<p>VSCode 在终端安装 code 命令之后每次重启都会失效，应该是因为我只是把它放在 Document, Download 文件夹下面了。把它放到 Application 下再安装一下 shell 继承命令就可以了。顺带着之前 <code>zsh-autosuggestion</code> 不能补全也是这个原因！！！</p>
<h3 id="安装-VirtualBox"><a href="#安装-VirtualBox" class="headerlink" title="安装 VirtualBox"></a>安装 VirtualBox</h3><p>MacOS 10.15.6 Catalina 安装 VirtualBox 的时候报错，安装失败，是应为 MacOS 默认设置是禁止安装 Oracle 公司产品的，你可以去 System Preference -&gt; Security &amp; Privacy 页面点一下左下方的小锁，允许安装 Oracle 相关软件。再重新安装一下，就行了。</p>
<h2 id="使用-IDEA-的快捷键时跳出窗口"><a href="#使用-IDEA-的快捷键时跳出窗口" class="headerlink" title="使用 IDEA 的快捷键时跳出窗口"></a>使用 IDEA 的快捷键时跳出窗口</h2><p>窗口内容： “No manual entry for <command>“， Refer to <a href="https://intellij-support.jetbrains.com/hc/en-us/articles/360005137400-Cmd-Shift-A-hotkey-opens-Terminal-with-apropos-search-instead-of-the-Find-Action-dialog">Official IDEA Support</a></p>
<p>MacOS since 10.14, 官方定义了这个快捷键，和 IDEA 冲突了，Keyboard -&gt; shortcut -&gt; service -&gt; search man page index in terminal 把这个选项 disable 掉，或者替换掉</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>码农生活小记 之 无眠的夜</title>
    <url>/hexo/2020/11/27/No-sleep-night/</url>
    <content><![CDATA[<h2 id="2020-11-27"><a href="#2020-11-27" class="headerlink" title="2020-11-27"></a>2020-11-27</h2><p>Cross pillar 的改动，我们 team 在做重构的时候改了其他 team 的 code，半年过去了，突然告诉我上线出问题了，也不知道他们之前都是怎么做的测试，无力吐槽。打了 emergency 的 patch。也是各种折腾，第一次 fix 还导致了更大的 issue，瑟瑟发抖。搞到将近一点，release 成功，等第二天的测试结果。索性一切 OK。发现老板工作是真的拼，晚上守到近两点，早上七点多又起来 verify，大老板也是，佩服佩服。敬业没得说，值的学习。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>NoClassDefFoundError 记录</title>
    <url>/hexo/2020/01/06/NoClassDefFoundError%20%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>写 UT 的时候遇到一个 NoClassDefFoundError, 以前没碰到过，记一笔</p>
<h3 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h3><p>编译时能找到 class 但是运行时对应的类找不到了，听上去可能不点矛盾</p>
<h3 id="与-ClassNotFoundException-的区别"><a href="#与-ClassNotFoundException-的区别" class="headerlink" title="与 ClassNotFoundException 的区别"></a>与 ClassNotFoundException 的区别</h3><p>ClassNotFoundException 的场景更多的是我们给出 class name, 然后 JVM 根据名字去 load 的时候找不到就会跑抛出这个异常</p>
<p>NoClassDefFoundError 则是在编译期，JVM 是能找到对应的类的，但是等运行期时找不到了</p>
<h3 id="怎么修复"><a href="#怎么修复" class="headerlink" title="怎么修复"></a>怎么修复</h3><ol>
<li>检测 Classpath 是不是缺少你需要的 jar 包，缺少就加一下。我本地就是这个问题，测试的 dependency 中没有类的引用，挂了</li>
<li>检查 error exception stack, 看看是不是类初始化时 static 部分出错了</li>
</ol>
<h3 id="打印-Classpath-调试"><a href="#打印-Classpath-调试" class="headerlink" title="打印 Classpath 调试"></a>打印 Classpath 调试</h3><p>通过打印 classpath 输出当前运行环境是否缺少需要的 jar 包。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintClassPath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassLoader cl = ClassLoader.getSystemClassLoader();</span><br><span class="line"></span><br><span class="line">        URL[] urls = ((URLClassLoader)cl).getURLs();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(URL url: urls)&#123;</span><br><span class="line">            System.out.println(url.getFile());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/charsets.jar</span></span><br><span class="line"><span class="comment">// /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/deploy.jar</span></span><br><span class="line"><span class="comment">// /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/cldrdata.jar</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h3 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h3><p><a href="https://javarevisited.blogspot.com/2011/06/noclassdeffounderror-exception-in.html">很全面的一个 NoClassDefFoundError 异常分析博文</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>exception</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs + gitbook</title>
    <url>/hexo/2022/01/31/Nodejs-gitbook/</url>
    <content><![CDATA[<p>基于 Nodejs 的 gitbook， 感觉和 hexo 大同小意，不过还有额外的制作 pdf 和 ebook 等功能，值得一试</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>最终各软件版本信息如下</p>
<ul>
<li>node: v13.14.0</li>
<li>CLI version: 2.3.2</li>
<li>GitBook version: 3.2.3</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install -g gitbook-cli</span><br><span class="line"><span class="comment"># 检测</span></span><br><span class="line">gitbook-cli -V</span><br></pre></td></tr></table></figure>

<p>安装抛错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">No receipt <span class="keyword">for</span> <span class="string">&#x27;com.apple.pkg.CLTools_Executables&#x27;</span> found at <span class="string">&#x27;/&#x27;</span>.</span><br><span class="line"></span><br><span class="line">No receipt <span class="keyword">for</span> <span class="string">&#x27;com.apple.pkg.DeveloperToolsCLILeo&#x27;</span> found at <span class="string">&#x27;/&#x27;</span>.</span><br><span class="line"></span><br><span class="line">No receipt <span class="keyword">for</span> <span class="string">&#x27;com.apple.pkg.DeveloperToolsCLI&#x27;</span> found at <span class="string">&#x27;/&#x27;</span>.</span><br><span class="line"></span><br><span class="line">gyp: No Xcode or CLT version detected!</span><br><span class="line">/usr/<span class="built_in">local</span>/lib/node_modules/gitbook-cli/node_modules/npm/node_modules/graceful-fs/polyfills.js:287</span><br><span class="line">      <span class="keyword">if</span> (cb) cb.apply(this, arguments)</span><br><span class="line">                 ^</span><br></pre></td></tr></table></figure>

<p>重新安装 xcode-select, 去 app store 中搜索 xcode 并安装，挺花时间的，后年还要重新签一下协议。。。</p>
<p>折腾一阵子还是失败了，最后搜了下谁是 gitbook 使用的 polyfills.js 还是旧版的，没有跟新，可以直接去这个文件中，将饮用的语句删掉，或者更新对用的库文件即可，我用了后者</p>
<p>根据提示，打开文件，将该文件中的引用语句注释掉, 再试运行，正常</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fs.stat = statFix(fs.stat)</span></span><br><span class="line"><span class="comment">// fs.fstat = statFix(fs.fstat)</span></span><br><span class="line"><span class="comment">// fs.lstat = statFix(fs.lstat)</span></span><br></pre></td></tr></table></figure>

<p><code>gitbook init</code> 又报错了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TypeError [ERR_INVALID_ARG_TYPE]: The <span class="string">&quot;data&quot;</span> argument must be of <span class="built_in">type</span> string or an instance of Buffer, TypedArray, or DataView. Received an instance of Promise</span><br></pre></td></tr></table></figure>

<p>说是版本过高。。。。草了, 打算使用 nvm 降一下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 然而 DNS 被污染了，并不能拿到对应的文件，直接下载过到本地就行了, 然后 bash install.sh 即可</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装结果，nvm 提示很完善</span></span><br><span class="line">nvm --version </span><br><span class="line"></span><br><span class="line">nvm ls-remote</span><br><span class="line"></span><br><span class="line">nvm install v13.14.0</span><br><span class="line"></span><br><span class="line">nvm use v13.14.0</span><br></pre></td></tr></table></figure>

<p>切换版本之后，运行正常, 我估计可能 nvm 之后前面的那些改 js 文件的操作都可以省了</p>
<h2 id="gitbook-使用"><a href="#gitbook-使用" class="headerlink" title="gitbook 使用"></a>gitbook 使用</h2><ul>
<li><a href="https://chrisniael.gitbooks.io/gitbook-documentation/content/">中文版</a></li>
</ul>
<ol>
<li>创建书本文件并 <code>gitbook init</code> 生成目录</li>
<li><code>gitbook serve</code> 生成本地版电子书，访问 4000 端口阅读</li>
</ol>
<p>常用规则</p>
<p>常用插件</p>
<ul>
<li>gitbook-plugin-summary 可以更具文件夹目录帮你自动生成对应的 summary 文件内容，安装完后输入 <code>book sm</code> 自动更新</li>
</ul>
]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>gitbook</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs 学习笔记</title>
    <url>/hexo/2021/11/23/Nodejs-note/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Ns411N7HU">视屏教程</a></p>
<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>TODO</p>
<p>版本查询：<code>node --version</code></p>
<h3 id="Hello-Word"><a href="#Hello-Word" class="headerlink" title="Hello Word"></a>Hello Word</h3><p>新建测试文件 hello.js，写入内容如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br></pre></td></tr></table></figure>

<p>执行文件 <code>node hello.js</code>, 可以看到 log 输出</p>
<h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>输出文件内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&#x27;./helloworld.js&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="写文件和错误处理"><a href="#写文件和错误处理" class="headerlink" title="写文件和错误处理"></a>写文件和错误处理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">&#x27;./hello.md&#x27;</span>, <span class="string">&#x27;writing to file&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;write success...&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="简单-http-服务"><a href="#简单-http-服务" class="headerlink" title="简单 http 服务"></a>简单 http 服务</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;accept request, path: &#x27;</span> + request.url)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中文需要自定义 header</span></span><br><span class="line">    response.setHeader(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>)</span><br><span class="line">    response.write(<span class="string">&#x27;reponse given...&#x27;</span>)</span><br><span class="line">    response.write(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">    <span class="comment">// 必须用 end 结尾</span></span><br><span class="line">    response.end()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;server started...&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h3><p>Node 为 JS 提供了很多服务器级别的 API，包装到具名的核心模块中。例如 fs/http/path/os 等，通过 <code>require(&#39;xx&#39;)</code> 使用。</p>
<h3 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h3><p>分三类：</p>
<ul>
<li>具名核心模块</li>
<li>自己编写的文件模块 <code>require(&#39;/path/to/b.js&#39;)</code></li>
</ul>
<p>js 文件为顺序执行，包括 require 中的内容。</p>
<p>Node 中可以通过 exports.foo = ‘hello’ 暴露文件中的变量，通过 <code>var bExports = require(&#39;./b&#39;)</code> 得到</p>
<h3 id="Content-type"><a href="#Content-type" class="headerlink" title="Content-type"></a>Content-type</h3><p>fs.readFile() 之后可以通过指定 Content-type 来指定返回数据，专业名称叫做 mime 类型</p>
<h3 id="无分号代码风格"><a href="#无分号代码风格" class="headerlink" title="无分号代码风格"></a>无分号代码风格</h3><p>代码以 (, [, ` 开头的，补分号确保语法解析正确。 ES6 中使用 反引号 凭借自负，支持换行。反引号中可以使用 ${} 做替换操作。</p>
<h3 id="模版引擎"><a href="#模版引擎" class="headerlink" title="模版引擎"></a>模版引擎</h3><p>安装：<code>npm install art-template</code></p>
<p>浏览器中使用 art-tempalte, 新建 html 文本，写入内容. 打开 browser 可以看到 console 中有对应的 ‘hello Jack’ log.</p>
<p><code>&#123;&#123;&#125;&#125;</code> 被称为 mustach 语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> Test art template <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/art-template/lib/template-web.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tpl&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        我叫 </span><span class="template-variable">&#123;&#123; <span class="name">name</span> &#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        今年 </span><span class="template-variable">&#123;&#123; <span class="name">age</span> &#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        喜欢 </span><span class="template-variable">&#123;&#123; <span class="name"><span class="builtin-name">each</span></span> hobbies &#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123; <span class="name">$value</span> &#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123; <span class="name">/each</span> &#125;&#125;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ret = template(<span class="string">&#x27;tpl&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">            name: <span class="string">&#x27;Jack&#x27;</span>,</span></span><br><span class="line">            age: 11,</span><br><span class="line">            hobbies: [</span><br><span class="line"><span class="javascript">                <span class="string">&#x27;唱&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;跳&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;rap&#x27;</span></span></span><br><span class="line">            ]</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(ret)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Node 中使用 模版引擎</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret = template.render(<span class="string">&#x27;hello &#123;&#123; name &#125;&#125;&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;Jack&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(ret)</span><br><span class="line"><span class="comment">// hello Jack</span></span><br></pre></td></tr></table></figure>

<p>查看源代码能找到的都是服务器端渲染的，商品列表一般用服务器端渲染，方便 SEO 搜索引擎查找。</p>
<p>终端直接输入 node 可以得到自带的交互界面（REPL）</p>
<h3 id="Node-中的模块系统"><a href="#Node-中的模块系统" class="headerlink" title="Node 中的模块系统"></a>Node 中的模块系统</h3><p>程序主要在：</p>
<ul>
<li>EcmaScript 语言<ul>
<li>和浏览器不一样，没有 BOM，DOM</li>
</ul>
</li>
<li>核心模块<ul>
<li>文件操作 fs</li>
<li>http</li>
<li>url</li>
<li>…</li>
</ul>
</li>
<li>第三方模块<ul>
<li>art-template</li>
</ul>
</li>
<li>自己写的模块</li>
</ul>
<h4 id="CommonJS-模块规范"><a href="#CommonJS-模块规范" class="headerlink" title="CommonJS 模块规范"></a>CommonJS 模块规范</h4><ul>
<li>模块作用于</li>
<li>使用 require 加载模块</li>
<li>使用 exports 带出模块中成员</li>
</ul>
<p>require 语法：<code>var name = require(&#39;module&#39;)</code>, 作用：</p>
<ul>
<li>执行被夹在模块中的代码</li>
<li>得到被夹在模块中 exports 到处接口对象</li>
</ul>
<p>exports 作用：</p>
<ul>
<li>Node 中是模块作用域，默认文件中所有的成员只在当前文件模块有效</li>
<li>对于希望可以被其他模块访问的成员，我们需要把这个公开的成员挂在到 exports 接口对象上</li>
</ul>
<p>导出多个成员：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.a = <span class="number">123</span></span><br><span class="line"><span class="built_in">exports</span>.b = <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>

<p>导出单个成员:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = add</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + u</span><br><span class="line">    &#125;,</span><br><span class="line">    str: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>声明多个，后者覆盖前者</p>
<p>如果模块想要直接到处成员，而非挂在的方式，可以使用 <code>module.exports=add</code></p>
<p>加载规则：</p>
<ul>
<li>优先从缓存加载</li>
<li>判断模块标识符<ul>
<li>核心模块，核心模块文件已被编译成二进制文件，直接使用名字即可</li>
<li>第三方模块，通过 npm 下载，通过 require(‘包名’) 引用</li>
<li>自己写的模块</li>
</ul>
</li>
</ul>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>建议每个项目都要有 package.json, 管理包依赖。 –save 选项可以将依赖加进去 e.g. <code>npm install jquery --save</code></p>
<p>这个文件可以通过 <code>npm init</code> 向导生成</p>
<h3 id="npm-常用命令"><a href="#npm-常用命令" class="headerlink" title="npm 常用命令"></a>npm 常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm --version</span><br><span class="line"></span><br><span class="line">npm install --gloabl npm <span class="comment"># 自己升级</span></span><br><span class="line"></span><br><span class="line">npm init</span><br><span class="line">    npm init -y 跳过向导，快速生成</span><br><span class="line"></span><br><span class="line">npm install packege_name</span><br><span class="line">npm install packege_name --save</span><br><span class="line">npm i -S package_name <span class="comment"># 简写</span></span><br><span class="line"></span><br><span class="line">npm uninstall package_name</span><br><span class="line"><span class="comment"># 新版的都不需要 --save 了</span></span><br></pre></td></tr></table></figure>

<h3 id="npm-加速"><a href="#npm-加速" class="headerlink" title="npm 加速"></a>npm 加速</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --gloabl cnpm</span><br><span class="line">cnpm install xxx</span><br></pre></td></tr></table></figure>

<h3 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h3><p>原生的 http 在某些方面不足以满足开发需求，使用框架加快开发，代码高度统一。Express 是 node 的一个 web 框架。</p>
<p>hello world 代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;hello express...&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中文自动处理了</span></span><br><span class="line">app.get(<span class="string">&#x27;/about&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;你好 express...&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;app is running at 3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方便的公开指定目录</span></span><br><span class="line">app.use(<span class="string">&#x27;/public&#x27;</span>, express.static(<span class="string">&#x27;./public/&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><p>nodemon, 代码修改完立刻生效 <code>npm install --global nodemon</code>, 使用时使用 <code>nodemon app.js</code> 即可</p>
<h3 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h3><p>当</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;..&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;..&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><p>通过 <code>app.use(&#39;/public&#39;, express.static(&#39;./public/&#39;))</code> 的方式公开资源访问。第一个参数为别名，可以为任何表达式，同文件夹名更容易辨识</p>
<h3 id="Express-中配置使用-art-template-模版引擎"><a href="#Express-中配置使用-art-template-模版引擎" class="headerlink" title="Express 中配置使用 art-template 模版引擎"></a>Express 中配置使用 art-template 模版引擎</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save art-template</span><br><span class="line">npm install --save express-art-template</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.engine(<span class="string">&#x27;art&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// express 默认回去项目中的 views 目录找 index.html</span></span><br><span class="line">    res.render(<span class="string">&#x27;index.html&#x27;</span>, &#123;</span><br><span class="line">        title: <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果要改默认 views 试图渲染存储目录，可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, 目录路径)</span><br></pre></td></tr></table></figure>

<h3 id="express-获取表单-post-请求"><a href="#express-获取表单-post-请求" class="headerlink" title="express 获取表单 post 请求"></a>express 获取表单 post 请求</h3><p>安装：<code>npm install --save body-parser</code>, 貌似新版的已经自动集成了，不需要自己下载</p>
<p>使用案例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">  res.write(<span class="string">&#x27;you posted:\n&#x27;</span>)</span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(req.body, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>PS: 对于 get 请求，内置了 req.query 对象作为 body 的容器</p>
<h3 id="crud-demo"><a href="#crud-demo" class="headerlink" title="crud demo"></a>crud demo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm i -S express</span><br><span class="line">npm i -S bootstrap@3</span><br></pre></td></tr></table></figure>

<h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo <span class="comment"># 启动终端</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出</span></span><br><span class="line"></span><br><span class="line">show dbs <span class="comment"># 显示数据库</span></span><br><span class="line"></span><br><span class="line">db <span class="comment"># 当前数据库</span></span><br><span class="line"></span><br><span class="line">use xxx <span class="comment"># 切换指定数据库</span></span><br><span class="line"></span><br><span class="line">db.students.insertOne(&#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Jack&quot;</span> &#125;) <span class="comment"># 插入数据</span></span><br><span class="line"></span><br><span class="line">db.students.find() <span class="comment"># 查询</span></span><br><span class="line"></span><br><span class="line">show collections <span class="comment"># 显示表</span></span><br></pre></td></tr></table></figure>

<p>基本概念</p>
<ul>
<li>数据库</li>
<li>集合 - 表</li>
<li>文档 - 一条记录</li>
<li>文档结构没有任何限制</li>
<li>灵活，不需要建表，直接使用</li>
</ul>
<h3 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h3><p>基于官方包的再封装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure>

<p>跟着官方文档跑了一个 demo</p>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>为了解决 回调地狱 引入 Promise 语法</p>
<p>例子中用的 json-server， hp-server 工具挺有意思</p>
<h3 id="Node-中的其他成员"><a href="#Node-中的其他成员" class="headerlink" title="Node 中的其他成员"></a>Node 中的其他成员</h3><p>每个模块中除了 require, exports 外，还默认带有两个字打的变量</p>
<ul>
<li>__dirname</li>
<li>__filename</li>
</ul>
<p>文件相对路径是针对 node 执行命令来说的。同时结合 path.join() 拼接路径</p>
<p>模块加载路径不受影响</p>
]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas 快速入门</title>
    <url>/hexo/2020/06/29/Pandas-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>记录 Pandas 常用方法作为快速入门导航</p>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path = <span class="string">&#x27;/Users/i306454/Downloads/dump.json&#x27;</span></span><br><span class="line">dump = pandas.read_json(path)</span><br><span class="line"><span class="comment"># 输出一个二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示每一列的基本信息，包括类型，是否空等</span></span><br><span class="line">dump.info()</span><br><span class="line"><span class="comment"># &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"><span class="comment"># RangeIndex: 18846 entries, 0 to 18845</span></span><br><span class="line"><span class="comment"># Data columns (total 6 columns):</span></span><br><span class="line"><span class="comment">#  #   Column        Non-Null Count  Dtype</span></span><br><span class="line"><span class="comment"># ---  ------        --------------  -----</span></span><br><span class="line"><span class="comment">#  0   subject       18846 non-null  object</span></span><br><span class="line"><span class="comment">#  1   receive_from  18846 non-null  object</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示可计算列的统计信息，最值，方差，分布等</span></span><br><span class="line">dump.describe()</span><br><span class="line"><span class="comment">#                size</span></span><br><span class="line"><span class="comment"># count  1.884600e+04</span></span><br><span class="line"><span class="comment"># mean   5.790807e+04</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示前三条，用作预览</span></span><br><span class="line">dump.head(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取值 loc/iloc, loc 通过名字，iloc 通过数字标签</span></span><br><span class="line"><span class="comment"># 取1,2 行, size 到 receive_data 矩阵, 和 python 的语法不一样的是这个表达式会包含第二行</span></span><br><span class="line">dump.loc[<span class="number">1</span>:<span class="number">2</span>, <span class="string">&#x27;size&#x27;</span>:]</span><br><span class="line"><span class="comment">#     size         receive_date</span></span><br><span class="line"><span class="comment"># 1  11593  2015-08-06T08:36:19</span></span><br><span class="line"><span class="comment"># 2  15863  2017-08-06T08:09:36</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接到方括号可以选择列</span></span><br><span class="line">dump[<span class="string">&#x27;size&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看矩阵大小</span></span><br><span class="line">dump.shape</span><br><span class="line"><span class="comment"># (15, 6)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 size &gt; 3M 的行</span></span><br><span class="line">dump[dump[<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">2000000</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画直方图, bins 如果是数字的话表示你想分成几个 bar</span></span><br><span class="line">dump[<span class="string">&#x27;size&#x27;</span>].hist(bins=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas 的直方图可选项比较少，画图可以用 matplotlib</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = [<span class="number">2500</span>*sub <span class="keyword">for</span> sub <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">22</span>)]</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.hist(main[<span class="string">&#x27;size&#x27;</span>].values, bins=range(<span class="number">0</span>, <span class="number">50000</span>+<span class="number">1</span>, <span class="number">2500</span>))</span><br><span class="line">plt.grid()</span><br><span class="line">plt.xticks(x, [<span class="string">&#x27;&#123;:.1f&#125;KB&#x27;</span>.format(sub/<span class="number">1000</span>) <span class="keyword">for</span> sub <span class="keyword">in</span> x])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产次云, 通过 scale 控制清晰度</span></span><br><span class="line">titles = dump[<span class="string">&#x27;subject&#x27;</span>]</span><br><span class="line">titletxt = <span class="string">&#x27; &#x27;</span>.join(titles)</span><br><span class="line">wordcloud = WordCloud(scale=<span class="number">10</span>).generate(titletxt)</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.imshow(wordcloud, interpolation=<span class="string">&#x27;bilinear&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="修改-pandas-describe-格式"><a href="#修改-pandas-describe-格式" class="headerlink" title="修改 pandas describe 格式"></a>修改 pandas describe 格式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.set_option(<span class="string">&#x27;display.float_format&#x27;</span>, <span class="keyword">lambda</span> x: <span class="string">&#x27;&#123;:.2f&#125;KB&#x27;</span>.format(x/<span class="number">1000</span>))</span><br><span class="line">dump.describe()</span><br><span class="line"><span class="comment">#            size</span></span><br><span class="line"><span class="comment"># count   18.85KB</span></span><br><span class="line"><span class="comment"># mean    57.91KB</span></span><br><span class="line"><span class="comment"># std    143.28KB</span></span><br><span class="line"><span class="comment"># min      3.21KB</span></span><br><span class="line"><span class="comment"># 25%     11.09KB</span></span><br><span class="line"><span class="comment"># 50%     23.72KB</span></span><br><span class="line"><span class="comment"># 75%     42.62KB</span></span><br><span class="line"><span class="comment"># max   5235.50KB</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>博客行文规范</title>
    <url>/hexo/2021/04/22/Post-rules/</url>
    <content><![CDATA[<p>文件名规范</p>
<ul>
<li>全英文, 包含中文的话, web 访问地址里会带转意符号, 不喜欢</li>
<li>首字母大写</li>
<li>单词之间用 <code>-</code> 链接, 这时 <code>hexo</code> 命令自己的规范, 如果我用命令 <code>hexo n &#39;my new post&#39;</code> 它会自动把文件命名为 ‘my-new-post’</li>
<li>文件名中间中间如果包含专有名词, 允许大写, 如 ‘Java-Windows-setting.md’</li>
</ul>
<p>内容规范</p>
<ul>
<li>行文中不出现中文标点符号, 中文句点感觉上格式很奇怪, 看上去空格很大的感觉。可以在替换栏中用 <code>,</code> 替换 <code>, [\s]*</code>, 句号同理</li>
</ul>
<p>PS: 有兴趣的话可以做一个 VS 插件玩玩</p>
<p>插件注意点:</p>
<ol>
<li>替换逗号</li>
<li>替换所有句号</li>
<li>所有冒号替换成英文版+空格</li>
<li>去掉所有在末尾的冒号的空格</li>
<li>所有末尾的句号去掉空格 <code>\. $</code> -&gt; <code>.</code></li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Superset install</title>
    <url>/hexo/2022/07/22/Python-Superset-quick-start/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>docker 方式安装 Superset 的步骤中有一步是 load_example, 这步的过程中会去 github 上下载案例。不过由于 GFW 的问题，下载会失败。解决方案为，手动下载这个 repo 并在本地起一个服务器挂载这些资源，然后修改 docker 中下载 sample 脚本的配置即可。以下是下载资源，起服务部分配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/apache-superset/examples-data/archive/refs/heads/master.zip</span><br><span class="line">unzip master.zip</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/apache-superset/examples-data.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是 zip 包方式，输入 cd examples-data-master</span></span><br><span class="line"><span class="built_in">cd</span> examples-data </span><br><span class="line"><span class="comment"># 启动服务器，这是你通过访问 localhost:9999 就能看到这个网站服务了</span></span><br><span class="line">python -m http.server 9999 </span><br><span class="line"><span class="comment"># 查看本机 ip 用于后续修改下载地址</span></span><br><span class="line"><span class="comment"># 显示结果中有一行格式类似 inet xx.xx.xx.xx netmask 0xffffe000 broadcast xx.xx.xx.xx</span></span><br><span class="line"><span class="comment"># 第一个 ip 段就是我们想要的</span></span><br><span class="line">ifconfig | grep inet</span><br></pre></td></tr></table></figure>


<h2 id="安装-Superset"><a href="#安装-Superset" class="headerlink" title="安装 Superset"></a>安装 Superset</h2><p>访问 <a href="https://hub.docker.com/r/apache/superset">dockerhub</a> 查看安装文档，其实就是跟着指导 CV 一遍指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉镜像并启动服务，通过 -p 参数修改外部暴露的端口 -p port_you_want:8088</span></span><br><span class="line">docker run -d -p 8080:8088 --name superset apache/superset</span><br><span class="line"><span class="comment"># 创建账户</span></span><br><span class="line">docker <span class="built_in">exec</span> -it superset superset fab create-admin \</span><br><span class="line">              --username admin \</span><br><span class="line">              --firstname Superset \</span><br><span class="line">              --lastname Admin \</span><br><span class="line">              --email admin@superset.com \</span><br><span class="line">              --password admin</span><br><span class="line"><span class="comment"># 升级 DB</span></span><br><span class="line">docker <span class="built_in">exec</span> -it superset superset db upgrade</span><br><span class="line"><span class="comment"># 修改下载地址</span></span><br><span class="line">docker <span class="built_in">exec</span> -it superset /bin/bash</span><br><span class="line">sed -i <span class="string">&#x27;s/BASE_URL = .*&quot;/BASE_URL = &quot;http:\/\/xx.xx.xx.xx:9999\/&quot;/g&#x27;</span> superset/examples/helpers.py</span><br><span class="line">sed -i <span class="string">&#x27;s/https:\/\/github.com\/apache-superset\/examples-data\/raw\/master\//http:\/\/xx.xx.xx.xx:9999\//g&#x27;</span> superset/examples/configs/datasets/examples/*.yaml</span><br><span class="line">sed -i <span class="string">&#x27;s/https:\/\/github.com\/apache-superset\/examples-data\/raw\/lowercase_columns_examples\//http:\/\/xx.xx.xx.xx:9999\//g&#x27;</span> superset/examples/configs/datasets/examples/*.yaml</span><br><span class="line">sed -i <span class="string">&#x27;s/https:\/\/raw.githubusercontent.com\/apache-superset\/examples-data\/master\//http:\/\/xx.xx.xx.xx:9999\//g&#x27;</span> superset/examples/configs/datasets/examples/*.yaml</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 加载案例</span></span><br><span class="line">docker <span class="built_in">exec</span> -it superset superset load_examples</span><br><span class="line"><span class="comment"># 官方说是 setup roles, 目测是账号权限之类的东西</span></span><br><span class="line">docker <span class="built_in">exec</span> -it superset superset init</span><br></pre></td></tr></table></figure>

<p>到这里安装结束，通过访问 <a href="http://localhost:8080/login/">http://localhost:8080/login/</a> 查看页面，使用 admin/admin 登陆</p>
<h2 id="画图案例"><a href="#画图案例" class="headerlink" title="画图案例"></a>画图案例</h2>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>superset</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 poetry 和 click 自定义终端命令</title>
    <url>/hexo/2021/01/20/Python-build-and-test-a-cmd-interface-with-poetry-and-click/</url>
    <content><![CDATA[<p>最近打算新加一个命令到项目，突然发现项目启动不了了，查了一下是 <code>setup.py</code> 和 toml 文件的兼容性有问题，找到了解决方案，顺便结合找到的资料，将使用 poetry 和 click 自定义命令重新记录一下。</p>
<h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><p>Python: 3.7.3<br>pip: 19.3.1<br>OS: posix</p>
<h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>新建项目 <code>poetry new --name greet --src clickgreet</code>，如过想名字保持一致，那直接 <code>poetry new greet</code> 即可。命令执行完后会在当前目录下生成项目，结构如下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">clickgreet</span><br><span class="line">├── README.rst</span><br><span class="line">├── pyproject.toml</span><br><span class="line">├── src</span><br><span class="line">│   └── greet</span><br><span class="line">│       └── __init__.py</span><br><span class="line">└── tests</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── test_greet.py</span><br></pre></td></tr></table></figure>

<p>安装依赖包 <code>poetry add click</code>, 首次运行 add 命令时，poetry 会帮你创建一个虚拟环境，并将包安装进去。安装完后你可以在项目的 toml 文件中看到 <code>tool.poetry.dependencies</code> 下有了 click 的依赖</p>
<p>在 src/greet 文件夹下新建 <code>greet.py</code> 添加逻辑代码, 代码实现如下功能：接受两个参数 name, count 后在终端输出对应次数的名字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(&#x27;--count&#x27;, default=1, help=&#x27;Number of greetings.&#x27;)</span></span><br><span class="line"><span class="meta">@click.option(&#x27;--name&#x27;, prompt=&#x27;Your name&#x27;,</span></span><br><span class="line">              help=<span class="string">&#x27;The person to greet.&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">count, name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simple program that greets NAME for a total of COUNT times.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(count):</span><br><span class="line">        click.echo(<span class="string">&#x27;Hello %s!&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    greet()</span><br></pre></td></tr></table></figure>

<p>在 toml 中添加程序入口</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[tool.poetry.scripts]</span></span><br><span class="line"><span class="attr">greet</span> = <span class="string">&quot;greet.greet:greet&quot;</span></span><br></pre></td></tr></table></figure>

<p>终端输入 <code>poetry install</code> 将代码安装到虚拟环境，之后输入 <code>poetry run greet</code> 试运行脚本，可以看到终端给出提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mypc ~/tmp/clickgreet &gt; poetry run greet</span><br><span class="line">Your name: jack</span><br><span class="line">Hello jack!</span><br></pre></td></tr></table></figure>

<p>至此，主题部分结束，下面开始编写测试部分，在目录的 <code>test_greet.py</code> 中添加测试代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> click.testing <span class="keyword">import</span> CliRunner</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> greet.greet <span class="keyword">import</span> greet</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> greet <span class="keyword">import</span> __version__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_version</span>():</span></span><br><span class="line">    <span class="keyword">assert</span> __version__ == <span class="string">&#x27;0.1.0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_greet_cli</span>():</span></span><br><span class="line">    runner = CliRunner()</span><br><span class="line">    result = runner.invoke(greet, [<span class="string">&#x27;--name&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>])</span><br><span class="line">    <span class="keyword">assert</span> result.exit_code == <span class="number">0</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&quot;Hello jack!&quot;</span> <span class="keyword">in</span> result.output</span><br></pre></td></tr></table></figure>

<p>终端输人 <code>poetry run pytest</code> 运行测试用例, 至此教程主体结束。</p>
<p>PS: 可以在 toml 中添加配置使用 douban 镜像加速下载</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[[tool.poetry.source]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;douban&quot;</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">&quot;https://pypi.doubanio.com/simple/&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Debug-Click-Command"><a href="#Debug-Click-Command" class="headerlink" title="Debug Click Command"></a>Debug Click Command</h2><p>测试代码，接收 count, name 参数并在终端输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(&#x27;--count&#x27;, default=1, help=&#x27;Number of greetings.&#x27;)</span></span><br><span class="line"><span class="meta">@click.option(&#x27;--name&#x27;, prompt=&#x27;Your name&#x27;,</span></span><br><span class="line">              help=<span class="string">&#x27;The person to greet.&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">count, name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simple program that greets NAME for a total of COUNT times.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(count):</span><br><span class="line">        click.echo(<span class="string">&#x27;Hello %s!&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    hello()</span><br></pre></td></tr></table></figure>

<p>配置 launch.json 运行文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;console&quot;</span>: <span class="string">&quot;integratedTerminal&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;--count&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;--name&quot;</span>, <span class="string">&quot;jaaack&quot;</span></span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击菜单栏的 debug 按钮，选择配置的 ‘click’ run config，点击这个配置<strong>左边</strong>的运行按钮，直接运行即可。需要注意的点：</p>
<ol>
<li>别点右上角那个，那个是直接运行当前文件的，不会接收配置的参数！！</li>
<li>当断点生效时，VSCode 还提供了一个 DEBUG CONSOLE 来给你操作运行时的变量，真是太酷了</li>
<li>如果你想要输入多行，使用 <code>Shift + Enter</code> 实现换行</li>
</ol>
<p>如果要调试带有 argumnet 注解的代码，比如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.argument(&#x27;input&#x27;, type=click.File(&#x27;rb&#x27;))</span></span><br><span class="line"><span class="meta">@click.argument(&#x27;output&#x27;, type=click.File(&#x27;wb&#x27;))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inout</span>(<span class="params">input, output</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Copy contents of INPUT to OUTPUT.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        chunk = input.read(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        output.write(chunk)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    inout([<span class="string">&quot;input_path&quot;</span>, <span class="string">&quot;output_path&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>只需要将 argument 直接写在最后的函数入口中就行了，这里有一个设定不是很理解，在最后一行，按理说我设置的参数列表应该是 <code>&quot;arg1&quot;, &quot;arg2&quot;</code> 才对，但是执行的时候会出问题，设置成 list type 的就没问题。。。</p>
<h2 id="集成-setup-py"><a href="#集成-setup-py" class="headerlink" title="集成 setup.py"></a>集成 setup.py</h2><p>以上的命令行运行时有一个限制，它必须在对应的文件夹下才能工作，pip 是支持将脚本安装到本地的。如何操作？步骤如下：</p>
<p>poetry 是没有 setup.py 文件的，运行 <code>poetry add dephell</code> 安装 dephell 来自动生成 setup.py 文件</p>
<p>toml 文件中添加生成 <code>setup.py</code> 的配置</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[tool.dephell.main]</span></span><br><span class="line"><span class="attr">from</span> = &#123;format = <span class="string">&quot;poetry&quot;</span>, path = <span class="string">&quot;pyproject.toml&quot;</span>&#125;</span><br><span class="line"><span class="attr">to</span> = &#123;format = <span class="string">&quot;setuppy&quot;</span>, path = <span class="string">&quot;setup.py&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>同时你还要修改 <code>[build-system]</code> 配置，在 requires 中添加 setuptools 的依赖 <code>requires = [&quot;setuptools&quot;, &quot;poetry&gt;=0.12&quot;]</code>，这是个 pip 的 bug 但是到 2020-1 为止还没有修复</p>
<p>运行 <code>dephell deps convert</code> 生成 setup.py 然后运行 <code>pip install -E .</code> 安装到本地。<code>cd</code> 到其他目录直接在终端输入 <code>greet</code> 测试通过，脚本正常工作，不需要什么 hack 的代码，棒棒哒 ╮(￣▽￣””)╭</p>
<h2 id="资料白嫖"><a href="#资料白嫖" class="headerlink" title="资料白嫖"></a>资料白嫖</h2><ul>
<li><a href="https://github.com/python-poetry/poetry/discussions/1135">setup.py 安装到本地报错 no module name ‘setuptools’</a></li>
<li><a href="https://dev.to/bowmanjd/build-a-command-line-interface-with-python-poetry-and-click-1f5k">poetry + click + UT guide</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>poetry</tag>
        <tag>vscode</tag>
        <tag>click</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中常用的代码段</title>
    <url>/hexo/2020/01/23/Python-code-snip-with-high-frequency/</url>
    <content><![CDATA[<p>记录一些我经常查找的 python 方法作为备忘</p>
<h2 id="Generate-random-int-list-or-just-a-requirement-of-loop-N-times"><a href="#Generate-random-int-list-or-just-a-requirement-of-loop-N-times" class="headerlink" title="Generate random int list, or just a requirement of loop N times"></a>Generate random int list, or just a requirement of loop N times</h2><p>it’s a common requirement and some guys achieve this goal by using Numpy lib, but it’s too heavy. you can do in this way:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">  print(random.randint(<span class="number">0</span>, <span class="number">100</span>))</span><br><span class="line">  </span><br><span class="line"><span class="comment"># the _ is from 0 - 9</span></span><br></pre></td></tr></table></figure>

<h2 id="Get-index-and-val-at-the-same-time"><a href="#Get-index-and-val-at-the-same-time" class="headerlink" title="Get index and val at the same time"></a>Get index and val at the same time</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> idx, val <span class="keyword">in</span> enumerate(a):</span><br><span class="line">   print(<span class="string">f&#x27;idx = <span class="subst">&#123;idx&#125;</span>, val = <span class="subst">&#123;val&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># idx = 0, val = a</span></span><br><span class="line"><span class="comment"># idx = 1, val = b</span></span><br><span class="line"><span class="comment"># idx = 2, val = c</span></span><br><span class="line"><span class="comment"># idx = 3, val = d</span></span><br></pre></td></tr></table></figure>

<p>if you want to specify the start index, you can add a second parameter to enumerate func</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># in this case, idx would start from 3</span></span><br><span class="line">a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> idx, val <span class="keyword">in</span> enumerate(a, <span class="number">3</span>):</span><br><span class="line">  print(<span class="string">f&#x27;idx = <span class="subst">&#123;idx&#125;</span>, val = <span class="subst">&#123;val&#125;</span>&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># idx = 3, val = a</span></span><br><span class="line"><span class="comment"># idx = 4, val = b</span></span><br><span class="line"><span class="comment"># idx = 5, val = c</span></span><br><span class="line"><span class="comment"># idx = 6, val = d</span></span><br></pre></td></tr></table></figure>

<h2 id="Ipython-交互界面重新引入修改后的包"><a href="#Ipython-交互界面重新引入修改后的包" class="headerlink" title="Ipython 交互界面重新引入修改后的包"></a>Ipython 交互界面重新引入修改后的包</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">importlib.reload(some_module)</span><br></pre></td></tr></table></figure>

<h2 id="for-loop-one-line-mode"><a href="#for-loop-one-line-mode" class="headerlink" title="for loop one line mode"></a>for loop one line mode</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_ids = [record[<span class="string">&#x27;login&#x27;</span>] <span class="keyword">for</span> record <span class="keyword">in</span> resp]</span><br><span class="line"></span><br><span class="line"><span class="comment"># if you need if condition</span></span><br><span class="line">list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">filter = [str(sub + <span class="string">&quot;tt&quot;</span>) <span class="keyword">for</span> sub <span class="keyword">in</span> list <span class="keyword">if</span> sub &gt;= <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<h2 id="repr-Vs-str"><a href="#repr-Vs-str" class="headerlink" title="repr Vs str"></a><strong>repr</strong> Vs <strong>str</strong></h2><ul>
<li>只重写 <strong>str</strong> 只定制在 print() 时的输出</li>
<li>只重写 <strong>repr</strong> print() 和 调用都输出定制内容</li>
<li>重写 <strong>str</strong> + <strong>repr</strong> print() 输出 str 定制内容，调用输出 repr 内容</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">N1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;N1: data=%s&#x27;</span> % self.data</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">N2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;N2: data=%s&#x27;</span> % self.data</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">N3</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;N3 repr: data=%s&#x27;</span> % self.data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;N3 str: data=%s&#x27;</span> % self.data</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;output</span></span><br><span class="line"><span class="string">n1 = N1(1)</span></span><br><span class="line"><span class="string"># In [30]: n1</span></span><br><span class="line"><span class="string"># Out[30]: &lt;BinaryTree.N1 at 0x10853fd30&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(n1)</span></span><br><span class="line"><span class="string"># N1: data=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n2 = N2(2)</span></span><br><span class="line"><span class="string"># In [33]: n2</span></span><br><span class="line"><span class="string"># Out[33]: N2: data=2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(n2)</span></span><br><span class="line"><span class="string"># N2: data=2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n3 = N3(3)</span></span><br><span class="line"><span class="string"># Out[36]: N3 repr: data=3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(n3)</span></span><br><span class="line"><span class="string"># N3 str: data=3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="How-to-print-in-string-formant"><a href="#How-to-print-in-string-formant" class="headerlink" title="How to print in string formant"></a>How to print in string formant</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;&#123; Test-&#123;&#125; &#125;&#125;&#x27;</span>.format(<span class="string">&#x27;output&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output: &#123; Test-output &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="遍历子目录"><a href="#遍历子目录" class="headerlink" title="遍历子目录"></a>遍历子目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">    <span class="keyword">for</span> sub <span class="keyword">in</span> files:</span><br><span class="line">        print(<span class="string">&#x27;name: %s&#x27;</span> %(os.path.join(root, sub)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者也可以使用 glob</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line">glob.glob(<span class="string">&#x27;./**/*.png&#x27;</span>, recursive=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 日期和时间</title>
    <url>/hexo/2020/06/18/Python-datetime/</url>
    <content><![CDATA[<p>对 python 中涉及到时间的类库做一个大致的了解并收集一些常用的 sample。类库包括：time, date, datetime, timezone 等</p>
<h2 id="datetime-日期时间"><a href="#datetime-日期时间" class="headerlink" title="datetime 日期时间"></a>datetime 日期时间</h2><p>时间类型分为感知型和简单型，感知型包含 timezone 信息，简单型则没有这种意义。</p>
<ul>
<li>date 都是简单型的</li>
<li>time 和 datetime 可以是简单型也可以是感知型，通过 d.tzinfo 不等于 None 或者 d.tzinfo.utcoffset(d) 部位 None 来确定</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间</span></span><br><span class="line">datetime.now()</span><br><span class="line"><span class="comment"># Out[18]: datetime.datetime(2020, 6, 18, 17, 2, 48, 14847)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 感知型 now</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timezone</span><br><span class="line">dt =datetime.now(timezone.utc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime 得到 s</span></span><br><span class="line">dt.timestamp()</span><br><span class="line"><span class="comment"># Out[41]: 1592472504.59345</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s 转 datetime, ms 的话把时间除1000.0即可 1592472504.59345/1000.0</span></span><br><span class="line">d = datetime.fromtimestamp(<span class="number">1592472504.59345</span>)</span><br><span class="line"><span class="comment"># Out[43]: datetime.datetime(2020, 6, 18, 17, 28, 24, 593450)</span></span><br></pre></td></tr></table></figure>

<p>date, time, datetime 都支持 strftime(), 只有 datetime 支持 strptime()。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># strftime: string from time, 即格式化输出时间, 对象方法</span></span><br><span class="line">now = datetime.now()</span><br><span class="line">now.strftime(<span class="string">&#x27;[%y%m%d]-[%H:%M:%S]&#x27;</span>)</span><br><span class="line"><span class="comment"># Out[22]: &#x27;[200618]-[17:12:46]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># strptime: string parse to time, 即将字符串转化为时间, 类方法</span></span><br><span class="line">dt = datetime.strptime(<span class="string">&#x27;[200618]-[17:12:46]&#x27;</span>, <span class="string">&#x27;[%y%m%d]-[%H:%M:%S]&#x27;</span>)</span><br><span class="line"><span class="comment"># Out[24]: datetime.datetime(2020, 6, 18, 17, 12, 46)</span></span><br></pre></td></tr></table></figure>

<h2 id="deltatime-时间间隔"><a href="#deltatime-时间间隔" class="headerlink" title="deltatime 时间间隔"></a>deltatime 时间间隔</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">delta = timedelta(days=<span class="number">50</span>, seconds=<span class="number">27</span>, microseconds=<span class="number">10</span>, milliseconds=<span class="number">29000</span>, minutes=<span class="number">5</span>, hours=<span class="number">8</span>, weeks=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># Out[16]: datetime.timedelta(days=64, seconds=29156, microseconds=10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过 datetime 做计算得到</span></span><br><span class="line">now - dt</span><br><span class="line"><span class="comment"># Out[26]: datetime.timedelta(seconds=329, microseconds=894908)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>date</tag>
      </tags>
  </entry>
  <entry>
    <title>Python err str object is not callable</title>
    <url>/hexo/2021/05/10/Python-err-str-object-is-not-callable/</url>
    <content><![CDATA[<p>在 VSCode 上写代码的时候，终端突然不能做 int 到 String 的转化了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># TypeError                                 Traceback (most recent call last)</span></span><br><span class="line"><span class="comment"># &lt;ipython-input-40-5760e6fd64bf&gt; in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#      10     else:</span></span><br><span class="line"><span class="comment">#      11         tmpStr = re.sub(&#x27;\s+&#x27;, &#x27; &#x27;, sub[&#x27;preview&#x27;])</span></span><br><span class="line"><span class="comment"># ---&gt; 12         allLines += &quot;\n&quot; + str(sub[&#x27;lineNumber&#x27;]) + &quot; &quot; + tmpStr</span></span><br><span class="line"><span class="comment">#      13 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TypeError: &#x27;str&#x27; object is not callable</span></span><br></pre></td></tr></table></figure>

<p>查了下，str 是一个 global 的函数，如果之前有类似 <code>str = &#39;asdf&#39;</code> 的赋值语句的话，后面对这个函数的调用就会出问题。。。。</p>
<p>回忆一下，貌似终端 debug 的时候有做过类似的操作 （；￣ェ￣）</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>err</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 脚本高频报错</title>
    <url>/hexo/2020/06/12/Python-exception-reminder/</url>
    <content><![CDATA[<h2 id="requests-lib-SSLError"><a href="#requests-lib-SSLError" class="headerlink" title="requests lib SSLError"></a>requests lib SSLError</h2><p>在使用 requests 发送 API 请求的时候，如果网站是 https 的，如果你没有对应的证书就会抛 SSLError, 示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers  = &#123;<span class="string">&#x27;Authorization&#x27;</span> : <span class="string">&#x27;token xxx&#x27;</span>&#125;</span><br><span class="line">url = <span class="string">&#x27;https://github.domain.com/api/v3/users/ixxx&#x27;</span></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; Error show as:</span></span><br><span class="line"><span class="string">SSLError: HTTPSConnectionPool(host=&#x27;github.wdf.sap.corp&#x27;, port=443): Max retries exceeded with url: /api/v3/users/i332399 (Caused by SSLError(SSLCertVerificationError(1, &#x27;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1076)&#x27;)))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [7]: resp = requests.get(url, headers=headers, verify=False)</span></span><br><span class="line"><span class="string">/Users/i306454/gitStore/mycommands/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py:851: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</span></span><br><span class="line"><span class="string">  InsecureRequestWarning)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>解决方案有两个</p>
<ol>
<li>跳过verify</li>
<li>指定证书</li>
</ol>
<blockquote>
<p>方案一</p>
</blockquote>
<p>requests.get(url, auth=(), verify=False)<br>但是，这种方式会在发完request之后抛warning，对于强迫症患者说简直不能忍。</p>
<blockquote>
<p>方案二</p>
</blockquote>
<p>在request中指定证书路径 <code>requests.get(url, auth=auth, verify=&#39;/Users/jack/Downloads/my.crt&#39;)</code></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中的 import 关键字</title>
    <url>/hexo/2020/01/23/Python-keyword-of-import/</url>
    <content><![CDATA[<p>看 you-get 源码时卡在了 import package 这个点，特此记录一下搜索资料的结果</p>
<h2 id="Import-Of-Python"><a href="#Import-Of-Python" class="headerlink" title="Import Of Python"></a>Import Of Python</h2><p>你在看 python 代码的时候经常会在文件头部发现一串代码，格式类似 <code>import xxx</code> 或者 <code>from xxx import xxx</code>。功能都是一样的，引入代码重复利用。分两种，一种是引入 module，另一种是映入 package。</p>
<ul>
<li>module 简单理解就是组织好的 python 文件</li>
<li>package 即使用文件夹形式组织 python 文件，在 package 的更目录下会有一个 <code>__init__.py</code> 文件作为 package 的入口</li>
</ul>
<h2 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h2><p>clone 了 rich 的源码通过 <code>python ./styled.py</code> 运行时报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(rich-2qeSub0j-py3.7)  i306454@C02TW719HTD5  ~/gitStore/rich/rich   master  python ./styled.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;./styled.py&quot;</span>, line 3, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from .measure import Measurement</span><br><span class="line">ImportError: attempted relative import with no known parent package</span><br></pre></td></tr></table></figure>

<p>这是因为对应的文件中采用了相对引用就是类似 <code>from .style import StyleType</code> 的语法，我们可以通过在上一级目录下输入 <code>python -m rich.styled</code> 运行。注意命令没有 <code>.py</code> 后缀</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/yan-lei/p/7828871.html">cnlogs - Python学习者</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>import</tag>
        <tag>module</tag>
        <tag>package</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 解析 PDF</title>
    <url>/hexo/2020/06/19/Python-parse-pdf/</url>
    <content><![CDATA[<p>使用 python 解析 PDF 文件，提取文件中表格的数据。随便在网上找了一个 PDF 文件做样本。使用 <code>filetype:pdf 价格表格</code> 的到样本文件。</p>
<p>稍微检索了一下，当下貌似名为 camelot 的 python lib 很火，就用这个做实验吧</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这一步还挺复杂，需要安装挺多依赖，具体参考官方文档，这里只记录我本地环境的安装步骤</p>
<p>MacOS:</p>
<ol>
<li><code>brew install tcl-tk ghostscript</code>, 然后终端输入 <code>gs -version</code>, 在 python 命令行中输入 <code>import tkinter</code> 验证依赖是否安装成功</li>
<li><code>pip3 install camelot-py[cv] --user</code> 安装报错，是 zsh 的锅，切换回 bash 安装即可</li>
</ol>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>运行了一下官方给的例子，成功。但是我自己下载的中文 pdf 有问题，查了下，是说 camelot 基于 PyPDF2，然后这个 lib 是不支持处理中文字符的，不过可以通过修改对应 lib 的源码实现支持，网上有教程。不过我暂时只处理英文文档，就不纠结了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> camelot</span><br><span class="line">tables = camelot.read_pdf(<span class="string">&#x27;foo.pdf&#x27;</span>)</span><br><span class="line">tables[<span class="number">0</span>].df</span><br><span class="line"><span class="comment"># 输出表格，foo.pdf 在官方教程中有给下载链接</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>Poetry 快速入门</title>
    <url>/hexo/2020/07/17/Python-poetry-quick-start/</url>
    <content><![CDATA[<p>Poetry 类 pipenv 工具，据说 lock 什么的速度更快，而且有集成发布功能，刚好 rich 这个项目有用这个，刚好在看源码的时候体验一把</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># powershell 输入</span></span><br><span class="line">(Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py -UseBasicParsing).Content | python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示 error, 原因是 DNS 污染</span></span><br><span class="line">Invoke-WebRequest : 未能解析此远程名称: <span class="string">&#x27;raw.githubusercontent.com&#x27;</span></span><br><span class="line">所在位置 行:1 字符: 2</span><br><span class="line">+ (Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poet ...</span><br><span class="line">+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest]，WebExce</span><br><span class="line">    ption</span><br><span class="line">    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决方案：修改 host 文件</span></span><br><span class="line"><span class="comment"># 目录：C:/Windows/System32/drivers/etc/</span></span><br><span class="line"><span class="comment"># 管理员模式打开，添加文本: 151.101.0.133 raw.githubusercontent.com</span></span><br><span class="line"><span class="comment"># 刷新DNS</span></span><br><span class="line">ipconfig /flushdns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接成功，但是报其他错误</span></span><br><span class="line">Invoke-WebRequest : 基础连接已经关闭: 发送时发生错误。</span><br><span class="line">所在位置 行:1 字符: 2</span><br><span class="line">+ (Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poet ...</span><br><span class="line">+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest]，WebExce</span><br><span class="line">    ption</span><br><span class="line">    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改完之后各种报错，烦躁。这个命令就是下载一个 get-poetry.py 的 raw 文件，然后使用 python get-poetry.py 安装。我直接下载这个文件然后安装了。。。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尼玛，被墙了安装超级慢 (╬▔皿▔)╯ 最后用小飞机开启全局代理， 再 CMD 窗口 python get-poetry.py 安装成功</span></span><br><span class="line"></span><br><span class="line">Retrieving Poetry metadata</span><br><span class="line"></span><br><span class="line">Before we start, please answer the following questions.</span><br><span class="line">You may simply press the Enter key to leave unchanged.</span><br><span class="line">Modify PATH variable? ([y]/n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Welcome to Poetry!</span></span><br><span class="line">This will download and install the latest version of Poetry,</span><br><span class="line">a dependency and package manager <span class="keyword">for</span> Python.</span><br><span class="line">It will add the `poetry` <span class="built_in">command</span> to Poetry<span class="string">&#x27;s bin directory, located at:</span></span><br><span class="line"><span class="string">%USERPROFILE%\.poetry\bin</span></span><br><span class="line"><span class="string">This path will then be added to your `PATH` environment variable by</span></span><br><span class="line"><span class="string">modifying the `HKEY_CURRENT_USER/Environment/PATH` registry key.</span></span><br><span class="line"><span class="string">You can uninstall at any time by executing this script with the --uninstall option,</span></span><br><span class="line"><span class="string">and these changes will be reverted.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Installing version: 1.0.10</span></span><br><span class="line"><span class="string">  - Downloading poetry-1.0.10-win32.tar.gz (11.96MB)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Poetry (1.0.10) is installed now. Great!</span></span><br><span class="line"><span class="string">To get started you need Poetry&#x27;</span>s bin directory (%USERPROFILE%\.poetry\bin) <span class="keyword">in</span> your `PATH`</span><br><span class="line">environment variable. Future applications will automatically have the</span><br><span class="line">correct environment, but you may need to restart your current shell.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启一下终端，输入命令检测安装</span></span><br><span class="line">poetry --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是在 vscode 的终端中还是不能识别，手动将 user\.poetry\bin 添加到系统 path 中重启 vscode, 识别成功</span></span><br></pre></td></tr></table></figure>

<p>PS: 国内安装各种软件有助于增长火气！！！</p>
<h2 id="常用-Command"><a href="#常用-Command" class="headerlink" title="常用 Command"></a>常用 Command</h2><h3 id="poetry-new-project-name"><a href="#poetry-new-project-name" class="headerlink" title="poetry new project-name"></a>poetry new project-name</h3><p>初始化项目, 创建必要文件。你可以在 git 上先建一个空的仓库然后，本地做完 poetry init 和 git init 之后 match 一下</p>
<p>初始化后目录为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">job-spider</span><br><span class="line">├── pyproject.toml</span><br><span class="line">├── README.rst</span><br><span class="line">├── job_spider</span><br><span class="line">│   └── __init__.py</span><br><span class="line">└── tests</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── test_job_spider.py</span><br></pre></td></tr></table></figure>

<p>通过配置 toml 文件指定国内源加速</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[[tool.poetry.source]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;douban&quot;</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">&quot;https://pypi.doubanio.com/simple/&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="poetry-config-–list"><a href="#poetry-config-–list" class="headerlink" title="poetry config –list"></a>poetry config –list</h3><p>查看配置，比如 virtualenv 会创建在哪里之类的。这个 cmd 还是很有帮助的，可以通过它知道你的虚拟环境创建在哪里，是不是要在 project 创建 venv 等</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ poetry config --list</span><br><span class="line">cache-dir = <span class="string">&quot;/Users/jack/Library/Caches/pypoetry&quot;</span></span><br><span class="line">virtualenvs.create = <span class="literal">true</span></span><br><span class="line">virtualenvs.in-project = <span class="literal">false</span></span><br><span class="line">virtualenvs.path = <span class="string">&quot;&#123;cache-dir&#125;/virtualenvs&quot;</span> <span class="comment"># /Users/jack/Library/Caches/pypoetry/virtualenvs</span></span><br></pre></td></tr></table></figure>

<p>通过指定 <code>poetry config virtualenvs.in-project true</code> 可以指定将虚拟环境创建到 project 目录下面，方便管理</p>
<h3 id="poetry-shell"><a href="#poetry-shell" class="headerlink" title="poetry shell"></a>poetry shell</h3><p>激活环境, 如果还没有创建过虚拟环境，他还会根据 toml 文件新建一个</p>
<h3 id="poetry-install"><a href="#poetry-install" class="headerlink" title="poetry install"></a>poetry install</h3><p>并不是安装依赖，而是根据 toml 文件安装项目依赖，对标 <code>pipenv sync</code></p>
<h3 id="poetry-add"><a href="#poetry-add" class="headerlink" title="poetry add"></a>poetry add</h3><p>对标 pipenv 中的 <code>pipenv install</code>, 使用 <code>add --dev/-D flask</code> 安装 dev 相关的包</p>
<h3 id="poetry-env-info"><a href="#poetry-env-info" class="headerlink" title="poetry env info"></a>poetry env info</h3><p><code>poetry env info</code>: 显示运行环境信息，包括本地 OS 和虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Virtualenv</span><br><span class="line">Python:         3.7.5</span><br><span class="line">Implementation: CPython</span><br><span class="line">Path:           /Users/jack/gitStore/mycommands/.venv</span><br><span class="line">Valid:          True</span><br><span class="line"></span><br><span class="line">System</span><br><span class="line">Platform: darwin</span><br><span class="line">OS:       posix</span><br><span class="line">Python:   /Library/Frameworks/Python.framework/Versions/3.7</span><br></pre></td></tr></table></figure>

<p><code>poetry env list</code>: 显示可用的 env 列表</p>
<p>官方推荐 poetry 结合 pyenv 管理各种版本的虚拟环境</p>
<h2 id="poetry-show"><a href="#poetry-show" class="headerlink" title="poetry show"></a>poetry show</h2><p>显示已安装的依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">poetry show</span><br><span class="line">atomicwrites       1.4.0  Atomic file writes.</span><br><span class="line">attrs              19.3.0 Classes Without Boilerplate</span><br><span class="line">click              7.1.2  Composable <span class="built_in">command</span> line interface toolkit</span><br><span class="line">flask              1.1.2  A simple framework <span class="keyword">for</span> building complex web applications.</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="Resolving-dependency-挺慢"><a href="#Resolving-dependency-挺慢" class="headerlink" title="Resolving dependency 挺慢"></a>Resolving dependency 挺慢</h3><p>在安装更新的时候 resolving dependency 挺慢的，等了好一会儿，一度认为进程死了。但是第二次就快多了，可能是有 cache</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\jack\gitStore\job-spider\job_spider&gt;poetry install --verbose</span><br><span class="line">Updating dependencies</span><br><span class="line">Resolving dependencies...</span><br></pre></td></tr></table></figure>

<h3 id="编译器识别有问题"><a href="#编译器识别有问题" class="headerlink" title="编译器识别有问题"></a>编译器识别有问题</h3><p>观察 VSCode 的左下角，python 编译器经常选择有问题，会找不到自己创建的虚拟环境路径。可以点击它，然后根据 poetry shell 的提示手动设置，路径如 <code>C:\Users\jack\AppData\Local\pypoetry\Cache\virtualenvs\job-spider-UlnXzhyt-py3.7</code> 做完后他会自动保存到 <code>.vscode</code> 的工程文件夹下。但是我默认这个文件是不 check in 的，所以然并卵 ┑(￣Д ￣)┍</p>
<h3 id="Win-启动-flask-失败"><a href="#Win-启动-flask-失败" class="headerlink" title="Win 启动 flask 失败"></a>Win 启动 flask 失败</h3><p>新建了一个 flask demo，启动的时候报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\jack\gitStore\job-spider&gt; poetry run .\job_spider\main.py</span><br><span class="line"></span><br><span class="line">[OSError]</span><br><span class="line">[WinError 193] %1 不是有效的 Win32 应用程序。</span><br></pre></td></tr></table></figure>

<p>据说是 windows 上安装了 64 位的 python， 调用了 32 位的 dll 会报这个错，换个 32 位的 python 就能解决。将原有的 64 位卸载，删除各种环境变量，重新安装 32 位 python，然并卵，要自闭了 (￣ε(#￣)</p>
<p>暂时没有什么其他更好的解决方案，打算用虚拟机或者在 MacOS 上完成开发以节省时间</p>
<p>今天在 Mac 上用 3.7.8 的版本也会抛同样的错误！！！难道是版本有问题？果断用 <code>3.6.6</code>, <code>3.7.3</code> 试试，可行。。。。回去再到 Windows 的机子上试试这个版本。</p>
<p>在 Win 上换 3.7.3 之后一切正常 ╰(艹皿艹 )</p>
<h3 id="MacOS-poetry-install-报错"><a href="#MacOS-poetry-install-报错" class="headerlink" title="MacOS poetry install 报错"></a>MacOS poetry install 报错</h3><p>切换到 3.6.5 之后 poetry install 报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[EnvCommandError]</span><br><span class="line">Command [<span class="string">&#x27;/Users/jack/gitStore/splunk-collector/.venv/bin/pip&#x27;</span>, <span class="string">&#x27;install&#x27;</span>, <span class="string">&#x27;--no-deps&#x27;</span>, <span class="string">&#x27;zipp==3.1.0&#x27;</span>] errored with the following <span class="built_in">return</span> code 1, and output:</span><br><span class="line">pip is configured with locations that require TLS/SSL, however the ssl module <span class="keyword">in</span> Python is not available.</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>是 OpenSSL 包缺失导致的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修复，第一行可以不运行，下载包经常卡住</span></span><br><span class="line">brew update &amp;&amp; brew upgrade</span><br><span class="line">brew uninstall --ignore-dependencies openssl; brew install https://github.com/tebelorg/Tump/releases/download/v1.0.0/openssl.rb</span><br><span class="line"></span><br><span class="line">brew reinstall python</span><br></pre></td></tr></table></figure>

<p>这之后还重新将 pyenv 管理的 python 重新卸载安装了一下，问题解决</p>
<h3 id="MacOS-poetry-run"><a href="#MacOS-poetry-run" class="headerlink" title="MacOS poetry run"></a>MacOS poetry run</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> poetry run splunk_collector/main.py</span><br><span class="line"></span><br><span class="line">[PermissionError]</span><br><span class="line">[Errno 13] Permission denied</span><br></pre></td></tr></table></figure>

<p>运行 flask demo, permission 报错。完全搞错了。。。。flask 并不是那样运行的。保存完文件之后, 通过如下方式运行，而不是直接用 poetry 或者 python 运行，我 凸^-^凸</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> FLASK_APP=hello.py</span><br><span class="line">$ flask run</span><br><span class="line"> * Running on http://127.0.0.1:5000/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>poetry</tag>
      </tags>
  </entry>
  <entry>
    <title>Python re 包中方法简介</title>
    <url>/hexo/2021/03/03/Python-re-lib-method-abstrct/</url>
    <content><![CDATA[<p>Python 的 re 包里面的 search 和 match 经常搞不清楚，特意整理记录下 re 包支持的方法</p>
<p><strong>re.search(pattern, string, flags=0)</strong> 字符串任意位置匹配</p>
<p>Scan through string looking for the first location where the regular expression pattern produces a match, and return a corresponding match object. Return None if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = re.search(<span class="string">r&#x27;[\d]+&#x27;</span>, <span class="string">&#x27;aaa123bbbb&#x27;</span>)</span><br><span class="line">ret.group(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;123&#x27;</span></span><br></pre></td></tr></table></figure>


<p><strong>re.match(pattern, string, flags=0)</strong> 从头开始匹配</p>
<p>If zero or more characters at the beginning of string match the regular expression pattern, return a corresponding match object. Return None if the string does not match the pattern; note that this is different from a zero-length match.</p>
<p>Note that even in MULTILINE mode, re.match() will only match at the beginning of the string and not at the beginning of each line.</p>
<p>If you want to locate a match anywhere in string, use search() instead (see also search() vs. match()).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.match(<span class="string">r&#x27;[\d]+&#x27;</span>, <span class="string">&#x27;aaa123aaa&#x27;</span>)</span><br><span class="line"><span class="comment"># null</span></span><br><span class="line"></span><br><span class="line">re.match(<span class="string">r&#x27;[\d]+&#x27;</span>, <span class="string">&#x27;123aaa&#x27;</span>) </span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">3</span>), match=<span class="string">&#x27;123&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>Requests 关闭 SSL 验证提示</title>
    <url>/hexo/2021/05/07/Python-requests-lib-and-certificate-verification/</url>
    <content><![CDATA[<p>使用 requests lib 访问 HTTPS 网站的时候，如果关闭了认证，虽然访问可以继续，但是会抛 Warning 信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests.get(request_url, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># /Users/jack/.pyenv/versions/3.7.3/lib/python3.7/site-packages/urllib3/connectionpool.py:851: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</span></span><br><span class="line"><span class="comment">#   InsecureRequestWarning)</span></span><br></pre></td></tr></table></figure>

<p>按照提示，去对应的网页查看关闭提示信息的办法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings()</span><br></pre></td></tr></table></figure>

<p>可行！ (●°u°●)​ 」</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>requests</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 使用 json 序列化</title>
    <url>/hexo/2020/06/13/Python-serialization-data-to-json/</url>
    <content><![CDATA[<h2 id="dump-Vs-dumps"><a href="#dump-Vs-dumps" class="headerlink" title="dump Vs dumps"></a>dump Vs dumps</h2><p>这两个函数都可以用来做序列化，唯一的区别是 dump 需要指定一个 io，比如打开的文件作为输出的地方，而 dumps 默认是以 stdout 做为输出端的，也就是打印在终端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">a = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jack&#x27;</span>&#125;</span><br><span class="line">json.dump(a)</span><br><span class="line"><span class="comment"># Out[6]: &#x27;&#123;&quot;name&quot;: &quot;jack&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json.dump([a, a], file)</span><br><span class="line"><span class="comment"># 当前目录下会生产名为 data.json 的文件，内容为 [&#123;&quot;name&quot;: &quot;jack&quot;&#125;, &#123;&quot;name&quot;: &quot;jack&quot;&#125;]</span></span><br></pre></td></tr></table></figure>

<h2 id="load-Vs-loads"><a href="#load-Vs-loads" class="headerlink" title="load Vs loads"></a>load Vs loads</h2><p>有了前面的基础，理解 load 和 loads 也是一个套路，一个直接从你指定的 string 加载，一个从你指定的文件加载</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = json.loads(<span class="string">&#x27;&#123;&quot;name&quot;: &quot;jack&quot;&#125;&#x27;</span>)</span><br><span class="line">ret, type(ret)</span><br><span class="line"><span class="comment"># Out[11]: (&#123;&#x27;name&#x27;: &#x27;jack&#x27;&#125;, dict)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;data.json&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    ret = json.load(file)</span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># [&#123;&#x27;name&#x27;: &#x27;jack&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;jack&#x27;&#125;]</span></span><br></pre></td></tr></table></figure>

<h2 id="支持中文"><a href="#支持中文" class="headerlink" title="支持中文"></a>支持中文</h2><p>写入文件是指定 encoding 和 ensure_ascii 参数，读取时指定 encoding 就可以了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">me = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;我&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;dump3.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json.dump(me, file, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;dump3.json&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    ret = json.load(file)</span><br><span class="line">    print(ret)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;我&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="序列化-Object"><a href="#序列化-Object" class="headerlink" title="序列化 Object"></a>序列化 Object</h2><p>序列化对象时可以在 dump(s) 的方法中指定一个自己的序列化规则类, 一种是通过 cls 参数，一种是通过 default 参数。不过有一个需要注意的点是，使用时并不指代整个对象的序列化逻辑，而是对那些不知道怎么序列化的部分给出逻辑，这块挺绕的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该例子中，Person 是自定义的类，所以调用 dumps 时，如果直接传入，会抛 exception: TypeError: Object of type Person is not JSON serializable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过指定 default 参数，给出转化规则</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PersonConvert</span>(<span class="params">person</span>):</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(person, Person):</span><br><span class="line">        <span class="keyword">return</span> person.__dict__</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError</span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;jack&#x27;</span>,<span class="number">30</span>)</span><br><span class="line">json.dumps(p, default=PersonConvert)</span><br><span class="line"><span class="comment"># Out[28]: &#x27;&#123;&quot;name&quot;: &quot;jack&quot;, &quot;age&quot;: 30&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以通过指定 cls 参数，给出转化规则</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonEncoder</span>(<span class="params">json.JSONEncoder</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(obj, Person):</span><br><span class="line">            <span class="keyword">return</span> obj.__dict__</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> json.JSONEncoder.default(self, obj)</span><br><span class="line"></span><br><span class="line">json.dumps(p, cls=PersonEncoder)</span><br><span class="line"><span class="comment"># Out[30]: &#x27;&#123;&quot;name&quot;: &quot;jack&quot;, &quot;age&quot;: 30&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果此时我们对 Person 做一下升级，添加一个 datetime 属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.create_date = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 那么之前的函数就不够用了，我们除了要处理 Person 的逻辑，还要处理 datetime 的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PersonConvertV2</span>(<span class="params">obj</span>):</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(obj, Person):</span><br><span class="line">        <span class="keyword">return</span> obj.__dict__</span><br><span class="line">    <span class="keyword">elif</span> isinstance(obj, datetime):</span><br><span class="line">        <span class="keyword">return</span> obj.timestamp()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError</span><br><span class="line"></span><br><span class="line">p2 = Person(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">31</span>)</span><br><span class="line">json.dumps(p2, default=PersonConvertV2)</span><br><span class="line"><span class="comment"># Out[46]: &#x27;&#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 31, &quot;create_date&quot;: 1592802400.657711&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网上有给出比较多经典的转化方式，在转化过程中会携带 class, module 的信息，为反序列化做准备</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">obj_to_dict</span>(<span class="params">obj</span>):</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(obj, Person):</span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        d[<span class="string">&#x27;__class__&#x27;</span>] = obj.__class__.__name__</span><br><span class="line">        d[<span class="string">&#x27;__module__&#x27;</span>] = obj.__module__</span><br><span class="line">        d.update(obj.__dict__)</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">        <span class="keyword">elif</span> isinstance(obj, datetime):</span><br><span class="line">            <span class="keyword">return</span> obj.timestamp()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError</span><br><span class="line"></span><br><span class="line">json.dumps(p2, default=obj_to_dict)</span><br><span class="line"><span class="comment"># Out[54]: &#x27;&#123;&quot;__class__&quot;: &quot;Person&quot;, &quot;__module__&quot;: &quot;__main__&quot;, &quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 31, &quot;create_date&quot;: 1592802400.657711&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>理解了 encode 的逻辑，decode 也差不多。不过逻辑稍微有点区别，他是在遇到 dict 的时候去做判断的。而且从他的输出看，应该是由内而外的进行解析的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">dict_to_obj</span>(<span class="params">d</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;level01&quot;</span> <span class="keyword">in</span> d:</span><br><span class="line">        print(<span class="string">&quot;l1: %s&quot;</span> % d)</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;level02&quot;</span> <span class="keyword">in</span> d:</span><br><span class="line">        print(<span class="string">&quot;l2: %s&quot;</span> %d)</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError</span><br><span class="line"></span><br><span class="line">json.loads(jstr, object_hook=dict_to_obj)</span><br><span class="line"><span class="comment"># l2: &#123;&#x27;level02&#x27;: &#x27;true&#x27;, &#x27;age&#x27;: 30&#125;</span></span><br><span class="line"><span class="comment"># l1: &#123;&#x27;level01&#x27;: &#x27;true&#x27;, &#x27;name&#x27;: &#x27;jack&#x27;, &#x27;info&#x27;: &#123;&#x27;level02&#x27;: &#x27;true&#x27;, &#x27;age&#x27;: 30&#125;&#125;     </span></span><br><span class="line"><span class="comment"># Out[13]: &#123;&#x27;level01&#x27;: &#x27;true&#x27;, &#x27;name&#x27;: &#x27;jack&#x27;, &#x27;info&#x27;: &#123;&#x27;level02&#x27;: &#x27;true&#x27;, &#x27;age&#x27;: 30&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dict_to_obj</span>(<span class="params">our_dict</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Function that takes in a dict and returns a custom object associated with the dict.</span></span><br><span class="line"><span class="string">    This function makes use of the &quot;__module__&quot; and &quot;__class__&quot; metadata in the dictionary</span></span><br><span class="line"><span class="string">    to know which object type to create.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;__class__&quot;</span> <span class="keyword">in</span> our_dict:</span><br><span class="line">        <span class="comment"># Pop ensures we remove metadata from the dict to leave only the instance arguments</span></span><br><span class="line">        class_name = our_dict.pop(<span class="string">&quot;__class__&quot;</span>)</span><br><span class="line">        <span class="comment"># Get the module name from the dict and import it</span></span><br><span class="line">        module_name = our_dict.pop(<span class="string">&quot;__module__&quot;</span>)</span><br><span class="line">        <span class="comment"># We use the built in __import__ function since the module name is not yet known at runtime</span></span><br><span class="line">        module = __import__(module_name)</span><br><span class="line">        <span class="comment"># Get the class from the module</span></span><br><span class="line">        class_ = getattr(module,class_name)</span><br><span class="line">        <span class="comment"># Use dictionary unpacking to initialize the object</span></span><br><span class="line">        obj = class_.__new__(class_)</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> our_dict.items():</span><br><span class="line">            <span class="keyword">if</span> key == <span class="string">&#x27;create_date&#x27;</span>:</span><br><span class="line">                value = datetime.fromtimestamp(value)</span><br><span class="line">            setattr(obj, key, value)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        obj = our_dict</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">jstr = <span class="string">&#x27;&#123;&quot;__class__&quot;: &quot;Person&quot;, &quot;__module__&quot;: &quot;__main__&quot;, &quot;name&quot;: &quot;Jack&quot;, &quot;age&quot;: 30, &quot;create_date&quot;: 1592805275.55762&#125;&#x27;</span></span><br><span class="line">jstr = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;jack&quot;, &quot;info&quot;:&#123;&quot;level02&quot;: &quot;true&quot;, &quot;age&quot;:30&#125;&#125;&#x27;</span></span><br><span class="line">o = json.loads(jstr, object_hook=dict_to_obj)</span><br><span class="line">print(o.create_date)</span><br><span class="line">print(type(o.create_date))</span><br><span class="line"><span class="comment"># 2020-06-22 13:54:35.557620</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;datetime.datetime&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="其他的一些收获"><a href="#其他的一些收获" class="headerlink" title="其他的一些收获"></a>其他的一些收获</h2><ul>
<li>在 class 的方法中可以有一个 toJSON 的方法快速得到序列化的字符串</li>
<li>在 class 的构造函数里可以有一个 dict 参数用来快速构造对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person04</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name=<span class="string">&#x27;&#x27;</span>, age=<span class="number">-1</span>, pairs=None</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        <span class="keyword">if</span> pairs:</span><br><span class="line">            self.__dict__ = pairs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toJSON</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> json.dumps(self,</span><br><span class="line">                            default=<span class="keyword">lambda</span> o: o.__dict__,</span><br><span class="line">                            sort_keys=<span class="literal">True</span>,</span><br><span class="line">                            indent=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 优雅的换行</title>
    <url>/hexo/2020/07/08/Python-switch-line-pythnic/</url>
    <content><![CDATA[<p>记录一下查了无数遍的换行方法备用，总结一下就是使用 ‘’ + \ + ‘’ 类似的语法做链接，只可使用 ‘xxxx\xxx’ 的话会出现空格</p>
<h2 id="无缝连接"><a href="#无缝连接" class="headerlink" title="无缝连接"></a>无缝连接</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;1111111&#x27;</span>\</span><br><span class="line">    <span class="string">&#x27;2222222&#x27;</span>\</span><br><span class="line">    <span class="string">&#x27;3333333&#x27;</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># &#x27;111111122222223333333&#x27;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;aaaaaaaaa&#x27;</span></span><br><span class="line">    <span class="string">&#x27;bbbbbbbbb&#x27;</span></span><br><span class="line">    <span class="string">&#x27;ccccccccc&#x27;</span>)</span><br><span class="line"><span class="comment"># aaaaaaaaabbbbbbbbbccccccccc</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;aaaaaaaaa&#x27;</span>\</span><br><span class="line">        <span class="string">&#x27;bbbbbbbbb&#x27;</span>\</span><br><span class="line">        <span class="string">&#x27;ccccccccc&#x27;</span>)</span><br><span class="line"><span class="comment"># aaaaaaaaabbbbbbbbbccccccccc</span></span><br></pre></td></tr></table></figure>

<h2 id="有缝连接"><a href="#有缝连接" class="headerlink" title="有缝连接"></a>有缝连接</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;&#x27;&#x27;11111111</span></span><br><span class="line"><span class="string">       22222222</span></span><br><span class="line"><span class="string">       33333333&#x27;&#x27;&#x27;</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># &#x27;11111111\n       22222222\n       33333333&#x27;</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;11111111\</span></span><br><span class="line"><span class="string">     22222222\</span></span><br><span class="line"><span class="string">     33333333&#x27;</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># &#x27;11111111     22222222     33333333&#x27;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;&#x27;&#x27;55555555555</span></span><br><span class="line"><span class="string">        66666666666</span></span><br><span class="line"><span class="string">        77777777777&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 55555555555</span></span><br><span class="line"><span class="comment">#                66666666666</span></span><br><span class="line"><span class="comment">#                77777777777</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>换行</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 使用 pyenv 进行版本管理</title>
    <url>/hexo/2020/07/29/Python-version-control-with-pyenv/</url>
    <content><![CDATA[<p>poetry 推荐使用 pyenv 进行本地 python 的多版本管理，以前用过，但是也没什么特别的印象了，特此记录一下使用情况</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><a href="https://github.com/pyenv/pyenv">官方教程</a></li>
</ul>
<p>Win 平台不支持这个工具，残念。。。</p>
<p>通过 brew 安装, brew 加速的教程在另一篇教程里有提到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure>

<p>在 profile 中添加配置使能，我本地用的 zsh, 各版本的 shell 稍有区别，指定的文件不一样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval &quot;$(pyenv init -)&quot;\nfi&#x27;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>安装推荐的工具机，各种系统不一样</p>
<p>For MacOS, install Xcode Command Line Tools (xcode-select –install) and HomeBrew, then optional but best install</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install openssl readline sqlite3 xz zlib</span><br></pre></td></tr></table></figure>

<p>在系统中可以通过输入 <code>echo $(pyenv root)</code> 拿到目录地址</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>直接输入 <code>pyenv</code> 查看所有的 cmd 信息</p>
<h3 id="安装某个版本的-python"><a href="#安装某个版本的-python" class="headerlink" title="安装某个版本的 python"></a>安装某个版本的 python</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install 3.7.8</span><br></pre></td></tr></table></figure>

<p>如果没打全，他会给提示可用的版本，很人性化。安装的 python 版本会被放到 <code>~/.pyenv/versions/</code> 管理</p>
<h3 id="删除对应版本"><a href="#删除对应版本" class="headerlink" title="删除对应版本"></a>删除对应版本</h3><p><code>pyenv uninstall 3.7.8</code> 或直接去 versions 文件夹下删除</p>
<h3 id="显示可用版本"><a href="#显示可用版本" class="headerlink" title="显示可用版本"></a>显示可用版本</h3><p><code>pyenv versions</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv versions</span><br><span class="line">* system (<span class="built_in">set</span> by /Users/jack/.python-version)</span><br><span class="line">  3.6.5</span><br><span class="line">  3.7.8</span><br></pre></td></tr></table></figure>

<h3 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h3><p>多用 <code>pyenv version</code> 查看当前的环境版本信息</p>
<p>使用前的情况：系统自带 python 版本 2.7.16， pyenv 可用版本 3.6.5 和 3.7.8。此时 cmd 输入 <code>python -V</code> 给出版本 <code>2.7.16</code></p>
<p>全局切换版本 <code>pyenv gloabl 3.7.8</code>，他会将这个版本存放到 <code>.pyenv/version</code> 文件中，再打开终端查看版本，变为 <code>3.7.8</code>。</p>
<p><code>pyenv local 3.6.5</code> 可以指定 folder 下的 python 版本，他会将版本信息写入当前目录下的 <code>.python-version</code> 文件中</p>
<p>如果想要指定终端的 python 版本，可以用 <code>pyenv shell xxx</code>, 这个我没有需求，未亲测</p>
<p>作用范围和其编程语言一样，范围最精确的那个生效 <code>shell &gt; local &gt; gloabl</code></p>
<h3 id="查看-python-路径"><a href="#查看-python-路径" class="headerlink" title="查看 python 路径"></a>查看 python 路径</h3><p><code>pyenv which python</code></p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>每次新安装版本，记得跑一下 <code>pyenv rehash</code> 更新信息</p>
<h2 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h2><p>pyenv install 下载失败, 报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> Jack &gt; ~ &gt; pyenv install 3.7.3</span><br><span class="line">python-build: use openssl@1.1 from homebrew</span><br><span class="line">python-build: use readline from homebrew</span><br><span class="line">Downloading Python-3.7.3.tar.xz...</span><br><span class="line">-&gt; https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz</span><br><span class="line">error: failed to download Python-3.7.3.tar.xz</span><br><span class="line"></span><br><span class="line">BUILD FAILED (OS X 10.15.6 using python-build 20180424)</span><br></pre></td></tr></table></figure>

<p>可以自行下载对应的 tar.xz 文件然后放到 pyenv 的 cache 文件夹下，pyenv install 的时候会取对应的安装包进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -P $(pyenv root)/cache https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz</span><br></pre></td></tr></table></figure>


<h2 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h2><ul>
<li><a href="http://einverne.github.io/post/2017/04/pyenv.html">参考</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pyenv</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 操作 csv 文件</title>
    <url>/hexo/2020/06/18/Python-with-csv/</url>
    <content><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><a href="https://segmentfault.com/a/1190000013031439">qutochar, delimiter 使用详解</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写 csv 文件</span></span><br><span class="line"><span class="comment"># newline=&#x27;&#x27; 可以在读写时移除空白行</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;eggs.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    spamwriter = csv.writer(csvfile)</span><br><span class="line">    spamwriter.writerow([<span class="string">&#x27;Spam&#x27;</span>] * <span class="number">5</span> + [<span class="string">&#x27;Baked Beans&#x27;</span>])</span><br><span class="line">    spamwriter.writerow([<span class="string">&#x27;Spam&#x27;</span>, <span class="string">&#x27;Lovely Spam&#x27;</span>, <span class="string">&#x27;Wonderful Spam&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># cat eggs.csv            </span></span><br><span class="line"><span class="comment"># Spam,Spam,Spam,Spam,Spam,Baked Beans</span></span><br><span class="line"><span class="comment"># Spam,Lovely Spam,Wonderful Spam</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一次性写多行</span></span><br><span class="line">header = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;area&#x27;</span>, <span class="string">&#x27;country_code2&#x27;</span>, <span class="string">&#x27;country_code3&#x27;</span>]</span><br><span class="line">data = [</span><br><span class="line">    [<span class="string">&#x27;Albania&#x27;</span>, <span class="number">28748</span>, <span class="string">&#x27;AL&#x27;</span>, <span class="string">&#x27;ALB&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;Angola&#x27;</span>, <span class="number">1246700</span>, <span class="string">&#x27;AO&#x27;</span>, <span class="string">&#x27;AGO&#x27;</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;countries.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;UTF8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    <span class="comment"># write the header</span></span><br><span class="line">    writer.writerow(header)</span><br><span class="line">    <span class="comment"># write multiple rows</span></span><br><span class="line">    writer.writerows(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果数据以 dict 的格式出现，可以使用 DictWriter 简化操作</span></span><br><span class="line">fieldnames = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;area&#x27;</span>, <span class="string">&#x27;country_code2&#x27;</span>, <span class="string">&#x27;country_code3&#x27;</span>]</span><br><span class="line"><span class="comment"># csv data</span></span><br><span class="line">rows = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Algeria&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;area&#x27;</span>: <span class="number">2381741</span>,</span><br><span class="line">    <span class="string">&#x27;country_code2&#x27;</span>: <span class="string">&#x27;DZ&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;country_code3&#x27;</span>: <span class="string">&#x27;DZA&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;American Samoa&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;area&#x27;</span>: <span class="number">199</span>,</span><br><span class="line">    <span class="string">&#x27;country_code2&#x27;</span>: <span class="string">&#x27;AS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;country_code3&#x27;</span>: <span class="string">&#x27;ASM&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;countries.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;UTF8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerows(rows)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读 csv 文件</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;some.csv&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        print(row)</span><br><span class="line"><span class="comment"># [&#x27;Spam&#x27;, &#x27;Spam&#x27;, &#x27;Spam&#x27;, &#x27;Spam&#x27;, &#x27;Spam&#x27;, &#x27;Baked Beans&#x27;]</span></span><br><span class="line"><span class="comment"># [&#x27;Spam&#x27;, &#x27;Lovely Spam&#x27;, &#x27;Wonderful Spam&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>有一个 csv 文件，其中有个 column 名为 ‘_raw’ 包含我们需要的信息，写一段脚本解析之</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">_raw 中文本为</span><br><span class="line"></span><br><span class="line">08:42:50,222 INFO  [RESTCallbackSubscriber] [customerId,customerId,null,null,SFAPI,null,null] [IrisSubscriber Container[queue_seb.subscriber.pillar.deactivateuser]1]Postback for event com.company.hermes.core.SFEvent=&#123;meta:Meta=&#123;priority:0,proxyId:&quot;null&quot;,serverName:&quot;null&quot;,topic:&quot;com.company.platform.mobile.deactivateuser&quot;,ptpName:null,companyId:&quot;customerId&quot;,eventId:&quot;a3b43584-3ceb-4760-9c01-699d635f4461&quot;,type:&quot;null&quot;,sourceArea:&quot;null&quot;,effectiveStartDate:&quot;null&quot;,publishedAt:&quot;2020-05-31 08:42:39&quot;,publishBy:&quot;SFAPI&quot;,publishServer:&quot;serverip&quot;,externalAllowed:false,filterParameters:&#123;&#123;companyId=customerId, userId=SFAPI, type=null, sourceArea=null, effectiveStartDate=null, publishedAt=1590914553205, publishedBy=SFAPI, externalAllowed=false, publishServer=serverip, priority=0, proxyId=null, serverName=null, topic=com.company.platform.mobile.deactivateuser, ptpName=null&#125;&#125;&#125;,body:&#123;&quot;companyId&quot;: &quot;customerId&quot;, &quot;inactiveUserId&quot;: [&quot;E_UUU_21934&quot;,&quot;E_UUU_21935&quot;]&#125;&#125; sent to https://domain/api/deactivate, (HTTP/1.1 200 OK)</span><br><span class="line"></span><br><span class="line">提取目标：publishedAt, publishedAt of filterParameters, inactiveUserId</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="comment"># 拿到 csv 的 _raw 列数据</span></span><br><span class="line">context = []</span><br><span class="line">rows = []</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;dump_csv.csv&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">   contexts = csv.reader(csvfile)</span><br><span class="line">   <span class="comment"># 使用 reader = csv.DictReader(csvfile) 的话可以使用 column name 取值</span></span><br><span class="line">   <span class="comment"># 例如: reader[&#x27;companyId&#x27;], 不过缺点是要在 with loop 中处理完数据</span></span><br><span class="line">   rows = [row[<span class="number">16</span>] <span class="keyword">for</span> row <span class="keyword">in</span> contexts]</span><br><span class="line">   rows = [<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析 _raw 数据特性，决定使用正则匹配数据</span></span><br><span class="line"><span class="comment"># publishedAt:&quot;(.*?)&quot; 加 ? 表示 非贪婪</span></span><br><span class="line"><span class="comment"># publishedAt=(\d+)</span></span><br><span class="line"><span class="comment"># inactiveUserId&quot;: (\[.*?\])</span></span><br><span class="line"><span class="comment"># 以上表达式取 group 1 数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># re.findAll</span></span><br><span class="line"><span class="comment"># re.match() 从开头开始匹配</span></span><br><span class="line"><span class="comment"># re.search(reg, src) 匹配任意位置</span></span><br><span class="line"></span><br><span class="line">reg1 = <span class="string">&#x27;publishedAt:&quot;(.*?)&quot;&#x27;</span></span><br><span class="line">reg2 = <span class="string">&#x27;publishedAt=(\d+)&#x27;</span></span><br><span class="line">reg3 = <span class="string">&#x27;inactiveUserId&quot;: (\[.*?\])&#x27;</span></span><br><span class="line"></span><br><span class="line">rowlist = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    infolist = []</span><br><span class="line">    timestr01 = re.search(reg1, row).group(<span class="number">1</span>)</span><br><span class="line">    d1 = datetime.strptime(timestr01, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    infolist.append(d1)</span><br><span class="line"></span><br><span class="line">    timestr2 = int(re.search(reg2, row).group(<span class="number">1</span>))</span><br><span class="line">    d2 = datetime.fromtimestamp(timestr2/<span class="number">1000.0</span>)</span><br><span class="line">    infolist.append(d2)</span><br><span class="line"></span><br><span class="line">    users = re.search(reg3, row).group(<span class="number">1</span>)</span><br><span class="line">    ulist = eval(users) <span class="comment"># string 转化为 list</span></span><br><span class="line">    infolist.append(ulist)</span><br><span class="line">    rowlist.append(infolist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把数据根据时间先后排序</span></span><br><span class="line">sortedList = sorted(rowlist, key=<span class="keyword">lambda</span> sub: sub[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printList</span>(<span class="params">line</span>):</span></span><br><span class="line">    formatStr01 = <span class="string">&#x27;%y-%m-%d %H:%M:%S&#x27;</span></span><br><span class="line">    print(line[<span class="number">0</span>].strftime(formatStr01), end=<span class="string">&#x27; | &#x27;</span>)</span><br><span class="line">    print(<span class="string">&quot;%15f&quot;</span> % (line[<span class="number">1</span>].timestamp()), end=<span class="string">&#x27; | &#x27;</span>)</span><br><span class="line">    arrStr = str(line[<span class="number">2</span>][:<span class="number">5</span>]) + <span class="string">&quot;...&quot;</span> + str(len(line[<span class="number">2</span>])) <span class="keyword">if</span> len(line[<span class="number">2</span>]) &gt; <span class="number">5</span> <span class="keyword">else</span> str(line[<span class="number">2</span>])</span><br><span class="line">    print(arrStr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sub <span class="keyword">in</span> sortedList:</span><br><span class="line">    printList(sub)</span><br></pre></td></tr></table></figure>

<h2 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h2><p><strong>2021-06-09</strong> python+csv &amp; shell 出问题了</p>
<p>Scenraio: 自动化脚本实现批量创建 Jira ticket</p>
<p>Issue desc: python + csv lib 组织一个数据源文件，之后使用 shell 读取，但是数据读取后，format 出问题了，会在末尾包含一个换行</p>
<p>Reproduce:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;eggs.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    spamwriter = csv.writer(csvfile)</span><br><span class="line">    spamwriter.writerow([<span class="string">&#x27;Spam&#x27;</span>, <span class="string">&#x27;Baked Beans&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>使用 cat 或者 sed 查看，可以看到末尾包含一个 <code>\r</code> 换行符号</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat -v eggs.csv </span><br><span class="line"><span class="comment"># Spam,Baked Beans^M</span></span><br><span class="line">sed -n <span class="string">&#x27;l&#x27;</span> eggs.csv                                                      </span><br><span class="line"><span class="comment"># Spam,Baked Beans\r$</span></span><br></pre></td></tr></table></figure>

<p>在 sh 脚本中我会解析这个 csv 文件并使用解析得到的内容作为后续操作的输入.</p>
<p>重现的脚本中，我们拿到解析的 csv 内容并打印出来。打印内容分别加了前后坠便于观察。可以看到第二个 echo 的后缀打印会出问题</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat reproduce.sh </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> IFS=<span class="string">&#x27;,&#x27;</span> <span class="built_in">read</span> -r col1 col2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> --<span class="variable">$col1</span>---</span><br><span class="line">  <span class="built_in">echo</span> --<span class="variable">$col2</span>---</span><br><span class="line"><span class="keyword">done</span> &lt; eggs.csv</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Finish reproduce script...&quot;</span></span><br><span class="line"></span><br><span class="line">./reproduce.sh</span><br><span class="line"><span class="comment"># --Spam---</span></span><br><span class="line"><span class="comment"># ---aked Beans</span></span><br><span class="line"><span class="comment"># Finish reproduce script...</span></span><br></pre></td></tr></table></figure>

<p>将 <code>echo --$col2---</code> 换成 <code>echo &quot;--$col2---&quot; | sed -n &#39;l&#39;</code> 之后再次运行 reproduce.sh 输出如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./reproduce.sh</span><br><span class="line"><span class="comment"># --Spam---</span></span><br><span class="line"><span class="comment"># --Baked Beans\r---$</span></span><br><span class="line"><span class="comment"># Finish reproduce script...</span></span><br></pre></td></tr></table></figure>

<p>回头细想了一下 <code>read -r</code> 是不会读取结尾没有换行的行的，在这个例子中 <code>\r---</code> 已经是下一行了，而且没有换行，自动跳过了（；￣ェ￣）</p>
<p>Solution: 我的解决方案是，不用 python 的 csv write 方法，直接把解析的过程用基础的 <code>file.write()</code> 完成，一行写完自己写 <code>\n</code> 做换行即可</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>csv</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 操作 json</title>
    <url>/hexo/2021/04/28/Python-with-json/</url>
    <content><![CDATA[<h2 id="基操"><a href="#基操" class="headerlink" title="基操"></a>基操</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 从 string 加载</span></span><br><span class="line">person = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;Bob&quot;, &quot;languages&quot;: [&quot;English&quot;, &quot;Fench&quot;]&#125;&#x27;</span></span><br><span class="line">person_dict = json.loads(person)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 从文件加载</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;path_to_file/person.json&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### json 转 string</span></span><br><span class="line">person_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;age&#x27;</span>: <span class="number">12</span>,</span><br><span class="line"><span class="string">&#x27;children&#x27;</span>: <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line">person_json = json.dumps(person_dict)</span><br><span class="line"><span class="comment"># Output: &#123;&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 12, &quot;children&quot;: null&#125;</span></span><br><span class="line"></span><br><span class="line">person_dict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line"><span class="string">&quot;languages&quot;</span>: [<span class="string">&quot;English&quot;</span>, <span class="string">&quot;Fench&quot;</span>],</span><br><span class="line"><span class="string">&quot;married&quot;</span>: <span class="literal">True</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span>: <span class="number">32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#### json 写入文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;person.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">    json.dump(person_dict, json_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 格式化输出</span></span><br><span class="line">person_string = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;Bob&quot;, &quot;languages&quot;: &quot;English&quot;, &quot;numbers&quot;: [2, 1.6, null]&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Getting dictionary</span></span><br><span class="line">person_dict = json.loads(person_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pretty Printing JSON string back</span></span><br><span class="line">print(json.dumps(person_dict, indent = <span class="number">4</span>, sort_keys=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Cucumber 弹射起步</title>
    <url>/hexo/2021/05/11/Quick-start-cucumber/</url>
    <content><![CDATA[<h2 id="Scenario-Outline"><a href="#Scenario-Outline" class="headerlink" title="Scenario Outline"></a>Scenario Outline</h2><p>通过这个关键字，我们可以进行一组数据的测试，共能上类似于 TestNG 的 dataProvider</p>
<p>Scenario Outline 需要和 Examples 搭配使用，写了前者，IDEA 会给提示的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Feature: user creation related tests</span><br><span class="line"></span><br><span class="line">  Scenario Outline: Negative scenario, create user should be fail if field miss in body</span><br><span class="line">    When call REST API to create user and field miss &lt;fieldName&gt; in body</span><br><span class="line">    Then user should create failure, err msg contains &lt;fieldInMsg&gt; show in response</span><br><span class="line">    Examples:</span><br><span class="line">      | fieldName           | fieldInMsg           |</span><br><span class="line">      | provisionerId       | Provisioner ID       |</span><br><span class="line">      | provisionerName     | Provisioner name     |</span><br><span class="line">      | provisionerPassword | Provisioner password |</span><br><span class="line">      | provisionerEmail    | Provisioner email    |</span><br></pre></td></tr></table></figure>

<p>对应的 Java 代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateUserImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@When(&quot;call REST API to create user and field miss &#123;&#125; in body&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callRESTAPIToCreateProvisionerAndFieldMissFieldNameInBody</span><span class="params">(String fieldName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;fileName: &quot;</span> + fieldName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Then(&quot;user should create failure, err msg contains &#123;&#125; show in response&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">provisionerShouldCreateFailureErrMsgContainsFieldInMsgShowInResponse</span><span class="params">(String fieldInMsg)</span> </span>&#123;</span><br><span class="line">        String errMsg = fieldInMsg + <span class="string">&quot;can not be null.&quot;</span>;</span><br><span class="line">        System.out.println(errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个 scenario 会运行 4 遍，每一行测试一次</p>
<h2 id="DataTable"><a href="#DataTable" class="headerlink" title="DataTable"></a>DataTable</h2><p>和上面的概念很类似的还有一个叫 DataTable 的概念，他的作用是在一个 Step 中创建多组数据</p>
<p>格式上的区别：DataTable 是不需要 table header 的， 而且不需要 Examples 关键字，在 annotation 里面也不需要占位符</p>
<figure class="highlight feature"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Scenario</span>: Show my fruits</span><br><span class="line">    <span class="keyword">When</span> I have kinds of fruits</span><br><span class="line">        |<span class="string"> Apple     </span>|</span><br><span class="line">        |<span class="string"> Banana    </span>|</span><br><span class="line">    <span class="keyword">Then</span> show them</span><br></pre></td></tr></table></figure>

<p>java 实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@When(&quot;I have kinds of fruits&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">iHaveKindsOfFruits</span><span class="params">(DataTable dataTable)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = dataTable.asList();</span><br><span class="line">    System.out.println(Arrays.toString(list.toArray()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Then(&quot;show them&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showThem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>弹射起步</category>
      </categories>
      <tags>
        <tag>cucumber</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis + Docker 搭建方案</title>
    <url>/hexo/2022/01/24/Redis-Docker/</url>
    <content><![CDATA[<p>通过 Redis 搭建 docker 实验环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建容器</span></span><br><span class="line">docker run -itd --name redis-test -p 6379:6379 redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis-test /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启客户端</span></span><br><span class="line">redis-cli</span><br><span class="line"><span class="comment"># 启动远程客户端</span></span><br><span class="line"><span class="comment"># redis-cli -h host -p port -a password</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">ping</span><br><span class="line"><span class="comment"># PONG</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认有 16 个数据库，默认用第 0 个</span></span><br><span class="line">select 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前库下所有的键</span></span><br><span class="line">keys *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空当前 DB</span></span><br><span class="line">flushdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有数据库，危</span></span><br><span class="line">flushall</span><br></pre></td></tr></table></figure>

<h3 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h3><p>清空的时候抛错，我估计是我的 docker redis 没有配置本地存储信息，并不能进行本地化相关操作，创建的时候挂在到本地可能就行了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flushdb </span><br><span class="line">(error) MISCONF Redis is configured to save RDB snapshots, but it is currently not able to persist on disk. Commands that may modify the data <span class="built_in">set</span> are disabled, because this instance is configured to report errors during writes <span class="keyword">if</span> RDB snapshotting fails (stop-writes-on-bgsave-error option). Please check the Redis logs <span class="keyword">for</span> details about the RDB error.</span><br></pre></td></tr></table></figure>

<p>猜测失败，是配置问题，关闭了快找功能，导致保存失败，可以在客户端使用 <code>config set stop-writes-on-bgsave-error no</code> 解决问题</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单个值最大能存储 512M</span></span><br><span class="line"><span class="built_in">set</span> name <span class="string">&quot;Jack&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿值</span></span><br><span class="line">get name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看类型</span></span><br><span class="line"><span class="built_in">type</span> name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储 hash</span></span><br><span class="line">HMSET runoob field1 <span class="string">&quot;Hello&quot;</span> field2 <span class="string">&quot;World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hash 取值</span></span><br><span class="line">HGET runoob field1</span><br><span class="line"><span class="comment">#&quot;Hello&quot;</span></span><br><span class="line">HGET runoob field2</span><br><span class="line"><span class="comment">#&quot;World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list 列表，左序存入</span></span><br><span class="line">lpush runoob redis</span><br><span class="line">lpush runoob mongodb</span><br><span class="line">lpush runoob rabbitmq</span><br><span class="line"></span><br><span class="line">lrange runoob 0 10</span><br><span class="line"><span class="comment"># 1) &quot;rabbitmq&quot;</span></span><br><span class="line"><span class="comment"># 2) &quot;mongodb&quot;</span></span><br><span class="line"><span class="comment"># 3) &quot;redis&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看列表大小</span></span><br><span class="line">llen runoob</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set 无序集合</span></span><br><span class="line">sadd members jack</span><br><span class="line">sadd members tom</span><br><span class="line">sadd members tom</span><br><span class="line">smembers members</span><br><span class="line"><span class="comment"># 1) &quot;tom&quot;</span></span><br><span class="line"><span class="comment"># 2) &quot;jack&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看大小</span></span><br><span class="line">scard members</span><br><span class="line"></span><br><span class="line"><span class="comment"># zset 有序集合</span></span><br><span class="line">zadd dbs 0  mongodb</span><br><span class="line">zadd dbs 0  redis</span><br><span class="line">zadd dbs 0  rabit</span><br><span class="line"></span><br><span class="line">ZRANGEBYSCORE dbs 0 10000</span><br><span class="line"><span class="comment"># 1) &quot;mongodb&quot;</span></span><br><span class="line"><span class="comment"># 2) &quot;rabit&quot;</span></span><br><span class="line"><span class="comment"># 3) &quot;redis&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看大小</span></span><br><span class="line">zcard dbs</span><br></pre></td></tr></table></figure>

<h2 id="Using-Redis-in-Python"><a href="#Using-Redis-in-Python" class="headerlink" title="Using Redis in Python"></a>Using Redis in Python</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">pip install redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># ipython 操作</span></span><br><span class="line">import redis</span><br><span class="line">r = redis.StrictRedis(host=<span class="string">&#x27;localhost&#x27;</span>, port=6379, db=0)</span><br><span class="line">r.set(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r[<span class="string">&#x27;foo&#x27;</span>])</span><br><span class="line"><span class="comment"># b&#x27;bar&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r.get(<span class="string">&#x27;foo&#x27;</span>)))</span><br><span class="line"><span class="comment"># &lt;class &#x27;bytes&#x27;&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 弹射起步</title>
    <url>/hexo/2021/04/30/Redis-quick-start/</url>
    <content><![CDATA[<h2 id="Nosql-概述"><a href="#Nosql-概述" class="headerlink" title="Nosql 概述"></a>Nosql 概述</h2><blockquote>
<p>单机数据库：</p>
</blockquote>
<ol>
<li>数据量如果太大，一个机器放不下</li>
<li>数据的索引，一个机器内存放不下</li>
<li>访问量，一个服务器承受不了</li>
</ol>
<blockquote>
<p>Memcached(缓存) + MySQL+ 垂直拆分</p>
</blockquote>
<p>网站 80% 的情况都是在读数据，每次都查 DB 就十分慢，采用缓存保证效率</p>
<p>发展过程：优化数据结构和索引 -&gt; 文件缓存(IO) -&gt; Memcached</p>
<blockquote>
<p>分库分表 + 水平拆分 + MySQL 集群</p>
</blockquote>
<ul>
<li>ISAM：早期，表锁，效率低</li>
<li>Innodb: 行所</li>
</ul>
<blockquote>
<p>如今，数据量大，变化快，MySQL 不太适用这种场景了</p>
</blockquote>
<p>MySQL 也不适合存储比较大的文件，博客，图片。表大，效率低，需要专门的数据库</p>
<blockquote>
<p>为什么用 NoSQL</p>
</blockquote>
<p>用户信息爆发式增长，NoSQL 可以解决上面的问题</p>
<p>NoSQL = Not Only SQL</p>
<p>关系型数据库 = 表 + 行 + 列</p>
<p>泛指非关系型数据库，随着 web2.0 互联网的诞生，传统的关系型数据库很难对付，尤其是超大规模的高并发社区。</p>
<p>很多数据类型，比如个人信息，社交网络，地理位置不需要一个固定格式，不需要过多操作就能横向操作</p>
<blockquote>
<p>特点</p>
</blockquote>
<ol>
<li>方便扩展</li>
<li>大数据量高性能 (redis 写 8w/s, 读 11w/s, NoSQL 的缓存记录级，是一种细粒度的缓存，性能会比较高)</li>
<li>数据类型是多样型的(不需要事先设计数据库)</li>
</ol>
<blockquote>
<p>RDBMS Vs NoSQL</p>
</blockquote>
<p>RDBMS</p>
<ul>
<li>结构化组织(表/列)</li>
<li>SQL</li>
<li>数据和关系都存在单独的表中</li>
<li>数据操作语言，数据定义语言(DSL, DML)</li>
<li>严格的一致性</li>
</ul>
<p>NoSQL</p>
<ul>
<li>不仅仅是SQL</li>
<li>没有固定的查询语言</li>
<li>存储类型多样(键值，文档，列存储，图形数据-社交关系)</li>
<li>最终一致性</li>
<li>CAP定理和BASE 异地多活</li>
<li>高性能，高可用，高可扩</li>
</ul>
<blockquote>
<p>3v + 3高</p>
</blockquote>
<p>3v: 主要描述问题</p>
<ol>
<li>海量Volume</li>
<li>多样Variety</li>
<li>实时Velocity</li>
</ol>
<p>3 高:</p>
<ol>
<li>高并发</li>
<li>高可扩</li>
<li>高性能</li>
</ol>
<p>真实情况：NoSQL + RDBMS</p>
<h2 id="典型电商网站分析"><a href="#典型电商网站分析" class="headerlink" title="典型电商网站分析"></a>典型电商网站分析</h2><ol>
<li>商品基本信息，名称，价格，商家信息，存关系型数据库</li>
<li>商品描述，评论(文字较多) MongoDB</li>
<li>图片，分布式文件系统 FastDFS, 淘宝 TFS，Google GFS， Hadoop HDFD, 阿里云 OSS</li>
<li>商品关键字，搜索，solr, ES, ISearch</li>
<li>商品热门的波段信息，内存数据库，Redis, Tair, Memcache</li>
<li>商品交易 - 第三方接口</li>
</ol>
<h2 id="NoSQL-四大分类"><a href="#NoSQL-四大分类" class="headerlink" title="NoSQL 四大分类"></a>NoSQL 四大分类</h2><p>KV键值对:</p>
<ul>
<li>新浪： Redis</li>
<li>美团：Redis + Tair</li>
<li>阿里，百度：Redis + memocache</li>
</ul>
<p>文档型数据库(bson)</p>
<ul>
<li>MongoDB(一般需要掌握)<ul>
<li>MongoDB 是一个给予分布式文件存储的数据库，C++ 编写，主要用来处理大量文档</li>
<li>MongoDB 是一个介于关系型数据库和非关系型数据库的中间产品</li>
</ul>
</li>
</ul>
<p>列存储数据库：</p>
<ul>
<li>HBase</li>
<li>分布式文件系统</li>
</ul>
<p>图关系数据库：</p>
<ul>
<li>社交网络</li>
<li>Neo4j</li>
</ul>
<h2 id="Redis-入门"><a href="#Redis-入门" class="headerlink" title="Redis 入门"></a>Redis 入门</h2><p>Remote Dictionary Server: c，基于内存，可持久化， KV，多语言 API</p>
<blockquote>
<p>能干嘛</p>
</blockquote>
<ol>
<li>内存存储，可持久化(RDB, AOF)</li>
<li>效率高，可高速缓存</li>
<li>发布订阅系统</li>
<li>地图信息分析</li>
<li>计数器 - 订阅量，计时器</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>CentOS:</p>
<ol>
<li>下载 redis 安装包 redis.xx.tar.gz</li>
<li>放到 /opt 下， <code>tar -zxcf redis.xx.tar.gz</code>, 加压后的文件包含配置文件 redis.conf</li>
<li>cd 到加压文件下 yum install gcc-c++ 安装 gcc</li>
<li>make 编译程序 + make install</li>
<li>redis 默认安装路径 /usr/local/bin</li>
<li>redis 配置文件 copy 到安装目录下  <code>mkdir myconfig</code> + <code>cp /opt/redis-6.0.6/redis.conf .</code></li>
<li>redis 默认不是后台启动，修改一下 <code>daemonize yes</code></li>
<li><code>redis-server myconfig/redis.config</code> 运行</li>
</ol>
<p>PS: 6.0.6 版本的 redis 自带配置文件了。。。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">make install</span><br><span class="line">cd src &amp;&amp; make install</span><br><span class="line">make[1]: Entering directory `/opt/redis-6.0.6/src&#x27;</span><br><span class="line"></span><br><span class="line">Hint: It&#x27;s a good idea to run &#x27;make test&#x27; ;)</span><br><span class="line"></span><br><span class="line">    INSTALL install</span><br><span class="line">    INSTALL install</span><br><span class="line">    INSTALL install</span><br><span class="line">    INSTALL install</span><br><span class="line">    INSTALL install</span><br><span class="line">make[1]: Leaving directory `/opt/redis-6.0.6/src&#x27;</span><br><span class="line"></span><br><span class="line"># 启动提示</span><br><span class="line">redis-server redis.conf</span><br><span class="line">9841:C 30 Apr 2021 22:15:30.703 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">9841:C 30 Apr 2021 22:15:30.703 # Redis version=6.0.6, bits=64, commit=00000000, modified=0, pid=9841, just started</span><br><span class="line">9841:C 30 Apr 2021 22:15:30.703 # Configuration loaded</span><br><span class="line"></span><br><span class="line">redis-cli -p 6379   # 客户端链接测试</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; set name jack</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;jack&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">127.0.0.1:6379&gt; shutdown    # 推出</span><br><span class="line">not connected&gt; exit</span><br><span class="line">[root@iZuf6jaqcwqwkqvydc5mscZ bin]# ps -ef | grep redis</span><br><span class="line">root      9850  5506  0 22:19 pts/0    00:00:00 grep --color=auto redis</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>PS: centos 默认的 gcc 版本是 4.8.5 在编译 redis 时会报错，需要升级到 5.3 以上才行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gcv -v <span class="comment"># 查看版本</span></span><br><span class="line"></span><br><span class="line">make distclean <span class="comment"># 清除编译生成的文件</span></span><br><span class="line"></span><br><span class="line">yum -y install centos-release-scl   <span class="comment"># 安装新版本 gcc</span></span><br><span class="line">yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要注意的是scl命令启用只是临时的，退出shell或重新打开一个shell就会恢复原系统gcc版本</span></span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-9 bash</span><br><span class="line">gcc -v</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行以下命令永久使用</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="comment"># 注：执行完此命令后，其它的shell窗口需要关闭重新打开才生效。</span></span><br><span class="line"><span class="comment"># 重新打开shell窗口，再次编译</span></span><br></pre></td></tr></table></figure>

<h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>自带的性能测试工具 redis-benchmark</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试 100 个并发，每个并发 100 000 个请求</span></span><br><span class="line">redis-benchmark -h localhost -p 6379 -c 100 -n 100000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ====== SET ======</span></span><br><span class="line"><span class="comment">#   100000 requests completed in 1.44 seconds         # 100 000 个请求 1.44 秒完成</span></span><br><span class="line"><span class="comment">#   100 parallel clients                              # 100 个并发 </span></span><br><span class="line"><span class="comment">#   3 bytes payload</span></span><br><span class="line"><span class="comment">#   keep alive: 1</span></span><br><span class="line"><span class="comment">#   host configuration &quot;save&quot;: 900 1 300 10 60 10000</span></span><br><span class="line"><span class="comment">#   host configuration &quot;appendonly&quot;: no</span></span><br><span class="line"><span class="comment">#   multi-thread: no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 49.47% &lt;= 1 milliseconds</span></span><br><span class="line"><span class="comment"># 99.96% &lt;= 2 milliseconds</span></span><br><span class="line"><span class="comment"># 100.00% &lt;= 2 milliseconds</span></span><br><span class="line"><span class="comment"># 69492.70 requests per second</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>redis 默认有 16 个数据库(redis.conf - databases 16), 默认用第一个，可以通过 <code>select n</code> 修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; dbsize  # 查看大小</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; select 3 # 换数据库</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; dbsize</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; keys *    # 查看已有的 key</span><br><span class="line">1) &quot;mylist:&#123;tag&#125;&quot;</span><br><span class="line">2) &quot;key:&#123;tag&#125;:__rand_int__&quot;</span><br><span class="line">3) &quot;myhash:&#123;tag&#125;:__rand_int__&quot;</span><br><span class="line">4) &quot;counter:&#123;tag&#125;:__rand_int__&quot;</span><br><span class="line">5) &quot;name&quot;</span><br><span class="line">127.0.0.1:6379&gt; flushdb   # 清空数据库</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379[1]&gt; flushall # 清空所有数据库</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p>PS: 八卦，为什么端口时 6379 - 作者追星</p>
<blockquote>
<p>Redis 时单线程的！</p>
</blockquote>
<p>Redis 基于内存操作， CPU 不是瓶颈，瓶颈在内存和带宽</p>
<p>Redis 为 C 语言开发， 10w+ QPS, 完全不比 Memecache 差</p>
<blockquote>
<p>Redis 为什么单线程还这么快？</p>
</blockquote>
<ol>
<li>误区：高性能的服务器一定是多线程？</li>
<li>误区：多线程一定比单线程效率高</li>
</ol>
<p>核心：redis 是将所有数据全部存放在内存中的，省去了上下文切换的时间</p>
<h2 id="Redis-key"><a href="#Redis-key" class="headerlink" title="Redis-key"></a>Redis-key</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exists name <span class="comment"># 判断是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; move name 1 <span class="comment"># 移除 key</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name jack</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; expire name 10  <span class="comment"># 设置过期时间, 单位s</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name      <span class="comment"># 查看 key 剩余时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> name   <span class="comment"># 查看类型</span></span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; append key <span class="string">&quot;hello&quot;</span>  <span class="comment"># 追加，如果不存在则新加</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; get key</span><br><span class="line"><span class="string">&quot;v1hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; strlen key  <span class="comment"># 给出字符串长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; append key <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> views 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr views  <span class="comment"># +1 操作</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; decr views <span class="comment"># -1 操作</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; decr views</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt; incrby views 10 <span class="comment"># +10</span></span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; decrby views 4 <span class="comment"># -4</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line"></span><br><span class="line"><span class="comment">### 字符串操作</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key <span class="string">&quot;hello,jack&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; getrange key 0 3  <span class="comment"># sub string </span></span><br><span class="line"><span class="string">&quot;hell&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getrange key 0 -1 <span class="comment"># 取全部字符串</span></span><br><span class="line"><span class="string">&quot;hello,jack&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 替换</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key2 asdfghj</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; setrange key2 1 xx  <span class="comment"># 从第 n 位开始替换</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;axxfghj&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># setex - set with expire </span></span><br><span class="line"><span class="comment"># setnx - set if not exist</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; setex key3 30 hello <span class="comment"># 添加并设置过期时间</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl key3</span><br><span class="line">(<span class="built_in">integer</span>) 27</span><br><span class="line">127.0.0.1:6379&gt; setnx key4 redis    <span class="comment"># 如果不存在就添加，否则失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;key&quot;</span></span><br><span class="line">2) <span class="string">&quot;key4&quot;</span></span><br><span class="line">3) <span class="string">&quot;key2&quot;</span></span><br><span class="line">4) <span class="string">&quot;key3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setnx key4 redis2</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get key4</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;key&quot;</span></span><br><span class="line">2) <span class="string">&quot;key4&quot;</span></span><br><span class="line">3) <span class="string">&quot;key2&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 批量操作</span></span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k1&quot;</span></span><br><span class="line">3) <span class="string">&quot;k2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3</span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 v1 k4 v4  <span class="comment"># 由于是原子操作，所以 k4 没有加成功</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k1&quot;</span></span><br><span class="line">3) <span class="string">&quot;k2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 对象转化</span></span><br><span class="line"><span class="comment"># 需要保存一个 user: &#123;id:1, name:zhangsan, age:2&#125; 对象时，可以这么做</span></span><br><span class="line"><span class="comment"># user:&#123;id&#125;:&#123;field&#125;</span></span><br><span class="line">127.0.0.1:6379&gt; mset user:1:name zhangsan user:1:age 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## getset 先 get 再 set</span></span><br><span class="line">127.0.0.1:6379&gt; getset db redis <span class="comment"># 如果不存在 返回 nil</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getset db mongodb <span class="comment"># 如果存在，获取并更新</span></span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">&quot;mongodb&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>弹射起步</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Regex test in terminal</title>
    <url>/hexo/2021/05/11/Regex-test-in-terminal/</url>
    <content><![CDATA[<p>终端如何测试一个正则表达式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;aaabbbccc&#x27;</span> | grep -E bc       <span class="comment"># bc 会被标红</span></span><br><span class="line"><span class="comment"># aaabbbccc</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;aaabbbccc&#x27;</span> | grep -E -o bc    <span class="comment"># 只输出匹配的字段</span></span><br><span class="line"><span class="comment"># bc</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;a1b a2b acb&#x27;</span> | grep -E -o <span class="string">&#x27;a[^0-9]b&#x27;</span>      <span class="comment"># 当方括号中有 ^ 时，表示除外的意思</span></span><br><span class="line"><span class="comment"># acb</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;a1b a2b acb&#x27;</span> | grep -G <span class="string">&#x27;a\w+&#x27;</span>     <span class="comment"># 使用 basic regex 匹配的时候没有适配的结果</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;a1b a2b acb&#x27;</span> | grep -G <span class="string">&#x27;a\w\+&#x27;</span>    <span class="comment"># 需要在 &#x27;+&#x27; 的前面也添加转义符才能生效</span></span><br></pre></td></tr></table></figure>

<h2 id="BRE-ERE"><a href="#BRE-ERE" class="headerlink" title="BRE ERE"></a>BRE ERE</h2><p><code>man grep</code> 可以看到它支持的一些可选正则模式, 这几种模式有什么区别？</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">-E, --extended-regexp     PATTERN is an extended regular expression (ERE)</span><br><span class="line">-G, --basic-regexp        PATTERN is a basic regular expression (BRE)</span><br><span class="line">-P, --perl-regexp         PATTERN is a Perl regular expression</span><br><span class="line">-e, --regexp=PATTERN      use PATTERN for matching</span><br></pre></td></tr></table></figure>

<blockquote>
<p>In GNU sed, the only difference between basic and extended regular expressions is in the behavior of a few special characters: ‘?’, ‘+’, parentheses(‘()’), braces(‘{}’), and ‘|’.</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Type</th>
<th align="center">Desc</th>
</tr>
</thead>
<tbody><tr>
<td align="center">BRE</td>
<td align="center">character like () {} + ? | need use escape character</td>
</tr>
<tr>
<td align="center">ERE</td>
<td align="center">no need to use escape caharcter before + ? ( ) { } |</td>
</tr>
<tr>
<td align="center">PRE</td>
<td align="center">same as ERE, and add other func</td>
</tr>
</tbody></table>
<p>BRE、ERE可以使用 POSIX 字符集来操作</p>
<p>使用支持<br>grep<br>支持BRE,通过参数控制,默认BRE, -P开启PRE, -E开启ERE</p>
<p>sed<br>支持BRE,默认BRE,-r开启ERE</p>
<p>awk<br>支持ERE,默认ERE。</p>
<h2 id="其他一些知识点"><a href="#其他一些知识点" class="headerlink" title="其他一些知识点"></a>其他一些知识点</h2><p>元字符(Metacharacter), 指SHELL直译器或正则表达式（regex）引擎等计算机程序中具有特殊意义的字符。</p>
<p>在 POSIX 扩展正则表达式里,定义了14个元字符,它们被作为一般的字符使用时,必须要通过 “转义”（前面加一个反斜杠”&quot;）来去除他们本身的特殊意义,这些元字符包括：</p>
<p>开和闭方括号：”[“和”]”<br>反斜线：”&quot;<br>脱字符：”^”<br>美元符号：”$”<br>句号/点：”.”<br>竖线/管道符：”|”<br>问号：”?”<br>星号：”*”<br>加号：”+”<br>开和闭 花括号：”{“和”}”<br>开和闭 小括号：”(“和”)”</p>
]]></content>
      <categories>
        <category>regex</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>零宽断言</title>
    <url>/hexo/2021/04/28/Regex-zero-length-assertion/</url>
    <content><![CDATA[<h2 id="Positive-Lookahead-零宽度正预测先行断言-匹配以-xx-结尾的-XX"><a href="#Positive-Lookahead-零宽度正预测先行断言-匹配以-xx-结尾的-XX" class="headerlink" title="Positive Lookahead, 零宽度正预测先行断言: 匹配以 xx 结尾的, (?=XX)"></a>Positive Lookahead, 零宽度正预测先行断言: 匹配以 xx 结尾的, (?=XX)</h2><p>特性： 这个断言是从右边开始匹配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">e.g.01 </span><br><span class="line">use .*(?&#x3D;ing) as pattern to match &#39;cooking, doing&#39; </span><br><span class="line">matched: &#39;cooking, do&#39;</span><br><span class="line"></span><br><span class="line">e.g.02</span><br><span class="line">use [a-z]*(?&#x3D;ing) as pattern to match &#39;cooking, doing, singing&#39; </span><br><span class="line">matched: &#39;cook, do, sing&#39;</span><br></pre></td></tr></table></figure>

<h2 id="Negtive-Lookahead-负向零宽先行断言-匹配不以-xx-结尾的-XX"><a href="#Negtive-Lookahead-负向零宽先行断言-匹配不以-xx-结尾的-XX" class="headerlink" title="Negtive Lookahead, 负向零宽先行断言: 匹配不以 xx 结尾的, (?!XX)"></a>Negtive Lookahead, 负向零宽先行断言: 匹配不以 xx 结尾的, (?!XX)</h2><p>特性： 这个断言是从右边开始匹配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">e.g.01 </span><br><span class="line">pattern: yolo(?!lo)</span><br><span class="line">matched: yolo yololo yolo</span><br><span class="line">result: 匹配到第一个 yolo 和最后一个 yolo</span><br><span class="line">refer: https:&#x2F;&#x2F;regex101.com&#x2F;r&#x2F;UyC8Z1&#x2F;1&#x2F;</span><br><span class="line"></span><br><span class="line">感觉上零宽断言适合做 词 这个level 的 match, 普通的 regex 经常会带进来空格</span><br></pre></td></tr></table></figure>

<h2 id="Positive-Lookbehind-负向零宽先行断言-匹配以-xx-开始的-lt-XX"><a href="#Positive-Lookbehind-负向零宽先行断言-匹配以-xx-开始的-lt-XX" class="headerlink" title="Positive Lookbehind, 负向零宽先行断言: 匹配以 xx 开始的, (?&lt;=XX)"></a>Positive Lookbehind, 负向零宽先行断言: 匹配以 xx 开始的, (?&lt;=XX)</h2><p>特性： 这个断言是从左边开始匹配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">e.g.01 </span><br><span class="line">use (?&lt;&#x3D;abc).* to match abcdefgabc</span><br><span class="line">result: defgabc, not abcdefg</span><br></pre></td></tr></table></figure>

<h2 id="Negative-Lookbehind-负向零宽先行断言-匹配不以-xx-开始的-lt-XX"><a href="#Negative-Lookbehind-负向零宽先行断言-匹配不以-xx-开始的-lt-XX" class="headerlink" title="Negative Lookbehind, 负向零宽先行断言: 匹配不以 xx 开始的, (?&lt;!XX)"></a>Negative Lookbehind, 负向零宽先行断言: 匹配不以 xx 开始的, (?&lt;!XX)</h2><p>特性： 这个断言是从左边开始匹配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">e.g.01</span><br><span class="line">use (?&lt;!yo)lol to match lol yolol</span><br><span class="line">result: the first lol on left</span><br></pre></td></tr></table></figure>

<h2 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h2><ul>
<li><a href="https://regex101.com/">Regex Online</a></li>
<li><a href="http://www.ibloger.net/article/31.html">Sample Blog Source, CN</a></li>
<li><a href="https://coderwall.com/p/5c7kjq/lookahead-and-lookbehind-regex">Sample Blog Source</a></li>
</ul>
]]></content>
      <categories>
        <category>regex</category>
      </categories>
      <tags>
        <tag>零宽断言</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL store procedure and function</title>
    <url>/hexo/2021/11/12/SQL-store-procedure-and-function/</url>
    <content><![CDATA[<p>看了视屏，过了一个周末，只剩一个大概的映像，其他都忘了，果然还是要实际操作一下印象才会深刻。mysql 使用 docker 版本的，参考 mysql 安装那篇教程</p>
<h2 id="数据准别"><a href="#数据准别" class="headerlink" title="数据准别"></a>数据准别</h2><p>视屏下方留言区有对应的 SQL 文件可以下载，按照上面的教程，安装完 docker 版本的 mysql 之后，默认会在 tmp 文件夹下创建共享文件。将 sql 文件复制到共享文件中，然后运行一下命令倒入数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql-test /bin/bash</span><br><span class="line"><span class="comment"># 登陆 docker 中的 mysql 终端</span></span><br><span class="line">mysql -h localhost -P 2999 -u root -p</span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line"><span class="built_in">source</span> /etc/mysql/conf.d/employees.sql</span><br><span class="line"><span class="built_in">source</span> /etc/mysql/conf.d/girls.sql</span><br></pre></td></tr></table></figure>

<h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><ul>
<li>系统变量<ul>
<li>全局变量 - 系统级别的改动，跨会话有效，重启重置</li>
<li>回话变量 - 新建回话(链接)会重置</li>
</ul>
</li>
<li>自定义变量<ul>
<li>用户变量</li>
<li>局部变量</li>
</ul>
</li>
</ul>
<p>系统变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看所有的系统变量</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> | [<span class="keyword">SESSION</span>] <span class="keyword">VARIABLES</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看满足条件的部分系统变量</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> | [<span class="keyword">session</span>] <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">&#x27;%char%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看置顶的某个系统变量的值</span></span><br><span class="line"><span class="keyword">select</span> @@<span class="keyword">global</span> | [<span class="keyword">session</span>].系统变量名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 赋值</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> | [<span class="keyword">session</span>] 系统变量名 = 值;</span><br><span class="line"><span class="keyword">set</span> @@<span class="keyword">global</span> | [<span class="keyword">session</span>] .系统变量名 = 值;</span><br></pre></td></tr></table></figure>

<p>自定义变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用方式：声明，赋值，使用</span></span><br><span class="line"><span class="comment">-- 用户变量：</span></span><br><span class="line">    <span class="comment">-- 作用域： 针对于当前会话有效，同会话变量作用域。可以放在任何地方，begin/end 内部或外部</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 声明并初始化</span></span><br><span class="line"><span class="keyword">SET</span> @VARIABLE_NAME=<span class="keyword">VALUE</span>;</span><br><span class="line"><span class="keyword">SET</span> @VARIABLE_NAME:=<span class="keyword">VALUE</span>;</span><br><span class="line"><span class="keyword">SELECT</span> @VARIABLE_NAME:=<span class="keyword">VALUE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 赋值</span></span><br><span class="line">    <span class="comment">-- 方式一，同声明</span></span><br><span class="line">    <span class="comment">-- 方式二， select into, 要求必须是**一个**值，不能是一组</span></span><br><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">into</span> 变量名 <span class="keyword">from</span> 表;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用(查看用户变量值)</span></span><br><span class="line"><span class="keyword">select</span> @VARIABLE_NAME;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- e.g.</span></span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">count</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> @<span class="keyword">count</span> <span class="keyword">from</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">count</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 局部变量，作用域：仅仅在定义他的 begin/end 内部, 并且必须为第一句话</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 声明</span></span><br><span class="line">declear 变量名 类型;</span><br><span class="line">declear 变量名 类型 default 值;</span><br><span class="line"><span class="comment">-- 赋值</span></span><br><span class="line">    <span class="comment">-- 方式一</span></span><br><span class="line">    <span class="keyword">set</span> 局部变量名=值;</span><br><span class="line">    <span class="keyword">set</span> 局部变量名:=值;</span><br><span class="line">    <span class="keyword">select</span> @局部变量名:=值;</span><br><span class="line">    <span class="comment">-- 方式二：select into</span></span><br><span class="line">    <span class="keyword">select</span> 字段 <span class="keyword">into</span> 局部变量 <span class="keyword">from</span> 表;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用</span></span><br><span class="line"><span class="keyword">select</span> 局部变量名;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">作用域</th>
<th align="left">定义和使用位置</th>
<th align="left">语法</th>
</tr>
</thead>
<tbody><tr>
<td align="left">用户变量</td>
<td align="left">当前回话</td>
<td align="left">会话中的任意位置</td>
<td align="left">必须加@，不限定类型</td>
</tr>
<tr>
<td align="left">局部变量</td>
<td align="left">begin/end中</td>
<td align="left">必须在 begin/end中，且为第一句</td>
<td align="left">一般不用@，除了 select 语句，需要限定类型</td>
</tr>
</tbody></table>
<h2 id="Store-Procedure"><a href="#Store-Procedure" class="headerlink" title="Store Procedure"></a>Store Procedure</h2><p>存储过程优点：</p>
<ul>
<li>代码重用</li>
<li>简化操作</li>
<li>预编译，减少联接次数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程(参数列表)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    存储过程体(一组合法的 <span class="keyword">SQL</span> 语句)</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<p>参数列表包含三部分：参数模式，参数名，参数类型, e.g. IN stuname VARCHAR(20)</p>
<p>参数模式：</p>
<ul>
<li>IN: 该参数作为输入</li>
<li>OUT: 该参数作为输出</li>
<li>INOUT: 该参数即作为输入又可以作为输出</li>
</ul>
<p>存储过程体如果仅含有一句话，BEGIN END 可以省略</p>
<p>存储过程体中的每条 SQL 语句的结尾要求必须加分好</p>
<p>存储过程的结尾可以使用 DELIMITER 重新设置，<code>DELIMITER 结束标志</code>: e.g. DELIMITER $</p>
<p>调用：CALL 存储过程名(实参列表);</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 空参列表</span></span><br><span class="line"><span class="comment">-- 貌似只能在终端执行</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp1()</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">ADMIN</span> (USERNAME, <span class="string">`PASSWORD`</span>)</span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">&#x27;john1&#x27;</span>, <span class="number">0000</span>), (<span class="string">&#x27;rose&#x27;</span>, <span class="number">0001</span>), (<span class="string">&#x27;jack&#x27;</span>, <span class="number">0002</span>), (<span class="string">&#x27;tom&#x27;</span>, <span class="number">0003</span>), (<span class="string">&#x27;lin&#x27;</span>, <span class="number">0004</span>);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> myp1()$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 创建带 in 模式参数的存储过程</span></span><br><span class="line"><span class="comment">-- 根据女神名查询对应的男神信息</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp2(<span class="keyword">IN</span> beautyName <span class="built_in">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">    <span class="keyword">SELECT</span> bo.*</span><br><span class="line">    <span class="keyword">FROM</span> boys bo</span><br><span class="line">    <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> beauty b <span class="keyword">ON</span> bo.id = b.boyfriend_id</span><br><span class="line">    <span class="keyword">WHERE</span> b.name = beautyName;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> myp2(<span class="string">&#x27;小昭&#x27;</span>)$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 传入双参数，验证登陆</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp4(<span class="keyword">IN</span> username <span class="built_in">VARCHAR</span>(<span class="number">20</span>), <span class="keyword">IN</span> <span class="keyword">PASSWORD</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">    <span class="keyword">DECLARE</span> <span class="keyword">result</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> <span class="keyword">result</span></span><br><span class="line">    <span class="keyword">FROM</span> <span class="keyword">admin</span></span><br><span class="line">    <span class="keyword">WHERE</span> admin.username = username</span><br><span class="line">    <span class="keyword">AND</span> admin.password = <span class="keyword">PASSWORD</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- SELECT result;</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="keyword">result</span>&gt;<span class="number">0</span>, <span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;failed&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> myp4(<span class="string">&#x27;lin&#x27;</span>, <span class="number">4</span>)$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 创建带 out 模式的存储过程</span></span><br><span class="line"><span class="comment">-- 根据女神名返回男神名</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp5(<span class="keyword">IN</span> beautyName <span class="built_in">VARCHAR</span>(<span class="number">20</span>), <span class="keyword">OUT</span> boyName <span class="built_in">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">    <span class="keyword">SELECT</span> bo.boyname <span class="keyword">INTO</span> boyName</span><br><span class="line">    <span class="keyword">FROM</span> boys bo</span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> beauty b <span class="keyword">ON</span> bo.id = b.boyfriend_id</span><br><span class="line">    <span class="keyword">WHERE</span> b.name=beautyName;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">CALL</span> myp5(<span class="string">&#x27;小昭&#x27;</span>, @bName)$</span><br><span class="line"><span class="keyword">SELECT</span> @bName$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 根据女神名返回对应男神名和魅力值</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp6(<span class="keyword">IN</span> beautyName <span class="built_in">VARCHAR</span>(<span class="number">20</span>), <span class="keyword">OUT</span> boyName <span class="built_in">VARCHAR</span>(<span class="number">20</span>), <span class="keyword">OUT</span> userCP <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">    <span class="keyword">SELECT</span> bo.boyname, bo.userCP <span class="keyword">INTO</span> boyName, userCP</span><br><span class="line">    <span class="keyword">FROM</span> boys bo</span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> beauty b <span class="keyword">ON</span> bo.id = b.boyfriend_id</span><br><span class="line">    <span class="keyword">WHERE</span> b.name=beautyName;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">CALL</span> myp6(<span class="string">&#x27;小昭&#x27;</span>, @bName, @usercp)$</span><br><span class="line"><span class="keyword">SELECT</span> @bName$, @userCP$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 带 inout 模式的存储过程</span></span><br><span class="line"><span class="comment">-- 传入 a,b 返回对应的翻倍值</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp7(INOUT a <span class="built_in">INT</span>, INOUT b <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">    <span class="keyword">SET</span> a=a*<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">SET</span> b=b*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> @m=<span class="number">10</span>$</span><br><span class="line"><span class="keyword">SET</span> @n=<span class="number">20</span>$</span><br><span class="line"><span class="keyword">call</span> myp7(@m, @n)$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> 存储过程名称;</span><br><span class="line"><span class="comment">-- 查看</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp2;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 传入日期，返回日期字符串</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_pro4(<span class="keyword">IN</span> mydata DATETIME, <span class="keyword">OUT</span> strDate <span class="built_in">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(mydata, <span class="string">&#x27;%y-%m-%d&#x27;</span>) <span class="keyword">INTO</span> strDate;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> test_pro4(<span class="keyword">now</span>(), @strDate)$</span><br><span class="line"><span class="keyword">SELECT</span> @strDate$</span><br></pre></td></tr></table></figure>

<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>区别：存储过程可以有任意个返回，函数有且仅有一个返回</p>
<p>创建语法：</p>
<p>CREATE FUNCTION 函数名(参数列表) RETURENS 返回类型<br>BEGIN<br>    函数体<br>END</p>
<p>参数列表：参数名 参数类型</p>
<p>函数体：肯定有 return，没有报错，可以不放在最后，但是不建议</p>
<p>函数体为空，可以省略 begin end</p>
<p>使用 delimiter 语句设置结束标记</p>
<p>调用语法： SELECT 函数名(参数列表)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 无参有返回</span></span><br><span class="line"><span class="comment">-- 返回公司员工个数</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> myf1() <span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> c <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> c</span><br><span class="line">    <span class="keyword">FROM</span> employees;</span><br><span class="line">    RETURN c;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"><span class="keyword">SELECT</span> myf1()$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 报错：ERROR 1418 (HY000): This function has none of DETERMINISTIC, NO SQL</span></span><br><span class="line"><span class="comment">-- 设置：SET global log_bin_trust_function_creators=TRUE;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 有参数返回</span></span><br><span class="line"><span class="comment">-- 根据员工名返回工资</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> myf2(empName <span class="built_in">VARCHAR</span>(<span class="number">20</span>)) <span class="keyword">RETURNS</span> <span class="keyword">DOUBLE</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SET</span> @sal=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> @sal</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> last_name = empName;</span><br><span class="line"></span><br><span class="line">    RETURN @sal;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"><span class="keyword">select</span> myf2(<span class="string">&#x27;Kochhar&#x27;</span>) $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 根据部门名返回平均工资</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> myf3(deptName <span class="built_in">VARCHAR</span>(<span class="number">20</span>)) <span class="keyword">RETURNS</span> <span class="keyword">DOUBLE</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> sal <span class="keyword">DOUBLE</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) <span class="keyword">INTO</span> sal</span><br><span class="line">    <span class="keyword">FROM</span> employees e</span><br><span class="line">    <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> e.department_id = d.department_id</span><br><span class="line">    <span class="keyword">WHERE</span> d.department_name=deptName;</span><br><span class="line"></span><br><span class="line">    RETURN sal;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"><span class="keyword">select</span> myf2(<span class="string">&#x27;Kochhar&#x27;</span>) $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看和删除，同存储过程</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> myf3();</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> myf3;</span><br></pre></td></tr></table></figure>

<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>分支结构：</p>
<h3 id="if-函数"><a href="#if-函数" class="headerlink" title="if 函数"></a>if 函数</h3><p>select if(expr1, expr2, expr3). expr1 成立则返回 expr2 否则 expr3</p>
<h3 id="case-结构"><a href="#case-结构" class="headerlink" title="case 结构"></a>case 结构</h3><p>方式一：</p>
<p>CASE 变量|表达式|字段<br>WHEN 要判断的值 THEN 返回值 1 或语句 1;<br>WHEN 要判断的值 THEN 返回值 2 或语句 2;<br>…<br>ELSE 要返回的值 n 或语句 2;<br>END CASE;</p>
<p>方式二：</p>
<p>CASE<br>WHEN 要判断的条件1 THEN 返回值 1<br>WHEN 要判断的条件2 THEN 返回值 2<br>…<br>ELSE 要返回的值 n<br>END</p>
<p>可以作为表达式，嵌套在其他语句中使用，比如 BEGIN END 中/外</p>
<p>可以作为独立的语句去使用，只能放在 BEGIN/END 中</p>
<p>如果 WHEN 中条件成立，则执行 THEN 然后结束，如果都不满足，执行 ELSE。ELSE 可以省略。如果没有 ELSE 并且 WHEN 都不满足，返回 NULL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 存储过程，显示成绩</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_case(<span class="keyword">IN</span> score <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">WHEN</span> score &gt;= <span class="number">90</span> <span class="keyword">AND</span> score &lt;= <span class="number">100</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    WHEN score &gt;=80 THEN SELECT &#x27;B&#x27;;</span><br><span class="line">    WHEN score &gt;=60 THEN SELECT &#x27;C&#x27;;</span><br><span class="line">    ELSE <span class="keyword">SELECT</span> <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> test_case(<span class="number">95</span>)$</span><br></pre></td></tr></table></figure>

<h2 id="if-结构"><a href="#if-结构" class="headerlink" title="if 结构"></a>if 结构</h2><p>if 条件1 then 语句1;<br>elseif 条件2 then 语句2;<br>…<br>[else 语句n;]<br>end if;</p>
<p>只能放在 begin/end 中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 根据传入成绩返回等级</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> test_if(score <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">CHAR</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span> score &gt;= <span class="number">90</span> <span class="keyword">AND</span> score &lt;=<span class="number">100</span> <span class="keyword">THEN</span> <span class="keyword">RETURN</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    ELSEIF score &gt;= 80 THEN RETURN &#x27;B&#x27;;</span><br><span class="line">    ELSEIF score &gt;= 60 THEN RETURN &#x27;C&#x27;;</span><br><span class="line">    ELSE RETURN &#x27;D&#x27;;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br></pre></td></tr></table></figure>

<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>分类：while, loop, repeat</p>
<p>循环控制：iterate, 对应 continue; leave 对应 break;</p>
<p>[标签:] loop 循环条件 do<br>    循环体<br>end while [标签];</p>
<p>[标签:] loop<br>    循环体<br>end loop [标签];</p>
<p>可用于模拟死循环</p>
<p>[标签:] repeat<br>    循环体<br>until 结束循环条件 [标签];</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 批量插入 admin</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_while2(<span class="keyword">IN</span> insertCount <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">    WHILE i&lt;insertCount DO</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">admin</span> (username, <span class="string">`password`</span>) <span class="keyword">VALUES</span> (<span class="keyword">CONCAT</span>(<span class="string">&#x27;jjjj&#x27;</span>, i), <span class="string">&#x27;666&#x27;</span>);</span><br><span class="line">        <span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加 leave 控制</span></span><br><span class="line"><span class="comment">-- 清空并重置 index</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> <span class="keyword">admin</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_while3(<span class="keyword">IN</span> insertCount <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">    a: WHILE i&lt;insertCount DO</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">admin</span> (username, <span class="string">`password`</span>) <span class="keyword">VALUES</span> (<span class="keyword">CONCAT</span>(<span class="string">&#x27;jjjj&#x27;</span>, i), <span class="string">&#x27;666&#x27;</span>);</span><br><span class="line">        IF</span><br><span class="line">            i&gt;= 20 THEN LEAVE a;</span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">        <span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span> a;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"><span class="keyword">call</span> pro_while3(<span class="number">100</span>)$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- iterate, 只插入偶数次</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> <span class="keyword">admin</span>$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_while4(<span class="keyword">IN</span> insertCount <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">    a: WHILE i&lt;insertCount DO</span><br><span class="line">        <span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line">        IF</span><br><span class="line">          MOD(i, 2) != 0 THEN ITERATE a;</span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">admin</span> (username, <span class="string">`password`</span>) <span class="keyword">VALUES</span> (<span class="keyword">CONCAT</span>(<span class="string">&#x27;jjjj&#x27;</span>, i), <span class="string">&#x27;666&#x27;</span>);</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span> a;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"><span class="keyword">call</span> pro_while4(<span class="number">100</span>)$</span><br></pre></td></tr></table></figure>

<h2 id="其他-SQL"><a href="#其他-SQL" class="headerlink" title="其他 SQL"></a>其他 SQL</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建备份表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &lt;<span class="keyword">schema</span>&gt;.USER_ACCOUNT_BAK <span class="keyword">LIKE</span> &lt;<span class="keyword">schema</span>&gt;.USER_ACCOUNT;</span><br><span class="line"><span class="comment">-- 复制行</span></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line">    <span class="keyword">INTO</span></span><br><span class="line">    &lt;<span class="keyword">schema</span>&gt;.USER_ACCOUNT_BAK uab (uab.ACCOUNT_ID ,</span><br><span class="line">    uab.ACCOUNT_STATUS,</span><br><span class="line">    uab.PERSON_ID ,</span><br><span class="line">    uab.USERNAME ,</span><br><span class="line">    uab.ACCOUNT_TYPE,</span><br><span class="line">    uab.VISIBILITY)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ua.ACCOUNT_ID ,</span><br><span class="line">    ua.ACCOUNT_STATUS,</span><br><span class="line">    ua.PERSON_ID ,</span><br><span class="line">    ua.USERNAME ,</span><br><span class="line">    ua.ACCOUNT_TYPE,</span><br><span class="line">    ua.VISIBILITY</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    &lt;<span class="keyword">schema</span>&gt;.USER_ACCOUNT ua;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>store procedure</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 会如何处理同名同路径的类</title>
    <url>/hexo/2020/08/07/Same-Name-Same-Path-In-Java/</url>
    <content><![CDATA[<p>问题记录：</p>
<p>项目由多个 repo 组成，当这些 repo 中存在相同路径，相同名称的类时，JVM 会怎么处理？</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索小技巧</title>
    <url>/hexo/2020/06/14/Search-Tips/</url>
    <content><![CDATA[<p>搜索引擎使用小技巧</p>
<ol>
<li><code>-</code> + 关键词：排除不想看到的关键词</li>
<li>“关键词加”：锁定关键词</li>
<li>site:域名 + 关键词， 在指定网站内搜索</li>
<li>filetype:文件格式 + 关键词</li>
<li>intitile: + 关键词，指定标题搜素</li>
<li>intext/allintext: + 关键词,两种指定范围搜索</li>
<li>以上技巧叠加使用</li>
</ol>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 shadowsocks client</title>
    <url>/hexo/2019/12/02/Shadowsocks-Client-Installation/</url>
    <content><![CDATA[<p>安装 shadowsocks 本地客户端记录</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>查看是否已经安装 python 和 pip, 这里用的是 python3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -v</span><br><span class="line">pip3 -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有安装运行</span></span><br><span class="line">sudo apt-get install python3</span><br><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure>

<p>配置 douban 源加速</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跳转到 $HOME 目录下</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line"><span class="comment"># 创建 .pip 目录</span></span><br><span class="line">mkdir .pip</span><br><span class="line"><span class="comment"># 创建 config 文件</span></span><br><span class="line">vim pip.conf</span><br><span class="line"><span class="comment"># 将如下内容写进 config 文件，保存退出</span></span><br><span class="line">[global]</span><br><span class="line">timeout = 60</span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br><span class="line">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure>

<p>安装 python shadowsocks 包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip3 install shadowsocks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果嫌 sudo 累赘，也可以用</span></span><br><span class="line">pip3 install --user shadowsocks</span><br></pre></td></tr></table></figure>

<p>安装完毕，配置本地 client 端，创建文件 <code>ssclient.json</code>（名字可以自选，不一定要这个），写入内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;server&quot;</span>:<span class="string">&quot;xxx.xxx.xxx.xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;server_port&quot;</span>:8989,</span><br><span class="line"><span class="string">&quot;local_address&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line"><span class="string">&quot;local_port&quot;</span>:1080,</span><br><span class="line"><span class="string">&quot;password&quot;</span>:<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;timeout&quot;</span>:300,</span><br><span class="line"><span class="string">&quot;method&quot;</span>:<span class="string">&quot;aes-256-cfb&quot;</span>,</span><br><span class="line"><span class="string">&quot;fast_open&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;workers&quot;</span>: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>端口信息根据实际情况修改，完毕后运行 <code>sslocal -c /path/to/ssclient.json</code>，报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jack@DESKTOP-9TGTFK1:~/ss$ sslocal  -c ssclient.json</span><br><span class="line">INFO: loading config from shadowsocks.json</span><br><span class="line">2019-12-02 21:02:09 INFO     loading libcrypto from libcrypto.so.1.1</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/usr/local/bin/sslocal&quot;</span>, line 11, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    load_entry_point(<span class="string">&#x27;shadowsocks==2.8.2&#x27;</span>, <span class="string">&#x27;console_scripts&#x27;</span>, <span class="string">&#x27;sslocal&#x27;</span>)()</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/local.py&quot;</span>, line 39, <span class="keyword">in</span> main</span><br><span class="line">    config = shell.get_config(True)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/shell.py&quot;</span>, line 262, <span class="keyword">in</span> get_config</span><br><span class="line">    check_config(config, is_local)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/shell.py&quot;</span>, line 124, <span class="keyword">in</span> check_config</span><br><span class="line">    encrypt.try_cipher(config[<span class="string">&#x27;password&#x27;</span>], config[<span class="string">&#x27;method&#x27;</span>])</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/encrypt.py&quot;</span>, line 44, <span class="keyword">in</span> try_cipher</span><br><span class="line">    Encryptor(key, method)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/encrypt.py&quot;</span>, line 83, <span class="keyword">in</span> __init__</span><br><span class="line">    random_string(self._method_info[1]))</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/encrypt.py&quot;</span>, line 109, <span class="keyword">in</span> get_cipher</span><br><span class="line">    <span class="built_in">return</span> m[2](method, key, iv, op)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/crypto/openssl.py&quot;</span>, line 76, <span class="keyword">in</span> __init__</span><br><span class="line">    load_openssl()</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/crypto/openssl.py&quot;</span>, line 52, <span class="keyword">in</span> load_openssl</span><br><span class="line">    libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,)</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3.6/ctypes/__init__.py&quot;</span>, line 361, <span class="keyword">in</span> __getattr__</span><br><span class="line">    func = self.__getitem__(name)</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3.6/ctypes/__init__.py&quot;</span>, line 366, <span class="keyword">in</span> __getitem__</span><br><span class="line">    func = self._FuncPtr((name_or_ordinal, self))</span><br><span class="line">AttributeError: /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1: undefined symbol: EVP_CIPHER_CTX_cleanup</span><br><span class="line">jack@DESKTOP-9TGTFK1:~/ss$</span><br></pre></td></tr></table></figure>

<p>这是因为在openssl 1.1.0中废弃了 EVP_CIPHER_CTX_cleanup() 函数而引入了 EVE_CIPHER_CTX_reset() 函数，具体可以查看<a href="https://www.openssl.org/docs/man1.1.0/man3/EVP_CIPHER_CTX_reset.html">官方文档</a>, 修复如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在错误日志中找到 openssl.py 文件路径, 通过 vim 修改</span></span><br><span class="line">sudo vim /usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/shadowsocks/crypto/openssl.py</span><br><span class="line"><span class="comment"># 替换关键自</span></span><br><span class="line">:%s/cleanup/reset/</span><br><span class="line"><span class="comment"># 保存推出</span></span><br><span class="line">:x</span><br></pre></td></tr></table></figure>

<p>再运行 sslocal，成功</p>
<ul>
<li>MacOS 升级到 10.15 Catalina 之后就跑不起来了</li>
</ul>
<p>据说是应为升级之后，一些包比如 openssl, dyid 什么的不兼容了导致的，重新安装一下就行了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update &amp;&amp; brew upgrade</span><br><span class="line"></span><br><span class="line">brew uninstall --ignore-dependencies openssl; brew install https://github.com/tebelorg/Tump/releases/download/v1.0.0/openssl.rb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 pip install 不好使了，可以试试重装一下</span></span><br><span class="line">brew reinstall python</span><br></pre></td></tr></table></figure>

<p>然后在 <code>.zshrc</code> 里面添加配置 <code>export DYLD_LIBRARY_PATH=/usr/local/opt/openssl/lib:$DYLD_LIBRARY_PATH</code></p>
<h3 id="终端-Git-下载加速"><a href="#终端-Git-下载加速" class="headerlink" title="终端 Git 下载加速"></a>终端 Git 下载加速</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># config your &#96;~&#x2F;.gitconfig&#96; file</span><br><span class="line">[http]</span><br><span class="line">proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">sslVerify &#x3D; false</span><br><span class="line"></span><br><span class="line">[https]</span><br><span class="line">proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">  </span><br><span class="line"># or you can config it by typing terminal</span><br><span class="line">git config --global http.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">git config --global http.sslVerify false</span><br><span class="line"></span><br><span class="line"># turn off proxy, 开启后 git commit 会受影响</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>

<p>慢的话肯定是vps不给力，之前用 Vultr 的时候也是龟速，用了 google cloud, 芜湖，起飞！！！</p>
<h2 id="MacOS-安装-SS-客户端"><a href="#MacOS-安装-SS-客户端" class="headerlink" title="MacOS 安装 SS 客户端"></a>MacOS 安装 SS 客户端</h2><p>Git 上有一个客户端，用了下还挺香的 <a href="https://github.com/shadowsocks/ShadowsocksX-NG">ShadowsocksX-NG</a>。README 上有下载地址，直接下载后，解压将安装文件拖至 Application 文件夹下就行了。</p>
<p>配置注意点：</p>
<ol>
<li>Servers -&gt; Server Preference 添加自己的 SS 节点</li>
<li>Preferences 里面可以看到 proxy 设置，需要注意的是它为 Socks5 和 HTTP 设置了不同端口，Sock5 是 1086，HTTP 是 1087</li>
<li>安装了这个应用之后貌似就不需要单独配置终端 proxy 了， 可以通用，或者使用 global mode</li>
</ol>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>定制 Shell 脚本</title>
    <url>/hexo/2021/05/17/Shell-customized-command/</url>
    <content><![CDATA[<h2 id="定制-git-pull"><a href="#定制-git-pull" class="headerlink" title="定制 git pull"></a>定制 git pull</h2><p>git pull 算是开发时经常用到的一个命令了，但是更新代码之后，时常会遇到最新版本的代码不 work 的情况。由此，打算对 pull 命令做一个优化，每次 pull 的时候，将当前 repo 的信息写到历史记录中，类似 <code>.zsh_history</code> 的功能。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> git &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;\$@: &quot;</span> <span class="variable">$@</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;\$1: &quot;</span> <span class="variable">$1</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;\$2: &quot;</span> <span class="variable">$2</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="built_in">command</span> git <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> git &#123;</span><br><span class="line">  <span class="comment"># use wild card match, so use </span></span><br><span class="line">  <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> == <span class="string">&quot;pull&quot;</span> &amp;&amp; <span class="string">&quot;<span class="variable">$@</span>&quot;</span> != *<span class="string">&quot;--help&quot;</span>* ]]; <span class="keyword">then</span></span><br><span class="line">    updateinfo=$(<span class="built_in">command</span> git pull | grep Updating)</span><br><span class="line">    <span class="keyword">if</span> [[ -z <span class="variable">$updateinfo</span> ]]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Skip recording pull history...&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Recording pull history...&quot;</span></span><br><span class="line">      <span class="comment"># write process date time</span></span><br><span class="line">      <span class="built_in">printf</span> <span class="string">&quot;%s  &quot;</span> <span class="string">&quot;<span class="subst">$(date &#x27;+%Y-%m-%d %H:%M:%S&#x27;)</span>&quot;</span> &gt;&gt; ~/.git_pull.history</span><br><span class="line">      <span class="comment"># write current version for recover</span></span><br><span class="line">      <span class="built_in">printf</span> <span class="string">&quot;%s  &quot;</span> <span class="string">&quot;<span class="variable">$updateinfo</span>&quot;</span>  &gt;&gt; ~/.git_pull.history</span><br><span class="line">      <span class="comment"># write repo name</span></span><br><span class="line">      <span class="built_in">printf</span> <span class="string">&quot;%s\n&quot;</span> <span class="string">&quot;<span class="subst">$(command git config --get remote.origin.url | cut -d &#x27;/&#x27; -f 2)</span>&quot;</span>  &gt;&gt; ~/.git_pull.history</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">command</span> git <span class="string">&quot;<span class="variable">$@</span>&quot;</span>    <span class="comment"># command 用于调用外部命令</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS: 为了重复测试脚本，可以使用 <code>git reset --hard xxx</code> 回退版本，再次测试 pull</p>
<ul>
<li><a href="https://stackoverflow.com/questions/3538774/is-it-possible-to-override-git-command-by-git-alias">Stackoverflow</a></li>
</ul>
<h2 id="过滤文件"><a href="#过滤文件" class="headerlink" title="过滤文件"></a>过滤文件</h2><p>任务描述：</p>
<p>有一个 git repo 存储了所有的测试文件(java 格式)，已知需要筛选的文件列表，筛选出所有文件中包含 ‘DB’ (忽略大小写)的文件。并列出包含关键字的列，以便人工删选。</p>
<p>原始文件名列表格式如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">results</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">testcase</span> <span class="attr">external_id</span>=<span class="string">&#x27;PLT#-123456950&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span>&gt;</span>p<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">notes</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">testcase</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">results</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用编辑器的快捷功能将 <code>#-</code> 去掉</p>
<p>PS: 查询一下 sed, awk 和内置的字符串处理方式</p>
<p>repo 中文件名格式如下：PLT123457725UTF8ExportTemplateUserRecordWithUTF8UserImportAndShownCorrectEncoding</p>
<p>使用 find + grep 删选哪些文件包含 db 操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -iname &#x27;PLT123457726*.java&#x27; -exec grep -i &quot;dbUtil\|DB&quot; &#123;&#125; \;</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&quot;Priorities.P1&quot;</span>, <span class="string">&quot;DBType.Oracle&quot;</span>, <span class="string">&quot;all&quot;</span>, <span class="string">&quot;TestType.Regression&quot;</span>, <span class="string">&quot;systemUltra&quot;</span>, <span class="string">&quot;systemv12&quot;</span>,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> String ssn = dbUtil.getSingleUserFieldValueByUserIdFromSMUserInfoTable(PLT123457670, SSN);</span></span><br><span class="line"></span><br><span class="line">find . -iname &#x27;PLT123457726*.java&#x27; -exec grep -i &quot;dbUtil\|db&quot; &#123;&#125; \; | grep -v &#x27;DBType&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> String ssn = dbUtil.getSingleUserFieldValueByUserIdFromSMUserInfoTable(PLT123457670, SSN);</span></span><br></pre></td></tr></table></figure>

<p>将文件中的 case name 删选出来 <code>grep -E -o &#39;PLT.*[0-9]+&#39; bulk.xml &gt;&gt; bulk2.xml</code></p>
<p>遍历每一行，做 query</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">file=&quot;./bulk2.xml&quot;</span><br><span class="line">while IFS= read line</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line">    echo &quot;------------- start -------------&quot;</span><br><span class="line">    # write file name to file</span><br><span class="line">    find . -iname &quot;$line*.java&quot; -exec basename &#123;&#125; \;</span><br><span class="line">    echo &#x27;------------- match start -------------&#x27;</span><br><span class="line">    # write matched line to file</span><br><span class="line">    find . -iname &quot;$line*.java&quot; -exec grep -i &quot;dbUtil\|db&quot; &#123;&#125; \; | grep -v &quot;DBType&quot;</span><br><span class="line">    echo &#x27;------------- match end -------------&#x27;</span><br><span class="line">done &lt;&quot;$file&quot;</span><br></pre></td></tr></table></figure>

<p>PS: 由于技术手段的缺失，很多函数我都不清楚怎么调用，对 shell 还是很不熟悉，需要更多的实践练习</p>
<h2 id="ZSH-history-实现机制"><a href="#ZSH-history-实现机制" class="headerlink" title="ZSH history 实现机制"></a>ZSH history 实现机制</h2><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>shell 文件里面写 <code>echo -n &#39;,&#39;</code> 会把 <code>-n</code> 也写进去？</li>
<li>因为每次执行都会扫一遍 repo，所以想能不能建立一个 name-context map 到内存然后扫描</li>
<li>以上面的 idea 为基础，能不能实时监测 shell 运行时的内存消耗</li>
<li>read/write to file in shell</li>
</ul>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>tar 命令使用简介</title>
    <url>/hexo/2021/06/18/Shell-tar-use-sample/</url>
    <content><![CDATA[<p>tar 最开始是用来操作磁带设备的，后来用途越来越广。一开始 Linux 系统是不能同时压缩多个文件的，所以，通常需要用 tar 命令将文件打包成一个文件，然后在压缩</p>
<p>tar 的常用操作我归结为三类，分别是打包，解包和查看。打包和解包的基础上还可以加上压缩的操作。</p>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><ul>
<li>-c, 对应的关键字是 create</li>
<li>-f, 表明处理的是文件，不加会抛错</li>
<li>-v, 可选，打印详细信息</li>
<li>-z, 压缩</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls</span><br><span class="line"><span class="keyword">case</span>-id-mapping  create_ticket.sh sample_body</span><br><span class="line"></span><br><span class="line">tar -cvf my.tar <span class="keyword">case</span>-id-mapping create_ticket.sh sample_body</span><br><span class="line">a <span class="keyword">case</span>-id-mapping</span><br><span class="line">a create_ticket.sh</span><br><span class="line">a sample_body</span><br><span class="line"></span><br><span class="line">ls -l</span><br><span class="line">-rw-r--r--  1 i306454  staff  9728 Jun 18 16:41 my.tar</span><br><span class="line"></span><br><span class="line">ar -zcvf my.tar <span class="keyword">case</span>-id-mapping create_ticket.sh sample_body</span><br><span class="line">a <span class="keyword">case</span>-id-mapping</span><br><span class="line">a create_ticket.sh</span><br><span class="line">a sample_body</span><br><span class="line"></span><br><span class="line">ls -l my.tar</span><br><span class="line">-rw-r--r--  1 i306454  staff  2203 Jun 18 16:44 my.tar</span><br><span class="line"></span><br><span class="line">tar -tvf my.tar</span><br><span class="line">-rw-r--r--  0 i306454 staff    4123 Jun 18 16:35 <span class="keyword">case</span>-id-mapping</span><br><span class="line">-rwxr--r--  0 i306454 staff    1347 Jun 18 16:35 create_ticket.sh</span><br><span class="line">-rw-r--r--  0 i306454 staff     857 Jun 18 16:35 sample_body</span><br></pre></td></tr></table></figure>

<ul>
<li>不加 -v 中间的命令是不会有 a xxx 的信息的</li>
<li>加上 -z 之后出现压缩效果</li>
<li>压缩的的 tar ball 还是可以通过 -t 查看</li>
<li>-f 一定要在最后，不然会报错，这个可以从参数定义看出来，这个参数后面接你要处理的目标文件 cvfz 则表示你要处理 z 这个文件了</li>
<li>如果加了 -z 则最好将你的文件后缀改为 .gz</li>
<li>如果想要查看是否压缩过，使用 file 命令 <code>file my.tar</code> 返回 <code>my.tar: POSIX tar archive</code></li>
</ul>
<h2 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h2><ul>
<li>-x, 解包操作, 代表 extract 操作</li>
<li>-z, 一开始还以为有用，但是测试下来，不需要加这个参数自动就解压缩了</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -xvf my.tar                                              </span><br><span class="line">x <span class="keyword">case</span>-id-mapping</span><br><span class="line">x create_ticket.sh</span><br><span class="line">x sample_body</span><br></pre></td></tr></table></figure>

<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>之前的压缩已经使用过了，使用 -t 参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -tvf my.tar</span><br><span class="line">-rw-r--r--  0 i306454 staff    4123 Jun 18 16:35 <span class="keyword">case</span>-id-mapping</span><br><span class="line">-rwxr--r--  0 i306454 staff    1347 Jun 18 16:35 create_ticket.sh</span><br><span class="line">-rw-r--r--  0 i306454 staff     857 Jun 18 16:35 sample_body</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其他还有一些参数</p>
<ul>
<li>-r, 追加</li>
<li>-u, 如果有改动才追加</li>
</ul>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>tar</tag>
      </tags>
  </entry>
  <entry>
    <title>Zsh 配置文件的 load 顺序</title>
    <url>/hexo/2021/05/07/Shell-zsh-profile-load-order/</url>
    <content><![CDATA[<p>今天在看 sourcegraph 这个开源工具的时候，发现他有提供终端查询接口的，但是要配置参数到 <code>.zprofile</code> 中, 突然想问一句 <code>.zshrc</code> 和 <code>.zprofile</code> 有什么关系？</p>
<ul>
<li><a href="https://unix.stackexchange.com/questions/71253/what-should-shouldnt-go-in-zshenv-zshrc-zlogin-zprofile-zlogout">stackexchange</a></li>
</ul>
<blockquote>
<p><code>.zprofile</code> is basically the same as <code>.zlogin</code> except that it’s sourced before <code>.zshrc</code> while <code>.zlogin</code> is sourced after <code>.zshrc</code>.<br> According to the zsh documentation, “.zprofile is meant as an alternative to .zlogin for ksh fans; the two are not intended to be used together, although this could certainly be done if desired.”</p>
</blockquote>
<p>PS: Ksh 是很早就出现的一种 shell</p>
<p>由上面的描述我们可以直到，zsh 的 config file 生效顺序为 zprofile -&gt; zsh -&gt; zlogin</p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shell 的 config file 是可以直接执行 cmd 的，在 .zprofile 和 .zshrc 中分别加上 &quot;echo hello from .zprofile&quot;</span></span><br><span class="line"><span class="comment"># 和 &quot;echo hello from .zshrc&quot;. 新起一个终端会加载这两个配置，观察输出结果，和之前的描述一致</span></span><br><span class="line"></span><br><span class="line">hello from .zprofile</span><br><span class="line">hello from .zshrc</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>Splunk 快速入门</title>
    <url>/hexo/2020/09/10/Splunk-Quick-Guide/</url>
    <content><![CDATA[<h2 id="常用-Query"><a href="#常用-Query" class="headerlink" title="常用 Query"></a>常用 Query</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- event 出现的次数</span></span><br><span class="line">search=index | stats sum(linecount) as Total</span><br><span class="line"><span class="comment">-- or</span></span><br><span class="line">search=index | stats count as Total</span><br></pre></td></tr></table></figure>

<h2 id="makeresults"><a href="#makeresults" class="headerlink" title="makeresults"></a>makeresults</h2><p>发现一个很有意思的函数，可以用它创建简单的测试数据，使用之前最好对照官方文档看看例子，新版有支持 format 为 json, csv 的数据，旧版不行</p>
<ul>
<li><a href="https://docs.splunk.com/Documentation/Splunk/8.1.4/SearchReference/Makeresults">makeresults</a></li>
</ul>
<h2 id="行转列-transpose"><a href="#行转列-transpose" class="headerlink" title="行转列 transpose"></a>行转列 transpose</h2><p>如果统计结果为</p>
<table>
<thead>
<tr>
<th align="left">A</th>
<th align="left">B</th>
<th align="left">C</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">2</td>
<td align="left">3</td>
</tr>
</tbody></table>
<p>转化为饼图的时候，只会显示 A 类型的数据，因为 Splunk 默认使用 X 轴作为分类标的。这时可以使用 <code>search cmd | transpose</code> 达到行专列的效果</p>
<h2 id="stats-vs-eventstats-vs-streamstats"><a href="#stats-vs-eventstats-vs-streamstats" class="headerlink" title="stats vs eventstats vs streamstats"></a>stats vs eventstats vs streamstats</h2><p>stats 类似 sql 中的聚合函数，计算之后，只会产出一行数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| makeresults count&#x3D;4 </span><br><span class="line">| streamstats count </span><br><span class="line">| eval age &#x3D; case(count&#x3D;1, 25, count&#x3D;2, 39, count&#x3D;3, 31, count&#x3D;4, null())</span><br><span class="line">| eval city &#x3D; case(count&#x3D;1 OR count&#x3D;3, &quot;San Francisco&quot;, count&#x3D;2 OR count&#x3D;4, &quot;Seattle&quot;) </span><br><span class="line">| stats sum(age)</span><br></pre></td></tr></table></figure>

<p>eventstats 工作时并不会改变原始数据，而是在原有的 raw 数据外新增一列数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| makeresults count&#x3D;4 </span><br><span class="line">| streamstats count </span><br><span class="line">| eval age &#x3D; case(count&#x3D;1, 25, count&#x3D;2, 39, count&#x3D;3, 31, count&#x3D;4, null())</span><br><span class="line">| eval city &#x3D; case(count&#x3D;1 OR count&#x3D;3, &quot;San Francisco&quot;, count&#x3D;2 OR count&#x3D;4, &quot;Seattle&quot;)</span><br><span class="line">| eventstats avg(age) by city</span><br></pre></td></tr></table></figure>

<p>streamstats 和 eventstats 很像，也是不改变原数据去新增一列的操作，区别就在 stream 这个关键字，它是用流的方式处理。只在每条数据出现的节点做计算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| makeresults count&#x3D;4 </span><br><span class="line">| streamstats count </span><br><span class="line">| eval age &#x3D; case(count&#x3D;1, 25, count&#x3D;2, 39, count&#x3D;3, 31, count&#x3D;4, null())</span><br><span class="line">| eval city &#x3D; case(count&#x3D;1 OR count&#x3D;3, &quot;San Francisco&quot;, count&#x3D;2 OR count&#x3D;4, &quot;Seattle&quot;)</span><br><span class="line">| streamstats  avg(age) by city</span><br></pre></td></tr></table></figure>

<p>还是相同的案例，用 streamstats 计算平均值时，第一个 San Francisco 均值为自身，第二个则为两个之和做平均了，很神奇。</p>
<p>此外 streamstats count 还可以用来显示<strong>序号</strong></p>
<h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><p>可以使用 dedup</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| makeresults count&#x3D;4 </span><br><span class="line">| streamstats count </span><br><span class="line">| eval age &#x3D; case(count&#x3D;1, 25, count&#x3D;2, 39, count&#x3D;3, 31, count&#x3D;4, null())</span><br><span class="line">| eval city &#x3D; case(count&#x3D;1 OR count&#x3D;3, &quot;San Francisco&quot;, count&#x3D;2 OR count&#x3D;4, &quot;Seattle&quot;)</span><br><span class="line">| dedup city</span><br></pre></td></tr></table></figure>

<p>当然也可以使用 stats 计算 count 达到曲线救国的效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search result </span><br><span class="line">| stats count by city</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">| stats values(city)</span><br></pre></td></tr></table></figure>

<h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h2><p>通过 eval 可以在原有数据的基础上，通过计算新增一列数据，是 stream 类型的 command。比如我们想要添加 flag 列，条件为 responseTime &gt; 5000 的值为 1 否则为 0. search 语句可以这样写 <code>search command | eval Status=if(responseTime &gt; 10000, 1, 0)</code></p>
<h2 id="查询-event-的日均量"><a href="#查询-event-的日均量" class="headerlink" title="查询 event 的日均量"></a>查询 event 的日均量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eventtype=<span class="string">&quot;searchAccountLocked&quot;</span> | timechart span=1d count | stats avg(count)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在此基础上，计算 7 天的平均值</span></span><br><span class="line">eventtype=<span class="string">&quot;searchAccountLocked&quot;</span> | timechart span=1d count | stats avg(count) as avgc ｜ <span class="built_in">eval</span> n=exact(1 * avgc)</span><br></pre></td></tr></table></figure>

<h2 id="table-where-达到-filter-的效果"><a href="#table-where-达到-filter-的效果" class="headerlink" title="table + where 达到 filter 的效果"></a>table + where 达到 filter 的效果</h2><p>pipeline 后面接 where 语句可以起到 filter 的效果，和 SQL 一样</p>
<h2 id="收集分散在多个-event-中的数据"><a href="#收集分散在多个-event-中的数据" class="headerlink" title="收集分散在多个 event 中的数据"></a>收集分散在多个 event 中的数据</h2><ul>
<li><a href="https://community.splunk.com/t5/Splunk-Search/Joining-data-from-multiple-events-with-stats/m-p/526162">join form multi events</a></li>
</ul>
<p>看到一个从多条分散的 event 中收集数据的例子，刚好是我现在需要的。核心思路是通过 eventstats 为每个 event 计算一个新的 field 做跳板</p>
<p>这里还有一个很神奇的语法，通过 values 统计出来的结果，在 if 条件中，我们可以直接通过使用 field=values 的语法达到类似 in 的效果。找了半天文档，没发现有这种个语法说明 （；￣ェ￣）</p>
<p>想过相似的还有一个 command 叫做 <a href="https://docs.splunk.com/Documentation/Splunk/9.0.0/Search/Aboutsubsearches">subsearch</a>，通过自查询缩小范围，然后进一步查询</p>
<p>就我处理的案例来说，subsearch performance 要小很多，通过子查询可以很快的缩小处理范围</p>
<h2 id="通过-Regex-匹配得到目标百分比"><a href="#通过-Regex-匹配得到目标百分比" class="headerlink" title="通过 Regex 匹配得到目标百分比"></a>通过 Regex 匹配得到目标百分比</h2><ul>
<li><a href="https://community.splunk.com/t5/Splunk-Search/Get-percentage-of-matchin-to-all-events/td-p/39113">社区类似问题</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索全部 event, 通过 regex 匹配到目标，计算百分比</span></span><br><span class="line">UserChangeEvent MessageBox | stats count(<span class="built_in">eval</span>(match(field1, <span class="string">&quot;.*updatedFields\&quot;:\[&#123;\&quot;fieldName\&quot;:\&quot;jobCode\&quot;.*&quot;</span>))) as JCEvent count as total | <span class="built_in">eval</span> JC_pct=JCEvent/total*100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级版，计算多个百分比情况</span></span><br><span class="line"><span class="comment"># EMP_PCT 内容是空的 event 在所有 jobcode event 中的占比，和 jobcode 在所有 event 中的占比</span></span><br><span class="line">UserChangeEvent MessageBox | stats count(<span class="built_in">eval</span>(match(field1, <span class="string">&quot;.*updatedFields\&quot;:\[&#123;\&quot;fieldName\&quot;:\&quot;jobCode\&quot;.*&quot;</span>))) as totalJCEvent count(<span class="built_in">eval</span>(match(field1, <span class="string">&quot;.*updatedFields\&quot;:\[&#123;\&quot;fieldName\&quot;:\&quot;jobCode\&quot;,\&quot;fieldType\&quot;:\&quot;java.lang.String\&quot;,\&quot;afterValue\&quot;:\&quot;\&quot;&#125;\].*&quot;</span>))) as emptyEvent count as total | <span class="built_in">eval</span> EMP_PCT=emptyEvent/totalJCEvent*100, JC_PCT=totalJCEvent/total*100</span><br></pre></td></tr></table></figure>

<h2 id="取两位小数"><a href="#取两位小数" class="headerlink" title="取两位小数"></a>取两位小数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">| 7xAVG=round((7*total/1), 2)</span><br></pre></td></tr></table></figure>

<h2 id="通过正则创建新-field"><a href="#通过正则创建新-field" class="headerlink" title="通过正则创建新 field"></a>通过正则创建新 field</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选出结果集，从输出信息中匹配 &#x27;Company: &#x27; 开头 &#x27;, total CommonField&#x27; 结尾的部分并命名为 cname 统计出现次数</span></span><br><span class="line"><span class="comment"># _raw 表示 record 内容</span></span><br><span class="line">search condition | rex field=_raw <span class="string">&quot;Company: (?&lt;cname&gt;.*), total CommonField&quot;</span> | stats count by cname</span><br></pre></td></tr></table></figure>

<h2 id="stats-和-eval-的区别"><a href="#stats-和-eval-的区别" class="headerlink" title="stats 和 eval 的区别"></a>stats 和 eval 的区别</h2><p>stats 是对已经有的 field 的删选，而 eval 是通过已有的 field 计算出新的 field 加到结果集中进行删选，等价于新增 field</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删选 event, 新建一个 field 名叫 is_prod, 当 host 匹配 pattern 时赋值 yes_prod</span></span><br><span class="line">search event | <span class="built_in">eval</span> is_prod=<span class="keyword">if</span>(like(host, <span class="string">&quot;pc%&quot;</span>), <span class="string">&quot;yes_prod&quot;</span>, <span class="string">&quot;not_prod&quot;</span>) | stats count by is_prod</span><br></pre></td></tr></table></figure>

<p>其中 eval 还支持多种删选条件，可塑性好高</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计各环境的 event 数量并统计比例</span></span><br><span class="line">search event | <span class="built_in">eval</span> env=<span class="keyword">case</span>(like(host, <span class="string">&quot;pc%&quot;</span>), <span class="string">&quot;prod&quot;</span>, like(host, <span class="string">&quot;sc%&quot;</span>), <span class="string">&quot;prov&quot;</span>, like(host, <span class="string">&quot;*&quot;</span>), <span class="string">&quot;others&quot;</span>) | stats count by env</span><br></pre></td></tr></table></figure>

<h2 id="Splunk-SDK"><a href="#Splunk-SDK" class="headerlink" title="Splunk SDK"></a>Splunk SDK</h2><p>尝试了 python 版本的 SDK，香！</p>
<p>参考 <a href="https://dev.splunk.com/enterprise/docs/python/sdk-python/examplespython/commandline">官方文档</a> 下载依赖，在本地配置 <code>.splunkrc</code> 文件写入连接信息方便调用。第一次用的时候密码配错了，还以为内网不可用，需要用 vlab，再测试的时候发现了这个问题。总的来说很可以。</p>
<p>Steps:</p>
<ol>
<li>clone git 开源项目 <a href="https://github.com/splunk/splunk-sdk-python">Splunk SDK Python</a></li>
<li>用户目录下创建 <code>.splunkrc</code> 文件</li>
<li>cd 到 <code>splunk-sdk-python/examples</code> folder 下，运行命令 <code>python search.py &quot;search * | head 10&quot; --earliest_time=&quot;2011-08-10T17:15:00.000-07:00&quot; --rf=&quot;desc&quot; --output_mode=json</code> 可以看到对应时间戳下的前 10 条记录</li>
</ol>
<p><code>.splunkrc</code> 文件模板</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Splunk host (default: localhost)</span><br><span class="line">host&#x3D;xxx.xxx.xxx</span><br><span class="line"># Splunk admin port (default: 8089)</span><br><span class="line">port&#x3D;8089</span><br><span class="line"># Splunk username</span><br><span class="line">username&#x3D;jack</span><br><span class="line"># Splunk password</span><br><span class="line">password&#x3D;mypwd</span><br><span class="line"># Access scheme (default: https)</span><br><span class="line">scheme&#x3D;https</span><br><span class="line"># Your version of Splunk (default: 5.0)</span><br><span class="line">version&#x3D;7.1.2</span><br></pre></td></tr></table></figure>

<h2 id="三个小例子快速入门"><a href="#三个小例子快速入门" class="headerlink" title="三个小例子快速入门"></a>三个小例子快速入门</h2><h3 id="搜索-event-并通过饼图展示"><a href="#搜索-event-并通过饼图展示" class="headerlink" title="搜索 event 并通过饼图展示"></a>搜索 event 并通过饼图展示</h3><ol>
<li>输入时间节点和关键词：<code>MessageBox topic=com.successfactors.usermanagement.event.UserChangeEvent | stats count by servername</code></li>
<li>选择可视化 tab</li>
<li>选择饼图</li>
</ol>
<p><img src="pie.png" alt="饼图"></p>
<h3 id="显示每天的-event-量"><a href="#显示每天的-event-量" class="headerlink" title="显示每天的 event 量"></a>显示每天的 event 量</h3><ol>
<li>选择时间</li>
<li>输入搜索条件: <code>MessageBox topic=com.successfactors.usermanagement.event.UserChangeEvent | timechart count span=1d</code></li>
<li>选择图形</li>
</ol>
<p><img src="bar.png" alt="柱状图"></p>
<h3 id="通过正则删选-event-并计算百分比"><a href="#通过正则删选-event-并计算百分比" class="headerlink" title="通过正则删选 event 并计算百分比"></a>通过正则删选 event 并计算百分比</h3><ol>
<li>选择时间</li>
<li>输入删选条件: <code>MessageBox topic=com.successfactors.usermanagement.event.UserChangeEvent | stats count as total count(eval(match(field1, &quot;companyId&quot;))) as containsCID | eval CID_PCT=round(containsCID/total*100, 2)</code></li>
</ol>
<p><img src="regex.png" alt="百分比表"></p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>splunk</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring AOP quick start</title>
    <url>/hexo/2022/06/27/Spring-AOP-quick-start/</url>
    <content><![CDATA[<p>快速了解 AOP 必要只是并写出 demo</p>
<h2 id="简单概括什么是-AOP"><a href="#简单概括什么是-AOP" class="headerlink" title="简单概括什么是 AOP"></a>简单概括什么是 AOP</h2><p>不破坏代码结构的情况下，为代码添加功能，典型案例如打印方法的执行时间。</p>
<h2 id="AOP-涉及的专有名词"><a href="#AOP-涉及的专有名词" class="headerlink" title="AOP 涉及的专有名词"></a>AOP 涉及的专有名词</h2><ul>
<li>Joinpoint</li>
<li>Pointcut</li>
<li>Advice</li>
<li>Aspect</li>
<li>织入</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring bean definition</title>
    <url>/hexo/2021/11/30/Spring-bean-definition/</url>
    <content><![CDATA[<p>根据<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#bean-overview">官方</a>定义, 简单来说，bean definition 就是一个 bean 的定义</p>
<p>A Spring IoC container manages one or more beans. These beans are created with the configuration metadata that you supply to the container (for example, in the form of XML <bean/> definitions).</p>
<p>Within the container itself, these bean definitions are represented as BeanDefinition objects, which contain (among other information) the following metadata:</p>
<ul>
<li>A package-qualified class name: typically, the actual implementation class of the bean being defined.</li>
<li>Bean behavioral configuration elements, which state how the bean should behave in the container (scope, lifecycle callbacks, and so forth).</li>
<li>References to other beans that are needed for the bean to do its work. These references are also called collaborators or dependencies.</li>
<li>Other configuration settings to set in the newly created object — for example, the size limit of the pool or the number of connections to use in a bean that manages a connection pool.</li>
</ul>
<p>bean definition 包含：</p>
<ul>
<li>全名限定，通常是实现类的全名限定</li>
<li>bean 相关配置，包括 scope, lifecycle 等</li>
<li>bean 的依赖</li>
<li>实例化的属性，比如 pool size 之类的</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/189896257">Zhihu</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>BeanDefinition</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring bean factory post processor workflow</title>
    <url>/hexo/2021/10/27/Spring-bean-factory-post-processor-workflow/</url>
    <content><![CDATA[<p>Spring 中 BeanFactoryPostProcessor 相关代码的源码解析，涉及到的主要 class 整理如下</p>
<ul>
<li>BeanFactory: bean 工厂，生产单个 bean,  典型方法 getBean/containsBean/isSingleton/getType etc</li>
<li>ListableBeanFactory: 继承自 BeanFactory，额外拥有枚举 bean 的能力，即批量返回</li>
<li>HierarchicalBeanFactory: 继承自 BeanFactory，额外拥<strong>父子</strong>容器的概念</li>
<li>AutowireCapableBeanFactory: 继承自 BeanFactory, 额外提供管理非自动装配 bean 的能力</li>
<li>SingletonBeanRegistry: 保证单例的注册器</li>
<li>ConfigurableBeanFactory: 继承自 HierarchicalBeanFactory + SingletonBeanRegistry, 额外的配置能力</li>
<li>ConfigurableListableBeanFactory: 整合 listale, hierarch 和 autowire 的能力，额外提供分析修改 bean definition 的能力，还有 pre-instantiate singletons 的能力</li>
<li>AliasRegistry: alias 管理接口，典型方法 registerAlias/removeAlias etc</li>
<li>BeanDefinitionRegistry: 继承自 AliasRegistry，增加了持有 bean definition 的功能，是 Spring factory 包下唯一一个有这种能力的接口</li>
<li>SimpleAliasRegistry: AliasRegistry 的简单实现<strong>类</strong>，内部通过 map 存储 name 和 alias 的对应关系</li>
<li>DefaultSingletonBeanRegistry: 类实现，强调 registry 和 singleton 属性，不包含任何 bean definition 的概念</li>
<li>FactoryBean: 不是普通的 bean, 这个 bean 的作用类似工厂，用来生产其他 bean 的. 通常用在 infrastructure code 中</li>
<li>FactoryBeanRegistrySupport: FactoryBeanRegistrySupport 派生类, 专门处理 FactoryBean 的 instance</li>
<li>AbstractBeanFactory: BeanFactory 抽象实现，并不具备 Listable 的功能，具备从 resource 中提取 bean definition 的功能，核心方法 getBeanDefinition</li>
<li>AbstractAutowireCapableBeanFactory: 实现了默认的 bean 创建逻辑，没有 bean definition 注册能力</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>BeanFactoryPostProcessor</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring compile spring framework in your local</title>
    <url>/hexo/2021/10/21/Spring-compile-spring-framework-in-your-local/</url>
    <content><![CDATA[<p>最近看的 Spring 课程上面，那些讲师都会把 Spring 源码下载到本地然后在上面写 demo, 做笔记什么的，感觉这个方式很棒，实践一下。</p>
<p>spring-framework 有自己的官方 <a href="git@github.com:spring-projects/spring-framework.git">git</a> 地址的，而且 readme 上也将本地编译的步骤写的很清楚了，再参考一下其他人的博客，难度应该不大。</p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><ol>
<li>下载 v5.2.x 源码进行编译(看 Supported Versions 里的信息，这个版本是支持 JDK8 的)</li>
<li>cd spring-framework 修改 gradle.build 文件配置，默认用的官方源会很慢</li>
<li><code>./gradlew build</code> 构建，这个命令会下载 gradle.properties 中指定的 gradle 版本用于构建</li>
<li>文章的末尾有说怎么导入 Idea, 先 <code>./gradlew :spring-oxm:compileTestJava</code></li>
<li>在 Idea 中新建项目，从 existing 的 code 中导入，选择 Gradle project，其他就依此点下去就行了，本地导入成功</li>
<li>新建一个 gralde module: spring-debug 写一个简单的 Spring demo, 测试项目是否构建成功</li>
<li>在 module 的 gradle 文件中 dependencies 下添加 spring-context 的依赖</li>
<li>测试通过，删掉 .git 文件，重新上传到自己账户下做为笔记源文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile(project(&quot;:spring-context&quot;))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; -- gradle.build 修改 repo 信息如下 --</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">            mavenCentral()</span><br><span class="line">            maven &#123; url &quot;https:&#x2F;&#x2F;repo.spring.io&#x2F;libs-spring-framework-build&quot; &#125;</span><br><span class="line">            maven &#123; url &quot;https:&#x2F;&#x2F;repo.spring.io&#x2F;snapshot&quot; &#125; &#x2F;&#x2F; Reactor</span><br><span class="line">            maven &#123;url &#39;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&#39;&#125; &#x2F;&#x2F;阿里云</span><br><span class="line">            maven &#123;url &#39;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;jcenter&#39;&#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h2><ol>
<li>使用 JDK8 编译 v5.3.12 的 code 有三个 module 编译失败，”Execution failed for task ‘:spring-instrument:compileJava’. &gt; invalid source release: 17”。将源码切换到 v5.2.18 成功，但是有几个 UT 挂了，直接删掉</li>
<li>lombok 不 work, 添加 @Data 之后对应的方法并没有生产，手写 getter/setter 可以 work</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/java_lyvee/article/details/107300648">CSDN</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>源码编译</tag>
      </tags>
  </entry>
  <entry>
    <title>Ioc 笔记</title>
    <url>/hexo/2021/10/13/Spring-jiemi-IoC/</url>
    <content><![CDATA[<p>从广义上讲，不管 Spring 框架自发布到现在经过多少次迭代，其本质是始终不变的，都是为了提供各种服务，以帮助我们简化基于 POJO 的 Java 应用程序开发。</p>
<p>Spring 框架为 POJO 提供的各种服务组成的生命树如下</p>
<p><img src="spring_tree.png" alt="spring tree"></p>
<p>Spring Core 是基础，提供了 IoC 容器的实现，帮助我们通过依赖注入方式管理对象之间的依赖关系。AOP 采用 Proxy 模式构建，结合 IoC, 增强 POJO 能力。</p>
<p>在 Core 和 AOP 的基础上，提供数据库和事物的服务， Spring 中的事务管理抽象层是 AOP 的最佳实践。</p>
<p>为了简化 Java EE 的各种服务，Spring 还提供了对应的简化服务，怎对 Web 开发，提供了对应的 Web MVC。</p>
<h2 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h2><p>IoC(Inverse of Control) 控制反转，也有人叫做依赖注入(DI - Dependency Injection). 不过 Spring 的创始人说这两个是不同的概念， DI 是 IoC 的一种表现形式，这里不纠结这么多。为了便于理解，从书上抄一段代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FXNewsProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IFXNewsListener newsListener;</span><br><span class="line">    <span class="keyword">private</span> IFXNewsPersister newsPersister;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAndPersistNews</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] newsIds = newsListener.getAvailableNewsIds();</span><br><span class="line">        <span class="keyword">if</span> (newsIds.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String newsId : newsIds) &#123;</span><br><span class="line">            FXNewsBean newsBean = newsListener.getNewsByPK(newsId);</span><br><span class="line">            newsPersister.persistNews(newsBean);</span><br><span class="line">            newsListener.postProcessIfNecessary(newsId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的类中为了提供 getAndPersistNews() 这个功能，需要调用内部两个接口的方法。传统做法中，为了拿到接口的实例我们会写类似如下的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FXNewsProvider</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.newsListener = <span class="keyword">new</span> DowJonesNewsListener();</span><br><span class="line">    <span class="keyword">this</span>.newsPersister = <span class="keyword">new</span> DowJonesNewsPersister();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式中，我们通过新建接口示例拿到对象并提供服务。但是细想一下，其实我们并不需要知道接口的具体实现，我们想要的只是，当我们想要用借口的服务时，有对应的实例能调用方法即可，至于示例的表现形式我们根本不 care。</p>
<p>PS: 这种做法的中二表现形式 - 神说，要有光！然后他就有了。</p>
<p>Spring 提供了 IoC Service Provider, 充当你的管家，他可以帮你管理实例，你只需要调用方法即可，不需要你管理 bean。将这个 bean 的控制权托管给 IoC Service, 这就是控制反转。</p>
<p>但是 IoC Service Provider 并不会读心术，当你给出上面的代码的时候，他并不知道去那里帮你找来接口的实例。这里就引入了一些规范，我们可以通过三种方式达到依赖注入的效果</p>
<ul>
<li>构造方式注入 - constructor injection</li>
<li>setter 方法注入 - setter injection</li>
<li>接口注入 - interface injection，过时了，了解即可</li>
</ul>
<p>一句话概括 IoC 可以带给我们什么：IoC 是一种可以帮助我们解偶各业务对象间依赖关系的对象绑定方式。</p>
<p>IoC 是一种策略，而 IoC Service Provider 就是这个策略的实施者。Spring 的 IoC 容器就是一个提供以来注入服务的 IoC Service Provider。</p>
<p>IoC Service Provider 职责就两个：</p>
<ul>
<li>业务对象的构建管理：将构建逻辑从客户端剥离，避免污染业务逻辑</li>
<li>业务对象间的依赖绑定：最艰巨也是最重要的任务，正确的匹配对象之间的依赖</li>
</ul>
<p>IoC Service Provider 产品使用的注册对象管理信息方式主要有</p>
<ul>
<li>直接编码方式</li>
<li>配置文件方式：properies, xml 等</li>
<li>元数据方式：注解</li>
</ul>
<p>Spring 的 IoC 容器是一个超集，IoC Service Provider 只是其中的一部分，除此之外，他还提供了对象生命周期管理，API 等很多功能。</p>
<p><img src="spring_ioc.png" alt="Spring IoC"></p>
<p>Spring 提供了两种容器类型</p>
<ul>
<li>BeanFactory: 基础类型的 IoC 容器，提供完整的 IoC 服务支持，采用 lazy-load。</li>
<li>ApplicationContext: 构建与 BeanFactory 之上，提供其他一些高级特性，比如 event，i18n 等。</li>
</ul>
<p><img src="beanfactory_applicationcontext.png" alt="ioc container relationship"></p>
<p>BeanFactory 顾名思义就是一个工厂，你提供原料然后他给你成品，至于中间过程，作为用户，你并不需要知道，这是框架的职责范围。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Q: Spring 的 容器 怎么体现的</p>
<p>A: 容器即装东西的地方，项目中的 Bean 都是通过他保管的(存在 map 中)，所以还是很贴切的</p>
]]></content>
      <categories>
        <category>Spring 揭秘</category>
      </categories>
      <tags>
        <tag>IoC</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring post processor</title>
    <url>/hexo/2021/10/25/Spring-post-processor/</url>
    <content><![CDATA[<p>Spring 中有两种 post processor，一种是 BeanFactoryPostProcessor, 另一种是 BeanPostProcessor. BeanFactoryPostProcessor 执行时机为：bean definition 加载完成之后，bean 实例化之前。而 BeanPostProcessor 则是 bean 初始化的后置处理器，包含两个方法，可以分别在初始化之前和之后执行。</p>
<p>总结各个扩展点的执行顺序：@PostConstruct -&gt; InitializingBean -&gt; initMethod -&gt; @PreDestory -&gt; DisposableBean -&gt; destoryMethod</p>
<h2 id="BeanFactoryPostProcessor-使用案例"><a href="#BeanFactoryPostProcessor-使用案例" class="headerlink" title="BeanFactoryPostProcessor 使用案例"></a>BeanFactoryPostProcessor 使用案例</h2><h3 id="Xml-配置的方式"><a href="#Xml-配置的方式" class="headerlink" title="Xml 配置的方式"></a>Xml 配置的方式</h3><p>不需要添加额外的注解，新建测试 bean 和 BeanFactoryPostProcessor 之后，通过 xml 关联，并在测试代码中通过 ClassPathXmlApplicationContext 加载配置即可。示例说明，测试 bean 中包含 name, age 属性，我们通过 BeanFactoryPostProcessor 在 bean definition 加载完之后修改 age 的值并将 scope type 修改为 prototype</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------- BeanFactoryPostProcessor::postProcessBeanFactory&quot;</span>);</span><br><span class="line">        BeanDefinition bd = beanFactory.getBeanDefinition(<span class="string">&quot;postProcessorTestBean&quot;</span>);</span><br><span class="line"></span><br><span class="line">        MutablePropertyValues propertyValues = bd.getPropertyValues();</span><br><span class="line">        <span class="keyword">if</span> (propertyValues.contains(<span class="string">&quot;age&quot;</span>)) &#123;</span><br><span class="line">            propertyValues.addPropertyValue(<span class="string">&quot;age&quot;</span>, <span class="number">24</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bd.setScope(BeanDefinition.SCOPE_PROTOTYPE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostProcessorTestBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter + setter + toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;postProcessorTestBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bin.postprocessor.PostProcessorTestBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Tom&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanFactoryPostProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bin.postprocessor.MyBeanFactoryPostProcessor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_config_with_xml</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext ctx2 = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;postprocessor/bean_with_bean_factory.xml&quot;</span>);</span><br><span class="line">    PostProcessorTestBean bean2 = (PostProcessorTestBean) ctx2.getBean(<span class="string">&quot;postProcessorTestBean&quot;</span>);</span><br><span class="line">    System.out.println(bean2);</span><br><span class="line">    System.out.println(<span class="string">&quot;------- Is singleton: &quot;</span> + ctx2.isSingleton(<span class="string">&quot;postProcessorTestBean&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ------- BeanFactoryPostProcessor::postProcessBeanFactory</span></span><br><span class="line"><span class="comment">// PostProcessorTestBean&#123;name=&#x27;Tom&#x27;, age=24&#125;</span></span><br><span class="line"><span class="comment">// ------- Is singleton: false</span></span><br></pre></td></tr></table></figure>

<h3 id="Annotation-配置的方式"><a href="#Annotation-配置的方式" class="headerlink" title="Annotation 配置的方式"></a>Annotation 配置的方式</h3><p>沿用之前的 bean 和 processor 代码，分别为他们添加 @Component 和 @Value 注解并设置值，通过 AnnotationConfigApplicationContext 加载配置执行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_config_with_annotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(<span class="string">&quot;com.bin.postprocessor&quot;</span>);</span><br><span class="line">    PostProcessorTestBean bean = (PostProcessorTestBean) ctx.getBean(<span class="string">&quot;postProcessorTestBean&quot;</span>);</span><br><span class="line">    System.out.println(bean);</span><br><span class="line">    System.out.println(<span class="string">&quot;------- Is singleton; &quot;</span> + ctx.isSingleton(<span class="string">&quot;postProcessorTestBean&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ------- BeanFactoryPostProcessor::postProcessBeanFactory</span></span><br><span class="line"><span class="comment">// PostProcessorTestBean&#123;name=&#x27;Jack&#x27;, age=22&#125;</span></span><br><span class="line"><span class="comment">// ------- Is singleton; false</span></span><br></pre></td></tr></table></figure>

<p>PS: 这里需要注意的是，value 并没有改变，因为完成 bean definition 加载的时候，@Value 并没有完成解析，所以修改时无效的。这一点可以看看对应的源码，后面再完善一下。从 BeanFactoryPostProcessor 的定义来说，这种用法才正确，之前的用法反而有点邪道的意思了。</p>
<h2 id="BeanPostProcessor-使用案例"><a href="#BeanPostProcessor-使用案例" class="headerlink" title="BeanPostProcessor 使用案例"></a>BeanPostProcessor 使用案例</h2><p>和之前的 BeanFactoryPostProcessor 使用基本是一样的套路</p>
<h3 id="Xml-配置的方式-1"><a href="#Xml-配置的方式-1" class="headerlink" title="Xml 配置的方式"></a>Xml 配置的方式</h3><p>bean 沿用之前的, BeanPostProcess 如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------- BeanPostProcessor::postProcessBeforeInitialization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (beanName.endsWith(<span class="string">&quot;postProcessorTestBean&quot;</span>)) &#123;</span><br><span class="line">            ((PostProcessorTestBean) bean).setAge(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------- BeanPostProcessor::postProcessAfterInitialization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (beanName.endsWith(<span class="string">&quot;postProcessorTestBean&quot;</span>)) &#123;</span><br><span class="line">            ((PostProcessorTestBean) bean).setName(<span class="string">&quot;Updated&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;postProcessorTestBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bin.postprocessor.PostProcessorTestBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Tom&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPostProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bin.postprocessor.MyBeanPostProcessor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_bean_post_processor_xml</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;postprocessor/bean_post_processor.xml&quot;</span>);</span><br><span class="line">    System.out.println(ctx.getBean(<span class="string">&quot;postProcessorTestBean&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ------- PostProcessorTestBean::constructor</span></span><br><span class="line"><span class="comment">// ------- BeanPostProcessor::postProcessBeforeInitialization</span></span><br><span class="line"><span class="comment">// ------- BeanPostProcessor::postProcessAfterInitialization</span></span><br><span class="line"><span class="comment">// ------- print in test: PostProcessorTestBean&#123;name=&#x27;Updated&#x27;, age=100&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Annotation-配置的方式-1"><a href="#Annotation-配置的方式-1" class="headerlink" title="Annotation 配置的方式"></a>Annotation 配置的方式</h3><p>为前面的 processor 类添加 Component 注解并通过 AnnotationConfigApplicationContext 加载即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_bean_post_processor_annotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(<span class="string">&quot;com.bin.postprocessor&quot;</span>);</span><br><span class="line">    System.out.println(ctx.getBean(<span class="string">&quot;postProcessorTestBean&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ------- PostProcessorTestBean::constructor</span></span><br><span class="line"><span class="comment">// ------- BeanPostProcessor::postProcessBeforeInitialization</span></span><br><span class="line"><span class="comment">// ------- BeanPostProcessor::postProcessAfterInitialization</span></span><br><span class="line"><span class="comment">// PostProcessorTestBean&#123;name=&#x27;Updated&#x27;, age=100&#125;</span></span><br></pre></td></tr></table></figure>

<p>由此可见 initialization 和属性设置是两个概念，属性设置应该是在实例化之后，BeanPostProcessor 之前的操作，不然 age 就会改变了</p>
<h2 id="顺便加介绍一下-initialization-的方法"><a href="#顺便加介绍一下-initialization-的方法" class="headerlink" title="顺便加介绍一下 initialization 的方法"></a>顺便加介绍一下 initialization 的方法</h2><h3 id="Xml-配置的方式-2"><a href="#Xml-配置的方式-2" class="headerlink" title="Xml 配置的方式"></a>Xml 配置的方式</h3><p>之前说过 BeanPostProcessor 是初始化阶段的后置处理器，初始化可以通过在 xml 中配置 init-method 实现，对应的还有销毁方法 destory-method</p>
<p>在之前的测试 bean 中新加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;------- initMethod&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;------- destroyMethod&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 xml 中 bean 声明部分指定对应的方法，再结合 processor 查看执行顺序</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;postProcessorTestBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bin.postprocessor.PostProcessorTestBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Tom&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPostProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bin.postprocessor.MyBeanPostProcessor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_init_cleanup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ConfigurableApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;postprocessor/bean_init_cleanup.xml&quot;</span>);</span><br><span class="line">    System.out.println(ctx.getBean(<span class="string">&quot;postProcessorTestBean&quot;</span>));</span><br><span class="line">    ctx.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ------- PostProcessorTestBean::constructor</span></span><br><span class="line"><span class="comment">// ------- BeanPostProcessor::postProcessBeforeInitialization</span></span><br><span class="line"><span class="comment">// ------- initMethod</span></span><br><span class="line"><span class="comment">// ------- BeanPostProcessor::postProcessAfterInitialization</span></span><br><span class="line"><span class="comment">// PostProcessorTestBean&#123;name=&#x27;Updated&#x27;, age=100&#125;</span></span><br><span class="line"><span class="comment">// ------- destroyMethod</span></span><br></pre></td></tr></table></figure>

<p>PS: close() 是 ConfigurableApplicationContext 中添加的接口，再上层就不具备这个能力了</p>
<h3 id="Annotation-配置的方式-2"><a href="#Annotation-配置的方式-2" class="headerlink" title="Annotation 配置的方式"></a>Annotation 配置的方式</h3><p>上面的功能我们可以通过创建一个 @Configuration 类达到同样的效果。 这时，原来 bean 上的 @Component 标签需要去掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;cleanUp&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PostProcessorTestBean <span class="title">getBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------- init LifecycleConfig&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PostProcessorTestBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_config</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ConfigurableApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(<span class="string">&quot;com.bin.postprocessor&quot;</span>);</span><br><span class="line">    System.out.println(ctx.getBean(<span class="string">&quot;postProcessorTestBean&quot;</span>));</span><br><span class="line">    ctx.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------- PostProcessorTestBean::constructor</span></span><br><span class="line"><span class="comment">// ------- BeanPostProcessor::postProcessBeforeInitialization</span></span><br><span class="line"><span class="comment">// ------- initMethod</span></span><br><span class="line"><span class="comment">// ------- BeanPostProcessor::postProcessAfterInitialization</span></span><br><span class="line"><span class="comment">// ------- print in test: PostProcessorTestBean&#123;name=&#x27;Updated&#x27;, age=100&#125;</span></span><br><span class="line"><span class="comment">// ------- destroyMethod</span></span><br></pre></td></tr></table></figure>

<p>类似的还有 @PostConstruct/@PreDestory，我们为之前的测试 bean 新增两个测试方法并在此运行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postConstruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;------- invoke postConstruct&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PreDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;------- invoke PreDestroy&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------- PostProcessorTestBean::constructor</span></span><br><span class="line"><span class="comment">// ------- BeanPostProcessor::postProcessBeforeInitialization</span></span><br><span class="line"><span class="comment">// ------- @PostConstruct</span></span><br><span class="line"><span class="comment">// ------- initMethod</span></span><br><span class="line"><span class="comment">// ------- BeanPostProcessor::postProcessAfterInitialization</span></span><br><span class="line"><span class="comment">// ------- print in test: PostProcessorTestBean&#123;name=&#x27;Updated&#x27;, age=100&#125;</span></span><br><span class="line"><span class="comment">// ------- @PreDestroy</span></span><br><span class="line"><span class="comment">// ------- destroyMethod</span></span><br></pre></td></tr></table></figure>

<p>可以看到 postConstruct 和 PreDestroy 是包在 initialization 最外层的</p>
<h3 id="接口方式"><a href="#接口方式" class="headerlink" title="接口方式"></a>接口方式</h3><p>除此之外还有一种通过实现接口来扩展的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostProcessorTestBean</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------- InitializingBean::afterPropertiesSet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------- DisposableBean::destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------- PostProcessorTestBean::constructor</span></span><br><span class="line"><span class="comment">// ------- BeanPostProcessor::postProcessBeforeInitialization</span></span><br><span class="line"><span class="comment">// ------- @PostConstruct</span></span><br><span class="line"><span class="comment">// ------- InitializingBean::afterPropertiesSet</span></span><br><span class="line"><span class="comment">// ------- initMethod</span></span><br><span class="line"><span class="comment">// ------- BeanPostProcessor::postProcessAfterInitialization</span></span><br><span class="line"><span class="comment">// ------- print in test: PostProcessorTestBean&#123;name=&#x27;Updated&#x27;, age=100&#125;</span></span><br><span class="line"><span class="comment">// ------- @PreDestroy</span></span><br><span class="line"><span class="comment">// ------- DisposableBean::destroy</span></span><br><span class="line"><span class="comment">// ------- destroyMethod</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>post processor</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 怎么实现 server 启动之后立刻执行一个服务</title>
    <url>/hexo/2020/11/12/Spring-service-run-once-after-server-up/</url>
    <content><![CDATA[<p>最近遇到一个需求需要在 Spring web service 启动之后立即执行，类似一个初始化的工作，搜出来有好多实现方式，稍微记录一下他们的区别</p>
<h2 id="ApplicationListener"><a href="#ApplicationListener" class="headerlink" title="ApplicationListener"></a>ApplicationListener</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitTraceSourceEventListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationReadyEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationReadyEvent applicationReadyEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitTraceSourceEventListener triggered...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProjectConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = </span><br><span class="line">   LoggerFactory.getLogger(ProjectConfiguration.class);</span><br><span class="line"></span><br><span class="line">   <span class="meta">@EventListener(ApplicationReadyEvent.class)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomethingAfterStartup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;hello world, I have just started up&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SpringBootServletInitializer"><a href="#SpringBootServletInitializer" class="headerlink" title="SpringBootServletInitializer"></a>SpringBootServletInitializer</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(Application.class, args);</span><br><span class="line"></span><br><span class="line">        context.getBean(Table.class).fillWithTestdata(); // &lt;-- here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Monitor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> SomeService service</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// start your monitoring in here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ApplicationRunner"><a href="#ApplicationRunner" class="headerlink" title="ApplicationRunner"></a>ApplicationRunner</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments applicationArguments)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//code goes here</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="CommandLineRunner"><a href="#CommandLineRunner" class="headerlink" title="CommandLineRunner"></a>CommandLineRunner</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandLineAppStartupRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(CommandLineAppStartupRunner.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String...args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Application started with command-line arguments: &#123;&#125; . \n To kill this application, press Ctrl + C.&quot;</span>, Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="InitializingBean"><a href="#InitializingBean" class="headerlink" title="InitializingBean"></a>InitializingBean</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInitializingBean</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = ...;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;InitializingBean#afterPropertiesSet()&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>howto</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring XML 转化为 bean definition</title>
    <url>/hexo/2022/01/04/Spring-xml-to-bean-definition/</url>
    <content><![CDATA[<p>本文主要 focus 在 xml 到 bean definition 转化的过程，即 AbstractApplicationContext 的 refresh 方法的 obtainFreshBeanFactory()。转化过程是这个方法的一部分。本文会先介绍一些这个过程中用到的一些底层类实现，最后再总的将这部分内容捋一遍。</p>
<h2 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h2><h2 id="BeanDefinitionHolder"><a href="#BeanDefinitionHolder" class="headerlink" title="BeanDefinitionHolder"></a>BeanDefinitionHolder</h2><p>BeanDefinitionHolder 是解析 xml 时的一个中间类，不对外暴露。只包含了三个属性 beanDefinition, beanName 和 alias。代表一个被解析的 bean 节点。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring5 视频笔记</title>
    <url>/hexo/2020/09/08/Spring5-note/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1WE411d7Dv">B 站狂神 Spring5 教程笔记</a></p>
<h2 id="Spring-基本概念"><a href="#Spring-基本概念" class="headerlink" title="Spring 基本概念"></a>Spring 基本概念</h2><p>七大组成</p>
<ol>
<li>AOP</li>
<li>ORM</li>
<li>Web</li>
<li>DAO</li>
<li>Context</li>
<li>Web MVC</li>
<li>Core</li>
</ol>
<ul>
<li>Spring Boot<ul>
<li>快速开发脚手架</li>
<li>快速开发单个微服务</li>
<li>约定大于配置</li>
</ul>
</li>
<li>Spring Cloud<ul>
<li>基于 SpringBoot 实现的</li>
</ul>
</li>
</ul>
<p>弊端：发展太久，违背原来的理念。配置繁琐，人称 ‘配置地狱’</p>
<p>Spring 和 SpringMVC 的区别：都是容器，spring 用来管理 dao 和 service，springmvc 用来管理 controller</p>
<h2 id="IoC-理论推导-（Inversion-of-Control）"><a href="#IoC-理论推导-（Inversion-of-Control）" class="headerlink" title="IoC 理论推导 （Inversion of Control）"></a>IoC 理论推导 （Inversion of Control）</h2><p>原来的实现</p>
<ol>
<li>UserDao 接口</li>
<li>UserDaoImpl 实现类</li>
<li>UserService 业务接口</li>
<li>UserServiceImpl 业务实现类</li>
</ol>
<p>用户的需求可能影响到原来的代码，我们需要根据用户需求修改源代码（修改 UserDaoImpl 中的 Dao 生成）</p>
<p>通过 set 方法注入后，实现被动接受对象，需求由外部决定。不在管理对象创建，专注于扩展业务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserServiceImpl 中对 UserDao 的引用</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 set 动态注入实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IoC-的本质"><a href="#IoC-的本质" class="headerlink" title="IoC 的本质"></a>IoC 的本质</h2><p>控制反转是一种<strong>设计思想</strong>，DI（Dependency Injection） 是 IoC 的一种实现方式，将对象的创建交给第三方，获取对象的方式的反转。</p>
<p>Spring 是一种实现控制反转的 IoC 容器，常见的有两种对象控制方式，XML 和 注解。XML 配置 Bean, 定义和实现是分离的。注解方式则把两者结合在了一起，从而达到零配置。</p>
<p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-metadata">Spring Framework 官方文档</a></p>
<h2 id="IoC创建对象的方式"><a href="#IoC创建对象的方式" class="headerlink" title="IoC创建对象的方式"></a>IoC创建对象的方式</h2><ol>
<li>默认使用无参构造创建对象</li>
<li>通过 constructor-arg 标签实现带参构造器功能</li>
</ol>
<p>在 xml 加载完后，配置的对象就已经被创建了</p>
<h2 id="Spring-配置说明"><a href="#Spring-配置说明" class="headerlink" title="Spring 配置说明"></a>Spring 配置说明</h2><ol>
<li>alias 别名，和 bean 的 name 属性重复，而且 name 更灵活</li>
<li>bean 对象生成配置</li>
<li>import 合并多个 xml 配置文件</li>
</ol>
<h2 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI - 依赖注入"></a>DI - 依赖注入</h2><ol>
<li>构造器注入</li>
<li>Set方式注入 - 即依赖注入</li>
<li>其他注入</li>
</ol>
<p>依赖： bean 对象的创建依赖容器<br>注入： bean 对象的所有属性由容器来注入</p>
<h2 id="P-C命名空间注入"><a href="#P-C命名空间注入" class="headerlink" title="P/C命名空间注入"></a>P/C命名空间注入</h2><p>在 xml 中导入约束即可使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line"> xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure>

<p>P 可以扩展属性注入，一个 tag 解决，不用嵌套xml了</p>
<p>C 可以扩展构造器</p>
<h2 id="Bean-的-作用域-scope"><a href="#Bean-的-作用域-scope" class="headerlink" title="Bean 的 作用域(scope)"></a>Bean 的 作用域(scope)</h2><ol>
<li>singleton - 默认域</li>
<li>prototype - 每次取 bean 都会产生新对象</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.something.DefaultAccountService&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.something.DefaultAccountService&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Bean-的自动装配"><a href="#Bean-的自动装配" class="headerlink" title="Bean 的自动装配"></a>Bean 的自动装配</h2><ul>
<li>自动装配是 Spring 满足 bean 依赖的一种方式</li>
<li>Spring 在上下文中自动寻找，并自动给 bean 装配属性</li>
</ul>
<p>Spring 三种装配方式：</p>
<ol>
<li>xml</li>
<li>注解</li>
<li>隐式的自动装配 bean</li>
</ol>
<h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><p>Spring4 之后，要使用注解需要保证 AOP 包已经导入。XML 也需要添加特殊的约束 <code>&lt;context:annotation-config/&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置扫描路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.jzheng.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>bean - @Component</li>
<li>属性 - @Value</li>
<li>衍生的注解 - @Repository - for dao/@Service - for service/@Controller - for controller 作用都是将对象注入到容器</li>
<li>自动装配<ol>
<li>@Autowired 通过类型，名字装配。如果不能自动装配属性，可以通过 @Qualifier(value=”xxx)</li>
<li>@Nullable，允许为空</li>
<li>@Resource，通过名字，类型装配</li>
</ol>
</li>
<li>作用域 - @Scope</li>
<li>小结: XML 更加万能，使用任何场合；注解只能在自己的class 里使用。</li>
</ol>
<p>推荐做法：XML 用来管理 Bean，注解只用来注入属性</p>
<h2 id="使用-Java-的方式配置-Spring"><a href="#使用-Java-的方式配置-Spring" class="headerlink" title="使用 Java 的方式配置 Spring"></a>使用 Java 的方式配置 Spring</h2><p>JavaConfig 是 Spring 一个子项目， Spring4 之后成为核心项目。通过 @Configuration 注解来实现，可以代替 xml。也有像 Import 这样的东西，可以包含其他配置类。</p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>Spring 必问题 - SpringAOP 和 SpringMVC</p>
<p>代理模式分类</p>
<ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>角色分析</p>
<ul>
<li>抽象角色：一般是接口或抽象类</li>
<li>真实角色：被代理的角色</li>
<li>代理角色：代理真实角色，代理后做一些操作</li>
<li>客户：访问代理对象的人</li>
</ul>
<p>优点：</p>
<ul>
<li>使真实对象操作更纯粹，不用去关注公共业务</li>
<li>公共业务交给代理，业务分工</li>
<li>公共业务扩展方便</li>
</ul>
<p>缺点： 一个真实角色产生一个代理角色，代码量翻倍</p>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><ul>
<li>动态代理和静态代理角色一样</li>
<li>动态代理的代理类使动态生成，不是直接写好的</li>
<li>动态代理分两大类：基于接口的动态代理/基于类的动态代理<ul>
<li>接口 - JDK动态代理</li>
<li>类 - cglib</li>
<li>java字节码 - javasist</li>
</ul>
</li>
</ul>
<p>两个类： Proxy / InvocationHandler</p>
<p>Proxy: 在 handler 中被调用，产生代理的实例</p>
<p>InvocationHandler: 自定义调用过程，返回执行结果</p>
<p>优点：静态的有点 + 一个动态代理类代理的使一个接口，一般对应一类业务</p>
<h2 id="AOP-横向扩展功能"><a href="#AOP-横向扩展功能" class="headerlink" title="AOP - 横向扩展功能"></a>AOP - 横向扩展功能</h2><h3 id="配置实现01"><a href="#配置实现01" class="headerlink" title="配置实现01"></a>配置实现01</h3><p>目标业务点：pointcut, 需要额外添加的附属动作：adviser(MethodBeforeAdvice/AfterReturningAdvice)</p>
<p>然后添加配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jzheng.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jzheng.log.Log&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jzheng.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--config AOP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- point cut --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.jzheng.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 执行环绕增强 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置实现02"><a href="#配置实现02" class="headerlink" title="配置实现02"></a>配置实现02</h3><p>也可以用自定义类，使用更简单，但是功能比之前的弱，不能操作 Method 之类的属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointCut</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------&gt; before method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&gt; after method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jzheng.diy.DiyPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义切面 ref 要引用的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切入点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.jzheng.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="注解实现"><a href="#注解实现" class="headerlink" title="注解实现"></a>注解实现</h3><p>类添加 Aspect 注解， 在方法上添加注解， 方法注解中可以指定切点。执行顺序：环绕前 -&gt; 方法前 -&gt; 方法 -&gt; 环绕后 -&gt; 方法后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointCut</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.jzheng.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&gt; before [Anno type]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.jzheng.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&gt; after [Anno type]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.jzheng.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&gt; around before [Anno type]&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Signature: &quot;</span> + proceedingJoinPoint.getSignature());</span><br><span class="line">        Object proceed = proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&gt; around after [Anno type]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式3， 注解方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jzheng.diy.AnnotationPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启注解支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="整合-Mybatis"><a href="#整合-Mybatis" class="headerlink" title="整合 Mybatis"></a>整合 Mybatis</h2><ol>
<li>导入包<ol>
<li>junit</li>
<li>mybatis</li>
<li>mysql数据库</li>
<li>spring相关的jar</li>
<li>aop织入</li>
<li>mybatis-spring [new]</li>
</ol>
</li>
<li>编写配置文件</li>
<li>测试</li>
</ol>
<h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><p>学到第 23 课，跳出去先把 Mybatis 看完再回来。。。。</p>
<ol>
<li>导包<ul>
<li>junit</li>
<li>mybatis</li>
<li>mysql</li>
<li>spring</li>
<li>aop织入</li>
<li>mybatis-spring</li>
</ul>
</li>
<li>配置文件</li>
<li>写测试</li>
</ol>
<h3 id="mybatis-回忆"><a href="#mybatis-回忆" class="headerlink" title="mybatis 回忆"></a>mybatis 回忆</h3><ol>
<li>编写实体类</li>
<li>编写核心配置文件</li>
<li>编写接口</li>
<li>编写 Mapper.xml</li>
<li>测试</li>
</ol>
<h3 id="mybatis-spring"><a href="#mybatis-spring" class="headerlink" title="mybatis-spring"></a>mybatis-spring</h3><ol>
<li>编写数据源配置</li>
<li>sqlSessionFactory</li>
<li>sqlSessionTemplate</li>
</ol>
<h2 id="事务回顾"><a href="#事务回顾" class="headerlink" title="事务回顾"></a>事务回顾</h2><ul>
<li>要么都成功，要么都失败</li>
<li>十分重要，涉及一致性，不能马虎</li>
<li>确保完整性和一致性</li>
</ul>
<p>事务 ACID 原则：</p>
<ul>
<li>原子性</li>
<li>一致性</li>
<li>隔离性，多个业务可能操作一个资源，防止数据损坏</li>
<li>持久性，十五一旦提交，无论系统发生什么问题，结果都不会被影响，被持久化的写到存储器中</li>
</ul>
<h3 id="spring-中的事务管理"><a href="#spring-中的事务管理" class="headerlink" title="spring 中的事务管理"></a>spring 中的事务管理</h3><ul>
<li>声明式事务 - AOP</li>
<li>编程式事务 - 需要在代码中进行事务管理，侵入性太强，不推荐</li>
</ul>
<p>为什么需要事务：</p>
<ol>
<li>不添加事务管理，可能存在事务提交不一致</li>
<li>如果不在 spring 中配置声明式事务，我们就需要在代码中手动配置事务</li>
<li>在项目的开发中十分重要，涉及到数据的一致性</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>视频笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC 视频笔记</title>
    <url>/hexo/2020/10/14/SpringMVC-quick-start/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1aE41167Tu?p=3">B 站狂神 SpringMVC 教程笔记</a></p>
<h2 id="01-Servlet-review"><a href="#01-Servlet-review" class="headerlink" title="01 Servlet review"></a>01 Servlet review</h2><h3 id="准备工作-提前本地安装-Tomcat"><a href="#准备工作-提前本地安装-Tomcat" class="headerlink" title="准备工作 提前本地安装 Tomcat"></a>准备工作 提前本地安装 Tomcat</h3><ol>
<li>访问<a href="https://tomcat.apache.org/download-90.cgi">官网</a>下载安装包</li>
<li>点击 Binary Distributions 下的 <code>32-bit/64-bit Windows Service Installer (pgp, sha512)</code> 下载 exe 可执行文件</li>
<li>点击，傻瓜式安装</li>
<li>点击提示框，启动 访问 <code>http://localhost:8080/</code> 看到页面则安装成功</li>
</ol>
<p>配置环境变量：通过上面的傻瓜式安装，Tomcat 默认安装在 <code>C:\Program Files\Apache Software Foundation\Tomcat 9.0</code> 这个路径下</p>
<p>我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 高级 -&gt; 环境变量, 在系统变量中添加：</p>
<table>
<thead>
<tr>
<th align="left">变量名</th>
<th align="left">值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">TOMCAT_HOME</td>
<td align="left">C:\Program Files\Apache Software Foundation\Tomcat 9.0</td>
</tr>
<tr>
<td align="left">CATALINA_HOME</td>
<td align="left">C:\Program Files\Apache Software Foundation\Tomcat 9.0</td>
</tr>
</tbody></table>
<p>修改变量Path, 在原来的值后面添加 <code>;%TOMCAT_HOME%\bin;%CATALINA_HOME%\lib</code></p>
<h3 id="子项目创建"><a href="#子项目创建" class="headerlink" title="子项目创建"></a>子项目创建</h3><p>正常步骤建项目，创建 maven 子 module，然后 module 上邮件选中 Add Framework Support -&gt; Web Application 来创建 web app 会比较省事。可以看到在目录中新增了名为 web 的文件夹</p>
<p>在 src 下新建一个测试用 servlet 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取前端参数</span></span><br><span class="line">        String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;add&quot;</span>)) &#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;execute Add...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;delete&quot;</span>)) &#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;execute Delete...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 调用业务层</span></span><br><span class="line">        <span class="comment">// 3. 试图转发或重定向</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>web -&gt; WEB-INF 下新建 jsp 文件夹，创建 test.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>修改 WEB-INF 下的 web.xml 配置路由</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.jzheng.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>工具栏 -&gt; edit configuration -&gt; 点击 + 号，选中 Tomcat 配置本地 tomcat， 点击 fix -&gt; 启动服务器。访问 <code>http://localhost:8080/springmvn_01_servlet_war_exploded/hello?method=add</code> 可以看 msg 显示在页面上。</p>
<p>PS：应该是哪里配置有问题，视频上面直接访问 <code>http://localhost:8080/hello?method=add</code> 即可，回头看一下前面的 JavaWeb 项目应该就知道了，暂时没什么关系，无伤大雅</p>
<h2 id="SpringMVC-start"><a href="#SpringMVC-start" class="headerlink" title="SpringMVC start"></a>SpringMVC start</h2><p>PS: 在官方文档页面，修改 current 为其他版本可以访问老版本的文档,例如 <code>https://docs.spring.io/spring-framework/docs/4.3.24.RELEASE/spring-framework-reference/</code></p>
<p>PPS: 这个可以在 Tomcat 配置页面的 Deployment tab 下，将 Application context 内容直接改为 <code>/</code> 即可</p>
<p>特点：</p>
<ol>
<li><p>轻量</p>
</li>
<li><p>基于响应</p>
</li>
<li><p>兼容 Spring</p>
</li>
<li><p>约定优于配置</p>
</li>
<li><p>功能强大</p>
</li>
<li><p>简介灵活</p>
</li>
<li><p>用的人多</p>
</li>
<li><p>创建子项目，配置为 web app</p>
</li>
<li><p>Porject Structure -&gt; Artifacts，选中项目 -&gt; WEB-INF 下新建 lib 包手动把包导进去（idea 的bug）-&gt; 点击 + 号 -&gt; Library files 全选</p>
</li>
<li><p>resource 下新建 xml 文件，选择 Spring config 类型，可以自带配置信息</p>
</li>
<li><p>配置 WEB-INF 下的 web.xml</p>
</li>
<li><p>创建 Controller 添加业务逻辑</p>
</li>
<li><p>配置启动 Tomcat，访问 URL 看结果</p>
</li>
</ol>
<p>这部分主要是为了讲解 SpringMVC 的原理，真实环境都用注解开发，会方便很多。</p>
<h2 id="SpringMVC-注解版"><a href="#SpringMVC-注解版" class="headerlink" title="SpringMVC 注解版"></a>SpringMVC 注解版</h2><ol>
<li>创建工程转化为 web app</li>
<li>在 web 创建 jsp 目录，配置 web.xml 配置内容和之前完全一样</li>
<li>配置 springmvc-config.xml, 指定注解扫描路径，handler 和视图解析器</li>
<li>创建 controller 添加注解</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫包，让指定包下的注解生效，IOC 容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.jzheng.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 让 spring MVC 不处理静态资源（.css .js .html...） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 代替 HandlerMapping 和 HandlerAdapter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器: 模板引擎 Thymeleaf, Freemaker 等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定 URL</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Hello, SpringMVC&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>; <span class="comment">// 被视图解析器处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="04-回顾"><a href="#04-回顾" class="headerlink" title="04 回顾"></a>04 回顾</h2><p>回顾了两种添加 Controller 的方法，还有 RequestMapping 添加在 class 和 method 上的区别</p>
<h3 id="Restful-风格"><a href="#Restful-风格" class="headerlink" title="Restful 风格"></a>Restful 风格</h3><ul>
<li>@PathVariable 配置变量</li>
<li>@RequestMapping(value = “/add/{a}/{b}”, method = RequestMethod.POST) 配置请求方式</li>
<li>@GetMapping(value = “/add/{a}/{b}”) 请求方式简写</li>
</ul>
<h3 id="专发和重定向"><a href="#专发和重定向" class="headerlink" title="专发和重定向"></a>专发和重定向</h3><p>forward，redirect</p>
<h3 id="接受前端参数"><a href="#接受前端参数" class="headerlink" title="接受前端参数"></a>接受前端参数</h3><p>简单类型传递</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>复杂类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// http://localhost:8080/t2?username=jack&amp;id=jjjj&amp;age=3</span></span><br><span class="line"><span class="comment">// 终端能打印出对象</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/t2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">complexType</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h3><p>web 文件夹下添加测试用的 jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;/e/t1&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>创建测试 controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/e/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(String name, Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;output: &quot;</span> + name);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 <code>localhost:8080/form.jsp</code> 输入中文，可以看到输出乱码。</p>
<p>解决方案：过滤器</p>
<h4 id="自建过滤器"><a href="#自建过滤器" class="headerlink" title="自建过滤器"></a>自建过滤器</h4><p>新建 filter 文件夹，添加过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>web.xml</code> 下配置过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.jzheng.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="框架自带过滤器"><a href="#框架自带过滤器" class="headerlink" title="框架自带过滤器"></a>框架自带过滤器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 框架自带的过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>build_in_encoding_filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>build_in_encoding_filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h3><p>简单介绍一下 js 对象和字符串的转化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> user = &#123;</span><br><span class="line">        name: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">        age: <span class="number">3</span>,</span><br><span class="line">        gender: <span class="string">&quot;男&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// js 对象转化为 json 对象</span></span><br><span class="line">    <span class="keyword">var</span> json  = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line">    <span class="built_in">console</span>.log(json);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// json 对象转化为 JavaScript 对象</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h3><ol>
<li>引入 jackson-databind 包</li>
<li>创建测试类 User</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserController</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/j1&quot;, produces=&quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span> <span class="comment">// 不走视图解析器，直接返回字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">// jackson - ObjectMapper</span></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;杰克&quot;</span>, <span class="number">1</span>, <span class="string">&quot;man&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String ret = objectMapper.writeValueAsString(user);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.toString() 返回 User(name=Jack01, age=1, gender=man)</span></span><br><span class="line"><span class="comment">// 访问 /j1 输出：&#123;&quot;name&quot;:&quot;Jack01&quot;,&quot;age&quot;:1,&quot;gender&quot;:&quot;man&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>结果中包含中文会乱码，这时可以配置 RequestMapping 注解也可以配置 springmvc 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    beans 头里面确认包含</span></span><br><span class="line"><span class="comment">    http://www.springframework.org/schema/mvc</span></span><br><span class="line"><span class="comment">    http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="line"><span class="comment">    不然会抛错：通配符的匹配很全面, 但无法找到元素 &#x27;mvc:annotation-driven&#x27; 的声明</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Jackson 乱码问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="SSM-整合"><a href="#SSM-整合" class="headerlink" title="SSM 整合"></a>SSM 整合</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> ssmbuild;</span><br><span class="line"><span class="keyword">USE</span> ssmbuild;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`books`</span>(</span><br><span class="line"><span class="string">`bookID`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;书id&#x27;</span>,</span><br><span class="line"><span class="string">`bookName`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;书名&#x27;</span>,</span><br><span class="line"><span class="string">`bookCounts`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line"><span class="string">`detail`</span> <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line"><span class="keyword">KEY</span> <span class="string">`bookID`</span>(<span class="string">`bookID`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`books`</span>(<span class="string">`bookID`</span>,<span class="string">`bookName`</span>,<span class="string">`bookCounts`</span>,<span class="string">`detail`</span>)<span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;从入门到放弃&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;MySQL&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;从删库到跑路&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;Linux&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;从进门到进牢&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h4><p>启动报错 <code>一个或多个筛选器启动失败。完整的详细信息将在相应的容器日志文件中找到</code>, 这个是适配 web support 的时候没有添加 lib 包导致的</p>
<p>Tomcat 下的 catalina.properties 修改了配置 ‘tomcat.util.scan.StandardJarScanFilter.jarsToSkip=*.jar’ 导致 jstl 解析出问题抛异常 <code>无法在web.xml或使用此应用程序部署的jar文件中解析绝对uri</code> 改回到默认配置，修复。花了2个小时排错，之前告诉我这个该法的人真想把它拖出去枪毙18遍！参考 <a href="https://www.cnblogs.com/tioxy/p/13291574.html">cnblog</a></p>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>拦截器之访问 controller 方法，不会拦截静态资源（js 等）</p>
<p>项目突然坏了，干！！！ 关了，最后三讲直接云上课看看完了</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>视频笔记</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot 通过本地方式添加依赖</title>
    <url>/hexo/2020/11/11/Springboot-add-local-jar-into-dependency/</url>
    <content><![CDATA[<p>Springboot 项目中怎么添加本地 jar 包记录</p>
<ol>
<li>在项目资源目录下创建一个文件夹，用来存放本地 jar 包</li>
<li>在 pom.xml 中添加 本地 jar 包的引用，引用目录为第一步创建的文件目录</li>
<li>在 pom.xml 的 plugins 中添加编译打包的目录，使本地jar包能打到项目中去</li>
</ol>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">resources</span><br><span class="line">├── application.properties</span><br><span class="line">├── lib</span><br><span class="line">│   └── tracesonar-0.1-SNAPSHOT.jar (本地包)</span><br><span class="line">├── static</span><br><span class="line">└── templates</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- add local lib reference --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.TraceSonar<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>TraceSonar<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources/lib/tracesonar-0.1-SNAPSHOT.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">extdirs</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources/lib<span class="tag">&lt;/<span class="name">extdirs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>jar</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot 视频笔记</title>
    <url>/hexo/2020/11/05/Springboot-note/</url>
    <content><![CDATA[<p>Springboot 学习笔记，核心<strong>自动配置</strong></p>
<p>社区版的 Idea 少了一些配置，从网上下下来的 initializr 直接倒入的还一些配置可能失效，可以看文件前缀判断</p>
<h2 id="HelloWorld-web-mode"><a href="#HelloWorld-web-mode" class="headerlink" title="HelloWorld web mode"></a>HelloWorld web mode</h2><ol>
<li>访问 <a href="https://start.spring.io/">Initializr</a> 定制项目， dependencies 选 Spring Web 即可</li>
<li>下载项目 jar 文件并解压，使用 Idea import，构建项目</li>
<li>Springboot 的项目结构和 Springmvc 基本一样，在 HelloWorldApplication 同级目录下创建 controller 包并添加 controller 类</li>
<li>Springboot 项目默认集成 tomcat，直接运行 application class 即可启动服务器</li>
<li>该 tomcat 应该是优化过的，启动速度飞起，访问 <code>http://localhost:8080/hello</code> 可以看到返回 hello 字符串</li>
<li>查看 idea 右边的 maven tab, 在 Lifecycle 下双击执行 package 打包项目 </li>
<li>可以看到打包好的项目 <code>Building jar: ...\helloworld\target\helloworld-0.0.1-SNAPSHOT.jar</code></li>
<li>到对应的路径下，cmd 窗口输入 <code>java -jar helloworld-0.0.1-SNAPSHOT.jar</code> 可以直接启动</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HelloWorld-idea-mode"><a href="#HelloWorld-idea-mode" class="headerlink" title="HelloWorld idea mode"></a>HelloWorld idea mode</h2><ol>
<li>Idea -&gt; file -&gt; new -&gt; project -&gt; Spring Initialzr</li>
<li>填入必要信息，可以修改 package 简化路径</li>
<li>其他步骤和上面的练习一样</li>
</ol>
<p>彩蛋：banner 替换，在 resources 下新建 banner.txt 文件，替换终端启动图标</p>
<h2 id="Autowired-替代方案"><a href="#Autowired-替代方案" class="headerlink" title="Autowired 替代方案"></a>Autowired 替代方案</h2><p>方案一 可以通过把注解放到对应的 setter 方法上绕过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InitBean initBean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInitBean</span><span class="params">(InitBean initBean)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.initBean = initBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方案二 放入构造函数中自动识别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitTraceSourceEventListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationReadyEvent</span>&gt; </span>&#123;</span><br><span class="line">    InitBean bean;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InitTraceSourceEventListener</span><span class="params">(InitBean bean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bean = bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方案三 用 <code>@Resource</code> 代替</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">InitBean bean;</span><br></pre></td></tr></table></figure>

<p>或者最粗暴的: Settings -&gt; Editor -&gt; Code Style -&gt; Inspections -&gt; Spring Core -&gt; Code -&gt; Field injection warning 选项 disable 掉</p>
<h2 id="自动配置原理初探"><a href="#自动配置原理初探" class="headerlink" title="自动配置原理初探"></a>自动配置原理初探</h2><ol>
<li>核心依赖都在父工程中</li>
<li>写入依赖时不需要指定版本，父类 pom 已经管理了</li>
</ol>
<p><strong>启动器</strong>, 即 Springboot 的启动场景</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>各种场景有对应的启动器，比如 <code>spring-boot-starter-web</code>, 开发时只需要找到对应的启动器即可</p>
<p><strong>主程序</strong></p>
<p>这部分需要 实操+完善 好几遍才行，流程有点长</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@SpringBootApplication 标注这个类是一个 springboot 应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello02Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 启动应用</span></span><br><span class="line">        SpringApplication.run(Hello02Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要注解关系</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication </span><br><span class="line">    @SpringBootConfiguration - springboot 配置</span><br><span class="line">        @Configuration - spring 配置类</span><br><span class="line">            @Component - 说明时一个 spring 组件</span><br><span class="line">    @EnableAutoConfiguration</span><br><span class="line">        @AutoConfigurationPackage</span><br><span class="line">            @Import(AutoConfigurationPackages.Registrar.class)</span><br></pre></td></tr></table></figure>

<p>结论：Springboot 所有自动配置都是在启动的时候扫描并加载(spring.factories). 所有的自动配置配都在里面，但不一定生效。要判断条件是否成立，只有导入了对应的启动器(starter), 才会生效。</p>
<p>spring-boot-autoconfiguration.jar 包含所有的配置</p>
<p>SpringApplication.run() 完了可以深入了解一下，不过，前面的自动装备更重要</p>
<h2 id="YAML-给属性赋值"><a href="#YAML-给属性赋值" class="headerlink" title="YAML 给属性赋值"></a>YAML 给属性赋值</h2><ul>
<li>yaml 和 properties 是可以共存的</li>
<li>共存时 properties 的优先级要高于 yaml</li>
<li>yaml 的后缀可以是 yaml 或 yml 都可以生效</li>
</ul>
<p>yaml 格式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<p>可以直接给对象赋值</p>
<h3 id="基本赋值用法"><a href="#基本赋值用法" class="headerlink" title="基本赋值用法"></a>基本赋值用法</h3><p>通过添加 @Value 实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;旺财&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;3&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(dog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: Dog(name=旺财, age=3)</span></span><br></pre></td></tr></table></figure>

<h3 id="yaml-配置属性"><a href="#yaml-配置属性" class="headerlink" title="yaml 配置属性"></a>yaml 配置属性</h3><p>配置 pom 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>类添加 <code>@ConfigurationProperties</code> 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isHappy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加 <code>application.yaml</code> 文件并设置属性</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jack</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">30</span></span><br><span class="line">  <span class="attr">isHappy:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2020</span><span class="string">/01/01</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>, <span class="attr">K2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">旺财</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: Person(name=jack, age=30, isHappy=false, birth=Wed Jan 01 00:00:00 CST 2020, maps=&#123;k1=v1, K2=v2&#125;, lists=[1, 2, 3], dog=Dog(name=旺财, age=2))</span></span><br></pre></td></tr></table></figure>

<p>PS: yaml 还支持各种随机占位符，一元表达式等，可扩展性要更强</p>
<h3 id="通过-properties-配置"><a href="#通过-properties-配置" class="headerlink" title="通过 properties 配置"></a>通过 properties 配置</h3><p>缺点：表示起来比较冗余</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@PropertySource(value=&quot;classpath:application.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isHappy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSR-303-校验"><a href="#JSR-303-校验" class="headerlink" title="JSR 303 校验"></a>JSR 303 校验</h2><p>spring 自带的验证注解，添加之后可以再给 bean 赋值的时候带上校验效果</p>
<p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>数据配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mailbox:</span></span><br><span class="line">  <span class="attr">email:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure>

<p>添加 <code>@Validated</code>, <code>@Email</code> 等注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mailbox&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailBox</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email(message = &quot;Email format is incorrect!!!&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailBoxTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MailBox box;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(box);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抛异常：org.springframework.boot.context.properties.bind.validation.BindValidationException</span></span><br></pre></td></tr></table></figure>

<h2 id="默认配置文件优先级"><a href="#默认配置文件优先级" class="headerlink" title="默认配置文件优先级"></a>默认配置文件优先级</h2><p>方式一：root/config &gt; root/. &gt; classpath:/config &gt; classpath:/.</p>
<p>方式二： 新建 <code>application-xx.properties</code>, 再 default 中的配置文件中通过 <code>spring.profile.active=xx</code> 指定激活的配置</p>
<p>方式三：yaml + —</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span></span><br><span class="line">        <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>

<h2 id="application-properties-中支持的属性源码中在哪里写的"><a href="#application-properties-中支持的属性源码中在哪里写的" class="headerlink" title="application.properties 中支持的属性源码中在哪里写的"></a>application.properties 中支持的属性源码中在哪里写的</h2><ol>
<li>SpringBoot 启动会加载大量的配置类</li>
<li>我们看需要的功能有没有在 SpringBoot 默认写好的自动配置类当中</li>
<li>再看这个配置类中到底配置了哪些组件</li>
<li>给容器中自动皮欸之类添加组件的时候，会从 properties 类中获取某些属性</li>
</ol>
<p>xxxAutoConfiguration: 自动配置类，给容器添加组件</p>
<p>xxxProperties：封装配置文件中相关属性</p>
<p>debug=true 可以查看配置详情</p>
<h2 id="静态资源加载原理"><a href="#静态资源加载原理" class="headerlink" title="静态资源加载原理"></a>静态资源加载原理</h2><p>分析一波 WebMvcAutoConfiuration.java<br>    -&gt; webjars， web 相关的包封装成 Java 模式，但是不建议这么做</p>
<p>优先级： resources &gt; script &gt; public</p>
<p>首页定制 getIndexHtml()</p>
<p>template 文件夹下的内容需要使用模板引擎，添加 dependency + 注解</p>
<h2 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h2><p>导入 starter</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在 template 下新建页面文件 test.html，新建 controller 文件夹并创建 controller</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello, springboot&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动服务，访问 localhost:8080/hello 可以看到新建的页面</p>
<h2 id="MVC-配置原理"><a href="#MVC-配置原理" class="headerlink" title="MVC 配置原理"></a>MVC 配置原理</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.1.6.RELEASE/reference/html/boot-features-developing-web-applications.html">https://docs.spring.io/spring-boot/docs/2.1.6.RELEASE/reference/html/boot-features-developing-web-applications.html</a></p>
<p>自定义视图解析器 @Configuration + implement WebMvcConfigurer 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定制功能只需要鞋各组件，然后交给 springboot，他会帮我们自动装配</span></span><br><span class="line"><span class="comment">// dispatchservlet</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ViewResolver 实现了视图解析器的接口类，我们可以把它看作是退解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 DispatcherServlet 的 doDispatch 方法打上断点，在 this 下的 viewResolver 变量中可以看到自定义的解析器</p>
<p>@Configuration 修饰的类可以帮你扩展功能</p>
<h2 id="员工管理模块案例"><a href="#员工管理模块案例" class="headerlink" title="员工管理模块案例"></a>员工管理模块案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config 下通过 WebMvcConfigurer 管理首页会更合适一点</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关闭 thymeleaf cache</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="i18n-国际化实现"><a href="#i18n-国际化实现" class="headerlink" title="i18n 国际化实现"></a>i18n 国际化实现</h3><ol>
<li>resource 下新建 i18n 文件夹，添加 properties（默认 login.properties + 语言支持版本 login_en_US.properties, login_zh_CN.properties）</li>
<li>自定义 LocaleResolver 做切换</li>
<li>自定义组件配置到 Spring 容器中 @Bean</li>
<li>用 #{} 替换模板</li>
</ol>
<p>源码中在 WebMvcAutoConfiguration 类中有配置 localeResolver 方法，通过这个引出自定义的类实现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义 resolver</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="comment">//解析请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得请求中的语言参数</span></span><br><span class="line">        String language = request.getParameter(<span class="string">&quot;l&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Locale locale = Locale.getDefault(); <span class="comment">//如果没有就使用默认的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果请求的连接携带了国际化的参数</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(language)) &#123;</span><br><span class="line">            <span class="comment">//zh_CN</span></span><br><span class="line">            String[] split = language.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            <span class="comment">//国家，地区</span></span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在自定义 config 类中通过 @Bean 注册</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过-session-拦截器实现强制登录"><a href="#通过-session-拦截器实现强制登录" class="headerlink" title="通过 session  + 拦截器实现强制登录"></a>通过 session  + 拦截器实现强制登录</h3><p>LoginController 在登录成功的时候 set 一下 session</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(...Model model, HttpSession session)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具體的業務：</span></span><br><span class="line">    <span class="keyword">if</span> ( !StringUtils.isEmpty(username) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(password)) &#123;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;loginUser&quot;</span>, username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/main.html&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定制拦截器实现 HandlerInterceptor 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object loginUser = request.getSession().getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (loginUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Please login first...&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/index.html&quot;</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 config 类中注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/index.html&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;/user/login&quot;</span>, <span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;/img/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="thymeleaf-标签修改方式"><a href="#thymeleaf-标签修改方式" class="headerlink" title="thymeleaf 标签修改方式"></a>thymeleaf 标签修改方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">原来： <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;asserts/js/jquery-3.2.1.slim.min.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">修改： <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/Chart.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/bootstrap.min.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>视频笔记</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学上的一些概念</title>
    <url>/hexo/2022/07/20/Statistics-concept/</url>
    <content><![CDATA[<h2 id="mean-vs-median-vs-mode"><a href="#mean-vs-median-vs-mode" class="headerlink" title="mean vs median vs mode"></a>mean vs median vs mode</h2><ul>
<li>mean 很好理解，就是平均数，(N0 + N1 + … Nn )/n</li>
<li>median 所有数排序，取中间那个即为 median</li>
<li>mode, 用单词 most often 来解释好了，出现频率最高的那个数。比如有数组 1，2，3，3，5，5，5，5 那么 mode 为 5</li>
</ul>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>统计</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 数组 Arrays</title>
    <url>/hexo/2021/01/20/TIJ4-arrays/</url>
    <content><![CDATA[<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>这个章节将深入讲解 Arrays 的使用</p>
<h2 id="Why-arrays-are-special"><a href="#Why-arrays-are-special" class="headerlink" title="Why arrays are special"></a>Why arrays are special</h2><p>array 持有对象的特点：高效，可指定类型，可以存储原始类型的数据</p>
<ul>
<li>数组是最高效的存储结构，代价是容量固定，不可变</li>
<li>ArrayList 可以自动扩容，但是每次扩容都需要重新拷贝引用</li>
<li>泛型没出来前，Array 有类型检查的优势</li>
<li>数组可以装载原始数据类型，容器则需要通过自动开箱，装箱实现</li>
</ul>
<p>以下示例对比数组和容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BerylliumSphere</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;Sphere &quot;</span> + id; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerComparison</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BerylliumSphere[] spheres = <span class="keyword">new</span> BerylliumSphere[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            spheres[i] = <span class="keyword">new</span> BerylliumSphere();</span><br><span class="line">        System.out.println(Arrays.toString(spheres));</span><br><span class="line">        System.out.println(spheres[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">        List&lt;BerylliumSphere&gt; sphereList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            sphereList.add(<span class="keyword">new</span> BerylliumSphere());</span><br><span class="line">        System.out.println(sphereList);</span><br><span class="line">        System.out.println(sphereList.get(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] integers = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(integers));</span><br><span class="line">        System.out.println(integers[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; intList = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">        intList.add(<span class="number">97</span>);</span><br><span class="line">        System.out.println(intList);</span><br><span class="line">        System.out.println(intList.get(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两种方式都会做类型检测，唯一的不同体现在，使用数组时我们通过 <code>[ ]</code> 访问元素，使用容器时我们通过 <code>add( )</code> 和 <code>get( )</code> 来访问。两者很类似是有意为之，为了减少两者之间 migration 的effort。</p>
<p>容器支持的功能更多，现在使用数组的唯一理由就是<strong>快</strong>。但是当你需要应付一些复杂的情况时，数组的这种严格限制就会制约你，你可能需要用容器来代替它。</p>
<h2 id="Arrays-are-first-class-objects"><a href="#Arrays-are-first-class-objects" class="headerlink" title="Arrays are first-class objects"></a>Arrays are first-class objects</h2><p>抛开数组的类型不说，数组修饰符是指向对内对象的引用。它存储了其他对象的引用，你可以通过数组初始化语句隐式创建它，也可以通过 new 的方式显示的创建。整个数组对象基本上只提供一个只读属性(length)给你使用，你还可以通过 <code>[ ]</code> 语法访问数组元素。</p>
<p>下面的例子展示了初始化数组的各种方式，和各种赋值方法。存储原始类型和对象类型的数据基本上一致的，唯一的不同是，如果存储的是对象，那么数组持有的是对象的引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BerylliumSphere</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Sphere &quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayOptions</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Arrays of objects:</span></span><br><span class="line">        BerylliumSphere[] a; <span class="comment">// Local uninitialized variable</span></span><br><span class="line">        BerylliumSphere[] b = <span class="keyword">new</span> BerylliumSphere[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">// The references inside the array are</span></span><br><span class="line">        <span class="comment">// automatically initialized to null:</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b: &quot;</span> + Arrays.toString(b));</span><br><span class="line">        BerylliumSphere[] c = <span class="keyword">new</span> BerylliumSphere[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (c[i] == <span class="keyword">null</span>) <span class="comment">// Can test for null reference</span></span><br><span class="line">                c[i] = <span class="keyword">new</span> BerylliumSphere();</span><br><span class="line">        <span class="comment">// Aggregate initialization:</span></span><br><span class="line">        BerylliumSphere[] d = &#123;<span class="keyword">new</span> BerylliumSphere(),</span><br><span class="line">                <span class="keyword">new</span> BerylliumSphere(), <span class="keyword">new</span> BerylliumSphere()</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// Dynamic aggregate initialization:</span></span><br><span class="line">        a = <span class="keyword">new</span> BerylliumSphere[]&#123;</span><br><span class="line">                <span class="keyword">new</span> BerylliumSphere(), <span class="keyword">new</span> BerylliumSphere(),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// (Trailing comma is optional in both cases)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a.length = &quot;</span> + a.length);</span><br><span class="line">        System.out.println(<span class="string">&quot;b.length = &quot;</span> + b.length);</span><br><span class="line">        System.out.println(<span class="string">&quot;c.length = &quot;</span> + c.length);</span><br><span class="line">        System.out.println(<span class="string">&quot;d.length = &quot;</span> + d.length);</span><br><span class="line">        a = d;</span><br><span class="line">        System.out.println(<span class="string">&quot;a.length = &quot;</span> + a.length);</span><br><span class="line">        <span class="comment">// Arrays of primitives:</span></span><br><span class="line">        <span class="keyword">int</span>[] e; <span class="comment">// Null reference</span></span><br><span class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">// The primitives inside the array are</span></span><br><span class="line">        <span class="comment">// automatically initialized to zero:</span></span><br><span class="line">        System.out.println(<span class="string">&quot;f: &quot;</span> + Arrays.toString(f));</span><br><span class="line">        <span class="keyword">int</span>[] g = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g.length; i++)</span><br><span class="line">            g[i] = i * i;</span><br><span class="line">        <span class="keyword">int</span>[] h = &#123;<span class="number">11</span>, <span class="number">47</span>, <span class="number">93</span>&#125;;</span><br><span class="line">        <span class="comment">// Compile error: variable e not initialized:</span></span><br><span class="line">        <span class="comment">//!System.out.println(&quot;e.length = &quot; + e.length);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;f.length = &quot;</span> + f.length);</span><br><span class="line">        System.out.println(<span class="string">&quot;g.length = &quot;</span> + g.length);</span><br><span class="line">        System.out.println(<span class="string">&quot;h.length = &quot;</span> + h.length);</span><br><span class="line">        e = h;</span><br><span class="line">        System.out.println(<span class="string">&quot;e.length = &quot;</span> + e.length);</span><br><span class="line">        e = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;e.length = &quot;</span> + e.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// b: [null, null, null, null, null]</span></span><br><span class="line"><span class="comment">// a.length = 2</span></span><br><span class="line"><span class="comment">// b.length = 5</span></span><br><span class="line"><span class="comment">// c.length = 4</span></span><br><span class="line"><span class="comment">// d.length = 3</span></span><br><span class="line"><span class="comment">// a.length = 3</span></span><br><span class="line"><span class="comment">// f: [0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="comment">// f.length = 5</span></span><br><span class="line"><span class="comment">// g.length = 4</span></span><br><span class="line"><span class="comment">// h.length = 3</span></span><br><span class="line"><span class="comment">// e.length = 3</span></span><br><span class="line"><span class="comment">// e.length = 2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>数组 a 未初始化，编译器在你赋值之前会阻止你做任何操作</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>arrays</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 容器深入研究 Container in Depth</title>
    <url>/hexo/2021/01/15/TIJ4-containers-in-depth/</url>
    <content><![CDATA[<p>[ ] 结合 Filling containers 章节复习 Adapter 设计模式</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本章需要些许 Generic 章节的知识，所以看之前最好过一遍前章。</p>
<h2 id="Full-container-taxonomy-分类学"><a href="#Full-container-taxonomy-分类学" class="headerlink" title="Full container taxonomy 分类学"></a>Full container taxonomy 分类学</h2><p>Java5 中新加的内容：</p>
<ul>
<li>Queue 接口以及对应的实现 PriorityQueue，BlockingQueue 将在 Concurrency 章节介绍</li>
<li>ConcurrentMap 以及对应实现 ConcurrentHashMap 也放到 Concurrency</li>
<li>CopyOnWriteArrayList， CopyOnWriteArraySet 同上</li>
<li>EnumSet and EnumMap, special implementations of Set and Map for use with enums, and shown in the Enumerated Types chapter.</li>
<li>Collectipns 中的一些单元方法</li>
</ul>
<p>你可以看到这个整个集合体系中有几个类是以 Abstract 开头的，这些用虚线框包裹的类表示抽象类。他们实现了对应接口的部分功能，比如当你想要实现一个 Set 接口的时候, 你不会想要实现 Set 接口并且实现里面的所有方法。一般来说，我们会通过继承 AbstractSet 类做一个最小实现。但是说实话现在集合类基本上能满足你的需求了，一般不需要自己做扩展。</p>
<h2 id="Filling-containers"><a href="#Filling-containers" class="headerlink" title="Filling containers"></a>Filling containers</h2><p>类似于 Arrays 这个 util 类，针对集合类，也有一个 util 类叫做 Collections。它里面有一个 fill() 方法可以将一个对象复制填充满整个容器，执行结果返回一个 List, 我们可以将整个 list 传给其他构造函数或者调用 addAll() 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringAddress</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringAddress</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString() + <span class="string">&quot; &quot;</span> + s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FillingLists</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;StringAddress&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(</span><br><span class="line">                Collections.nCopies(<span class="number">4</span>, <span class="keyword">new</span> StringAddress(<span class="string">&quot;Hello&quot;</span>)));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        Collections.fill(list, <span class="keyword">new</span> StringAddress(<span class="string">&quot;World!&quot;</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// [reading.container.StringAddress@7c53a9eb Hello, reading.container.StringAddress@7c53a9eb Hello, reading.container.StringAddress@7c53a9eb Hello, reading.container.StringAddress@7c53a9eb Hello]</span></span><br><span class="line"><span class="comment">// [reading.container.StringAddress@ed17bee World!, reading.container.StringAddress@ed17bee World!, reading.container.StringAddress@ed17bee World!, reading.container.StringAddress@ed17bee World!]</span></span><br></pre></td></tr></table></figure>

<p>如上例所示，给出了两种方法填充集合，一种是调用 Collections.nCopies() 另一种是调用 Collections.fill()，第一种扩展性更好。第二种方式只支持替换，不能扩容。</p>
<h2 id="A-Generator-solution"><a href="#A-Generator-solution" class="headerlink" title="A Generator solution"></a>A Generator solution</h2><p>Collection 子类都有一个接收其他 Collection 的构造器。为了实验方便，我们创建一个构造器，接收类型和数量做参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="function">T <span class="title">next</span><span class="params">()</span></span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionData</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CollectionData</span><span class="params">(Generator&lt;T&gt; gen, <span class="keyword">int</span> quantity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; quantity; i++)</span><br><span class="line">            add(gen.next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A generic convenience method:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">CollectionData&lt;T&gt; <span class="title">list</span><span class="params">(Generator&lt;T&gt; gen, <span class="keyword">int</span> quantity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CollectionData&lt;&gt;(gen, quantity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上面的代码我们可以构造一个任意容量的容器，创建的对象也可以作为参数传给任意 Collection 子类。同时结合自带的 addAll() 方法也可以用于填充容器。</p>
<p>CollectionData is an example of the Adapter design pattern;1 it adapts a Generator to the constructor for a Collection.</p>
<p>Here’s an example that initializes a LinkedHashSet: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Government</span> <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    String[] foundation = (<span class="string">&quot;strange women lying in ponds &quot;</span> +</span><br><span class="line">            <span class="string">&quot;distributing swords is no basis for a system of &quot;</span> +</span><br><span class="line">            <span class="string">&quot;government&quot;</span>).split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> foundation[index++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDataTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(</span><br><span class="line">                <span class="keyword">new</span> CollectionData&lt;&gt;(<span class="keyword">new</span> Government(), <span class="number">15</span>));</span><br><span class="line">        <span class="comment">// Using the convenience method:</span></span><br><span class="line">        set.addAll(CollectionData.list(<span class="keyword">new</span> Government(), <span class="number">15</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// [strange, women, lying, in, ponds, distributing, swords, is, no, basis, for, a, system, of, government]</span></span><br></pre></td></tr></table></figure>

<p>由于 LinkedHashSet 的关系，所以容器中元素的顺序不变。</p>
<p>TODO: 后面的例子需要 Arrays 章节的内容，没看过，直接继续感觉很不爽，我回头看看先。Arrays 只有 30+ pages 应该挺快的</p>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>collection</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 泛型</title>
    <url>/hexo/2020/12/17/TIJ4-generics/</url>
    <content><![CDATA[<p>项目重构的时候刚好遇到一些泛型相关的问题，发现这块掌握的确实有点浅薄，重新认真读一遍 Think in Java 4th 相关章节并做笔记，顺便一提，100 页的内容有点心虚。</p>
<ul>
<li><a href="#前述">前述</a></li>
<li><a href="#comparison-with-c">Comparison with C++</a></li>
<li><a href="#simple-generics">Simple generics</a><ul>
<li><a href="#a-tuple-library">A tuple library</a></li>
<li><a href="#a-stack-class">A stack class</a></li>
<li><a href="#randomlist">RandomList</a></li>
</ul>
</li>
<li><a href="#generic-interfaces">Generic interfaces</a></li>
<li><a href="#generic-methods">Generic methods</a></li>
</ul>
<p>想要解决的问题：</p>
<ul>
<li><input disabled="" type="checkbox"> 泛型的定义是什么</li>
<li><input disabled="" type="checkbox"> 为什么需要泛型</li>
<li><input disabled="" type="checkbox"> 集合类中使用泛型的注意点</li>
</ul>
<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>范型提供了一种比 interface 更高的通用性，它代表的语义是：对一批 unspecified type 的对象生效，而不单单是某一类 class 或者接口。</p>
<p>Java 的范型实现看作者的意思好像还不如 C++ 里实现的好。</p>
<h2 id="Comparison-with-C"><a href="#Comparison-with-C" class="headerlink" title="Comparison with C++"></a>Comparison with C++</h2><p>Java 灵感来源于 C++, 通过比较 C++ 的泛型(template)可以让你更清楚 Java 泛型的极限。</p>
<h2 id="Simple-generics"><a href="#Simple-generics" class="headerlink" title="Simple generics"></a>Simple generics</h2><p>generic 这个概念最初被提出来是为了创建容器 class，这是有别于 arrays 的一个概念，它会提供更高的扩展性，跟多信息要看 Holding your object 章节和后面的章节。(他这里提到的容器我估摸着就是 Collection 那一族类了)</p>
<p>下面是一个很常见的 class 持有 object 的例子, 里面有一个 Automobile 类，还有一个 Holder1 类通过构造函数持有它：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Automobile</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Automobile a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Holder1</span><span class="params">(Automobile a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Automobile <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这种做法限制了你能传入的类型，在 Java 5 之前，如果你想把它变得更通用，你只能将它的参数类型改为 Object.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Holder2</span><span class="params">(Object a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(Object a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Holder2 h2 = <span class="keyword">new</span> Holder2(<span class="keyword">new</span> Automobile());</span><br><span class="line">        Automobile a = (Automobile) h2.get();</span><br><span class="line">        h2.set(<span class="string">&quot;Not an Automobile&quot;</span>);</span><br><span class="line">        String s = (String) h2.get();</span><br><span class="line">        h2.set(<span class="number">1</span>); <span class="comment">// Autoboxes to Integer</span></span><br><span class="line">        Integer x = (Integer) h2.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>上例中 Holder2 持有了三种不同类型的数据，但是通常来说我们只希望容器持有一种特殊类型的数据就行了，指定之后，这种特殊性可以在编译期就被检测出来。这种语法就是范型，我们在 class 名字后面接一个 尖括号+字母 的形式表示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder3</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Holder3</span><span class="params">(T a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Holder3&lt;Automobile&gt; h3 = <span class="keyword">new</span> Holder3&lt;Automobile&gt;(<span class="keyword">new</span> Automobile());</span><br><span class="line">        Automobile a = h3.get(); <span class="comment">// No cast needed</span></span><br><span class="line">        <span class="comment">// h3.set(&quot;Not an Automobile&quot;); // Error</span></span><br><span class="line">        <span class="comment">// h3.set(1); // Error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>现在你在创建 Holder 的时候必须在尖括号中指定你想要的类型，当你从容器中取值的时候，jvm 会自动帮你完成类型转化。</p>
<h3 id="A-tuple-library"><a href="#A-tuple-library" class="headerlink" title="A tuple library"></a>A tuple library</h3><p>Java 语法限制一个 method 只能返回一个值，那么如果你想返回多个，怎么办？ 这种情况下我们可以定一个对象里面持有多个值，并且只读不能写。这种对象有个名字，叫做 Data Transfer Object/Message 也叫元组</p>
<p>元组长度可以是任意的，但是类型必须是确定的，这里我们可以用泛型绕过去，对于多个元素的问题，我们可以创建不同的元组来做兼容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoTuple</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> A first;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> B second;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TwoTuple</span><span class="params">(A a, B b)</span> </span>&#123;</span><br><span class="line">        first = a;</span><br><span class="line">        second = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + first + <span class="string">&quot;, &quot;</span> + second + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>精髓：通过 final 关键字 代替 getXXX method, 代码更简单明了，如果你想要一个三个变量的元组，你可以继承这个 class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeTuple</span>&lt;<span class="title">A</span>, <span class="title">B</span>, <span class="title">C</span>&gt; <span class="keyword">extends</span> <span class="title">TwoTuple</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> C third;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreeTuple</span><span class="params">(A a, B b, C c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(a, b);</span><br><span class="line">        third = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + first + <span class="string">&quot;, &quot;</span> + second + <span class="string">&quot;, &quot;</span> + third + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>更多变量的元组以此类推, 测试如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Amphibian</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TupleTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> TwoTuple&lt;String, Integer&gt; <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Autoboxing converts the int to Integer:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TwoTuple&lt;String, Integer&gt;(<span class="string">&quot;hi&quot;</span>, <span class="number">47</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ThreeTuple&lt;Amphibian, String, Integer&gt; <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreeTuple&lt;Amphibian, String, Integer&gt;(</span><br><span class="line">                <span class="keyword">new</span> Amphibian(), <span class="string">&quot;hi&quot;</span>, <span class="number">47</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TwoTuple&lt;String, Integer&gt; ttsi = f();</span><br><span class="line">        System.out.println(ttsi);</span><br><span class="line">        <span class="comment">// ttsi.first = &quot;there&quot;; // Compile error: final</span></span><br><span class="line">        System.out.println(g());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// (hi, 47)</span></span><br><span class="line"><span class="comment">// (generic.Amphibian@7c53a9eb, hi, 47)</span></span><br></pre></td></tr></table></figure>

<p>通过泛型我们可以很轻松的指定 tuple 中成员的类型，通过 new 来新建对象还是略显繁琐，后面有改进型。</p>
<h3 id="A-stack-class"><a href="#A-stack-class" class="headerlink" title="A stack class"></a>A stack class</h3><p>这里回顾了一下 Holding Your Objects 章节的 LinkedList 例子，然并卵我并没有看过 ╮(￣▽￣””)╭</p>
<p>下面是我们自己实现的带有 linked 存储机制的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">U</span>&gt; </span>&#123;</span><br><span class="line">        U item;</span><br><span class="line">        Node&lt;U&gt; next;</span><br><span class="line"></span><br><span class="line">        Node() &#123;</span><br><span class="line">            item = <span class="keyword">null</span>;</span><br><span class="line">            next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node(U item, Node&lt;U&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = item;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> item == <span class="keyword">null</span> &amp;&amp; next == <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; top = <span class="keyword">new</span> Node&lt;&gt;(); <span class="comment">// End sentinel</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T item)</span> </span>&#123;</span><br><span class="line">        top = <span class="keyword">new</span> Node&lt;&gt;(item, top);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T result = top.item;</span><br><span class="line">        <span class="keyword">if</span> (!top.end())</span><br><span class="line">            top = top.next;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedStack&lt;String&gt; lss = <span class="keyword">new</span> LinkedStack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : <span class="string">&quot;Phasers on stun!&quot;</span>.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">            lss.push(s);</span><br><span class="line">        String s;</span><br><span class="line">        <span class="keyword">while</span> ((s = lss.pop()) != <span class="keyword">null</span>)</span><br><span class="line">            System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// stun!</span></span><br><span class="line"><span class="comment">// on</span></span><br><span class="line"><span class="comment">// Phasers</span></span><br></pre></td></tr></table></figure>

<p>这里通过内部静态类创建了一个 Node class 代表一个节点。这个带泛型的 Node 节点是一种很经典的数据结构，将数据通过泛型封装，结构体现在 Node 中。</p>
<p>LinkedStack 初始化时会声明一个内容为空的节点，在后续的 pop 方法中，通过判断节点的这两个内容是不是空来断定容器是否为空。</p>
<h3 id="RandomList"><a href="#RandomList" class="headerlink" title="RandomList"></a>RandomList</h3><p>设计一个数据结构，每次调用 list 的 select 方法的时候会随机返回一个元素：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;T&gt; storage = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">    <span class="keyword">private</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T item)</span> </span>&#123;</span><br><span class="line">        storage.add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> storage.get(rand.nextInt(storage.size()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RandomList&lt;String&gt; rs = <span class="keyword">new</span> RandomList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : (<span class="string">&quot;The quick brown fox jumped over &quot;</span> +</span><br><span class="line">                <span class="string">&quot;the lazy brown dog&quot;</span>).split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">            rs.add(s);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">            System.out.print(rs.select() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// brown over fox quick quick dog brown The brown lazy brown</span></span><br></pre></td></tr></table></figure>

<p>数据结构很简单，随机性由 Random 对象提供 <code>random.nextInt(x)</code> 可以给出 0-x 返回内的整数。RandomList 里面新建一个 ArrayList 作为数据存储容器。</p>
<h2 id="Generic-interfaces"><a href="#Generic-interfaces" class="headerlink" title="Generic interfaces"></a>Generic interfaces</h2><p>接口也可以由泛型配置。Generator(生成器) 是一种特殊的工厂方法，他可以在不接受任何参数的情况下，创建你需要的对象。这里我们为产生对象的方法取名为 <code>next()</code>。</p>
<p>示例说明：</p>
<ol>
<li>声明一个 Generator 接口带有泛型参数，只有一个方法 next 返回类型为泛型</li>
<li>创建产品基类 Coffee 并创建对应的实体类</li>
<li>创建生成器实体类 CoffeeGenerator，他实现了 Generator 接口和 Iterable 接口，前者用于一次生成一个的模式，后者用于一次性生成多个的模式，有了 Iterable 就可以支持 foreach 语法了</li>
</ol>
<p>这里面唯一我想不到的是他通过 <code>Class.newInstance()</code> 直接生成对象的，就感觉很突然，很直球 (´Д` )</p>
<p>而且他在实现里使用 Iterable + 内部类实现 Iterator 的方式，我对这个也听陌生的，虽然知道有这种用法。。。感觉又可以开坑了 （；￣ェ￣）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123;<span class="function">T <span class="title">next</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName() + <span class="string">&quot; &quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Latte</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cappuccino</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Americano</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Breve</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeGenerator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">Coffee</span>&gt;, <span class="title">Iterable</span>&lt;<span class="title">Coffee</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Class[] types = &#123;Latte.class, Mocha.class, Cappuccino.class, Americano.class, Breve.class,&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CoffeeGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For iteration:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CoffeeGenerator</span><span class="params">(<span class="keyword">int</span> sz)</span> </span>&#123;</span><br><span class="line">        size = sz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Coffee)types[rand.nextInt(types.length)].newInstance();</span><br><span class="line">            <span class="comment">// Report programmer errors at run time:</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CoffeeIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Coffee</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = size;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Coffee <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            count--;</span><br><span class="line">            <span class="keyword">return</span> CoffeeGenerator.<span class="keyword">this</span>.next();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123; <span class="comment">// Not implemented</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Coffee&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CoffeeIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CoffeeGenerator gen = <span class="keyword">new</span> CoffeeGenerator();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            System.out.println(gen.next());</span><br><span class="line">        <span class="keyword">for</span> (Coffee c : <span class="keyword">new</span> CoffeeGenerator(<span class="number">5</span>))</span><br><span class="line">            System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Americano 0</span></span><br><span class="line"><span class="comment">// Latte 1</span></span><br><span class="line"><span class="comment">// Americano 2</span></span><br><span class="line"><span class="comment">// Mocha 3</span></span><br><span class="line"><span class="comment">// Mocha 4</span></span><br><span class="line"><span class="comment">// Breve 5</span></span><br><span class="line"><span class="comment">// Americano 6</span></span><br><span class="line"><span class="comment">// Latte 7</span></span><br><span class="line"><span class="comment">// Cappuccino 8</span></span><br><span class="line"><span class="comment">// Cappuccino 9</span></span><br></pre></td></tr></table></figure>

<p>下面是使用泛型接口实现斐波那契额的例子</p>
<p>算法这一块，不是我吹逼，我真的太弱了 （；￣ェ￣） 老是忘记</p>
<p>这里 class 内部持有一个 count 变量，每次调用 next() 方法，都会使得 count+1, 第 n 次调用就相当于打印 fib(n) 的值，fib 是一个基本的递归函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fib(count++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">2</span>) + fib(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fibonacci gen = <span class="keyword">new</span> Fibonacci();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++)</span><br><span class="line">            System.out.print(gen.next() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584</span></span><br></pre></td></tr></table></figure>

<p>泛型参数不支持基本数据类型，必须是包装型的。</p>
<p>下面我们用 Iterable 接口 + adapter 模式扩展一下上面的斐波那契数列，说实话，这个 adapter 模式和我印象中的不一样，又得复习一下对应的那块设计模式 code 了 （；￣ェ￣）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IterableFibonacci</span> <span class="keyword">extends</span> <span class="title">Fibonacci</span> <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IterableFibonacci</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        n = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Integer&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iterator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> n &gt; <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                n--;</span><br><span class="line">                <span class="keyword">return</span> IterableFibonacci.<span class="keyword">this</span>.next();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123; <span class="comment">// Not implemented</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : <span class="keyword">new</span> IterableFibonacci(<span class="number">18</span>))</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584</span></span><br></pre></td></tr></table></figure>

<h2 id="Generic-methods"><a href="#Generic-methods" class="headerlink" title="Generic methods"></a>Generic methods</h2><p>TBD…</p>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>泛型</tag>
        <tag>generic</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 持有对象</title>
    <url>/hexo/2020/12/22/TIJ4-holding-your-objects/</url>
    <content><![CDATA[<ul>
<li><a href="#前述">前述</a></li>
<li><a href="#generics-and-type-safe-containers">Generics and type-safe containers</a></li>
<li><a href="#basic-concepts">Basic concepts</a></li>
<li><a href="#adding-groups-of-elements">Adding groups of elements</a></li>
<li><a href="#printing-containers">Printing containers</a></li>
<li><a href="#list">List</a></li>
<li><a href="#iterator">Iterator</a></li>
</ul>
<p>遇到 Iterator 相关的问题，重新看一遍 Holding Your Objects 章节</p>
<p>想要解决的问题：</p>
<ul>
<li><input disabled="" type="checkbox"> 这个章节具体讲了什么东西</li>
<li><input disabled="" type="checkbox"> iterable/iterator/forEach 之前的关系和区别</li>
</ul>
<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>如果程序中只包含长度一定的，生命周期可知的对象，那这个程序确实足够简单了。</p>
<p>Array 是持有对象的最高效的方式，但是长度限制死了。</p>
<p>Java 中使用 ‘collection classes’ 来解决可变长容器的问题，因为 Collection 在 Java 中已经有对应的类了，所以这个概念又被叫做容器(Container)。</p>
<p>这章只是介绍基本用法，后面有一节 Containers in Depth 会深入介绍</p>
<h2 id="Generics-and-type-safe-containers"><a href="#Generics-and-type-safe-containers" class="headerlink" title="Generics and type-safe containers"></a>Generics and type-safe containers</h2><h2 id="Basic-concepts"><a href="#Basic-concepts" class="headerlink" title="Basic concepts"></a>Basic concepts</h2><h2 id="Adding-groups-of-elements"><a href="#Adding-groups-of-elements" class="headerlink" title="Adding groups of elements"></a>Adding groups of elements</h2><h2 id="Printing-containers"><a href="#Printing-containers" class="headerlink" title="Printing containers"></a>Printing containers</h2><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>有序的一个数据序列，在 Collection 的基础上添加了一些方法来达到在 list 中间插入，删除元素的效果。</p>
<ul>
<li>ArrayList: 注重随机读写，但是插入删除性能比较慢</li>
<li>LinkedList: 注重顺序读写，插入删除很快，随机读写很慢，功能上比 ArrayList 多</li>
</ul>
<h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><p>容器设计出来的主要作用：持有对象</p>
<p>Iteractor 是集合中的一个轻量级对象，可以很方便的在容器类之间做兼容，常见用法：</p>
<ol>
<li>用 Collection 对象调用 iterator() 方法拿到 Iterator 对象，它已经可以为你返回第一个对象了。</li>
<li>调用 next() 返回下一个对象</li>
<li>查看是否有跟多的对象过 hasNext()</li>
<li>调用 remove() 删除之前的使用的对象</li>
</ol>
<p>这个章节虽然简单，但是例子都是在 Type Information 里面的，得先看这个，不然看的没什么头绪。</p>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>collection</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 接口</title>
    <url>/hexo/2021/03/09/TIJ4-interfaces/</url>
    <content><![CDATA[<ul>
<li><a href="#intro">Intro</a></li>
<li><a href="#abstract-classes-and-methods">Abstract classes and methods</a></li>
<li><a href="#interfaces">Interfaces</a></li>
<li><a href="#complete-decoupling">Complete decoupling</a></li>
<li><a href="#multiple-inheritance-in-java">“Multiple inheritance” in Java</a></li>
<li><a href="#nesting-interfaces">Nesting interfaces</a></li>
</ul>
<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Interfaces and abstract classes provide more structured way to<br>separate interface from implementation.</p>
<h2 id="Abstract-classes-and-methods"><a href="#Abstract-classes-and-methods" class="headerlink" title="Abstract classes and methods"></a>Abstract classes and methods</h2><p>描述了前几章乐器的例子，其中使用 abstract class 会更符合题意</p>
<h2 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h2><p>interface 是 abstract 在抽象上的进一步体现，他允让你决定方法名，参数列表和返回值，并且你不用实现它，结果只做了规范，但不需要实现。</p>
<p>通过 interface 你仿佛在说：所有实现了这个接口的类都应该长这样。其他编程语言中也叫<strong>protocol</strong></p>
<p>除此之外，interface 变相的让你的类实现了多重继承，你的类可以转化为多个基类。</p>
<p>interface 可以用 public 修饰，也可以不写(包可见). 在 interface 中声明的 field 都是默认 static + final 的。interface 中声明的方法即使你没有显示的指定访问修饰符也是默认是 public 的。</p>
<p>// TODO，这里也给了例子，不过补上要等看了前面的章节再说了</p>
<h2 id="Complete-decoupling"><a href="#Complete-decoupling" class="headerlink" title="Complete decoupling"></a>Complete decoupling</h2><p>设想这么一种场景，我们创建一个处理器类，他有两个方法 name() 和 process()。process() 可以接收字符串并处理。我们再声明一个 Apply 类作为 client 端声明方法接收 Processor 类，调用 Processor 方法。这个没记错的话就是策略模式了。作者的行为中也这么指出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Object <span class="title">process</span><span class="params">(Object input)</span> </span>&#123; <span class="keyword">return</span> input; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upcase</span> <span class="keyword">extends</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123; <span class="comment">// Covariant return</span></span><br><span class="line">        <span class="keyword">return</span> ((String)input).toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Downcase</span> <span class="keyword">extends</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((String)input).toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Splitter</span> <span class="keyword">extends</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// The split() argument divides a String into pieces:</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(((String)input).split(<span class="string">&quot; &quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apply</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Processor p, Object s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Using Processor &quot;</span> + p.name());</span><br><span class="line">        System.out.println(p.process(s));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s =</span><br><span class="line">            <span class="string">&quot;Disagreement with beliefs is by definition incorrect&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        process(<span class="keyword">new</span> Upcase(), s);</span><br><span class="line">        process(<span class="keyword">new</span> Downcase(), s);</span><br><span class="line">        process(<span class="keyword">new</span> Splitter(), s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Processor Upcase</span></span><br><span class="line"><span class="comment">// DISAGREEMENT WITH BELIEFS IS BY DEFINITION INCORRECT</span></span><br><span class="line"><span class="comment">// Using Processor Downcase</span></span><br><span class="line"><span class="comment">// disagreement with beliefs is by definition incorrect</span></span><br><span class="line"><span class="comment">// Using Processor Splitter</span></span><br><span class="line"><span class="comment">// [Disagreement, with, beliefs, is, by, definition, incorrect]</span></span><br></pre></td></tr></table></figure>

<p>现在我们有另一批过滤器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waveform</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Waveform &quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Waveform <span class="title">process</span><span class="params">(Waveform input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowPass</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> cutoff;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LowPass</span><span class="params">(<span class="keyword">double</span> cutoff)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cutoff = cutoff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Waveform <span class="title">process</span><span class="params">(Waveform input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input; <span class="comment">// Dummy processing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighPass</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> cutoff;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HighPass</span><span class="params">(<span class="keyword">double</span> cutoff)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cutoff = cutoff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Waveform <span class="title">process</span><span class="params">(Waveform input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BandPass</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> lowCutoff, highCutoff;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BandPass</span><span class="params">(<span class="keyword">double</span> lowCut, <span class="keyword">double</span> highCut)</span> </span>&#123;</span><br><span class="line">        lowCutoff = lowCut;</span><br><span class="line">        highCutoff = highCut;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Waveform <span class="title">process</span><span class="params">(Waveform input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>他的行为模式和前面的 Processor 是很相似的，理论上来说我们可以将 Filter 看作是一个算法的集合，然后 Apply 中接收 Filter 这族算法，同时接收一个 Waveform 作为输入，process() 方法产生输出即可。但是由于 Apply 定义的方法指定了 Processor 为参数，导致兼容 Filter 失败了</p>
<p>这时我们改一下 Processor 的代码，将其定义为一个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">process</span><span class="params">(Object input)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apply</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Processor p, Object s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Using Processor &quot;</span> + p.name());</span><br><span class="line">        System.out.println(p.process(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时包装一个处理 String 的 Processor 基类，并实现各种具体的处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 虽然它这种 abstract 类中直接写具体调用的做法我总感觉很飘逸，但是理解不难</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StringProcessor</span> <span class="keyword">implements</span> <span class="title">Processor</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">process</span><span class="params">(Object input)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s = <span class="string">&quot;If she weighs the same as a duck, she’s made of wood&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Apply.process(<span class="keyword">new</span> Upcase(), s);</span><br><span class="line">        Apply.process(<span class="keyword">new</span> Downcase(), s);</span><br><span class="line">        Apply.process(<span class="keyword">new</span> Splitter(), s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upcase</span> <span class="keyword">extends</span> <span class="title">StringProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123; </span><br><span class="line">        <span class="comment">// Covariant return</span></span><br><span class="line">        <span class="keyword">return</span> ((String)input).toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Downcase</span> <span class="keyword">extends</span> <span class="title">StringProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((String)input).toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Splitter</span> <span class="keyword">extends</span> <span class="title">StringProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(((String)input).split(<span class="string">&quot; &quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Processor Upcase</span></span><br><span class="line"><span class="comment">// IF SHE WEIGHS THE SAME AS A DUCK, SHE’S MADE OF WOOD</span></span><br><span class="line"><span class="comment">// Using Processor Downcase</span></span><br><span class="line"><span class="comment">// if she weighs the same as a duck, she’s made of wood</span></span><br><span class="line"><span class="comment">// Using Processor Splitter</span></span><br><span class="line"><span class="comment">// [If, she, weighs, the, same, as, a, duck,, she’s, made, of, wood]</span></span><br></pre></td></tr></table></figure>

<p>现在轮到重构 Filter 部分了，和我原本料想的直接改代码不同，作者直接假定，这部分 Filter 类的代码就是第三方方法，你无权改动，这个时候怎么办？他又引入了 Adaptor 模式。好在这两个模式我都还挺熟悉，不过没记录过，明天花点时间写一下 ╮(￣▽￣””)╭</p>
<p>通过实现 Processor 实现一个 Filter 的包装类, 然后将 Filter 传给包装类，并把包装类作为 Apply.process() 的方式实现了曲线救国，秀啊，小老弟。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterAdapter</span> <span class="keyword">implements</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    Filter filter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FilterAdapter</span><span class="params">(Filter filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filter = filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filter.name();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Waveform <span class="title">process</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filter.process((Waveform) input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Waveform w = <span class="keyword">new</span> Waveform();</span><br><span class="line">        Apply.process(<span class="keyword">new</span> FilterAdapter(<span class="keyword">new</span> LowPass(<span class="number">1.0</span>)), w);</span><br><span class="line">        Apply.process(<span class="keyword">new</span> FilterAdapter(<span class="keyword">new</span> HighPass(<span class="number">2.0</span>)), w);</span><br><span class="line">        Apply.process(<span class="keyword">new</span> FilterAdapter(<span class="keyword">new</span> BandPass(<span class="number">3.0</span>, <span class="number">4.0</span>)), w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Processor LowPass</span></span><br><span class="line"><span class="comment">// Waveform 0</span></span><br><span class="line"><span class="comment">// Using Processor HighPass</span></span><br><span class="line"><span class="comment">// Waveform 0</span></span><br><span class="line"><span class="comment">// Using Processor BandPass</span></span><br><span class="line"><span class="comment">// Waveform 0</span></span><br></pre></td></tr></table></figure>

<h2 id="“Multiple-inheritance”-in-Java"><a href="#“Multiple-inheritance”-in-Java" class="headerlink" title="“Multiple inheritance” in Java"></a>“Multiple inheritance” in Java</h2><p>TBD</p>
<h2 id="Nesting-interfaces"><a href="#Nesting-interfaces" class="headerlink" title="Nesting interfaces"></a>Nesting interfaces</h2><p>Interfaces 可以内嵌到 class 或者其他 interface 内部，这种做法可以引入一些有趣的特性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BImp</span> <span class="keyword">implements</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BImp2</span> <span class="keyword">implements</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CImp</span> <span class="keyword">implements</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CImp2</span> <span class="keyword">implements</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DImp</span> <span class="keyword">implements</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DImp2</span> <span class="keyword">implements</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> D <span class="title">getD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DImp2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> D dRef;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveD</span><span class="params">(D d)</span> </span>&#123;</span><br><span class="line">        dRef = d;</span><br><span class="line">        dRef.f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">G</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Redundant &quot;public&quot;:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">H</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// Cannot be private within an interface:</span></span><br><span class="line">    <span class="comment">// ! private interface I &#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NestingInterfaces</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BImp</span> <span class="keyword">implements</span> <span class="title">A</span>.<span class="title">B</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CImp</span> <span class="keyword">implements</span> <span class="title">A</span>.<span class="title">C</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Cannot implement a private interface except</span></span><br><span class="line">    <span class="comment">// within that interface’s defining class:</span></span><br><span class="line">    <span class="comment">// ! class DImp implements A.D &#123;</span></span><br><span class="line">    <span class="comment">// ! public void f() &#123;&#125;</span></span><br><span class="line">    <span class="comment">// ! &#125;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EImp</span> <span class="keyword">implements</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EGImp</span> <span class="keyword">implements</span> <span class="title">E</span>.<span class="title">G</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EImp2</span> <span class="keyword">implements</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">EG</span> <span class="keyword">implements</span> <span class="title">E</span>.<span class="title">G</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        <span class="comment">// Can’t access A.D:</span></span><br><span class="line">        <span class="comment">// ! A.D ad = a.getD();</span></span><br><span class="line">        <span class="comment">// Doesn’t return anything but A.D:</span></span><br><span class="line">        <span class="comment">// ! A.DImp2 di2 = a.getD();</span></span><br><span class="line">        <span class="comment">// Cannot access a member of the interface:</span></span><br><span class="line">        <span class="comment">// ! a.getD().f();</span></span><br><span class="line">        <span class="comment">// Only another A can do anything with getD():</span></span><br><span class="line">        A a2 = <span class="keyword">new</span> A();</span><br><span class="line">        a2.receiveD(a.getD());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种嵌套 interface 的语法是合理的，和普通的 interface 一下，所有访问修饰符都用在嵌套接口上。</p>
<p>内嵌接口在使用上和 内部类并没有什么不同. 那么 private 的 interface 有什么价值呢？如果你以为 nested private interface 的实现只能是 private 的，那么你就错了。看看 DImp2 就可知，其实现可以是任意访问类型的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">! 后面的这段感觉翻译不过去，模模糊糊，看了中文版，貌似没有相关的章节。。。。汗</span><br><span class="line"></span><br><span class="line">but A.DImp2 shows that it can also be implemented as a public class. However,</span><br><span class="line">A.DImp2 can only be used as itself. You are not allowed to mention the fact that it</span><br><span class="line">implements the private interface D, so implementing a private interface is a way to force</span><br><span class="line">the definition of the methods in that interface without adding any type information (that is,</span><br><span class="line">without allowing any upcasting).</span><br><span class="line"></span><br><span class="line">个人理解为 private 接口将接口的实现和定义限制在了定义类里面。而且一般使用的时候都是会返回接口类，像上面的 D getD(), 而 D 又是 private 的，限制了他的使用，这应该就是原文中 &#39;A.DImp2 can only be used as itself&#39; 的意思吧</span><br></pre></td></tr></table></figure>

<p><code>getD()</code> 方法是 private 修饰的嵌套接口的更特殊的使用方式，在 <code>main()</code> 中，我们 comment 了很多对 D 接口的引用，但是这些用法都有编译错误。唯一的使用方式是新建一个 A 对象，调用以 D 为参数的方法。</p>
<p>Interface E 的例子想要说明的事，接口内部也能声明接口，但是秉承接口内部元素必须都是规则，内嵌的接口也<strong>必须只能</strong>是 public 的</p>
<p>Nestinglnterfaces 类中给出了嵌套接口更多的实现，当我们实现一个嵌套接口的外部接口(E)时，是不需要我们实现对应的嵌套接口的。</p>
<p>private interface 在外部是不能访问的，只能在声明他的类内部做实现</p>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>interface</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 复用类 Reusing Classes</title>
    <url>/hexo/2020/12/17/TIJ4-reusing-classes/</url>
    <content><![CDATA[<p>最近看 Code 经常看到有使用 final 参数的例子，但是对这点没有系统的认识，重新认真读一遍 Think in Java 4th 相关章节并做笔记。</p>
<p>想要解决的问题：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> local inner class 中如果用到方法中的参数，为什么要用 final 修饰？</li>
</ul>
<p>A1: java 编译器在实现 Q1 中描述的问题时，用的是值拷贝，而不是 reference 拷贝，为了防止内外值不一致，只能强制用 final 把它定为一个常量，不改变他的值</p>
<h2 id="The-final-keyword"><a href="#The-final-keyword" class="headerlink" title="The final keyword"></a>The final keyword</h2><p>Java 里面 final 这个关键字的含义会根据上下文不同而有所区别，但是大体上来说，他都会表达出一个 ‘不允许改变’ 的含义。你会出于两种目的阻止他改变，一种是设计上另一种是效率上。这两种目的很不一样，所以可能存在误用的情况。</p>
<p>接下来我们会例举三种 final 的使用场景：data, method, class</p>
<h3 id="final-data"><a href="#final-data" class="headerlink" title="final data"></a>final data</h3><p>在两种情况下你以将变量声明为常量：</p>
<ol>
<li>编译期常量，不能被改变</li>
<li>在运行时赋值并且不能被改变</li>
</ol>
<p>编译时常量有一个好处是在编译期间就将常量相关的运算做了，可以节省运行时的计算时间。这种情况下，对应的常量类型必须是 final 修饰的 primitive 类型，声明变量时就得赋值。</p>
<p>static + final 表明系统中只有一块内存空间存储相应的值。这种变量是有<strong>命名规范</strong>的，全部大些，中间用下划线分隔。</p>
<p>通过使用 final 修饰 class 表明这个类的 reference 是一个常量。</p>
<p>示例说明：</p>
<p>声明一个 Value class 用做演示 final 修饰对象情况的素材。</p>
<p>valueOne: 演示 final 修饰的基本数据类型不能改变值</p>
<p>VALUE_TWO/VALUE_THREE: 演示 static final 的常见用法和命名规范</p>
<p>i4/INT_5: final 修饰的变量可以通过表达式赋值，不一定需要直接赋值</p>
<p>v1/v2/VAL_3: final 修饰的对象 reference 不能改，但对应的对象可以改变</p>
<p>a: 数组也是一种对象，符合上一条行为规范</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Value</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// Package access</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Value</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FinalData</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can be compile-time constants:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> valueOne = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VALUE_TWO = <span class="number">99</span>;</span><br><span class="line">    <span class="comment">// Typical public constant:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VALUE_THREE = <span class="number">39</span>;</span><br><span class="line">    <span class="comment">// Cannot be compile-time constants:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> i4 = rand.nextInt(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INT_5 = rand.nextInt(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">private</span> Value v1 = <span class="keyword">new</span> Value(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Value v2 = <span class="keyword">new</span> Value(<span class="number">22</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Value VAL_3 = <span class="keyword">new</span> Value(<span class="number">33</span>);</span><br><span class="line">    <span class="comment">// Arrays:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id + <span class="string">&quot;: &quot;</span> + <span class="string">&quot;i4 = &quot;</span> + i4 + <span class="string">&quot;, INT_5 = &quot;</span> + INT_5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FinalData fd1 = <span class="keyword">new</span> FinalData(<span class="string">&quot;fd1&quot;</span>);</span><br><span class="line">        <span class="comment">//! fd1.valueOne++; // Error: can’t change value</span></span><br><span class="line">        fd1.v2.i++; <span class="comment">// Object isn’t constant!</span></span><br><span class="line">        fd1.v1 = <span class="keyword">new</span> Value(<span class="number">9</span>); <span class="comment">// OK -- not final</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fd1.a.length; i++)</span><br><span class="line">            fd1.a[i]++; <span class="comment">// Object isn’t constant!</span></span><br><span class="line">        <span class="comment">//! fd1.v2 = new Value(0); // Error: Can’t</span></span><br><span class="line">        <span class="comment">//! fd1.VAL_3 = new Value(1); // change reference</span></span><br><span class="line">        <span class="comment">//! fd1.a = new int[3];</span></span><br><span class="line">        System.out.println(fd1);</span><br><span class="line">        System.out.println(<span class="string">&quot;Creating new FinalData&quot;</span>);</span><br><span class="line">        FinalData fd2 = <span class="keyword">new</span> FinalData(<span class="string">&quot;fd2&quot;</span>);</span><br><span class="line">        System.out.println(fd1);</span><br><span class="line">        System.out.println(fd2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>public so they’re usable outside the package, static to emphasize that there’s only one, and final to say that it’s a constant.</p>
<p>public: 包外可访问；static：强调只有一份空间；final：常量</p>
<h3 id="Blank-finals"><a href="#Blank-finals" class="headerlink" title="Blank finals"></a>Blank finals</h3><p>变量声明为 final 类型但是没有给初始值的情况叫做 Blank finals。但是在这个变量使用前，它必须被初始化。</p>
<p>归结为两种情况为 final 变量赋值，一种就是声明时赋值，另一种是构造函数内赋值。不做的话会有编译错误。提供第二种赋值方式之后，对于同一个变量，每个类都可以有自己不同 final 变量值了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poppet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    Poppet(<span class="keyword">int</span> ii) &#123;</span><br><span class="line">        i = ii;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlankFinal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// Initialized final</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> j; <span class="comment">// Blank final</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Poppet p; <span class="comment">// Blank final reference</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Blank finals MUST be initialized in the constructor:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlankFinal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        j = <span class="number">1</span>; <span class="comment">// Initialize blank final</span></span><br><span class="line">        p = <span class="keyword">new</span> Poppet(<span class="number">1</span>); <span class="comment">// Initialize blank final reference</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlankFinal</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        j = x; <span class="comment">// Initialize blank final</span></span><br><span class="line">        p = <span class="keyword">new</span> Poppet(x); <span class="comment">// Initialize blank final reference</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> BlankFinal();</span><br><span class="line">        <span class="keyword">new</span> BlankFinal(<span class="number">47</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="final-arguments"><a href="#final-arguments" class="headerlink" title="final arguments"></a>final arguments</h3><p>你还可以在方法的参数列表中，将变量类型指定为 final，表示在方法体内你不能改变参数的 reference。</p>
<p>示例说明：</p>
<p>with/without: 表明 final 修饰的对象参数 reference 不能被改变</p>
<p>f()/g(): 表明 final 修饰的基本数据类型值不能被修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gizmo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">spin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalArguments</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">with</span><span class="params">(<span class="keyword">final</span> Gizmo g)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//! g = new Gizmo(); // Illegal -- g is final</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">without</span><span class="params">(Gizmo g)</span> </span>&#123;</span><br><span class="line">        g = <span class="keyword">new</span> Gizmo(); <span class="comment">// OK -- g not final</span></span><br><span class="line">        g.spin();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// void f(final int i) &#123; i++; &#125; // Can’t change</span></span><br><span class="line">    <span class="comment">// You can only read from a final primitive:</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FinalArguments bf = <span class="keyword">new</span> FinalArguments();</span><br><span class="line">        bf.without(<span class="keyword">null</span>);</span><br><span class="line">        bf.with(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="final-methods"><a href="#final-methods" class="headerlink" title="final methods"></a>final methods</h3><p>fianl 修饰 method 有两种作用，一种是表达了你不想被修饰的方法在子类中被重写而改变语义；另一种是提升执行效率。但是第二种功能在 Java 5/6 时已经包含在 JVM 优化中了，所以现在只推荐在第一种意图是使用该语法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFinal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFinalTest</span> <span class="keyword">extends</span> <span class="title">MyFinal</span></span>&#123;</span><br><span class="line">    <span class="comment">// ! public final void method01()&#123;&#125;; // compile error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="final-and-private"><a href="#final-and-private" class="headerlink" title="final and private"></a>final and private</h3><p>类中的所有 private 方法其实都是默认有 final 修饰的，只不过你显示的加了也没什么额外的作用。</p>
<p>这里说的默认在编译的字节码上并不会显示的表现出来，下面的示例中 testMethod02 和 testMethod03 意义上是一样的，但是编译的自己码还是不同的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessIdentifierTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod01</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testMethod02</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">testMethod03</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AccessIdentifierTest test = <span class="keyword">new</span> AccessIdentifierTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; access flags 0x2</span><br><span class="line">private testMethod02()V</span><br><span class="line">L0</span><br><span class="line">LINENUMBER 5 L0</span><br><span class="line">RETURN</span><br><span class="line">L1</span><br><span class="line">LOCALVARIABLE this Linnerclass&#x2F;AccessIdentifierTest; L0 L1 0</span><br><span class="line">MAXSTACK &#x3D; 0</span><br><span class="line">MAXLOCALS &#x3D; 1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; access flags 0x12</span><br><span class="line">private final testMethod03()V</span><br><span class="line">L0</span><br><span class="line">LINENUMBER 6 L0</span><br><span class="line">RETURN</span><br><span class="line">L1</span><br><span class="line">LOCALVARIABLE this Linnerclass&#x2F;AccessIdentifierTest; L0 L1 0</span><br><span class="line">MAXSTACK &#x3D; 0</span><br><span class="line">MAXLOCALS &#x3D; 1</span><br></pre></td></tr></table></figure>

<p>private 方法代表的意思不就是外部不能访问，当然也不能修改这个方法吗，没毛病。</p>
<p>示例说明：</p>
<p>下面的例子中，我们在基类中声明了两个方法 f()/g() 分别显示和隐示的加上 final 关键字。虽然你可以在它的子类中重写这个方法，但是只有在最末端的子类中可以调用，且调用的还是子类自己的实现。</p>
<p>如果你在子类的实现上加上 <code>Override</code> 标签，还会有编译错误，因为 private 方法自带 final, 表明的含义就是不能被重写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithFinals</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Identical to &quot;private&quot; alone:</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;WithFinals.f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Also automatically &quot;final&quot;:</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;WithFinals.g()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverridingPrivate</span> <span class="keyword">extends</span> <span class="title">WithFinals</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OverridingPrivate.f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OverridingPrivate.g()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverridingPrivate2</span> <span class="keyword">extends</span> <span class="title">OverridingPrivate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OverridingPrivate2.f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OverridingPrivate2.g()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalOverridingIllusion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OverridingPrivate2 op2 = <span class="keyword">new</span> OverridingPrivate2();</span><br><span class="line">        op2.f();</span><br><span class="line">        op2.g();</span><br><span class="line">        <span class="comment">// You can upcast:</span></span><br><span class="line">        OverridingPrivate op = op2;</span><br><span class="line">        <span class="comment">// But you can’t call the methods:</span></span><br><span class="line">        <span class="comment">//! op.f();</span></span><br><span class="line">        <span class="comment">//! op.g();</span></span><br><span class="line">        <span class="comment">// Same here:</span></span><br><span class="line">        WithFinals wf = op2;</span><br><span class="line">        <span class="comment">//! wf.f();</span></span><br><span class="line">        <span class="comment">//! wf.g();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// OverridingPrivate2.f()</span></span><br><span class="line"><span class="comment">// OverridingPrivate2.g()</span></span><br></pre></td></tr></table></figure>

<p>If a method is private, it isn’t part of the base-class interface. It is just some code that’s hidden away inside the class, and it just happens to have that name.</p>
<p>私有方法并不是基类的一部分，它是该类中的隐藏代码，只不过恰巧有了名字。</p>
<h3 id="final-class"><a href="#final-class" class="headerlink" title="final class"></a>final class</h3><p>final 修饰的 class 表明，不管出于什么目的，你不想你的这个 class 被继承。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmallBrain</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Dinosaur</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    SmallBrain x = <span class="keyword">new</span> SmallBrain();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! class Further extends Dinosaur &#123;&#125;</span></span><br><span class="line"><span class="comment">// error: Cannot extend final class ‘Dinosaur’</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jurassic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dinosaur n = <span class="keyword">new</span> Dinosaur();</span><br><span class="line">        n.f();</span><br><span class="line">        n.i = <span class="number">40</span>;</span><br><span class="line">        n.j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>final class 的 field 可以不是 final 的，但是 final class 里面的 method 都隐示为 final method。因为 final class 就是为了防止被继承，都不被继承了，对应的方法都不能重写也是合理的。</p>
<p>和前面的章节一样，这里的默认 final 也是语义上的，并不会在字节码中体现出来。</p>
<h3 id="final-caution"><a href="#final-caution" class="headerlink" title="final caution"></a>final caution</h3><p>例举了一些老的 Java lib 实现 Vector 和 Hashtable 说明，使用 final 修饰方法的时候要谨慎，你完全不知道其他人会怎样使用你的代码。</p>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>resuing</tag>
      </tags>
  </entry>
  <entry>
    <title>TestNG Jmockit 使用案例</title>
    <url>/hexo/2020/07/07/TestNG-Jmockit-Examples/</url>
    <content><![CDATA[<p>记录一下工作中常用到的 TestNG, Jmockit 使用案例</p>
<h2 id="DataProvider"><a href="#DataProvider" class="headerlink" title="DataProvider"></a>DataProvider</h2><h3 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DataProvider(name = &quot;singleParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object[][] singleParam() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">            &#123;<span class="string">&quot;Jerry&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;Tom&quot;</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test(dataProvider = &quot;singleParam&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">single_data</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Get username: &quot;</span> + username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DataProvider(name = &quot;multiParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object[][] multiParam() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">            &#123;<span class="string">&quot;Jerry&quot;</span>, <span class="number">12</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;Tom&quot;</span>, <span class="number">11</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test(dataProvider = &quot;multiParam&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">single_data</span><span class="params">(String username, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Get username: &quot;</span> + username + <span class="string">&quot;, age: &quot;</span> + age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mock-类的静态代码块"><a href="#Mock-类的静态代码块" class="headerlink" title="Mock 类的静态代码块"></a>Mock 类的静态代码块</h2><p>测试类结构如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientIPUtils</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String token = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    token = someService.getToken();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种类型的测试中，可以通过以下方式绕过 静态代码块 中的逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BeforeClass</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> MockUp&lt;VaultUtil&gt;() &#123;</span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">void</span> $clinit() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你的测试逻辑需要不同的 token，你不应该在 case level mock 他，因为它是类级别的代码，jvm 启动的时候只执行一次，之前我像下面这样写测试，导致第二个测试一直失败</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Expectations() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      someService.getToken();</span><br><span class="line">      result = <span class="string">&quot;fake&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Expectations() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      someService.getToken();</span><br><span class="line">      result = <span class="string">&quot;fake&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决办法是，通过 MockUp 绕过静态代码块的初始化，当需要改变值的时候，通过 <code>Deencapsulation.setField(Class, field_name, field_value);</code> 实现</p>
<h2 id="Mocked-作用域"><a href="#Mocked-作用域" class="headerlink" title="Mocked 作用域"></a>Mocked 作用域</h2><p>如果是 global 参数，那么所有 class 内的 case 都会有影响，如果是 method level 的那只有对应的 case 有影响</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> String name = <span class="string">&quot;unnamed&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mocked</span> Teacher teacher;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; System.out.println(teacher.name); &#125; <span class="comment">//output: null</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span> <span class="params">()</span> </span>&#123; System.out.println(<span class="keyword">new</span> Teacher(<span class="string">&quot;Jack&quot;</span>).name); &#125; <span class="comment">//output: null</span></span><br></pre></td></tr></table></figure>

<p>如果做 method level 的 mock, 只作用 case 本身</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="meta">@Mocked</span> Teacher teacher)</span> </span>&#123; System.out.println(teacher.name); &#125; <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span> <span class="params">()</span> </span>&#123; System.out.println(<span class="keyword">new</span> Teacher(<span class="string">&quot;Jack&quot;</span>).name); &#125; <span class="comment">// Jack</span></span><br></pre></td></tr></table></figure>

<h2 id="Jmockit-和-TestNG-兼容性问题"><a href="#Jmockit-和-TestNG-兼容性问题" class="headerlink" title="Jmockit 和 TestNG 兼容性问题"></a>Jmockit 和 TestNG 兼容性问题</h2><p>TestNG 6.9.11+ 和 Jmockit 有兼容性问题，将 @Mocked 通过参数方式传入会抛 Exception</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompatibleTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="meta">@Mocked</span> UserBean userBean)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">// org.testng.internal.reflect.MethodMatcherException:</span></span><br><span class="line"><span class="comment">// Data provider mismatch</span></span><br><span class="line"><span class="comment">// Method: test([Parameter&#123;index=0, type=com.objects.UserBean, declaredAnnotations=[@mockit.Mocked(stubOutClassInitialization=false)]&#125;])</span></span><br><span class="line"><span class="comment">// Arguments: []</span></span><br></pre></td></tr></table></figure>

<p>修复方法：将 @Mocked 部分提取改为 global 的变量即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompatibleTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Mocked</span> UserBean userBean;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我还想保留这种 case level 的使用，需要做点什么？这种 case level 的使用在作用域控制上更好</p>
<p>TODO</p>
<h2 id="Mock-不带默认构造函数的对象"><a href="#Mock-不带默认构造函数的对象" class="headerlink" title="Mock 不带默认构造函数的对象"></a>Mock 不带默认构造函数的对象</h2><p>构建一个测试对象时，如果他没有默认构造函数的话需要为参数声明 @Injectable</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompatibleTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Tested</span> Dog dog;</span><br><span class="line">  <span class="meta">@Injectable</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; dog.getName(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没加的话抛出异常</span></span><br><span class="line"><span class="comment">// java.lang.IllegalArgumentException: No constructor in tested class that can be satisfied by available injectables</span></span><br><span class="line"><span class="comment">//   public com.successfactors.legacy.service.provisioning.impl.Dog(String)</span></span><br><span class="line"><span class="comment">//     disregarded because no injectable was found for parameter &quot;name&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Mockup-工厂方法"><a href="#Mockup-工厂方法" class="headerlink" title="Mockup 工厂方法"></a>Mockup 工厂方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* new object + mockup, new object 发生在 mock 之后，所以 mock 生效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mock_factory_using_mockup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> MockUp&lt;NPCFactory&gt;() &#123;</span><br><span class="line">        <span class="meta">@Mock</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">getNPC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">&quot;mock&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ClassRoom classRoom = <span class="keyword">new</span> ClassRoom();</span><br><span class="line">    assertEquals(<span class="string">&quot;mock&quot;</span>, classRoom.getNPCName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassRoom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Person npc = NPCFactory.getNPC();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNPCName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> npc.getName(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用-Deencapsulation-设置私有变量，高版本已经-deprecated"><a href="#使用-Deencapsulation-设置私有变量，高版本已经-deprecated" class="headerlink" title="使用 Deencapsulation 设置私有变量，高版本已经 deprecated"></a>使用 Deencapsulation 设置私有变量，高版本已经 deprecated</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* new object + expectations, new object 发生在 mock 之后，所以 mock 生效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mock_factory_using_deencapsulation</span><span class="params">(<span class="meta">@Mocked</span> <span class="keyword">final</span> Person person)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Expectations() &#123;&#123;</span><br><span class="line">        person.getName();</span><br><span class="line">        result = <span class="string">&quot;deenMock&quot;</span>;</span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    Deencapsulation.setField(room, <span class="string">&quot;npc&quot;</span>, person);</span><br><span class="line">    assertEquals(<span class="string">&quot;deenMock&quot;</span>, room.getNPCName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="通过-Expectations-case-level-mock-静态方法"><a href="#通过-Expectations-case-level-mock-静态方法" class="headerlink" title="通过 Expectations case level mock 静态方法"></a>通过 Expectations case level mock 静态方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* new object + expectations, new object 发生在 mock 之后，所以 mock 生效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mock_factory_using_expectations</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Expectations(NPCFactory.class) &#123;&#123;</span><br><span class="line">    NPCFactory.getNPC();</span><br><span class="line">    result = <span class="keyword">new</span> Person(<span class="string">&quot;expMock&quot;</span>, <span class="number">2</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line">ClassRoom classRoom = <span class="keyword">new</span> ClassRoom();</span><br><span class="line">assertEquals(<span class="string">&quot;expMock&quot;</span>, classRoom.getNPCName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="部分-mock-PartialMock"><a href="#部分-mock-PartialMock" class="headerlink" title="部分 mock/PartialMock"></a>部分 mock/PartialMock</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Tested</span> Person person;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">person_name_jack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Expectations(person) &#123;&#123;</span><br><span class="line">        person.getName();</span><br><span class="line">        result = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="string">&quot;jack&quot;</span>, person.getName());</span><br><span class="line">    assertEquals(<span class="number">0</span>, person.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>partial 对非修饰类型有效吗？有效</p>
<p><code>new Expectations(ClassA.class)</code> 会对这个 class 的所有实例生效，<code>new Expectations(instance)</code> 则只会对当前这个 instance 起作用，范围更精确</p>
<h2 id="获取-Logger-引用做验证"><a href="#获取-Logger-引用做验证" class="headerlink" title="获取 Logger 引用做验证"></a>获取 Logger 引用做验证</h2><p>如果你在 UT 中想要验证某条 log 有没有打印出来，你可以使用 <code>@Capturing</code> annotation。</p>
<blockquote>
<p>相比于 @Mocked 而言，@Capturing 最大的特点是，他用于修饰 父类或者接口，那么他的所有实现类都会被 mocked 掉。对 log 的案例来说，我们为 Logger 这个 interface 加上这个注释之后，后续所有的实现都被 mock 掉，然后我们再做验证</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Tested Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySubscriber</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LogManager.getLogger(MySubscriber.class);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</span><br><span class="line">      LOGGER.info(<span class="string">&quot;Start Process MySubscriber...&quot;</span>);</span><br><span class="line">      LOGGER.info(<span class="string">&quot;End...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In UT</span></span><br><span class="line"><span class="meta">@Capturing</span></span><br><span class="line"><span class="keyword">private</span> Logger logger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_capturing_anno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Expectations(ReadAuditSwitchHelper.class) &#123;&#123;</span><br><span class="line">    logger.isInfoEnabled();</span><br><span class="line">    result = <span class="keyword">true</span>;</span><br><span class="line">  &#125;&#125;;</span><br><span class="line"></span><br><span class="line">  subscriber.onEvent(context, event);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Verifications() &#123;&#123;</span><br><span class="line">    logger.isInfoEnabled(); times=<span class="number">1</span>;</span><br><span class="line">    List&lt;String&gt; capturedInfos = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    logger.info(withCapture(capturedInfos));</span><br><span class="line"></span><br><span class="line">    capturedInfos.stream().forEach(System.out::println);</span><br><span class="line">  &#125;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取方法参数"><a href="#获取方法参数" class="headerlink" title="获取方法参数"></a>获取方法参数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果是单个参数</span></span><br><span class="line"><span class="keyword">new</span> Verifications() &#123;&#123;</span><br><span class="line">  <span class="keyword">double</span> d;</span><br><span class="line">  String s;</span><br><span class="line">  mock.doSomething(d = withCapture(), <span class="keyword">null</span>, s = withCapture());</span><br><span class="line"></span><br><span class="line">  assertTrue(d &gt; <span class="number">0.0</span>);</span><br><span class="line">  assertTrue(s.length() &gt; <span class="number">1</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是多个参数</span></span><br><span class="line"><span class="keyword">new</span> Verifications() &#123;&#123;</span><br><span class="line">  List&lt;DataObject&gt; dataObjects = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  mock.doSomething(withCapture(dataObjects));</span><br><span class="line"></span><br><span class="line">  assertEquals(<span class="number">2</span>, dataObjects.size());</span><br><span class="line">  DataObject data1 = dataObjects.get(<span class="number">0</span>);</span><br><span class="line">  DataObject data2 = dataObjects.get(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// Perform arbitrary assertions on data1 and data2.</span></span><br><span class="line">&#125;&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Mocked-导致-equals-方法失效"><a href="#Mocked-导致-equals-方法失效" class="headerlink" title="@Mocked 导致 equals 方法失效"></a>@Mocked 导致 equals 方法失效</h2><p>今天写 UT 的时候遇到一个问题，当我使用 @Mocked 修饰一个类时，这个类的所有引用都会被 mock 掉，虽然知道有这种特性，但是以前都没有碰到问题，忽视了，debug 花了好久。</p>
<p>示例如下：</p>
<p>准别两个简单的 MyBean 和 MyField, MyField 是 MyBean 的一个属性，并在声明时就做了初始化。</p>
<p>对应的 UT 可以 work，但当我对 MyField 添加 @Mocked 注解时，对应的 equals 方法会被抹去，UT 就挂了。</p>
<p>解决方案有两种：1. 不用 @Mocked; 2. 只做方法层面的 mock</p>
<p>对于第二种方法，testng 升级到 6.1 之后需要配合 @DataProvider 使用，变得麻烦了，也不知道后面的版本会不会修复这个问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyField field = <span class="keyword">new</span> MyField();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        MyBean myBean = (MyBean) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(field, myBean.field);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(field);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyField</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        MyField myField = (MyField) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(name, myField.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMockedAnno01</span> </span>&#123;</span><br><span class="line">  <span class="comment">// @Mocked MyField field;</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyBean bean1 = <span class="keyword">new</span> MyBean();</span><br><span class="line">    MyBean bean2 = <span class="keyword">new</span> MyBean();</span><br><span class="line"></span><br><span class="line">    Assert.assertEquals(bean1, bean2);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>testng</tag>
        <tag>jmockit</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 调用 Testlink API</title>
    <url>/hexo/2021/03/17/Testlink-api-with-python/</url>
    <content><![CDATA[<p>备忘一下 Testlink API 调用实现。Testlink 是有实现自己的 API 接口的，你可以通过它来操作 project， test plan 等对象。</p>
<h2 id="API-示例"><a href="#API-示例" class="headerlink" title="API 示例"></a>API 示例</h2><p>安装 pip lib: <code>pip install TestLink-API-Python-client</code>， project repo: <a href="https://github.com/lczub/TestLink-API-Python-client">Github, Testlink clint - Python</a></p>
<p>登陆 Testlink -&gt; My Settings -&gt; My personal access key 拿到 API 授权的 key, 尝试链接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> testlink</span><br><span class="line">url = <span class="string">&quot;https://&lt;hostname&gt;/lib/api/xmlrpc/v1/xmlrpc.php&quot;</span></span><br><span class="line"><span class="comment">#  for this key, you can get forom Testlink -&gt; click My Settings → my personal access key field</span></span><br><span class="line">key = <span class="string">&quot;api_auth_key&quot;</span> <span class="comment"># test link personal key</span></span><br><span class="line">tlk = testlink.TestLinkHelper(url, key).connect(testlink.TestlinkAPIClient)</span><br><span class="line">print(tlk.tlk.countProjects())</span><br><span class="line"><span class="comment"># 39</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get project info</span></span><br><span class="line">projects = tlk.getTestProjects()</span><br><span class="line"><span class="keyword">for</span> sub <span class="keyword">in</span> projects:</span><br><span class="line">    print(<span class="string">&quot;id: %s, prefix: %s, name: %s&quot;</span> % (sub[<span class="string">&#x27;id&#x27;</span>], sub[<span class="string">&#x27;prefix&#x27;</span>], sub[<span class="string">&#x27;name&#x27;</span>]))</span><br><span class="line"><span class="comment"># id: 5182, prefix: PLT#, name: Platform Foundations and Integrations</span></span><br></pre></td></tr></table></figure>

<p>其他的 API 都和差不多类似的，通过使用 Ipython + tab 基本都可以找到</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>python 提供的接口中有一个很有意思：<code>tlk.whatArgs(&#39;getTestProjects&#39;)</code> 他可以给出对应 API 的调用方式，参数列表的信息，很有用</p>
<p>client 项目的 <a href="https://github.com/lczub/TestLink-API-Python-client/blob/master/example/">example</a> 路径下，有几个示例，写的很清楚，基本上把所有支持的命令都写了，值得参考</p>
<p>PS：记得查看 Testlink 版本，就我自己的情况，公司内部用的还是 13 年的版本(1.9.7) 而最新的都已经是 1.9.20 了，好多 API 都不支持，可以 blame 以下 example，查看对应的例子是什么时候加进去的，看你想要的功能是否支持</p>
]]></content>
      <categories>
        <category>Third Part</category>
      </categories>
      <tags>
        <tag>Testlink</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>工作中的那些琐碎小事</title>
    <url>/hexo/2019/12/19/Tips-from-work/</url>
    <content><![CDATA[<p>该页面用于记录实际工作中遇到的 bug，以示警戒</p>
<h2 id="2022-03-01"><a href="#2022-03-01" class="headerlink" title="2022-03-01"></a>2022-03-01</h2><p>Migration 的时候，直接按照 Ops 给的例子提了 ticket，结果 release 版本信息没改，将修改 apply 到 patch preview 上了，吓出一身冷汗。还好那哥们比较给力，当天就改回来了。更幸运的是，标题中指明了 QA 不然就上生产了，可以提桶跑路了 (￣◇￣;)</p>
<h2 id="2021-05-26-Cache-Issue"><a href="#2021-05-26-Cache-Issue" class="headerlink" title="2021-05-26 Cache Issue"></a>2021-05-26 Cache Issue</h2><p>几年前经手的一个功能 Manage IP Restrictions, 当时还是 QA，考虑功能时还不够完善。Dev 在修改某个值时没有将对应的 cache 清掉，导致测试经常遇到不一致的情况。产品情况下修改不是很频繁，但是没这种情况，在测试的时候可把我愁坏了，干。。。</p>
<h2 id="Exception-Handle-遗漏"><a href="#Exception-Handle-遗漏" class="headerlink" title="Exception Handle 遗漏"></a>Exception Handle 遗漏</h2><p>有同事打补丁时对 checked exception 和 RunTimeException 处理有遗漏导致客户使用出问题，反馈后 debug 发现，简化后场景如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 场景描述：</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 在处理 filterData() 时，作者只考虑到 checked exception, 没有考虑 runtime exception.</span></span><br><span class="line"><span class="comment">* 实际使用时，客户在某些情况下会抛出 NPE 这种 runtime exception, 导致返回 null, 显示出现错误</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">populateDatas</span><span class="params">(datas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (data : datas) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                filterData(data);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FilterException fe) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Err when filter &quot;</span> + data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Populate data failed.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java-中的异常分类"><a href="#Java-中的异常分类" class="headerlink" title="Java 中的异常分类"></a>Java 中的异常分类</h3><p><img src="relation.png" alt="Throwable关系图"></p>
<h3 id="常见的异常种类"><a href="#常见的异常种类" class="headerlink" title="常见的异常种类"></a>常见的异常种类</h3><p>RunTimeException:</p>
<ul>
<li>NPE</li>
<li>AuthmeticException</li>
<li>NumberFormatException</li>
<li>IndexOutOfBoundsException</li>
</ul>
<p>CheckedException:</p>
<ul>
<li>反射相关：NoSuchMethod,FieldException</li>
<li>NoSuchFileException</li>
</ul>
<p>Error:</p>
<ul>
<li>OutOfMemmoryError</li>
<li>ZipError</li>
</ul>
<h3 id="一点感悟"><a href="#一点感悟" class="headerlink" title="一点感悟"></a>一点感悟</h3><p>以后处理这样的问题还是要多留心 log, 从这个点出发的话估计这个问题发现只需要一个小时就够了。这次应为有很多干扰的 exception 跑出来，没有仔细查看导致绕了好大一个圈，要不是刚好本地有一个可以重现的样本就爆炸了╭(°A°`)╮ 谨记谨记</p>
<h2 id="Event-数据量撑爆了产品环境"><a href="#Event-数据量撑爆了产品环境" class="headerlink" title="Event 数据量撑爆了产品环境"></a>Event 数据量撑爆了产品环境</h2><p>开发完 event 相关的 feature 之后没有对测试环境进行跟踪，功能没有问题，但是产生了很多冗余数据，比如包含了很多将 field 从 null 跟新到 “” 空字串的 event。很多 data center 因为业务过重，单这个 event 每天产生 500w 数据，Kafka 就危了。。。引以为戒。</p>
<h2 id="JDBC-空字串存为-NULL"><a href="#JDBC-空字串存为-NULL" class="headerlink" title="JDBC 空字串存为 NULL"></a>JDBC 空字串存为 NULL</h2><p>通过 JDBC 存储空字串时，他会自动将它存为 NULL</p>
<h2 id="记录一个-jar-升级导致的问题"><a href="#记录一个-jar-升级导致的问题" class="headerlink" title="记录一个 jar 升级导致的问题"></a>记录一个 jar 升级导致的问题</h2><p>在原先的 code 中，我们有个 UT 需要 xstream 的 Mapper 类，就在 UT 里面直接实现了类接口。某天， xstream 突然被人升级到 1.4.9+ 了，原来的 UT 就挂了，在这个版本里新添加了一个方法 <code>isReferenceable</code> 原来的 case 是没有实现的</p>
<h2 id="Cache-处理的一些小技巧"><a href="#Cache-处理的一些小技巧" class="headerlink" title="Cache 处理的一些小技巧"></a>Cache 处理的一些小技巧</h2><p>在产品中发现处理 cache 的逻辑是，更新数据时删掉对应的 cache, 然后在取数据时再重新将 cache 存储起来。以前没注意，现在再看看发现挺有意思。</p>
<h2 id="NonNull-标签"><a href="#NonNull-标签" class="headerlink" title="@NonNull 标签"></a>@NonNull 标签</h2><p>Java 方法的参数列表中加入 @NonNull 并不会在写 code 的时候为你提供 NPE check, 更多的是结合其他框架, 比如 Spring 使用, 本身只起到提示作用。</p>
<h2 id="Bug-track-2021-04-07"><a href="#Bug-track-2021-04-07" class="headerlink" title="Bug track 2021-04-07"></a>Bug track 2021-04-07</h2><p>今天遇到一个很诡异的问题，在 provisioning 中有一些 saveFeature 的 log 表明有时候 save 的时候会由于缺少 param 信息导致 GetSysConfig 的时候抛异常，而且频率很高。但是当我 manual 去重现这些功能时一切正常。通过查异常的上下文，发现这些有问题的 company 多是用于自动化测试的 instance。然后又仔细对比了手动正常工作时的 log 和出问题的 log 发现当异常产生时，save 的一系列动作都是在一个 transaction 中的，manual 操作是这一系列动作应该时分布在几个 transaction 中的。再结合以前的 auto 经验，这个东西大概率就是有一些 auto case 在调用了自己写的 script 操作 save feature 的时候出了问题，导致了一系列问题。这个问题如果不是对公司现有的技术手段都有所涉及，还真是不好找呢。。。</p>
<h2 id="一个判断条件的优化"><a href="#一个判断条件的优化" class="headerlink" title="一个判断条件的优化"></a>一个判断条件的优化</h2><p>在 code review 的时候，有一个 if 需要判断 Boolean 对象为为空或者 false 才执行我就写了如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Objects.nonNull(obj) || !obj) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后 Yi 就给了建议</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ojb != Boolean.True) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>建议的修改更简单明了，哈哈</p>
<h2 id="命令行查找目标文件夹-ls"><a href="#命令行查找目标文件夹-ls" class="headerlink" title="命令行查找目标文件夹(ls)"></a>命令行查找目标文件夹(ls)</h2><p>想要使用 ls 查找当前目录下的某个特定前缀的文件夹，但是 <code>ls prefix*</code> 会将对应的文件夹下面的自文件也列出来，不方便查看。可以加 <code>ls -d prefix*</code>。</p>
<p>通过 <code>man ls</code> 可以看到这个 flag 的作用: -d      Directories are listed as plain files (not searched recursively).</p>
<p>SF 上也给出了其他的解，可以用 <code>echo prefix*</code> 达到同样的效果</p>
<h2 id="2021-05-29"><a href="#2021-05-29" class="headerlink" title="2021-05-29"></a>2021-05-29</h2><p>今天遇到一个很 tricky 的 security issue. 客户在用我们的 provisioning 系统登陆的时候，是使用 SSO 的。前面还有一层 SAP 的授权层，叫 IDS 的。具体的 flow 可以表示为 IDS -&gt; IAS -&gt; Bizx. IAS 会用 email 做授权登陆。IDS 则是用 id. 但是 IDS 里面的用户可以随便更改自己的 email 就导致登陆到 Bizx 的用户可能串了。这是一个很严重的 security issue。如果真有心的话，这个 issue 说实话，可以让公司倒闭。</p>
<p>这个 issue 漏出去的原因还是因为这些部分分属于不同的公司维护，彼此之前的既成测试缺失，同时也不好做的缘故。</p>
<h2 id="2021-08-25"><a href="#2021-08-25" class="headerlink" title="2021-08-25"></a>2021-08-25</h2><p>遇到 bug 没关系，但是有些 bug 调查起来就是揪心。特别是那些，你在他们的调用链里。他很把锅甩给你，你还实锤不了他的这种情况。</p>
<p>Best Practice 说他们有个功能挂了，调用链如下 service(service1() -&gt; myService2() -&gt; service3()),  service3 挂了，整个 transaction roll back, myService2 执行完有一个 event 会发出去。现在的情况是 myService2 roll back 了，但是据说 event 还被消费了。整的我一脸问号。event 我们也是调用的其他模块的服务，不熟。调用方的代码，我们也不熟。我就直接黑人问号了？？？</p>
<h2 id="2021-09-22"><a href="#2021-09-22" class="headerlink" title="2021-09-22"></a>2021-09-22</h2><p>今天和 PM 讨论一个 last minutes 修改，只是改一个网站的地址(Prov Access Contral - HCM to HXM)。从我(开发)的角度来看，只是一个无所谓的改动，看了下代码，只是 5 分钟的改动。和 PM confirm 的时候，她反问了一句，这个新网址是不是已经上线了，老的是不是已经下线了。突然意识到，这是个很关键的问题，直接关系到 fix 的优先级，之前没考虑到。姜还是老的辣，哈哈，受教。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat manager app</title>
    <url>/hexo/2021/09/24/Tomcat-manager-app/</url>
    <content><![CDATA[<p>官方文档：<a href="https://tomcat.apache.org/tomcat-8.0-doc/manager-howto.html">Manager - howto</a></p>
<p>长见识了，读这本书之前，完全不知道，原来 tomcat 还有集成这种功能，厉害了。看了 How To 说明。这个 Manager 给了维护人员一个快捷的通道，通过他你可以管理 Tomcat 下的各个 app 的状态，可以随时开启，停止，重新 deploy 而且你不需要问了这个目的重启整个 Tomcat。此外还可以监测各种环境数据，比如 JVM 信息，系统参数，Server 状态等。</p>
<h2 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h2><p>Manager 功能默认是不开启的，当你本地启动项目时，可以试着访问一下 <code>/manager</code> 这个路径，会给 403 err</p>
<p><img src="403.png" alt="403"></p>
<p>提示很清楚，你要在 /conf 下配置 tomcat-user.xml 才能开启这个功能。给了 manager-gui 之后就不需要 script 和 status 权限了，这是处于安全考虑。为了测试方便也可以全部加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;tomcat&quot;</span> <span class="attr">password</span>=<span class="string">&quot;s3cret&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;manager-gui,manager-script,manager-jmx,manager-status&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>重启 Tomcat，访问 <a href="http://localhost:8080/manager">http://localhost:8080/manager</a> 即可看到管理页面</p>
<p><img src="status.png" alt="status"></p>
<p>能管理的项目 UI 展示都很直接，不细说了</p>
<h2 id="Manager-Commands"><a href="#Manager-Commands" class="headerlink" title="Manager Commands"></a>Manager Commands</h2><p>Manager 还支持通过 request 进行控制，你需要按照前面说的给 manager-status 这个 permission 之后才能开启。开启后，访问 <a href="http://localhost:8080/manager/text/list">http://localhost:8080/manager/text/list</a> 就能看到效果，其实就是 UI 功能的 request 版本，细节参考开头的文档。</p>
<p>此外 Tomcat 还支持 Ant 脚本跑这些命令，用不到，暂时不看了。</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Manager</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat setup debug environment</title>
    <url>/hexo/2021/07/05/Tomcat-setup-debug-environment/</url>
    <content><![CDATA[<p>本来像原滋原味的 setup tomcat4/5 的环境的，但是找了一圈没现成资源，还是拿了别人已经搞过的 Tomcat 8 过来，先搞起来再说，有必要再找 4/5 版本的代码。</p>
<ol>
<li>访问<a href="https://tomcat.apache.org/download-80.cgi">官网</a>, 选择 Source Code Distributions 下的 zip 或者 tar.gz，下载。瞄了一眼 README 貌似两者的区别是 zip 是 CRLF 换行而 tar 是 LF 换行。应该对应 windows 和 Linux 系统。</li>
<li>下载后得到一个 apache-tomcat-8.5.68-src.tar.gz 压缩包，解压它</li>
<li>在解压后目录中新建 catalina-home 文件夹，并将源码中的 conf, webapps 文件夹拷贝进去。webapps 下的 example 文件夹删掉，不然后面启动会抛异常</li>
<li>在 catalina-home 下新建四个文件夹：lib, temp, work, logs</li>
<li>在源文件目录下新建 pom.xml 文件并添加依赖</li>
<li>删除源文件中的 test 目录避免一些不必要的错误</li>
<li>打开 Idea, 导入项目，run/debug 处配置启动参数如下</li>
<li>修改 ContextConfig 文件，在 <code>webConfig();</code> 后添加 <code>context.addServletContainerInitializer(new JasperInitializer(), null);</code> 不然访问页面会抛 <code>org.apache.jasper.JasperException: java.lang.NullPointerException</code> 的异常</li>
<li>点击 Idea 上的 run 测试启动，成功</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 启动参数 --&gt;</span><br><span class="line">main class: org.apache.catalina.startup.Bootstrap</span><br><span class="line">vm options: </span><br><span class="line">-Dcatalina.home&#x3D;&quot;&#x2F;Users&#x2F;i306454&#x2F;IdeaProjects&#x2F;apache-tomcat-8.5.68-src&#x2F;catalina-home&quot;</span><br><span class="line">-Duser.language&#x3D;en</span><br><span class="line">-Duser.region&#x3D;US</span><br><span class="line">-Dfile.encoding&#x3D;UTF-8</span><br></pre></td></tr></table></figure>

<p>PS: Idea 2021.1.3 版本的 vm options 需要点击 Modify Options 自己添加，默认不显示</p>
<p><img src="application.png" alt="application"></p>
<p>最终，项目的目录结构如下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">└── apache-tomcat-8.5.68-src</span><br><span class="line">    ├── catalina-home</span><br><span class="line">    │   ├── conf</span><br><span class="line">    │   ├── lib</span><br><span class="line">    │   ├── logs</span><br><span class="line">    │   ├── temp</span><br><span class="line">    │   ├── webapps</span><br><span class="line">    │   └── work</span><br><span class="line">    └── pom.xml</span><br></pre></td></tr></table></figure>

<p>PS: <a href="https://archive.apache.org/dist/tomcat/tomcat-5/">Tomcat 5 源码地址</a></p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
        <tag>setup</tag>
      </tags>
  </entry>
  <entry>
    <title>UML 常见关系表示</title>
    <url>/hexo/2020/10/13/UML-object-relationship/</url>
    <content><![CDATA[<p>例举 UML 图中常见的关系及其表示方式</p>
<h2 id="泛化-Generalization"><a href="#泛化-Generalization" class="headerlink" title="泛化 Generalization"></a>泛化 Generalization</h2><p>对应 Java 中的继承，实线 + 实心三角指向父类</p>
<img src="/hexo/2020/10/13/UML-object-relationship/Generalization.png" class="" title="Generalization 关系图">

<h2 id="实现-Realization"><a href="#实现-Realization" class="headerlink" title="实现 Realization"></a>实现 Realization</h2><p>对应 Java 中的实现，虚线 + 空心三角指向接口</p>
<img src="/hexo/2020/10/13/UML-object-relationship/Realization.png" class="" title="Realization 关系图">

<h2 id="关联-Association"><a href="#关联-Association" class="headerlink" title="关联 Association"></a>关联 Association</h2><p>对应 Java 中的成员变量，拥有关系，使一个类知道另一个类的属性和方法，可单向可双向。实心线 + 普通箭头指向被拥有者</p>
<img src="/hexo/2020/10/13/UML-object-relationship/Association.png" class="" title="Association 关系图">

<h2 id="聚合-Aggregation"><a href="#聚合-Aggregation" class="headerlink" title="聚合 Aggregation"></a>聚合 Aggregation</h2><p>整体与部分的关系，比如车和轮胎。他是一种强关联关系。空心菱形指向整体 + 实线 + 普通箭头指向部分</p>
<img src="/hexo/2020/10/13/UML-object-relationship/Aggregation.png" class="" title="Aggregation 关系图">

<h2 id="组合-Composition"><a href="#组合-Composition" class="headerlink" title="组合 Composition"></a>组合 Composition</h2><p>整体与部分的关系，程度比聚合还要强的关联关系。实心菱形指向整体 + 实线 + 普通箭头指向部分</p>
<img src="/hexo/2020/10/13/UML-object-relationship/Composition.png" class="" title="Composition 关系图">

<h2 id="依赖-Dependency"><a href="#依赖-Dependency" class="headerlink" title="依赖 Dependency"></a>依赖 Dependency</h2><p>对应 Java 中的局部变量，方法参数和静态方法调用，是一种使用的关系,所以要尽量不使用双向的互相依赖。虚线 + 普通箭头指向被使用者</p>
<img src="/hexo/2020/10/13/UML-object-relationship/Dependency.png" class="" title="Dependency 关系图">

<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://blog.csdn.net/tianhai110/article/details/6339565">CSDN</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode setup python 环境</title>
    <url>/hexo/2020/06/12/VSCode-setup-python-env/</url>
    <content><![CDATA[<p>VSCode setup python 独立运行环境</p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ol>
<li>安装 pipenv <code>pip install pipenv --user</code></li>
<li>创建独立环境 <code>pipenv shell</code>, 还可以通过 <code>pipenv --three/two</code> 指定 python 版本</li>
<li>修改 pipfile, 使用国内源加速</li>
<li>安装依赖 <code>pipenv install pdfminer.six</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[source]]</span><br><span class="line">name &#x3D; &quot;pypi&quot;</span><br><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&quot;</span><br><span class="line">verify_ssl &#x3D; true</span><br></pre></td></tr></table></figure>

<p>查看 VSCode 左下角的运行环境是不是你新建的那个，不是的话 <code>pipenv --venv</code> 查看新建 venv 路径， <code>Ctrl + Shift + p</code> 搜索 <code>python: select interpreter</code> 选择你新建的那个 env</p>
<h2 id="reload-module-after-update"><a href="#reload-module-after-update" class="headerlink" title="reload module after update"></a>reload module after update</h2><p>如果某些方法正在进行中，可能频繁修改，在 ipython 中调试的时候可以用 reload 来重新加载，也可以指定 ipython 到自动重加载模式 <a href="https://ipython.org/ipython-doc/stable/config/extensions/autoreload.html">autoreload mode</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">importlib.reload(PDFParser)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 小贴士</title>
    <url>/hexo/2019/12/14/VSCode-tips/</url>
    <content><![CDATA[<p>记录一些 VSCode 常用快捷键和使用技巧，提高工作效率 (´▽｀)</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li>跳转到定义：CMD + 键盘单击</li>
<li>从定义返回：Ctr + _ 或者  Option + CMD + 方向键</li>
<li>快速到顶部/底部：CMD + 上方向/下方向</li>
<li>Ctrl + g: 快速跳到 x 行</li>
</ul>
<h2 id="很酷的操作"><a href="#很酷的操作" class="headerlink" title="很酷的操作"></a>很酷的操作</h2><blockquote>
<p>批量修改字符串，比如第 1，3，5 行 ‘est’ 关键字前添加 ‘T’, 即多光标操作</p>
</blockquote>
<ol>
<li><code>option + 鼠标左键</code> 自定义操作锚点</li>
<li><code>cmd + d</code> 向下选中相同的部分</li>
<li>选中行 <code>shift + option + i</code> 统一相对为止操作</li>
</ol>
<ul>
<li><a href="https://geek-docs.com/vscode/vscode-tutorials/vs-code-multi-cursor.html">很棒的 VSCode 文档</a></li>
</ul>
<blockquote>
<p>在 VSCode 中复制代码并黏贴到 Outlook 等客户端时，会把背景颜色也黏贴过去，可以通过如下设置避免</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Preference -&gt; settings, 搜索关键字 editor.copyWithSyntaxHighlighting 然后 disable 就行了</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 VSCode 中写 markdown 时，段落过长会自动换行，有表格的时候就很难看。可以 ctrl + p 然后搜索 word wrap 关闭换行即可</p>
</blockquote>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul>
<li>Ascii Tree Generator: 快速生产 Ascii 类型的目录树，在写文档的时候很游泳，喜欢 (´▽｀)</li>
<li>Markdown All in One: 他的 format 功能简直太赞了！</li>
<li>VSCode Icons: 为目录树上中的文件添加类型图标</li>
<li>Bracket Pair Colorizer: 括号色彩标识</li>
<li>rainbow csv: CSV 文件色彩标识</li>
</ul>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>插件</tag>
        <tag>快捷键</tag>
        <tag>vscode</tag>
        <tag>小知识</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 中配置 Hexo 集成 PlantUML 插件</title>
    <url>/hexo/2021/07/08/VSCode-with-Hexo-and-PlantUML/</url>
    <content><![CDATA[<p>本地使用 VSCode 作为文本编辑器，集成 Hexo 和 PlantUML 在写博客的时候可以插入 UML 图。</p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ol>
<li>安装插件 <code>npm install hexo-tag-plantuml --save</code>, <a href="https://github.com/two/hexo-tag-plantuml">插件 git 地址</a></li>
<li><code>_config.yml</code> 中添加配置</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tag_plantuml:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">static</span></span><br></pre></td></tr></table></figure>

<p>UML 测试</p>
<img  src=http://www.plantuml.com/plantuml/svg/SyfFqhLppCbCJbMmKiX8pSd91m00>

<p>提交到 remote repo, 等 hexo deploy 之后可以看到 UML 图</p>
<h2 id="VSCode-中显示-UML"><a href="#VSCode-中显示-UML" class="headerlink" title="VSCode 中显示 UML"></a>VSCode 中显示 UML</h2><p>上面的方式虽然远端可以显示了，但是本地查看的时候并不方便。VSCode 有提供插件可以在编辑器中显示对应的 UML</p>
<h3 id="默认官方服务器生成-UML"><a href="#默认官方服务器生成-UML" class="headerlink" title="默认官方服务器生成 UML"></a>默认官方服务器生成 UML</h3><p>打开 VSCode, 在插件列表中搜索 PlantUML 并安装即可，使用 <code>@startuml</code> 和 <code>@enduml</code> 包裹 UML 代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Bob-&gt;Alice : hello</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<p>点开 preview mode 可以看到 UML 成功生成</p>
<h3 id="使用-local-server-显示-UML"><a href="#使用-local-server-显示-UML" class="headerlink" title="使用 local server 显示 UML"></a>使用 local server 显示 UML</h3><p>默认情况下插件使用官方服务器生成 UML，优点是方便，缺点是要联网，可能生存有延时。我们可以配置 local server 提供这个服务。已经有现成的 docker 镜像了，配置简单</p>
<ol>
<li>启动 container: <code>docker run -d -p 8080:8080 plantuml/plantuml-server:jetty</code> 或者 <code>docker run -d -p 8080:8080 plantuml/plantuml-server:tomcat</code> 效果一样，只是用了不同类型的服务器实现</li>
<li>我本地有其他服务占用了 8080, 修改端口映射 <code>-p 7999:8080</code></li>
<li>访问 <code>http://localhost:7999</code> 查看服务是否启动</li>
<li>修改 VSCode 中 PlantUML 插件配置</li>
</ol>
<ul>
<li>cmd+shift+p 搜索 open user setting</li>
<li>关键子搜索 plantuml</li>
<li>Plantuml:render 设置下选择 local</li>
<li>Plantuml:server 输入本地 server 地址 <code>http://localhost:7999</code></li>
</ul>
<p>截图如下</p>
<p><img src="plantuml_setting.png" alt="uml plugin setting"></p>
<p>点击 preview 之前的 UML 正常显示，设置完成</p>
<ul>
<li><a href="https://github.com/plantuml/plantuml-server">PlantUML docker 版 git 地址</a></li>
</ul>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Webssh2 quick start</title>
    <url>/hexo/2021/12/13/Webssh2-quick-start/</url>
    <content><![CDATA[<p>搭建 Webssh2 实验平台，熟悉工具使用模式，等后期试着拆解一下这个项目的细节，用到自己的小项目上。感觉道路有点崎岖。。。。</p>
<p>这个东西本地部分挺简单的，clone 下来之后直接启动就行了，但是作为目标对象，需要一个测试用虚拟机，打算用 docker 起一个</p>
<h2 id="Docker-测试对象创建"><a href="#Docker-测试对象创建" class="headerlink" title="Docker 测试对象创建"></a>Docker 测试对象创建</h2><p>之前还打算用 Centos 镜像自己搞一个的，结果各种换源出问题，然后找找 Ubuntu 的资源，直接发现一个配置好的镜像资源，6 啊，直接拿来用，香</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 作者在官方镜像基础上搭建的 https://hub.docker.com/r/rastasheep/ubuntu-sshd/</span></span><br><span class="line">docker pull rastasheep/ubuntu-sshd</span><br><span class="line"></span><br><span class="line">docker run -d -P --name test_sshd rastasheep/ubuntu-sshd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示本地映射的端口</span></span><br><span class="line">docker port test_sshd 22</span><br><span class="line"><span class="comment"># 0.0.0.0:55000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地测试，默认密码 root, 成功</span></span><br><span class="line">ssh root@localhost -p 55000</span><br></pre></td></tr></table></figure>

<h2 id="webssh2-测试"><a href="#webssh2-测试" class="headerlink" title="webssh2 测试"></a>webssh2 测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:billchurch/webssh2.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> webssh2/app</span><br><span class="line"></span><br><span class="line">npm install --production</span><br><span class="line"></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p>然后开启 browser 并访问 <a href="http://localhost:2222/ssh/host/127.0.0.1?port=55000&amp;header=My%20Header&amp;headerBackground=red">http://localhost:2222/ssh/host/127.0.0.1?port=55000&amp;header=My%20Header&amp;headerBackground=red</a> 即可访问网站。而且貌似还能记住密码，登陆一次之后就不需要再次输入了</p>
]]></content>
      <categories>
        <category>Webssh</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>web socket</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>当你打印 Hello World 的时候到底发生了什么？</title>
    <url>/hexo/2020/08/24/What-Happend-When-You-Print-Hello-World/</url>
    <content><![CDATA[<p>一个最简单的例子，当我们在 IDE 中写入 Hello World 代码，并右键运行后，控制台会打印出来 <code>Hello World!</code> 的字符串，那么这中间到底发生了什么？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    String name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hello test = <span class="keyword">new</span> Hello();</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello &quot;</span> + test.name);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写入 IDE 里的代码都是存到 <code>.java</code> 文件中的，在保存后 IDE 会将它编译为 <code>.class</code> 文件。这个文件也叫字节码文件，有自己的一套规则。之后当我们运行这个字节码文件时，一个 JVM 虚拟机被启动，解析这个文件，将文件中的各种变量，方法分配到虚拟机的各功能区。运行代码中的打印逻辑，并输出到终端。</p>
<h2 id="java-gt-class"><a href="#java-gt-class" class="headerlink" title="java -&gt; class"></a>java -&gt; class</h2><p>从 java 文件到 class 的功能可以简单概括为 javac 命令的功能。其中主要涉及到编译器的相关只是，可以参考 编译原理 加深了解。简单概括步骤有：词法分析 -&gt; 语法分析 -&gt; 语义分析 -&gt; 字节码生成</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>运行主要涉及到 JVM 启动，类加载，逻辑执行，可以通过看 深入理解JVM虚拟机 加深了解</p>
<h3 id="jmap-查看堆中对象分布"><a href="#jmap-查看堆中对象分布" class="headerlink" title="jmap 查看堆中对象分布"></a>jmap 查看堆中对象分布</h3><p>运行示例代码，通过 <code>ps -ef | grep Hello</code> 拿到线程 pid. 然后使用 <code>jmap -heap &lt;pid&gt;</code> 查看对象情况。结果失败。。。</p>
<p>PS: jps 可以很方便的查看 java 程序 pid</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Jack &gt; ~ &gt; jmap -heap 68202</span><br><span class="line">Attaching to process ID 68202, please <span class="built_in">wait</span>...</span><br><span class="line">ERROR: attach: task_for_pid(68202) failed: <span class="string">&#x27;(os/kern) failure&#x27;</span> (5)</span><br><span class="line">Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can<span class="string">&#x27;t attach to the process. Could be caused by an incorrect pid or lack of privileges.</span></span><br><span class="line"><span class="string">sun.jvm.hotspot.debugger.DebuggerException: sun.jvm.hotspot.debugger.DebuggerException: Can&#x27;</span>t attach to the process. Could be caused by an incorrect pid or lack of privileges.</span><br></pre></td></tr></table></figure>

<p>操作系统为 MacOS, java1.8。一开始说是权限问题，但是用了 root 也不顶用，然后说是 1.8 以前不支持。本地安装 j14 然后按照之前的步骤运行 cmd 还是一样的错误。在 14 版本中，命令变了，j9 之后需要使用 <code>jhsdb jmap --heap --pid  68633</code> 做查询。难道是 MacOS 需要什么特殊设置 (´Д` ) 容我找太其他系统的机子试试水先。。。</p>
<p>可能就是系统问题把，或者公司的机子有什么限制？用家里的 Windows 试了下是可以 work 的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\jack&gt; jhsdb jmap --heap --pid 10648</span><br><span class="line">Attaching to process ID 10648, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 11.0.6+8-LTS</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Garbage-First (G1) GC with 4 thread(s)</span><br><span class="line"></span><br><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         = 40</span><br><span class="line">   MaxHeapFreeRatio         = 70</span><br><span class="line">   MaxHeapSize              = 2118123520 (2020.0MB)</span><br><span class="line">   NewSize                  = 1363144 (1.2999954223632812MB)</span><br><span class="line">   MaxNewSize               = 1270874112 (1212.0MB)</span><br><span class="line">   OldSize                  = 5452592 (5.1999969482421875MB)</span><br><span class="line">   NewRatio                 = 2</span><br><span class="line">   SurvivorRatio            = 8</span><br><span class="line">   MetaspaceSize            = 21807104 (20.796875MB)</span><br><span class="line">   CompressedClassSpaceSize = 1073741824 (1024.0MB)</span><br><span class="line">   MaxMetaspaceSize         = 17592186044415 MB</span><br><span class="line">   G1HeapRegionSize         = 1048576 (1.0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line">G1 Heap:</span><br><span class="line">   regions  = 2020</span><br><span class="line">   capacity = 2118123520 (2020.0MB)</span><br><span class="line">   used     = 1048576 (1.0MB)</span><br><span class="line">   free     = 2117074944 (2019.0MB)</span><br><span class="line">   0.04950495049504951% used</span><br><span class="line">G1 Young Generation:</span><br><span class="line">Eden Space:</span><br><span class="line">   regions  = 1</span><br><span class="line">   capacity = 15728640 (15.0MB)</span><br><span class="line">   used     = 1048576 (1.0MB)</span><br><span class="line">   free     = 14680064 (14.0MB)</span><br><span class="line">   6.666666666666667% used</span><br><span class="line">Survivor Space:</span><br><span class="line">   regions  = 0</span><br><span class="line">   capacity = 0 (0.0MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 0 (0.0MB)</span><br><span class="line">   0.0% used</span><br><span class="line">G1 Old Generation:</span><br><span class="line">   regions  = 0</span><br><span class="line">   capacity = 118489088 (113.0MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 118489088 (113.0MB)</span><br><span class="line">   0.0% used</span><br></pre></td></tr></table></figure>

<p>使用 histo 参数查看对象大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\jack&gt; jhsdb jmap --histo --pid 10648</span><br><span class="line">Attaching to process ID 10648, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 11.0.6+8-LTS</span><br><span class="line">Iterating over heap. This may take a <span class="keyword">while</span>...</span><br><span class="line">Object Histogram:</span><br><span class="line"></span><br><span class="line">num       <span class="comment">#instances    #bytes  Class description</span></span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line">1:              551     357184  char[]</span><br><span class="line">2:              3641    258616  byte[]</span><br><span class="line">3:              1629    98808   java.lang.Object[]</span><br><span class="line">...</span><br><span class="line">304:            1       16      <span class="built_in">float</span>[]</span><br><span class="line">305:            1       16      boolean[]</span><br><span class="line">306:            1       16      Hello</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>What is IPv6</title>
    <url>/hexo/2021/07/28/What-is-IPv6/</url>
    <content><![CDATA[<h2 id="What-is-IPv6"><a href="#What-is-IPv6" class="headerlink" title="What is IPv6"></a>What is IPv6</h2><p>Internet Protocol version 6: 网际协议第六版，用于解决 IPv4 地址枯竭的问题</p>
<p><strong>格式:</strong> IPv6二进位制下为128位长度，以16位为一组，每组以冒号“:”隔开，可以分为8组，每组以4位十六进制方式表示。例如：2001:0db8:86a3:08d3:1319:8a2e:0370:7344 是一个合法的IPv6地址。</p>
<p>同时IPv6在某些条件下可以省略：</p>
<p>每项数字前导的0可以省略，省略后前导数字仍是0则继续，例如下组IPv6是等价的。</p>
<ul>
<li>2001:0db8:02de:0000:0000:0000:0000:0e13</li>
<li>2001:db8:2de:0000:0000:0000:0000:e13</li>
<li>2001:db8:2de:000:000:000:000:e13</li>
<li>2001:db8:2de:00:00:00:00:e13</li>
<li>2001:db8:2de:0:0:0:0:e13</li>
</ul>
<p>可以用双冒号“::”表示一组0或多组连续的0，但只能出现一次：如果四组数字都是零，可以被省略。遵照以上省略规则，下面这两组IPv6都是相等的。</p>
<ul>
<li>2001:db8:2de:0:0:0:0:e13</li>
<li>2001:db8:2de::e13</li>
<li>2001:0db8:0000:0000:0000:0000:1428:57ab</li>
<li>2001:0db8:0000:0000:0000::1428:57ab</li>
<li>2001:0db8:0:0:0:0:1428:57ab</li>
<li>2001:0db8:0::0:1428:57ab</li>
<li>2001:0db8::1428:57ab</li>
</ul>
<p>2001::25de::cade 是非法的，因为双冒号出现了两次。它有可能是下种情形之一，造成无法推断。</p>
<ul>
<li>2001:0000:0000:0000:0000:25de:0000:cade</li>
<li>2001:0000:0000:0000:25de:0000:0000:cade</li>
<li>2001:0000:0000:25de:0000:0000:0000:cade</li>
<li>2001:0000:25de:0000:0000:0000:0000:cade</li>
</ul>
<p>如果这个地址实际上是IPv4的地址，后32位可以用10进制数表示；因此::ffff:192.168.89.9 相等于::ffff:c0a8:5909。另外，::ffff:1.2.3.4 格式叫做IPv4映射地址。</p>
<h2 id="How-to-test"><a href="#How-to-test" class="headerlink" title="How to test"></a>How to test</h2><p>本地怎么模拟一个 IPv6 的地址做测试？</p>
]]></content>
      <categories>
        <category>What</category>
      </categories>
      <tags>
        <tag>POSIX</tag>
      </tags>
  </entry>
  <entry>
    <title>What is POSIX</title>
    <url>/hexo/2021/05/11/What-is-POSIX/</url>
    <content><![CDATA[<p>从知乎上扒来的通俗解释，我觉得很形象</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">POSIX是Unix的标准。当年最早的Unix，源代码流传出去了，加上早期的Unix不够完善，于是之后出现了好些独立开发的与Unix基本兼容但又不完全兼容的OS，通称Unix-like OS。局面非常混乱，为了提高兼容性和应用程序的可移植性，标准化Unix-like OS，提出了大家都应该遵守的POSIX标准。后来，Unix这个名字成为了商标，只有花钱进行POSIX标准兼容性测试并通过了的OS，才能称为Unix，其余的OS，最多称为Unix-like OS或者*nix OS。Windows从WinNT开始就有兼容POSIX的考虑。这是因为当年在要求严格的领域，Unix地位比Windows高。为了把Unix用户拉到Windows阵营，搞的。现在情况当然有变化，与当年大不相同了。现在最新的Win10对 Linux/POSIX 支持好，则是因为Linux已经统治了廉价服务器市场。为了提高Windows的竞争力搞的。</span><br><span class="line"></span><br><span class="line">作者：匿名用户</span><br><span class="line">链接：https://www.zhihu.com/question/21048638/answer/148137115</span><br><span class="line">来源：知乎</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>What</category>
      </categories>
      <tags>
        <tag>POSIX</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么我们要在打印 log 之前进行 isInfoEnabled 判断？</title>
    <url>/hexo/2020/12/08/Why-we-should-call-isInfoEnabled-before-print-log/</url>
    <content><![CDATA[<p>平时我们在代码中打印 log 基本都是直接调用 <code>logger.info()</code> 方法，官方推荐在外面再包一层 <code>if (logger.isInfoEnabled())</code> 判断，Why?</p>
<p>以 log4j 为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(ExampleBeanWithSetter.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;Hello world...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有加外层的 <code>isInfoEnabled</code> 判断，那个将会直接执行 <code>logger.info(String)</code> 方法， 相对于有判断的形式，多了一步拼接字符串的步骤。换句话说，最大的区别有两点：</p>
<ol>
<li>拼接字符串耗时</li>
<li>这些字符串也会消耗内存空间</li>
</ol>
<p>对一般的小系统当然是没什么影响，如果是高并发或者 log 很多的系统，可以作为一个优化的方向。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>logger</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 安装 WSL 并集成 VSCode</title>
    <url>/hexo/2019/12/02/Win10%20%E5%AE%89%E8%A3%85%20WSL%20%E5%B9%B6%E9%9B%86%E6%88%90%20VSCode/</url>
    <content><![CDATA[<p>在 Win10 下用 VSCode + WSL 开发，体验还是不错的，一开始看了下官方文档，好长，好复杂。但是实际操作下来，其实很简单，赶紧搞起来，甚香( •̀ ω •́ )✧</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>首次使用 WSL 需要做一下系统设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">win快捷搜索-&gt; 启用或关闭Windows功能-&gt; 勾选 适用于Linux的Windows子系统</span><br></pre></td></tr></table></figure>

<p><img src="enable_wsl.png" alt="开启子系统选项"></p>
<p>到微软商城，搜所 wsl, 可以看到可用的 linux 版本，比如 kail, Ubuntu 等, 点击安装</p>
<p><img src="win_wsl_search.png" alt="搜索界面"></p>
<p>安装完毕后使用敲击 win 键卡开快捷搜索，输入 wsl 回车，快速打开，第一次打开时需要配置一下子系统用户名密码信息</p>
<p>安装 VSCode + Remote-WSL 插件</p>
<p><img src="remote_wsl_plugin.png" alt="VSCode插件"></p>
<p>启动 WSL 子系统，默认会到 <code>jack@DESKTOP-9TGTFK1:/mnt/c/Windows/system32$</code> 路径下，选一个你喜欢的路径，我这里新建了目录 vscode_dir 用来测试, 然后输入 <code>code .</code> 第一次输入时 WSL 会安装一些包，然后打开 VSCode。到这里基本就安装完了</p>
<p><img src="wsl_vscode_lib.png" alt="WSL安装VSCode包"></p>
<p>新打开的 remote VSCode 界面，注意左下角，如果显示的时下载的 Linux 版本就表明链接成功了</p>
<p><img src="vscode_connection.png" alt="VSCode-WSL连接"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://code.visualstudio.com/docs/remote/wsl">官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>Window 关闭防火墙</title>
    <url>/hexo/2020/09/11/Window-Disable-Defender/</url>
    <content><![CDATA[<p>下载一些破解软件的时候，windows 会自动将他们查杀可以通过：</p>
<p>开始 -&gt; 搜索’病毒和威胁防护’ -&gt; 点击 ‘病毒和威胁防护’设置下的 管理设置 -&gt; 关闭 实时防护 </p>
<p>将保护暂时关掉，等你破解完后，再开启</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>function 包简介</title>
    <url>/hexo/2020/06/03/function-package-introduce/</url>
    <content><![CDATA[<p>对 java 的 lang 包下的 function 包做一下简要的总结， 写本篇文章时参考的 java 11 的源代码。说实话，我总觉得函数接口的定义，语义上很奇葩，不怎么读的懂，比如源码中 Predicate 的 isEquals 方法是这样定义的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">isEqual</span><span class="params">(Object targetRef)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">null</span> == targetRef)</span><br><span class="line">            ? Objects::isNull</span><br><span class="line">            : object -&gt; targetRef.equals(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简直是看的我一脸的黑人问号啊 ？？？ 这 TM 什么鬼，有空再研究一下怎么自定义函数接口。</p>
<h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>function 包是函数接口的集合，包路径为： <code>java.util.function.*</code>， 接口可以大致分为 5 类</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>作用</th>
<th>个数</th>
</tr>
</thead>
<tbody><tr>
<td>Consumer</td>
<td>接收参数做计算，无返回</td>
<td>8</td>
</tr>
<tr>
<td>Supplier</td>
<td>生成数据，对象</td>
<td>5</td>
</tr>
<tr>
<td>Predicate</td>
<td>根据参数做返回 Boolean 值的计算</td>
<td>5</td>
</tr>
<tr>
<td>Function</td>
<td>接受参数，返会计算值</td>
<td>17</td>
</tr>
<tr>
<td>Operator</td>
<td>接受数据并返回计算值</td>
<td>8</td>
</tr>
</tbody></table>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>拿到参数， 运算， 无返回值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>它有一些变种，比如 BiConsumer, Bi 是 Binary 的缩写，表示复数， 两个的意思。这里表示 Consumer 接收两个参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BiConsumer&lt;String, String&gt; biConsumer = (name, action) -&gt; &#123;</span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;Name: %s is %s ing...&quot;</span>, name, action));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">biConsumer.accept(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;run&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>其他变种，比如 DoubleConsumer, 只接受 Double 做参数， 类似的还有 LongConsumer, IntConsumer 等，限制一样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DoubleConsumer consumer = (val) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Val: &quot;</span> + val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">consumer.accept(<span class="number">1.0</span>); <span class="comment">// output: Val: 1.0</span></span><br><span class="line"><span class="comment">// consumer.accept(&quot;test&quot;); - 编译报错</span></span><br><span class="line"><span class="comment">// consumer.accept(1.0L); - 编译报错</span></span><br></pre></td></tr></table></figure>

<p>还有一类变种，比如 ObjDoubleConsumer, ObjIntConsumer 和 ObjLongConsumer， 表示接收两个参数，但是其中一个是对象类型的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设计一个 lambda， 接受 person 对象和 int 值，并用 int 对 person 的年龄 field 赋值</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 省略 getter/setter/toString 方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ObjIntConsumer&lt;Person&gt; consumer = Person::setAge;</span><br><span class="line">Person p = <span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">consumer.accept(p, <span class="number">30</span>);</span><br><span class="line">System.out.println(p);</span><br><span class="line"><span class="comment">// output: Person&#123;name=&#x27;Jack&#x27;, age=30&#125;</span></span><br></pre></td></tr></table></figure>

<p>大多数 *Consumer 接口看书中还有另外一个方法，叫 <code>andThen()</code> 可以达到组合拳的效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义两个 lambda, 一个做大写转化，一个做小写转化。 就是他的这个级联的语法总有一种很奇葩的感觉，要先写 andThan 再写 accept 才合法</span></span><br><span class="line">Consumer&lt;String&gt; consumer01 = (val) -&gt; &#123;</span><br><span class="line">    String toUp = val.toUpperCase();</span><br><span class="line">    System.out.print(toUp);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Consumer&lt;String&gt; consumer02 = (val) -&gt; &#123;</span><br><span class="line">    String toUp = val.toLowerCase();</span><br><span class="line">    System.out.println(toUp);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;B&quot;</span>).forEach(consumer01.andThen(consumer02).accept);</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Aa</span></span><br><span class="line"><span class="comment">// Bb</span></span><br></pre></td></tr></table></figure>

<h3 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h3><p>生成数据并返回，和工厂方法很像</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Supplier supplier = Math::random;</span><br><span class="line">System.out.println(supplier.get());</span><br><span class="line">System.out.println(supplier.get());</span><br><span class="line"><span class="comment">// output: 0.21716622238340733</span></span><br><span class="line"><span class="comment">// output: 0.06868488591912514</span></span><br></pre></td></tr></table></figure>

<p>和 Consumer 一样，他也有指定返回类型的 type, 像 BooleanSupplier, DoubleSupplier, IntSupplier 和 LongSupplier</p>
<h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p>接受参数，然后再 lambda 中计算，得出一个 Boolean 的结果值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对准备的 3 个 string 做过滤，输出空字串的个数</span></span><br><span class="line"><span class="keyword">long</span> count = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;  &quot;</span>, <span class="string">&quot;B&quot;</span>).filter(String::isBlank).count();</span><br><span class="line">System.out.println(count);</span><br><span class="line"><span class="comment">// output: 1</span></span><br></pre></td></tr></table></figure>

<p>filter 中接受的就是 Predicate 类型的表达式，如果计算结果为 true，则保留参数对象，否则过滤掉。</p>
<p>对应的它也有多个变种形式，变种的处理方式和前面的雷同： BiPredicate, DoublePredicate, IntPredicate 和 LongPredicate。</p>
<p>除此之外，大多数的 *Predicate 接口中除了 test() 外还有 and(), negate()， or() 和 isEqual() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Predicate&lt;String&gt; checkLength = val -&gt; val.length() &gt; <span class="number">5</span>;</span><br><span class="line">Predicate&lt;String&gt; startWith = val -&gt; val.startsWith(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">List&lt;String&gt; ret = Stream.of(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;BBC&quot;</span>).filter(checkLength.and(startWith)).collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">&quot;-------------- Test AND result--------------&quot;</span>);</span><br><span class="line">ret.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">ret = Stream.of(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;BBC&quot;</span>).filter(checkLength.or(startWith)).collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">&quot;-------------- Test OR result--------------&quot;</span>);</span><br><span class="line">ret.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">ret = Stream.of(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;BBC&quot;</span>).filter(checkLength.negate()).collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">&quot;-------------- Test NEGATE result--------------&quot;</span>);</span><br><span class="line">ret.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">ret = Stream.of(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;BBC&quot;</span>).filter(Predicate.not(checkLength)).collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">&quot;-------------- Test NOT result--------------&quot;</span>);</span><br><span class="line">ret.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-------------- Test EQUALS result--------------&quot;</span>);</span><br><span class="line">System.out.println(Predicate.isEqual(<span class="string">&quot;abc&quot;</span>).test(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line">-------------- Test AND result--------------</span><br><span class="line">Banana</span><br><span class="line">-------------- Test OR result--------------</span><br><span class="line">Banana</span><br><span class="line">BBC</span><br><span class="line">-------------- Test NEGATE result--------------</span><br><span class="line">Apple</span><br><span class="line">BBC</span><br><span class="line">-------------- Test NOT result--------------</span><br><span class="line">Apple</span><br><span class="line">BBC</span><br><span class="line">-------------- Test EQUALS result--------------</span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>接受参数，计算并返回所得的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收一个字符串并将其转化成 integer 类型</span></span><br><span class="line">Function&lt;String, Integer&gt; func = Integer::valueOf;</span><br><span class="line"><span class="keyword">int</span> ret = func.apply(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">System.out.println(ret);</span><br><span class="line"><span class="comment">// output: 100</span></span><br></pre></td></tr></table></figure>

<p>同样，他也有变种，而且特别多</p>
<table>
<thead>
<tr>
<th>name</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>BiFunction</td>
<td>接收两个参数, 返回值类型自定</td>
</tr>
<tr>
<td>DoubleFunction</td>
<td>接收 Double 参数，返回值自定</td>
</tr>
<tr>
<td>IntFunction</td>
<td>接收 Int 参数，返回值自定</td>
</tr>
<tr>
<td>LongFunction</td>
<td>接收 Long 参数，返回值自定</td>
</tr>
<tr>
<td>DoubleToIntFunction</td>
<td>接收 Double 返回 Int</td>
</tr>
<tr>
<td>DoubleToLongFunction</td>
<td>接收 Double 返回 Long</td>
</tr>
<tr>
<td>IntToDoubleFunction</td>
<td>接收 Int 返回 Double</td>
</tr>
<tr>
<td>IntToLongFunction</td>
<td>接收 Int 返回 Long</td>
</tr>
<tr>
<td>LongToDoubleFunction</td>
<td>接收 Long 返回 Double</td>
</tr>
<tr>
<td>LongToIntFunction</td>
<td>接收 Long 返回 Int</td>
</tr>
<tr>
<td>ToDoubleFunction</td>
<td>接收参数类型自定，返回 Double</td>
</tr>
<tr>
<td>ToIntFunction</td>
<td>接收参数类型自定，返回 Int</td>
</tr>
<tr>
<td>ToLongFunction</td>
<td>接收参数类型自定，返回 Long</td>
</tr>
<tr>
<td>ToIntBiFunction</td>
<td>接收两个参数, 返回 Int</td>
</tr>
<tr>
<td>ToLongBiFunction</td>
<td>接收两个参数, 返回 Long</td>
</tr>
<tr>
<td>ToDoubleBiFunction</td>
<td>接收两个参数, 返回 Double</td>
</tr>
</tbody></table>
<p>相比其他的几个 *Function 接口， BiFunction 和 Function 要更特殊一点，他们除了最基本的 apply() 之外还有一些额外的方法。</p>
<p>Function 和 BiFunction 还有一个相同的 <code>andThen()</code> 方法，他会再前一个返回值的基础上再做计算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对 Stream 中的数进行 x 100 -10 操作</span></span><br><span class="line">Function&lt;Integer, Integer&gt; funcx100 = val -&gt; val * <span class="number">100</span>;</span><br><span class="line">Function&lt;Integer, Integer&gt; funcMinus10 = val -&gt; val - <span class="number">10</span>;</span><br><span class="line">List&lt;Integer&gt; ret = Stream.of(<span class="number">1</span>, <span class="number">2</span>).map(funcx100.andThen(funcMinus10)).collect(Collectors.toList());</span><br><span class="line">ret.forEach(System.out::println);</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// 90</span></span><br><span class="line"><span class="comment">// 190</span></span><br></pre></td></tr></table></figure>

<p>初此之外 Function 还有几个特殊的方法， compose() 他是在 apply() 之前执行的，注意泛型返回值的承接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设计两个 lambda 函数，将测试字符串中的数字部分抽出来，并格式化</span></span><br><span class="line">Function&lt;String, Integer&gt; funcComp = val -&gt; &#123;String intVal = val.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> Integer.valueOf(intVal);&#125;;</span><br><span class="line">Function&lt;Integer, String&gt; func = val -&gt; <span class="string">&quot;[&quot;</span> + val + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">List&lt;String&gt; ret = Stream.of(<span class="string">&quot;Jack:30&quot;</span>, <span class="string">&quot;Jerry:18&quot;</span>).map(func.compose(funcComp)).collect(Collectors.toList());</span><br><span class="line">ret.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>Function 还有一个 identity() 方法，传入什么返回什么，完全不能领会它有什么用，到是网上一些例子中，可以用来快速生成 map 的用法让人挺印象深刻的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; map = Stream.of(<span class="string">&quot;i&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>).collect(Collectors.toMap(Function.identity(), String::length));</span><br><span class="line">System.out.println(map);</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// &#123;love=4, i=1, you=3&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h3><p>一个计算表达式，最基本的类型为 UnaryOperator， 翻译为 <code>一元表达式</code>, 它是 Function 的一个子类, 可以看成是定制版/特殊形式的 Function，只用于计算，看网上的例子貌似是这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UnaryOperator&lt;Integer&gt; operator = val -&gt; val ^ <span class="number">2</span>;</span><br><span class="line">System.out.println(operator.apply(<span class="number">4</span>));</span><br><span class="line"><span class="comment">// output: 6</span></span><br></pre></td></tr></table></figure>
<p>与之类似的还有 LongUnaryOperator 表示 long 类型的一元运算， 同理推至 IntUnaryOperator， DoubleUnaryOperator。</p>
<p>DoubleBinaryOperator 两个 Double 类型数据的运算，同理推至 IntBinaryOperator 和 LongBinaryOperator。</p>
<p>在 Operator 一族中，比较特殊的是 BinaryOperator, 他的方法中有两个计算最值的方法 <code>minBy()</code> 和 <code>maxBy()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BinaryOperator&lt;Integer&gt; max = BinaryOperator.maxBy(Comparator.naturalOrder());</span><br><span class="line">System.out.println(max.apply(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">BinaryOperator&lt;Integer&gt; min = BinaryOperator.minBy(Comparator.naturalOrder());</span><br><span class="line">System.out.println(min.apply(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">//output: 2 1</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>jenv 快速上手</title>
    <url>/hexo/2020/08/25/jenv-quick-start/</url>
    <content><![CDATA[<p>jenv 是和 pyenv 一个类型的工具，应对多版本 java 的需求进行管理。简单记录一下 jenv 安装使用方法。<a href="https://www.jenv.be/">官方教程</a>。需要注意的是在配置文件里添加完设置之后需要重起终端，不然文件夹什么还没有创建出来。</p>
<h2 id="CMDs"><a href="#CMDs" class="headerlink" title="CMDs"></a>CMDs</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install jenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># bashrc/zshrc 中添加配置</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$HOME</span>/.jenv/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(jenv init -)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># local 已经安装的版本检测</span></span><br><span class="line"><span class="built_in">which</span> java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 brew 安装的 Java 路径</span></span><br><span class="line">brew list java </span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到安装的路径是 /usr/local/Cellar/openjdk/XXX</span></span><br><span class="line"><span class="comment"># 默认就是从 openjdk repo 下载的</span></span><br><span class="line"><span class="comment"># 如果想安装其他版本可以 special 一下 version: brew list openjdk@11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># jenv 添加 home 路径</span></span><br><span class="line">jenv add /usr/<span class="built_in">local</span>/Cellar/openjdk@11/11.0.9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看可用版本</span></span><br><span class="line">jenv versions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想要只在某个路径下面指定 java 版本，可以 cd 到目标目录下，使用</span></span><br><span class="line">jenv <span class="built_in">local</span> 14</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除某个版本</span></span><br><span class="line">jenv remove 14</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>弹射起步</category>
      </categories>
      <tags>
        <tag>jenv</tag>
      </tags>
  </entry>
  <entry>
    <title>you-get 终端下载工具</title>
    <url>/hexo/2019/11/27/you-get%20%E7%BB%88%E7%AB%AF%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>作为一个新世纪的社会主义接班人，怎么能不关注国家大事呢，于是我开始有意识的培养看新闻联播的习惯。但是问题来了，新闻联播要三十分钟，而且不能倍速播放。都 9012 年了啊，官网用的还是 flash, 也是醉了。合计了一下，打算使用工具将视频下载下来后本地用 Potplayer 加速播放。一开始找了 IDM，总的来说，用起来还不错，但是有些时候新闻联播官网抓到的 ts 文件，还得自己合并，不开心 (｡ ́︿ ̀｡)</p>
<p>最后在 Gayhub 上找到了 you-get 很赞 ↖(^ω^)↗ 而且他还支持很多网站的下载 b站，youku 什么的都不在话下，而且有人维护，贡献很积极呦</p>
<ul>
<li><a href="https://github.com/soimort/you-get">Github you-get</a></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Win10 OS</p>
<p>准备工作：安装 python 3.2+, FFmpeg。前者用来下载后者用来合并视频，如果 FFmpeg 没有安装的还，下载还能成功，但是合并就不行了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install you-get</span><br></pre></td></tr></table></figure>

<p>安装 FFmpeg, 前往<a href="https://ffmpeg.org/">官网</a>下载压缩包，解压后将 bin 文件加到系统配置的 path 中，path 选系统 level 的，user level 的可能会出问题，视屏不能合并，别问我为什么知道的 ┑(￣Д ￣)┍</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示可用的下载选项，然后根据提示操作就行了</span></span><br><span class="line">you-get -i [URL]</span><br></pre></td></tr></table></figure>

<p>官方文档写的很详细，不懂就看 you-get 官方文档好了，有<a href="https://github.com/soimort/you-get/wiki/%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E">中文版</a>呦</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>终端</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title>创建 Date 对象</title>
    <url>/hexo/2020/01/03/%E5%88%9B%E5%BB%BA%20Date%20%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>简单记录一下 java 中 Date 类的使用</p>
<h3 id="通过-Date-创建"><a href="#通过-Date-创建" class="headerlink" title="通过 Date 创建"></a>通过 Date 创建</h3><p>默认构造函数会创建当前时间点的 Date 对象, 另外还可以通过 <code>Date(long milliseconds)</code> 的构造器创建指定时间的日期对象</p>
<p>主要方法：</p>
<ul>
<li>getTime() - return milliseconds</li>
<li>before(Date) - if date is before target date</li>
<li>after(Date)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="comment">// The default date fromat is: &quot;EEE MMM dd HH:mm:ss zzz yyyy&quot;;</span></span><br><span class="line">    System.out.println(date);</span><br><span class="line">    System.out.println(date.getTime());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Fri Jan 03 17:47:16 CST 2020</span></span><br><span class="line"><span class="comment">// 1578045256817</span></span><br></pre></td></tr></table></figure>

<h3 id="通过-SimpleDateFormat-创建"><a href="#通过-SimpleDateFormat-创建" class="headerlink" title="通过 SimpleDateFormat 创建"></a>通过 SimpleDateFormat 创建</h3><p>相比于上一种方式，这种更易懂一点，而且可以指定输出格式呦(´▽｀)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">    Date simpleDate = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>).parse(<span class="string">&quot;2020-01-03&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(simpleDate);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;MM-dd-yyyy&quot;</span>).format(simpleDate));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Fri Jan 03 00:00:00 CST 2020</span></span><br><span class="line"><span class="comment">// 01-03-2020</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>date</tag>
      </tags>
  </entry>
  <entry>
    <title>各种常用小工具</title>
    <url>/hexo/2020/05/16/%E5%90%84%E7%A7%8D%E5%B8%B8%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>常用小工具记录</p>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p>想要截取一下某堂公开课的课件，但是他是嵌入在页面的 scroller bar 组件当中的，截取很不方便，试了一些像 FireShot 之类的 Chrome 扩展，也不能很好的完成任务。最后通过 FastStone Capture 解决了问题</p>
<ul>
<li>FastStone Capture：一个 Windows 平台下的截图工具，功能还挺多，也挺全，不过应该有点年头了，界面很复古。应该是之支持 Win 平台的，20$ 不过送了 30 天的体验，还是很良心的，滚动截图简直优秀</li>
<li>如果光是 Chrome 的话，根本不需要安装插件，<code>Ctrl + Shift + I</code> 调出调试界面， <code>Ctrl + Shift + P</code> 调出 Chrome 终端界面，然后输入关键字 <code>screen</code> 选择 <code>Capture all screen</code> 就可以截取全部网页了。 在选中节点的情况下，也可以通过选择 <code>Capture node screen</code> 截取单个元素的图片，很方便，但是我那种情况并不好使。。。</li>
</ul>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>是不是还在为迅雷的各种广告，各种资源不能下载而烦恼，试试 Motrix 这个开源项目，还不错。已经有官方支持了，不需要什么操作直接下载安装就行，还多平台支持，溜的一批。</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>common</tag>
      </tags>
  </entry>
  <entry>
    <title>数字进制转化</title>
    <url>/hexo/2019/12/04/%E6%95%B0%E5%AD%97%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8C%96/</url>
    <content><![CDATA[<p>罗列常用语言中的数字转化方法</p>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>Python 中已经集成了很多用来做这个事情的内部方法，都不需要引入额外的包，很方便。主要集中在 str.format() 和其他一些内置函数比如 int(), hex () 等</p>
<p>str.format 转化格式如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">format_spec     ::=  [[fill]align][sign][<span class="comment">#][0][width][grouping_option][.precision][type]</span></span><br><span class="line">fill            ::=  &lt;any character&gt;</span><br><span class="line">align           ::=  <span class="string">&quot;&lt;&quot;</span> | <span class="string">&quot;&gt;&quot;</span> | <span class="string">&quot;=&quot;</span> | <span class="string">&quot;^&quot;</span></span><br><span class="line">sign            ::=  <span class="string">&quot;+&quot;</span> | <span class="string">&quot;-&quot;</span> | <span class="string">&quot; &quot;</span></span><br><span class="line">width           ::=  digit+</span><br><span class="line">grouping_option ::=  <span class="string">&quot;_&quot;</span> | <span class="string">&quot;,&quot;</span></span><br><span class="line">precision       ::=  digit+</span><br><span class="line"><span class="built_in">type</span>            ::=  <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span> | <span class="string">&quot;d&quot;</span> | <span class="string">&quot;e&quot;</span> | <span class="string">&quot;E&quot;</span> | <span class="string">&quot;f&quot;</span> | <span class="string">&quot;F&quot;</span> | <span class="string">&quot;g&quot;</span> | <span class="string">&quot;G&quot;</span> | <span class="string">&quot;n&quot;</span> | <span class="string">&quot;o&quot;</span> | <span class="string">&quot;s&quot;</span> | <span class="string">&quot;x&quot;</span> | <span class="string">&quot;X&quot;</span> | <span class="string">&quot;%&quot;</span></span><br></pre></td></tr></table></figure>

<p>一些例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 十进制 8 转化成二进制，8位宽，左对齐，空位补 -, format 里面的只能是十进制的数</span></span><br><span class="line"><span class="string">&#x27;&#123;:-&lt;8b&#125;&#x27;</span>.format(<span class="number">8</span>)</span><br><span class="line"><span class="comment"># &#x27;1000----&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0xff 转化成二进制，可以先把十六进制转成十进制，再转成二进制, 0x 可以省略</span></span><br><span class="line"><span class="string">&#x27;&#123;:b&#125;&#x27;</span>.format(int(<span class="string">&#x27;0xff&#x27;</span>, <span class="number">16</span>))</span><br><span class="line"><span class="comment"># &#x27;11111111&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bin 函数也可以用来做二进制转化，基数是10</span></span><br><span class="line">bin(<span class="number">8</span>)</span><br><span class="line"><span class="comment"># &#x27;0b1000&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str.format 加上 # 可以变成和 bin 一样的效果</span></span><br><span class="line"><span class="string">&#x27;&#123;:#b&#125;&#x27;</span>.format(int(<span class="string">&#x27;0xff&#x27;</span>, <span class="number">16</span>))</span><br><span class="line"><span class="comment"># &#x27;0b11111111&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内置函数 format 也可以实现和 str.format 一样的功能</span></span><br><span class="line">format(<span class="number">255</span>, <span class="string">&#x27;#b&#x27;</span>)</span><br><span class="line"><span class="comment"># &#x27;0b11111111&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再介绍一种 format 的简写形式</span></span><br><span class="line">f&#x27;&#123;255:#b&#125;&#x27;</span><br><span class="line"><span class="comment"># &#x27;0b11111111&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.python.org/3/library/string.html#grammar-token-precision">Python 官方文档</a></li>
<li><a href="https://stackoverflow.com/questions/1425493/convert-hex-to-binary/7373476">StackOverflow, convert hexo to binary</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>func</tag>
        <tag>hex</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派搭建 FastDFS 服务</title>
    <url>/hexo/2020/03/08/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BA%20FastDFS%20%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>树莓派搭建 FastDFS 服务记录</p>
<p>小结写在最前面：此方案可行，稍微有点坑，但是踩踩还是可以过的</p>
<h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><p>FastDFS 分布式文件存储系统，阿里系程序员<strong>余庆</strong>开发完成</p>
<p>FastDFS 只负责存储，不提供web支持，所以一般要搭配 nginx 使用</p>
<p>工作模式： client -&gt; (tracker server + storage server), tracker 信息负责管理， storage 负责存储</p>
<p>树莓派的默认账号： pi | raspberry</p>
<p>可以通过终端输入: ssh pi@host 链接</p>
<h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><ul>
<li><a href="https://github.com/happyfish100/fastdfs/wiki">官方文档</a></li>
<li><a href="https://www.youtube.com/watch?v=6Y2NihvPijQ">视频教程，不过要翻墙</a></li>
</ul>
<p>依赖关系：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── FastDFS-nginx-module</span><br><span class="line">├── fastdfs(tracker + storage)</span><br><span class="line">│   ├── GCC</span><br><span class="line">│   ├── libevent</span><br><span class="line">│   └── perl</span><br><span class="line">├── libfastcommon</span><br><span class="line">└── nginx</span><br><span class="line">    ├── pcre-devel</span><br><span class="line">    └── zlib-devel</span><br></pre></td></tr></table></figure>

<h3 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h3><p>一些包的名字在 RedHat 和 Debain 下的名字不一样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install git gcc make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel wget vim</span><br><span class="line"></span><br><span class="line">E: Unable to locate package gcc-c++</span><br><span class="line">E: Unable to locate package pcre</span><br><span class="line">E: Unable to locate package pcre-devel</span><br><span class="line">E: Unable to locate package zlib</span><br><span class="line">E: Unable to locate package zlib-devel</span><br><span class="line">E: Unable to locate package openssl-devel</span><br><span class="line"></span><br><span class="line">gcc-c++ 可以用 g++ 代替，不过好像 gcc 安装之后自动就装好了</span><br><span class="line"></span><br><span class="line">pcre，pcre-devel 用 libpcre3 libpcre3-dev 代替</span><br><span class="line"></span><br><span class="line">zlib： zlib1g</span><br><span class="line">openssl-devel: libssl-dev</span><br></pre></td></tr></table></figure>

<p>按照教程走，输入 ./make.sh &amp;&amp; ./make.sh install 还是报错，说 permission denied. 试试 <code>sudo -i</code></p>
<blockquote>
<p>启动 nginx:</p>
</blockquote>
<ol>
<li>cd 到 root@raspberrypi:/usr/local/nginx/sbin# 路径下运行 ./nginx</li>
<li>如果是重启就 ./nginx -s reload</li>
</ol>
<blockquote>
<p>wget 下载文件并重命名:</p>
</blockquote>
<p>wget -c ‘url’ -O ‘rename’</p>
<blockquote>
<p>查看已经上传的图片  </p>
</blockquote>
<p>根据 storage 配置找到路径，各种 cd 进去可以看到你已经上传的文件，我本地测试的时候是在这里 <code>/home/dfs/data/00/00</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  00 ls -al</span><br><span class="line">total 1072</span><br><span class="line">drwxr-xr-x   2 root root    4096 Mar 14 15:10 .</span><br><span class="line">drwxr-xr-x 258 root root    4096 Mar  8 11:38 ..</span><br><span class="line">-rw-r--r--   1 root root 1024694 Mar  8 11:44 wKgBal5k2qGAQv4CAA-itrfn0m4.tar.gz</span><br><span class="line">-rw-r--r--   1 root root   20002 Mar  8 12:52 wKgBal5k6pmAa4jlAABOIgA5mas34.jpeg</span><br><span class="line">-rw-r--r--   1 root root   20002 Mar  8 15:41 wKgBal5lEiyAfaT6AABOIgA5mas88.jpeg</span><br><span class="line">-rw-r--r--   1 root root   20002 Mar 14 15:10 wKgBal5s8_eAYY_fAABOIgA5mas81.jpeg</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试图片访问可以在 nginx 启动之后访问 host:8888/group1/M00/00/00/wKgBal5s8_eAYY_fAABOIgA5mas81.jpeg 这样的路径查看</p>
</blockquote>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>pi</tag>
        <tag>FastDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>生活小常识</title>
    <url>/hexo/2020/06/07/%E7%94%9F%E6%B4%BB%E5%B0%8F%E5%B8%B8%E8%AF%86/</url>
    <content><![CDATA[<p>别用 iPhone 来购买会员之类的虚拟产品!</p>
<blockquote>
<p>iPhone 在购买虚拟产品，比如网易云音乐之类的会员时，要比安卓，或者PC直接购买要贵，比例还挺高 20-30% 之间，这是 IOS 平台的雁过拔毛策略。。。直接在费 IOS 平台就可以</p>
</blockquote>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>小常识</tag>
      </tags>
  </entry>
  <entry>
    <title>词条</title>
    <url>/hexo/2020/05/28/%E8%AF%8D%E6%9D%A1/</url>
    <content><![CDATA[<blockquote>
<p>Q: 什么是反向代理</p>
</blockquote>
<p>反向代理是相对正向代理来说的。正向代理隐藏了客户端，反向代理隐藏了服务器端。比如我们搭建 VPS 服务器翻墙就是一个正向代理的例子。我们可以通过代理服务器对 Google 发起请求拿到信息。相对的，<a href="http://www.google.cn">www.google.cn</a> 就是一个反向代理，这个域名的背后有很多服务器，但我们不 care，他代表谷歌，这就足够了。</p>
<blockquote>
<p>Q: 为什么 BiFunction 可以表示为两个参数的函数接口</p>
</blockquote>
<p>这个命名还是很贴切的，在英语中 bi 前缀有两个的意思，来源于拉丁语。类似的单词还有 bifocal(河流分叉)，bifurcate(双面显微镜)等。</p>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
      <tags>
        <tag>解释</tag>
      </tags>
  </entry>
  <entry>
    <title>ASM 快速入门</title>
    <url>/hexo/2020/09/07/ASM-quick-guide/</url>
    <content><![CDATA[<p>通过本次实验对 ASM 这个字节码框架有一个基本的了解。实验必须是简单明了，方便重现的。引用一段话很好的概括了 ASM 的功能</p>
<blockquote>
<p>可以负责任的告诉大家，ASM只不过是通过 “Visitor” 模式将 “.class” 类文件的内容从头到尾扫描一遍。因此如果你抱着任何更苛刻的要求最后都将失望而归。</p>
</blockquote>
<p>实验平台信息：<br>    MacOS + IDEA + ASM Bytecode Outline 插件</p>
<h2 id="输出-Class-方法"><a href="#输出-Class-方法" class="headerlink" title="输出 Class 方法"></a>输出 Class 方法</h2><p>准备测试用 class，通过 ASM 输出 class 中的方法名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface01</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface02</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHello</span> <span class="keyword">implements</span> <span class="title">MyInterface01</span>, <span class="title">MyInterface02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>右键准备的测试文件，选中 ‘Show bytecode outline’ 选项，点击 Bytecode tab, 查看内容可以看到字节码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; class version 52.0 (52)</span><br><span class="line">&#x2F;&#x2F; access flags 0x21</span><br><span class="line">public class sorra&#x2F;tracesonar&#x2F;mytest&#x2F;SayHello implements sorra&#x2F;tracesonar&#x2F;mytest&#x2F;MyInterface01 sorra&#x2F;tracesonar&#x2F;mytest&#x2F;MyInterface02  &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; compiled from: SayHello.java</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; access flags 0x1</span><br><span class="line">  public &lt;init&gt;()V</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 3 L0</span><br><span class="line">    ALOAD 0</span><br><span class="line">    INVOKESPECIAL java&#x2F;lang&#x2F;Object.&lt;init&gt; ()V</span><br><span class="line">    RETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE this Lsorra&#x2F;tracesonar&#x2F;mytest&#x2F;SayHello; L0 L1 0</span><br><span class="line">    MAXSTACK &#x3D; 1</span><br><span class="line">    MAXLOCALS &#x3D; 1</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; access flags 0x1</span><br><span class="line">  public say()V</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 5 L0</span><br><span class="line">    LDC &quot;Jack&quot;</span><br><span class="line">    ASTORE 1</span><br><span class="line">   L1</span><br><span class="line">    LINENUMBER 6 L1</span><br><span class="line">    GETSTATIC java&#x2F;lang&#x2F;System.out : Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">    NEW java&#x2F;lang&#x2F;StringBuilder</span><br><span class="line">    DUP</span><br><span class="line">    INVOKESPECIAL java&#x2F;lang&#x2F;StringBuilder.&lt;init&gt; ()V</span><br><span class="line">    LDC &quot;Hello&quot;</span><br><span class="line">    INVOKEVIRTUAL java&#x2F;lang&#x2F;StringBuilder.append (Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">    ALOAD 1</span><br><span class="line">    INVOKEVIRTUAL java&#x2F;lang&#x2F;StringBuilder.append (Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">    INVOKEVIRTUAL java&#x2F;lang&#x2F;StringBuilder.toString ()Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">    INVOKEVIRTUAL java&#x2F;io&#x2F;PrintStream.println (Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">   L2</span><br><span class="line">    LINENUMBER 7 L2</span><br><span class="line">    RETURN</span><br><span class="line">   L3</span><br><span class="line">    LOCALVARIABLE this Lsorra&#x2F;tracesonar&#x2F;mytest&#x2F;SayHello; L0 L3 0</span><br><span class="line">    LOCALVARIABLE name Ljava&#x2F;lang&#x2F;String; L1 L3 1</span><br><span class="line">    MAXSTACK &#x3D; 3</span><br><span class="line">    MAXLOCALS &#x3D; 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ASMTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--- START ---&quot;</span>);</span><br><span class="line">        ClassReader cr = <span class="keyword">new</span> ClassReader(SayHello.class.getName());</span><br><span class="line">        cr.accept(<span class="keyword">new</span> DemoClassVisitor(), <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--- END ---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoClassVisitor</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoClassVisitor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Opcodes.ASM5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called when access file header, so it will called only once for each class</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * access: 方法的 modifier, 就是 public/private 的那些修饰词</span></span><br><span class="line"><span class="comment">    * name: class name</span></span><br><span class="line"><span class="comment">    * signature: 不是很确定，但是好像不重要</span></span><br><span class="line"><span class="comment">    * superName: 父类的名字，该例子中是 object</span></span><br><span class="line"><span class="comment">    * interfaces: 实现的接口</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span> version, <span class="keyword">int</span> access, String name, String signature, String superName, String[] interfaces)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.visit(version, access, name, signature, superName, interfaces);</span><br><span class="line">        System.out.println(<span class="string">&quot;invoke visit method, params: &quot;</span> + version + <span class="string">&quot;, &quot;</span> + access + <span class="string">&quot;, &quot;</span> + name + <span class="string">&quot;, &quot;</span> + signature + <span class="string">&quot;, &quot;</span> + superName + <span class="string">&quot;, &quot;</span> + Arrays.toString(interfaces));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called when access method</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String desc, String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;at Method &quot;</span> + name);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        MethodVisitor superMV = <span class="keyword">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DemoMethodVisitor(superMV, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoMethodVisitor</span> <span class="keyword">extends</span> <span class="title">MethodVisitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoMethodVisitor</span><span class="params">(MethodVisitor mv, String methodName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Opcodes.ASM5, mv);</span><br><span class="line">        <span class="keyword">this</span>.methodName = methodName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;at Method ‘&quot;</span> + methodName + <span class="string">&quot;’ Begin...&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.visitCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitLocalVariable</span><span class="params">(String name, String desc, String signature, Label start, Label end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.visitLocalVariable(name, desc, signature, start, end, index);</span><br><span class="line">        System.out.println(<span class="string">&quot;Params in visitLocalVariable: &quot;</span> + name + <span class="string">&quot;, &quot;</span> + desc + <span class="string">&quot;, &quot;</span> + signature + <span class="string">&quot;, &quot;</span> + start + <span class="string">&quot;, &quot;</span> + end + <span class="string">&quot;, &quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;at Method ‘&quot;</span> + methodName + <span class="string">&quot;’End.&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.visitEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>终端输出</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">--- START ---</span><br><span class="line">invoke visit method, params: 52, 33, sorra/tracesonar/mytest/SayHello, null, java/lang/Object, [sorra/tracesonar/mytest/MyInterface01, sorra/tracesonar/mytest/MyInterface02]</span><br><span class="line">at Method &lt;init&gt;</span><br><span class="line">at Method ‘&lt;init&gt;’ Begin...</span><br><span class="line">Params in visitLocalVariable: this, Lsorra/tracesonar/mytest/SayHello;, null, L662441761, L1618212626, 0</span><br><span class="line">at Method ‘&lt;init&gt;’End.</span><br><span class="line">at Method say</span><br><span class="line">at Method ‘say’ Begin...</span><br><span class="line">Params in visitLocalVariable: this, Lsorra/tracesonar/mytest/SayHello;, null, L1129670968, L1023714065, 0</span><br><span class="line">Params in visitLocalVariable: name, Ljava/lang/String;, null, L2051450519, L1023714065, 1</span><br><span class="line">at Method ‘say’End.</span><br><span class="line">--- END ---</span><br></pre></td></tr></table></figure>

<p>想要理解 ASM 运行方式，需要结合前面的 bytecode 内容。比如 <code>visitLocalVariable</code> 方法其实就是将 bytecode 里面对应的 LOCALVARIABLE 信息打印出来。</p>
<h2 id="MethodVisitor-的-visitMethodInsn-方法简单例子"><a href="#MethodVisitor-的-visitMethodInsn-方法简单例子" class="headerlink" title="MethodVisitor 的 visitMethodInsn 方法简单例子"></a>MethodVisitor 的 visitMethodInsn 方法简单例子</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>根据查到的资料，该方法可以知道当前的方法调用了其他类的什么方法，设计用例如下: Class A 有 method a, Class B 有 method b, a 中包含对 b 的调用，使用 visitMethodInsn 解析 a 方法是应该可以拿到这层关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</span><br><span class="line">    ClassB b = <span class="keyword">new</span> ClassB();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        b.methodB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Method B called...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>class A 的 bytecode 显示如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; class version 52.0 (52)</span><br><span class="line">&#x2F;&#x2F; access flags 0x21</span><br><span class="line">public class com&#x2F;jzheng&#x2F;asmtest&#x2F;ClassA &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; compiled from: ClassA.java</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; access flags 0x0</span><br><span class="line">  Lcom&#x2F;jzheng&#x2F;asmtest&#x2F;ClassB; b</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; access flags 0x1</span><br><span class="line">  public &lt;init&gt;()V</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 3 L0</span><br><span class="line">    ALOAD 0</span><br><span class="line">    INVOKESPECIAL java&#x2F;lang&#x2F;Object.&lt;init&gt; ()V</span><br><span class="line">   L1</span><br><span class="line">    LINENUMBER 4 L1</span><br><span class="line">    ALOAD 0</span><br><span class="line">    NEW com&#x2F;jzheng&#x2F;asmtest&#x2F;ClassB</span><br><span class="line">    DUP</span><br><span class="line">    INVOKESPECIAL com&#x2F;jzheng&#x2F;asmtest&#x2F;ClassB.&lt;init&gt; ()V</span><br><span class="line">    PUTFIELD com&#x2F;jzheng&#x2F;asmtest&#x2F;ClassA.b : Lcom&#x2F;jzheng&#x2F;asmtest&#x2F;ClassB;</span><br><span class="line">    RETURN</span><br><span class="line">   L2</span><br><span class="line">    LOCALVARIABLE this Lcom&#x2F;jzheng&#x2F;asmtest&#x2F;ClassA; L0 L2 0</span><br><span class="line">    MAXSTACK &#x3D; 3</span><br><span class="line">    MAXLOCALS &#x3D; 1</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; access flags 0x1</span><br><span class="line">  public methodA()V</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 7 L0</span><br><span class="line">    ALOAD 0</span><br><span class="line">    GETFIELD com&#x2F;jzheng&#x2F;asmtest&#x2F;ClassA.b : Lcom&#x2F;jzheng&#x2F;asmtest&#x2F;ClassB;</span><br><span class="line">    INVOKEVIRTUAL com&#x2F;jzheng&#x2F;asmtest&#x2F;ClassB.methodB ()V</span><br><span class="line">   L1</span><br><span class="line">    LINENUMBER 8 L1</span><br><span class="line">    RETURN</span><br><span class="line">   L2</span><br><span class="line">    LOCALVARIABLE this Lcom&#x2F;jzheng&#x2F;asmtest&#x2F;ClassA; L0 L2 0</span><br><span class="line">    MAXSTACK &#x3D; 1</span><br><span class="line">    MAXLOCALS &#x3D; 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到在 <code>methodA()V</code> block 里有对 ClassB 的方法调用说明 <code>INVOKEVIRTUAL com/jzheng/asmtest/ClassB.methodB ()V</code>，通过它我们可以知道当前方法对其他类方法的调用</p>
<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ASMTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--- START ---&quot;</span>);</span><br><span class="line">        ClassReader cr = <span class="keyword">new</span> ClassReader(ClassA.class.getName());</span><br><span class="line">        cr.accept(<span class="keyword">new</span> DemoClassVisitor(), <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--- END ---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoClassVisitor</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoClassVisitor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Opcodes.ASM5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called when access method</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String desc, String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;at Method &quot;</span> + name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MethodVisitor(Opcodes.ASM5) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitMethodInsn</span><span class="params">(<span class="keyword">int</span> opcode, String owner, String name, String desc, <span class="keyword">boolean</span> itf)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.visitMethodInsn(opcode, owner, name, desc, itf);</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;opcode: %s, owner: %s, name: %s, desc: %s, itf: %s&quot;</span>, opcode, owner, name, desc, itf));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// --- START ---</span></span><br><span class="line"><span class="comment">// at Method &lt;init&gt;</span></span><br><span class="line"><span class="comment">// opcode: 183, owner: java/lang/Object, name: &lt;init&gt;, desc: ()V, itf: false</span></span><br><span class="line"><span class="comment">// opcode: 183, owner: com/jzheng/asmtest/ClassB, name: &lt;init&gt;, desc: ()V, itf: false</span></span><br><span class="line"><span class="comment">// at Method methodA</span></span><br><span class="line"><span class="comment">// opcode: 182, owner: com/jzheng/asmtest/ClassB, name: methodB, desc: ()V, itf: false</span></span><br><span class="line"><span class="comment">// --- END ---</span></span><br></pre></td></tr></table></figure>

<h2 id="测试-itf-参数"><a href="#测试-itf-参数" class="headerlink" title="测试 itf 参数"></a>测试 itf 参数</h2><p>visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf)</p>
<ul>
<li>desc: 方法参数和返回值类型，<code>()</code> 内为参数，外面是返回值</li>
<li>itf 方法是否来自接口，如下面所示的例子，当子类实现接口，通过子类调用方法时，值为 false，当强转为接口时值为 true。 值的注意的是，继承的方法也是 false。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassReader;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Opcodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Scenario:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.objectweb.asm.MethodVisitor#visitMethodInsn(int, String, String, String, boolean)&#125;, 测试方法是继承自父类或者接口时该接口中的参数表现形式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVisitMethodInsn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--- START ---&quot;</span>);</span><br><span class="line">        ClassReader cr = <span class="keyword">new</span> ClassReader(Client.class.getName());</span><br><span class="line">        cr.accept(<span class="keyword">new</span> DemoClassVisitor(), <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--- END ---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    Sub sub = <span class="keyword">new</span> Sub();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sub.methodOfSuper();</span><br><span class="line">        sub.methodOfInterface();</span><br><span class="line">        ((Super)sub).methodOfSuper();</span><br><span class="line">        ((MyInterface)sub).methodOfInterface();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodOfSuper</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">methodOfInterface</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodOfSuper</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">methodOfInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoClassVisitor</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoClassVisitor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Opcodes.ASM5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called when access method</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String desc, String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;In Method &quot;</span> + name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MethodVisitor(Opcodes.ASM5) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitMethodInsn</span><span class="params">(<span class="keyword">int</span> opcode, String owner, String name, String desc, <span class="keyword">boolean</span> itf)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.visitMethodInsn(opcode, owner, name, desc, itf);</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;opcode: %s, owner: %s, name: %s, desc: %s, itf: %s&quot;</span>, opcode, owner, name, desc, itf));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="visitInvokeDynamicInsn-用以检测-lambda-表达式"><a href="#visitInvokeDynamicInsn-用以检测-lambda-表达式" class="headerlink" title="visitInvokeDynamicInsn 用以检测 lambda 表达式"></a>visitInvokeDynamicInsn 用以检测 lambda 表达式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Scenario:</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.objectweb.asm.MethodVisitor#visitInvokeDynamicInsn(String, String, Handle, Object...)&#125;, 这个方法可以用来检测动态生成的方法，比如 lambada 表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVisitInvokeDynamicInsn</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestVisitInvokeDynamicInsn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Opcodes.ASM5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String desc, String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Parse Method: &quot;</span> + name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MethodVisitor(Opcodes.ASM5) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitInvokeDynamicInsn</span><span class="params">(String name, String desc, Handle bsm, Object... bsmArgs)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (Object sub : bsmArgs) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sub <span class="keyword">instanceof</span> Handle) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;Handle info: &quot;</span> + sub);</span><br><span class="line">                        System.out.printf(<span class="string">&quot;name: %s, desc: %s, owner: %s, tag: %s%n&quot;</span>, ((Handle) sub).getName(), ((Handle) sub).getDesc(), ((Handle) sub).getOwner(), ((Handle) sub).getTag() );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">super</span>.visitInvokeDynamicInsn(name, desc, bsm, bsmArgs);</span><br><span class="line">                System.out.printf(<span class="string">&quot;Output from [visitInvokeDynamicInsn]%nname: %s%n desc: %s%n bsm: %s%n bsmArgs: %s%n&quot;</span>, name, desc, bsm, Arrays.asList(bsmArgs));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--- START ---&quot;</span>);</span><br><span class="line">        ClassReader cr = <span class="keyword">new</span> ClassReader(Client02.class.getName());</span><br><span class="line">        cr.accept(<span class="keyword">new</span> TestVisitInvokeDynamicInsn(), <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--- END ---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] names = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>&#125;;</span><br><span class="line">        Arrays.stream(names).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        BinaryOperator&lt;Long&gt; addLongs = Long::sum;</span><br><span class="line">        addLongs.apply(<span class="number">1L</span>,<span class="number">2L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// --- START ---</span></span><br><span class="line"><span class="comment">// Parse Method: &lt;init&gt;</span></span><br><span class="line"><span class="comment">// Parse Method: test</span></span><br><span class="line"><span class="comment">// Handle info: java/io/PrintStream.println(Ljava/lang/String;)V (5)</span></span><br><span class="line"><span class="comment">// name: println, desc: (Ljava/lang/String;)V, owner: java/io/PrintStream, tag: 5</span></span><br><span class="line"><span class="comment">// Output from [visitInvokeDynamicInsn]</span></span><br><span class="line"><span class="comment">// name: accept</span></span><br><span class="line"><span class="comment">//  desc: (Ljava/io/PrintStream;)Ljava/util/function/Consumer;</span></span><br><span class="line"><span class="comment">//  bsm: java/lang/invoke/LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; (6)</span></span><br><span class="line"><span class="comment">//  bsmArgs: [(Ljava/lang/Object;)V, java/io/PrintStream.println(Ljava/lang/String;)V (5), (Ljava/lang/String;)V]</span></span><br><span class="line"><span class="comment">// Handle info: java/lang/Long.sum(JJ)J (6)</span></span><br><span class="line"><span class="comment">// name: sum, desc: (JJ)J, owner: java/lang/Long, tag: 6</span></span><br><span class="line"><span class="comment">// Output from [visitInvokeDynamicInsn]</span></span><br><span class="line"><span class="comment">// name: apply</span></span><br><span class="line"><span class="comment">//  desc: ()Ljava/util/function/BinaryOperator;</span></span><br><span class="line"><span class="comment">//  bsm: java/lang/invoke/LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; (6)</span></span><br><span class="line"><span class="comment">//  bsmArgs: [(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;, java/lang/Long.sum(JJ)J (6), (Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;]</span></span><br><span class="line"><span class="comment">// --- END ---</span></span><br></pre></td></tr></table></figure>

<p>注意参数列表中的 bsmArgs, 其中的 Handle 可能是你想要的， 列表中的 bsm 是一个固定值，看着像是 lambda 的指代</p>
<h2 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h2><p>实验内容：准备一个 HelloWorld.class 可以打印出 ‘Hello World’ 字样。通过 ASM 框架使他在打印之前和之后都输出一些 debug 信息，调用时可以使用反射简化实验。</p>
<p>测试用 class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例，通过反射拿到测试方法并调用查看输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class cls = Class.forName(<span class="string">&quot;sorra.tracesonar.main.aopsample.HelloWorld&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Method sayHello = cls.getDeclaredMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">        sayHello.invoke(cls.newInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// run and get output:</span></span><br><span class="line"><span class="comment">// Hello World...</span></span><br></pre></td></tr></table></figure>

<p>预期目标：通过 ASM 修改目标 class 使得输出为 ‘Test start \n Hello World… \n Test end’，对应的 java code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Expected</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test start&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Test end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>选中 java 文件，右键 -&gt; Show Bytecode Outline 选中 ASMifield tab 可以看到转化后的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> asm.sorra.tracesonar.main.aopsample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpectedDump</span> <span class="keyword">implements</span> <span class="title">Opcodes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] dump() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        ClassWriter cw = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">        FieldVisitor fv;</span><br><span class="line">        MethodVisitor mv;</span><br><span class="line">        AnnotationVisitor av0;</span><br><span class="line"></span><br><span class="line">        cw.visit(<span class="number">52</span>, ACC_PUBLIC + ACC_SUPER, <span class="string">&quot;sorra/tracesonar/main/aopsample/Expected&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        cw.visitSource(<span class="string">&quot;Expected.java&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            mv = cw.visitMethod(ACC_PUBLIC, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            mv.visitCode();</span><br><span class="line">            Label l0 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l0);</span><br><span class="line">            mv.visitLineNumber(<span class="number">3</span>, l0);</span><br><span class="line">            mv.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            mv.visitInsn(RETURN);</span><br><span class="line">            Label l1 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l1);</span><br><span class="line">            mv.visitLocalVariable(<span class="string">&quot;this&quot;</span>, <span class="string">&quot;Lsorra/tracesonar/main/aopsample/Expected;&quot;</span>, <span class="keyword">null</span>, l0, l1, <span class="number">0</span>);</span><br><span class="line">            mv.visitMaxs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            mv.visitEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            mv = cw.visitMethod(ACC_PUBLIC, <span class="string">&quot;sayHello&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            mv.visitCode();</span><br><span class="line">            Label l0 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l0);</span><br><span class="line">            mv.visitLineNumber(<span class="number">5</span>, l0);</span><br><span class="line">            mv.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>);</span><br><span class="line">            mv.visitLdcInsn(<span class="string">&quot;Test start&quot;</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            Label l1 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l1);</span><br><span class="line">            mv.visitLineNumber(<span class="number">6</span>, l1);</span><br><span class="line">            mv.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>);</span><br><span class="line">            mv.visitLdcInsn(<span class="string">&quot;Hello World...&quot;</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            Label l2 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l2);</span><br><span class="line">            mv.visitLineNumber(<span class="number">7</span>, l2);</span><br><span class="line">            mv.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>);</span><br><span class="line">            mv.visitLdcInsn(<span class="string">&quot;Test end&quot;</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            Label l3 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l3);</span><br><span class="line">            mv.visitLineNumber(<span class="number">8</span>, l3);</span><br><span class="line">            mv.visitInsn(RETURN);</span><br><span class="line">            Label l4 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l4);</span><br><span class="line">            mv.visitLocalVariable(<span class="string">&quot;this&quot;</span>, <span class="string">&quot;Lsorra/tracesonar/main/aopsample/Expected;&quot;</span>, <span class="keyword">null</span>, l0, l4, <span class="number">0</span>);</span><br><span class="line">            mv.visitMaxs(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">            mv.visitEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        cw.visitEnd();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cw.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中类似如下的代码使一些行号和变量的处理，可以删掉不要，不影响结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Label l0 = <span class="keyword">new</span> Label();</span><br><span class="line">mv.visitLabel(l0);</span><br><span class="line">mv.visitLineNumber(<span class="number">3</span>, l0);</span><br><span class="line">...</span><br><span class="line">Label l4 = <span class="keyword">new</span> Label();</span><br><span class="line">mv.visitLabel(l4);</span><br><span class="line">mv.visitLocalVariable(<span class="string">&quot;this&quot;</span>, <span class="string">&quot;Lsorra/tracesonar/main/aopsample/Expected;&quot;</span>, <span class="keyword">null</span>, l0, l4, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>将自动生成的文件里的冗余语句删掉，加一个 main 方法，生成文件并存放到根目录下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpectedDump</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] dump() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> cw.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] updated = dump();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;Expected.class&quot;</span>)) &#123;</span><br><span class="line">            fos.write(updated);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Write success...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行该 Java 文件，可以看到 project 的根目录下有生成一个名为 ‘Expected.class’ 的文件，在 IDEA 里面浏览它，编辑器会自动给出反编译结果，可以发现，在目标语句前后已经加上了我们要的 ‘Test Start/End’ 的 debug 语句了。</p>
]]></content>
      <categories>
        <category>弹射起步</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>asm</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章 the AWK language</title>
    <url>/hexo/2021/06/17/AWK-c2-the-AWK-language/</url>
    <content><![CDATA[<p>最简单的 awk 程序是由一系列 pattern-action 组成的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pattern &#123; action &#125;</span><br><span class="line">pattern &#123; action &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>有时 pattern 会省略，有时 action 会省略。当 awk 检测程序段没有语法错误后，他会一句一句的执行。pattern 没有写即表示匹配每一行。</p>
<p>本章第一节会介绍 pattern， 后面会介绍表达式，赋值等，剩余部分则是介绍函数等信息。</p>
<p>这里的准备文件是有讲究的，直接用 vscode 准备会出问题，最好在终端使用 echo + \t 的方式手动打一遍</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat countries                  </span><br><span class="line">USSR    8649    275     Asia</span><br><span class="line">Canada  3852    25      North America</span><br><span class="line">China   3705    1032    Asia</span><br><span class="line">USA     3615    237     North America</span><br><span class="line">Brazil  286     134     South America</span><br><span class="line">India   1267    746     Asia</span><br><span class="line">Mexico  762     78      North America</span><br><span class="line">France  211     55      Europe</span><br><span class="line">Japan   144     120     Asia</span><br><span class="line">Germany 96      61      Europe</span><br><span class="line">England 94      56      Europe</span><br><span class="line"></span><br><span class="line">sed -n <span class="string">&#x27;l&#x27;</span> countries </span><br><span class="line">USSR\t8649\t275\tAsia$</span><br><span class="line">Canada\t3852\t25\tNorth America$</span><br><span class="line">China\t3705\t1032\tAsia$</span><br><span class="line">USA\t3615\t237\tNorth America$</span><br><span class="line">Brazil\t286\t134\tSouth America$</span><br><span class="line">India\t1267\t746\tAsia$</span><br><span class="line">Mexico\t762\t78\tNorth America$</span><br><span class="line">France\t211\t55\tEurope$</span><br><span class="line">Japan\t144\t120\tAsia$</span><br><span class="line">Germany\t96\t61\tEurope$</span><br><span class="line">England\t94\t56\tEurope$</span><br><span class="line"></span><br><span class="line">bat -A countries </span><br><span class="line">   1   │ USSR├──┤8649├──┤275├──┤Asia␊</span><br><span class="line">   2   │ Canada├──┤3852├──┤25├──┤North·America␊</span><br><span class="line">   3   │ China├──┤3705├──┤1032├──┤Asia␊</span><br><span class="line">   4   │ USA├──┤3615├──┤237├──┤North·America␊</span><br><span class="line">   5   │ Brazil├──┤286├──┤134├──┤South·America␊</span><br><span class="line">   6   │ India├──┤1267├──┤746├──┤Asia␊</span><br><span class="line">   7   │ Mexico├──┤762├──┤78├──┤North·America␊</span><br><span class="line">   8   │ France├──┤211├──┤55├──┤Europe␊</span><br><span class="line">   9   │ Japan├──┤144├──┤120├──┤Asia␊</span><br><span class="line">  10   │ Germany├──┤96├──┤61├──┤Europe␊</span><br><span class="line">  11   │ England├──┤94├──┤56├──┤Europe␊</span><br></pre></td></tr></table></figure>

<h2 id="Patterns"><a href="#Patterns" class="headerlink" title="Patterns"></a>Patterns</h2><p>pattern 控制着 action 的执行，下面介绍六种 pattern 类型</p>
<ul>
<li>BEGIN { statements }</li>
<li>END { statements }</li>
<li>expression { statements }, 当 expression 为 true， statements 会被执行</li>
<li>/regular expression/{ statements }</li>
<li>compound pattern { statements }, pattern 通过 &amp;&amp;, ||, !, () 链接</li>
<li>pattern1, pattern2 { statements }</li>
</ul>
<h3 id="BEGIN-and-END"><a href="#BEGIN-and-END" class="headerlink" title="BEGIN and END"></a>BEGIN and END</h3><p>BEGIN 经常用来改变 field 的分隔符，默认的分隔符通过 FS 这个内置变量控制，默认的值有空格， / 和 tab. 下面的例子中，我们将分隔符改为 tab 并统计所有地区的面积和人口总数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;</span></span><br><span class="line"><span class="string">BEGIN &#123; </span></span><br><span class="line"><span class="string">    FS = &quot;\t&quot;</span></span><br><span class="line"><span class="string">    printf(&quot;%10s %6s %5s  %s\n\n&quot;, &quot;COUNTRY&quot;, &quot;AREA&quot;, &quot;POP&quot;, &quot;CONTINENT&quot;)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    printf(&quot;%10s %6s %5d  %s\n&quot;, $1, $2, $3, $4)</span></span><br><span class="line"><span class="string">    area = area + $2</span></span><br><span class="line"><span class="string">    pop = pop + $3</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">END &#123; printf(&quot;\n%10s %6d %5d\n&quot;, &quot;TOTAL&quot;, area, pop) &#125;&#x27;</span> countries</span><br><span class="line">   COUNTRY   AREA   POP  CONTINENT</span><br><span class="line"></span><br><span class="line">      USSR   8649   275  Asia</span><br><span class="line">    Canada   3852    25  North America</span><br><span class="line">     China   3705  1032  Asia</span><br><span class="line">       USA   3615   237  North America</span><br><span class="line">    Brazil    286   134  South America</span><br><span class="line">     India   1267   746  Asia</span><br><span class="line">    Mexico    762    78  North America</span><br><span class="line">    France    211    55  Europe</span><br><span class="line">     Japan    144   120  Asia</span><br><span class="line">   Germany     96    61  Europe</span><br><span class="line">   England     94    56  Europe</span><br><span class="line"></span><br><span class="line">     TOTAL  22681  2819</span><br></pre></td></tr></table></figure>

<h3 id="Expressions-as-Patterns"><a href="#Expressions-as-Patterns" class="headerlink" title="Expressions as Patterns"></a>Expressions as Patterns</h3><p>Expressions 是指运算表达式，由 数字，字符串和符号组成。本书中的 string 指的是 0-n 的字符序列。空字串 “” 在 awk 中被称为 null string. 每个 string 中都包含有 null string.</p>
<p>如果操作符需要一个 string 类型的参数，但是你给了一个 numberic 的参数，则 awk 会将数字类型转为字符类型。同样的，如果操作符需要数字类型，给了字符类型，也会自动做转化。</p>
<p>常见的比较符号</p>
<table>
<thead>
<tr>
<th align="left">OPERATOR</th>
<th align="left">MEANING</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&lt;</td>
<td align="left">less than</td>
</tr>
<tr>
<td align="left">&lt;=</td>
<td align="left">less than or equal to</td>
</tr>
<tr>
<td align="left">==</td>
<td align="left">equal to</td>
</tr>
<tr>
<td align="left">!=</td>
<td align="left">not equal to</td>
</tr>
<tr>
<td align="left">&gt;=</td>
<td align="left">greater than or equal to</td>
</tr>
<tr>
<td align="left">&gt;</td>
<td align="left">greater than</td>
</tr>
<tr>
<td align="left">~</td>
<td align="left">matched by</td>
</tr>
<tr>
<td align="left">!~</td>
<td align="left">not matched by</td>
</tr>
</tbody></table>
<p>举例：</p>
<ul>
<li>NF&gt;10: 选择 field 大于 10 的行</li>
<li>NF: 直接数字, match when it’s numberic value is nonzero</li>
<li>string, match when value of expression is nonnull</li>
<li>num operator num, 做计算</li>
<li>num operator str, 都转化为 string 做计算</li>
<li>string operator string, 按位比较顺序. “Canada” &lt; “China”</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;$0 &gt;= &quot;M&quot;&#x27;</span> countries                                                     </span><br><span class="line">USSR    8649    275     Asia</span><br><span class="line">USA     3615    237     North America</span><br><span class="line">Mexico  762     78      North America</span><br></pre></td></tr></table></figure>

<h3 id="String-matching-Patterns"><a href="#String-matching-Patterns" class="headerlink" title="String-matching Patterns"></a>String-matching Patterns</h3><p>Awk 支持 regular expressions</p>
<p>String-Matching Pattern</p>
<ul>
<li>/regexpr/: 目标是行内容的一部分</li>
<li>expression ~ /regexpr/: matches if the string value of expression contains a substring matched by regexpr</li>
<li>expression !~ /regexpr/: 和上面的相反</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;$4 ~ /Asia/&#x27;</span> countries </span><br><span class="line">USSR    8649    275     Asia</span><br><span class="line">China   3705    1032    Asia</span><br><span class="line">India   1267    746     Asia</span><br><span class="line">Japan   144     120     Asia</span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;$4 !~ /Asia/&#x27;</span> countries</span><br><span class="line">Canada  3852    25      North America</span><br><span class="line">USA     3615    237     North America</span><br><span class="line">Brazil  286     134     South America</span><br><span class="line">Mexico  762     78      North America</span><br><span class="line">France  211     55      Europe</span><br><span class="line">Germany 96      61      Europe</span><br><span class="line">England 94      56      Europe</span><br></pre></td></tr></table></figure>

<p>这部分可以这样理解，基本的 awk 格式是 <code>pattern &#123; action &#125;</code>, 而这部分 match 是 pattern 的扩展。pattern = expression (!~) /regexpr/</p>
<h3 id="Regular-Expressions"><a href="#Regular-Expressions" class="headerlink" title="Regular Expressions"></a>Regular Expressions</h3><p>这部分自信已经不用笔记了。。。</p>
<p>只记一个 <code>(Asian|European|North American)</code> 表示单词级别的选择关系</p>
<p>ESCAPE SEQUENCES</p>
<table>
<thead>
<tr>
<th align="left">SEQUENCE</th>
<th align="left">MEANING</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\b</td>
<td align="left">backspace</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">formfeed</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">newline (line feed)</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">carriage return</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">tab</td>
</tr>
<tr>
<td align="left">\ddd</td>
<td align="left">octal value ddd, where ddd is 1-3 digits between 0-7</td>
</tr>
<tr>
<td align="left">\c</td>
<td align="left">any other character c literally</td>
</tr>
</tbody></table>
<h3 id="Compound-Patterns"><a href="#Compound-Patterns" class="headerlink" title="Compound Patterns"></a>Compound Patterns</h3><p>混合模式，即多个表示式通过逻辑运算符组合</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;$4 == &quot;Asia&quot; &amp;&amp; $3 &gt; 500&#x27;</span> countries</span><br><span class="line">China   3705    1032    Asia</span><br><span class="line">India   1267    746     Asia</span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;$4 == &quot;Asia&quot; || $4 == &quot;Europe&quot;&#x27;</span> countries</span><br><span class="line">USSR    8649    275     Asia</span><br><span class="line">China   3705    1032    Asia</span><br><span class="line">India   1267    746     Asia</span><br><span class="line">France  211     55      Europe</span><br><span class="line">Japan   144     120     Asia</span><br><span class="line">Germany 96      61      Europe</span><br><span class="line">England 94      56      Europe</span><br></pre></td></tr></table></figure>

<p>上面的例子是字符比较，也可以使用正则</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;$4 ~ /^(Asia|Europe)$/&#x27;</span> countries </span><br><span class="line">USSR    8649    275     Asia</span><br><span class="line">China   3705    1032    Asia</span><br><span class="line">India   1267    746     Asia</span><br><span class="line">France  211     55      Europe</span><br><span class="line">Japan   144     120     Asia</span><br><span class="line">Germany 96      61      Europe</span><br><span class="line">England 94      56      Europe</span><br></pre></td></tr></table></figure>

<p>如果其他 field 不包含这两个关键字，还可以用逻辑或筛选</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等价于 awk &#x27;/Asia|Europe/&#x27; countries</span></span><br><span class="line">awk <span class="string">&#x27;/Asia/||/Europe/&#x27;</span> countries      </span><br><span class="line">USSR    8649    275     Asia</span><br><span class="line">China   3705    1032    Asia</span><br><span class="line">India   1267    746     Asia</span><br><span class="line">France  211     55      Europe</span><br><span class="line">Japan   144     120     Asia</span><br><span class="line">Germany 96      61      Europe</span><br><span class="line">England 94      56      Europe</span><br></pre></td></tr></table></figure>

<p>优先级：! &gt; &amp;&amp; &gt; ||</p>
<p>同优先级(|| + &amp;&amp;)的操作 从左到右 的顺序计算</p>
<h3 id="Range-Patterns"><a href="#Range-Patterns" class="headerlink" title="Range Patterns"></a>Range Patterns</h3><p>即两个 pattern 用逗号间隔, <code>pat1， pat2</code> 表示取匹配的 1 行或 n 行内容. 如下面的例子，选取 Canada 出现到 USA 之间的所有行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;/Canada/, /USA/&#x27;</span> countries </span><br><span class="line">Canada  3852    25      North America</span><br><span class="line">China   3705    1032    Asia</span><br><span class="line">USA     3615    237     North America</span><br></pre></td></tr></table></figure>

<p>如果后一个 pattern 没有匹配的内容，则匹配到末尾</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;/Europe/, /Africa/&#x27;</span> countries</span><br><span class="line">France  211     55      Europe</span><br><span class="line">Japan   144     120     Asia</span><br><span class="line">Germany 96      61      Europe</span><br><span class="line">England 94      56      Europe</span><br></pre></td></tr></table></figure>

<ul>
<li>FNR: the number of the line just read from current input file</li>
<li>FILENAME: the filename itself</li>
</ul>
<p>打印第一行到第五行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;FNR == 1, FNR == 5 &#123; print FILENAME &quot;:&quot; $0 &#125;&#x27;</span> countries </span><br><span class="line">countries:USSR  8649    275     Asia</span><br><span class="line">countries:Canada        3852    25      North America</span><br><span class="line">countries:China 3705    1032    Asia</span><br><span class="line">countries:USA   3615    237     North America</span><br><span class="line">countries:Brazil        286     134     South America</span><br></pre></td></tr></table></figure>

<p>同样的效果还可以写成</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;FNR &lt;= 5 &#123; print FILENAME &quot;: &quot; $0 &#125;&#x27;</span> countries         </span><br><span class="line">countries: USSR 8649    275     Asia</span><br><span class="line">countries: Canada       3852    25      North America</span><br><span class="line">countries: China        3705    1032    Asia</span><br><span class="line">countries: USA  3615    237     North America</span><br><span class="line">countries: Brazil       286     134     South America</span><br></pre></td></tr></table></figure>

<h3 id="Summary-of-Patterns"><a href="#Summary-of-Patterns" class="headerlink" title="Summary of Patterns"></a>Summary of Patterns</h3><p>总结 pattern 支持的格式</p>
<table>
<thead>
<tr>
<th align="left">PATTERN</th>
<th align="left">EXAMPLE</th>
<th align="left">MATCHES</th>
</tr>
</thead>
<tbody><tr>
<td align="left">BEGIN</td>
<td align="left">BEGIN</td>
<td align="left">before any input has been read</td>
</tr>
<tr>
<td align="left">END</td>
<td align="left">END</td>
<td align="left">after all input has been read</td>
</tr>
<tr>
<td align="left">expression</td>
<td align="left">$3 &lt; 100</td>
<td align="left">third field less than 100</td>
</tr>
<tr>
<td align="left">string-matching</td>
<td align="left">/Asia/</td>
<td align="left">lines that contain Asia</td>
</tr>
<tr>
<td align="left">compound</td>
<td align="left">$3 &lt; 100 &amp;&amp; $4 == “Asia”</td>
<td align="left">thrid fields less than 100 + fourth field is Asia</td>
</tr>
<tr>
<td align="left">range</td>
<td align="left">NR==10, NR==20</td>
<td align="left">tenth to twentieth lines of input inclusive</td>
</tr>
</tbody></table>
<h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><p>在 pattern-action 的格式中，pattern 决定了是否执行 action。action 可以很简单，比如打印；也可以很复杂，比如多语句操作或者包含控制流什么的。下面章节会介绍自定义函数和输入，输出的一些语法。</p>
<p>actions 中可以包含下列语法</p>
<ul>
<li>包含常量，变量，赋值函数调用的 expressions</li>
<li>print</li>
<li>printf</li>
<li>if 语句</li>
<li>if - else</li>
<li>while</li>
<li>for (expression; expression; expression) statement</li>
<li>for (variable in array) statement</li>
<li>do statement while (expression)</li>
<li>break</li>
<li>continue</li>
<li>next</li>
<li>exit</li>
<li>exit expression</li>
<li>{ statement }</li>
</ul>
<h3 id="Expressions"><a href="#Expressions" class="headerlink" title="Expressions"></a>Expressions</h3><p>expression 是最简单的语句，expression 之间可以通过 operators 连接，有五种 operators</p>
<ul>
<li>arthmetic</li>
<li>comparison</li>
<li>logical</li>
<li>conditional</li>
<li>assignment</li>
</ul>
<h4 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h4><p>两种常数类型：string and numberic</p>
<p>string = 双引号 + 字符 + 双引号，字符包括转义字符</p>
<p>numberic 都是由浮点类型的值表示的，可以有不同的形态，但是内存中都是浮点表示，比如 1e6, 1.00E6 等形式</p>
<h4 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h4><ul>
<li>user-defined</li>
<li>built-in</li>
<li>fields</li>
</ul>
<p>由于变量的类型是没有声明的，所以 awk 会根据上下文推断变量类型，必要时它会做 string 和 numberic 之间的转换。</p>
<p>还没有初始化的时候 string 默认是 “” (the null string), numberic 默认是 0</p>
<h4 id="Built-in-Variables"><a href="#Built-in-Variables" class="headerlink" title="Built-in Variables"></a>Built-in Variables</h4><p>下面是一些自带的变量，FILENAME 在每次读文件时都会自动赋值。FNR，NF 和 NR 在每次读入一行时重置。</p>
<table>
<thead>
<tr>
<th align="left">VARIABLE</th>
<th align="left">MEANING</th>
<th align="left">DEFAULT</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ARGC</td>
<td align="left">number of command line arguments</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">ARGV</td>
<td align="left">array of command line arguments</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">FILENAME</td>
<td align="left">name of current input file</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">FNR</td>
<td align="left">record number in current file</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">FS</td>
<td align="left">controls the input field separator</td>
<td align="left">“ “</td>
</tr>
<tr>
<td align="left">NF</td>
<td align="left">number of fields in current record</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">NR</td>
<td align="left">number of records read so far</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">OFMT</td>
<td align="left">output format for numbers</td>
<td align="left">“%.6g”</td>
</tr>
<tr>
<td align="left">OFS</td>
<td align="left">output field separator</td>
<td align="left">“ “</td>
</tr>
<tr>
<td align="left">ORS</td>
<td align="left">output record separator</td>
<td align="left">“\n”</td>
</tr>
<tr>
<td align="left">RLENGTH</td>
<td align="left">length of string matched by match function</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">RS</td>
<td align="left">controls the input recrod separator</td>
<td align="left">“\n”</td>
</tr>
<tr>
<td align="left">RSTART</td>
<td align="left">start of string matched by match function</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">SUBSEP</td>
<td align="left">subscript separator</td>
<td align="left">“\034”</td>
</tr>
</tbody></table>
<h4 id="Field-Variables"><a href="#Field-Variables" class="headerlink" title="Field Variables"></a>Field Variables</h4><p>表示当前行的 field 参数，从 $1 - $NF, $0 表示整行。运行一些例子找找感觉</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第二个 field 值缩小 1000 倍并打印</span></span><br><span class="line">awk <span class="string">&#x27;&#123; $2 = $2 / 1000; print &#125;&#x27;</span> countries </span><br><span class="line"></span><br><span class="line">USSR 8.649 275 Asia</span><br><span class="line">Canada 3.852 25 North America</span><br><span class="line">China 3.705 1032 Asia</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>将 North America 和 South America 替换为简写</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN &#123; FS = OFS = &quot;\t&quot; &#125;</span></span><br><span class="line"><span class="string">$4 == &quot;North America&quot; &#123; $4 = &quot;NA&quot; &#125;</span></span><br><span class="line"><span class="string">$4 == &quot;South America&quot; &#123; $4 = &quot;SA&quot; &#125; </span></span><br><span class="line"><span class="string">&#123;print&#125;</span></span><br><span class="line"><span class="string">&#x27;</span> countries</span><br><span class="line">USSR    8649    275     Asia</span><br><span class="line">Canada  3852    25      NA</span><br><span class="line">China   3705    1032    Asia</span><br><span class="line">USA     3615    237     NA</span><br><span class="line">Brazil  286     134     SA</span><br><span class="line">India   1267    746     Asia</span><br><span class="line">Mexico  762     78      NA</span><br><span class="line">France  211     55      Europe</span><br><span class="line">Japan   144     120     Asia</span><br><span class="line">Germany 96      61      Europe</span><br><span class="line">England 94      56      Europe</span><br></pre></td></tr></table></figure>

<p>PS: 这里之前我倒是没有意识到，上面的做法其实就是多种情况替换的案例了</p>
<p>还有一些比较神奇的使用方式，比如 $(NF - 1) 可以取得倒数第二个 field。如果 field 不存在，默认值为 null string, 比如 $(NF + 1), 一个新的 field 可以通过赋值得到，比如下面的例子是在原有的数据后面添加第五列元素</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN &#123; FS = OFS = &quot;\t&quot; &#125;; &#123; $5 = 1000 * $3 / $2; print &#125;&#x27;</span> countries </span><br><span class="line">USSR    8649    275     Asia    31.7956</span><br><span class="line">Canada  3852    25      North America   6.49013</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="Arthmetic-Operators"><a href="#Arthmetic-Operators" class="headerlink" title="Arthmetic Operators"></a>Arthmetic Operators</h4><p>awk 提供常规计算 +, -, *, %, ^.</p>
<h4 id="Comparison-Operators"><a href="#Comparison-Operators" class="headerlink" title="Comparison Operators"></a>Comparison Operators</h4><p>支持常见的比较操作：&lt;, &lt;=, ==, !=, &gt;=, &gt;。还有匹配符号 ～ 和 ！～。比较的结果为 1(true)/0(false) 二选一。</p>
<h4 id="Logical-Operators"><a href="#Logical-Operators" class="headerlink" title="Logical Operators"></a>Logical Operators</h4><p>逻辑运算符有：&amp;&amp;, ||, !</p>
<h4 id="Condition-Expressions"><a href="#Condition-Expressions" class="headerlink" title="Condition Expressions"></a>Condition Expressions</h4><p>expr1 ? expr2 : expr3 效果和 Java 中的一致. 下面的例子会打印 $1 的倒数，如果 $1 为 0 则打印提示信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123; print ($1 !=0 ? 1/$1 : &quot;$1 is zero, line &quot; NR) &#125;&#x27;</span> </span><br></pre></td></tr></table></figure>

<h4 id="Assignment-Operators"><a href="#Assignment-Operators" class="headerlink" title="Assignment Operators"></a>Assignment Operators</h4><p>var = expr, 下面的例子计算所有亚洲国家的人口和</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;$4 == &quot;Asia&quot; &#123; pop = pop + $3; n = n + 1&#125;</span></span><br><span class="line"><span class="string">END &#123; print &quot;Total population of the &quot;, n, &quot;Asian countries is&quot;, pop, &quot;million&quot;&#125;&#x27;</span> countries </span><br><span class="line">Total population of the  4 Asian countries is 2173 million</span><br></pre></td></tr></table></figure>

<p>统计人口最多的国家</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;$3 &gt; maxpop &#123;maxpop = $3; country = $1&#125;</span></span><br><span class="line"><span class="string">END &#123; print &quot;country with largest population:&quot;, country, maxpop &#125;&#x27;</span> countries</span><br><span class="line">country with largest population: China 1032</span><br></pre></td></tr></table></figure>

<h4 id="Increment-and-Decrement-Oerators"><a href="#Increment-and-Decrement-Oerators" class="headerlink" title="Increment and Decrement Oerators"></a>Increment and Decrement Oerators</h4><p>n = n + 1 通常简写为 ++n 或者 n++, 区别是，如果有赋值，则 n++ 会将原始值赋给变量再自增，++n 则先自增再赋值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN &#123; n=1; i=n++ &#125;; END &#123; print i &#125;&#x27;</span> countries</span><br><span class="line">1</span><br><span class="line">awk <span class="string">&#x27;BEGIN &#123; n=1; i=++n &#125;; END &#123; print i &#125;&#x27;</span> countries</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h4 id="Built-In-Arithmetic-Functions"><a href="#Built-In-Arithmetic-Functions" class="headerlink" title="Built-In Arithmetic Functions"></a>Built-In Arithmetic Functions</h4><table>
<thead>
<tr>
<th align="left">FUNCTION</th>
<th align="left">VALUE RETURNED</th>
</tr>
</thead>
<tbody><tr>
<td align="left">atan2(y, x)</td>
<td align="left">arctangent of y/x in the range -pi to pi</td>
</tr>
<tr>
<td align="left">cos(x)</td>
<td align="left">cosine of x, with x in radians</td>
</tr>
<tr>
<td align="left">exp(x)</td>
<td align="left">exponential function of x, e<sup>x</sup></td>
</tr>
<tr>
<td align="left">int(x)</td>
<td align="left">integer part of x; truncated towards 0 when x &gt; 0</td>
</tr>
<tr>
<td align="left">log(x)</td>
<td align="left">natural (base e) logarithm of x</td>
</tr>
<tr>
<td align="left">rand()</td>
<td align="left">random number r, where 0 &lt;= r &lt; 1</td>
</tr>
<tr>
<td align="left">sin(x)</td>
<td align="left">sine of x, with x in radians</td>
</tr>
<tr>
<td align="left">sqrt(x)</td>
<td align="left">square root of x</td>
</tr>
<tr>
<td align="left">srand(x)</td>
<td align="left">x is new seed for rand ()</td>
</tr>
</tbody></table>
<h4 id="String-Operators"><a href="#String-Operators" class="headerlink" title="String Operators"></a>String Operators</h4><p>awk 只支持一种字符串操作 - 拼接。拼接不需要任何的连接符, 比如下面的例子是在每行前面打印行号 + 冒号的前缀</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123; print NR &quot;:&quot; $0 &#125;&#x27;</span> countries                  </span><br><span class="line">1:USSR  8649    275     Asia</span><br><span class="line">2:Canada        3852    25      North America</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="Strings-as-Regular-Expressions"><a href="#Strings-as-Regular-Expressions" class="headerlink" title="Strings as Regular Expressions"></a>Strings as Regular Expressions</h4><p><code>awk &#39;BEGIN &#123; digits = &quot;^[0-9]+$&quot; &#125;; $2 ~ digits&#39; countries</code>, 表达式可以动态拼装，所以下面的例子也是合法的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">BEGIN &#123;</span><br><span class="line">  sign = <span class="string">&quot;[+-]?&quot;</span></span><br><span class="line">  decimal= <span class="string">&quot;[0-9]+[.]?[0-9]*&quot;</span></span><br><span class="line">  fraction= <span class="string">&quot;[.][0-9]+&quot;</span></span><br><span class="line">  exponent= <span class="string">&quot;([eEl&quot;</span> sign <span class="string">&quot;[0-9]+)?&quot;</span></span><br><span class="line">  number= <span class="string">&quot;^&quot;</span> sign <span class="string">&quot;(&quot;</span> decimal <span class="string">&quot;|&quot;</span> fraction <span class="string">&quot;)&quot;</span> exponent <span class="string">&quot;$&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$0</span> .. number</span><br></pre></td></tr></table></figure>

<h4 id="Built-In-String-Functions"><a href="#Built-In-String-Functions" class="headerlink" title="Built-In String Functions"></a>Built-In String Functions</h4><table>
<thead>
<tr>
<th align="left">Function</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">gsub(r,s)</td>
<td align="left">substitute s for r globally in $0, return number of substitutions made</td>
</tr>
<tr>
<td align="left">gsub(r ,s ,t)</td>
<td align="left">substitutes for r globally in string t, return number of substitutions made</td>
</tr>
<tr>
<td align="left">index(s ,t)</td>
<td align="left">return first position of string t in s, or 0 if t is not present</td>
</tr>
<tr>
<td align="left">length(s)</td>
<td align="left">return number of characters in s</td>
</tr>
<tr>
<td align="left">match(s ,r)</td>
<td align="left">test whether s contains a substring matched by r,return index or 0; sets RSTART and RLENGTH</td>
</tr>
<tr>
<td align="left">split(s ,a)</td>
<td align="left">split s into array a on FS, return number of fields</td>
</tr>
<tr>
<td align="left">split(s ,a ,fs)</td>
<td align="left">splits into array a on field separator fs, return number of fields</td>
</tr>
<tr>
<td align="left">sprintf(fmt, expr -list )</td>
<td align="left">return expr -list formatted according to format string fmt</td>
</tr>
<tr>
<td align="left">sub(r ,s)</td>
<td align="left">substitutes for the leftmost longest substring of $0 matched by r, return number of substitutions made</td>
</tr>
<tr>
<td align="left">sub(r ,s ,t)</td>
<td align="left">substitute s for the leftmost longest substring of t matched by r, return number of substitutions made</td>
</tr>
<tr>
<td align="left">substr (s ,p)</td>
<td align="left">return suffix of s starting at position p</td>
</tr>
<tr>
<td align="left">substr (s ,p ,n)</td>
<td align="left">return substring of s of length n starting at position p</td>
</tr>
</tbody></table>
<p>p42</p>
]]></content>
      <categories>
        <category>AWK</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title>组合模式</title>
    <url>/hexo/2021/04/19/Design-pattern-composite/</url>
    <content><![CDATA[<blockquote>
<p><strong>The Composite Pattern</strong> allows you to compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.<br>组合模式让我们可以将数据组合成树状结构。他可以让我们以统一的模式对待单个节点或整个组合体</p>
</blockquote>
<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>书接上一个 Iterator 章节，现在 DinerMenu 业务扩展了，我们想要在 DinerMenu 的基础上再增加一个子目录来打印一个点心子菜单。现在已有的代码结构并不能完成我们的需求，我们将使用 组合模式 重构我们的代码。</p>
<p>更具上面这个需求我们可以将需要展示的结构抽象为如下结构</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">                                                     +------------+                                                                                  </span><br><span class="line">                                                     | All Menus  |                                                                                  </span><br><span class="line">                                                     +------------+                                                                                  </span><br><span class="line">                                                        ^                                                                                            </span><br><span class="line">                     -----------------------------------|-------------------------------                                                             </span><br><span class="line">                    |                                   |                              |                                                             </span><br><span class="line">                    |                                   |                              |                                                             </span><br><span class="line">           +--------------------+            +------------+                     +------------+                                                       </span><br><span class="line">           | Pancake House Menu |            | Diner Menu |                     | Cafe Menu  |                                                       </span><br><span class="line">           +--------------------+            +------------+                     +------------+                                                       </span><br><span class="line">                    ^                           ^                                  ^                                                                 </span><br><span class="line">     ---------------|----------                 |-------------                     |-----------                                                      </span><br><span class="line">    |               |         |                 |            |                     |          |                                                      </span><br><span class="line">    |               |         |                 |            |                     |          |                                                      </span><br><span class="line">+----------+  +----------+             +----------+   +-------------+    +----------+    +----------+                                                </span><br><span class="line">| MenuItem |  | MenuItem |   ...       | MenuItem |   |Dessert Menu |    | MenuItem |    | MenuItem |                                                </span><br><span class="line">+----------+  +----------+             +----------+   +-------------+    +----------+    +----------+                                                </span><br><span class="line">                                                                ^                                                                                    </span><br><span class="line">                                                  ------------- |--------------                                                                      </span><br><span class="line">                                                 |              |             |                                                                      </span><br><span class="line">                                                 |              |             |                                                                      </span><br><span class="line">                                            +----------+    +----------+      |                                                                      </span><br><span class="line">                                            | MenuItem |    | MenuItem |     ...                                                                     </span><br><span class="line">                                            +----------+    +----------+                                                                             </span><br></pre></td></tr></table></figure>

<p>我们要实现用统一的接口访问 Menu 和 MenuItem，所以不难想到，我们需要在这两个概念外面包装一个统一的对外接口。</p>
<p>代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们抽象一个组合节点和叶子结点公用的超集节点，叫做 MenuComponent, 他包含了这两种节点都要用到的方法，虽然这样做会有点冗余</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MenuComponent <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 叶子结点实现，只需要重写叶子结点支持的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuItem</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String description;</span><br><span class="line">    <span class="keyword">boolean</span> vegetarian;</span><br><span class="line">    <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">        <span class="keyword">this</span>.vegetarian = vegetarian;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vegetarian;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;  &quot;</span> + getName());</span><br><span class="line">        <span class="keyword">if</span> (isVegetarian()) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot; (v)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;, &quot;</span> + getPrice());</span><br><span class="line">        System.out.println(<span class="string">&quot;-- &quot;</span> + getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合节点的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Menu</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    ArrayList menuComponents = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    String name;</span><br><span class="line">    String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Menu</span><span class="params">(String name, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        menuComponents.add(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        menuComponents.remove(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MenuComponent <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (MenuComponent) menuComponents.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;\n&quot;</span> + getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;, &quot;</span> + getDesc());</span><br><span class="line">        System.out.print(<span class="string">&quot;---------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印完自己的信息后，还需要循环答应子节点信息</span></span><br><span class="line">        Iterator iterator = menuComponents.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            MenuComponent menuComponent = (MenuComponent) iterator.next();</span><br><span class="line">            menuComponent.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试的客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MenuComponent pancakeHouseMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;PANCAKE HOUSE MENU&quot;</span>, <span class="string">&quot;Breakfast&quot;</span>);</span><br><span class="line">        MenuComponent dinerMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;DINER MENU&quot;</span>, <span class="string">&quot;Lunch&quot;</span>);</span><br><span class="line">        MenuComponent cafeMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;CAFE MENU&quot;</span>, <span class="string">&quot;Dinner&quot;</span>);</span><br><span class="line">        MenuComponent dessertMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;DESSERT MENU&quot;</span>, <span class="string">&quot;Dessert of course !&quot;</span>);</span><br><span class="line"></span><br><span class="line">        MenuComponent allMenus = <span class="keyword">new</span> Menu(<span class="string">&quot;ALL MENUS&quot;</span>, <span class="string">&quot;All menus combined&quot;</span>);</span><br><span class="line">        allMenus.add(pancakeHouseMenu);</span><br><span class="line">        allMenus.add(dinerMenu);</span><br><span class="line">        allMenus.add(cafeMenu);</span><br><span class="line"></span><br><span class="line">        pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;K &amp; B’s Pancake Breakfast&quot;</span>, <span class="string">&quot;Pancakes with scrambled eggs, and toast&quot;</span>, <span class="keyword">true</span>, <span class="number">2.99</span>));</span><br><span class="line">        pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Regular Pancake Breakfast&quot;</span>, <span class="string">&quot;Pancakes with fried eggs, sausage&quot;</span>, <span class="keyword">false</span>, <span class="number">2.99</span>));</span><br><span class="line">        pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Blueberry Pancakes&quot;</span>, <span class="string">&quot;Pancakes made with fresh blueberries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.49</span>));</span><br><span class="line">        pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Waffles&quot;</span>, <span class="string">&quot;Waffles, with your choice of blueberries or strawberries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.59</span>));</span><br><span class="line"></span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Pasta&quot;</span>, <span class="string">&quot;Spaghetti with Marinara Sauce, and a slice of sourdough bread&quot;</span>, <span class="keyword">true</span>, <span class="number">3.89</span>));</span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Vegetarian BLT&quot;</span>, <span class="string">&quot; (Fakin’)Bacon with lettuce &amp; tomato on whole wheat&quot;</span>, <span class="keyword">true</span>, <span class="number">2.99</span>));</span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;BLT&quot;</span>, <span class="string">&quot;Bacon with lettuce &amp; tomato on whole wheat&quot;</span>, <span class="keyword">false</span>, <span class="number">2.99</span>));</span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Soup of the day&quot;</span>, <span class="string">&quot;Soup of the day, with a side of potato salad&quot;</span>, <span class="keyword">false</span>, <span class="number">3.29</span>));</span><br><span class="line"></span><br><span class="line">        dinerMenu.add(dessertMenu);</span><br><span class="line">        dessertMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Apple Pie&quot;</span>, <span class="string">&quot;Apple pie with a flakey crust, topped with vanilla icecream&quot;</span>, <span class="keyword">true</span>, <span class="number">1.59</span>));</span><br><span class="line"></span><br><span class="line">        cafeMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Veggie Burger and Air Fries&quot;</span>, <span class="string">&quot;Veggie burger on a whole wheat bun, lettuce, tomato, and fries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.99</span>));</span><br><span class="line">        cafeMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Soup of the day&quot;</span>, <span class="string">&quot;A cup of the soup of the day, with a side salad&quot;</span>, <span class="keyword">false</span>, <span class="number">3.69</span>));</span><br><span class="line">        cafeMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Burrito&quot;</span>, <span class="string">&quot;A large burrito, with whole pinto beans, salsa, guacamole&quot;</span>, <span class="keyword">true</span>, <span class="number">4.29</span>));</span><br><span class="line">        allMenus.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ALL MENUS, All menus combined</span></span><br><span class="line"><span class="comment">// ---------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PANCAKE HOUSE MENU, Breakfast</span></span><br><span class="line"><span class="comment">// ---------------------</span></span><br><span class="line"><span class="comment">//   K &amp; B’s Pancake Breakfast, desc:&#x27;Pancakes with scrambled eggs, and toast&#x27; (v) , price:2.99</span></span><br><span class="line"><span class="comment">//   Regular Pancake Breakfast, desc:&#x27;Pancakes with fried eggs, sausage&#x27; , price:2.99</span></span><br><span class="line"><span class="comment">//   Blueberry Pancakes, desc:&#x27;Pancakes made with fresh blueberries&#x27; (v) , price:3.49</span></span><br><span class="line"><span class="comment">//   Waffles, desc:&#x27;Waffles, with your choice of blueberries or strawberries&#x27; (v) , price:3.59</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DINER MENU, Lunch</span></span><br><span class="line"><span class="comment">// ---------------------</span></span><br><span class="line"><span class="comment">//   Pasta, desc:&#x27;Spaghetti with Marinara Sauce, and a slice of sourdough bread&#x27; (v) , price:3.89</span></span><br><span class="line"><span class="comment">//   Vegetarian BLT, desc:&#x27; (Fakin’)Bacon with lettuce &amp; tomato on whole wheat&#x27; (v) , price:2.99</span></span><br><span class="line"><span class="comment">//   BLT, desc:&#x27;Bacon with lettuce &amp; tomato on whole wheat&#x27; , price:2.99</span></span><br><span class="line"><span class="comment">//   Soup of the day, desc:&#x27;Soup of the day, with a side of potato salad&#x27; , price:3.29</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DESSERT MENU, Dessert of course !</span></span><br><span class="line"><span class="comment">// ---------------------</span></span><br><span class="line"><span class="comment">//   Apple Pie, desc:&#x27;Apple pie with a flakey crust, topped with vanilla icecream&#x27; (v) , price:1.59</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAFE MENU, Dinner</span></span><br><span class="line"><span class="comment">// ---------------------</span></span><br><span class="line"><span class="comment">//   Veggie Burger and Air Fries, desc:&#x27;Veggie burger on a whole wheat bun, lettuce, tomato, and fries&#x27; (v) , price:3.99</span></span><br><span class="line"><span class="comment">//   Soup of the day, desc:&#x27;A cup of the soup of the day, with a side salad&#x27; , price:3.69</span></span><br><span class="line"><span class="comment">//   Burrito, desc:&#x27;A large burrito, with whole pinto beans, salsa, guacamole&#x27; (v) , price:4.29</span></span><br></pre></td></tr></table></figure>

<p>上面这种 print 用了内部 Iterator 的方法，简单了很多， 那么如何实现一个外部的 Iterator 呢</p>
<p>我们先为基类添加 createIterator 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">    <span class="comment">// dup...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后声明一个 Composite 的 Iterator 的具体实现类, 并让 Composite 实现类返回它</p>
<p>CompositeIterator 说明：</p>
<p>这个 Iterator 说实话不是很容易看懂。我们最好结合下面的 printVegetarianMenu() 方法的使用情况一起来看。由下面的方法调用，我们可以反推出这个 Iterator 实现类的作用。</p>
<p>每次调用 hasNext() 时，CompositeIterator 会返回一个 MenuCompoment 类型的对象。有可能是 Menu, 也有可能是 MenuItem。</p>
<p>而且就算返回的是 Menu, 他之后还是会把这个 Menu 的 MenuItem 在下一次返回。由此我们可以推测出，在 next() 反 Menu 之后，还有一个隐式的将 Menu 子节点 push 到 stack 中的动作。</p>
<p>PS: 这段代码的关键点是，stack 中存储的是 Iterator 对象。当这个对象里面没有值的时候，需要做 pop 操作弹出 it, 这里有点绕</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">MenuComponent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Iterator&lt;MenuComponent&gt;&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CompositeIterator</span><span class="params">(Iterator&lt;MenuComponent&gt; it)</span> </span>&#123;</span><br><span class="line">        stack.push(it);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack.empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Iterator&lt;MenuComponent&gt; it = stack.peek();</span><br><span class="line">            <span class="keyword">if</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="keyword">return</span> hasNext();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MenuComponent <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hasNext()) &#123;</span><br><span class="line">            Iterator&lt;MenuComponent&gt; it = stack.peek();</span><br><span class="line">            MenuComponent component = it.next();</span><br><span class="line">            <span class="keyword">if</span> (component <span class="keyword">instanceof</span> Menu) &#123;</span><br><span class="line">                stack.push(component.createIterator());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> component;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Menu</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">// dup...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;MenuComponent&gt; <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CompositeIterator(nodes.iterator());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于叶子节点是不需要迭代的，我们返回一个空的 iterator， 每次调用 hasNext() 都返回 false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NullIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuItem</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">// dup...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NullIterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MenuComponent pancakeHouseMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;PANCAKE HOUSE MENU&quot;</span>, <span class="string">&quot;Breakfast&quot;</span>);</span><br><span class="line">        MenuComponent dinerMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;DINER MENU&quot;</span>, <span class="string">&quot;Lunch&quot;</span>);</span><br><span class="line">        MenuComponent cafeMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;CAFE MENU&quot;</span>, <span class="string">&quot;Dinner&quot;</span>);</span><br><span class="line">        MenuComponent dessertMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;DESSERT MENU&quot;</span>, <span class="string">&quot;Dessert of course !&quot;</span>);</span><br><span class="line"></span><br><span class="line">        MenuComponent allMenus = <span class="keyword">new</span> Menu(<span class="string">&quot;ALL MENUS&quot;</span>, <span class="string">&quot;All menus combined&quot;</span>);</span><br><span class="line">        allMenus.add(pancakeHouseMenu);</span><br><span class="line">        allMenus.add(dinerMenu);</span><br><span class="line">        allMenus.add(cafeMenu);</span><br><span class="line"></span><br><span class="line">        pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;K &amp; B’s Pancake Breakfast&quot;</span>, <span class="string">&quot;Pancakes with scrambled eggs, and toast&quot;</span>, <span class="keyword">true</span>, <span class="number">2.99</span>));</span><br><span class="line">        pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Regular Pancake Breakfast&quot;</span>, <span class="string">&quot;Pancakes with fried eggs, sausage&quot;</span>, <span class="keyword">false</span>, <span class="number">2.99</span>));</span><br><span class="line">        pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Blueberry Pancakes&quot;</span>, <span class="string">&quot;Pancakes made with fresh blueberries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.49</span>));</span><br><span class="line">        pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Waffles&quot;</span>, <span class="string">&quot;Waffles, with your choice of blueberries or strawberries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.59</span>));</span><br><span class="line"></span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Pasta&quot;</span>, <span class="string">&quot;Spaghetti with Marinara Sauce, and a slice of sourdough bread&quot;</span>, <span class="keyword">true</span>, <span class="number">3.89</span>));</span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Vegetarian BLT&quot;</span>, <span class="string">&quot; (Fakin’)Bacon with lettuce &amp; tomato on whole wheat&quot;</span>, <span class="keyword">true</span>, <span class="number">2.99</span>));</span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;BLT&quot;</span>, <span class="string">&quot;Bacon with lettuce &amp; tomato on whole wheat&quot;</span>, <span class="keyword">false</span>, <span class="number">2.99</span>));</span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Soup of the day&quot;</span>, <span class="string">&quot;Soup of the day, with a side of potato salad&quot;</span>, <span class="keyword">false</span>, <span class="number">3.29</span>));</span><br><span class="line"></span><br><span class="line">        dinerMenu.add(dessertMenu);</span><br><span class="line">        dessertMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Apple Pie&quot;</span>, <span class="string">&quot;Apple pie with a flakey crust, topped with vanilla icecream&quot;</span>, <span class="keyword">true</span>, <span class="number">1.59</span>));</span><br><span class="line"></span><br><span class="line">        cafeMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Veggie Burger and Air Fries&quot;</span>, <span class="string">&quot;Veggie burger on a whole wheat bun, lettuce, tomato, and fries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.99</span>));</span><br><span class="line">        cafeMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Soup of the day&quot;</span>, <span class="string">&quot;A cup of the soup of the day, with a side salad&quot;</span>, <span class="keyword">false</span>, <span class="number">3.69</span>));</span><br><span class="line">        cafeMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Burrito&quot;</span>, <span class="string">&quot;A large burrito, with whole pinto beans, salsa, guacamole&quot;</span>, <span class="keyword">true</span>, <span class="number">4.29</span>));</span><br><span class="line"></span><br><span class="line">        Iterator&lt;MenuComponent&gt; it = allMenus.createIterator();</span><br><span class="line">        printVegetarianMenu(it);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printVegetarianMenu</span><span class="params">(Iterator&lt;MenuComponent&gt; it)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Vegetarian Menu\n----------&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            MenuComponent menuComponent = it.next();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (menuComponent.isVegetarian()) &#123;</span><br><span class="line">                    menuComponent.print();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedOperationException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Vegetarian Menu</span></span><br><span class="line"><span class="comment">// ----------</span></span><br><span class="line"><span class="comment">//   K &amp; B’s Pancake Breakfast, desc:&#x27;Pancakes with scrambled eggs, and toast&#x27; (v) , price:2.99</span></span><br><span class="line"><span class="comment">//   Blueberry Pancakes, desc:&#x27;Pancakes made with fresh blueberries&#x27; (v) , price:3.49</span></span><br><span class="line"><span class="comment">//   Waffles, desc:&#x27;Waffles, with your choice of blueberries or strawberries&#x27; (v) , price:3.59</span></span><br><span class="line"><span class="comment">//   Pasta, desc:&#x27;Spaghetti with Marinara Sauce, and a slice of sourdough bread&#x27; (v) , price:3.89</span></span><br><span class="line"><span class="comment">//   Vegetarian BLT, desc:&#x27; (Fakin’)Bacon with lettuce &amp; tomato on whole wheat&#x27; (v) , price:2.99</span></span><br><span class="line"><span class="comment">//   Apple Pie, desc:&#x27;Apple pie with a flakey crust, topped with vanilla icecream&#x27; (v) , price:1.59</span></span><br><span class="line"><span class="comment">//   Apple Pie, desc:&#x27;Apple pie with a flakey crust, topped with vanilla icecream&#x27; (v) , price:1.59</span></span><br><span class="line"><span class="comment">//   Veggie Burger and Air Fries, desc:&#x27;Veggie burger on a whole wheat bun, lettuce, tomato, and fries&#x27; (v) , price:3.99</span></span><br><span class="line"><span class="comment">//   Burrito, desc:&#x27;A large burrito, with whole pinto beans, salsa, guacamole&#x27; (v) , price:4.29</span></span><br></pre></td></tr></table></figure>

<p>上面用的是外部 Iterator 的方式，需要自己控制当前节点位置，所以实现上比内部的那种要复杂很多。</p>
<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p>图示说明：</p>
<ul>
<li>client 到 Component 为 实线 + 普通箭头，表示含有</li>
<li>leaf, composite 到 Component 为 实线 + 空心箭头，表示实现接口</li>
<li>Composite 到 Component 为 实线 + 普通箭头，表示 1 对 n 的对应关系</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">                           +----------------+                                                                                                       </span><br><span class="line">+---------+                |   Component    | 1..n                                                                                                  </span><br><span class="line">| Client  |--------------&gt; |----------------|&lt;--------                                                                                              </span><br><span class="line">+---------+                | + operation()  |        |                                                                                              </span><br><span class="line">                           | + add(child)   |        |                                                                                              </span><br><span class="line">                           | + remve(child) |        |                                                                                              </span><br><span class="line">                           | + getChild()   |        |                                                                                              </span><br><span class="line">                           +----------------+        |                                                                                              </span><br><span class="line">                                    ^                |                                                                                              </span><br><span class="line">             ---------------------- |                |                                                                                              </span><br><span class="line">            |                       |                |                                                                                              </span><br><span class="line">            |                       |                |                                                                                              </span><br><span class="line">    +---------------+       +----------------+       |                                                                                              </span><br><span class="line">    |   Leaf        |       |   Composite    |       |                                                                                              </span><br><span class="line">    |---------------|       |----------------|&lt;&gt;-----|                                                                                              </span><br><span class="line">    | +operation()  |       | + operation()  |                                                                                                      </span><br><span class="line">    +---------------+       | + add(child)   |                                                                                                      </span><br><span class="line">                            | + remve(child) |                                                                                                      </span><br><span class="line">                            | + getChild()   |                                                                                                      </span><br><span class="line">                            +----------------+                                                                                                                                                               </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/hexo/2021/04/09/Design-pattern-strategy/</url>
    <content><![CDATA[<p>Design Principle: </p>
<ul>
<li>Identify the aspects of your application that vary and separate them from what stays the same - 将频繁改变的部分从系统中抽离出来</li>
<li>Program to an interface, not an implementation - 面向接口编程而非实现</li>
<li>Favor composition over inheritance - 组合优于继承</li>
</ul>
<blockquote>
<p>The <strong>Strategy Pattern</strong> defines a family of algorithms, encapsulates each one, and makes them interchangeable.  Strategy lets the algorithm vary independently from clients that use it.  </p>
<p>完成共一个任务往往有多种不同的方法，每一种方法我们称之为策略，我们可以通过不同的条件选择不同的算法完成任务</p>
</blockquote>
<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">+-----------------+                                                                                                                               </span><br><span class="line">|  Context        |                                                                                                                               </span><br><span class="line">|---------------- |               +-------------------+                                                                                           </span><br><span class="line">| - strategy      |&lt;&gt;------------ | &lt;&lt;Interface&gt;&gt;     |                                                                                           </span><br><span class="line">|---------------- |               |   Strategy        |                                                                                           </span><br><span class="line">| + setStrategy(s)|               |------------------ |                                                                                           </span><br><span class="line">| + perfStratecy()|               | algorithm()       |                                                                                           </span><br><span class="line">|                 |               +-------------------+                                                                                           </span><br><span class="line">|                 |                 ^                                                                                                             </span><br><span class="line">|                 |                 |----------------------------------                                                                           </span><br><span class="line">+-----------------+                 |                |                |                                                                           </span><br><span class="line">                                    |                |                |                                                                           </span><br><span class="line">                   +-------------------+   +-------------------+      |                                                                           </span><br><span class="line">                   |ConcreateStrategyA |   |ConcreateStrategyB |      |                                                                           </span><br><span class="line">                   |------------------ |   |------------------ |     ...                                                                          </span><br><span class="line">                   | algorithm()       |   | algorithm()       |                                                                                  </span><br><span class="line">                   +-------------------+   +-------------------+                                                                                  </span><br></pre></td></tr></table></figure>

<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>已有一段鸭子模拟器代码，所有鸭子都有一个基类，基类中定义了一些常用方法，并给了实现。只有 display() 是需要每个类定制的，声明成了 abstract 并在子类中各自实现</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">            +--------------------+                                                                                                                  </span><br><span class="line">            |  Duck              |                                                                                                                  </span><br><span class="line">            |--------------------|                                                                                                                  </span><br><span class="line">            | swim()             |                                                                                                                  </span><br><span class="line">            | display()          |                                                                                                                  </span><br><span class="line">            | quack()            |                                                                                                                  </span><br><span class="line">            | //other methods    |                                                                                                                  </span><br><span class="line">            +--------------------+                                                                                                                  </span><br><span class="line">               ^                                                                                                                                    </span><br><span class="line">               |                                                                                                                                    </span><br><span class="line">               |---------------                                                                                                                     </span><br><span class="line">               |              |                                                                                                                     </span><br><span class="line">               |              |                                                                                                                     </span><br><span class="line">+----------------+     +----------------+                                                                                                           </span><br><span class="line">|  MallardDuck   |     |  RedHeadDuck   |                                                                                                           </span><br><span class="line">|--------------- |     |--------------- |                                                                                                           </span><br><span class="line">|display()       |     |display()       |                                                                                                           </span><br><span class="line">|                |     |                |                                                                                                           </span><br><span class="line">|                |     |                |                                                                                                           </span><br><span class="line">+----------------+     +----------------+                                                                                                           </span><br></pre></td></tr></table></figure>

<p>某个 release，客户突然想要看到鸭子能飞。。。小码农一拍脑袋：嗨，这还不简单。就直接在基类里添加了 fly() 的实现。然后转头就去写其他功能了。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">            +--------------------+                                                                                                                  </span><br><span class="line">            |  Duck              |                                                                                                                  </span><br><span class="line">            |--------------------|                                                                                                                  </span><br><span class="line">            | swim()             |                                                                                                                  </span><br><span class="line">            | display()          |                                                                                                                  </span><br><span class="line">            | quack()            |                                                                                                                  </span><br><span class="line">            | fly()              |                                                                                                                  </span><br><span class="line">            | //other methods    |                                                                                                                  </span><br><span class="line">            +--------------------+                                                                                                                  </span><br><span class="line">               ^                                                                                                                                    </span><br><span class="line">               |                                                                                                                                    </span><br><span class="line">               |---------------                                                                                                                     </span><br><span class="line">               |              |                                                                                                                     </span><br><span class="line">               |              |                                                                                                                     </span><br><span class="line">+----------------+     +----------------+                                                                                                           </span><br><span class="line">|  MallardDuck   |     |  RedHeadDuck   |                                                                                                           </span><br><span class="line">|--------------- |     |--------------- |                                                                                                           </span><br><span class="line">|display()       |     |display()       |                                                                                                           </span><br><span class="line">|                |     |                |                                                                                                           </span><br><span class="line">|                |     |                |                                                                                                           </span><br><span class="line">+----------------+     +----------------+                                                                                                           </span><br></pre></td></tr></table></figure>

<p>三天后，Sales 一个夺命连环 call 打到小码农这儿，说自己给客户演示功能的时候，突然发现，程序里的橡皮鸭子起飞了！！！这还了得，小码农打开了 IDE 看了橡皮鸭子的代码</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">            +--------------------+                                                                                                                  </span><br><span class="line">            |  Duck              |                                                                                                                  </span><br><span class="line">            |--------------------|                                                                                                                  </span><br><span class="line">            | swim()             |                                                                                                                  </span><br><span class="line">            | display()          |                                                                                                                  </span><br><span class="line">            | quack()            |                                                                                                                  </span><br><span class="line">            | fly()              |                                                                                                                  </span><br><span class="line">            | //other methods    |                                                                                                                  </span><br><span class="line">            +--------------------+                                                                                                                  </span><br><span class="line">               ^                                                                                                                                    </span><br><span class="line">               |                                                                                                                                    </span><br><span class="line">               |----------------------------------------                                                                                            </span><br><span class="line">               |              |                        |                                                                                            </span><br><span class="line">               |              |                        |                                                                                            </span><br><span class="line">+----------------+     +----------------+     +----------------+                                                                                    </span><br><span class="line">|  MallardDuck   |     |  RedHeadDuck   |     |  RubberDuck    |                                                                                    </span><br><span class="line">|--------------- |     |--------------- |     |--------------- |                                                                                    </span><br><span class="line">|display()       |     |display()       |     |display()       |                                                                                    </span><br><span class="line">|                |     |                |     |quack()&#123;        |                                                                                    </span><br><span class="line">|                |     |                |     |override quack  |                                                                                    </span><br><span class="line">+----------------+     +----------------+     |&#125;               |                                                                                    </span><br><span class="line">                                              |                |                                                                                    </span><br><span class="line">                                              +----------------+                                                                                    </span><br></pre></td></tr></table></figure>

<p>好嘛，原来基类加完 fly() 方法之后忘了重写橡皮鸭子这个子类了，还能咋整，要不重写一下 fly() 呗</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+-------------------------+                                                                                                                           </span><br><span class="line">|    RubberDuck           |                                                                                                                           </span><br><span class="line">| ----------------------  |                                                                                                                           </span><br><span class="line">|                         |                                                                                                                           </span><br><span class="line">| display()               |                                                                                                                           </span><br><span class="line">| quack()&#123;// rubber quck &#125;|                                                                                                                           </span><br><span class="line">| fly()&#123; // do nothing &#125;  |                                                                                                                           </span><br><span class="line">|                         |                                                                                                                           </span><br><span class="line">+-------------------------+ </span><br></pre></td></tr></table></figure>

<p>不过转念一下，这也不是办法啊，不然哪天要新加一个什么木头鸭子，不是还得和橡皮鸭子一样再来一遍？于是小码农就寻思着，把 quack 和 fly 整成接口？</p>
<p>把这个想法和同事小美一说，小美立马就不乐意了，这个产品有几十个类，把这两个玩意儿整成接口，你不得在这几十个类里面都改一遍，你改啊？！</p>
<p>小码农想也是，但是没什么法子，就去问自己的师傅大能耐了。小码农把情况和大能耐说了一遍。</p>
<p>‘耐哥，就上面的情况，听说你精通设计模式，这种情况，有法儿吗’</p>
<p>‘咱先不说设计模式的事儿，写代码最起码得掌握一个原则：先把频繁变动的代码和不变的拆分开了后我们再说事儿’</p>
<p>按照耐哥的思路，小码农把 quack 和 fly 从鸭子类里面单独拿出来写成接口，并为他们做了各种实现</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">                 +-------------------------+                                                                                                       </span><br><span class="line">                 |    &lt;&lt;Interface&gt;&gt;        |                                                                                                       </span><br><span class="line">                 |    FlyBehavior          |                                                                                                       </span><br><span class="line">                 | ----------------------  |                                                                                                       </span><br><span class="line">                 | fly()                   |                                                                                                       </span><br><span class="line">                 |                         |                                                                                                       </span><br><span class="line">                 +-------------------------+                                                                                                       </span><br><span class="line">                       ^                                                                                                                           </span><br><span class="line">                       |---------------------                                                                                                      </span><br><span class="line">                       |                    |                                                                                                      </span><br><span class="line">                       |                    |                                                                                                      </span><br><span class="line">+-------------------------+   +-------------------------+                                                                                          </span><br><span class="line">|    FlyWithWings         |   |    FlyNoWay             |                                                                                          </span><br><span class="line">| ----------------------  |   | ----------------------  |                                                                                          </span><br><span class="line">| fly()&#123; // duck flying &#125; |   | fly()&#123; // can&#x27;t fly &#125;   |                                                                                          </span><br><span class="line">|                         |   |                         |                                                                                          </span><br><span class="line">+-------------------------+   +-------------------------+ </span><br></pre></td></tr></table></figure>

<p>既然将这两个属性从基类中抽出来了，那原来的基类中我们再用这两个新的接口代替，并新建方法调用接口实现 fly 和 quack 的功能</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+--------------------+                                                                                                                             </span><br><span class="line">|  Duck              |                                                                                                                             </span><br><span class="line">|--------------------|                                                                                                                             </span><br><span class="line">| FlyBehavior fb     |                                                                                                                             </span><br><span class="line">| QuackBehavior qb   |                                                                                                                             </span><br><span class="line">|                    |                                                                                                                             </span><br><span class="line">|--------------------|                                                                                                                             </span><br><span class="line">| swim()             |                                                                                                                             </span><br><span class="line">| display()          |                                                                                                                             </span><br><span class="line">| perormQuack()  &lt;----------- qb.quack();                                                                                                          </span><br><span class="line">| performFly()   &lt;----------- fb.fly();                                                                                                            </span><br><span class="line">| //other methods    |                                                                                                                             </span><br><span class="line">|                    |                                                                                                                             </span><br><span class="line">+--------------------+                     </span><br></pre></td></tr></table></figure>

<p>按照这个逻辑，小码农重构了以后的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fly 接口及其实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;I can&#x27;t fly...&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;I can fly...&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quack 接口及其实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;Quack...Quack...&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Squack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;Squack...&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;&lt;&lt; Silence &gt;&gt;&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Duck 抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    QuackBehavior quackBehavior;</span><br><span class="line">    FlyBehavior flyBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span> </span>&#123; quackBehavior.quack(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span> </span>&#123; flyBehavior.fly(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;All ducks float, even decoys!&quot;</span>); &#125;</span><br><span class="line">    <span class="comment">// other shared methods</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体种类的鸭子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MallardDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flyBehavior = <span class="keyword">new</span> FlyWithWings();</span><br><span class="line">        <span class="keyword">this</span>.quackBehavior = <span class="keyword">new</span> Quack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m a Mallard duck...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiniDuckSimulator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MallardDuck mallardDuck = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">        mallardDuck.performQuack();</span><br><span class="line">        mallardDuck.performFly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quack...Quack...</span></span><br><span class="line"><span class="comment">// I can fly...</span></span><br></pre></td></tr></table></figure>

<p>大功告成，小码农拿着自己的成果找了大能耐 review 代码</p>
<p>‘不错不错，不过你有没有想过你的代码还可以更灵活，只要在 Duck 里面添加一个 set 方法，你就可以动态的改变鸭子的行为了哟’</p>
<p>小码农一想，立马知道了其中的关键，修改了代码</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+--------------------+                                                                                                                             </span><br><span class="line">|  Duck              |                                                                                                                             </span><br><span class="line">|--------------------|                                                                                                                             </span><br><span class="line">| FlyBehavior fb     |                                                                                                                             </span><br><span class="line">| QuackBehavior qb   |                                                                                                                             </span><br><span class="line">|                    |                                                                                                                             </span><br><span class="line">|--------------------|                                                                                                                             </span><br><span class="line">| swim()             |                                                                                                                             </span><br><span class="line">| display()          |                                                                                                                             </span><br><span class="line">| perormQuack()  &lt;----------- qb.quack();                                                                                                          </span><br><span class="line">| performFly()   &lt;----------- fb.fly();                                                                                                            </span><br><span class="line">| //other methods    |                                                                                                                             </span><br><span class="line">| setFlyBehavior()   |                                                                                                                             </span><br><span class="line">| setQuackBehavior() |                                                                                                                             </span><br><span class="line">|                    |                                                                                                                             </span><br><span class="line">+--------------------+                     </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    QuackBehavior quackBehavior;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuackBehavior</span><span class="params">(QuackBehavior quackBehavior)</span> </span>&#123; <span class="keyword">this</span>.quackBehavior = quackBehavior; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlyBehavior</span><span class="params">(FlyBehavior flyBehavior)</span> </span>&#123; <span class="keyword">this</span>.flyBehavior = flyBehavior; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正巧项目组想要一个新的鸭子模型，能够动态的改变飞行模式，在氪金以前是不能飞的，但是氪金以后能弹射起步。。。正好赶巧了，小码农三下五除二就实现了功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocketFly</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;  System.out.println(<span class="string">&quot;Fly in rocket speed...&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiniDuckSimulator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ModelDuck modelDuck = <span class="keyword">new</span> ModelDuck();</span><br><span class="line">        modelDuck.performFly();</span><br><span class="line"></span><br><span class="line">        modelDuck.setFlyBehavior(<span class="keyword">new</span> RocketFly());</span><br><span class="line">        modelDuck.performFly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// I can&#x27;t fly...</span></span><br><span class="line"><span class="comment">// Fly in rocket speed...</span></span><br></pre></td></tr></table></figure>

<p>小码农哼着小曲儿锁了屏，转头跑到走廊上掏出手机开启了王者农药。。。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex03 Connector</title>
    <url>/hexo/2021/07/13/HTW-ex03/</url>
    <content><![CDATA[<blockquote>
<p><strong>Chapter3</strong> presents a simplified version of Tomcat 4’s default connector.<br>The application built in this chapter serves as a learning tool to understand the connector discussed in Chapter4</p>
</blockquote>
<p>PS: 这个 project 有点老了，其中用到的 Catalina 包比较老, 找了半天</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>相比于 ex02 这章节实现的服务器多了如下功能</p>
<ul>
<li>connector parse request headers</li>
<li>servlet can obtain headers, cookies parameter name/values, etc</li>
<li>enhance response’s getWriter</li>
</ul>
<p>完成上述功能后，这个就是简化版的 Tomcat4 的 connector 了。Tomcat 的默认 connector 在 Tomcat4 时被 deprecated 了，不过还是有参考价值的。</p>
<h2 id="StringManager"><a href="#StringManager" class="headerlink" title="StringManager"></a>StringManager</h2><p>开篇先介绍了一个用于做类似国际化的类 org.apache.catalina.util.StringManager. 原理很简单，就是这个类通过单例模式生成唯一对象，加载预先定义好的 properties，通过 getString 方法拿到对应语言的翻译。</p>
<p>StringManager 底层使用两个 Java 基础类做实现，一个是 ResourceBundle 另一个是 MessageFormat. ResourceBundle 可以通过 properties 加载多语言支持，MessageFormat 则用于格式化打印信息。</p>
<p>为了节省资源，StringManager 内部通过 Hashtable 存储多语言，并通过单例模式创建这个 field</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Hashtable managers = <span class="keyword">new</span> Hashtable();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Get the StringManager for a particular package. If a manager for</span></span><br><span class="line"><span class="comment">    * a package already exists, it will be reused, else a new</span></span><br><span class="line"><span class="comment">    * StringManager will be created and returned.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> packageName</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> StringManager <span class="title">getManager</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">    StringManager mgr = (StringManager)managers.get(packageName);</span><br><span class="line">    <span class="keyword">if</span> (mgr == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mgr = <span class="keyword">new</span> StringManager(packageName);</span><br><span class="line">        managers.put(packageName, mgr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mgr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS: 它这里用的是饿汉式的声明，类加载的时候就创建了对象，调用 getManager() 的时候通过 synchronized 加锁保证线程安全。每一个 package 下的 LocalStrings 都会创建一个对象存储多语言信息。</p>
<h2 id="The-Application"><a href="#The-Application" class="headerlink" title="The Application"></a>The Application</h2><p>相比之前的 project，这章开始，代码开始分包</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── ServletProcessor.java</span><br><span class="line">├── StaticResourceProcessor.java</span><br><span class="line">├── connector</span><br><span class="line">│   ├── RequestStream.java</span><br><span class="line">│   ├── ResponseStream.java</span><br><span class="line">│   ├── ResponseWriter.java</span><br><span class="line">│   └── http</span><br><span class="line">│       ├── Constants.java</span><br><span class="line">│       ├── HttpConnector.java</span><br><span class="line">│       ├── HttpHeader.java</span><br><span class="line">│       ├── HttpProcessor.java</span><br><span class="line">│       ├── HttpRequest.java</span><br><span class="line">│       ├── HttpRequestFacade.java</span><br><span class="line">│       ├── HttpRequestLine.java            拆出来一个单独的类代表 request 的第一行，包括请求类型，URI，协议等信息</span><br><span class="line">│       ├── HttpResponse.java</span><br><span class="line">│       ├── HttpResponseFacade.java</span><br><span class="line">│       ├── LocalStrings.properties</span><br><span class="line">│       ├── LocalStrings_es.properties</span><br><span class="line">│       ├── LocalStrings_ja.properties</span><br><span class="line">│       └── SocketInputStream.java</span><br><span class="line">└── startup</span><br><span class="line">    └── Bootstrap.java                      启动类，实例化 HttpConnector 并调用 start() 方法</span><br></pre></td></tr></table></figure>

<p>Bootstrap.java 为启动类，内容很简单，就是 new 一个 connector, 然后执行 start 方法，让 connector 常驻。</p>
<p>connector 下的类可以分为五类</p>
<ul>
<li>connect 及该类的辅助类(HttpConnector + HttpProcessor)</li>
<li>代表 Http Request 的类(HttpRequest)及其辅助类</li>
<li>代表 Http Response 的类(HttpResponse)及其辅助类</li>
<li>Facade 类(HttpRequestFacade + HttpResponseFacade)</li>
<li>Constant 常量类</li>
</ul>
<p>类关系图</p>
<img  src=http://www.plantuml.com/plantuml/svg/bP1D2i9038NtFKMPfU10B-36JGK5iISOfezIr6ISPFJwjefe5GTTP97alIy_jMfOCX6ySYnDPUP3bFLGtKRs4E5O59EqD4aWngPW5sMZiQTkuyXrY3aT-prqHI7fO84xvg1ZfuPhiyIniyCfGNJT4pvubPdPbYzantiQnFC1-ZmfArQdlTz1E4MFbpUyKnxxt9oJZNwJIc0I55_cvUX_EEv3hW00>

<p>和 ex02 比，这里将 HttpServer 拆成了 HttpConnector 和 HttpProcessor 两个类。HttpConnector 等待 request， HttpProcessor 负责 request/response 的生成和处理。</p>
<p>为了提高 connector 的效率，设计的时候将 request 中的 parse 的行为尽可能的延后了(比如有些 servlet 根本不需要 request 中的参数，这样 parse 就显得很多余，白白浪费了时间)。</p>
<h3 id="The-Connector"><a href="#The-Connector" class="headerlink" title="The Connector"></a>The Connector</h3><p>HttpConnector 表示 connector 的实体类，他负责创建 server socket 并等待 Http request 的到来。HttpConnector 实现 runnable 接口，当 start() 被调用时，HttpConnector 被创建并运行。</p>
<p>connector 运行时会做如下几件事情</p>
<ul>
<li>等待 HTTP requests</li>
<li>为每个 request 创建 HttpProcessor</li>
<li>调用 processor 的 process 方法</li>
</ul>
<p>HttpProcessor 的 process 方法在拿到 socket 后，会做如下事情</p>
<ul>
<li>Create an HttpRequest/HttpResponse object</li>
<li>Parse request first line and headers, populate to HttpRequest object</li>
<li>Pass HttpRequest, HttpResponse to Processor(servlet process/static processor)</li>
</ul>
<h4 id="Create-an-HttpRequest-Object"><a href="#Create-an-HttpRequest-Object" class="headerlink" title="Create an HttpRequest Object"></a>Create an HttpRequest Object</h4><p>HttpRequest 的继承关系图如下</p>
<img  src=http://www.plantuml.com/plantuml/svg/AyxEp2j8B4hCLSZ9p4ijgIn8LSWlAid8vyhCAqajIajCJbN8IYnBhD0hJYqgoqajqSieAIdGym0ImH21eDJ2qjJY4Yuka1YKuvQOd9YIgg1NMg1NOqUaVYJjf6damkbKg4BFl8BIak2IejJ4N2we9WWFkprOTA5fKp9KqjK24Wf8RWO0>

<p>本章的 HttpRequest 实现的很多方法都留空了，下一章会有具体实现。但是 header，cookies 等主要属性的提取已经实现了。由于 HttpRequst 的解析比较复杂，下面会分几个小节介绍</p>
<h4 id="Reading-the-Socket’s-input-Stream"><a href="#Reading-the-Socket’s-input-Stream" class="headerlink" title="Reading the Socket’s input Stream"></a>Reading the Socket’s input Stream</h4><p>SocketInputStream 的实现是直接从 Tomcat 4 的实现中 copy 过来的，他负责解析从 socket 中获取的 inputStream。</p>
<h4 id="Parsing-the-Request-Line"><a href="#Parsing-the-Request-Line" class="headerlink" title="Parsing the Request Line"></a>Parsing the Request Line</h4><p>processor 中处理 socket 的过程如下</p>
<img  src=http://www.plantuml.com/plantuml/svg/ZOzD2i9034RtSugGJN-mz0OUGGHNKbmCRKg39LCdQS_ls6h5dLa5tfSNlhmieAgEW2ni4EanazeXBJe5KKAtmib7fG-5aUKN3EGxYegEUy0vChH1pBCePBLIN4QoEaEmWSH1cjTfSoMzlTzUjimvXfPKGyGzbVWIxWJJXl827OrANyifx1Bpncro_A6GZlkrG5uMJm00>

<p>request line 就是 inputStream 中的第一行内容，下面是示例</p>
<blockquote>
<p>GET /myApp/ModernServlet?userName=tarzan&amp;password=pwd HTTP/1.1</p>
</blockquote>
<p>各部分称谓如下</p>
<ul>
<li>GET - method</li>
<li>/myApp/ModernServlet - URI</li>
<li>userName=tarzan&amp;password=pwd - query string</li>
<li>parameters - userName/tarzan;password/pwd 成对出现</li>
</ul>
<p>servlet/JSP 程序中通过 JsessionId 指代 session。 session 标识符通常通过 cookies 存储，如果客户端没有 enable cookie 还需要将它 append 到 URL 中</p>
<p>HttpProcessor 的 process 方法会将上面提到的对象从 inputStream 中提取出来并塞到对应的对象中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseRequest</span><span class="params">(SocketInputStream input, OutputStream output)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    <span class="comment">// Parse the incoming request line</span></span><br><span class="line">    input.readRequestLine(requestLine);</span><br><span class="line">    String method = <span class="keyword">new</span> String(requestLine.method, <span class="number">0</span>, requestLine.methodEnd);</span><br><span class="line">    String uri = <span class="keyword">null</span>;</span><br><span class="line">    String protocol = <span class="keyword">new</span> String(requestLine.protocol, <span class="number">0</span>,</span><br><span class="line">            requestLine.protocolEnd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Validate the incoming request line</span></span><br><span class="line">    <span class="keyword">if</span> (method.length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;Missing HTTP request method&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (requestLine.uriEnd &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;Missing HTTP request URI&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Parse any query parameters out of the request URI</span></span><br><span class="line">    <span class="keyword">int</span> question = requestLine.indexOf(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (question &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        request.setQueryString(<span class="keyword">new</span> String(requestLine.uri, question + <span class="number">1</span>,</span><br><span class="line">                requestLine.uriEnd - question - <span class="number">1</span>));</span><br><span class="line">        uri = <span class="keyword">new</span> String(requestLine.uri, <span class="number">0</span>, question);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        request.setQueryString(<span class="keyword">null</span>);</span><br><span class="line">        uri = <span class="keyword">new</span> String(requestLine.uri, <span class="number">0</span>, requestLine.uriEnd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Checking for an absolute URI (with the HTTP protocol)</span></span><br><span class="line">    <span class="keyword">if</span> (!uri.startsWith(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">int</span> pos = uri.indexOf(<span class="string">&quot;://&quot;</span>);</span><br><span class="line">        <span class="comment">// Parsing out protocol and host name</span></span><br><span class="line">        <span class="keyword">if</span> (pos != -<span class="number">1</span>) &#123;</span><br><span class="line">            pos = uri.indexOf(<span class="string">&#x27;/&#x27;</span>, pos + <span class="number">3</span>);</span><br><span class="line">            <span class="keyword">if</span> (pos == -<span class="number">1</span>) &#123;</span><br><span class="line">                uri = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                uri = uri.substring(pos);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parse any requested session ID out of the request URI</span></span><br><span class="line">    String match = <span class="string">&quot;;jsessionid=&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> semicolon = uri.indexOf(match);</span><br><span class="line">    <span class="keyword">if</span> (semicolon &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        String rest = uri.substring(semicolon + match.length());</span><br><span class="line">        <span class="keyword">int</span> semicolon2 = rest.indexOf(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (semicolon2 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            request.setRequestedSessionId(rest.substring(<span class="number">0</span>, semicolon2));</span><br><span class="line">            rest = rest.substring(semicolon2);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            request.setRequestedSessionId(rest);</span><br><span class="line">            rest = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        request.setRequestedSessionURL(<span class="keyword">true</span>);</span><br><span class="line">        uri = uri.substring(<span class="number">0</span>, semicolon) + rest;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        request.setRequestedSessionId(<span class="keyword">null</span>);</span><br><span class="line">        request.setRequestedSessionURL(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Normalize URI (using String operations at the moment)</span></span><br><span class="line">    String normalizedUri = normalize(uri);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the corresponding request properties</span></span><br><span class="line">    ((HttpRequest) request).setMethod(method);</span><br><span class="line">    request.setProtocol(protocol);</span><br><span class="line">    <span class="keyword">if</span> (normalizedUri != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ((HttpRequest) request).setRequestURI(normalizedUri);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ((HttpRequest) request).setRequestURI(uri);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (normalizedUri == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;Invalid URI: &quot;</span> + uri + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UML 图示如下</p>
<img  src=http://www.plantuml.com/plantuml/svg/TSwnZi8m30RWlKzXPQ45mIDmAqYt02DY2AqBve9JOcU0foTjWLOdaIcn_p_wyca1y_aIJEERwAmYg8ULQhF5MqJHNs84VxoOZ6emOJGiFQib5fZyJ0pe6Jc3TDhFzXeY7ZxnXQ1k8eRxJWFnAIzW1iIa40EPJydOetWNao2DeJnZ-MSoT893OYWXLrHdNskjjNk-ZHT14VBy1ThO89XK2Oon1s_xArQxlhckEdVQGEtiQUHc7wxMqGDVj9RSBORiYFiltSxoQV44>

<p>Request line 的类实现为 HttpRequestLine, 它的实现比较有意思，它为这个类中的各个部分声明了一个存储的 char 数组，并标识了结束地址 <code>char[] method, int methodEnd</code></p>
<img  src=http://www.plantuml.com/plantuml/svg/Syv9B2vMy2WfAGXABInDBIxnoSnBLQZcKW02xUICnABeM8NSr9AC_1HhY5XcNWbKm3KF9WPLLrgKYQG8oCDGKL2KNvAVd9-3f0mc15OB4KPpZOQcDNPnY3Dq4CxH0Lcg0xLP1swq3h8bGCDg0G00>

<p>我们通过处理 SocketInputStream 可以得到 request line 的信息用以填充 HttpRequestLine，主要涉及的方法 </p>
<ul>
<li>readRequestLine(HttpRequestLine) 填充 line 对象的方法入口</li>
<li>fill() 使用 buffer 的方式读取输入流中的内容，这个过程中会初始化 pos 和 count 的值。pos 表示当前位置，count 表示流中内容长度</li>
<li>read() 放回 pos 位置上的内容</li>
</ul>
<p>SocketInputStream 的 read() 方法有一个很有意思的处理方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Read byte.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pos &gt;= count) &#123;</span><br><span class="line">        fill();</span><br><span class="line">        <span class="keyword">if</span> (pos &gt;= count)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf[pos++] &amp; <span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到最后的处理方式是返回 <code>buf[n] &amp; 0xff</code> 0xff 即 0000 0000 0000 1111 做与操作可以将前面的值置零</p>
<p>readRequestLine 中用了三个 while 循环通过判断空格和行结束符将首行的信息提取出来。很雷同的还有一个叫 readHeader() 的方法处理解析 request 中的 headers.</p>
<h4 id="Parsing-Headers"><a href="#Parsing-Headers" class="headerlink" title="Parsing Headers"></a>Parsing Headers</h4><p>request 的 header 部分由 HttpHeader 这个类表示。将在第四章介绍具体实现，目前只需要了解一下几点</p>
<ul>
<li>可以使用无参数构造器创建实例</li>
<li>通过调用 readHeader 方法 SocketInputStream 中的 header 部分解析并填充进指定的 HttpHeader 对象</li>
<li>通过 String name = new String(header.name, 0, header.nameEnd) 拿到 header 的 name, 同理获取 value</li>
</ul>
<p>由于一个 request 中可能包含多个 header，所以通过 while 循环解析，解析完后通过 addHeader 塞入 request 中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseHeaders</span><span class="params">(SocketInputStream input)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        HttpHeader header = <span class="keyword">new</span> HttpHeader();</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the next header</span></span><br><span class="line">        input.readHeader(header);</span><br><span class="line">        <span class="keyword">if</span> (header.nameEnd == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (header.valueEnd == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(</span><br><span class="line">                        sm.getString(<span class="string">&quot;httpProcessor.parseHeaders.colon&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String name = <span class="keyword">new</span> String(header.name, <span class="number">0</span>, header.nameEnd);</span><br><span class="line">        String value = <span class="keyword">new</span> String(header.value, <span class="number">0</span>, header.valueEnd);</span><br><span class="line">        request.addHeader(name, value);</span><br><span class="line">        <span class="comment">// do something for some headers, ignore others.</span></span><br><span class="line">        <span class="keyword">if</span> (name.equals(<span class="string">&quot;cookie&quot;</span>)) &#123;</span><br><span class="line">            Cookie cookies[] = RequestUtil.parseCookieHeader(value);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cookies[i].getName().equals(<span class="string">&quot;jsessionid&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">// Override anything requested in the URL</span></span><br><span class="line">                    <span class="keyword">if</span> (!request.isRequestedSessionIdFromCookie()) &#123;</span><br><span class="line">                        <span class="comment">// Accept only the first session id cookie</span></span><br><span class="line">                        request.setRequestedSessionId(cookies[i].getValue());</span><br><span class="line">                        request.setRequestedSessionCookie(<span class="keyword">true</span>);</span><br><span class="line">                        request.setRequestedSessionURL(<span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                request.addCookie(cookies[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">&quot;content-length&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(value);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(</span><br><span class="line">                        sm.getString(<span class="string">&quot;httpProcessor.parseHeaders.contentLength&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            request.setContentLength(n);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">&quot;content-type&quot;</span>)) &#123;</span><br><span class="line">            request.setContentType(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// end while</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Parsing-Cookies"><a href="#Parsing-Cookies" class="headerlink" title="Parsing Cookies"></a>Parsing Cookies</h4><p>随便访问了一下网页，下面是一个 cookie 的例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">txtcookie: fontstyle&#x3D;null; loginMethodCookieKey&#x3D;PWD; bizxThemeId&#x3D;lightGrayPlacematBlueAccentNoTexture; route&#x3D;133abdfd8b5240fdc3330810e535ae4c79433a08; zsessionid&#x3D;45641c6c-9dff-4d67-8893-b0764636ee1f; JSESSIONID&#x3D;D8477F13FD4A9257B98731F666694D91.mo-bce0c171c</span><br></pre></td></tr></table></figure>

<p>在前面的 parseHeaders 方法中，处理 cookie 的部分，通过 RequestUtil.parseCookieHeader(value) 解析 cookie</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Parse a cookie header into an array of cookies according to RFC 2109.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> header Value of an HTTP &quot;Cookie&quot; header</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Cookie[] parseCookieHeader(String header) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((header == <span class="keyword">null</span>) || (header.length() &lt; <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> Cookie[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    ArrayList cookies = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">while</span> (header.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> semicolon = header.indexOf(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (semicolon &lt; <span class="number">0</span>)</span><br><span class="line">            semicolon = header.length();</span><br><span class="line">        <span class="keyword">if</span> (semicolon == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        String token = header.substring(<span class="number">0</span>, semicolon);</span><br><span class="line">        <span class="keyword">if</span> (semicolon &lt; header.length())</span><br><span class="line">            header = header.substring(semicolon + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            header = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> equals = token.indexOf(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (equals &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String name = token.substring(<span class="number">0</span>, equals).trim();</span><br><span class="line">                String value = token.substring(equals+<span class="number">1</span>).trim();</span><br><span class="line">                cookies.add(<span class="keyword">new</span> Cookie(name, value));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ((Cookie[]) cookies.toArray(<span class="keyword">new</span> Cookie[cookies.size()]));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Obtaining-Parameters"><a href="#Obtaining-Parameters" class="headerlink" title="Obtaining Parameters"></a>Obtaining Parameters</h4><p>解析 parameter 的动作放在 HttpRequest 的 parseParameters 方法中。在调用 parameter 相关的方法，比如 getParameterMap, getParameterNames 等时，会先调用 parseParameters 方法解析他，而且只需要解析一次即可，再次调用时，使用之前解析的结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Parse the parameters of this request, if it has not already occurred.</span></span><br><span class="line"><span class="comment">* If parameters are present in both the query string and the request</span></span><br><span class="line"><span class="comment">* content, they are merged.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseParameters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parsed)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    ParameterMap results = parameters;</span><br><span class="line">    <span class="keyword">if</span> (results == <span class="keyword">null</span>)</span><br><span class="line">        results = <span class="keyword">new</span> ParameterMap();</span><br><span class="line">    results.setLocked(<span class="keyword">false</span>);</span><br><span class="line">    String encoding = getCharacterEncoding();</span><br><span class="line">    <span class="keyword">if</span> (encoding == <span class="keyword">null</span>)</span><br><span class="line">        encoding = <span class="string">&quot;ISO-8859-1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parse any parameters specified in the query string</span></span><br><span class="line">    String queryString = getQueryString();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        RequestUtil.parseParameters(results, queryString, encoding);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parse any parameters specified in the input stream</span></span><br><span class="line">    String contentType = getContentType();</span><br><span class="line">    <span class="keyword">if</span> (contentType == <span class="keyword">null</span>)</span><br><span class="line">        contentType = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> semicolon = contentType.indexOf(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (semicolon &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        contentType = contentType.substring(<span class="number">0</span>, semicolon).trim();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        contentType = contentType.trim();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(getMethod()) &amp;&amp; (getContentLength() &gt; <span class="number">0</span>)</span><br><span class="line">        &amp;&amp; <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>.equals(contentType)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> max = getContentLength();</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span> buf[] = <span class="keyword">new</span> <span class="keyword">byte</span>[getContentLength()];</span><br><span class="line">        ServletInputStream is = getInputStream();</span><br><span class="line">        <span class="keyword">while</span> (len &lt; max) &#123;</span><br><span class="line">            <span class="keyword">int</span> next = is.read(buf, len, max - len);</span><br><span class="line">            <span class="keyword">if</span> (next &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            len += next;</span><br><span class="line">        &#125;</span><br><span class="line">        is.close();</span><br><span class="line">        <span class="keyword">if</span> (len &lt; max) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Content length mismatch&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        RequestUtil.parseParameters(results, buf, encoding);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (UnsupportedEncodingException ue) &#123;</span><br><span class="line">        ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Content read fail&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Store the final results</span></span><br><span class="line">    results.setLocked(<span class="keyword">true</span>);</span><br><span class="line">    parsed = <span class="keyword">true</span>;</span><br><span class="line">    parameters = results;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在 GET 类型的 request 中，所有的 parameter 都是存在 URL 中的，在POST 类型的 request，parameter 是存在 body 中的。解析的 parameter 会存在特殊的 Map 中，这个 map 不允许改变存放的 parameter 的值。对应的实现是 org.apache.catalina.util.ParameterMap. 看了一下具体的实现类代码，其实就是一个 HashMap, 最大的特点是他新加了一个 locked 的 boolean 属性，在增删改的时候都会先检查一下这个 flag 如果此时 flag 为 false 则抛异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterMap</span> <span class="keyword">extends</span> <span class="title">HashMap</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> locked = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (locked)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(sm.getString(<span class="string">&quot;parameterMap.locked&quot;</span>));</span><br><span class="line">        <span class="keyword">super</span>.clear();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Creating-a-HttpResponse-Object"><a href="#Creating-a-HttpResponse-Object" class="headerlink" title="Creating a HttpResponse Object"></a>Creating a HttpResponse Object</h3><p>HttpReponse 类图</p>
<img  src=http://www.plantuml.com/plantuml/svg/dOyn2y8m48Nt_8hGKSY1ktGKdHGxE1_rfD4s2PThKV37MsaBDYY8onsylEzUNhnQ5v2nqRLr9FT0shDKNgcj4-8pbgGlsE4D8d5Naq0b4c3JZs8G3XI3Tv6-0gDlrqfefH0cR18lM0zxjawER7jTgTyIzUe1e5yFaxB64a_qDwxIv0zV7wY96EiCN59ZxfoggVT0dIspXQbDtk_qvjpNHegPOPCd1vy0>

<p>通过设置 PrintWriter 的 auto flush 功能，之前打印的 behavior 才修复了，不然只会打印第一句话。为了了解这里说的东西，你需要查一下 Writer 相关的知识点。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote>
<p>server 启动后访问 URL 抛异常 <code>Exception in thread &quot;Thread-0&quot; java.util.MissingResourceException: Can&#39;t find bundle for base name com.jzheng.connector.http.LocalStrings, locale en_US</code></p>
</blockquote>
<p>查看了一下编译后的 target 文件加，其中咩有 properties 文件，怀疑是一些类型的文件编译时没有同步过去，试着在 pom 中添加以前项目中用过的 build 代码，问题解决</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在 build 的时候将工程中的配置文件也一并 copy 到编译文件中，即 target 文件夹下 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Ex04 Tomcat 自带的 connector 实现解析</title>
    <url>/hexo/2021/07/20/HTW-ex04/</url>
    <content><![CDATA[<blockquote>
<p><strong>Chapter4</strong> presents Tomcat 4’s default connector.<br>This connector has been deprecated in favor of a faster connector called Coyote. Nevertheless, the default connector is simpler and easier to understand.</p>
</blockquote>
<p>Tomcat 的 connector 是一个独立的模块，现存比较知名的实现有 Coyote, mod_jk, mod_jk2 和 mod_webapp. Tomcat 的 connector 实现需要遵循以下标准</p>
<ul>
<li>必须实现 org.apache.catalina.Connector 接口</li>
<li>创建的 request 必须实现 org.apache.catalina.Request 接口</li>
<li>创建的 response 必须实现 org.apache.catalina.Response 接口</li>
</ul>
<p>Tomcat4 默认的 connector 做的事情和第三章的没什么区别，它会一直 stand by 等待 Http request 的到来，然后创建 request 和 response 对象，并调用 org.apache.catalina.Container 实现类的 invoke 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    org.apache.catalina.Request request,</span></span></span><br><span class="line"><span class="function"><span class="params">    org.apache.catalina.Response response</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br></pre></td></tr></table></figure>

<p>invoke 方法中，container 会加载 servlet，调用其 service 方法，同时附带管理 session，log 等资源的功能</p>
<p>默认的 tomcat connector 和 ex03 有点不同，它提供了 pool 机制来减小创建对象的开销，同时更多的使用 char arry 代替 string 提高效率。</p>
<p>PS: 这节里面的多线程操作，值得好好看一看，之前一直都没有机会接触相关的知识点 (●°u°●)​ 」- 复习了小半个月，都快看吐了</p>
<p>默认的 connector 实现了所有 HTTP 1.1 的特性，同时也支持老版本的 HTTP 协议，比如 0.9 和 1.0. 理解 1.1 的协议对后面理解 connector 实现原理很重要。之后我们会介绍 tomcat 自定义的 connector 接口(org.apache.catalina.Connector).</p>
<h2 id="HTTP-1-1-New-Features"><a href="#HTTP-1-1-New-Features" class="headerlink" title="HTTP 1.1 New Features"></a>HTTP 1.1 New Features</h2><p>下面介绍 HTTP 1.1 的新特性</p>
<h3 id="Persistent-Connections"><a href="#Persistent-Connections" class="headerlink" title="Persistent Connections"></a>Persistent Connections</h3><p>HTTP 1.1 之前的协议，在请求完成后会关闭链接。但是现在一个网页请求中可能会包含很多资源，比如 images， applets 等。如果这些资源都通过不同的 connection 下载，那么整个过程会很慢。使用 persistent connection 之后，连接将被复用, 减小资源开销。</p>
<p>persistent connection 是 HTTP 1.1 的默认配置，你也可以通过 <code>connection: keep-alive</code> 属性显示的指定。</p>
<h3 id="Chunked-Encoding"><a href="#Chunked-Encoding" class="headerlink" title="Chunked Encoding"></a>Chunked Encoding</h3><p>persistent connection 导致的一个结果是，发送方必须在发送 request 或 response 时指定自己发送的内容的长度。但是通常情况下服务器端并不能做到这一点, 服务器发送内容的时候，是准备一点，发送一点，所以很可能发送的时候根本不知道将要发送多少内容。比如 servlet 会在一些数据准备好后就发送，并不会等到所有数据都完备再开始。</p>
<p>HTTP 1.0 的时候并不需要指定这个长度属性，连接会一直保持直到接收到 -1 这个结束标志符。</p>
<p>HTTP 1.1 通过 transfer-encoding 这个标志位表示将要发送的流长度。每个 chunk 数据发送前都会先发送一个 长度 + CR/LF 的行表示后面要发送的数据长度。在通讯结束后回发送一个 0 长度的 chunk 表示 transaction 结束。如下所示，我们以发送文字 <code>I&#39;m as helpless as a kitten up a tree.</code> 为例</p>
<p>发送时，这段文字被分成 2 个 chunks，第一个 chunk 长度为 29 第二个 chunk 长度为 9 那么体现在实际的 request 中为如下情况</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">1D\r\n</span><br><span class="line">I&#x27;m as helpless as a kitten u</span><br><span class="line">9\r\n</span><br><span class="line">p a tree.</span><br><span class="line">0\r\n</span><br></pre></td></tr></table></figure>

<p>1D 是 16 进制的 29， 表示第一个 chunk 包含 29 个 bytes. 0\r\n 表示通信结束。</p>
<h3 id="Use-of-the-100-Continue-Status"><a href="#Use-of-the-100-Continue-Status" class="headerlink" title="Use of the 100(Continue) Status"></a>Use of the 100(Continue) Status</h3><p>当客户端发送的 request body 很大时，他会在 header 中包含 100-continue 属性来和服务器端确认是否接收来提高效率，避免资源浪费(传到一半被拒绝被拒绝的情况)。服务器如果接收这种 request， 则返回 <code>HTTP/1.1 100 Continue</code></p>
<h2 id="The-Connector-interface"><a href="#The-Connector-interface" class="headerlink" title="The Connector interface"></a>The Connector interface</h2><p>Tomcat connector 必须实现 org.apache.catalina.Connector 接口，这个接口有很多方法，但是最主要方法有四个</p>
<ul>
<li>getContainer</li>
<li>setContainer</li>
<li>createReqeust</li>
<li>createResponse</li>
</ul>
<img  src=http://www.plantuml.com/plantuml/svg/XP312i8m38RlUuhIex22zx6BbmqKn3r1wU8eQbgRxER3ExUoTSBqKjByN_u_ROqCuQeDY0iyUo3EwgH3tY51baLD54f9YyGQsMe6akBW4C6m2okcfwYnjWWVRNBwOv10tmvPijSoCbUYU2abAcQ_YEk9w3DNqqHZ7_uEISpYAFSoBuSZNM8LC1AvtCanznoS0I8NgVagfgUeLfKZLu5k1wjD9dxZSGZSXXfdRi0r-fuR3g0VFr0E5hkJHjr1U0C0>

<p>重点：Connector 和 Container 是 1 对 1 的关系，Connector 和 Processor 是 1 对多的关系</p>
<h2 id="The-HttpConnector-Class"><a href="#The-HttpConnector-Class" class="headerlink" title="The HttpConnector Class"></a>The HttpConnector Class</h2><img  src=http://www.plantuml.com/plantuml/svg/yymhIIrAIqnELN3EpyjBJIx9B-BoX8lvPAQb9bScvwGYYGMLvkKb9W65kE0w56ngzFGKF4fA2X26mBLYauIPWKKE0000>

<p>实现 org.apache.catalina.Connector 接口使它能和 Catalina 整合</p>
<p>实现 java.lang.Runnable 使他能多线程运行</p>
<p>Lifecycle 接口用于管理每一个 catalina component 的生命周期，具体内容第六章介绍</p>
<h3 id="Creating-a-Server-Socket"><a href="#Creating-a-Server-Socket" class="headerlink" title="Creating a Server Socket"></a>Creating a Server Socket</h3><p>HttpConnector 的 initialize() 方法会调用 open 方法生成 serverSocket 对象。open 中通过工厂方法拿到 ServerSocket, 参见 ServerSocketFactory 和对应的实现 DefaultServerSocketFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Return the server socket factory used by this Container.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServerSocketFactory <span class="title">getFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.factory = <span class="keyword">new</span> DefaultServerSocketFactory();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.factory);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>lazy model 的方式拿到工厂实例。然后调用 factory.createSocket(port, acceptCount) 创建 socket.</p>
<h3 id="Maintaining-HttpProcess-Instances"><a href="#Maintaining-HttpProcess-Instances" class="headerlink" title="Maintaining HttpProcess Instances"></a>Maintaining HttpProcess Instances</h3><p>HttpContainer 中声明了一个 java.io.Stack 类型的变量存储 processor 的实例，实现类似 pool 的效果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Stack processor = <span class="keyword">new</span> Stack();</span><br></pre></td></tr></table></figure>

<p>HttpConnector 中定义了两个变量(minProcessors/maxProcessors)来控制这个 stack 的大小, 在启动的时候，服务器默认创建 minProcessors 数量的 processor 备用。随着 request 的增加，这个数量也会增加知道等于 maxProcessors。如果 request 再增加，之后的 request 都会被忽略。如果你想要访问数量没有限制，可以设置 maxProcessor 为负数。</p>
<p>PS: HttpConnector 中通过 curProcessor 这个变量表示当前可用的 processor 数量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">    <span class="comment">// Validate and update our current state</span></span><br><span class="line">    <span class="keyword">if</span> (started)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException</span><br><span class="line">            (sm.getString(<span class="string">&quot;httpConnector.alreadyStarted&quot;</span>));</span><br><span class="line">    threadName = <span class="string">&quot;HttpConnector[&quot;</span> + port + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    lifecycle.fireLifecycleEvent(START_EVENT, <span class="keyword">null</span>);</span><br><span class="line">    started = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start our background thread - 启动 Connector 线程，设置为守护线程</span></span><br><span class="line">    threadStart();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the specified minimum number of processors</span></span><br><span class="line">    <span class="keyword">while</span> (curProcessors &lt; minProcessors) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((maxProcessors &gt; <span class="number">0</span>) &amp;&amp; (curProcessors &gt;= maxProcessors))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        HttpProcessor processor = newProcessor();</span><br><span class="line">        recycle(processor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycle</span><span class="params">(HttpProcessor processor)</span> </span>&#123;</span><br><span class="line">    processors.push(processor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>processor 创建完后，通过调用 recycle 方法将 processor 回收到栈中。processor 负责解析 request 内容，他的构造函数的参数中包含 HttpConnector, 在构造的过程中，会调用 connector 中创建 request 和 response 的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HttpProcessor</span><span class="params">(HttpConnector connector, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.connector = connector;</span><br><span class="line">    <span class="keyword">this</span>.debug = connector.getDebug();</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.proxyName = connector.getProxyName();</span><br><span class="line">    <span class="keyword">this</span>.proxyPort = connector.getProxyPort();</span><br><span class="line">    <span class="keyword">this</span>.request = (HttpRequestImpl) connector.createRequest();</span><br><span class="line">    <span class="keyword">this</span>.response = (HttpResponseImpl) connector.createResponse();</span><br><span class="line">    <span class="keyword">this</span>.serverPort = connector.getPort();</span><br><span class="line">    <span class="keyword">this</span>.threadName = <span class="string">&quot;HttpProcessor[&quot;</span> + connector.getPort() + <span class="string">&quot;][&quot;</span> + id + <span class="string">&quot;]&quot;</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Serving-HTTP-Requests"><a href="#Serving-HTTP-Requests" class="headerlink" title="Serving HTTP Requests"></a>Serving HTTP Requests</h3><p>HttpConnector 的主要逻辑都在 run 方法中，该方法通过 while 循环等待发送过来的响应，直到服务器停止。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Loop until we receive a shutdown command</span></span><br><span class="line">        <span class="keyword">while</span> (!stopped) &#123;</span><br><span class="line">            <span class="comment">// Accept the next incoming connection from the server socket</span></span><br><span class="line">            Socket socket = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket = serverSocket.accept();</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img  src=http://www.plantuml.com/plantuml/svg/PSmn3eD034JHVaynSWL4N24NGIbMZY4hB1kjdVj7fA2X7Fsd6QOHy_m4LMOv4k6yIr9fAuYxr1GStLaYl1Fo8rPElfWdxAlw0bqTDQ9jTdsSS9Z68Xho7wI-uG5M3xahUxVr1m00>

<p>createProcessor 工作流程</p>
<ol>
<li>如果 stack 中有，则返回</li>
<li>如果没有，判断是否达到上限，没有就创建</li>
<li>达到上限，返回并关闭 socket</li>
<li>上限为 -1，创建 processor</li>
</ol>
<p>processor 执行 assign() 方法后立即返回，后续工作由 processor 在单独的线程中完成</p>
<h2 id="The-HttpProcessor-Class"><a href="#The-HttpProcessor-Class" class="headerlink" title="The HttpProcessor Class"></a>The HttpProcessor Class</h2><p>HttpProcessor 的功能和前一章中的 processor 是一样的，本章中的实现多了 assign 之后的多线程功能。下面将具体介绍他的实现原理。</p>
<p>和 HttpConnector 类似 HttpProcessor 也实现了 Runnable 和 Lifecycle 接口</p>
<img  src=http://www.plantuml.com/plantuml/svg/yymhIIrAIqnELV39J4jDhapEIUNoX8i5bURb9IO1XRZWiWesDNfw2Xub9GK1HVd9gSN5-KLSC6LOv000>

<p>这里主要探究 processor 的 assign 方法是如何使用多线程来支持 tomcat 同时处理多个 request 的功能的</p>
<blockquote>
<p>For each HttpProcessor instance the HttpConnector creates, its start method is called, effectively starting the “processor thread” of the HttpProcessor instance.</p>
</blockquote>
<p>HttpConnector 的 start() 方法被调用时，这个方法中有一个名为 newProcessor() 的方法，具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Create and return a new processor suitable for processing HTTP</span></span><br><span class="line"><span class="comment">    * requests and returning the corresponding responses.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> HttpProcessor <span class="title">newProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        if (debug &gt;= 2)</span></span><br><span class="line">    <span class="comment">//            log(&quot;newProcessor: Creating new processor&quot;);</span></span><br><span class="line">    HttpProcessor processor = <span class="keyword">new</span> HttpProcessor(<span class="keyword">this</span>, curProcessors++);</span><br><span class="line">    <span class="keyword">if</span> (processor <span class="keyword">instanceof</span> Lifecycle) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ((Lifecycle) processor).start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">            log(<span class="string">&quot;newProcessor&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    created.addElement(processor);</span><br><span class="line">    <span class="keyword">return</span> (processor);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，在创建 HttpProcessor 对象之后，processor thread 立马就被启动了</p>
<img  src=http://www.plantuml.com/plantuml/svg/qz3ILD3LjLDGIayjKIZEJyvEBL7Y0WiK5EKdfnONAsJ218fIaokJSr9r50fAInII4fEp5Kho5OfBW0o80WqjJG00>


<p>processor 的 run 方法实现如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The background thread that listens for incoming TCP/IP connections and</span></span><br><span class="line"><span class="comment">* hands them off to an appropriate processor.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process requests until we receive a shutdown signal</span></span><br><span class="line">    <span class="keyword">while</span> (!stopped) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Wait for the next socket to be assigned</span></span><br><span class="line">        Socket socket = await();</span><br><span class="line">        <span class="keyword">if</span> (socket == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Process the request from this socket, omit the try-catch</span></span><br><span class="line">        process(socket);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Finish up this request</span></span><br><span class="line">        connector.recycle(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tell threadStop() we have shut ourselves down successfully</span></span><br><span class="line">    <span class="keyword">synchronized</span> (threadSync) &#123;</span><br><span class="line">        threadSync.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当 connector 启动时 processor thread 也会一起启动，然后卡在 await 这里一直等待。当 HttpConnector 接受到 request 之后会调用 processor.assign(socket) 方法。</p>
<p>这里需要注意的是 assign() 方法是在 connector thread 中调用的，而 await() 方法是在 processor thread 中被调用的。这两者是怎么通信的呢？他们是通过 available flag 和 Object 自带的 wait(), notifyAll() 方法控制调度的。</p>
<p>PS: wait() 方法使得当前线程保持等待一直到另一个线程调用 notify() 或者 notifyAll() 方法</p>
<p>HttpConnector 中 会调用 processor 的 assign 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Process an incoming TCP/IP connection on the specified socket.  Any</span></span><br><span class="line"><span class="comment">* exception that occurs during processing must be logged and swallowed.</span></span><br><span class="line"><span class="comment">* &lt;b&gt;NOTE&lt;/b&gt;:  This method is called from our Connector&#x27;s thread.  We</span></span><br><span class="line"><span class="comment">* must assign it to our own thread so that multiple simultaneous</span></span><br><span class="line"><span class="comment">* requests can be handled.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> socket TCP socket to process</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">assign</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait for the Processor to get the previous Socket</span></span><br><span class="line">    <span class="keyword">while</span> (available) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wait();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Store the newly available Socket and notify our thread</span></span><br><span class="line">    <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    available = <span class="keyword">true</span>;</span><br><span class="line">    notifyAll();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((debug &gt;= <span class="number">1</span>) &amp;&amp; (socket != <span class="keyword">null</span>))</span><br><span class="line">        log(<span class="string">&quot; An incoming request is being assigned&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HttpProcessor 中 await 的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Await a newly assigned Socket from our Connector, or &lt;code&gt;null&lt;/code&gt;</span></span><br><span class="line"><span class="comment">* if we are supposed to shut down.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> Socket <span class="title">await</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait for the Connector to provide a new Socket</span></span><br><span class="line">    <span class="keyword">while</span> (!available) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wait();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Notify the Connector that we have received this Socket</span></span><br><span class="line">    Socket socket = <span class="keyword">this</span>.socket;</span><br><span class="line">    available = <span class="keyword">false</span>;</span><br><span class="line">    notifyAll();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((debug &gt;= <span class="number">1</span>) &amp;&amp; (socket != <span class="keyword">null</span>))</span><br><span class="line">        log(<span class="string">&quot;  The incoming request has been awaited&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (socket);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单图示一下交互过程</p>
<p><img src="diagram.png" alt="connector processor communication"></p>
<p>两个 thread 交互描述：</p>
<p>服务器启动时回执行 connector 的 start 方法，这个方法回启动 connector 线程和 processor 线程。connector 线程启动后 block 在等待 request 的地方，而 processor 线程启动后 block 在 wait()。</p>
<p>这时如果 connector thread 中接收到一个 request， connector 会从 stack 中取出一个可用的 processor 并调用 assign(socket) 方法。assign 方法会判断 available flag, 初始值为 false， 跳过 while, 将 socket 复刻到成员变量，设置 available 为 true, 唤醒所有等待的线程。</p>
<p>这时 process thread 的 await() 方法从 wait() 中被唤醒过来，跳出 while 循环将 socket 复刻到 local 变量中，并将 available 设置成 false，调用 notifyAll() 唤醒其他线程。接着跳出 await() 方法，执行其余方法，包括解析 socket，并回收重用 processor。然后继续执行 while block 在 await 中，如此循环。</p>
<blockquote>
<p>问题：<br>Q：为什么 await 要使用 local variable 类型的 socket 而不是直接返回传入的 socket<br>A: 如果没有用 local 的 socket， 那么 socket 还是 connector 中的那个 socket，我们用 local 的复刻之后返回，这个 socket 就可以用来处理下一个 request 了。<br>Q: 为什么 await 需要调用 notifyAll() 方法<br>A: 书上给的答案是防止这个时候 processor 再次收到一个 socket，此时 assign() 中 available 为 true，会进入到 wait 方法，需要主动唤醒。但是从我的理解来看，这种情况压根不会发生才对啊，同一个 processor 此时应该接受不到其他 socket 了才对。不知道是不是我理解有问题。</p>
</blockquote>
<h2 id="Request-Objects-Response-Objects"><a href="#Request-Objects-Response-Objects" class="headerlink" title="Request Objects / Response Objects"></a>Request Objects / Response Objects</h2><p>default connector 的 request 实现采用 org.apache.catalina.Request 接口. 对应的实现基础类是 RequestBase，他的子类是 HttpRequest. 最终实现类是 HttpRequestImpl. 这些类也有各自的 Facade 类。 UML 示例如下</p>
<img  src=http://www.plantuml.com/plantuml/svg/oymhIIrAIqnELGXABInDBIxXoeIB1ASMbUMabi0aa6GyIaeAOC9GMi6cHbSNXuIU7inqfyJYL2ukL8Cn5M2J1vcCvY0ynhWb9YUc06r2SW_266IhaDWOFW0hmBGNkq74A8Iw2eM7In4NcWKOhlFCBSZXGd6_ag6IbYwGW0L2S4bHQc8kB9WyymfAeK8eGGKH0W00>

<p>response 的关系图和 request 基本一致</p>
<h2 id="Process-Requests"><a href="#Process-Requests" class="headerlink" title="Process Requests"></a>Process Requests</h2><p>这节主要介绍 HttpProcessor 的 process 方法，它主要做了下面几件事</p>
<ul>
<li>parseConnection - 获取地址并塞到 request 中</li>
<li>parseRequest - 同上节</li>
<li>parseHeader - 解析 header 并塞到 request 中</li>
<li>recycle response + request - 复用对象，相比于上一节完善了很多</li>
</ul>
<p>process 定义了一些 flag，比如 ok 表示处理过程中没有出现异常，finishResponse 表示 finishResponse 方法要被调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> ok = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">boolean</span> finishResponse = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>keepAlive - 持久链接</li>
<li>stopped - HttpProcess instance has been stopped by connector</li>
<li>http11 - request 是从支持 http11 的 client 发出来的</li>
</ul>
<p>在 Tomcat 的 default connector 实现中，用户和 HttpProcessor 是隔离的，但是用户可以通过设置 connector 的 buffer size 间接设置 processor 的 buffer size.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SocketInputStream input = <span class="keyword">null</span>;</span><br><span class="line">OutputStream output = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Construct and initialize the objects we will need</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    input = <span class="keyword">new</span> SocketInputStream(socket.getInputStream(), connector.getBufferSize());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    log(<span class="string">&quot;process.create&quot;</span>, e);</span><br><span class="line">    ok = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来是一个 while 循环读取 inputStream 中的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">keepAlive = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!stopped &amp;&amp; ok &amp;&amp; keepAlive) &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>解析过程中，一开始设置 finishResponse 的值，并做一些 request 和 response 的初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">finishResponse = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    request.setStream(input);</span><br><span class="line">    request.setResponse(response);</span><br><span class="line">    output = socket.getOutputStream();</span><br><span class="line">    response.setStream(output);</span><br><span class="line">    response.setRequest(request);</span><br><span class="line">    ((HttpServletResponse) response.getResponse()).setHeader</span><br><span class="line">        (<span class="string">&quot;Server&quot;</span>, SERVER_INFO);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    log(<span class="string">&quot;process.create&quot;</span>, e);</span><br><span class="line">    ok = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后开始 parse connection，request 和 headers</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Parse the incoming request</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">        parseConnection(socket);</span><br><span class="line">        parseRequest(input, output);</span><br><span class="line">        <span class="keyword">if</span> (!request.getRequest().getProtocol()</span><br><span class="line">            .startsWith(<span class="string">&quot;HTTP/0&quot;</span>))</span><br><span class="line">            parseHeaders(input);</span><br></pre></td></tr></table></figure>

<p>parseConnection 可以获取 protocol 信息，这个值可能是 0.9， 1.0 或者 1.1. 如果是 1.0 则 keepAlive 会设置成 false。如果 request 头中包含 100-contiue 则会在 parseHeaders 中将 sendAck 设置成 true。</p>
<p>如果是 1.1 的协议，它也会相应 100-continue 并且会检查是否允许 chunking</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (http11) &#123;</span><br><span class="line">    <span class="comment">// Sending a request acknowledge back to the client if</span></span><br><span class="line">    <span class="comment">// requested.</span></span><br><span class="line">    ackRequest(output);</span><br><span class="line">    <span class="comment">// If the protocol is HTTP/1.1, chunking is allowed.</span></span><br><span class="line">    <span class="keyword">if</span> (connector.isChunkingAllowed())</span><br><span class="line">        response.setAllowChunking(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ackRequest 会检测 sendAck 的值，如果为 true 则返回 <code>HTTP/1.1 100 Continue /r/n/r/n</code>.  parse 过程中如果有异常，则 ok 和 finishResponse 会被置位。parse 结束后 request 和 response 会传给 container 调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Ask our Container to process this request</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ((HttpServletResponse) response).setHeader(<span class="string">&quot;Date&quot;</span>, FastHttpDateFormat.getCurrentDate());</span><br><span class="line">    <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">        connector.getContainer().invoke(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果此时 finishResponse 还是 true 则调用 requeset/response 的 finishResponse 方法, flush 流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Finish up the handling of the request</span></span><br><span class="line"><span class="keyword">if</span> (finishResponse) &#123;</span><br><span class="line">    response.finishResponse();</span><br><span class="line">    request.finishRequest();</span><br><span class="line">    output.flush();</span><br><span class="line">    ok = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后检查 Connection 的值并置位，回收 request 和 response</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// We have to check if the connection closure has been requested</span></span><br><span class="line"><span class="comment">// by the application or the response stream (in case of HTTP/1.0</span></span><br><span class="line"><span class="comment">// and keep-alive).</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="string">&quot;close&quot;</span>.equals(response.getHeader(<span class="string">&quot;Connection&quot;</span>)) ) &#123;</span><br><span class="line">    keepAlive = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// End of request processing</span></span><br><span class="line">status = Constants.PROCESSOR_IDLE;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Recycling the request and the response objects</span></span><br><span class="line">request.recycle();</span><br><span class="line">response.recycle();</span><br></pre></td></tr></table></figure>

<p>然后重复 while 或者结束 socket 通信</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    shutdownInput(input);</span><br><span class="line">    socket.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Parsing-the-Connection"><a href="#Parsing-the-Connection" class="headerlink" title="Parsing the Connection"></a>Parsing the Connection</h3><p>parseConnection 会获取 address 和 port 在 request 中赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseConnection</span><span class="params">(Socket socket)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    ((HttpRequestImpl) request).setInet(socket.getInetAddress());</span><br><span class="line">    <span class="keyword">if</span> (proxyPort != <span class="number">0</span>)</span><br><span class="line">        request.setServerPort(proxyPort);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        request.setServerPort(serverPort);</span><br><span class="line">    request.setSocket(socket);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Parsing-the-Request"><a href="#Parsing-the-Request" class="headerlink" title="Parsing the Request"></a>Parsing the Request</h3><p>和前一章一样的实现</p>
<h3 id="Parsing-Headers"><a href="#Parsing-Headers" class="headerlink" title="Parsing Headers"></a>Parsing Headers</h3><p>通过 character arrays 操作而非 String 来提高效率</p>
<h2 id="The-Simple-Container-Application"><a href="#The-Simple-Container-Application" class="headerlink" title="The Simple Container Application"></a>The Simple Container Application</h2><p>这里的 container 是一个简易版本，实现了 catalina 中的 Container 接口以配合 connector 使用。只实现了 invoke 接口，里面的功能是加载 servlet class 并执行</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>How Tomcat Works</tag>
      </tags>
  </entry>
  <entry>
    <title>Html 快速上路指南</title>
    <url>/hexo/2020/12/05/Html-quick-guide/</url>
    <content><![CDATA[<p>HTML + CSS + JS = 骨 + 肉 + 灵</p>
<p><a href="https://www.bilibili.com/video/BV14J4114768">Pink 前端视频教程</a> 学习笔记</p>
<h2 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h2><p>在 html 文件中 <code>! + tab</code> 自动生成网页骨架</p>
<p>插件：</p>
<ul>
<li>open in browser</li>
<li>auto rename tag</li>
<li>JS-CSS-HTML Formatter</li>
<li>CSS Peek</li>
</ul>
<h2 id="Html-常用标签-p12-60"><a href="#Html-常用标签-p12-60" class="headerlink" title="Html 常用标签 p12-60"></a>Html 常用标签 p12-60</h2><p><code>&lt;!DOCTYPE html&gt;</code> 文档类型声明标签，表明时 html5 格式。</p>
<p><code>&lt;html lang=&quot;en&quot;&gt;</code> 显示语言，只起提示作用，浏览器遇到不同语言会给你翻译提示</p>
<p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code> 字符集</p>
<p><code>&lt;hn&gt;</code> n=1-6 总共支持 6 级标签</p>
<p><code>&lt;p&gt;</code> 段落</p>
<p><code>&lt;br/&gt;</code> 换行，单标签</p>
<p>文本效果：</p>
<ul>
<li><code>&lt;strong&gt;</code>, <code>&lt;b&gt;</code> 加粗</li>
<li><code>&lt;em&gt;</code>, <code>&lt;i&gt;</code> 倾斜</li>
<li><code>del</code>, <code>s</code> 删除线</li>
<li><code>&lt;ins&gt;</code>, <code>&lt;u&gt;</code> 下划线</li>
</ul>
<p><code>&lt;div&gt;</code> 盒子标签，没有语义，div 分割，分区，占一整行</p>
<p> <code>&lt;span&gt;</code> 盒子标签，跨度，跨距</p>
<p> <code>&lt;img src=&#39;&#39; alt=&#39;&#39; title=&#39;&#39; width=&#39;&#39; height=&#39;&#39; border=&#39;边框，一般通过 css 改&#39;/&gt;</code> 图像</p>
<p> <a href='' target='_self/_blank'> 超链接， _blank 新标签页打开</p>
<p> 锚点链接: <a href='#someid'></a> + <link id='someid'></p>
<p> 注释 <!-- something --></p>
<p> 特殊字符：</p>
<table>
<thead>
<tr>
<th align="left">name</th>
<th align="left">value</th>
</tr>
</thead>
<tbody><tr>
<td align="left">空格</td>
<td align="left">&nbsp;</td>
</tr>
<tr>
<td align="left">小于</td>
<td align="left">&lt;</td>
</tr>
<tr>
<td align="left">大于</td>
<td align="left">&gt;</td>
</tr>
</tbody></table>
<p><strong>表格</strong></p>
<p>作用：显示，展示数据，table-&gt;tr-&gt;th/td</p>
<p>属性：align(left/center/right) 对齐；border 边框；cellpadding 单元格和内容之间的距离；cellspacing 单元格之间的距离；width 表宽；</p>
<p>table 可以分成 theader + tbody, theader 包含 tr + th，tbody 包含 tr + td 内容。</p>
<p>合并单元格：rowspan=”合并单元格数” 跨列合并，左侧的为目标单元格， colspan=”合并单元格数” 跨行合并 上面的为目标单元格</p>
<p><strong>列表</strong></p>
<p>作用：布局</p>
<p>分类：无序列表，有序列表，自定义列表</p>
<p>无序：ul + li, ul 下第一级只能包含 li，li 下可以包含任何标签</p>
<p>有序：ol + li</p>
<p>自定义：dl + dt + dd，dl 下只能包含 dt 和 dd, 适用于小标题加说明的情况</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>关注我们<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>微信<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>表单</strong></p>
<p>作用：收集用户信息</p>
<p>组成</p>
<ul>
<li>表单域：<form> 将域范围内的内容提交到后台</li>
<li>提示信息</li>
<li>表单控件(元素)：input/select/textarea</li>
</ul>
<p><code>&lt;input type=&#39;类型&#39;/&gt;</code>, 类型有很多种，text, boolean, button, radio， reset, file, image 等, 还有 name, value, checked 和 maxlength 四个属性</p>
<p>label 标签：绑定页面元素，点击 label 光标会自动聚焦到绑定元素，增加用户体验 – 这个之前一直没注意(～￣▽￣)～ </p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过 label 里面的 for 属性生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;text&quot;</span>&gt;</span> 用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>下拉列表：多选一</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>文本域 textarea: cols, rows</p>
<h2 id="CSS-P60"><a href="#CSS-P60" class="headerlink" title="CSS P60-"></a>CSS P60-</h2><p>css=选择器 + 一条或多条声明, 放在 head 下的 <code>&lt;style/&gt;</code> 下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    p &#123;</span><br><span class="line">        color: red;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>选择器分为 基础选择器 和 复合选择器</p>
<p>基础选择器：由单个选择器组成，包括：标签选择器，类型选择器， id 选择器 和通配符选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/* 标签选择器 */</span></span></span><br><span class="line"><span class="css"><span class="comment">/* 标签名做选择标的 */</span></span></span><br><span class="line">    p &#123;</span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    div &#123;</span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/* 类型选择器, 样式(class)做选择标的 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.red</span> &#123;</span></span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/* id选择器, id 做选择标的 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-id">#pink</span> &#123;</span></span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/* 通配符选择器, 通配符做选择标的 */</span></span></span><br><span class="line">    * &#123;</span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><ul>
<li>font-family: “Microsoft YaHei”;</li>
<li>font-size: 20px;</li>
<li>font-weight: blod; 文字效果，加粗，也可以用数字 blod=700 normal=400, 范围 100-900</li>
<li>font-style: normal/italic; 斜体</li>
</ul>
<p>字体的复合属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line"><span class="css">        <span class="comment">/* font: font-style font-weight font-size/font-height font-family; */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* font-size 和 font-family 必须有，其他可以省略，不然不起作用 */</span></span></span><br><span class="line">        font: italic 700 16px &#x27;Microsoft YaHei&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文本属性-P72-83"><a href="#文本属性-P72-83" class="headerlink" title="文本属性 P72-83"></a>文本属性 P72-83</h3><ul>
<li>color, 表示方式，blue，16进制(#)或者 RGB(RGB(X,X,X))</li>
<li>text-align, 对齐， left, right, center</li>
<li>text-decoration 文本装饰，下划线之类的效果 none(取消超链接的下划线效果), underline, overline, line-through</li>
<li>text-indent: 2em; 段落首行缩进</li>
<li>line-height：26px 行间距, 行间距=上间距+文字高度+下间距</li>
</ul>
<p>测量行高小工具 FSCapture.exe</p>
<h3 id="CSS-引入方式"><a href="#CSS-引入方式" class="headerlink" title="CSS 引入方式"></a>CSS 引入方式</h3><ol>
<li>内部样式表</li>
<li>外部样式表</li>
<li>行内样式表</li>
</ol>
<p>内部样式：放到 header 下的 style tag 下</p>
<p>行内样式： <code>&lt;p style=&quot;color: pink;&quot;&gt;fense&lt;/p&gt;</code></p>
<p>外部样式：</p>
<ol>
<li>新建 .css 文件</li>
<li>使用 <link> 标签引入到 thml <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css_file_path&quot;&gt;</code></li>
</ol>
<h3 id="Emment-语法"><a href="#Emment-语法" class="headerlink" title="Emment 语法"></a>Emment 语法</h3><p>前身时 Zen coding， 使用缩写提高 html/css 编写速度，VSCode 已经内置了</p>
<ol>
<li>标签 + tab 自动生成</li>
<li>tag*n + tab 生成多个</li>
<li>ul&gt;li 生成父子级关系 tag</li>
<li>div+p 兄弟级 tag</li>
<li>p.one 生成 <code>&lt;p class=&quot;one&quot;&gt;</code>, <code>#</code> 生成 id</li>
<li><code>.demo$*5</code> 带序号的 div</li>
<li><code>div&#123;123&#125;</code> -&gt; <code>&lt;div&gt;123&lt;/div&gt;</code></li>
</ol>
<h3 id="CSS-复合选择器"><a href="#CSS-复合选择器" class="headerlink" title="CSS 复合选择器"></a>CSS 复合选择器</h3><p>即基础选择器的组合形式，有后代选择器，子类选择器，并集选择器，伪类选择器等。。。</p>
<p>后代选择器影响所有后代</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*父子级中间加空格*/</span></span></span><br><span class="line">    ol li &#123;</span><br><span class="line"><span class="css">        <span class="comment">/* 后代选择器 */</span></span></span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 后代选择器 */</span></span></span><br><span class="line">        color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子选择器，只对亲儿子起作用(第一层)，其他不起作用, 父子间不用空格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*父子级中间加空格*/</span></span></span><br><span class="line">    ol &gt; li &#123;</span><br><span class="line"><span class="css">        <span class="comment">/* 后代选择器 */</span></span></span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并集选择器，使用都好分割, 用于删选多组数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*父子级中间加空格*/</span></span></span><br><span class="line">    div,</span><br><span class="line">    p &#123;</span><br><span class="line"><span class="css">        <span class="comment">/* 后代选择器 */</span></span></span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>伪类选择器，冒号(:), 比如 :hover, :first-child</p>
<p>链接伪类选择器：</p>
<ol>
<li>a:link 选择所有未被访问的链接</li>
<li>a:visited 选择所有已被访问过的链接</li>
<li>a:hover 选择鼠标指针位于其上的链接</li>
<li>a:active 选择活动链接，鼠标按下未弹起</li>
</ol>
<p>注意点:</p>
<ol>
<li>一定要按照 LVHA 顺序写，不然会胡问题 (Love Hate / LV 包包 hao)</li>
<li>a 需要单独指定样式，直接指定 body 没用</li>
<li>实际使用一般指定 a + a:hover 即可</li>
</ol>
<p>:focus 伪类选择器，选择表单中光标作用的元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*父子级中间加空格*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 后代选择器 */</span></span></span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS-的元素显示模式"><a href="#CSS-的元素显示模式" class="headerlink" title="CSS 的元素显示模式"></a>CSS 的元素显示模式</h3><p>HTML 一般分为块元素, 占一行(比如 div)和行内元素(比如 span)，一行多个</p>
<h4 id="常见块元素"><a href="#常见块元素" class="headerlink" title="常见块元素"></a>常见块元素</h4><p>h1~h6, p, div, ul, ol, li 等</p>
<p>特点：</p>
<ol>
<li>霸道，独占一行</li>
<li>高，宽，外边距以及内边距都可控</li>
<li>宽度默认时容器(父级宽度)的 100%</li>
<li>是一个容器及盒子，里面可以放行内或者块级元素</li>
</ol>
<p>PS: 文字类元素，比如 h, p 种不能再放块级元素</p>
<h4 id="常见行内-内联元素"><a href="#常见行内-内联元素" class="headerlink" title="常见行内/内联元素"></a>常见行内/内联元素</h4><p>a, strong, b, em, i, s, u, span</p>
<p>特点：</p>
<ol>
<li>相邻元素在一行上，一行可以显示多个</li>
<li>高宽直接设置是无效的</li>
<li>默认宽度是它本身内容的宽度</li>
<li>行内元素只能容纳文本或其他行内元素</li>
</ol>
<p>PS: 链接里面不能套链接；特殊情况下链接里面可以放块级元素，但是给 a 转换一下块级模式最安全</p>
<h4 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4><p>img, input, td</p>
<p>特点：</p>
<ol>
<li>一行可以多个 (行内元素特点)</li>
<li>默认宽度是它本身内容的宽度 (行内元素特点)</li>
<li>高度，行高，外边距以及内边距都可以控制 (块级元素特点)</li>
</ol>
<h3 id="元素显示模式转换"><a href="#元素显示模式转换" class="headerlink" title="元素显示模式转换"></a>元素显示模式转换</h3><p>特殊情况下，需要元素模式转换，即一个模式元素需要另一种模式的特性，比如想要增加 <a> 的触发范围。</p>
<p>做法在样式种加入 display:block, 或 display:inline, display: inline-block</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    a &#123;</span><br><span class="line">        width: 150px;</span><br><span class="line">        height: 50px;</span><br><span class="line">        background-color: pink;</span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    div &#123;</span><br><span class="line">        background-color: blue;</span><br><span class="line">        display: inline;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    span &#123;</span><br><span class="line">        width: 150px;</span><br><span class="line">        height: 50px;</span><br><span class="line">        background-color: yellow;</span><br><span class="line">        display: inline-block;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小工具介绍-Snipaste"><a href="#小工具介绍-Snipaste" class="headerlink" title="小工具介绍 Snipaste"></a>小工具介绍 Snipaste</h3><p>微软商城可以直接下载，貌似免费，mac 上类似的是 snappy</p>
<ol>
<li>F1 截图，同时测量大侠，设置箭头，文字等功能</li>
<li>F3 桌面置顶</li>
<li>点击图片 alt 拾取颜色</li>
<li>esc 取消图片显示</li>
<li>alt + c 直接复制拾取的颜色</li>
</ol>
<h3 id="单行文字垂直居中"><a href="#单行文字垂直居中" class="headerlink" title="单行文字垂直居中"></a>单行文字垂直居中</h3><p>行高=上间隙 + 字高 + 下间隙，设置 行高=盒子高度 <code>line-height: 行高</code> 实现居中</p>
<p>行高 &lt; 盒子高度， 偏上<br>行高 &gt; 盒子高度， 偏下</p>
<h3 id="CSS-的背景-P115-126"><a href="#CSS-的背景-P115-126" class="headerlink" title="CSS 的背景 P115-126"></a>CSS 的背景 P115-126</h3><p>背景属性可以给页面元素添加背景样式，比如背景颜色，背景图片，背景平铺，背景图片为止，背景图片固定等。</p>
<p>background-color: transparent | color</p>
<p>background-image: none | url(), 适用于 logo, 装饰性小图片，超大背景图片，优点是便于控制位置</p>
<p>background-repeat: repeat | no-repeat | repeat-x | repeat-y</p>
<p>background-position: x y; <strong>重点</strong>，x, y 可以是像素值，也可以是方位名词(left, center, right)</p>
<p>background-attachment: scroll | fixed 背景图片固定/附着，是否更正页面滚动变化，视差滚动效果</p>
<p>复合写法，直接在 background: 属性1， 属性2 … 没有顺序要求</p>
<h4 id="CSS3-半透明效果"><a href="#CSS3-半透明效果" class="headerlink" title="CSS3 半透明效果"></a>CSS3 半透明效果</h4><p><code>background: rgba(x, x, x, 0.3)</code> 最后一位就是透明度， <code>0.3</code> 可以直接写 <code>.3</code></p>
<h3 id="CSS-的三大特性"><a href="#CSS-的三大特性" class="headerlink" title="CSS 的三大特性"></a>CSS 的三大特性</h3><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><ol>
<li>样式冲突，遵循就近原则，执行离的近的那个</li>
<li>样式不冲突，不层叠</li>
</ol>
<h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>子标签会继承父标签的某些样式，比如文字颜色和字号等</p>
<ul>
<li>恰当的使用继承合一简化代码，降低 CSS 复杂性</li>
<li>子元素可以继承父元素的样式 (text-, font-, line- 和 color)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line"><span class="css">        <span class="comment">/*文字大小/行高 行高可以指定像素，也可以是字号的倍数，这里是 1.5 倍*/</span></span></span><br><span class="line">        font: 12px/1.5 &#x27;Microsoft YaHei&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ol>
<li>选择器相同，则执行层叠性</li>
<li>不同，则根据权重来</li>
</ol>
<p>权重排行：</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">权重</th>
</tr>
</thead>
<tbody><tr>
<td align="left">继承或者 *</td>
<td align="left">0,0,0,0</td>
</tr>
<tr>
<td align="left">元素选择器</td>
<td align="left">0,0,0,1</td>
</tr>
<tr>
<td align="left">类选择器，伪类选择器</td>
<td align="left">0,0,1,0</td>
</tr>
<tr>
<td align="left">id 选择器</td>
<td align="left">0,1,0,0</td>
</tr>
<tr>
<td align="left">行内样式 style=””</td>
<td align="left">1,0,0,0</td>
</tr>
<tr>
<td align="left">!important 重要的</td>
<td align="left">无穷大</td>
</tr>
</tbody></table>
<p>复合选择器会有权重叠加 <code>.nav li</code> = 0010 + 0001 = 0011</p>
<h2 id="盒子模型-P136"><a href="#盒子模型-P136" class="headerlink" title="盒子模型 P136"></a>盒子模型 P136</h2><p>网页布局本质</p>
<ol>
<li>准备好页面元素，基本都是盒子</li>
<li>CSS 设置盒子样式，摆放到相应位置</li>
<li>往盒子里装内容</li>
</ol>
<p>组成：</p>
<ol>
<li>边框 border</li>
<li>内容 content</li>
<li>内边距 padding</li>
<li>外边距 margin</li>
</ol>
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><p>三部分：边框粗细，样式 和颜色</p>
<p>border-width, border-style, border-color 可以写成复合形式： <code>border: 5px solid red;</code></p>
<p>单条边框设置：border-top/bottom/left/right</p>
<p>border-collapse: collapse; 表格边框线合并</p>
<p>边框会影响盒子实际大小</p>
<h3 id="内边距-padding"><a href="#内边距-padding" class="headerlink" title="内边距 padding"></a>内边距 padding</h3><p>padding-left/top/right/bottom</p>
<p>复合写法：</p>
<table>
<thead>
<tr>
<th align="left">写法</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">padding: 5px</td>
<td align="left">上下左右都是 5px</td>
</tr>
<tr>
<td align="left">padding: 5px 10px</td>
<td align="left">上下 5px, 左右 10 px</td>
</tr>
<tr>
<td align="left">padding: 5px 10px 20px</td>
<td align="left">上，左右，下</td>
</tr>
<tr>
<td align="left">padding: 5px 10px 20px 30px</td>
<td align="left">上，右，下，左 顺时针</td>
</tr>
</tbody></table>
<p>padding 也撑大盒子</p>
<h3 id="外边距-margin"><a href="#外边距-margin" class="headerlink" title="外边距 margin"></a>外边距 margin</h3><p>控制盒子与盒子之间的距离</p>
<p>margin-left/top/right/bottom</p>
<p><strong>块级</strong>盒子实现水平居中：</p>
<ol>
<li>盒子必须有宽度</li>
<li><code>margin: 0 auto;</code></li>
</ol>
<p><strong>行内</strong>元素实现水平居中：给父级元素添加 <code>text-align: center;</code></p>
<p>外边距合并-嵌套快元素塌陷，解决方案：</p>
<ol>
<li>可以为父元素定义上边框</li>
<li>可以为父元素定义上边距</li>
<li>可以为父元素添加 overflow: hidden 属性</li>
</ol>
<p>不同的网页元素默认都会带有不同的 内外边距，而且不同 browser 值不同，清除如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/*一般都会先写这一句*/</span></span></span><br><span class="line">    * &#123;</span><br><span class="line">       margin: 0;</span><br><span class="line">       padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>行内元素尽量只设置左右的内外边距</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><code>li &#123; list-style: none;&#125;</code> 去掉 list 的原点</p>
<h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><p>border-radius: npx 或 百分比;</p>
<h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><p>box-shadow: h-shadow v-shadow blur spread color inset; rgba(0,0,0,.3)</p>
<h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><p>text-shadow: h-shadow v-shadow blur color;</p>
<h2 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动 float"></a>浮动 float</h2><p>传统三种布局方式</p>
<ol>
<li>标准流 - 默认方式</li>
<li>浮动</li>
<li>定位</li>
</ol>
<p>浮动可以改变元素的默认排列方式</p>
<p>网页布局第一准则：多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</p>
<p><strong>float</strong>属性用于创建浮动框，将其移动到一边，知道左边缘或右边缘触及包含块或另一个浮动框的边缘。</p>
<h3 id="浮动的特性"><a href="#浮动的特性" class="headerlink" title="浮动的特性"></a>浮动的特性</h3><p>设置浮动的元素最重要的特性：</p>
<ol>
<li>脱离标准普通流的控制，移动到指定位置，俗称 脱标</li>
<li>浮动的盒子不在保留原先的位置</li>
</ol>
<p>多个盒子设置浮动，则它们会按照属性值一行内显示并且顶端对齐排列</p>
<p>PS: 浮动元素相互没有间隙，父级宽度装不下，另起一行对齐</p>
<p>浮动元素有行内块特性</p>
<p>一浮全浮，如果一个父元素下有一个加了浮动，一般其他所有多要加浮动属性</p>
<p>浮动指挥影响浮动盒子<strong>后面</strong>的标准流，前面的不会受影响</p>
<h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>为什么要清除浮动：</p>
<p>父盒子在很多情况下不方便给高度，但是盒子浮动之后就不占有位置，最后父级盒子高度为 0 时就会影响像下面的标准流盒子。</p>
<p>本质：清除元素浮动造成的影响</p>
<p>选择器 {clear: 属性值(left/right/both);} , 实际种都用 both</p>
<p>策略：闭合浮动，只让浮动在父盒子内部影响，不影响父盒子外部的其他盒子</p>
<p>方法：</p>
<ol>
<li>额外标签法，也称为隔墙法，W3C 推荐做法</li>
<li>父级添加 overflow 属性</li>
<li>父级添加 after 伪属性</li>
<li>腹肌添加双伪属性</li>
</ol>
<p>额外标签法：</p>
<p>在最后一个浮动子元素后面添加一个额外标签，添加清除浮动样式，实际工作可能会遇到但是不常用</p>
<ul>
<li>优点：通俗易懂，书写方便</li>
<li>缺点：添加许多无意义的标签，结构差</li>
</ul>
<p>示例: <code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code></p>
<p>PS: 最后的这个元素必须是块级元素，行内元素不行</p>
<p>父元素 overflow:</p>
<p><code>.body &#123;overflow: hidden;&#125;</code></p>
<p>属性可选项： hidden, auto 和 scroll</p>
<ul>
<li>优点： 代码简洁</li>
<li>缺点：无法显示溢出部分</li>
</ul>
<p>:after 伪元素</p>
<p>声明属性并在父盒子内添加，原理和隔墙法一致，只不过使用 CSS 实现的</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="comment">/* 内容为“.”就是一个英文的句号而已。也可以不写 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    <span class="comment">/* 加入的这个元素转换为块级元素 */</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="comment">/* 清除左右两边浮动 */</span></span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="comment">/* -可见度设为隐藏。注意它和display:none;是有区别的。仍然占据空间，只是看不到而已 */</span></span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    <span class="comment">/* 兼容 IE 6， 7 */</span></span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>优点：没有增加标签，结构接单</li>
<li>缺点：代码多</li>
</ul>
<p>双伪元素清除浮动</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 声明清除浮动的样式 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ie6 7 专门清除浮动的样式*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">*zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PS-切图"><a href="#PS-切图" class="headerlink" title="PS 切图"></a>PS 切图</h2><ul>
<li>jpg: 色彩信息保留较好，高清，颜色多。产品类图片经常用 jpg 格式</li>
<li>gif： 256 色，动态</li>
<li>png 可以保存透明背景，切透明背景图片</li>
<li>PSD，PS 的图片格式</li>
</ul>
<p>cutterman 切图神器</p>
<h3 id="CSS-书写规范"><a href="#CSS-书写规范" class="headerlink" title="CSS 书写规范"></a>CSS 书写规范</h3><ol>
<li>布局定位属性： display/position/float/clear/visibliity/overflow, display 第一个写，关系到模式</li>
<li>自身属性：width/height/margin/padding/border/background</li>
<li>文本属性： color/font/text-decoration/text-align/vertical-align/white-space/break-word</li>
<li>其他属性(CSS3)： context/cursor/border-radius/box-shadow/text-shadow/background:linear-gradient…</li>
</ol>
<h3 id="布局思路"><a href="#布局思路" class="headerlink" title="布局思路"></a>布局思路</h3><ol>
<li>必须确定版面的版心(可视区)，我们测量可得知</li>
<li>分析页面中的行模块，以及每个行模块种的列模块</li>
<li>一行中的列模块经常浮动布局，先确定每个列的大小之后，确定列的位置，页面布局第二准则</li>
<li>制作 html, 我们还是遵循，先有结构，后又样式的原则。结构永远最重要。</li>
</ol>
<p>实际开发中，我们不会直接用链接 a 而是用 li 包含链接(li+a)的做法。主要是针对 SEO 搜索的优化。</p>
<p>练习先跳过了，后面要用在看</p>
<h2 id="定位-P221"><a href="#定位-P221" class="headerlink" title="定位 P221"></a>定位 P221</h2><p>自由的定位，标准流和浮动做不出这种效果</p>
<p>定位 = 定位模式(position) + 边偏移</p>
<p>position = static/relative/absolute/fixed</p>
<p>边偏移 = top/bottom/left/right</p>
<p>静态定位，即默认形式，了解即可 <code>选择器 &#123;position: static;&#125;</code></p>
<p>相对定位：</p>
<ul>
<li>自恋型，移动时参照原来的位置</li>
<li>相对于浮动，原来的位置继续保留，不脱标</li>
<li><code>选择器 &#123;position: relative;&#125;</code></li>
</ul>
<p>绝对定位 absolute：</p>
<p>相对与祖先元素来说的，拼爹型 <code>选择器 &#123;position: absolute;&#125;</code></p>
<ol>
<li>如果没有祖先元素或祖先元素没有定位，则以 document 为标准</li>
<li>如果祖先有定位(相对，绝对，固定定位)，则以最近一级有定位祖先元素为参考点移动位置</li>
<li>绝对定位会脱标，不占有原来位置</li>
</ol>
<p>子绝父相</p>
<p>固定定位 fixed：</p>
<p>元素可以停在浏览器的可视区域的固定位置，滚动不影响  <code>选择器 &#123;position: fixed;&#125;</code>, 不占用原先的位置</p>
<p>固定定位小技巧：固定在版心右侧位置</p>
<ol>
<li>让固定定位的盒子 left: 50% 走到可视区域的一般位置</li>
<li>让固定定位盒子 margin-left: 版心宽度一般距离</li>
</ol>
<p>就可以实现该效果</p>
<p>粘性定位 sticky:</p>
<ol>
<li>以可是窗口为参照点移动元素</li>
<li>占有原先位置</li>
<li>必须设置 top, bottom, left, right 其中一个才会生效</li>
</ol>
<p>IE 不支持</p>
<h3 id="定位叠放次序-z-index"><a href="#定位叠放次序-z-index" class="headerlink" title="定位叠放次序 z-index"></a>定位叠放次序 z-index</h3><p><code>选择器 &#123;z-index: 1;&#125;</code></p>
<p>数值可以是正整数，负整数或0，默认是 auto, 数值越大，盒子越靠上</p>
<p>只有定位的盒子才有 z-index 属性</p>
<h3 id="绝对定位居中"><a href="#绝对定位居中" class="headerlink" title="绝对定位居中"></a>绝对定位居中</h3><p>left: 50% + margin-left: -盒子本身宽度px;</p>
<h3 id="定位拓展"><a href="#定位拓展" class="headerlink" title="定位拓展"></a>定位拓展</h3><p>绝对定位和固定定位也和浮动类似</p>
<ol>
<li>行内元素添加绝对定位或者固定定位，可以直接设置宽度和高度</li>
<li>块级元素添加绝对或者固定定位，如果不给宽度或高度，默认大小是内容大小</li>
</ol>
<p>脱标的元素不会触发外边距合并</p>
<p>浮动元素只会压住标准流的盒子，不会压住文字，定位会压住文字。</p>
<p>浮动最初产生的动机时用来做环绕效果得，所以不会压住文字</p>
]]></content>
      <categories>
        <category>弹射起步</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机类加载机制</title>
    <url>/hexo/2021/09/03/JVM-c7-class-loader/</url>
    <content><![CDATA[<h2 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h2><p>Java 虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验，转换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型，这个过程被称作虚拟机的类加载机制。</p>
<h2 id="7-2-类加载的时机"><a href="#7-2-类加载的时机" class="headerlink" title="7.2 类加载的时机"></a>7.2 类加载的时机</h2><p>一个类从被加载到虚拟机内存中，到卸载为止，会经历七个步骤</p>
<ul>
<li>加载 Loading</li>
<li>验证 Verification</li>
<li>准备 Preparation</li>
<li>解析 Resolution</li>
<li>初始化 Initialization</li>
<li>使用 Using</li>
<li>写在 Unloading</li>
</ul>
<p>验证，准备，解析三部分统称为 链接 Linking</p>
<p>加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的，而解析不一定，有些情况下可以在初始化后再开始，为了支持动态绑定</p>
<p>有且只有六种情况必须立即对类进行初始化</p>
<ol>
<li>遇到 new, getstatic, putstatic 或 invokestatic 这四条字节码指令时，如果类型没有进行过初始化，则需要先出发其初始化阶段。能够生产这四条指令的典型 Java 代码场景有：<ul>
<li>使用 new 关键字实例化对象的时候</li>
<li>读取或设置一个类型的静态字段(被 final 修饰，已在编译期把结果放入常量池的静态字段除外)</li>
<li>调用一个类型的静态方法的时候</li>
</ul>
</li>
<li>使用java.lang.reflect包的方法对类型进行反射调用的时候，如果类型没有进行过初始化，则需要先触发其初始化</li>
<li>当初始化类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化</li>
<li>当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类</li>
<li>当使用JDK 7新加入的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化</li>
<li>当一个接口中定义了JDK 8新加入的默认方法（被default关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化</li>
</ol>
<p>除此之外，所有引用类型的方式都不会出发初始化，称为被动引用。下面是三个被动引用的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过子类引用父类的静态字段，不会导致子类初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SuperClass init!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SubClass init!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotInitialization</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(SubClass.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SuperClass init!</span></span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<p>只会输出 “SuperClass init!”，而不会输出 “SubClass init!”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过数组定义来引用类，不会出发此类的初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotInitialization02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SuperClass[] sca = <span class="keyword">new</span> SuperClass[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种情况并不会触发类的初始化，只会触发 “[Lclassloading.SuperClass” 的类初始化节点，它是虚拟机自动生成的，创建动作由 newarray 触发，代表一维数组。</p>
<p>第三个例子，对应第一条中的第二点，final 修饰的常量编译阶段通过常量传播优化，将值存入 NotInitialization03 类的常量池中，后面对 ConstClass.HELLOWORLD 的引用世纪都被转为 NotInitialization03 对自身常量池的引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ConstClass init!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HELLOWORLD = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotInitialization03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(ConstClass.HELLOWORLD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hello world</span></span><br></pre></td></tr></table></figure>

<h2 id="7-3-类加载的过程"><a href="#7-3-类加载的过程" class="headerlink" title="7.3 类加载的过程"></a>7.3 类加载的过程</h2><p>下面具体介绍 加载，验证，准备，解析和初始化这五个阶段所执行的具体动作。</p>
<h2 id="7-3-1-加载"><a href="#7-3-1-加载" class="headerlink" title="7.3.1 加载"></a>7.3.1 加载</h2><p>加载是 类加载 的第一个阶段，会做三件事</p>
<ol>
<li>通过一个类的全限定名来获取定义此类的二进制字节流</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>
<li>再内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口</li>
</ol>
<p>PS: 对数组类型的加载，这里还有一些描述，以后有用到再看</p>
<h3 id="7-3-1-验证"><a href="#7-3-1-验证" class="headerlink" title="7.3.1 验证"></a>7.3.1 验证</h3><p>验证是链接阶段第一步，目的是确保 Class 文件的字节流中包含的信息符合 Java 虚拟机规范 的全部约束要求，保证这些信息被当作代码运行后不会危害虚拟机自身的安全。</p>
<p>验证阶段非常重要，这个阶段是否严谨直接决定虚拟机能否承受恶意代码的攻击。从代码量和耗费的执行性能角度讲，验证阶段工作量再虚拟机类加载过程中占了相当大的比重。</p>
<p>验证阶段大致会完成下面四个阶段的检测动作：文件格式验证，元数据验证，字节码验证和符号引用验证</p>
<p><strong>文件格式验证</strong></p>
<p>第一阶段要验证字节流是否符合 Class 文件格式规范，验证点包括</p>
<ul>
<li>是否以魔数 0xCAFEBABE 开头</li>
<li>主、次版本号是否在当前Java虚拟机接受范围之内</li>
<li>常量池的常量中是否有不被支持的常量类型(检查常量tag标志)</li>
<li>指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量</li>
<li>CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据</li>
<li>Class文件中各个部分及文件本身是否有被删除的或附加的其他信息</li>
<li>…</li>
</ul>
<p>以上只列举了一部分</p>
<p><strong>元数据验证</strong></p>
<p>第二阶段是对字节码描述的信息进行语义分析，保证其描述的信息符合规范</p>
<ul>
<li>这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）</li>
<li>这个类的父类是否继承了不允许被继承的类（被final修饰的类）</li>
<li>如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法</li>
<li>类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等</li>
<li>…</li>
</ul>
<p><strong>字节码验证</strong></p>
<p>第三阶段是这个那个验证过程中最复杂的一个阶段，通过数据流分析和控制流分析，确定程序予以是合法的，符合逻辑的。</p>
<p><strong>符号引用验证</strong></p>
<p>最后一个阶段的校验行为发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在链接的第三个阶段-解析阶段发生。符号引用验证可以看作是对类自身以外（常量池中的各种符号引用）的各类信息进行匹配性校验，通俗来说就是，该类是否缺少或者被禁止访问它依赖的某些外部类、方法、字段等资源。本阶段通常需要校验下列内容</p>
<h3 id="7-3-2-准备"><a href="#7-3-2-准备" class="headerlink" title="7.3.2 准备"></a>7.3.2 准备</h3><p>准备阶段是正式为类中定义的变量(即静态变量，被 static 修饰的变量)分配内存并设置类变量初始值的阶段，从概念上讲，这些变量所使用的内存都应该再方法区中进行分配，但方方法区本身就是一个逻辑上的区域。JDK7 之前 HotSpot 使用永久区，JDK8 之后类变量会和 Class 一起放在堆空间。这点再 4.3.1 验证过了。</p>
<p>准备阶段的赋值仅包括类变量，而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在 Java 堆中。其次，这里说的初始值指的是数据类型的零值，比如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<p>准备阶段后，初始值为 0 而不是 123，此时尚未执行任何 Java 方法，把 123 赋值给 value 的方法存放在类构造器 <clinit>() 方法之中，所以赋值要到类初始化阶段才会被执行。Java 所有基本数据类型零值表如下</p>
<table>
<thead>
<tr>
<th align="left">data type</th>
<th align="left">value</th>
<th align="left">data type</th>
<th align="left">value</th>
</tr>
</thead>
<tbody><tr>
<td align="left">int</td>
<td align="left">0</td>
<td align="left">boolean</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">0L</td>
<td align="left">float</td>
<td align="left">0.0f</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">(short)0</td>
<td align="left">double</td>
<td align="left">0.0d</td>
</tr>
<tr>
<td align="left">char</td>
<td align="left">‘\u0000’</td>
<td align="left">reference</td>
<td align="left">null</td>
</tr>
<tr>
<td align="left">byte</td>
<td align="left">(byte)0</td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<p>例外情况是前面展示过的 final 的情况，比如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<p>编译时 Javac 将会为 value 生成 Constant Value 属性，在准备阶段虚拟机就会根据 Constant Value 的设置将value赋值为123。</p>
<h3 id="7-3-4-解析"><a href="#7-3-4-解析" class="headerlink" title="7.3.4 解析"></a>7.3.4 解析</h3><p>解析阶段是 Java 虚拟机将常量池内的符号引用替换为直接引用的过程</p>
<ul>
<li>符号引用（Symbolic References）：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。</li>
<li>直接引用（Direct References）：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。</li>
</ul>
<p>PS: 中间穿插很多解析类型的解释，暂时用不到，跳过</p>
<h3 id="7-3-5-初始化"><a href="#7-3-5-初始化" class="headerlink" title="7.3.5 初始化"></a>7.3.5 初始化</h3><p>类的初始化阶段是勒加载过程的最后一个步骤，之前介绍的几个动作，除了在加载阶段用户可以通过自定义类加载器的方式局部参与外，其余都由 Java 虚拟机来主导控制。直到初始化阶段，虚拟机才真正执行类中编写的 Java 程序代码，将主导权移交给应用程序。</p>
<p>初始化阶段就是执行类构造器 <clinit>() 方法的过程，它是Javac编译器的自动生成物。</p>
<p><clinit>() 是由编译器自动收集类中所有类变量的赋值动作和静态语句块(static{})中的语句合并产生的，顺序由源文件中顺序决定。静态语句块只能访问它之前的变量。之后的变量可以赋值，但是不能访问。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        System.out.println(i); <span class="comment">// 编译器提示 非法向前引用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><clinit>() 不需要显示调用父类构造器，虚拟机会保证在子类 <clinit>() 执行前，父类的 <clinit>() 已经执行完毕，所以 jvm 中第一个被执行的 <clinit>() 肯定是 java.lang.Object.</p>
<p>父类 <clinit>() 优先执行，即父类的静态语句块要优先于子类的变量赋值操作。下面例子中再子类使用变量之前，父类已经完成了静态块的调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> A = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            A = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> B = A;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Sub.B);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p><clinit>() 方法对于类或接口来说并不是必需的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成 <clinit>() 方法</p>
<p>接口仍有变量初始化赋值操作，也会生成 <clinit>() 方法。但与类不同，执行接口的 <clinit>() 不需要先执行弗雷接口的 <clinit>()。接口的实现类再初始化时也一样不会执行接口的 <clinit>() 方法。</p>
<p>Java虚拟机必须保证一个类的<clinit>()方法在多线程环境中被正确地加锁同步。如果一个类的 <clinit>() 方法有耗时很长的操作，很可能造成多个进程阻塞</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test22</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLoopClass</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot; init DeadLoopClass&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable scritp = () -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread() + <span class="string">&quot; start&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> DeadLoopClass();</span><br><span class="line">            System.out.println(Thread.currentThread() + <span class="string">&quot; run over&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(scritp);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(scritp);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Thread[Thread-0,5,main] start</span></span><br><span class="line"><span class="comment">// Thread[Thread-1,5,main] start</span></span><br><span class="line"><span class="comment">// Thread[Thread-0,5,main] init DeadLoopClass</span></span><br></pre></td></tr></table></figure>

<h2 id="7-4-类加载器"><a href="#7-4-类加载器" class="headerlink" title="7.4 类加载器"></a>7.4 类加载器</h2><p>虚拟机设计团队有意把类加载阶段中 “通过一个类的全限定名来获取描述该类的二进制字节流” 的这个动作放到 Java 虚拟机外部去实现，以便让程序自己决定如何获取所需的类。实现这个动作的代码被称作-类加载器(Class Loader)。</p>
<p>这项技术原来是为了支持 Java Applet 而设计的，如今，Applet 已经淘汰了，但是类加载器却在 类层次划分，OSGi, 如部署，代码加密等领域大放异彩。</p>
<h3 id="7-4-1-类与类加载器"><a href="#7-4-1-类与类加载器" class="headerlink" title="7.4.1 类与类加载器"></a>7.4.1 类与类加载器</h3><p>类加载器虽然只用于实现类的加载动作，但他在 Java 程序中起到的作用却远超类加载阶段。任意类，必须由加载他的类加载器和这个类本身共同确立其在 jvm 中的唯一性，俄米格类加载器都拥有一个独立的类名称空间。</p>
<p>通俗讲：比较两个类是否相等，只有在两个类由同一个类加载器加载的前提下才有意义，否则，这两个类逼不想等。</p>
<p>这里所指的“相等”，包括代表类的Class对象的equals()方法，isAssignableFrom()方法、isInstance() 方法的返回结果，也包括了使用instanceof关键字做对象所属关系判定等各种情况</p>
<p>下面的例子中，我们自定义了一个 class loader 并加载当前测试类，生成实例。拿这个实例和默认类加载器的测试类进行 instanceof 的比较，结果为 false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassLoader myLoader = <span class="keyword">new</span> ClassLoader() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                String fileName = name.substring(name.indexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">                InputStream is = getClass().getResourceAsStream(fileName);</span><br><span class="line">                <span class="keyword">if</span> (is == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(name);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">                    is.read(b);</span><br><span class="line">                    <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Object obj = myLoader.loadClass(<span class="string">&quot;classloading.ClassLoaderTest&quot;</span>).newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(obj.getClass());</span><br><span class="line">        System.out.println(obj <span class="keyword">instanceof</span> classloading.ClassLoaderTest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// class classloading.ClassLoaderTest</span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="7-4-2-双亲委派模型"><a href="#7-4-2-双亲委派模型" class="headerlink" title="7.4.2 双亲委派模型"></a>7.4.2 双亲委派模型</h3><p>从虚拟机的角度看，只有两类加载器</p>
<ul>
<li>启动类加载器(Bootstrap Class Loader): C++ 实现，虚拟机的一部分</li>
<li>其他加载器：Java 实现，独立与虚拟机外</li>
</ul>
<p>开发人员角度看，可以分的更细致，可以分为三层类加载器</p>
<ul>
<li>启动类加载器：加载存放在 <JAVA_HOME>\lib 或者 -Xbootstrapclasspth 参数指定的路径下，能被 JVM 识别的类库到内存中。不能被 Java 程序直接使用，编写自定义加载器时，返回 null 即可将加载委托给启动类加载器了</li>
<li>扩展类加载器(Extension Class Loader): 在类 sun.misc.Lanucher$ExtClassLoader 中，负责加载 <JAVA_HOME>\lib\ext 或者 java.ext.dirs 系统变量锁指定的路径中所有的类库。JDK9 之后，被模块化所替代。</li>
<li>应用程序类加载器(Application Class Loader): 由 sun.misc.Lanucher$AppClassLoader 实现。ClassLoader 的 getSystemClassLoader() 方法的返回值。记载用户类路径上所有类库。如果应用程序没有自定义过自己的类加载器，一般这个就是默认的类加载器。</li>
</ul>
<img  src=http://www.plantuml.com/plantuml/svg/AyaioKbLUBvnzzEk1I_sxdqwSyNpMIrF-tkUxDhqTFcKPrlsFLknyEcyRYwklFoKL8Mav1o5QAwd4zO_xLg1h8VBAJ-_fBYaAB50mJadiRXOmIS_CIMrY2iMgYyLhEzPvygd6wUYw7EjA4dDAyxCpyEkBn5YtwufpwUWskTOK92JcPnOWbDdQNAE8L3hY_PLJzVDUhAp4qLtQ75g4KvjHgHf0mM9ZQuko8jSgL0sqDbSN8bG3iWbo1mZ0000>

<p>JDK9 之前的 Java 应用都是由这三类加载器互相配合来完成加载的。双亲委派模型要求，除了顶层的启动类加载器外，其余的类加载器都要有自己的父类加载器。这里的父子关系不是通过继承关系实现的，而是通过使用组合(Composition)关系来复用父加载器的代码。</p>
<p>双亲委派模型的工作过程是：如果一个类加载器收到了类加载请求，首先不会尝试自己去加载这个类，而是委派给父类加载器去完成，每次皆是如此。只有当父类无法实现这个加载请求时，子类才是尝试自己去加载。</p>
<p>使用亲委派模型的好处是具备了一种带有优先级的层次关系。例如 java.lang.Object, 无论那哪个加载器加载它，最终都会使用 rt.jar 下的 Object 定义。如果不用这个模型，用户在 ClassPath 下定义一个 java.lang.Object 类, 系统中就会出现多个不同的 Object 类，Java 类型体系中最基础的行为就无法得到保证了。</p>
<p>下面是 ClassLoader 中加载类的代码实现。先尝试查这个类是否已经被加载。再看是否有父加载器，如果没有则使用启动类加载器加载。如果还是没有找到类，则尝试用自己加载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                    <span class="comment">// to find the class.</span></span><br><span class="line">                    <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                    c = findClass(name);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-4-3-破坏双亲委派模型"><a href="#7-4-3-破坏双亲委派模型" class="headerlink" title="7.4.3 破坏双亲委派模型"></a>7.4.3 破坏双亲委派模型</h3><p>双亲委派模式是推荐方式，而不是强制性约束。直到 JDK9 的模块化为止，主要出现过 3 次较大规模的被破坏情况。</p>
<p>第一次是 JDK1.2 之前，双亲委派模型还没出现，但是类加载器的概念和抽象类已经引入了。</p>
<p>第二次被破坏是由于这个模型自身的缺陷导致的。这个模型很好的解决了各个类加载器协作时基础类型的一致性问题，但程序设计往往没有绝对不变的完美规则，如果基础类型又要调用回用户的代码，该如何。典型的例子便是 JNDI 服务。JDNI 现在已经是 Java 的标准服务，代码由启动类加载器来完成加载(JDK1.3 时加入到 rt.jar)，肯定属于 Java 中很基础的类型了。JNDI 目的是对资源进行查找和集中管理，它需要调用由其他厂商实现并部署在应用程序的 ClassPath 下的 JNDI 服务提供者接口(Service Provider Interface, SPI) 的代码，现在问题来了，启动类加载器是绝不可能认识，加载这些代码的。</p>
<p>为了解决这个困境，Java 设计团队引入了一个不太优雅的设计：线程上下文类加载器(Thread Context ClassLoader). 这个加载器可以通过 java.lang.Thread 的 setContextClassLoader() 方法进行设置，如果创建线程时未设置，将会从父类线程中继承一个，如果再应用程序的全局范围内都没有设置过的话，那这个类加载器默认就是应用程序类加载器。JNDI 使用这个线程上下文类加载器去加载所需的 SPI 服务代码，这个是一个类加载器去请求子类加载器完成类加载的行为，实际上打通了双亲委派模型的层次结构来逆向使用类加载器，Java 中涉及 SPI 的加载基本都采用这种方式，比如 JNDI，JDBC，JCE，JAXB 和 JBI 等。当 SPI 多于一个时，只能采用硬编码，为了消除这种不雅的实现，JDK6 提供了 java.util.ServiceLoader 配合 META-INF/services 中的配置信息，辅以责任链模式，才算给 SPI 提供了一种相对合理的解决方案。</p>
<p>第三次被破坏是由于用户对程序动态性的追求导致的。典型应用场景有：代码热部署，模块热部署等。即像电脑外设一般，在没有重新启动的情况下完成功能升级。现在比较热门的实现是 IBM 的 OSGi, Oracle 的 Jigsaw 。后面还有一些 OSGi 的介绍，但是没用过，看看就过了，用到再说。</p>
<h3 id="7-5-Java-模块化系统"><a href="#7-5-Java-模块化系统" class="headerlink" title="7.5 Java 模块化系统"></a>7.5 Java 模块化系统</h3><p>pass, 暂时用不到</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>类加载</tag>
      </tags>
  </entry>
  <entry>
    <title>牛刀小试</title>
    <url>/hexo/2021/05/17/LSSC-shell-something-out/</url>
    <content><![CDATA[<p><strong>Man</strong> 帮助文档操作方式</p>
<ul>
<li>ctrl + F或者 Page Down：向下翻页</li>
<li>ctrl + B或者 Page Up：向上翻页</li>
<li>gg到第一行</li>
<li>GG到最后一行</li>
<li>/start：能在整手册中搜索start相关字符，使用n查找下一个，使用N查找上一个</li>
<li>j，k与vi中一样使用，j向下一行，k向上一行</li>
<li>d下翻半页</li>
<li>u上翻半页</li>
<li>h获取man使用帮助</li>
<li>q退出man</li>
</ul>
<h2 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce"></a>Introduce</h2><p>以下实验均基于 bas</p>
<ul>
<li>提示符 <code>$</code> 表示普通用户， <code>#</code> 表示 root 用户</li>
<li>shebang: shell 文件首部的，以 <code>#!</code> 开头指定 shell 版本的语句</li>
<li>两种运行方式，终端对话框运行 or 运行脚本文件 <code>bash /path/to/file.script.sh</code></li>
<li>历史记录存储在 <code>.bash_history</code> 文件中</li>
<li>两个 cmd 可以写在同一行，但是需要用 <code>;</code> 隔开， <code>echo a ; echo b</code> 等价于 <code>echo a \n echo b</code></li>
</ul>
<blockquote>
<p>什么是 login shell<br>A login shell is the shell which you get just after logging in to a machine. However, if you open up a shell while logged in to a graphical environment (such as GNOME, KDE, and so on), then it is not a login shell.</p>
</blockquote>
<h2 id="Printing-in-the-terminal"><a href="#Printing-in-the-terminal" class="headerlink" title="Printing in the terminal"></a>Printing in the terminal</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印，自带结尾换行效果</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Welcome to Bash&quot;</span></span><br><span class="line"><span class="comment"># Welcome to Bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不带引号也可以</span></span><br><span class="line"><span class="built_in">echo</span> Welcome to Bash</span><br><span class="line"><span class="comment"># Welcome to Bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单引号也可以</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;text in quotes&#x27;</span></span><br><span class="line"><span class="comment"># text in quotes</span></span><br></pre></td></tr></table></figure>

<p>从上面效果看，都能打印，而且结果都一致，但是这几种使用方式还是有区别的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &quot; 中不能以 ！ 结尾, 在 bash 中 ！有特殊含义，表示前一个</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hi !&quot;</span></span><br><span class="line"><span class="comment"># bash: !&quot;: event not found</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用之前命令测试</span></span><br><span class="line"><span class="built_in">echo</span> aaa</span><br><span class="line"><span class="comment"># aaa</span></span><br><span class="line">!<span class="built_in">echo</span></span><br><span class="line"><span class="comment"># echo aaa</span></span><br><span class="line"><span class="comment"># aaa</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是如果 ！ 后面接空格则正常</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hi ! &quot;</span></span><br><span class="line"><span class="comment"># hi !</span></span><br></pre></td></tr></table></figure>

<p>echo 的几种用法的副作用：</p>
<ol>
<li>光杆 echo, 后面不能接 <code>;</code> 不然命令断裂了</li>
<li>单引号 echo, 变量复制不起作用</li>
</ol>
<p>echo 的其他用法：</p>
<ol>
<li><code>echo -n &quot;hi&quot;</code> 使用 <code>-n</code> 取出换行</li>
<li><code>echo -e &quot;1\t2\t3&quot;</code> 使用 <code>-e</code> 打印转义符</li>
</ol>
<p>echo 输出变色：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># \e[1;31m 设置字体为红色, \e[0m 重制</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\e[1;31m This is red text \e[0m&quot;</span></span><br><span class="line"><span class="comment"># This is red text</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \e[1;42m 设置背景为绿色, \e[0m 重制</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\e[1;42m Green Background \e[0m&quot;</span></span><br><span class="line"><span class="comment"># Green Background</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 混合使用也是 OK 的</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\e[1;42m\e[1;31m Green Background \e[0m&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># printf 和 C 语言中用法一致，默认不带换行</span></span><br><span class="line">bash-3.2$ <span class="built_in">printf</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line">hello worldbash-3.2$</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印示例</span></span><br><span class="line"><span class="built_in">printf</span>  <span class="string">&quot;%-5s %-10s %-4s\n&quot;</span> No Name  Mark</span><br><span class="line"><span class="built_in">printf</span>  <span class="string">&quot;%-5s %-10s %-4.2f\n&quot;</span> 1 Sarath 80.3456</span><br><span class="line"><span class="built_in">printf</span>  <span class="string">&quot;%-5s %-10s %-4.2f\n&quot;</span> 2 James 90.9989</span><br><span class="line"><span class="built_in">printf</span>  <span class="string">&quot;%-5s %-10s %-4.2f\n&quot;</span> 3 Jeff 77.564</span><br><span class="line"><span class="comment"># No    Name       Mark</span></span><br><span class="line"><span class="comment"># 1     Sarath     80.35</span></span><br><span class="line"><span class="comment"># 2     James      91.00</span></span><br><span class="line"><span class="comment"># 3     Jeff       77.56</span></span><br></pre></td></tr></table></figure>

<p>PS: -5, 左对齐，占 5 个位置</p>
<h2 id="Session-3-Playing-with-variables-and-environment-variables"><a href="#Session-3-Playing-with-variables-and-environment-variables" class="headerlink" title="Session 3 Playing with variables and environment variables"></a>Session 3 Playing with variables and environment variables</h2><p>赋值语句 <code>var=value</code>，需要注意的是，<code>var = value</code> 是不对的，后者是等于运算。如果 value 中间没有空格，则直接写，不然需要用引号包裹。当使用 echo 或者 prinf 输出变量时，需要用<strong>双引号</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name=jack</span><br><span class="line">echo $name # or `echo $&#123;name&#125;`</span><br><span class="line"><span class="meta">#</span><span class="bash"> jack</span></span><br><span class="line"></span><br><span class="line">name2 = jaack</span><br><span class="line"><span class="meta">#</span><span class="bash"> zsh: <span class="built_in">command</span> not found: name2</span></span><br><span class="line"></span><br><span class="line">name=&quot;jack zheng&quot;</span><br><span class="line">echo $&#123;name&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> jack zheng</span></span><br><span class="line"></span><br><span class="line">name=&#x27;jack zheng&#x27;</span><br><span class="line">echo $&#123;name&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> jack zheng</span></span><br><span class="line"></span><br><span class="line">fruit=apple</span><br><span class="line">count=5 </span><br><span class="line">echo &quot;We have $count $&#123;fruit&#125;(s)&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> We have 5 apple(s)</span></span><br><span class="line">echo &#x27;We have $count $&#123;fruit&#125;(s)&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> We have <span class="variable">$count</span> <span class="variable">$&#123;fruit&#125;</span>(s)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出变量长度</span></span><br><span class="line">length=$&#123;#name&#125;</span><br><span class="line">echo $length</span><br><span class="line"><span class="meta">#</span><span class="bash"> 10 - it<span class="string">&#x27;s the length of &#x27;</span>jack zheng<span class="string">&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前的 shell 种类</span></span><br><span class="line">echo $SHELL # or `echo $0`</span><br><span class="line"><span class="meta">#</span><span class="bash"> /bin/zsh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果运行 script 的用户不是 root，打印提示信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意点：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   1. 书上的例子首字母写错了</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   2. <span class="keyword">if</span> [ 之间都有空格的，不然会抛语法错误</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   3. root user 的 UID 为 0</span></span><br><span class="line">if [ $UID -ne 0 ]; then</span><br><span class="line">    echo Non root user. Please run as root.</span><br><span class="line">else</span><br><span class="line">    echo Root user</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改提示符内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以通过修改 .bashrc 中的 PS1 变量来达到该效果，不过我本地用的 zsh 和书上说的略有不同，就不是试了</span></span><br></pre></td></tr></table></figure>

<h2 id="Function-to-prepend-to-environmnet-variables"><a href="#Function-to-prepend-to-environmnet-variables" class="headerlink" title="Function to prepend to environmnet variables"></a>Function to prepend to environmnet variables</h2><p>假设我们安装了新的应用到 <code>/opt/myapp</code>，这个应用包含 <code>bin</code> 和 <code>lib</code> 目录。为了使他生效，我们需要做如下设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/opt/myapp/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/opt/myapp/lib;<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>

<p>如果想简化上面的设置的话，我们可以在 <code>.bashrc</code> 里自定义一些函数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">prepend</span></span>() &#123; [ -d <span class="string">&quot;<span class="variable">$2</span>&quot;</span> ] &amp;&amp; <span class="built_in">eval</span> <span class="variable">$1</span>=\&quot;<span class="variable">$2</span><span class="string">&#x27;:&#x27;</span>\$<span class="variable">$1</span>\&quot; &amp;&amp; <span class="built_in">export</span> <span class="variable">$1</span>; &#125;</span><br><span class="line"><span class="comment"># $1=\&quot;$2&#x27;:&#x27;\$$1\&quot; 人话说就是 PATH=&quot;New_Path:$PATH&quot;</span></span><br><span class="line"><span class="comment"># 可以通过 echo $1=\&quot;$2&#x27;:&#x27;\$$1\&quot; 测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 之前的命令可以简化为</span></span><br><span class="line">prepend PATH /opt/myapp/bin</span><br><span class="line">prepend LD_LIBRARY_PATH /opt/myapp/lib</span><br></pre></td></tr></table></figure>

<p>但是上面的脚本有瑕疵，当原始 PATH 为 null 时，新生成的 PATH 就会以 <code>:</code> 结果，我们可以改进如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">prepend</span></span>() &#123; [ -d <span class="string">&quot;<span class="variable">$2</span>&quot;</span> ] &amp;&amp; <span class="built_in">eval</span> <span class="variable">$1</span>=\&quot;<span class="variable">$2</span>\$\&#123;<span class="variable">$1</span>:+<span class="string">&#x27;:&#x27;</span>\$<span class="variable">$1</span>\&#125;\&quot; &amp;&amp; <span class="built_in">export</span> <span class="variable">$1</span> ; &#125;</span><br></pre></td></tr></table></figure>

<p>PS: shell 中定义变量的格式 <code>$&#123;parameter:+expression&#125;</code></p>
<h2 id="上例中语法解释"><a href="#上例中语法解释" class="headerlink" title="上例中语法解释"></a>上例中语法解释</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如何定义函数？</span></span><br><span class="line"><span class="comment"># 格式如下，写在 .zshrc 中，source 一下即可调用</span></span><br><span class="line"><span class="function"><span class="title">demoFun</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;This is a function...&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">demoFun   </span><br><span class="line"><span class="comment"># This is a function...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如何取得调用时传入的参数？</span></span><br><span class="line"><span class="comment"># 当位数超过 10 时需要用 $&#123;n&#125; 获取参数</span></span><br><span class="line"><span class="comment"># 其他特殊字符表示含义：</span></span><br><span class="line"><span class="comment">#   * $#: 传入参数的个数</span></span><br><span class="line"><span class="comment">#   * $*: 以一个字符串显示所有参数</span></span><br><span class="line"><span class="comment">#   * $@: 同上，但是需要加引号</span></span><br><span class="line"><span class="comment">#   * $$: 脚本运行的当前进程 ID</span></span><br><span class="line"><span class="comment">#   * $!: 后台运行的最后一个进程的 ID</span></span><br><span class="line"><span class="comment">#   * $?: 显示最后命令的退出状态，0 表示没错误，其他值表示有错误</span></span><br><span class="line"><span class="function"><span class="title">funWithParam</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第一个参数为 <span class="variable">$1</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第二个参数为 <span class="variable">$2</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$10</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$&#123;10&#125;</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十一个参数为 <span class="variable">$&#123;11&#125;</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;参数总数有 <span class="variable">$#</span> 个!&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;作为一个字符串输出所有参数 $* !&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funWithParam 1 2 3 4 5 6 7 8 9 34 73</span><br><span class="line"><span class="comment"># 第一个参数为 1 !</span></span><br><span class="line"><span class="comment"># 第二个参数为 2 !</span></span><br><span class="line"><span class="comment"># 第十个参数为 34 !</span></span><br><span class="line"><span class="comment"># 第十个参数为 34 !</span></span><br><span class="line"><span class="comment"># 第十一个参数为 73 !</span></span><br><span class="line"><span class="comment"># 参数总数有 11 个!</span></span><br><span class="line"><span class="comment"># 作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [] 什么意思？</span></span><br><span class="line"><span class="comment"># shell 中方括号和 Test 等价</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -d 什么意思？</span></span><br><span class="line"><span class="comment"># -d filename 表示是否为目录，但是总感觉用在这里词不达意</span></span><br><span class="line"><span class="comment"># 类似的还有 -eq，判等</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eval 什么意思？</span></span><br><span class="line"><span class="comment"># eval 如果后面直接跟命令，直接运行，如果命令中包含变量，则计算变量后运行</span></span><br><span class="line"><span class="built_in">set</span> 11 22 33 44</span><br><span class="line"><span class="comment"># 假设我们不知道参数长度，可以如下输出最后一个参数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\$<span class="variable">$#</span>&quot;</span></span><br><span class="line"><span class="comment"># $4</span></span><br><span class="line"><span class="built_in">eval</span> <span class="built_in">echo</span> <span class="string">&quot;\$<span class="variable">$#</span>&quot;</span></span><br><span class="line"><span class="comment"># 44</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改后的 \$\&#123;$1:+&#x27;:&#x27;\$$1\&#125; 是什么意思？</span></span><br><span class="line"><span class="comment"># :+ 表示覆盖缺省值</span></span><br><span class="line"><span class="comment"># 只有当var不是空的时候才替换成string, 若var为空时则不替换或者说是替换成变量var的值,即空值</span></span><br><span class="line">COMPANY=<span class="string">&quot;Nightlight Inc.&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;COMPANY:+Company has been overridden&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># Company has been overridden</span></span><br><span class="line">COMPANY=</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;COMPANY:+Company has been overridden&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 打印空行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp;&amp; 什么意思</span></span><br><span class="line"><span class="comment"># 逻辑与，前面条件成立才能执行后面的逻辑</span></span><br></pre></td></tr></table></figure>

<h2 id="Math-with-the-shell"><a href="#Math-with-the-shell" class="headerlink" title="Math with the shell"></a>Math with the shell</h2><p>体验下来就一个感觉，bash 下的计算略微繁琐</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 准备变量</span></span><br><span class="line">no1=4; no2=5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 let 关键字</span></span><br><span class="line"><span class="comment"># 整个表达式没有空格，不然报错！！！</span></span><br><span class="line"><span class="built_in">let</span> result=no1+no2</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"><span class="comment"># 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持自增/减</span></span><br><span class="line"><span class="built_in">let</span> no1++ <span class="comment"># 也支持写成 no1+=1</span></span><br><span class="line"><span class="built_in">let</span> no2-- <span class="comment"># 也支持写成 no2-=1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$no1</span> <span class="variable">$no2</span></span><br><span class="line"><span class="comment"># 6 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 和 let 功能相同的还有 []</span></span><br><span class="line">result=$[ no1 + no2 ]   <span class="comment"># 等号两边不能有空格，中括号中间无所谓</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方括号中间的变量可以带 $，不影响结果</span></span><br><span class="line">result=$[ <span class="variable">$no1</span> + 100 ]</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"><span class="comment"># 106</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相同的功能还有 (()), 用法和 [] 一致</span></span><br><span class="line">result=$(( <span class="variable">$no1</span> + <span class="number">50</span> ))</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"><span class="comment"># 56</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相同功能的还有 expr</span></span><br><span class="line">result=`expr <span class="variable">$no1</span> + 4`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是它们貌似都只能做整数计算</span></span><br><span class="line"><span class="built_in">let</span> result=3+4.0</span><br><span class="line"><span class="comment"># bash: let: result=3+4.0: syntax error: invalid arithmetic operator (error token is &quot;.0&quot;)</span></span><br><span class="line">result=$[expr <span class="variable">$no1</span> + 4.0]</span><br><span class="line"><span class="comment"># bash: expr 6 + 4.0: syntax error in expression (error token is &quot;6 + 4.0&quot;)</span></span><br><span class="line">bash-3.2$ result=$((expr <span class="variable">$no1</span> + <span class="number">4.0</span>))</span><br><span class="line"><span class="comment"># bash: expr 6 + 4.0: syntax error in expression (error token is &quot;6 + 4.0&quot;)</span></span><br><span class="line">result=`expr <span class="variable">$no1</span> + 4.0`</span><br><span class="line"><span class="comment"># expr: not a decimal number: &#x27;4.0&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果想要有精度的计算，可以使用 <code>bc</code>, bc 是basic calculator/bench calculator的简称。其语法类似于C语言，支持加减乘除还有更多复杂的运算。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bc</span><br><span class="line">1+2</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">quit</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;4 * 0.56&quot;</span> | bc</span><br><span class="line"><span class="comment"># 2.24</span></span><br><span class="line"></span><br><span class="line">result=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$no</span> * 1.5&quot;</span> | bc`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"><span class="comment"># 81.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以指定精确的位数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;scale=2;3/8&quot;</span> | bc</span><br><span class="line"><span class="comment"># .37</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以做进制转化, 而且必须先设置 obase 在设置 ibase</span></span><br><span class="line">no=100</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;obase=2;<span class="variable">$no</span>&quot;</span> | bc</span><br><span class="line"><span class="comment"># 1100100</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;obase=10;ibase=2;1100100&quot;</span> | bc</span><br><span class="line">100</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo 也可以达到进制转化的效果，不过只能转成 10 进制</span></span><br><span class="line"><span class="built_in">echo</span> $[8<span class="comment">#11] # 效果等同与 $((8#11))</span></span><br><span class="line"><span class="comment"># 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bash 中也有自带的函数，比如次方和开方</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;10^2&quot;</span> | bc</span><br><span class="line"><span class="comment"># 100</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sqrt(100)&quot;</span> | bc</span><br><span class="line"><span class="comment"># 10</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>man page 说明如下:<br>There are four special variables, scale, ibase, obase, and last. scale defines how some operations use digits after the decimal point. The default value of scale is 0.<br>ibase and obase define the conversion base for input and output numbers. The default for both input and output is base 10.<br>last (an extension) is a variable that has the value of the last printed number. These will be discussed in further detail where appropriate.<br>All of these variables may have values assigned to them as well as used in expressions.</p>
</blockquote>
<h2 id="Playing-with-file-descriptors-and-redirection"><a href="#Playing-with-file-descriptors-and-redirection" class="headerlink" title="Playing with file descriptors and redirection"></a>Playing with file descriptors and redirection</h2><p>文件描述符：</p>
<ul>
<li>0: stdin</li>
<li>1: stdout</li>
<li>2: stderr</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基操，输入到文件，如果原来有值，会覆盖</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a sample text 1&quot;</span> &gt; tmp.txt</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># tmp.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># append 内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a sample text 2&quot;</span> &gt;&gt; tmp.txt</span><br><span class="line">cat tmp.txt</span><br><span class="line"><span class="comment"># This is a sample text 1</span></span><br><span class="line"><span class="comment"># This is a sample text 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重定向错误信息</span></span><br><span class="line">ls +</span><br><span class="line"><span class="comment"># ls: +: No such file or directory</span></span><br><span class="line"><span class="comment"># 打印命令返回值，非 0 都是失败</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试将 err 导入文件</span></span><br><span class="line">ls + &gt; out.txt</span><br><span class="line"><span class="comment"># ls: +: No such file or directory</span></span><br><span class="line">cat out.txt</span><br><span class="line"><span class="comment"># 无内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># stderr 标识符 2，所以 2&gt; 表示把错误信息导入到某个流处理的意思</span></span><br><span class="line">ls + 2&gt; out.txt</span><br><span class="line">cat out.txt </span><br><span class="line"><span class="comment"># ls: +: No such file or directory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以分别指定流出口</span></span><br><span class="line">cmd 2&gt;stderr.txt 1&gt;stdout.txt</span><br><span class="line">cat stderr.txt </span><br><span class="line"><span class="comment"># bash: cmd: command not found</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将标准输出和错误信息一起写入文件</span></span><br><span class="line">cmd &gt; out.txt 2&gt;&amp;1</span><br><span class="line"><span class="comment"># 他还有一个简写方式</span></span><br><span class="line">cmd &amp;&gt; out.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试 /dev/null</span></span><br><span class="line"><span class="comment"># 这个测试感觉上不怎么贴切，但是，它用来生产 err 的方式还是很可以的</span></span><br><span class="line"><span class="comment"># 测试描述：生产三个文件，将其中一个权限变为 000, cat 这三个文件就会抛异常</span></span><br><span class="line"><span class="built_in">echo</span> a1 &gt; a1; cp a1 a2; cp a1 a3; chmod 000 a1;</span><br><span class="line">cat a* 2&gt; err.txt</span><br><span class="line"><span class="comment"># a1</span></span><br><span class="line"><span class="comment"># a1</span></span><br><span class="line">cat err.txt</span><br><span class="line"><span class="comment"># cat: a1: Permission denied</span></span><br><span class="line"><span class="comment"># 将 err 导向 /dev/null 则没有输出</span></span><br><span class="line">cmd 2&gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># tee 将输出写入文件的同时，给一份到 stdout</span></span><br><span class="line"><span class="comment"># 默认情况下 tee 会覆盖原文件，用 tee -a 可以达到 append 的效果</span></span><br><span class="line">cat a* | tee out.txt | cat -n</span><br><span class="line"><span class="comment"># cat: a1: Permission denied</span></span><br><span class="line"><span class="comment">#      1    a1</span></span><br><span class="line"><span class="comment">#      2    a1</span></span><br><span class="line">cat out.txt</span><br><span class="line"><span class="comment"># a1</span></span><br><span class="line"><span class="comment"># a1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tee 后接多个 file，内容都是重复的</span></span><br><span class="line"><span class="built_in">echo</span> aaa | tee f1 f2</span><br><span class="line">cat f1 f2</span><br><span class="line"><span class="comment"># aaa</span></span><br><span class="line"><span class="comment"># aaa</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># `-` 代表标准输入, </span></span><br><span class="line"><span class="built_in">echo</span> who is this | tee -</span><br><span class="line"><span class="comment"># who is this</span></span><br></pre></td></tr></table></figure>

<p><code>&gt;</code> Vs <code>&gt;&gt;</code>: 前者是覆盖，后者是续接</p>
<blockquote>
<p>./dev/null is a special device file where any data received by the file is discarded. The null device is often known as a black hole as all the data that goes into it is lost forever.<br>/dev/null 是一个特殊的设备，可以将它看作一个黑洞，所有进去的东西都没了 </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 终端多行输入</span></span><br><span class="line">cat &lt;&lt; EOF &gt; log.txt</span><br><span class="line">LOG FILE HEADER</span><br><span class="line">This is a <span class="built_in">test</span> <span class="built_in">log</span> file</span><br><span class="line">Function: System statistics</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat log.txt</span><br><span class="line"><span class="comment"># LOG FILE HEADER</span></span><br><span class="line"><span class="comment"># This is a test log file</span></span><br><span class="line"><span class="comment"># Function: System statistics</span></span><br></pre></td></tr></table></figure>

<p>自定义文件描述符</p>
<p>可用模式：Read mode, Write with truncate mode, Write with append mode</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># `&lt;` 用于将文件导向 stdin</span></span><br><span class="line"><span class="built_in">echo</span> this is a <span class="built_in">test</span> line &gt; input.txt</span><br><span class="line"><span class="built_in">exec</span> 3&lt;input.txt</span><br><span class="line">cat &lt;&amp;3</span><br><span class="line"><span class="comment"># this is a test line</span></span><br><span class="line">cat &lt;&amp;3</span><br><span class="line"><span class="comment"># 没有输出，这种方式不能复用，需要重新赋值</span></span><br></pre></td></tr></table></figure>

<p>为写操作自定义文件描述符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> 4&gt; output.txt</span><br><span class="line"><span class="built_in">echo</span> newline &gt;&amp;4</span><br><span class="line">cat output.txt</span><br><span class="line"><span class="comment"># newline</span></span><br><span class="line"><span class="comment"># 书上说这种方式再次调用会覆盖的才对，我这边测试是以 append 方式附加的</span></span><br><span class="line"><span class="built_in">echo</span> aaa &gt;&amp;4</span><br><span class="line">cat output.txt</span><br><span class="line"><span class="comment"># newline</span></span><br><span class="line"><span class="comment"># aaa</span></span><br></pre></td></tr></table></figure>

<p>为 append 模式的 write 定义文件描述符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> 5&gt;&gt;out.txt</span><br><span class="line"><span class="built_in">echo</span> appended line &gt;&amp;5</span><br><span class="line">cat out.txt</span><br><span class="line"><span class="comment"># appended line</span></span><br><span class="line"><span class="built_in">echo</span> appended line2 &gt;&amp;5</span><br><span class="line">cat out.txt</span><br><span class="line"><span class="comment"># appended line</span></span><br><span class="line"><span class="comment"># appended line2</span></span><br></pre></td></tr></table></figure>

<p>PS: <code>&gt;&gt;</code> 自带会车，如果不想要，需要用可以用 <code>echo -n</code> 或者 <code>printf &quot;%s&quot; &quot;$(value)&quot;</code></p>
<h2 id="Arrays-and-associative-arrays"><a href="#Arrays-and-associative-arrays" class="headerlink" title="Arrays and associative arrays"></a>Arrays and associative arrays</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数组声明及调用</span></span><br><span class="line">array_var=(1 2 3 4 5 6)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array_var[0]&#125;</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 输出全部</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array_var[*]&#125;</span>  <span class="comment"># or echo $&#123;array_var[@]&#125;</span></span><br><span class="line"><span class="comment"># 1 2 3 4 5 6</span></span><br><span class="line"><span class="comment"># 打印长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array_var[*]&#125;</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 index 下标</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!array_var[*]&#125;</span> <span class="comment"># or echo $&#123;!array_var[@]&#125;</span></span><br><span class="line"><span class="comment"># 0 1 2 3 4 5</span></span><br></pre></td></tr></table></figure>

<p>Associative arrays: 关系型数组，普通数组只能存整形，但是关系型数组可以存储混合的，任何 text 格式的数据。这种数据类型是在 Bash 4.0 引入的</p>
<p>Mac 升级 Bash 版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前版本</span></span><br><span class="line">bash --version</span><br><span class="line"><span class="comment"># GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin20)</span></span><br><span class="line"><span class="comment"># Copyright (C) 2007 Free Software Foundation, Inc.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 小八卦：Bash 在 3.2 后的版本改了协议，开始使用 GPLv3 许可，Apple 不想支持，所以 Mac 上默认 Bash 只到 3.2 为止</span></span><br><span class="line"><span class="comment"># 新的 Bash 有很强的 tab 补全，值得期待</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看以安装 bash 路径</span></span><br><span class="line"><span class="built_in">which</span> bash</span><br><span class="line"><span class="comment"># /bin/bash</span></span><br><span class="line"></span><br><span class="line">brew install bash</span><br><span class="line"><span class="comment"># Updating Homebrew...</span></span><br><span class="line"><span class="comment"># ==&gt; Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/bash-5.1.8.big_sur.bottle.tar.gz</span></span><br><span class="line"><span class="comment"># ######################################################################## 100.0%</span></span><br><span class="line"><span class="comment"># ==&gt; Pouring bash-5.1.8.big_sur.bottle.tar.gz</span></span><br><span class="line"><span class="comment"># /usr/local/Cellar/bash/5.1.8: 157 files, 10.9MB</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">which</span> bash</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/bash</span><br><span class="line"></span><br><span class="line">bash --version</span><br><span class="line"><span class="comment"># GNU bash, version 5.1.8(1)-release (x86_64-apple-darwin20.3.0)</span></span><br><span class="line"><span class="comment"># Copyright (C) 2020 Free Software Foundation, Inc.</span></span><br><span class="line"><span class="comment"># License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is free software; you are free to change and redistribute it.</span></span><br><span class="line"><span class="comment"># There is NO WARRANTY, to the extent permitted by law.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装结束</span></span><br></pre></td></tr></table></figure>

<p>Associative arrays 使用案例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">declare</span> -A fruits_value</span><br><span class="line">fruits_value=([apple]=<span class="string">&#x27;100 dollars&#x27;</span> [orange]=<span class="string">&#x27;150 dollars&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Apple costs <span class="variable">$&#123;fruits_value[apple]&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># Apple costs 100 dollars</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出下标，或者索引更贴切</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!fruits_value[*]&#125;</span></span><br><span class="line"><span class="comment"># orange apple</span></span><br></pre></td></tr></table></figure>

<p>PS: 感觉被骗了，这 TM 叫数组？！！命名就是字典嘛</p>
<h2 id="Visiting-aliases"><a href="#Visiting-aliases" class="headerlink" title="Visiting aliases"></a>Visiting aliases</h2><p>alias: 将很长的命令用一个简写来代替， 声明形式 <code>alias new_command=&#39;command sequence&#39;</code>, 例如 <code>alias install=&#39;sudo apt-get install&#39;</code></p>
<p>终端声明的 alias 是零时的，重启终端后失效，可以将其写入 rc 文件 <code>echo &#39;alias cmd=&quot;command seq&quot;&#39; &gt;&gt; ~/.bashrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示所有可用的别名</span></span><br><span class="line"><span class="built_in">alias</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新定义 rm 行为，删除文件时将它备份</span></span><br><span class="line"><span class="comment"># 测试失败。。。</span></span><br><span class="line"><span class="built_in">alias</span> rm=<span class="string">&#x27;cp $@ ~/backup &amp;&amp; rm $@&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这应该就是持续失败的原因，参数为止调换了</span></span><br><span class="line"><span class="comment"># 搜了下好像每有类似的问题，难道我系统坏了？？ 在 docker 容器中可以重现这个错误</span></span><br><span class="line"><span class="built_in">alias</span> mycp=<span class="string">&#x27;echo &quot;cp $@ ~/backup&quot;&#x27;</span></span><br><span class="line">mycp aaa.txt</span><br><span class="line"><span class="comment"># cp  ~/backup aaa.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 经过多方查证，作者这里的脚本写的有问题。按官方的原画，alias 是不支持传入参数的(补贴切)</span></span><br><span class="line"><span class="comment"># 这里可以用函数代替，在 alias 里面定义函数格式和外面不一样</span></span><br><span class="line"><span class="built_in">alias</span> mycp=<span class="string">&#x27;function _mycp() &#123; echo &quot;aaa $@ bbb&quot;; &#125;;_mycp&#x27;</span></span><br><span class="line">mycp xxx</span><br><span class="line"><span class="comment"># aaa xxx bbb</span></span><br><span class="line"><span class="built_in">alias</span> mycp=<span class="string">&#x27;function _mycp() &#123; echo &quot;aaa $1 bbb $2 ccc&quot;; &#125;;_mycp&#x27;</span></span><br><span class="line">mycp xxx yyy</span><br><span class="line"><span class="comment"># aaa xxx bbb yyy ccc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PS: 另外，如果只需要在末尾添加参数的话，alias 还是可以做到的</span></span><br><span class="line"><span class="built_in">alias</span> myls=<span class="string">&#x27;ls -al $@&#x27;</span> <span class="comment"># 或者 alias myls=&#x27;ls -al&#x27;</span></span><br><span class="line">myls ~/backup</span><br><span class="line"><span class="comment"># total 0</span></span><br><span class="line"><span class="comment"># drwxr-xr-x   2 i306454  staff    64 May 20 20:25 .</span></span><br><span class="line"><span class="comment"># drwxr-xr-x+ 76 i306454  staff  2432 May 21 13:05 ..</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 宗上所属，定制的 rm 应该写成如下形式</span></span><br><span class="line"><span class="built_in">alias</span> rm=<span class="string">&#x27;function _rm() &#123; cp $@ ~/backup &amp;&amp; rm $@;  &#125;; _rm&#x27;</span></span><br><span class="line">rm java_error_in_idea_12605.log</span><br><span class="line">ls ./backup</span><br><span class="line"><span class="comment"># java_error_in_idea_12605.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># disable alias, 前面加一个反斜杠</span></span><br><span class="line">\<span class="built_in">command</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示定义的 alias</span></span><br><span class="line"><span class="built_in">alias</span> rm</span><br><span class="line"><span class="comment"># alias rm=&#x27;cp $@ ~/backup &amp;&amp; rm $@&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="built_in">unalias</span> rm</span><br><span class="line"><span class="built_in">alias</span> rm</span><br><span class="line"><span class="comment"># bash: alias: rm: not found</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://www.gnu.org/software/bash/manual/html_node/Aliases.html">Gun - Alias</a></li>
</ul>
<blockquote>
<p>There is no mechanism for using arguments in the replacement text, as in csh. If arguments are needed, a shell function should be used (see Shell Functions).</p>
</blockquote>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>Linux Shell Script Cookbook</tag>
        <tag>TODO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java web practice</title>
    <url>/hexo/2021/06/14/Java-web-practice/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV12J411M7Sj">视频练习</a></p>
<h2 id="Tomcat-安装"><a href="#Tomcat-安装" class="headerlink" title="Tomcat 安装"></a>Tomcat 安装</h2><ul>
<li>去官网 <a href="https://tomcat.apache.org/download-10.cgi">Tomcat</a> 选择版本下载</li>
<li>解压后，去到目录的 bin 文件夹下，点击 startup.bat 启动服务器</li>
<li>访问 <code>localhost:8080</code> 看到网页，安装成功</li>
<li>点击 shutdown.bat 或关闭终端，停止程序</li>
</ul>
<p>config -&gt; server.xml 是只要的配置文件，可以配置端口号(Connector)，域名(Host)等信息</p>
<p>webapps 下面的每一个文件夹都是一个 project，可以再地址后面直接跟 project 名字访问，比如 <code>http://localhost:8080/docs</code></p>
<h3 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h3><p>如果 Host 域名改成其他的值，比如 <code>www.abc.com</code> 之后，直接再 browser 输入地址还能访问到该网页吗</p>
<p>不能。需要该本机 hosts 文件。browser 访问地址时，先查看本机 hosts 文件配置，如果有匹配的，直接返回，没有再联网到 DNS 做请求。DNS 那边肯定没有配置这个地址的，配置了也不是你想要的。</p>
<h3 id="山寨一个-ROOT"><a href="#山寨一个-ROOT" class="headerlink" title="山寨一个 ROOT"></a>山寨一个 ROOT</h3><p>复制 webapps 下的 ROOT 重命名成 myproject, 删除所有内容，只保留 WEB-INF 文件夹。修改这个文件夹里面的 web.xml 内容，只需要保留 <code>web-app</code> 这个 node 里面的内容，中间节点可以删除。在 web-inf 同级目录下添加新的 index.html 页面，内容为简单的 Hello world. 启动 tomcat，访问 <code>http://localhost:8080/myproject</code> 可以看到新页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Wryyyyy.....<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="myproject_index.png" alt="myproject_index"></p>
<h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">--webapps: Tomcat服务器的 web 目录</span><br><span class="line">    -ROOT</span><br><span class="line">    -myproject: 网站的目录名</span><br><span class="line">        -WEB-INF</span><br><span class="line">            -classes：Java 程序</span><br><span class="line">            -lib: web应用所以来的jar包</span><br><span class="line">            -web.xml: 网站配置文件</span><br><span class="line">        -index.html: 默认的首页</span><br><span class="line">        -static</span><br><span class="line">            -css</span><br><span class="line">                -style.css</span><br><span class="line">            -js</span><br><span class="line">            -img</span><br><span class="line">        -...</span><br></pre></td></tr></table></figure>

<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><ul>
<li>Servlet 是 SUN 公司开发动态 web 的一门技术</li>
<li>Sun 在这些 API 中提供了一个接口叫做 Servlet，开发只需两部分<ul>
<li>编写一个类实现 Servlet 接口</li>
<li>把开发好的 Java 类部署到 web 服务器中</li>
</ul>
</li>
</ul>
<p>实现了 Servlet 接口的 Java 程序叫做 Servlet</p>
<h3 id="HelloServlet"><a href="#HelloServlet" class="headerlink" title="HelloServlet"></a>HelloServlet</h3><p>目标：</p>
<ol>
<li>建立起基本的实验架构</li>
<li>运行第一个程序</li>
</ol>
<p>创建一个 Maven 项目作为综合项目 javaweb，将 src 文件夹删掉，后续的实验通过创建 module 的形式进行。这是一个空的项目，在父目录的 pom 文件中加入基本依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>新建 module 选择 Maven 项目 -&gt; Create from artchetype -&gt; maven-archtype-webapp 后面再填写一写基本的项目信息即可。</p>
<p>默认根据模板创建出来的项目是没有 Java 等基本目录的需要自己创建. 期望目录如下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">main</span><br><span class="line">├─java</span><br><span class="line">├─webapp</span><br><span class="line">└─resources</span><br></pre></td></tr></table></figure>

<p>建完 Java 文件夹后还要右键 mark as source root, 不然不能添加 Java class 文件。</p>
<p>创建完成后观察父子项目的 pom 文件可以发现，两个文件中有互相的引用</p>
<p>在 java 文件夹下创建 HelloServlet 并继承自 <code>HttpServlet</code>, 重写 doGet 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Into HelloServlet...&quot;</span>);</span><br><span class="line">    PrintWriter writer = resp.getWriter();</span><br><span class="line">    writer.print(<span class="string">&quot;Hello from servlet!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们写的是 Java code server 是不识别的，所以要再 web-inf 下的 web.xml 中配置 mapping 关系，使得 url 访问对应地址时触发我们写的 Java 代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--注册 servlet --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.jzeng.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--servlet 的请求路径--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码到这里基本就写完了，接下来是 idea 配置 tomcat</p>
<p>Add Configuration… -&gt; + 号 -&gt; Tomcat Server -&gt; local 选择本地安装的 tomcat</p>
<p>主要查看 Application server， JRE， port 这些信息。可以看到有个 Warning，说是 No artifacts marked for deployment. 直接选择 Deployment tab -&gt; + 号 选择 servlet01:war 即可。貌似选第二个也不会出问题. 点击运行启动程序，会默认弹出浏览器，输入地址 <code>http://localhost:8080/hello</code> 查看结果</p>
<p><img src="servlet01_hello.png" alt="servlet01_hello"></p>
<p>PS: 这个页面上有个 Application context 默认自带 /servlet01_war 这个值的，有了的话，地址默认要带这个路径的，不想要的话直接用 / 就行</p>
<h3 id="Servlet-类关系图"><a href="#Servlet-类关系图" class="headerlink" title="Servlet 类关系图"></a>Servlet 类关系图</h3><p>TODO - 明天用 UML 画一下 servlet 个类关系图，并简要提及一下代码实现</p>
<h3 id="Servlet-的工作原理"><a href="#Servlet-的工作原理" class="headerlink" title="Servlet 的工作原理"></a>Servlet 的工作原理</h3><p>TODO</p>
<h3 id="Servlet-mapping-的书写"><a href="#Servlet-mapping-的书写" class="headerlink" title="Servlet mapping 的书写"></a>Servlet mapping 的书写</h3><p>可以是一对一</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以是一对多</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也支持通配符</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.abc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="编写-ErrorServlet"><a href="#编写-ErrorServlet" class="headerlink" title="编写 ErrorServlet"></a>编写 ErrorServlet</h4><p>新加 class 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    PrintWriter writer = resp.getWriter();</span><br><span class="line">    writer.print(<span class="string">&quot;&lt;h1&gt;404&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应的 web.xml 中添加内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.jzeng.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PS: <url-pattern>*</url-pattern> 不能省略斜杠，不然项目启动会失败</p>
<h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><p>ServletContext 提供了一个 servlet 之间通信的媒介，是位于 servlet 之上的</p>
<p>TODO：简单来个图</p>
<p>实际开发中尽量避免直接使用它，下面介绍的方法都有替代方案，数据共享用 session/cookie, context 参数基本不推荐使用了，转发用重定向，properties 使用反射读取。经典白学。。。只做引子</p>
<h3 id="数据共享"><a href="#数据共享" class="headerlink" title="数据共享"></a>数据共享</h3><p>目标：</p>
<ul>
<li>创建第二个 module 实践 ServletContext 实现 servlet 之间的数据共享</li>
</ul>
<p>实验描述：在 module2 中新建两个 servlet, 分别向 ServletContext 中 set 值和从 ServletContext 中 get 值。然后这两个 servlet 配置到 web.xml 中。配置 tomcat 启动项，将 deployment 下原本的 module1 配置移除，不然两个都会打包，会变慢。启动后，浏览器先访问 <code>localhost:8080/setattr</code> 再访问 <code>localhost:8080/getattr</code> 就可以看到之前 set 的属性被正确获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetAttrServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        context.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetAttrServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String name = (String)context.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;my name: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取初始化参数"><a href="#获取初始化参数" class="headerlink" title="获取初始化参数"></a>获取初始化参数</h3><p>目标：体验 context param 的使用，实际中基本不使用这种方式</p>
<p>描述：在 web.xml 中添加 context param 标签并注册，新写一个 servlet 拿到这个 param 并输出到页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetContextParamServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String name = context.getInitParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;manga name: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- context param testing --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jojo<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getContextParam<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.jzheng.servlet.GetContextParamServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getContextParam<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getcontextparam<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h3><p>目标：体验转发特点</p>
<p>描述：新建一个 servlet 将请求转发到上面的参数初始化实验的地址去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">// point to target address</span></span><br><span class="line">        context.getRequestDispatcher(<span class="string">&quot;/getcontextparam&quot;</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- forward testing --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>forward<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.jzheng.servlet.ForwardServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>forward<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/forward<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重启 tomcat，访问 <code>localhost:8080/forward</code> 显示之前实验的页面</p>
<p>TODO: 补一个转发和重定向的简图</p>
<p>PS：转发的请求，地址不会发生变化</p>
<h3 id="加载-Properties"><a href="#加载-Properties" class="headerlink" title="加载 Properties"></a>加载 Properties</h3><p>目标：Servlet 读取 resources 文件夹下的 properties 文件内容</p>
<p>描述：resources 文件夹下新建一个 db.properties 文件，写入测试内容。新建 PropertiesServlet 读取这个文件并将信息显示在页面上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        InputStream is = context.getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        String uname = (String) prop.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String pwd = (String) prop.get(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;name: &quot;</span> + uname + <span class="string">&quot;; password: &quot;</span> + pwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- properties testing --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>prop<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.jzheng.servlet.PropertiesServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>prop<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/prop<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问 <code>localhost:8080/prop</code> 显示 properties 文件中设置的用户名和密码</p>
<h4 id="prop-不能提取的问题"><a href="#prop-不能提取的问题" class="headerlink" title="prop 不能提取的问题"></a>prop 不能提取的问题</h4><p>如果 properties 是写在 Java class 同目录下的，那么，编译的时候，并不会被提取到 WEB-INF 文件夹中去。需要在 module2 的 pom 中添加配置修复</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在 build 的时候将工程中的配置文件也一并 copy 到编译文件中，即 target 文件夹下 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><p>web 服务器接收到客户端的 Http 请求，会封装两个对象 HttpServletReqeust 代表请求，HttpServletResponse 代表响应</p>
<h3 id="设置-reponse-自动下载"><a href="#设置-reponse-自动下载" class="headerlink" title="设置 reponse 自动下载"></a>设置 reponse 自动下载</h3><p>目标：通过设置 response 头信息，实现发送请求后，下载文件的效果</p>
<p>描述：新建 servlet, 设置响应头包含 <code>response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot;+filename);</code> 即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        URL url = getClass().getClassLoader().getResource(&quot;tree.png&quot;);</span></span><br><span class="line">        String filePath = <span class="string">&quot;C:\\Users\\jack\\IdeaProjects\\javaweb\\response\\src\\main\\resources\\tree.png&quot;</span>;</span><br><span class="line">        String fileName = filePath.substring(filePath.lastIndexOf(<span class="string">&quot;//&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName);</span><br><span class="line">        <span class="keyword">byte</span>[] buf= <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">        OutputStream os = resp.getOutputStream();</span><br><span class="line">        <span class="keyword">while</span>((len=is.read(buf))&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            os.write(buf, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设置-response-自动刷新"><a href="#设置-response-自动刷新" class="headerlink" title="设置 response 自动刷新"></a>设置 response 自动刷新</h3><p>这个实验用到的技术不实用了，但是他最后的效果我挺喜欢的，还是手动撸一遍玩一下</p>
<p>目标：页面显示一个定时刷新的数字验证码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// auto refresh</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;refresh&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="comment">// create image</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(<span class="number">80</span>, <span class="number">20</span>, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        Graphics2D g = (Graphics2D)image.getGraphics();</span><br><span class="line">        g.setColor(Color.white);</span><br><span class="line">        g.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">20</span>);</span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.BOLD, <span class="number">20</span>));</span><br><span class="line">        g.drawString(makeNum(), <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="comment">// no cache</span></span><br><span class="line">        resp.setDateHeader(<span class="string">&quot;expires&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, resp.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">makeNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String num = random.nextInt(<span class="number">9999999</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>-num.length(); i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        num = sb.toString() + num;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>imageServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.jzheng.servlet.ImageServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>imageServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/image<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实现重定向"><a href="#实现重定向" class="headerlink" title="实现重定向"></a>实现重定向</h3><p>redirect 和 forward 的区别: redirect url 会变, 状态码 302， forward 不会，状态码 200</p>
<p>实验目标：体验一下 redirect 和 jsp</p>
<p>步骤描述：首页新建一个表单，同时新建一个 RequestServlet 作为表单的提交地址。设置表单 action 属性指向这个 servlet。servlet 的末尾添加 redirect 的逻辑指向 success.jsp</p>
<p>新表单</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;%--$&#123;pageContext.request.contextPath&#125; <span class="keyword">for</span> project --%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    name: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    pwd: &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;in to request servlet&quot;</span>);</span><br><span class="line">        String uname = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String pwd = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(uname + <span class="string">&quot;;&quot;</span> + pwd);</span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;/success.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>重定向 jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Success!&lt;/h2&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>别忘了在 web.xml 那边注册新加的 servlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requestServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.jzheng.servlet.RequestServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requestServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p><strong>会话：</strong> 可以简单的理解为从打开浏览器访问页面到关闭浏览器，这一段时间内，浏览器和服务器之间的通信关系</p>
<p><strong>有状态的会话：</strong> 需要通过 session 或者 cookie 记录这个状态。cookie 记录在客户端，session 记录在服务器端</p>
<h3 id="Cookies-实验01"><a href="#Cookies-实验01" class="headerlink" title="Cookies 实验01"></a>Cookies 实验01</h3><p>目的：通过在 response 中设置 cookie 的方式记录客户端访问时间</p>
<p>步骤：新建 servlet，并在处理 request 的时候，在对应的 response 中返回当前时间。如果是第一次访问，则打印：这是第一次访问</p>
<p>实现：</p>
<p>创建 servlet，接收 req 并检查其中的 cookies 如果没有 lastlogin 相关的 cookie 则打印 第一次访问，有则打印上次访问时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieServlet01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// loop cookies and get login cookie if exist</span></span><br><span class="line">        Cookie loginCookie = <span class="keyword">null</span>;</span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cookie.getName().equals(<span class="string">&quot;lastlogin&quot;</span>)) &#123;</span><br><span class="line">                loginCookie = cookie;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if it&#x27;s first time login, print log. else print last login time</span></span><br><span class="line">        <span class="keyword">if</span> (loginCookie == <span class="keyword">null</span>) &#123;</span><br><span class="line">            resp.getWriter().print(<span class="string">&quot;it&#x27;s the first time to login...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String strDateFormat = <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(strDateFormat);</span><br><span class="line">            resp.getWriter().print(<span class="string">&quot;last login time: &quot;</span> + sdf.format(<span class="keyword">new</span> Date(Long.parseLong(loginCookie.getValue()))));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// update login cookie</span></span><br><span class="line">        Cookie updateLoginTime = <span class="keyword">new</span> Cookie(<span class="string">&quot;lastlogin&quot;</span>, System.currentTimeMillis()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        resp.addCookie(updateLoginTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置 web.xml </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>cookie01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.jzheng.CookieServlet01<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>cookie01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/c1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动 tomcat 第一次访问数据展示. 显示第一次登录信息，访问后，servlet 会向 resp 中插入 login cookie 的信息</p>
<p><img src="cookie_c1.png" alt="cookie_c1"></p>
<p>第二次访问数据展示，时间显示为上次访问 servlet 的时间了。</p>
<p><img src="cookie_c2.png" alt="cookie_c2"></p>
<p>观察 Network 中的 response 也能发现一些有趣的信息，他会显示默认的 cookie 有效时间 20mins, 还会显示 resp 中为 cookie 设置了值</p>
<p><img src="cookie_c1_2.png" alt="cookie_c1_2"></p>
<h3 id="Cookies-实验02"><a href="#Cookies-实验02" class="headerlink" title="Cookies 实验02"></a>Cookies 实验02</h3><p>关闭浏览器，再访问这个网址的时候，都会显示第一次登录(IE) 那么怎么为他设置一个有效期限呢，可以通过 maxAge 属性. 设置后可以看到 resp 中多了过期时间的属性，关闭浏览器再登录还是可以看到时间</p>
<p><img src="cookie_c3.png" alt="cookie_c3"></p>
<h3 id="cookie-一些细节"><a href="#cookie-一些细节" class="headerlink" title="cookie 一些细节"></a>cookie 一些细节</h3><ul>
<li>一个 cookie 只能保存一个信息</li>
<li>一个 web 站点可以给浏览器发送多个 cookie, 最多存放 20 个 cookie</li>
<li>cookie 大小有限制 4kb</li>
<li>浏览器的 cookie 上限时 300 个</li>
</ul>
<h3 id="删除-cookie"><a href="#删除-cookie" class="headerlink" title="删除 cookie"></a>删除 cookie</h3><ol>
<li>不设置有效期，删除自动清理</li>
<li>设置有效期为 0, <code>updateLoginTime.setMaxAge(0);</code> 访问 c1 后访问 c2 可以看到控制台中 login 的 cookie 删掉了</li>
</ol>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>servlet 中尝试使用 cookie.getName() == “xxx” 的表示，即使 name 和 xxx 值时一样的还是会判 false, 为什么？</p>
<p>我猜测，可能 name 时通过 new String() 的方式生成的，具体得看底层实现，测试一下</p>
<p>既然 session 时 server 和 client 之间的对话，那多 server 的情况下，这个 session 时怎么维护的？听 yi 的说法，我司貌似时登录的时候寻在对应的 server， 并不是存在公共的地方的</p>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>什么是 Session：</p>
<ul>
<li>服务器会给每个用户(浏览器)创建一个 Session 对象</li>
<li>一个 Session 独占一个浏览器，只要浏览器没关闭，这个 session 就存在</li>
<li>用户登录之后，整个网站都可以访问；保存用户、购物车的信息</li>
</ul>
<p>Session 和 cookie 的区别</p>
<ul>
<li>cookie 把用户数据写到浏览器端保存</li>
<li>session 把数据写到用户独占的 session 中，保存在 server 端(保存重要数据，避免资源浪费)</li>
<li>session 由服务创建</li>
</ul>
<p>使用场景：</p>
<ul>
<li>保存一个登录用户的信息</li>
<li>购物车信息</li>
<li>整个网站中经常使用的数据</li>
</ul>
<p>TODO：画个图</p>
<p>思考：我是不是可以通过拿到用户的 session id 来 hack 进系统？</p>
<p>比 session 还高一层的变量叫 ServletContext, JSP 中交 ApplicationContext</p>
<h3 id="实验-01"><a href="#实验-01" class="headerlink" title="实验 01"></a>实验 01</h3><p>测试 session 的生命周期。session 是当你打开网页的时候就会生成的一个变量。实验中，我们在 servlet 的 req 对象中取得 session 对象，并判断是否存在，并打印 log</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionServlet01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// set encoding</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get session and check</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (session.isNew()) &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session is new: &quot;</span> + session.getId());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session already exist: &quot;</span> + session.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>session01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.jzheng.SessionServlet01<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>session01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/s1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动 tomcat，自动弹出首页，这时 session 已经建立，再访问 s1 显示已经存在。查看 Network reqeust 和 Application 的 cookie 信息可以看到，打印的 session id 和 request/cookie 中的 jsession id 的对应的</p>
<p>PS：如果新启动一个 browser，直接访问 s1 会显示是新 session 的</p>
<p>PPS: 在 web 的实现中，它会将 session id 塞到 cookie 的 jsession 中(貌似没有代码体现)</p>
<h3 id="实验02"><a href="#实验02" class="headerlink" title="实验02"></a>实验02</h3><p>新建一个 servlet 获取上面实验中塞的值，并打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionServlet02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// set encoding</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get session and check</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;session attribute name, value is: &quot;</span> + session.getAttribute(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再配置 web.xml，启动 tomcat，先访问 s1 再访问 s2 可以看到终端答应 name log</p>
<h3 id="实验03"><a href="#实验03" class="headerlink" title="实验03"></a>实验03</h3><p>通过 session 实现对象的存储</p>
<p>新建一个 person 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// constrctor + getter/setter + toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将 SessionServlet01 中设置 name 的语句改为设置对象 <code>session.setAttribute(&quot;name&quot;, new Person(&quot;jack&quot;, 2));</code></p>
<p>启动 tomcat 访问 s1 再访问 s2 终端答应对象信息 <code>session attribute name, value is: Person&#123;name=&#39;jack&#39;, age=2&#125;</code></p>
<h3 id="实验04"><a href="#实验04" class="headerlink" title="实验04"></a>实验04</h3><p>注销 session，可以直接 invalid 的方式注销</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionServlet03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        session.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        session.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>update web.xml 设置到 s3 这个节点。启动 tomcat，访问 s1 然后访问 s3 再访问 s1 发现 session id 变了</p>
<p>除了上面的方式还可以通过配置 web.xml 中的 session-config 达到目的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- n minutes --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动 tomcat 访问 s1 然后等一分钟再刷新，发现 id 改变</p>
<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>JSP 是 Java server pages 的简写，和 servlet 一样，用于动态 web 技术</p>
<p>最大的特点是：写 JSP 就像写 HTML 一样</p>
<p>区别：</p>
<ul>
<li>Html 只给用户提供静态的数据</li>
<li>JSP 页面中可以嵌入 Java 代码，提供动态数据</li>
</ul>
<h2 id="JSP-原理"><a href="#JSP-原理" class="headerlink" title="JSP 原理"></a>JSP 原理</h2><p>思路：JSP 怎么执行的？</p>
<p>新建一个 jsp-investigation project 举例。我当前的实验环境是 Mac + idea 社区版 + smart tomcat，启动项目后可以在 <code>/Users/myname/.SmartTomcat/javaweb/jsp-investigation/work/Catalina/localhost/jsp-investigation/</code> 下看到对应的 jsp 转化之后的 Java 文件。当访问 jsp 文件时才会动态生成。</p>
<p>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问 Servlet，JSP 最终也是转化为 servlet</p>
<p>所以大致流程可以表示为 用户 -&gt; servet -&gt; jsp -&gt; (谁做的转化，tomcat 还是 servlet？)java -&gt; class -&gt; html -&gt; return -&gt; user 这么一个过程</p>
<p>TODO 图解</p>
<p>JSP 页面中， Java代码原封不动的输出，HTML 代码就会转化成 <code>out.write(&quot;xxx&quot;)</code> 的形式输出</p>
<p>下面是自带的 index.jsp 翻译后的 Java 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// comment + package import</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index_jsp 继承自 HttpJspBase, 再查看他的继承关系 HttpJspBase extends HttpServlet implements HttpJspPage，可以看出来，这个 HttpJspBase 本质还是一个 servlet</span></span><br><span class="line"><span class="comment">// 拿到 request + response 处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">index_jsp</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">jasper</span>.<span class="title">runtime</span>.<span class="title">HttpJspBase</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">jasper</span>.<span class="title">runtime</span>.<span class="title">JspSourceDependent</span>,</span></span><br><span class="line"><span class="class">                 <span class="title">org</span>.<span class="title">apache</span>.<span class="title">jasper</span>.<span class="title">runtime</span>.<span class="title">JspSourceImports</span> </span>&#123;</span><br><span class="line"><span class="comment">// 移除一些变量声明方法。。。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三个主体方法，init + destory + service, service 包含主要转化过程</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(<span class="keyword">final</span> javax.servlet.http.HttpServletRequest request, <span class="keyword">final</span> javax.servlet.http.HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> java.io.IOException, javax.servlet.ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// request type 检测</span></span><br><span class="line">    <span class="keyword">if</span> (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) &#123;</span><br><span class="line">      <span class="keyword">final</span> java.lang.String _jspx_method = request.getMethod();</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">&quot;OPTIONS&quot;</span>.equals(_jspx_method)) &#123;</span><br><span class="line">        response.setHeader(<span class="string">&quot;Allow&quot;</span>,<span class="string">&quot;GET, HEAD, POST, OPTIONS&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="string">&quot;GET&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="string">&quot;POST&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="string">&quot;HEAD&quot;</span>.equals(_jspx_method)) &#123;</span><br><span class="line">        response.setHeader(<span class="string">&quot;Allow&quot;</span>,<span class="string">&quot;GET, HEAD, POST, OPTIONS&quot;</span>);</span><br><span class="line">        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, <span class="string">&quot;JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一些内置变量</span></span><br><span class="line">    <span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;</span><br><span class="line">    javax.servlet.http.HttpSession session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// servlet context 命名为 application</span></span><br><span class="line">    <span class="keyword">final</span> javax.servlet.ServletContext application;</span><br><span class="line">    <span class="keyword">final</span> javax.servlet.ServletConfig config;</span><br><span class="line">    javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;</span><br><span class="line">    javax.servlet.jsp.JspWriter _jspx_out = <span class="keyword">null</span>;</span><br><span class="line">    javax.servlet.jsp.PageContext _jspx_page_context = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除一场处理，输出页面内容</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,</span><br><span class="line">            <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">    _jspx_page_context = pageContext;</span><br><span class="line">    application = pageContext.getServletContext();</span><br><span class="line">    config = pageContext.getServletConfig();</span><br><span class="line">    session = pageContext.getSession();</span><br><span class="line">    out = pageContext.getOut();</span><br><span class="line">    _jspx_out = out;</span><br><span class="line"></span><br><span class="line">    out.write(<span class="string">&quot;&lt;html&gt;\n&quot;</span>);</span><br><span class="line">    out.write(<span class="string">&quot;&lt;body&gt;\n&quot;</span>);</span><br><span class="line">    out.write(<span class="string">&quot;&lt;h2&gt;Hello World!&lt;/h2&gt;\n&quot;</span>);</span><br><span class="line">    out.write(<span class="string">&quot;&lt;/body&gt;\n&quot;</span>);</span><br><span class="line">    out.write(<span class="string">&quot;&lt;/html&gt;\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSP-基础语法"><a href="#JSP-基础语法" class="headerlink" title="JSP 基础语法"></a>JSP 基础语法</h2><p>了解即可。新建普通 maven 项目，右键 module -&gt; Add Framework Support -&gt; Web Application。通过这种方式创建的 web 项目，更新的时候，有热更新的效果</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- jsp 表达式 --&gt;</span><br><span class="line">&lt;%= <span class="keyword">new</span> java.util.Date() %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 脚本片段  --&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum+=i;</span><br><span class="line">&#125;</span><br><span class="line">out.println(<span class="string">&quot;result = &quot;</span> + sum);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 片段中间嵌入 html --&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    out.print(<span class="string">&quot;x = &quot;</span> + x);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;p&gt; 这是片段分割 &lt;/p&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line">    out.print(<span class="string">&quot;y = &quot;</span> + y);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- JSP 批量生产网页元素 --&gt;</span><br><span class="line">&lt;% <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123; %&gt;</span><br><span class="line">&lt;h1&gt;Hello &lt;%=i%&gt;&lt;/h1&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- jsp 声明，声明的内容会放在类中，其他的代码段则会生成在 _jspService 方法中 --&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Loading servlet!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> globalVar = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;into method test...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  %&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- HTML COMMENT --&gt; </span><br><span class="line"> &lt;%!-- JSP COMMENT --%&gt;</span><br><span class="line"> jsp 的注释并不会在页面源代码中显示，html 可以</span><br></pre></td></tr></table></figure>

<p>和 index.jsp 同级目录下新建一个页面 jsp2.jsp 并在 body 中写一个错误代码片段 <code>&lt;% int x=1/0; %&gt;</code> 访问 <code>http://localhost:8080/jsp2.jsp</code> 可以看到页面抛出异常</p>
<p>这个处理不是很好，可以在这个页面的头部添加 <code>&lt;%@ page errorPage=&quot;error/500.jsp&quot; %&gt;</code> 指定错误页面</p>
<p>这个页面还可以配置错误的图片，不过本地测试的时候需要重启 idea 才能看到，不然图片是损坏状态</p>
<p>除了上面的配置办法，还可以在 web.xml 中设置这些页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error/500.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>随便访问一个不存在的页面即可得到 404 error page, <code>http://localhost:8080/jsp2asdfasd.jsp</code></p>
<p><strong>include</strong> 标签</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/header.jsp&quot;</span>%&gt;</span><br><span class="line">&lt;h&gt; 我是身体 &lt;/h&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/footer.jsp&quot;</span>%&gt;</span><br></pre></td></tr></table></figure>

<p>也可以使用标签的形式，效果一样</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">&quot;/common/header.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;h&gt; 我是身体 &lt;/h&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;/common/footer.jsp&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>区别：第一种将页面源码包含在 class 文件中，第二种是通过静态方法引入页面</p>
<h2 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h2><ul>
<li>PageContext 存东西</li>
<li>Request 存东西</li>
<li>Response</li>
<li>Session 存东西</li>
<li>Application - ServletContext 存东西</li>
<li>config - ServletConfig</li>
<li>out</li>
<li>page</li>
<li>exception</li>
</ul>
<h3 id="实验01-测试内置对象作用域"><a href="#实验01-测试内置对象作用域" class="headerlink" title="实验01 测试内置对象作用域"></a>实验01 测试内置对象作用域</h3><p>新建一个 jsp 页面再里面通过内置的对象设置值，并通过 pageContext.findAttribute 查找对应的值</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;demo01&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;val1&quot;</span>); <span class="comment">// 一个页面中有效</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;val2&quot;</span>); <span class="comment">// 一次请求中有效</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;name3&quot;</span>, <span class="string">&quot;val3&quot;</span>); <span class="comment">// 一次会话中有效</span></span><br><span class="line">    application.setAttribute(<span class="string">&quot;name4&quot;</span>, <span class="string">&quot;val4&quot;</span>); <span class="comment">// 服务器工作时一直有效</span></span><br><span class="line"></span><br><span class="line">    String n1 = (String)pageContext.findAttribute(<span class="string">&quot;name1&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;取得值为&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;s1: $&#123;name1&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;s1&lt;%=n1%&gt;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name2&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name3&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name4&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name5&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>不得不说，这里视频教学有问题，很大的误导了我，查了半天，还是通过其他看这个视频代码的人的 project 才找到根源。如果你使用 EL 表达式，就不需要使用 pageContext.findAttribute 方法了，拿就行。如果用的是 <code>&lt;%=%&gt;</code> 这种方式才需要使用前面提到的方式拿值。</p>
<p>如果使用 EL 表达式，值为 null 则页面不显示，如果用 <code>&lt;%=%&gt;</code> 值为空则页面显示 null 字样</p>
<h3 id="实验02-1"><a href="#实验02-1" class="headerlink" title="实验02"></a>实验02</h3><p>新建一个 jsp page, get 语句同上，先访问上面的页面再访问这个新页面，只有 session 和 application level 的变量值可以显示</p>
<h3 id="实验03-1"><a href="#实验03-1" class="headerlink" title="实验03"></a>实验03</h3><p>pageContext.setAttribute(key, value, scope) 支持直接设置作用域</p>
<h2 id="JSP-标签"><a href="#JSP-标签" class="headerlink" title="JSP 标签"></a>JSP 标签</h2><p>EL表达式：${}</p>
<ul>
<li>获取数据</li>
<li>执行运算</li>
<li>获取 web 开发的常用对象</li>
</ul>
<h3 id="实验01-EL-标签转发"><a href="#实验01-EL-标签转发" class="headerlink" title="实验01 EL 标签转发"></a>实验01 EL 标签转发</h3><p>新建 jsptag.jsp 通过 jsp:forward + param 将参数转发给 jsptag2.jsp 并再页面上显示</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">&quot;/jsptag2.jsp&quot;</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;jack&quot;</span>/&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;100&quot;</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure>

<p>显示页面代码</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">name: &lt;%=request.getParameter(<span class="string">&quot;name&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">age: &lt;%=request.getParameter(<span class="string">&quot;age&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">name: $&#123;param.get(<span class="string">&quot;name&quot;</span>)&#125;&lt;br&gt;</span><br><span class="line">age: $&#123;param.get(<span class="string">&quot;age&quot;</span>)&#125;&lt;br&gt;</span><br></pre></td></tr></table></figure>

<h3 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h3><p>JSTL 时为了弥补 HTML 标签的不足</p>
<ul>
<li>引入 taglib</li>
<li>使用标签</li>
</ul>
<p>实验时抛异常 <code>org.apache.jasper.JasperException: 无法在web.xml或使用此应用程序部署的jar文件中解析绝对uri：[http://java.sun.com/jsp/jstl/core]</code></p>
<p>需要将 </p>
<ul>
<li>jstl-1.2.jar </li>
<li>standard-1.1.2.jar </li>
<li>jstl-impl-1.2.jar</li>
<li>jstl-api-1.2.jar</li>
</ul>
<p>拷贝到 tomcat 的 lib 文件夹中即可，需要重启 tomcat</p>
<p>介绍了 if, when 和 foreach 语法</p>
<h2 id="java-bean"><a href="#java-bean" class="headerlink" title="java bean"></a>java bean</h2><p>实体类</p>
<p>Java bean 的特定写法</p>
<ul>
<li>必须有无参构造</li>
<li>属性私有化</li>
<li>必须有对应的 get/set 方法</li>
</ul>
<p>一般用来和数据库字段做映射 ORM</p>
<p>ORM：对象关系映射</p>
<ul>
<li>表 - 类</li>
<li>字段 - 属性</li>
<li>行 - 对象</li>
</ul>
<h2 id="MVC三层架构"><a href="#MVC三层架构" class="headerlink" title="MVC三层架构"></a>MVC三层架构</h2><ul>
<li>Controller: 接收请求；交给业务层处理对应的代码；控制视图跳转</li>
<li>View: 展示数据，提供链接发起 servlet 请求</li>
<li>Model: 对应 service + Dao 部分</li>
</ul>
<h2 id="过滤器-Filter"><a href="#过滤器-Filter" class="headerlink" title="过滤器 Filter"></a>过滤器 Filter</h2><p>为某种特殊的需求提供同意的处理方式</p>
<ol>
<li>配置依赖</li>
<li>实现 Filter 接口</li>
<li>再 web.xml 中配置 filter 参数</li>
</ol>
<p>实验描述：新建一个 servlet 类，返回中文内容。新建一个 filter 实现类提供 utf-8 转码。在 web.xml 中为 servlet 配置两个入口，一个入口经过 filter，另一个不经过。得到的结果，经过 filter 的中文能正常显示，没有经过的为乱码</p>
<p>新建 servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Show</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;你好，世界&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置 web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Show<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.jzheng.servlet.Show<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Show<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/show<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Show<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/filter/show<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>两个地址都能访问且给出乱码。添加 filter 实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置 web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jzheng.servlet.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/filter/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重启服务器，访问 /show 还是乱码，访问 /filter/show 中文显示正常</p>
<p>PS: 从 server 的 log 可以看出 filter 在 server 启动时做一次 init, server 停止时做一次销毁</p>
<h2 id="监听器-Listener"><a href="#监听器-Listener" class="headerlink" title="监听器 Listener"></a>监听器 Listener</h2><p>实验描述：新建一个监听器统计在线人数</p>
<ol>
<li>实现监听器接口</li>
<li>注册到 web.xml</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        ServletContext context = httpSessionEvent.getSession().getServletContext();</span><br><span class="line">        Integer onlineCount = (Integer) context.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (onlineCount == <span class="keyword">null</span>) &#123;</span><br><span class="line">            onlineCount = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onlineCount += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        context.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>, onlineCount );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        ServletContext context = httpSessionEvent.getSession().getServletContext();</span><br><span class="line">        Integer onlineCount = (Integer) context.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (onlineCount == <span class="keyword">null</span>) &#123;</span><br><span class="line">            onlineCount = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onlineCount -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        context.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>, onlineCount );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.jzheng.servlet.CountListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>restart 之后显示 3 个人，貌似时因为服务器默认会启动几个 session，redeploy 之后修复了。多个几个不同类型的浏览器，session 数量会上升</p>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>使用过滤器做一个权限拦截。管理员登录后将信息存到 session 中，注销后从 session 中移除，如果没有登录则无法访问成功页面</p>
<p>新建登录界面 jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;login&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt; 登录 &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;/servlet/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>创建 login 对应的 servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (username.equals(<span class="string">&quot;admin&quot;</span>)) &#123;</span><br><span class="line">            req.getSession().setAttribute(Constant.USER_SESSION, req.getSession().getId());</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/sys/success.jsp&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置 web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.jzheng.servlet.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建登录失败页面</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;error&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt; 登录失败 &lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>启动测试，访问 localhost:8080/login.jsp 输入 admin 成功登录，输入其他内容，登录失败跳转到 error.jsp</p>
<p>完善流程，创建 logout 并移除 session 属性的操作. 在 success 页面添加 logout 超链接</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;success&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt; 登录成功 &lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;/servlet/logout&quot;&gt;logout&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>添加 logout 的 servlet 和 web.xml 配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (req.getSession().getAttribute(Constant.USER_SESSION) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                req.getSession().removeAttribute(Constant.USER_SESSION);</span><br><span class="line">                resp.sendRedirect(<span class="string">&quot;/login.jsp&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">            doGet(req, resp);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.jzheng.servlet.LogoutServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/logout<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面使用移除属性，而不是 invalid 达到 session 重用的效果。新建 session 是一个比较重的操作</p>
<p>重启之后，admin 登录，点击 logout 跳会到 login 页面。这里如果我们手动访问 sys/success.jsp 还是可以访问到。我们可以通过添加 filter，判断 USER_SESSION 是否为空作为跳转条件</p>
<p>新建 filter 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse resp = (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (req.getSession().getAttribute(Constant.USER_SESSION) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/login.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(req, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加 web.xml 配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SysFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jzheng.servlet.SysFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SysFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/sys/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动服务器，直接访问 sys/success.jsp 还是显示 login 页面，被阻挡</p>
<h2 id="鸽鸽鸽"><a href="#鸽鸽鸽" class="headerlink" title="鸽鸽鸽"></a>鸽鸽鸽</h2><p>DB 以及后续的项目实践部分，暂时用不到，先鸽了。</p>
<h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>就公司需要 refactor 的代码，我有一段时间还想着，能不能把现在用到的从 session 里面拿数据的地方都换成从 request 里面拿。再仔细想一下，貌似不合适。request 的 scope 应该就只能持续到一次访问才对，设计如下的实验验证</p>
<ol>
<li>新建 request01，对应 entrypoint r1, 在这个 request 中我们分别 request 和 session 中存储一个变量。</li>
<li>新建 request02，对应 entrypoint r2，在这个 request 中分别取之前 set 的变量，预期 之前 request 中 set 的变量访问不到，session 中可以</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetVarServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setAttribute(<span class="string">&quot;reqVar&quot;</span>, <span class="string">&quot;reqVal&quot;</span>);</span><br><span class="line">        req.getSession().setAttribute(<span class="string">&quot;sessionVar&quot;</span>, <span class="string">&quot;sessionVal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetVarServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;req val: &quot;</span> + req.getAttribute(<span class="string">&quot;reqVar&quot;</span>)</span><br><span class="line">                + <span class="string">&quot;; session val: &quot;</span> + req.getSession().getAttribute(<span class="string">&quot;sessionVar&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>setVar<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.jzheng.servlet.SetVarServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>setVar<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/r1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getVar<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.jzheng.servlet.GetVarServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getVar<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/r2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动 tomcat 后先访问 r1 设置变量，在访问 r2 取得变量，可以看到页面显示如下 <code>req val: null; session val: sessionVal</code> 可以看到，request 中的变量没有拿到，而 session 中可以看到。</p>
<p>session 是保存的从浏览器与服务器建立链接到浏览器关闭的这段时间内的信息，对这个概念感觉理解更充分了一点。</p>
<p>相对于公司的重构项目，这部分应该对应着用户登录到退出之间的操作，登录之后可以进行多个 request 的交互，所以直接变成 request scope 可定是不可行的。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jsp</tag>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis 快速上路笔记</title>
    <url>/hexo/2020/09/16/Mybatis-Quick-Start/</url>
    <content><![CDATA[<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
<p>解释成白话：这是一个操作数据库的框架，就是把操作简化了，你之前用 JDBC 时的那些配置什么还是少不了只不过用起来更好使罢了。比如使用数据库你得配联接吧，得配驱动把，得写 SQL 把，mybatis 也需要你做这个，只不过人家帮你把这些事情总结出了一个套路，你用这个套路就可以少很多冗余代码，但是也增加了你自己学习这个框架的成本，少了自由度。当然就大部分人的编程水平，肯定是收益大于损失的 ╮(￣▽￣””)╭</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1NE411Q7Nx">视频教程</a></li>
<li><a href="https://github.com/jack-zheng/mybatis-note">练习项目地址</a></li>
<li>练习版本：mybatis 3.5.5</li>
</ul>
<h2 id="原型-JDBC-操作数据库"><a href="#原型-JDBC-操作数据库" class="headerlink" title="原型 JDBC 操作数据库"></a>原型 JDBC 操作数据库</h2><ol>
<li>导入 mysql 包</li>
<li>编写实体类</li>
<li>编写驱动类</li>
<li>编写 Dao 类</li>
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">&quot;12345678&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection conn = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//1.加载驱动程序</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获得数据库的连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DriverManager.getConnection(URL, NAME, PASSWORD);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//3.通过数据库的连接操作数据库，实现增删改查</span></span><br><span class="line">        Statement stmt = conn.createStatement();</span><br><span class="line">        ResultSet rs = stmt.executeQuery(<span class="string">&quot;select id, name, pwd from user&quot;</span>);<span class="comment">//选择import java.sql.ResultSet;</span></span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;<span class="comment">//如果对象中有数据，就会循环打印出来</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Result: [&quot;</span> + rs.getInt(<span class="string">&quot;id&quot;</span>) + <span class="string">&quot;, &quot;</span> + rs.getString(<span class="string">&quot;name&quot;</span>) + <span class="string">&quot;, &quot;</span> + rs.getString(<span class="string">&quot;pwd&quot;</span>) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Connection connection = DBUtils.getConnection();</span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        ResultSet rs = statement.executeQuery(<span class="string">&quot;select id, name, pwd from user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            User tmp = <span class="keyword">new</span> User();</span><br><span class="line">            tmp.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            tmp.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            tmp.setPwd(rs.getString(<span class="string">&quot;pwd&quot;</span>));</span><br><span class="line">            users.add(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        UserDao dao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        List&lt;User&gt; users = dao.getUsers();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mybatis 为我们做的只不过是把上面的这些步骤简化了，通过配置文件管理连接信息，通过 factory， SqlSession 等来管理 SQL 执行等。按照这样的思路去理解记忆应该会更加有效率。</p>
<h2 id="搭建环境-mybatis-01-setup"><a href="#搭建环境-mybatis-01-setup" class="headerlink" title="搭建环境 mybatis-01-setup"></a>搭建环境 mybatis-01-setup</h2><p>对照官方文档的入门篇</p>
<p>创建测试表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建测试数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mybatis;</span><br><span class="line"><span class="keyword">USE</span> mybatis;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建测试表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">pwd <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (<span class="keyword">id</span>, <span class="keyword">name</span>, pwd) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;123&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;jack02&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="最简项目树"><a href="#最简项目树" class="headerlink" title="最简项目树"></a>最简项目树</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── java</span><br><span class="line">│   └── com</span><br><span class="line">│       └── jzheng</span><br><span class="line">│           ├── dao</span><br><span class="line">│           │   ├── UserMapper.java</span><br><span class="line">│           │   └── UserMapper.xml</span><br><span class="line">│           └── pojo</span><br><span class="line">│               └── User.java</span><br><span class="line">└── resources</span><br><span class="line">    └── mybatis-config.xml</span><br></pre></td></tr></table></figure>

<h3 id="新建测试项目"><a href="#新建测试项目" class="headerlink" title="新建测试项目"></a>新建测试项目</h3><ol>
<li>新建 maven 项目</li>
<li>删除 src 目录，通过 module 的方式管理，条理更清楚</li>
<li>配置依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jzheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-note<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mybatis-01-setup<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- java 8 compiler 配置，和下面的 build plugin 配合使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mybatis 基础包，包括 DB 驱动，连接，测试的 jar 包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在 build 的时候将工程中的配置文件也一并 copy 到编译文件中，即 target 文件夹下 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置 idea 链接本地 mysql 报错 <code>Server returns invalid timezone. Go to &#39;Advanced&#39; tab and set &#39;serverTimezone&#39; property manually.</code></p>
<p>时区错误，MySQL默认的时区是UTC时区，比北京时间晚8个小时。在mysql的命令模式下，输入 <code>set global time_zone=&#39;+8:00&#39;;</code> 即可</p>
<p>连接后点击扳手图标可以拿到 url 信息</p>
<p>mybatis 核心配置文件，这个文件中配置 DB 连接，驱动等信息，算是 mybatis 的入口配置文件了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTime=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/jzheng/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成实体类 pojo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 省略构造函数和 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义 Dao 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// CURD user</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// First sample</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置 Mapper xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.jzheng.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.jzheng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">        delete from mybatis.user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.jzheng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update mybatis.user set name=#&#123;name&#125;, pwd=#&#123;pwd&#125; where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.jzheng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询所有用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.jzheng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_official_sample</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.getUsers();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_util</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        List&lt;User&gt; users = sqlSession.getMapper(UserMapper.class).getUsers();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">5</span>, <span class="string">&quot;t0928&quot;</span>, <span class="string">&quot;pwd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ret = sqlSession.getMapper(UserMapper.class).addUser(user);</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ret = sqlSession.getMapper(UserMapper.class).deleteUser(<span class="number">5</span>);</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;change&quot;</span>, <span class="string">&quot;pwdchange&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> ret = sqlSession.getMapper(UserMapper.class).updateUser(user);</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_getUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        User ret = sqlSession.getMapper(UserMapper.class).getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常见错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Type interface com.jzheng.dao.UserDao is not known to the MapperRegistry.</span><br><span class="line"></span><br><span class="line">-- 核心配置文件没有配置 mapper 路径</span><br><span class="line"></span><br><span class="line">Caused by: java.io.IOException: Could not find resource com/jzheng/dao/UserMapper.xml</span><br><span class="line">    at org.apache.ibatis.io.Resources.getResourceAsStream(Resources.java:114)</span><br><span class="line">    at org.apache.ibatis.io.Resources.getResourceAsStream(Resources.java:100)</span><br><span class="line">    at org.apache.ibatis.builder.xml.XMLConfigBuilder.mapperElement(XMLConfigBuilder.java:372)</span><br><span class="line">    at org.apache.ibatis.builder.xml.XMLConfigBuilder.parseConfiguration(XMLConfigBuilder.java:119)</span><br><span class="line">    ... 27 more</span><br><span class="line"></span><br><span class="line">-- maven 约定大于配置，默认指挥将 resources 下面的 xml 导出到 target, 如果需要将 java 下的配置文件到处需要再 pom.xml 下的 build tag 里加点配置</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">            &lt;/includes&gt;</span><br><span class="line">        &lt;/resource&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">            &lt;/includes&gt;</span><br><span class="line">            &lt;filtering&gt;<span class="literal">true</span>&lt;/filtering&gt;</span><br><span class="line">        &lt;/resource&gt;</span><br><span class="line">    &lt;/resources&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line">java.security.cert.CertPathValidatorException: Path does not chain with any of the trust anchors</span><br><span class="line"></span><br><span class="line">-- 链接配置问题，可以把 useSSL 改为 <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>[Attention]:</strong></p>
<ol>
<li>当进行增删改操作时需调用 commit 方法将修改提交才能生效</li>
<li>namespace 中的包名要和 Dao/mapper 保持一致</li>
</ol>
<h3 id="万能-map"><a href="#万能-map" class="headerlink" title="万能 map"></a>万能 map</h3><p>如果实体类的属性过多，可以考虑使用 map 传递参数, 这是一种可定制性很高的用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Mapper interface</span></span><br><span class="line"><span class="function">User <span class="title">getUserByMap</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过 map 查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.jzheng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_getUserByMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    User ret = sqlSession.getMapper(UserMapper.class).getUserByMap(map);</span><br><span class="line">    System.out.println(ret);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分页功能-limit"><a href="#分页功能-limit" class="headerlink" title="分页功能 limit"></a>分页功能 limit</h3><p>通过 map 来实现分页功能</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">limit</span> startIndex, <span class="keyword">size</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Limit query</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsersWithLimit</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsersWithLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.jzheng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user limit #&#123;startIndex&#125;, #&#123;pageSize&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="常用变量的作用域"><a href="#常用变量的作用域" class="headerlink" title="常用变量的作用域"></a>常用变量的作用域</h3><p><strong>SqlSessionFactoryBuilder:</strong> 一用完就可以丢了，局部变量</p>
<p><strong>SqlSessionFactory:</strong> 应用起了就要应该存在，所以应用作用域(Application)最合适。而且只需要一份，使用单列或者静态单列模式</p>
<p><strong>SqlSession:</strong> 线程不安全，不能共享。最佳作用域是请求或方法层。响应结束后，一定要关闭，所以最佳时间是把它放到 finally 代码块中，或者用自动关闭资源的 try block。</p>
<h3 id="疑问记录"><a href="#疑问记录" class="headerlink" title="疑问记录"></a>疑问记录</h3><ol>
<li>项目中我即使把 pojo 的构造函数和 getter/setter 都注视掉了，值还是被塞进去了，和 spring 不一样，他是怎么实现的？</li>
<li>核心配置文件中的 mapper setting，resource tag 不支持匹配符？类似 <code>com/jzheng/mapper/*.xml</code> 并不能生效</li>
<li>mapper.xml 中 resultType 怎么简写，每次都全路径很费事</li>
<li>mybatis 中是不支持方法重载的</li>
</ol>
<h3 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h3><ol>
<li>mybatis 会通过 DefaultResultSetHandler 处理结果集，applyAutomaticMappings 就是进行映射的地方，这个方法下面会通过反射对 field 进行赋值，并没有调用 set 方法，别和 spring 搞混了。</li>
<li>TBD</li>
<li>参见 配置 -&gt; typeAlias</li>
</ol>
<h2 id="Lombok-偷懒神器"><a href="#Lombok-偷懒神器" class="headerlink" title="Lombok 偷懒神器"></a>Lombok 偷懒神器</h2><p>Lombok 可以省去你很多冗余代码，在测试项目的时候很好用。是否使用看个人，但是就个人小项目来说我还是很愿意使用的。</p>
<ol>
<li>Idea 安装 lombok 插件</li>
<li>安装依赖的 jar 包</li>
<li>在 pojo 类中添加注解使用</li>
</ol>
<p>调试技巧：在 pojo 上添加注解后，你可以在 idea 的 Structure tab 里看到新生产的方法</p>
<h2 id="配置解析-mybatis-02-configuration"><a href="#配置解析-mybatis-02-configuration" class="headerlink" title="配置解析 mybatis-02-configuration"></a>配置解析 mybatis-02-configuration</h2><p>对应 配置 章节</p>
<p>核心配置文件：mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure>

<h3 id="environments-环境变量"><a href="#environments-环境变量" class="headerlink" title="environments 环境变量"></a>environments 环境变量</h3><p>尽管可以配置多个环境，但每个 SqlSessionFactory 实例<strong>只能选择一种</strong>环境。如果想连接两个数据库就需要创建两个 SqlSessionFactory 实例。</p>
<p><strong>事务管理器(transactionManager)</strong>有 JDBC 和 MANAGED 两种，默认使用 JDBC，另一种几乎很少用，权作了解。</p>
<p><strong>数据源(dataSource)</strong>用来配置数据库连接对象的资源，有 [UNPOOLED|POOLED|JNDI] 三种。JNDI 是为了支持 EJB 应用，现在应该已经过时了。</p>
<p>DB Pool 的常见实现方式：jdbc，c3p0, dbcp</p>
<h3 id="properties-属性"><a href="#properties-属性" class="headerlink" title="properties 属性"></a>properties 属性</h3><p>引用配置文件，可以和 <code>.properties</code> 文件交互</p>
<p>文件目录如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">resources</span><br><span class="line">├── db.properties</span><br><span class="line">└── mybatis-config.xml</span><br></pre></td></tr></table></figure>

<p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTime=UTC</span></span><br></pre></td></tr></table></figure>

<p>mybatis-config 配置如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- priority rank: parameter &gt; properties file &gt; property tab --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tmp_url&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;uname&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12345678&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/jzheng/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>xml 中的 properties tag + resource 属性可以将配置文件加载进来。另外还有一种属性配置方式是直接在构建 session factory 或者 factory builder 的时候通过参数的形式传入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sqlSessionFactoryBuilder.build(reader, props);</span><br><span class="line"><span class="comment">// ... or ...</span></span><br><span class="line"><span class="keyword">new</span> SqlSessionFactoryBuilder.build(reader, environment, props);</span><br></pre></td></tr></table></figure>

<p>三种属性添加方式优先级：parameter &gt; properties 文件 &gt; property 标签</p>
<h3 id="typeAlias-类型别名"><a href="#typeAlias-类型别名" class="headerlink" title="typeAlias 类型别名"></a>typeAlias 类型别名</h3><p>设置短的名字，减少类完全限定名的冗余</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.jzheng.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.jzheng.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以在实体类上添加 Alias 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>三种添加别名的方式 typeAliases+typeAlias, typeAliases+package 和 类名+@Alias。想要使用缩写必须在配置文件中加上 typeAliases 的 tag 直接在类上使用注解是不会生效的。</p>
<p>typeAliases 使用时，是忽略大小写的，官方提倡使用首字母小写的命名方式。一旦类傻上加了注解，则<strong>严格</strong>匹配类注解</p>
<h3 id="setting-设置"><a href="#setting-设置" class="headerlink" title="setting 设置"></a>setting 设置</h3><p>比较常用的设置为：</p>
<ul>
<li>cacheEnabled：开启缓存配置</li>
<li>logImpl：开启日志配置</li>
</ul>
<h3 id="mapper-映射器"><a href="#mapper-映射器" class="headerlink" title="mapper 映射器"></a>mapper 映射器</h3><p>映射器用来告诉 mybatis 到哪里去找到映射文件</p>
<p>方式一：资源文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/jzheng/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式二：使用 class 绑定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.jzheng.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>限制：</p>
<ol>
<li>接口和 mapper 必须重名</li>
<li>接口和 mapper 必须要同意路径下</li>
</ol>
<p>方式三：包扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.jzheng.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>缺陷也是要在同一路径下</p>
<img src="/hexo/2020/09/16/Mybatis-Quick-Start/SessionFactory_Session.PNG" class="" title="Factory_Session 关系图">

<p>每个 Mapper 代表一个具体的业务，比如 UserMapper。</p>
<h3 id="解决属性名和字段名字不一样的问题"><a href="#解决属性名和字段名字不一样的问题" class="headerlink" title="解决属性名和字段名字不一样的问题"></a>解决属性名和字段名字不一样的问题</h3><p>将 User 的 pwd 改为 password, 和 DB 产生歧义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决方案01, 在 Sql 中使用 as 关键字重新指定 column name 为 property name(pwd as password)。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select id, name, pwd as password from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解决方案02, 使用 resultMap 映射结果集</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column: db 字段， property: 实体类属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ResultMap 的设计思想是，对于简单的语句根本不需要配置显示的结果集映射，对于复杂的语句只需要描述他们的关系就行了。</p>
<p>上面的方案还可以将 id, name 的描述简化掉，框架会帮你处理，只保留不一致的即可</p>
<h3 id="疑问记录-1"><a href="#疑问记录-1" class="headerlink" title="疑问记录"></a>疑问记录</h3><ol>
<li>在测试属性和数据库名字不一样的案例的时候发现，就算不一样，但是如果有构造函数的话，还是会被赋值，但是顺序会被强制指定，如果我构造为 User(id,password) 则 User 的 name 会被赋值成 pwd, 应该和底层实现有关系</li>
</ol>
<h2 id="日志-mybatis-03-logging"><a href="#日志-mybatis-03-logging" class="headerlink" title="日志 mybatis-03-logging"></a>日志 mybatis-03-logging</h2><p>支持的 log framework 类型</p>
<ul>
<li>SLF4J [Y]</li>
<li>LOG4J </li>
<li>LOG4J2 [Y]</li>
<li>JDK_LOGGING</li>
<li>COMMONS_LOGGING</li>
<li>STDOUT_LOGGING [Y]</li>
<li>NO_LOGGING</li>
</ul>
<p>STDOUT_LOGGING 是自带的 log 包，直接 enable 就能使用，使能后可以在 log 中看到运行的 SQL。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 477376212.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@1c742ed4]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id = ?; </span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, jack, 123</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">User&#123;id=1, name=&#x27;jack&#x27;, password=&#x27;123&#x27;&#125;</span><br><span class="line">Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@1c742ed4]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@1c742ed4]</span><br><span class="line">Returned connection 477376212 to pool.</span><br></pre></td></tr></table></figure>

<h3 id="开启-log4j-支持"><a href="#开启-log4j-支持" class="headerlink" title="开启 log4j 支持"></a>开启 log4j 支持</h3><p>log4j 是一个比较常用的日志框架，有很多功能，比如定制格式，指定存到文件等</p>
<ol>
<li>导包</li>
<li>添加 log4j.properties</li>
<li>添加配置到核心配置文件</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局日志配置</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/mybatis-03-logging.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>

<p>使能配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="基于注解开发"><a href="#基于注解开发" class="headerlink" title="基于注解开发"></a>基于注解开发</h2><p>基于注解开发，在应对简单的需求时还是很高效的，但是不能处理复杂的 SQL。</p>
<p>面向接口编程：</p>
<ul>
<li>接口定义和实现分离</li>
<li>反映出设计人员对系统的抽象理解</li>
</ul>
<p>接口有两类：一类是对一个个体的抽象，可以对应为一个抽象个体，另一类是对一个个体的某一方面抽象，即形成一个抽象面</p>
<p>个体可能有多个抽象面，抽象提与抽象面是有区别的</p>
<ol>
<li>在接口方法上添加注解</li>
<li>在核心配置文件中添加配置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.jzheng.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PS: 注解和 xml 中对同一个接口只能有一种实现，如果重复实现，会抛异常</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Caused by: java.lang.IllegalArgumentException: Mapped Statements collection already contains value <span class="keyword">for</span> com.jzheng.mapper.UserMapper.getUserById. please check com/jzheng/mapper/UserMapper.xml and com/jzheng/mapper/UserMapper.java (best guess)</span><br></pre></td></tr></table></figure>

<p>注解模式的实现<strong>机制</strong>：反射 + 动态代理</p>
<p>注解和配置文件是可以共存的，只要命名相同，并且实现方法没有冲突就行。</p>
<h3 id="注解版-CRUD"><a href="#注解版-CRUD" class="headerlink" title="注解版 CRUD"></a>注解版 CRUD</h3><p>工具类自动提交事务可以通过 Utils 类中，指定参数实现。注解版的 CRUD 基本上和 xml 版本的一样，只不过在注解版中，他的参数类型通过 @Param 指定。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法存在多个参数，所有参数前面必须加上 @Param</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当参数是对象时，直接传入即可，保证属性名一致</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user (id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set name=#&#123;name&#125;, pwd=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于 @Param 注解</p>
<ul>
<li>基本类型 + String 类型需要加</li>
<li>引用类型不需要</li>
<li>如果只有一个基本类型，可以不加，但还是建议加上</li>
<li>Sql 中引用的属性名和 Param 中的名字保持一致</li>
</ul>
<p>‘#’ 前缀可以防注入，’$’ 不行</p>
<h2 id="Mybatis-执行流程解析"><a href="#Mybatis-执行流程解析" class="headerlink" title="Mybatis 执行流程解析"></a>Mybatis 执行流程解析</h2><ol>
<li>Resources 获取加载全局配置文件</li>
<li>实例化 SqlSessionFactoryBuilder 构造器</li>
<li>解析配置文件流 XMLConfigBulder</li>
<li>Configuration 所有的配置信息</li>
<li>SqlSessionFactory 实例化</li>
<li>Transaction 事务管理器</li>
<li>创建 executor 执行器</li>
<li>创建 SQLSession</li>
<li>实现 CRUD</li>
<li>查看是否成功</li>
</ol>
<h2 id="高级结果映射"><a href="#高级结果映射" class="headerlink" title="高级结果映射"></a>高级结果映射</h2><p>多对一 - 关联 - association</p>
<p>一对多 - 集合 - collection</p>
<p>创建测试表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`teacher`</span> (</span><br><span class="line">                           <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">                           <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">                           PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(<span class="string">`id`</span>, <span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;秦老师&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">                           <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">                           <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">                           <span class="string">`tid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">                           PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">                           <span class="keyword">KEY</span> <span class="string">`fktid`</span> (<span class="string">`tid`</span>),</span><br><span class="line">                           <span class="keyword">CONSTRAINT</span> <span class="string">`fktid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`tid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`teacher`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;小张&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;小李&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;小王&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>测试环境搭建</p>
<ol>
<li>新建表，准备测试数据</li>
<li>新建 teacher/student 实体类</li>
<li>创建 mapper 接口</li>
<li>创建 mapper xml 文件</li>
<li>核心配置类注册接口或 xml</li>
<li>测试查询</li>
</ol>
<h3 id="多对一-mybatis-05-resultmap"><a href="#多对一-mybatis-05-resultmap" class="headerlink" title="多对一 mybatis-05-resultmap"></a>多对一 mybatis-05-resultmap</h3><p>在这里采用多个学生对应一个老师的情况作为案例，为了更好的面向对象 Student pojo 需要做一些修改，我们把 teach id 用对象来代替</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们想要实现的效果其实就是子查询 <code>SELECT st.id, st.name, te.name as tname from student st, teacher te where st.tid = te.id;</code></p>
<p>关键点：使用 <strong>association</strong> tag 作为连接键</p>
<h4 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h4><ol>
<li>直接写查询所有学生信息的语句，结果集自定义</li>
<li>根据自定义的结果集，将 teacher 对象和 tid 绑定</li>
<li>定义根据 tid 查询 teacher 的语句</li>
<li>Mybatis 会自动将查询到的 teacher 对象整合到学生的查询结果中</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    select * from student;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- obj use association, collection use collection --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h4><p>这种方法的查询更加直接，和上面给出的 SQL 基本一致，就是 association 部分的匹配看着有点懵，大概是 mybatis 底层都会根据 column name 做匹配的，但是这里查询的时候 teacher 的 name 字段重命名为 tname 了所以要显示的重新匹配一下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname from student s, teacher t</span><br><span class="line">    where s.tid = tid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应 SQL 的子查询和联表查询</p>
<h3 id="一对多-mybatis-05-resultmap02"><a href="#一对多-mybatis-05-resultmap02" class="headerlink" title="一对多  mybatis-05-resultmap02"></a>一对多  mybatis-05-resultmap02</h3><p>一个老师对应多个学生为案例, 代码和思路和上面的多对一其实没什么区别，就是关键字变了一下。。。</p>
<p>关键字：<strong>collection</strong> tag</p>
<p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按照结果嵌套处理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname, t.id tid from student s, teacher t</span><br><span class="line">    where s.tid = t.id and t.id=#&#123;tid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>按照查询嵌套处理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeachers&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.teacher;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudents&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.student where tid=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ul>
<li>关联 - 一对多 - associate</li>
<li>集合 - 多对一 - collection</li>
<li>javaType &amp; ofType<ul>
<li>javaType 指定实体类中的属性</li>
<li>ofType 指定映射到集合中的 pojo 类型，泛型中的约束类型</li>
</ul>
</li>
</ul>
<p>注意点：</p>
<ul>
<li>保证SQL可读性，尽量通俗易懂</li>
<li>注意一对多和多对一属性名和字段的问题</li>
<li>排错时善用 log</li>
</ul>
<p>面试高频</p>
<ul>
<li>Mysql 引擎</li>
<li>InnoDB 底层原理</li>
<li>索引</li>
<li>索引优化</li>
</ul>
<h2 id="动态-SQL-mybatis-06-dynamic-sql"><a href="#动态-SQL-mybatis-06-dynamic-sql" class="headerlink" title="动态 SQL mybatis-06-dynamic-sql"></a>动态 SQL mybatis-06-dynamic-sql</h2><p>根据不同的条件生成不同的 SQL 语句</p>
<ul>
<li>if</li>
<li>choose (when, otherwise)</li>
<li>trim (where, set)</li>
<li>foreach</li>
</ul>
<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`blog`</span>(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line"><span class="string">`title`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line"><span class="string">`author`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line"><span class="string">`create_time`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line"><span class="string">`views`</span> <span class="built_in">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>

<ol>
<li>导包</li>
<li>编写配置</li>
<li>编写实体类</li>
<li>编写 mapper + 测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        and title=#&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author=#&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="choose-when-otherwise-这种判断语句更贴近-java-中的-switch-case，在-if-中，所有符合-test-判断的条件都会被添加进去，但是在-choose-中，他只会从众多条件中选择一种"><a href="#choose-when-otherwise-这种判断语句更贴近-java-中的-switch-case，在-if-中，所有符合-test-判断的条件都会被添加进去，但是在-choose-中，他只会从众多条件中选择一种" class="headerlink" title="choose (when, otherwise), 这种判断语句更贴近 java 中的 switch-case，在 if 中，所有符合 test 判断的条件都会被添加进去，但是在 choose 中，他只会从众多条件中选择一种"></a>choose (when, otherwise), 这种判断语句更贴近 java 中的 switch-case，在 if 中，所有符合 test 判断的条件都会被添加进去，但是在 choose 中，他只会从众多条件中选择一种</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>trim (where, set), where 可以对 xml 中定义的 and + where 冗余情况进行判断，只在需要的时候才添加这个关键字，同理 set 会处理 set + ，的情况</p>
<p>PS: 添加 set 标签的时候 <code>,</code> 是一定要加的，多余的 <code>,</code> 框架会帮你去掉，少了可不行。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            and title=#&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            and author=#&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        update  mybatis.blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                title=#&#123;title&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">                author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="foreach-可以用来处理类似-SELECT-from-blog-where-id-in-quot-1-quot-quot-2-quot-quot-3-quot-的-SQL"><a href="#foreach-可以用来处理类似-SELECT-from-blog-where-id-in-quot-1-quot-quot-2-quot-quot-3-quot-的-SQL" class="headerlink" title="foreach 可以用来处理类似 SELECT * from blog where id in (&quot;1&quot;, &quot;2&quot;, &quot;3&quot;); 的 SQL"></a>foreach 可以用来处理类似 <code>SELECT * from blog where id in (&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);</code> 的 SQL</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogs&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所谓的动态 SQL，本质还是 SQL 语句，只是我们可以在 SQL 层面去执行一个逻辑代码</p>
<h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><ol>
<li>将公共部分抽取出来</li>
<li>通过 include 标签引用</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        and title=#&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author=#&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>最好基于单表来定义 SQL 片段</li>
<li>不要存在 where 标签</li>
</ul>
<h2 id="Cache-缓存-mybatis-07-cache"><a href="#Cache-缓存-mybatis-07-cache" class="headerlink" title="Cache 缓存 - mybatis-07-cache"></a>Cache 缓存 - mybatis-07-cache</h2><p>在 DB 操作中连接数据库是非常消耗资源的，所以有了缓存机制来减少重复的查询操作消耗</p>
<p>缓存：一次查询的结果，给他暂存在内存中，再次查询的时候直接走取结果</p>
<h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>一级缓存默认开启，且不能关闭，只在一次 SqlSession 中有用</p>
<ol>
<li>开启日志</li>
<li>测试一次 session 中查询两次相同结果</li>
<li>查看日志输出</li>
</ol>
<p>缓存失效的几种情况：</p>
<ol>
<li>查询不同的东西</li>
<li>增删改可能会改变原来的数据，所以必定要刷新缓存</li>
<li>查询不同的 mapper.xml</li>
<li>手动清理缓存</li>
</ol>
<h4 id="测试-p1"><a href="#测试-p1" class="headerlink" title="测试 p1"></a>测试 p1</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSqlSession();</span><br><span class="line">    System.out.println(<span class="string">&quot;-----&gt; query user1 the first time &lt;-----&quot;</span>);</span><br><span class="line">    session.getMapper(UserMapper.class).getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;-----&gt; query user1 the second time &lt;-----&quot;</span>);</span><br><span class="line">    session.getMapper(UserMapper.class).getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;-----&gt; query user2 the second time &lt;-----&quot;</span>);</span><br><span class="line">    session.getMapper(UserMapper.class).getUserById(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出 log</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">-----&gt; query user1 the first time &lt;-----</span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 1866875501.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@6f46426d]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id=?; </span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, jack, 123</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">-----&gt; query user1 the second time &lt;-----</span><br><span class="line">-----&gt; query user2 the second time &lt;-----</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id=?; </span><br><span class="line">==&gt; Parameters: 2(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 2, change, pwdchange</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@6f46426d]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@6f46426d]</span><br><span class="line">Returned connection 1866875501 to pool.</span><br></pre></td></tr></table></figure>

<p>user1 在第一次 query 的时候有访问 DB，第二次则直接从内存拿，在同一个 session 中访问 user2 也会从 DB 拿</p>
<h4 id="测试-p4"><a href="#测试-p4" class="headerlink" title="测试 p4"></a>测试 p4</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSqlSession();</span><br><span class="line">    System.out.println(<span class="string">&quot;-----&gt; query user1 the first time &lt;-----&quot;</span>);</span><br><span class="line">    session.getMapper(UserMapper.class).getUserById(<span class="number">1</span>);</span><br><span class="line">    session.clearCache(); <span class="comment">// 手动清 cache !!!</span></span><br><span class="line">    System.out.println(<span class="string">&quot;-----&gt; query user1 the second time &lt;-----&quot;</span>);</span><br><span class="line">    session.getMapper(UserMapper.class).getUserById(<span class="number">1</span>);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出 log</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">-----&gt; query user1 the first time &lt;-----</span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 1936722816.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@73700b80]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id=?; </span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, jack, 123</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">-----&gt; query user1 the second time &lt;-----</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id=?; </span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, jack, 123</span><br><span class="line">&lt;==      Total: 1</span><br></pre></td></tr></table></figure>
<p>添加了清理 cache 的语句后，第二次访问同一个 user 也会从 DB 拿</p>
<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ol>
<li>开启全局缓存 cacheEnabled -&gt; true</li>
<li>在 mapper.xml 中加入 <cache/> 标签</li>
</ol>
<p>为了支持 <cache/> 标签需要 pojo 类实现序列化接口不然会报错 <code>Cause: java.io.NotSerializableException: com.jzheng.pojo.User</code></p>
<ul>
<li>一级缓存作用域太低了，所以诞生了二级缓存</li>
<li>基于 namespace 级别的缓存，一个命名空间对应一个二级缓存</li>
<li>工作机制<ul>
<li>一个会话查询一条数据，数据被存放在一级缓存中</li>
<li>当前会话关闭，对应的一级缓存就没了，一级缓存中的数据会被保存到二级缓存中</li>
<li>新会话查询信息，会从二级缓存中获取内容</li>
<li>不同 mapper 查出的数据会放在自己对应的缓存中</li>
</ul>
</li>
</ul>
<h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUsers_diff_session</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session1 = MybatisUtils.getSqlSession();</span><br><span class="line">    System.out.println(<span class="string">&quot;-----&gt; query user1 the first time &lt;-----&quot;</span>);</span><br><span class="line">    session1.getMapper(UserMapper.class).getUserById(<span class="number">1</span>);</span><br><span class="line">    session1.close();</span><br><span class="line"></span><br><span class="line">    SqlSession session2 = MybatisUtils.getSqlSession();</span><br><span class="line">    System.out.println(<span class="string">&quot;-----&gt; query user1 the second time &lt;-----&quot;</span>);</span><br><span class="line">    session2.getMapper(UserMapper.class).getUserById(<span class="number">1</span>);</span><br><span class="line">    session2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 mapper 中没有添加 <cache/> 标签时，输出如下，两个 session 查询同一个 user 的时候都进行了 DB 访问</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">-----&gt; query user1 the first time &lt;-----</span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 1936722816.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@73700b80]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id=?; </span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, jack, 123</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@73700b80]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@73700b80]</span><br><span class="line">Returned connection 1936722816 to pool.</span><br><span class="line">-----&gt; query user1 the second time &lt;-----</span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Checked out connection 1936722816 from pool.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@73700b80]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id=?; </span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, jack, 123</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@73700b80]</span><br></pre></td></tr></table></figure>

<p>当 mapper 中添加 <cache/> 标签时，输出如下，第二次查询 user 时是从 cache 中查找的</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">-----&gt; query user1 the first time &lt;-----</span><br><span class="line">Cache Hit Ratio [com.jzheng.mapper.UserMapper]: 0.0</span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 379645464.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@16a0ee18]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id=?; </span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, jack, 123</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@16a0ee18]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@16a0ee18]</span><br><span class="line">Returned connection 379645464 to pool.</span><br><span class="line">-----&gt; query user1 the second time &lt;-----</span><br><span class="line">Cache Hit Ratio [com.jzheng.mapper.UserMapper]: 0.5</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ul>
<li>只要开启二级缓存，在同一个 Mapper 下就有效</li>
<li>所有的数据都会先放在一级缓存中</li>
<li>只有当会话提交或者关闭，才会提交到二级缓存中</li>
</ul>
<h2 id="缓存原理"><a href="#缓存原理" class="headerlink" title="缓存原理"></a>缓存原理</h2><ol>
<li>先看二级缓存中有没有</li>
<li>再看一级缓存中有没有</li>
<li>最后才查DB</li>
</ol>
<h2 id="自定义缓存-ehcache"><a href="#自定义缓存-ehcache" class="headerlink" title="自定义缓存 ehcache"></a>自定义缓存 ehcache</h2><p>一种广泛使用的开源 Java 分布式缓存，主要面向通用缓存</p>
<p>使用：</p>
<ol>
<li>导包</li>
<li>config 中配置 type</li>
</ol>
<p>不过这样的功能现在都用类似 redis 的工具代替了，应该不是主流用法了</p>
]]></content>
      <categories>
        <category>弹射起步</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 内部类</title>
    <url>/hexo/2020/12/09/TIJ4-inner-class/</url>
    <content><![CDATA[<ul>
<li><a href="#intro">Intro</a></li>
<li><a href="#creating-inner-classes">Creating inner classes</a></li>
<li><a href="#the-link-to-the-outer-class">The link to the outer class</a></li>
<li><a href="#using-this-and-new">Using .this and .new</a></li>
<li><a href="#inner-classes-and-upcasting">Inner classes and upcasting</a></li>
<li><a href="#inner-classes-in-methods-and-scopes">Inner classes in methods and scopes</a></li>
<li><a href="#anonymous-inner-classes">Anonymous inner classes</a><ul>
<li><a href="#factory-method-revisited">Factory Method revisited</a></li>
</ul>
</li>
<li><a href="#nested-classes">Nested classes</a><ul>
<li><a href="#classes-inside-interfaces">Classes inside interfaces</a></li>
<li><a href="#reaching-outward-from-a-multiply-nested-class">Reaching outward from a multiply nested class</a></li>
</ul>
</li>
<li><a href="#why-inner-classes">Why inner classes?</a><ul>
<li><a href="#closures--callbacks">Closures &amp; callbacks</a></li>
<li><a href="#inner-classes--control-frameworks">Inner classes &amp; control frameworks</a></li>
</ul>
</li>
<li><a href="#inheriting-from-inner-classes">Inheriting from inner classes</a></li>
<li><a href="#can-inner-classes-be-overridden">Can inner classes be overridden?</a></li>
<li><a href="#local-inner-classes">Local inner classes</a></li>
<li><a href="#inner-class-identifiers">Inner-class identifiers</a></li>
<li><a href="#summary">Summary</a></li>
<li><a href="#实践出真知">实践出真知</a></li>
</ul>
<p>最近在看 Spring Core 文档, 刚好遇到一个 Inner Class 相关的问题, 回忆一下突然发现对他基本没有什么很深入的理解, 特此重新阅读一下 Think in Java 4th 相关章节看看能不能有什么特别的收获. </p>
<p>想要解决的问题:</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 什么是内部类 - 将 class 定义嵌入另一个 class 内部, 我们就得到了一个内部类</li>
<li><input checked="" disabled="" type="checkbox"> 静态/非静态内部类有什么区别 - 前者可以单独使用, 后者需要持有外部类(enclosing class)的实例才能使用</li>
<li><input checked="" disabled="" type="checkbox"> 内部类有什么用 - 更好的闭包</li>
<li><input checked="" disabled="" type="checkbox"> 字节码层面是怎么表现的 - class 分别编译, 外层会持有内层的 class reference</li>
</ul>
<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Java 语法是支持在一个 class 内部再放入另一个 class 的定义的, 这种做法叫做 内部类(Inner Class). </p>
<p>Inner class 是一个很有价值的功能, 他让你可以把两个逻辑上共存的 class 放到一起, 并让他们之间有可见性控制的特性. </p>
<h2 id="Creating-inner-classes"><a href="#Creating-inner-classes" class="headerlink" title="Creating inner classes"></a>Creating inner classes</h2><p>如果想要创建一个内部类你只需要直接将内部类的定义放到外部类里面就行了. 外部类一般会有一些方法用来返回内部类引用, 比如下面例子中的 <code>to()</code> 和 <code>contents()</code> 方法. 如果是 <code>非静态</code> 内部类, 你需要先新建外部类, 然后才能创建内部类. 如果是 <strong>静态</strong> 内部类, 则你可以直接通过 class 引用创建内部类对象. </p>
<p>示例说明:</p>
<p>创建静态/非静态内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类结构</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NestedClass</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 静态内部类的情况</span></span><br><span class="line">        OuterClass.NestedClass nestedClass = <span class="keyword">new</span> OuterClass.NestedClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非静态内部类的情况</span></span><br><span class="line">        OuterClass outer = <span class="keyword">new</span> OuterClass();</span><br><span class="line">        OuterClass.InnerClass innerClass = outer.<span class="function">new <span class="title">InnerClass</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 或者合二为一</span></span><br><span class="line">        OuterClass.InnerClass innerClass2 = <span class="keyword">new</span> OuterClass().new InnerClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例说明:</p>
<p>parcel = 包裹, 该示例以包裹运输为场景, 用包裹数量, 目的地等属性展示了内部类的应用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel2</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Contents</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Destination</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">        Destination(String whereTo) &#123;</span><br><span class="line">            label = whereTo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> label;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">to</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Destination(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Contents();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ship</span><span class="params">(String dest)</span> </span>&#123;</span><br><span class="line">        Contents c = contents();</span><br><span class="line">        Destination d = to(dest);</span><br><span class="line">        System.out.println(d.readLabel());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel2 p = <span class="keyword">new</span> Parcel2();</span><br><span class="line">        p.ship(<span class="string">&quot;Tasmania&quot;</span>);</span><br><span class="line">        Parcel2 q = <span class="keyword">new</span> Parcel2();</span><br><span class="line">        <span class="comment">// Defining references to inner classes:</span></span><br><span class="line">        Parcel2.Contents c = q.contents();</span><br><span class="line">        Parcel2.Destination d = q.to(<span class="string">&quot;Borneo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: Tasmania</span></span><br></pre></td></tr></table></figure>

<p>官方给的例子有点不太好记忆, 本人更倾向于简单的直接 Outer/Inner 这中名字来命名 class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">getInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Inner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer.Inner inner = <span class="keyword">new</span> Outer().getInner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="The-link-to-the-outer-class"><a href="#The-link-to-the-outer-class" class="headerlink" title="The link to the outer class"></a>The link to the outer class</h2><p>内部类最显著的特点: Inner class 创建的时候会持有一个外部类的引用, 概念上类似指针, 这使得他能没有限制的访问外部类成员变量和方法. </p>
<p>示例说明:</p>
<p>我们声明了一个接口 Selector, 它定义了三个方法, 表示类似游标的能力, 这个接口可以让我们</p>
<ol>
<li>得到当前量</li>
<li>判断是不是最后一个元素</li>
<li>移动到下一个元素</li>
</ol>
<p>Sequence(次序) 是一个可变长的数组容器, 实现了构造函数和 add() 方法. 通过构造函数我们可以指定他的容量, 通过 add() 方法可以向容器中添加元素. </p>
<p>Sequence 中我们声明了一个内部类 SequenceSelector 实现了 Selector 接口. 通过这种组合方式, 我们把删选能力和容器分隔开, 避免让 Sequence 直接实现 Selector 这种在语义上有歧义的做法. </p>
<p>重点: SequenceSelector <strong>可以访问</strong> Sequence 的<strong>私有</strong>变量而不受限制</p>
<p>PS: 看了上面的这些描述, 这绝逼就是 Iterator 的概念, Iterator Pattern 章节的内容还历历在目 (●°u°●)​ 」</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Selector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">current</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> next = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sequence</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        items = <span class="keyword">new</span> Object[size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (next &lt; items.length) items[next++] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceSelector</span> <span class="keyword">implements</span> <span class="title">Selector</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i == items.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">current</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> items[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; items.length) i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Selector <span class="title">selector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SequenceSelector();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sequence sequence = <span class="keyword">new</span> Sequence(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) sequence.add(Integer.toString(i));</span><br><span class="line">        Selector selector = sequence.selector();</span><br><span class="line">        <span class="keyword">while</span> (!selector.end()) &#123;</span><br><span class="line">            System.out.print(selector.current() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            selector.next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每次我们调用 selector() 方法时都会产生一个内部类的实体, 而且各个实体之间是相互独立的, 很赞. </p>
<p>自己写的内部类持有外部引用的例子, 光这个点的话, 官方的例子有点累赘, 不过这种设计思路很喜欢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;outer&quot;</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getOuterName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Outer.<span class="keyword">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">getInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Inner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer.Inner inner = <span class="keyword">new</span> Outer().getInner();</span><br><span class="line">        System.out.println(inner.getOuterName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: outer</span></span><br></pre></td></tr></table></figure>

<h2 id="Using-this-and-new"><a href="#Using-this-and-new" class="headerlink" title="Using .this and .new"></a>Using .this and .new</h2><p>内部类中, 你可以使用 <code>外部类.this</code> 的方式得到外部类的引用. 下面的例子中, inner class 的 <code>outer()</code> 通过 <code>DotThis.this</code> 返回了外部类的引用, 并调用 <code>f()</code> 打印结果. </p>
<p>这个例子中的调用链有点别扭, 但是主旨是为了说明我们可以通过 <code>outer.this</code> 这个关键字拿到外部类的引用, 仅此而已. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DotThis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DotThis.f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> DotThis <span class="title">outer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> DotThis.<span class="keyword">this</span>;</span><br><span class="line">            <span class="comment">// A plain &quot;this&quot; would be Inner’s &quot;this&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">inner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Inner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DotThis dt = <span class="keyword">new</span> DotThis();</span><br><span class="line">        DotThis.Inner dti = dt.inner();</span><br><span class="line">        dti.outer().f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: DotThis.f()</span></span><br></pre></td></tr></table></figure>

<p>如果你想创建内部类, 那么你可以通过 <code>外部类实例.new</code> 的形式创建. </p>
<p>创建时你不需要为 <code>Inner()</code> 指定前缀 class, 这个挺方便的. 本来还以为需要用 <code>dn.new DotNew.Inner();</code> 的语法, 后来试过发现编译会报错. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DotNew</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DotNew dn = <span class="keyword">new</span> DotNew();</span><br><span class="line">        DotNew.Inner dni = dn.new Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS: [Attention] 书上将非静态内部类叫做 inner class, 静态内部类叫做 nested class 或 static inner class, 有点意思</p>
<p>想要创建内部类你必须要先创建外部类, 这是因为<strong>创建内部类需要外部类的引用</strong>, 这更像是一个先决条件. 如果想脱钩, 可以使用 nested class(静态内部类). </p>
<h2 id="Inner-classes-and-upcasting"><a href="#Inner-classes-and-upcasting" class="headerlink" title="Inner classes and upcasting"></a>Inner classes and upcasting</h2><p>标题可以理解为 内部类和强转. Inner class 和接口结合, 可以达到隐藏自己实现的目的, 这个特性很厉害. </p>
<p>示例说明:</p>
<p>下面的例子里 Parcel4 声明了两个内部类, 分别实现 Destination 和 Contents 接口, 而且类修饰符为 private 和 protect 限制的包外的访问. </p>
<p>然后按照常用套路, 为这两个内部类创建了方法(destination(str) 和 contents())返回对应的实现. 但是由于方法返回的是接口类型的, 所以包外压根就不知道他的实现细节. 这就很 imba, 起到了很强的隔离效果 （；￣ェ￣）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestParcel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel4 p = <span class="keyword">new</span> Parcel4();</span><br><span class="line">        Contents c = p.contents();</span><br><span class="line">        Destination d = p.destination(<span class="string">&quot;Tasmania&quot;</span>);</span><br><span class="line">        <span class="comment">// Illegal -- can’t access private class:</span></span><br><span class="line">        <span class="comment">// ! Parcel4.PContents pc = p.new PContents();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Destination</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">readLabel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Contents</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parcel4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PContents</span> <span class="keyword">implements</span> <span class="title">Contents</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">PDestination</span> <span class="keyword">implements</span> <span class="title">Destination</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">PDestination</span><span class="params">(String whereTo)</span> </span>&#123;</span><br><span class="line">            label = whereTo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> label;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">destination</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PDestination(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PContents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Exc8: 确认下外部类是否能访问内部类变量? Determine whether an outer class has access to the private elements of its inner class.<br>看调用方式, 如果是外部类方法直接调用内部类成员变量, 不能, 外部类实例化后, 内部类可能压根就没有实例化, 访问个毛线<br>如果是实例化了, 就可以调用, 习题答案如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer8</span> </span>&#123;    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> ii1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> ii2 = <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showIi2</span><span class="params">()</span> </span>&#123; System.out.println(ii2); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;Inner hi&quot;</span>); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// Need to create objects to access private elements of Inner:</span></span><br><span class="line">    <span class="keyword">int</span> oi = <span class="keyword">new</span> Inner().ii1;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showOi</span><span class="params">()</span> </span>&#123; System.out.println(oi); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showIi2</span><span class="params">()</span> </span>&#123; <span class="keyword">new</span> Inner().showIi2(); &#125; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">outerHi</span><span class="params">()</span> </span>&#123; <span class="keyword">new</span> Inner().hi(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer8 out = <span class="keyword">new</span> Outer8();</span><br><span class="line">        out.showOi();</span><br><span class="line">        out.showIi2();</span><br><span class="line">        out.outerHi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Inner-classes-in-methods-and-scopes"><a href="#Inner-classes-in-methods-and-scopes" class="headerlink" title="Inner classes in methods and scopes"></a>Inner classes in methods and scopes</h2><p>前面那些例子都很直白易懂, 但是 Inner class 还有一些变种, 格式很放飞自我, 该变种适用如下情况</p>
<ol>
<li>你只是想要实现某个接口, 并返回这个接口引用</li>
<li>你在解决某个复杂问题时, 临时需要创建一个 class 以解决问题, 但是不想暴露它的实现</li>
</ol>
<p>下面我们会将前面的 Parcel 例子转化为以下几种方式:</p>
<p>1.A class defined within a method - 在方法体内定义类<br>2.A class defined within a scope inside a method - 在方法的某个更小的 scope 中声明类, 比如方法的 if 条件语句中<br>3.An anonymous class implementing an interface - 匿名内部类实现接口<br>4.An anonymous class extending a class that has a non-default constructor - 匿名内部类继承抽象类 + 自定义构造函数<br>5.An anonymous class that performs field initialization  - 匿名内部类 + field 初始化<br>6.An anonymous class that performs construction using instance initialization (anonymous inner classes cannot have constructors) - 匿名内部类 + 构造代码块</p>
<p>对应 item1: A class defined within a method, 我们将 class 创建在方法体内部, 这种做法也叫 本地内部类(local inner class):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">destination</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">PDestination</span> <span class="keyword">implements</span> <span class="title">Destination</span> </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">private</span> <span class="title">PDestination</span><span class="params">(String whereTo)</span> </span>&#123;</span><br><span class="line">                label = whereTo;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> label;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PDestination(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel5 p = <span class="keyword">new</span> Parcel5();</span><br><span class="line">        Destination d = p.destination(<span class="string">&quot;Tasmania&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PDestination 在 destination() 方法内而不在 Parcels 内, 所以 PDestination 只在方法体 destination() 内可见. 这种用法还允许你在这个类的其他方法中创建<strong>同名</strong>的内部类而没有冲突. </p>
<p>对应 item2: A class defined within a scope inside a method, 在方法内更小的 scope 中创建内部类:  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">internalTracking</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">TrackingSlip</span> </span>&#123;</span><br><span class="line">                <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">                TrackingSlip(String s) &#123;</span><br><span class="line">                    id = s;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function">String <span class="title">getSlip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> id;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            TrackingSlip ts = <span class="keyword">new</span> TrackingSlip(<span class="string">&quot;slip&quot;</span>);</span><br><span class="line">            String s = ts.getSlip();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Can’t use it here! Out of scope:</span></span><br><span class="line">        <span class="comment">// ! TrackingSlip ts = new TrackingSlip(&quot;x&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">track</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        internalTracking(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel6 p = <span class="keyword">new</span> Parcel6();</span><br><span class="line">        p.track();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TrackingSlip 嵌在 <code>if</code> 语句中, 只在 <code>if</code> 里生效, 出了这个范围就失效了, 除此之外和其他内部类没什么区别. </p>
<h2 id="Anonymous-inner-classes"><a href="#Anonymous-inner-classes" class="headerlink" title="Anonymous inner classes"></a>Anonymous inner classes</h2><p>对应 item3: An anonymous class implementing an interface 定义匿名内部类 和 item4: An anonymous class extending a class that has a non-default constructor 使用默认构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Contents</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Contents() &#123;</span><br><span class="line">            <span class="comment">// Insert a class definition</span></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;<span class="comment">// Semicolon required in this case</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel7 p = <span class="keyword">new</span> Parcel7();</span><br><span class="line">        Contents c = p.contents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>contents()</code> 将类定义和 return 结合在了一起. 除此之外, 该类还是匿名的, 返回时该类自动转换为基类类型. 上面的实现和下面的是等价的, 不过上面的更简洁. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel7b</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyContents</span> <span class="keyword">implements</span> <span class="title">Contents</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyContents();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel7b p = <span class="keyword">new</span> Parcel7b();</span><br><span class="line">        Contents c = p.contents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看文章顺序这个应该是对应 item4: An anonymous class extending a class that has a non-default constructor 的但是总感觉他这种说法不贴切, 可能是我笔记有问题, 按理说, 下面的 instance initialization 更贴切才对. </p>
<p>上面例子中, 内部类使用默认构造函数实例化, 如果你需要一个特殊的构造函数, 你可以参考下面的例子. Wrapping 是一个普通的类, 我们在 Parcel8 中的 wrapping 方法中调用了 Wrapping 的带参构造函数, 并且返回时重写了其中的 value 方法. 和之前的那些返回内部类的方式异曲同工. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel8</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Wrapping <span class="title">wrapping</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Base constructor call:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Wrapping(x) &#123; </span><br><span class="line">            <span class="comment">// Pass constructor argument.</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.value() * <span class="number">47</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;; <span class="comment">// Semicolon required</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel8 p = <span class="keyword">new</span> Parcel8();</span><br><span class="line">        Wrapping w = p.wrapping(<span class="number">10</span>);</span><br><span class="line">        System.out.println(wrapping.value());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapping</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wrapping</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        i = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: 470</span></span><br></pre></td></tr></table></figure>

<p>对应 item5: An anonymous class that performs field initialization 你可以在内部类中定义, 使用 field, field 如果是作为参数传入, 必须是 final 类型的:</p>
<blockquote>
<p>再看一遍才发现, 他的特殊之处是内部类有一个 field 声明, 对应的值是直接从方法参数里面拿的！！这种用法以前没注意到过 （；￣ェ￣）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel9</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Argument must be final to use inside</span></span><br><span class="line">    <span class="comment">// anonymous inner class:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">destination</span><span class="params">(<span class="keyword">final</span> String dest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Destination() &#123;</span><br><span class="line">            <span class="keyword">private</span> String label = dest;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> label;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel9 p = <span class="keyword">new</span> Parcel9();</span><br><span class="line">        Destination d = p.destination(<span class="string">&quot;Tasmania&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If you’re defining an anonymous inner class and want to use an object that’s defined outside the anonymous inner class, the compiler requires that the argument reference be <strong>final</strong>, as you see in the argument to destination(). If you forget, you’ll get a compile-time error message. </p>
<p>内部匿名类会调用基类的构造器, 但是如果你在实例里需要定制一些行为, 但是由于你没有名字, 没有自己的构造器, 那该怎么办？</p>
<p>对应 item6: An anonymous class that performs construction using instance initialization, 这种情况下, 你可以使用 构造代码块(instance initializaiton) 实现通用的功能. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Base constructor, i = &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Base <span class="title">getBase</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Base(i) &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Inside instance initializer&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;In anonymous f()&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Base base = getBase(<span class="number">47</span>);</span><br><span class="line">        base.f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Base constructor, i = 47</span></span><br><span class="line"><span class="comment">// Inside instance initializer</span></span><br><span class="line"><span class="comment">// In anonymous f()</span></span><br></pre></td></tr></table></figure>

<p>上例中 i 作为构造器参数传入, 但是并没有在内部类中被直接使用, 使用他的是基类的构造函数. 所以不用像前面的 local inner class 那样, 使用 final 修饰. </p>
<p>Note that the arguments to destination() must be final since they are used within the anonymous class:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">destination</span><span class="params">(<span class="keyword">final</span> String dest, <span class="keyword">final</span> <span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Destination() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> cost;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Instance initialization for each object:      </span></span><br><span class="line">            &#123;</span><br><span class="line">                cost = Math.round(price);</span><br><span class="line">                <span class="keyword">if</span> (cost &gt; <span class="number">100</span>) System.out.println(<span class="string">&quot;Over budget!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> String label = dest;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> label;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel10 p = <span class="keyword">new</span> Parcel10();</span><br><span class="line">        Destination d = p.destination(<span class="string">&quot;Tasmania&quot;</span>, <span class="number">101.395F</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: Over budget!</span></span><br></pre></td></tr></table></figure>

<p>在内部类的使用中, 代码块可以看作是内部类的构造函数</p>
<p>和其他普通的类相比, 你可以使用匿名内部类来扩展类或接口, 但只能选其一, 而且数量只能是一个. </p>
<h3 id="Factory-Method-revisited"><a href="#Factory-Method-revisited" class="headerlink" title="Factory Method revisited"></a>Factory Method revisited</h3><blockquote>
<p>这部分是使用 inner class 重构之前 factory/interface 相关的代码, 有机会回头再瞅一眼</p>
</blockquote>
<p>Look at how much nicer the interfaces/Factories.java example comes out when you use anonymous inner classes:</p>
<p>示例说明:</p>
<p>通过内部类实现工厂方法, 并且在示例中将 outer 类的构造函数设置成 private, 将新建的动作限制到只能通过 factory 实现, 6 的飞起. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ServiceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Service <span class="title">getService</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Implementation1</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Implementation1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Implementation1 method1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Implementation1 method2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ServiceFactory factory = <span class="keyword">new</span> ServiceFactory() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Service <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Implementation1();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Implementation2</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Implementation2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Implementation2 method1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Implementation2 method2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ServiceFactory factory = <span class="keyword">new</span> ServiceFactory() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Service <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Implementation2();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factories</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serviceConsumer</span><span class="params">(ServiceFactory fact)</span> </span>&#123;</span><br><span class="line">        Service s = fact.getService();</span><br><span class="line">        s.method1();</span><br><span class="line">        s.method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        serviceConsumer(Implementation1.factory);</span><br><span class="line">        <span class="comment">// Implementations are completely interchangeable:</span></span><br><span class="line">        serviceConsumer(Implementation2.factory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Implementation1 method1</span></span><br><span class="line"><span class="comment">// Implementation1 method2</span></span><br><span class="line"><span class="comment">// Implementation2 method1</span></span><br><span class="line"><span class="comment">// Implementation2 method2</span></span><br></pre></td></tr></table></figure>

<p>通过为 Factory 提供 inner class 的实现, 我们可以将上例中的 Implementation1 和 Implementation2 的构造函数设置成私有, 缩小了 Service 实现的作用域. 同时不需要为工厂类提供单独的实现. 从语法上这样的解决方案更合理. </p>
<p>interfaces/Games.java 的例子也可以使用 inner class 做类似的优化:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Game <span class="title">getGame</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Checkers</span> <span class="keyword">implements</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Checkers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> moves = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVES = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Checkers move &quot;</span> + moves);</span><br><span class="line">        <span class="keyword">return</span> ++moves != MOVES;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GameFactory factory = <span class="keyword">new</span> GameFactory() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Game <span class="title">getGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Checkers();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chess</span> <span class="keyword">implements</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Chess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> moves = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVES = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Chess move &quot;</span> + moves);</span><br><span class="line">        <span class="keyword">return</span> ++moves != MOVES;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GameFactory factory = <span class="keyword">new</span> GameFactory() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Game <span class="title">getGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Chess();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Games</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(GameFactory factory)</span> </span>&#123;</span><br><span class="line">        Game s = factory.getGame();</span><br><span class="line">        <span class="keyword">while</span> (s.move()) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        playGame(Checkers.factory);</span><br><span class="line">        playGame(Chess.factory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Remember the advice given at the end of the last chapter: Prefer classes to interfaces. If your design demands an interface, you’ll know it. Otherwise, don’t put it in until you are forced to. </p>
<blockquote>
<p>这个建议是从上一章节 Interface 那边出来了, 具体得完那一章才知道. 建议就是先用 class, 等你完全定下来再 refactor 成 interface, 现在 interface 一般都是被滥用的. </p>
</blockquote>
<h2 id="Nested-classes"><a href="#Nested-classes" class="headerlink" title="Nested classes"></a>Nested classes</h2><p>如果你不想要内部类和外部类的关系, 你可以把内部类静态化, 这种做法叫 nested class(静态内部类). 普通的内部类会持有一个外部类的引用, 静态内部类则不会. 静态内部类有如下特点:</p>
<ol>
<li>You don’t need an outer-class object in order to create an object of a nested class. 独立于外部类实例存在</li>
<li>You can’t access a non-static outer-class object from an object of a nested class. 不能通过它访问非静态的外部类</li>
</ol>
<p>除此之外的区别还有, 普通内部类还不能持有静态变量, 方法. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel11</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ParcelContents</span> <span class="keyword">implements</span> <span class="title">Contents</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ParcelDestination</span> <span class="keyword">implements</span> <span class="title">Destination</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">ParcelDestination</span><span class="params">(String whereTo)</span> </span>&#123;</span><br><span class="line">            label = whereTo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> label;</span><br><span class="line">        &#125;        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Nested classes can contain other static elements:</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherLevel</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Destination <span class="title">destination</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ParcelDestination(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ParcelContents();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Contents c = contents();</span><br><span class="line">        Destination d = destination(<span class="string">&quot;Tasmania&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于使用了静态的内部类, 外部类也可以使用静态方法返回内部类实例. 在 main() 中调用时就可以直接 call 方法而不用外部类实例了. </p>
<h3 id="Classes-inside-interfaces"><a href="#Classes-inside-interfaces" class="headerlink" title="Classes inside interfaces"></a>Classes inside interfaces</h3><p>一般来说, 在 interface 里放 class 是不允许的, 但是 nested class 是个例外. 任何放到 interface 里的 code 都会有 public 和 static 的属性, 所以下面代码中声明的 class <code>class Test implements ClassInInterface</code> 其实就是一个静态内部类. You can even implement the surrounding interface in the inner class, like this: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClassInInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">howdy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">ClassInInterface</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">howdy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Howdy!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">new</span> Test().howdy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output Howdy!</span></span><br></pre></td></tr></table></figure>

<p>通过这种方式我们可以很方便的在接口使用方分享一些公用代码. </p>
<p>在这本书的前面几章, 有建议说在每个 class 里面加一个 main() 方法来存放测试代码, 但是这会增加需要编译的代码量. 这里我们可以将测试放到 nested class 中:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBed</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Tester</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            TestBed t = <span class="keyword">new</span> TestBed();</span><br><span class="line">            t.f();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output f()</span></span><br></pre></td></tr></table></figure>

<p>编译之后测试会放到单独的 class <code>TestBed$Tester</code> 中, 它可以用来测试, 当要部署到产品环境时, 可以把这部分代码 exclude 掉. </p>
<blockquote>
<p>现在应该不用了, 我们都是通过在测试 folder 下新建测试 UT 来完成这部分功能的</p>
</blockquote>
<h3 id="Reaching-outward-from-a-multiply-nested-class"><a href="#Reaching-outward-from-a-multiply-nested-class" class="headerlink" title="Reaching outward from a multiply nested class"></a>Reaching outward from a multiply nested class</h3><p>不管 inner class 嵌套的有多深, 内部类都可以不受限制的访问外部类, 如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MNA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                g();</span><br><span class="line">                f();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiNestingAccess</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MNA mna = <span class="keyword">new</span> MNA();</span><br><span class="line">        MNA.A mnaa = mna.new A();</span><br><span class="line">        MNA.A.B mnaab = mnaa.new B();</span><br><span class="line">        mnaab.h();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>上例中MNAAB 可以访问外部的私有方法 g(), f(). 同时也演示了, 在 main() 中你如果要新建内部类, 需要先实例化他的外部类. </p>
<h2 id="Why-inner-classes"><a href="#Why-inner-classes" class="headerlink" title="Why inner classes?"></a>Why inner classes?</h2><p>为什么 Java 要支持 inner class 这种语法？</p>
<p>从典型的使用方式上看, 内部类会继承 class 或者 实现接口, 然后操作外部类的属性. 所以我们可以说<strong>内部类提供了一个外部类的访问窗口</strong>. </p>
<p>Inner class 存在的最合理的解释:</p>
<blockquote>
<p>内部类都可以独立的实现一个继承. 即不管外部类是否已经继承了一个实现这对 inner class 毫无影响. </p>
</blockquote>
<p>换个角度看, inner class 可以看作是<strong>多重继承</strong>的一种解决方案. 在这方面, interface 可以解决一部分问题, 但是 inner class 效率更高. </p>
<p>就上面的问题, 下面我们举例子来说明, 比如我们想要在一个类里实现两个接口, 你有两种选择, 一个 class + 2<em>interface 或者 class + inner class + 1</em>interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> <span class="keyword">implements</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function">B <span class="title">makeB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Anonymous inner class:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> B() &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiInterfaces</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">takesA</span><span class="params">(A a)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">takesB</span><span class="params">(B b)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        X x = <span class="keyword">new</span> X();</span><br><span class="line">        Y y = <span class="keyword">new</span> Y();</span><br><span class="line">        takesA(x);</span><br><span class="line">        takesA(y);</span><br><span class="line">        takesB(x);</span><br><span class="line">        takesB(y.makeB());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例中我们有 A, B 两个接口, X 实现两个接口, Y 实现一个接口 + 一个 inner class. X, Y 虽然实现方式不太一样, 但是目的都达到了, 两个接口都实现了. </p>
<p>但是, 如果是抽象类或者实体类, 多重继承就会受到限制. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Z</span> <span class="keyword">extends</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="function">E <span class="title">makeE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> E() &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiImplementation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">takesD</span><span class="params">(D d)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">takesE</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Z z = <span class="keyword">new</span> Z();</span><br><span class="line">        takesD(z);</span><br><span class="line">        takesE(z.makeE());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>作者这里的继承说的是具有基类的某种能力, 而不是限制在继承类的语法表现, 这个对我理解继承还是有点启发的. 通过<strong>内部类</strong>我可以得到<strong>基类</strong>的实例, 说我继承了它, 也说的过去. </p>
</blockquote>
<p>通过 inner class, 你可以具备以下附加功能:</p>
<ol>
<li>内部类可以有多个实例, 并且相互独立, 和外部类也相互独立</li>
<li>In a single outer class you can have several inner classes, each of which implements the same interface or inherits from the same class in a different way. An example of this will be shown shortly.</li>
<li>The point of creation of the inner-class object is not tied to the creation of the outer-class object.  </li>
<li>There is no potentially confusing “is-a” relationship with the inner class; it’s a separate entity. </li>
</ol>
<p>就第四点, 可以那前面的 <code>Sequence.java</code> 为例. Sequence 语义上来说是一个容器, 而 Selector 接口代表了选择这种能力. 我们通过内部创建一个 SequenceSelector 实现这中能力, 在语义上会更合理. </p>
<h3 id="Closures-amp-callbacks"><a href="#Closures-amp-callbacks" class="headerlink" title="Closures &amp; callbacks"></a>Closures &amp; callbacks</h3><p>Closure(闭包) 即一个可调用对象, 保留了创建它的作用域的信息. Inner class 就是 OO 概念上的一个闭包, 他持有外部类的引用, 访问不受限. </p>
<p>Java 支持部分指针机制, 其中之一就是 callback(回调). 在回调中, 一些对象给出自身的一部分信息(引用), 通过这部分信息, 其他对象可以操作这个对象. </p>
<p>inner class 的闭包特性比之与指针, 扩展性更强, 更安全. </p>
<p>示例说明:</p>
<p>下面这个例子只为了一个目的, 就是凸显出内部类可以拿到外部类的引用(Callee2.this), 并且没有任何访问限制. </p>
<p>我们声明一个 Incremnentable 接口, 其中有一个方法 <code>increment()</code>, Callee1 实现了 Incrementable. </p>
<p>再声明 MyIncrement 基类, 也有一个 <code>increment()</code> 方法, 然后声明 Callee2 继承了 MyIncrement 那么相应的他就自带了 increment() 方法, 无法再实现 Incrementable 接口, 这里通过内部类 Closure 实现接口, 在通过 getCallbackReference() 拿到引用, 变相的达到了多重继承的效果. 在主函数中, Caller 通过构造函数统一对 Incrementable 做操作. </p>
<p>PS:个人感觉这个例子中 MyIncrement 这个类对说明 callback 这个特性反而起了误导的作用, 让整个示例反觉更繁琐了. 整个例子只需要保留 Callee2 + Caller 部分即. 我们可以通过 caller 的 go() 方法调用 Callee2 中的方法, 改变内部变量值. </p>
<p>PPS: 这个例子确实多余, 这里表现出来的特性不就是 <code>Outer.this</code> 这个属性吗, 绕了一大圈. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Incrementable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Very simple to just implement the interface:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Callee1</span> <span class="keyword">implements</span> <span class="title">Incrementable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIncrement</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Other operation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(MyIncrement mi)</span> </span>&#123;</span><br><span class="line">        mi.increment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If your class must implement increment() in</span></span><br><span class="line"><span class="comment">// some other way, you must use an inner class:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Callee2</span> <span class="keyword">extends</span> <span class="title">MyIncrement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.increment();</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Closure</span> <span class="keyword">implements</span> <span class="title">Incrementable</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Specify outer-class method, otherwise</span></span><br><span class="line">            <span class="comment">// you’d get an infinite recursion:</span></span><br><span class="line">            Callee2.<span class="keyword">this</span>.increment();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Incrementable <span class="title">getCallbackReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Closure();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caller</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Incrementable callbackReference;</span><br><span class="line"></span><br><span class="line">    Caller(Incrementable cbh) &#123;</span><br><span class="line">        callbackReference = cbh;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        callbackReference.increment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Callbacks</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Callee1 c1 = <span class="keyword">new</span> Callee1();</span><br><span class="line">        Callee2 c2 = <span class="keyword">new</span> Callee2();</span><br><span class="line">        MyIncrement.f(c2);</span><br><span class="line">        Caller caller1 = <span class="keyword">new</span> Caller(c1);</span><br><span class="line">        Caller caller2 = <span class="keyword">new</span> Caller(c2.getCallbackReference());</span><br><span class="line">        caller1.go();</span><br><span class="line">        caller1.go();</span><br><span class="line">        caller2.go();</span><br><span class="line">        caller2.go();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Other operation</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// Other operation</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// Other operation</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h3 id="Inner-classes-amp-control-frameworks"><a href="#Inner-classes-amp-control-frameworks" class="headerlink" title="Inner classes &amp; control frameworks"></a>Inner classes &amp; control frameworks</h3><blockquote>
<p>List<Event> (pronounced “List of Event”) 原来带类型的 collection 这么发音的吗, 学到了同时感觉很合理</p>
</blockquote>
<blockquote>
<p>本章主要例子中用到了 Command pattern 不过我已经忘了那是个什么东西了, 又要复习了 （；￣ェ￣）</p>
</blockquote>
<p>control framework 是一种用于处理 event 的应用框架. 下面是书中 GreenHouse 的例子. 我们先创建一个 abstract 的类代表我们要处理的 event</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> eventTime;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">long</span> delayTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delayTime = delayTime;</span><br><span class="line">        start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123; <span class="comment">// Allows restarting</span></span><br><span class="line">        eventTime = System.nanoTime() + delayTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">ready</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.nanoTime() &gt;= eventTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>start()</code> 单独抽离, 方便以后实现 restart 功能, <code>ready()</code> 即判断是否已经可以执行事件, <code>action()</code> 是我们要执行事件的内容. </p>
<p>以下是 Controller 代码, Controller 实体持有事件列表, 然后通过 while 遍历 event 并执行. 处理时将变量 list 备份以防止动态改变 list 的值. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="comment">// A class from java.util to hold Event objects:</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Event&gt; eventList = <span class="keyword">new</span> ArrayList&lt;Event&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEvent</span><span class="params">(Event c)</span> </span>&#123;</span><br><span class="line">        eventList.add(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (eventList.size() &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// Make a copy so you’re not modifying the list</span></span><br><span class="line">            <span class="comment">// while you’re selecting the elements in it:</span></span><br><span class="line">            <span class="keyword">for</span> (Event e : <span class="keyword">new</span> ArrayList&lt;Event&gt;(eventList))</span><br><span class="line">                <span class="keyword">if</span> (e.ready()) &#123;</span><br><span class="line">                    System.out.println(e);</span><br><span class="line">                    e.action();</span><br><span class="line">                    eventList.remove(e);</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在遍历 event 时, 我们并不知道 event 具体是什么, 这正是框架的目的, 我们并不关心某个具体的对象. 而这恰恰是 inner class 擅长的地方. 通过使用它我们可以在两方面优化上面的代码. </p>
<ol>
<li>我们可以把 event 和 controller 合二为一, 将各个 event 特有的 action() 封装在内部类中</li>
<li>内部类让你的实现对外不可见</li>
</ol>
<p>使用<strong>内部类</strong>实现代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenhouseControls</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> light = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOn</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LightOn</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Put hardware control code here to</span></span><br><span class="line">            <span class="comment">// physically turn on the light.</span></span><br><span class="line">            light = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Light is on&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOff</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LightOff</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Put hardware control code here to</span></span><br><span class="line">            <span class="comment">// physically turn off the light.</span></span><br><span class="line">            light = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Light is off&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> water = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaterOn</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WaterOn</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Put hardware control code here.</span></span><br><span class="line">            water = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Greenhouse water is on&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaterOff</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WaterOff</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Put hardware control code here.</span></span><br><span class="line">            water = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Greenhouse water is off&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String thermostat = <span class="string">&quot;Day&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThermostatNight</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ThermostatNight</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Put hardware control code here.</span></span><br><span class="line">            thermostat = <span class="string">&quot;Night&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Thermostat on night setting&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThermostatDay</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ThermostatDay</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Put hardware control code here.</span></span><br><span class="line">            thermostat = <span class="string">&quot;Day&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Thermostat on day setting&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// An example of an action() that inserts a</span></span><br><span class="line">    <span class="comment">// new one of itself into the event list:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bell</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Bell</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            addEvent(<span class="keyword">new</span> Bell(delayTime));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Bing!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Restart</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Event[] eventList;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Restart</span><span class="params">(<span class="keyword">long</span> delayTime, Event[] eventList)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">            <span class="keyword">this</span>.eventList = eventList;</span><br><span class="line">            <span class="keyword">for</span> (Event e : eventList)</span><br><span class="line">                addEvent(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (Event e : eventList) &#123;</span><br><span class="line">                e.start(); <span class="comment">// Rerun each event</span></span><br><span class="line">                addEvent(e);</span><br><span class="line">            &#125;</span><br><span class="line">            start(); <span class="comment">// Rerun this Event</span></span><br><span class="line">            addEvent(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Restarting system&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Terminate</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Terminate</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Terminating&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码结构很简单, 分别声明了一些事件类型 lightOn/Off, waterOn/Off 等, 内部类继承 Event, 实现个则的抽象方法即可. </p>
<p>Bell 和 Restart 有别于其他的 event 内部类, 它还会调用 Outer class 的其他方法. </p>
<p>以下是 GreenhouseController 执行函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenhouseController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GreenhouseControls gc = <span class="keyword">new</span> GreenhouseControls();</span><br><span class="line">        <span class="comment">// Instead of hard-wiring, you could parse</span></span><br><span class="line">        <span class="comment">// configuration information from a text file here:</span></span><br><span class="line">        gc.addEvent(gc.new Bell(<span class="number">900</span>));</span><br><span class="line">        Event[] eventList = &#123;</span><br><span class="line">                gc.new ThermostatNight(<span class="number">0</span>), </span><br><span class="line">                gc.new LightOn(<span class="number">200</span>), </span><br><span class="line">                gc.new LightOff(<span class="number">400</span>), </span><br><span class="line">                gc.new WaterOn(<span class="number">600</span>), </span><br><span class="line">                gc.new WaterOff(<span class="number">800</span>), </span><br><span class="line">                gc.new ThermostatDay(<span class="number">1400</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        gc.addEvent(gc.new Restart(<span class="number">2000</span>, eventList));</span><br><span class="line">        gc.addEvent(<span class="keyword">new</span> GreenhouseControls.Terminate(<span class="keyword">new</span> Integer(<span class="number">5000</span>)));</span><br><span class="line">        gc.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Bing!</span></span><br><span class="line"><span class="comment">// Thermostat on night setting</span></span><br><span class="line"><span class="comment">// Light is on</span></span><br><span class="line"><span class="comment">// Light is off</span></span><br><span class="line"><span class="comment">// Greenhouse water is on</span></span><br><span class="line"><span class="comment">// Greenhouse water is off</span></span><br><span class="line"><span class="comment">// Thermostat on day setting</span></span><br><span class="line"><span class="comment">// Restarting system</span></span><br><span class="line"><span class="comment">// Terminating</span></span><br></pre></td></tr></table></figure>

<h2 id="Inheriting-from-inner-classes"><a href="#Inheriting-from-inner-classes" class="headerlink" title="Inheriting from inner classes"></a>Inheriting from inner classes</h2><p>如果想要继承一个内部类, 语法稍微有点特殊, 由于内部类需要借助外部类才能实例化, 所以构造函数中需要调用 <code>outer.super()</code> 实例如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithInner</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritInner</span> <span class="keyword">extends</span> <span class="title">WithInner</span>.<span class="title">Inner</span> </span>&#123;</span><br><span class="line">    <span class="comment">//! InheritInner() &#123;&#125; // Won’t compile</span></span><br><span class="line">    InheritInner(WithInner wi) &#123;</span><br><span class="line">        wi.<span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WithInner wi = <span class="keyword">new</span> WithInner();</span><br><span class="line">        InheritInner ii = <span class="keyword">new</span> InheritInner(wi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>InheritInner 继承自内部类, 在构造函数中需要外部类实体做参数. 内部类是以外部类为基础的, 所以这样做也挺合理.</p>
<h2 id="Can-inner-classes-be-overridden"><a href="#Can-inner-classes-be-overridden" class="headerlink" title="Can inner classes be overridden?"></a>Can inner classes be overridden?</h2><p>内部类并不能像方法那样被重写. 我们准备一个 class Egg, 里面声明一个内部类 Yolk 并在构造函数中调用它. 我们再新建一个类 GigEgg 继承 Egg, 在里面声明一个同名的内部类, 试图用类似方法重写的方式覆盖他. 示例如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Yolk y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">Yolk</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Yolk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Egg.Yolk()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Egg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;New Egg()&quot;</span>);</span><br><span class="line">        y = <span class="keyword">new</span> Yolk();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigEgg</span> <span class="keyword">extends</span> <span class="title">Egg</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yolk</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Yolk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;BigEgg.Yolk()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> BigEgg();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// New Egg()</span></span><br><span class="line"><span class="comment">// Egg.Yolk()</span></span><br></pre></td></tr></table></figure>

<p>默认的构造函数会在编译时指定调用基类中的 Yolk 对象. 这个例子表明 JVM 在处理内部类时并没有做什么特殊的操作, 基类和子类中的内部函数时完全隔离的. </p>
<p>This example shows that there isn’t any extra inner-class magic going on when you inherit<br>from the outer class. The two inner classes are completely separate entities, each in its own<br>namespace. However, it’s still possible to explicitly inherit from the inner class: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">Yolk</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Yolk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Egg2.Yolk()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Egg2.Yolk.f()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Yolk y = <span class="keyword">new</span> Yolk();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Egg2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;New Egg2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertYolk</span><span class="params">(Yolk yy)</span> </span>&#123;</span><br><span class="line">        y = yy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        y.f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigEgg2</span> <span class="keyword">extends</span> <span class="title">Egg2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yolk</span> <span class="keyword">extends</span> <span class="title">Egg2</span>.<span class="title">Yolk</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Yolk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;BigEgg2.Yolk()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;BigEgg2.Yolk.f()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BigEgg2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        insertYolk(<span class="keyword">new</span> Yolk());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Egg2 e2 = <span class="keyword">new</span> BigEgg2();</span><br><span class="line">        e2.g();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Egg2.Yolk() &lt;- 初始化子类时调用基类构造, 先初始化基类中的 field</span></span><br><span class="line"><span class="comment">// New Egg2() &lt;- 基类构造</span></span><br><span class="line"><span class="comment">// Egg2.Yolk() &lt;- 子类 new Yolk() 先调用 基类 中的 Yolk 构造</span></span><br><span class="line"><span class="comment">// BigEgg2.Yolk() &lt;- 子类构造调用</span></span><br><span class="line"><span class="comment">// BigEgg2.Yolk.f() &lt;- 子类调用 g 方法</span></span><br></pre></td></tr></table></figure>

<p>在上面的例子里面, 我们显示的指定 BigEgg2 中的 Yolk 继承自 Egg2 中的 Yolk, 然后基类中还提供了一个 <code>insertYolk()</code> 来修改基类中内部类的引用. </p>
<h2 id="Local-inner-classes"><a href="#Local-inner-classes" class="headerlink" title="Local inner classes"></a>Local inner classes</h2><p>内部类可以创建在代码块中, 一般常见的是创建在方法里面. 我们无法访问方法体里面的内部类, 因为他并不是 outer class 的一部分. 但是这个内部类还是可以毫无限制的访问外部类的各种信息. </p>
<p>下面是 local inner class 和匿名内部类的对比例子:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalInnerClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Counter <span class="title">getCounter</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// A local inner class:</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">LocalCounter</span> <span class="keyword">implements</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">LocalCounter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Local inner class can have a constructor</span></span><br><span class="line">                System.out.println(<span class="string">&quot;LocalCounter()&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.print(name); <span class="comment">// Access local final</span></span><br><span class="line">                <span class="keyword">return</span> count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LocalCounter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The same thing with an anonymous inner class:</span></span><br><span class="line">    <span class="function">Counter <span class="title">getCounter2</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Counter() &#123;</span><br><span class="line">            <span class="comment">// Anonymous inner class cannot have a named</span></span><br><span class="line">            <span class="comment">// constructor, only an instance initializer:</span></span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Counter()&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.print(name); <span class="comment">// Access local final</span></span><br><span class="line">                <span class="keyword">return</span> count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalInnerClass lic = <span class="keyword">new</span> LocalInnerClass();</span><br><span class="line">        Counter</span><br><span class="line">                c1 = lic.getCounter(<span class="string">&quot;Local inner &quot;</span>), </span><br><span class="line">                c2 = lic.getCounter2(<span class="string">&quot;Anonymous inner &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            System.out.println(c1.next());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            System.out.println(c2.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// LocalCounter()</span></span><br><span class="line"><span class="comment">// Counter()</span></span><br><span class="line"><span class="comment">// Local inner 0</span></span><br><span class="line"><span class="comment">// Local inner 1</span></span><br><span class="line"><span class="comment">// Local inner 2</span></span><br><span class="line"><span class="comment">// Local inner 3</span></span><br><span class="line"><span class="comment">// Local inner 4</span></span><br><span class="line"><span class="comment">// Anonymous inner 5</span></span><br><span class="line"><span class="comment">// Anonymous inner 6</span></span><br><span class="line"><span class="comment">// Anonymous inner 7</span></span><br><span class="line"><span class="comment">// Anonymous inner 8</span></span><br><span class="line"><span class="comment">// Anonymous inner 9</span></span><br></pre></td></tr></table></figure>

<p>上面的例子中, Counter 接口会依次返回 count 值. local inner class 和 匿名内部类都实现了这个接口. 两个内部类逻辑和功能也都一样, 唯一区别是, 匿名内部类他是没有构造函数的, 需要用代码块代替. </p>
<p>如果你需要创建多个实例的话, 你也要使用 local inner class, 你用 anonymous 是建不出来多个实例的. </p>
<h2 id="Inner-class-identifiers"><a href="#Inner-class-identifiers" class="headerlink" title="Inner-class identifiers"></a>Inner-class identifiers</h2><p>每个类在编译后都会生成一个 <code>.class</code> 文件保存对应的类信息. 内部类也一样, 格式为 <code>外部类$内部类</code> 下面是 LocalInnerClass.java 编译后的文件:</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Counter.class</span><br><span class="line">LocalInnerClass$l.class</span><br><span class="line">LocallnnerClassSlLocalCounter.class</span><br><span class="line">LocallnnerClass.class</span><br></pre></td></tr></table></figure>

<p>如果是内部匿名类, 类名由数字代替. 如果是多层嵌套的内部类, 类名间链接多个 <code>$</code> 符号. </p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>接口和内部类是 Java 特有的, 你在 C++ 中找不到类似的概念, 他们帮助我们实现多重继承的问题而且实现上要比 C++ 的优雅. </p>
<h2 id="实践出真知"><a href="#实践出真知" class="headerlink" title="实践出真知"></a>实践出真知</h2><blockquote>
<p>2021-04-22 想要在代码中使用简化版的 Builder 模式，但是发现 nested static class 中声明的对象不能调用 set method. 为啥？</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">//? p.name = &quot;jack&quot;; 不能操作</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            p.name = name;   <span class="comment">// 可操作</span></span><br><span class="line">            <span class="comment">// p.setName(name); 可操作</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>inner class</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 - Type Information 类型信息</title>
    <url>/hexo/2020/12/22/TIJ4-type-information/</url>
    <content><![CDATA[<ul>
<li><a href="#前述">前述</a></li>
<li><a href="#the-need-for-rtti">The need for RTTI</a></li>
<li><a href="#the-class-object">The Class object</a><ul>
<li><a href="#class-literals字面量">Class literals(字面量)</a></li>
<li><a href="#generic-class-references">Generic class references</a></li>
<li><a href="#new-cast-syntax">New cast syntax</a></li>
</ul>
</li>
<li><a href="#checking-before-a-cast">Checking before a cast</a><ul>
<li><a href="#using-class-literals">Using class literals</a></li>
<li><a href="#a-dynamic-instanceof">A dynamic instanceof</a></li>
<li><a href="#counting-recursively">Counting recursively</a></li>
</ul>
</li>
<li><a href="#registered-factories">Registered factories</a></li>
<li><a href="#instanceof-vs-class-equivalence">instanceof vs. Class equivalence</a></li>
</ul>
<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>Runtime type information(RTTI) allows you to discover and use type information while a program is running.</p>
<p>两种使用方式：</p>
<ol>
<li>传统模式，假定你在编译期就知道所有用到的类型</li>
<li>反射模式，你只在运行时才知道类信息</li>
</ol>
<h2 id="The-need-for-RTTI"><a href="#The-need-for-RTTI" class="headerlink" title="The need for RTTI"></a>The need for RTTI</h2><p>简单的继承关系示例：</p>
<p>基类：Shape 包含方法 draw()， 子类：Circle, Square, Triangle</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">&quot;.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Square&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Triangle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shapes</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Shape&gt; shapeList = Arrays.asList(<span class="keyword">new</span> Circle(), <span class="keyword">new</span> Square(), <span class="keyword">new</span> Triangle());</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : shapeList) shape.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Circle.draw()</span></span><br><span class="line"><span class="comment">// Square.draw()</span></span><br><span class="line"><span class="comment">// Triangle.draw()</span></span><br></pre></td></tr></table></figure>

<p>在上面的例子中，我本将子类结合 List 强转成父类，然后统一做操作，这种做法更易读，容易维护。这也是面向对象的目标之一，但是如果我想在运行时得知这个对象的具体类型，应该怎么做？</p>
<h2 id="The-Class-object"><a href="#The-Class-object" class="headerlink" title="The Class object"></a>The Class object</h2><p>在 Java 中有一个神奇的类他叫 Class 类，所有创建类实例的行为都和他有关。 Java 的 RTTI 特性也是通过它来实现的。当你编译一个类的时候，JVM 会通过 class 创建一个对应的 Class 类来存储对应的信息。</p>
<p>类加载器由一组 class loaders 组成，但是已有一个 primordial class loader，他是 JVM 的一部分，他会加载所有的 trusted classes，这写 trusted class 包括 Java API classes, 比如本地磁盘上的 classes。通常你不需要自己新加 class loader 但是如果有特殊需要，想加也是可以的。</p>
<p>只有当第一次使用的时候，JVM 才会加载对应的 class。这个行为发生在类第一次关联到 static 实体， 构造函数也是一个特殊的 static method，换句话说，当我们 new 一个对象的时候，加载器就会加载对应的 class。</p>
<p>Java 中只允许 Class 加载一次，加载完成之后，以后所有这个 class 对应的实体都是通过它来创建的。</p>
<p>PS：这里翻译很生硬，缺少很多类加载的相关知识，可以看过 JVM 那本书之后，再来完善一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Candy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Loading Candy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gum</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Loading Gum&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cookie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Loading Cookie&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SweetShop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;inside main&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Candy();</span><br><span class="line">        System.out.println(<span class="string">&quot;After creating Candy&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;Gum&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Couldn’t find Gum&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;After Class.forName(\&quot;Gum\&quot;)&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Cookie();</span><br><span class="line">        System.out.println(<span class="string">&quot;After creating Cookie&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// inside main</span></span><br><span class="line"><span class="comment">// Loading Candy</span></span><br><span class="line"><span class="comment">// After creating Candy</span></span><br><span class="line"><span class="comment">// Couldn’t find Gum</span></span><br><span class="line"><span class="comment">// After Class.forName(&quot;Gum&quot;)</span></span><br><span class="line"><span class="comment">// Loading Cookie</span></span><br><span class="line"><span class="comment">// After creating Cookie</span></span><br></pre></td></tr></table></figure>

<p>当各个类在第一次调用时对应的静态代码块就会被调用，输出我们定制的信息。上例有一个比较特殊的语法 <code>forName()</code> 我们可以通过这个方法拿到对应的 Class 引用，当然如果找不到会抛 <code>ClassNotFoundExcepiton</code>。如果实体类已经创建了，你也可以通过 Object.getClass() 来拿到对应的类应用。</p>
<p>上例中通过 forName 调用 Gum 类的代码段，按理说是不会报错的，可能是例子中没有给全路径的关系。示例中应该写成连续调用两次，但是 log 只打印一次这样的形式可能更好。</p>
<p>下面这个示例展示了部分 Class 中的常用方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> samples;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">HasBatteries</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Waterproof</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shoots</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toy</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Comment out the following default constructor</span></span><br><span class="line">    <span class="comment">// to see NoSuchMethodError from (*1*)</span></span><br><span class="line">    Toy() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Toy(<span class="keyword">int</span> i) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FancyToy</span> <span class="keyword">extends</span> <span class="title">Toy</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">HasBatteries</span>, <span class="title">Waterproof</span>, <span class="title">Shoots</span> </span>&#123;</span><br><span class="line">    FancyToy() &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printlnInfo</span><span class="params">(Class cc)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Class name: &quot;</span> + cc.getName() +</span><br><span class="line">                <span class="string">&quot; is interface? [&quot;</span> + cc.isInterface() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Simple name: &quot;</span> + cc.getSimpleName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Canonical name : &quot;</span> + cc.getCanonicalName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Class.forName(<span class="string">&quot;samples.FancyToy&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Can’t find FancyToy&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        printlnInfo(c);</span><br><span class="line">        <span class="keyword">for</span> (Class face : c.getInterfaces())</span><br><span class="line">            printlnInfo(face);</span><br><span class="line">        Class up = c.getSuperclass();</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Requires default constructor:</span></span><br><span class="line">            obj = up.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Cannot instantiate&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Cannot access&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        printlnInfo(obj.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Class name: samples.FancyToy is interface? [false]</span></span><br><span class="line"><span class="comment">// Simple name: FancyToy</span></span><br><span class="line"><span class="comment">// Canonical name : samples.FancyToy</span></span><br><span class="line"><span class="comment">// Class name: samples.HasBatteries is interface? [true]</span></span><br><span class="line"><span class="comment">// Simple name: HasBatteries</span></span><br><span class="line"><span class="comment">// Canonical name : samples.HasBatteries</span></span><br><span class="line"><span class="comment">// Class name: samples.Waterproof is interface? [true]</span></span><br><span class="line"><span class="comment">// Simple name: Waterproof</span></span><br><span class="line"><span class="comment">// Canonical name : samples.Waterproof</span></span><br><span class="line"><span class="comment">// Class name: samples.Shoots is interface? [true]</span></span><br><span class="line"><span class="comment">// Simple name: Shoots</span></span><br><span class="line"><span class="comment">// Canonical name : samples.Shoots</span></span><br><span class="line"><span class="comment">// Class name: samples.Toy is interface? [false]</span></span><br><span class="line"><span class="comment">// Simple name: Toy</span></span><br><span class="line"><span class="comment">// Canonical name : samples.Toy</span></span><br></pre></td></tr></table></figure>

<ul>
<li>getSimpleName(): 输出类名</li>
<li>getCanonicalName(): 输出全路径名</li>
<li>islnterface(): 是否是接口</li>
<li>getlnterfaces(): 拿到类实现的接口</li>
<li>getSuperclass(): 拿到父类 Class 引用</li>
<li>newlnstance(): 创建实例，但是这个方法要求对应的类必须有<strong>默认构造函数</strong></li>
</ul>
<h3 id="Class-literals-字面量"><a href="#Class-literals-字面量" class="headerlink" title="Class literals(字面量)"></a>Class literals(字面量)</h3><p>除了上面的方法，你还可以通过使用类的字面量来拿到 Class 引用，相比与 forName() 的形式，它更简单，安全，不需要 try-catch 块，效率也更高。</p>
<p>普通类，接口，数组和基本数据类型都可以使用这个语法，对于包装类，它内部有一个 TYPE field 可以指向对应的 Class。</p>
<table>
<thead>
<tr>
<th align="left">primitive</th>
<th align="left">wrapper</th>
</tr>
</thead>
<tbody><tr>
<td align="left">boolean.class</td>
<td align="left">Boolean.TYPE</td>
</tr>
<tr>
<td align="left">char.class</td>
<td align="left">Char.TYPE</td>
</tr>
<tr>
<td align="left">byte.class</td>
<td align="left">Byte.TYPE</td>
</tr>
<tr>
<td align="left">short.class</td>
<td align="left">Short.TYPE</td>
</tr>
<tr>
<td align="left">int.class</td>
<td align="left">Integer.TYPE</td>
</tr>
<tr>
<td align="left">long.class</td>
<td align="left">Long.TYPE</td>
</tr>
<tr>
<td align="left">float.class</td>
<td align="left">Float.TYPE</td>
</tr>
<tr>
<td align="left">double.class</td>
<td align="left">Double.TYPE</td>
</tr>
<tr>
<td align="left">void.class</td>
<td align="left">Void.TYPE</td>
</tr>
</tbody></table>
<p>通常建议使用 ‘.class’ 的这种语法，它和我们平时的使用方式更统一。调用 ‘.class’ 的时候并不会自动初始化一个 Class 对象。在初始化 Class 时有三个步骤：</p>
<ol>
<li>Loading, which is performed by the class loader. 找到生成 Class 对应的字节码</li>
<li>Linking. 验证字节码，为静态变量分配空间，解决依赖问题</li>
<li>Initialization. 如果还有父类，父类会先初始化，然后执行静态构造器和代码块</li>
</ol>
<p>初始化会延期，直到确定第一个静态方法(构造函数是一个隐式的静态方法)或非常量的静态 field 引用：</p>
<p>示例说明：</p>
<p>我们声明了三个 Initabl 类做测试，每个类都包含一个 static 代码段答应测试 log 来显示类初始化是否被执行。</p>
<ul>
<li>Initable 包含两个常量，第一个静态常量，第二个是计算后才能得到的值。通过 class 调用变量一时，类不会被初始化。调用第二个变量时，会调用到静态方法，类初始化被触发</li>
<li>在调用 Initable2.staticNonFinal 时，由于他是一个静态非常量，所以初始化被触发</li>
<li>Initable3 测试时，通过 forName 调用，初始化必定被触发</li>
</ul>
<p>final 即 常量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> review;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Initable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> staticFinal = <span class="number">47</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> staticFinal2 =</span><br><span class="line">            ClassInitialization.rand.nextInt(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Initializing Initable&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Initable2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> staticNonFinal = <span class="number">147</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Initializing Initable2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Initable3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> staticNonFinal = <span class="number">74</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Initializing Initable3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassInitialization</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class initable = Initable.class;</span><br><span class="line">        System.out.println(<span class="string">&quot;After creating Initable ref&quot;</span>);</span><br><span class="line">        <span class="comment">// Does not trigger initialization:</span></span><br><span class="line">        System.out.println(Initable.staticFinal);</span><br><span class="line">        <span class="comment">// Does trigger initialization:</span></span><br><span class="line">        System.out.println(Initable.staticFinal2);</span><br><span class="line">        <span class="comment">// Does trigger initialization:</span></span><br><span class="line">        System.out.println(Initable2.staticNonFinal);</span><br><span class="line">        Class initable3 = Class.forName(<span class="string">&quot;review.Initable3&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;After creating Initable3 ref&quot;</span>);</span><br><span class="line">        System.out.println(Initable3.staticNonFinal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// After creating Initable ref</span></span><br><span class="line"><span class="comment">// 47</span></span><br><span class="line"><span class="comment">// Initializing Initable</span></span><br><span class="line"><span class="comment">// 258</span></span><br><span class="line"><span class="comment">// Initializing Initable2</span></span><br><span class="line"><span class="comment">// 147</span></span><br><span class="line"><span class="comment">// Initializing Initable3</span></span><br><span class="line"><span class="comment">// After creating Initable3 ref</span></span><br><span class="line"><span class="comment">// 74</span></span><br></pre></td></tr></table></figure>

<p>实际上，初始化会尽可能晚的执行。从 initable 的例子可以看出，调用 ‘.class’ 语法并不会导致一个 Class 的初始化，但是从 initable3 可以看出 Class.forName() 会直接导致初始化。</p>
<p>如果调用的是 static final 这种编译期常量，如 Initable.staticFinal 所示，那么该值也可以在类为初始化时就可用。</p>
<p>如果变量不是 final 类型的，那么在访问之前就需要进行 link 和 initialization 动作，如 Initable2.staticNonFinal 所示。</p>
<h3 id="Generic-class-references"><a href="#Generic-class-references" class="headerlink" title="Generic class references"></a>Generic class references</h3><p>具体的 Class 对象包含了静态变量，方法等创建一个对象所需要的所有必要元素。但是在 Java 5 之前这种 reference 都是 object 类型的，但是 Java 5 之后，通过引入泛型，我们可以用一种更特殊的方式指代它。</p>
<p>实例说明：</p>
<p>同样是持有 int 的 class reference，如果没有采用泛型，reference 之间可以随便关联，如果带有泛型则会进行类型检测。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClassReferences</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class intClass = <span class="keyword">int</span>.class;</span><br><span class="line">        Class&lt;Integer&gt; genericIntClass = <span class="keyword">int</span>.class;</span><br><span class="line">        genericIntClass = Integer.class; // Same thing</span><br><span class="line">        intClass = <span class="keyword">double</span>.class;</span><br><span class="line">        <span class="comment">// genericIntClass = double.class; // Illegal</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你想要更宽松的类型检测，可以使用类似 <code>Class&lt;? extends Number&gt; genericNumberClass = int.class;</code> 的语法。</p>
<p>在 Java 5 中 Class&lt;?&gt; 效果上和 Class 等价，但是前者没有 warning, 因语义上他更清晰的表明，这个 Class 不是一个 non-specific 的类。</p>
<p>Class 声明中加入泛型语法的唯一作用就是在编译期进行类型检测。</p>
<p>实例说明：</p>
<p>简单的泛型使用案例，就是没什么逻辑，只是使用，看起来感觉没什么目的，比较难记忆。CountedInteger 的 counter 属性是一个静态变量，充当实例的 id 的角色。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountedInteger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Long.toString(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilledList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FilledList</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">create</span><span class="params">(<span class="keyword">int</span> nElements)</span> </span>&#123;</span><br><span class="line">        List&lt;T&gt; result = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nElements; i++)</span><br><span class="line">                result.add(type.newInstance());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FilledList&lt;CountedInteger&gt; fl =</span><br><span class="line">                <span class="keyword">new</span> FilledList&lt;CountedInteger&gt;(CountedInteger.class);</span><br><span class="line">        System.out.println(fl.create(<span class="number">15</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]</span></span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ol>
<li>CountedInteger 必须有默认的无参构造函数，不然嗲用 nweInstance 会抛错</li>
<li>如果带有泛型，newInstance 直接返回对应的对象，而不是 Object 对象</li>
</ol>
<p>对应下面的例子，up 在指定类型的时候用的是 <code>&lt;? super FancyToy&gt;</code> (FancyToy 的超类)，并不能表示为直接父类，所以下面的 newInstanc() 对应的类型为 Object。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericToyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;FancyToy&gt; ftClass = FancyToy.class;</span><br><span class="line">        <span class="comment">// Produces exact type:</span></span><br><span class="line">        FancyToy fancyToy = ftClass.newInstance();</span><br><span class="line">        Class&lt;? <span class="keyword">super</span> FancyToy&gt; up = ftClass.getSuperclass();</span><br><span class="line">        <span class="comment">// This won’t compile:</span></span><br><span class="line">        <span class="comment">// Class&lt;Toy&gt; up2 = ftClass.getSuperclass();</span></span><br><span class="line">        <span class="comment">// Only produces Object:</span></span><br><span class="line">        Object obj = up.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="New-cast-syntax"><a href="#New-cast-syntax" class="headerlink" title="New cast syntax"></a>New cast syntax</h3><p>Java 5 中还为 Class 添加了 cast(object) 方法用于将参数强转为 Class 对应的类实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span> <span class="keyword">extends</span> <span class="title">Building</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassCasts</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Building b = <span class="keyword">new</span> House();</span><br><span class="line">        Class&lt;House&gt; houseType = House.class;</span><br><span class="line">        House h = houseType.cast(b);</span><br><span class="line">        h = (House) b; <span class="comment">// ... or just do this.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用括号的那种强转方式要比调用方法的方便很多，需要注意的是，一开始 new 的时候对应的实现是 House 才能在后面进行 b 强转成 a 的，如果你一开始声明为 new Building() 而且两边的方法有出入，运行时会抛异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span> <span class="keyword">extends</span> <span class="title">Building</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m1...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassCasts</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Building b = <span class="keyword">new</span> Building();</span><br><span class="line">        ((House)b).method01();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Exception in thread &quot;main&quot; java.lang.ClassCastException</span></span><br><span class="line"><span class="comment">// at review.ClassCasts.main(ClassCasts.java:15)</span></span><br></pre></td></tr></table></figure>

<h2 id="Checking-before-a-cast"><a href="#Checking-before-a-cast" class="headerlink" title="Checking before a cast"></a>Checking before a cast</h2><p>父类强转到子类的过程叫做 downcast, java 中如果没有显示的 check 的话，这种强转是不允许的。这里就要提到 RTTI 的第三种模式 instanceof 语法。<code>if (x instanceof Dog) ((Dog)x).bark();</code></p>
<p>实例说明：</p>
<ol>
<li>Individual 具体 code 在 Containers in Depth 那一个章节，只需要知道它里面有一个 id() 方法可以给每个继承这个累的对象一个唯一的值做 id, 构造函数的参数则是自定义的 name, 可以重复的</li>
<li>定义了一大串有继承关系的类，继承关系如下</li>
<li>定义一个抽象构造器 PetCreator 创建声明的这些类</li>
<li>实现这个抽象构造器 ForNameCreator，其实就是将声明的类通过 Class.forName 拿到引用再塞到 type() 方法的返回值中</li>
<li>便携测试程序 PetCount, 创建一个内部类 PetCounter 统计 pet 的出现次数，有一个静态方法 countPets 传入 PetCreater 用来随机创建 Pet 对象</li>
</ol>
<p>individual -&gt; person<br>        |-&gt; pet -&gt; dog - mutt(串串)<br>            ｜      ｜-&gt; pug(哈巴狗)<br>            ｜-&gt; cat -&gt; EgyptianMau (埃及猫)<br>            ｜    ｜-&gt; Manx(曼岛猫) -&gt; Cymric(威尔士猫)<br>            ｜-&gt; Rodent 啮齿动物 -&gt; Rat 鼠 -&gt; Mouse 小鼠<br>                    |-&gt; Hamster 仓鼠</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Individual</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Individual</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Individual</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ‘name’ is optional:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Individual</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName() +</span><br><span class="line">                (name == <span class="keyword">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot; &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o <span class="keyword">instanceof</span> Individual &amp;&amp;</span><br><span class="line">                id == ((Individual) o).id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">17</span>;</span><br><span class="line">        <span class="keyword">if</span> (name != <span class="keyword">null</span>)</span><br><span class="line">            result = <span class="number">37</span> * result + name.hashCode();</span><br><span class="line">        result = <span class="number">37</span> * result + (<span class="keyword">int</span>) id;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Individual arg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Compare by class name first:</span></span><br><span class="line">        String first = getClass().getSimpleName();</span><br><span class="line">        String argFirst = arg.getClass().getSimpleName();</span><br><span class="line">        <span class="keyword">int</span> firstCompare = first.compareTo(argFirst);</span><br><span class="line">        <span class="keyword">if</span> (firstCompare != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> firstCompare;</span><br><span class="line">        <span class="keyword">if</span> (name != <span class="keyword">null</span> &amp;&amp; arg.name != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> secondCompare = name.compareTo(arg.name);</span><br><span class="line">            <span class="keyword">if</span> (secondCompare != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> secondCompare;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (arg.id &lt; id ? -<span class="number">1</span> : (arg.id == id ? <span class="number">0</span> : <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Individual</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> <span class="keyword">extends</span> <span class="title">Individual</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pet</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mutt</span> <span class="keyword">extends</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mutt</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mutt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pug</span> <span class="keyword">extends</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pug</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EgyptianMau</span> <span class="keyword">extends</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EgyptianMau</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EgyptianMau</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manx</span> <span class="keyword">extends</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manx</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cymric</span> <span class="keyword">extends</span> <span class="title">Manx</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cymric</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cymric</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rodent</span> <span class="keyword">extends</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rodent</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rodent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rat</span> <span class="keyword">extends</span> <span class="title">Rodent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rat</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">Rodent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mouse</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hamster</span> <span class="keyword">extends</span> <span class="title">Rodent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hamster</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hamster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PetCreator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模版方法 模式</span></span><br><span class="line">    <span class="comment">// The List of the different types of Pet to create:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;Class&lt;? extends Pet&gt;&gt; types();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">randomPet</span><span class="params">()</span> </span>&#123; <span class="comment">// Create one random Pet</span></span><br><span class="line">        <span class="keyword">int</span> n = rand.nextInt(types().size());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> types().get(n).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Pet[] createArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">        Pet[] result = <span class="keyword">new</span> Pet[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            result[i] = randomPet();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Pet&gt; <span class="title">arrayList</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Pet&gt; result = <span class="keyword">new</span> ArrayList&lt;Pet&gt;();</span><br><span class="line">        Collections.addAll(result, createArray(size));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForNameCreator</span> <span class="keyword">extends</span> <span class="title">PetCreator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Class&lt;? extends Pet&gt;&gt; types =</span><br><span class="line">            <span class="keyword">new</span> ArrayList&lt;Class&lt;? extends Pet&gt;&gt;();</span><br><span class="line">    <span class="comment">// Types that you want to be randomly created:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] typeNames = &#123;</span><br><span class="line">            <span class="string">&quot;review.Mutt&quot;</span>,</span><br><span class="line">            <span class="string">&quot;review.Pug&quot;</span>,</span><br><span class="line">            <span class="string">&quot;review.EgyptianMau&quot;</span>,</span><br><span class="line">            <span class="string">&quot;review.Manx&quot;</span>,</span><br><span class="line">            <span class="string">&quot;review.Cymric&quot;</span>,</span><br><span class="line">            <span class="string">&quot;review.Rat&quot;</span>,</span><br><span class="line">            <span class="string">&quot;review.Mouse&quot;</span>,</span><br><span class="line">            <span class="string">&quot;review.Hamster&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (String name : typeNames)</span><br><span class="line">                types.add((Class&lt;? extends Pet&gt;) Class.forName(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        loader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Class&lt;? extends Pet&gt;&gt; types() &#123;</span><br><span class="line">        <span class="keyword">return</span> types;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetCount</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PetCounter</span> <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">String</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">            Integer quantity = get(type);</span><br><span class="line">            <span class="keyword">if</span>(quantity == <span class="keyword">null</span>)</span><br><span class="line">                put(type, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                put(type, quantity + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">countPets</span><span class="params">(PetCreator creator)</span> </span>&#123;</span><br><span class="line">        PetCounter counter= <span class="keyword">new</span> PetCounter();</span><br><span class="line">        <span class="keyword">for</span>(Pet pet : creator.createArray(<span class="number">20</span>)) &#123;</span><br><span class="line">            <span class="comment">// List each individual pet:</span></span><br><span class="line">            System.out.println(pet.getClass().getSimpleName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Pet)</span><br><span class="line">                counter.count(<span class="string">&quot;Pet&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Dog)</span><br><span class="line">                counter.count(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Mutt)</span><br><span class="line">                counter.count(<span class="string">&quot;Mutt&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Pug)</span><br><span class="line">                counter.count(<span class="string">&quot;Pug&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Cat)</span><br><span class="line">                counter.count(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Manx)</span><br><span class="line">                counter.count(<span class="string">&quot;EgyptianMau&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Manx)</span><br><span class="line">                counter.count(<span class="string">&quot;Manx&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Manx)</span><br><span class="line">                counter.count(<span class="string">&quot;Cymric&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Rodent)</span><br><span class="line">                counter.count(<span class="string">&quot;Rodent&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Rat)</span><br><span class="line">                counter.count(<span class="string">&quot;Rat&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Mouse)</span><br><span class="line">                counter.count(<span class="string">&quot;Mouse&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Hamster)</span><br><span class="line">                counter.count(<span class="string">&quot;Hamster&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Show the counts:</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(counter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        countPets(<span class="keyword">new</span> ForNameCreator());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Rat </span></span><br><span class="line"><span class="comment">// Manx </span></span><br><span class="line"><span class="comment">// Cymric </span></span><br><span class="line"><span class="comment">// Mutt </span></span><br><span class="line"><span class="comment">// Pug </span></span><br><span class="line"><span class="comment">// Cymric </span></span><br><span class="line"><span class="comment">// Pug </span></span><br><span class="line"><span class="comment">// Manx </span></span><br><span class="line"><span class="comment">// Cymric </span></span><br><span class="line"><span class="comment">// Rat </span></span><br><span class="line"><span class="comment">// EgyptianMau </span></span><br><span class="line"><span class="comment">// Hamster </span></span><br><span class="line"><span class="comment">// EgyptianMau </span></span><br><span class="line"><span class="comment">// Mutt </span></span><br><span class="line"><span class="comment">// Mutt </span></span><br><span class="line"><span class="comment">// Cymric </span></span><br><span class="line"><span class="comment">// Mouse </span></span><br><span class="line"><span class="comment">// Pug </span></span><br><span class="line"><span class="comment">// Mouse </span></span><br><span class="line"><span class="comment">// Cymric </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;EgyptianMau=7, Pug=3, Rat=2, Cymric=7, Mouse=2, Cat=9, Manx=7, Rodent=5, Mutt=3, Dog=6, Pet=20, Hamster=1&#125;</span></span><br></pre></td></tr></table></figure>

<p>提示：当你的程序中充满了大量的 instanceof 判断，那么你的成程序很可能有缺陷</p>
<h3 id="Using-class-literals"><a href="#Using-class-literals" class="headerlink" title="Using class literals"></a>Using class literals</h3><p>如果我们使用 PetCreator 的类字面量(.class)来重构它的实现，省去了 try-catch block, 而且表达的语义更清晰, 程序会更明了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiteralPetCreator</span> <span class="keyword">extends</span> <span class="title">PetCreator</span> </span>&#123;</span><br><span class="line">    <span class="comment">// No try block needed.</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Class&lt;? extends Pet&gt;&gt; allTypes =</span><br><span class="line">            Collections.unmodifiableList(Arrays.asList(</span><br><span class="line">                    Pet.class, Dog.class, Cat.class, Rodent.class,</span><br><span class="line">                    Mutt.class, Pug.class, EgyptianMau.class, Manx.class,</span><br><span class="line">                    Cymric.class, Rat.class, Mouse.class, Hamster.class));</span><br><span class="line">    <span class="comment">// Types for random creation:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Class&lt;? extends Pet&gt;&gt; types =</span><br><span class="line">            allTypes.subList(allTypes.indexOf(Mutt.class), allTypes.size());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Class&lt;? extends Pet&gt;&gt; types() &#123;</span><br><span class="line">        <span class="keyword">return</span> types;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(types);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// [class review.Mutt, class review.Pug, class review.EgyptianMau, class review.Manx, class review.Cymric, class review.Rat, class review.Mouse, class review.Hamster]</span></span><br></pre></td></tr></table></figure>

<p>新建一个 Pets 工具类用来创建创建 pet, 书上管这种方式叫做 Facade 模式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pets</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> PetCreator creator =</span><br><span class="line">            <span class="keyword">new</span> LiteralPetCreator();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pet <span class="title">randomPet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> creator.randomPet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Pet[] createArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">        <span class="keyword">return</span> creator.createArray(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Pet&gt; <span class="title">arrayList</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> creator.arrayList(size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This also provides indirection to randomPet( ), createArray( ) and arrayList( ).<br>Because PetCount.countPets( ) takes a PetCreator argument, we can easily test the<br>LiteralPetCreator (via the above Facade): </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetCount2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PetCount.countPets(Pets.creator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="A-dynamic-instanceof"><a href="#A-dynamic-instanceof" class="headerlink" title="A dynamic instanceof"></a>A dynamic instanceof</h3><p>新建一个 PetCount 继承自 LinedHashMap, 这种从现成的 Map 对象继承的做法我以前到是没怎么见过，也没怎么用过，长见识了，而且用起来挺方便的。</p>
<p><code>Class.isInstance()</code> 效果上和 <code>instanceof</code> 等价，继承 map 之后通过调用 entrySet() 拿到所有的 entry, 然后通过范型遍历，节省了很多代码，和之前那一串 forName 相比干净了很多。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetCount3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PetCounter</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">Class</span>&lt;? <span class="keyword">extends</span> <span class="title">Pet</span>&gt;,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PetCounter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(LiteralPetCreator.allTypes.stream().collect(Collectors.toMap(Function.identity(), x-&gt;<span class="number">0</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(Pet pet)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Class.isInstance() eliminates instanceof:</span></span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;Class&lt;? extends Pet&gt;, Integer&gt; pair : entrySet())</span><br><span class="line">                <span class="keyword">if</span>(pair.getKey().isInstance(pet))</span><br><span class="line">                    put(pair.getKey(), pair.getValue() + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            StringBuilder result = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;Class&lt;? extends Pet&gt;,Integer&gt; pair</span><br><span class="line">                    : entrySet()) &#123;</span><br><span class="line">                result.append(pair.getKey().getSimpleName());</span><br><span class="line">                result.append(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">                result.append(pair.getValue());</span><br><span class="line">                result.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            result.delete(result.length()-<span class="number">2</span>, result.length());</span><br><span class="line">            result.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PetCounter petCount = <span class="keyword">new</span> PetCounter();</span><br><span class="line">        <span class="keyword">for</span>(Pet pet : Pets.createArray(<span class="number">20</span>)) &#123;</span><br><span class="line">            System.out.println(pet.getClass().getSimpleName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            petCount.count(pet);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(petCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Counting-recursively"><a href="#Counting-recursively" class="headerlink" title="Counting recursively"></a>Counting recursively</h3><p>除了 Class.isInstance() 还可以使用 isAssignFrom 来做类型判断，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeCounter</span> <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">Class</span>&lt;?&gt;,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; baseType;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TypeCounter</span><span class="params">(Class&lt;?&gt; baseType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.baseType = baseType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; type = obj.getClass();</span><br><span class="line">        <span class="keyword">if</span>(!baseType.isAssignableFrom(type))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(obj + <span class="string">&quot; incorrect type: &quot;</span></span><br><span class="line">                    + type + <span class="string">&quot;, should be type or subtype of &quot;</span></span><br><span class="line">                    + baseType);</span><br><span class="line">        countClass(type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">countClass</span><span class="params">(Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line">        Integer quantity = get(type);</span><br><span class="line">        put(type, quantity == <span class="keyword">null</span> ? <span class="number">1</span> : quantity + <span class="number">1</span>);</span><br><span class="line">        Class&lt;?&gt; superClass = type.getSuperclass();</span><br><span class="line">        <span class="keyword">if</span>(superClass != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                baseType.isAssignableFrom(superClass))</span><br><span class="line">            countClass(superClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Class&lt;?&gt;,Integer&gt; pair : entrySet()) &#123;</span><br><span class="line">            result.append(pair.getKey().getSimpleName());</span><br><span class="line">            result.append(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            result.append(pair.getValue());</span><br><span class="line">            result.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result.delete(result.length()-<span class="number">2</span>, result.length());</span><br><span class="line">        result.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetCount4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TypeCounter counter = <span class="keyword">new</span> TypeCounter(Pet.class);</span><br><span class="line">        <span class="keyword">for</span>(Pet pet : Pets.createArray(<span class="number">20</span>)) &#123;</span><br><span class="line">            System.out.println(pet.getClass().getSimpleName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            counter.count(pet);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(counter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这几个示例其实就说明了一个点，使用 isInstance() 和 isAssignFrom() 可以绕开 forName 使得代码整洁，好看很多。整洁好看也就意味着更少的维护成本。</p>
<h2 id="Registered-factories"><a href="#Registered-factories" class="headerlink" title="Registered factories"></a>Registered factories</h2><p>上面的例子有一个问题，就是每次你新建一个 Pets 的子类，你必须去 LiteralPetCreator 中将这个新建的 Class 手动添加进去，未免有点累赘。这里有两种解决方案，一种就是新写一个工具类遍历代码，找到 Pets 的子类统一处理，另一种方案就是将所有的类放到一个地方统一管理，基类就是很好的一个地方，示例如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="function">T <span class="title">create</span><span class="params">()</span></span>; &#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> List&lt;Factory&lt;? extends Part&gt;&gt; partFactories =</span><br><span class="line">            <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// Collections.addAll() gives an &quot;unchecked generic</span></span><br><span class="line">        <span class="comment">// array creation ... for varargs parameter&quot; warning.</span></span><br><span class="line">        partFactories.add(<span class="keyword">new</span> FuelFilter.Factory());</span><br><span class="line">        partFactories.add(<span class="keyword">new</span> AirFilter.Factory());</span><br><span class="line">        partFactories.add(<span class="keyword">new</span> CabinAirFilter.Factory());</span><br><span class="line">        partFactories.add(<span class="keyword">new</span> OilFilter.Factory());</span><br><span class="line">        partFactories.add(<span class="keyword">new</span> FanBelt.Factory());</span><br><span class="line">        partFactories.add(<span class="keyword">new</span> PowerSteeringBelt.Factory());</span><br><span class="line">        partFactories.add(<span class="keyword">new</span> GeneratorBelt.Factory());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Part <span class="title">createRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = rand.nextInt(partFactories.size());</span><br><span class="line">        <span class="keyword">return</span> partFactories.get(n).create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Filter</span> <span class="keyword">extends</span> <span class="title">Part</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FuelFilter</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Create a Class Factory for each specific type:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">review</span>.<span class="title">Factory</span>&lt;<span class="title">FuelFilter</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> FuelFilter <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FuelFilter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirFilter</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">review</span>.<span class="title">Factory</span>&lt;<span class="title">AirFilter</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> AirFilter <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AirFilter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CabinAirFilter</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">review</span>.<span class="title">Factory</span>&lt;<span class="title">CabinAirFilter</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> CabinAirFilter <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CabinAirFilter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OilFilter</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">review</span>.<span class="title">Factory</span>&lt;<span class="title">OilFilter</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> OilFilter <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> OilFilter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Belt</span> <span class="keyword">extends</span> <span class="title">Part</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FanBelt</span> <span class="keyword">extends</span> <span class="title">Belt</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">review</span>.<span class="title">Factory</span>&lt;<span class="title">FanBelt</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> FanBelt <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FanBelt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneratorBelt</span> <span class="keyword">extends</span> <span class="title">Belt</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">review</span>.<span class="title">Factory</span>&lt;<span class="title">GeneratorBelt</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> GeneratorBelt <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> GeneratorBelt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PowerSteeringBelt</span> <span class="keyword">extends</span> <span class="title">Belt</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">review</span>.<span class="title">Factory</span>&lt;<span class="title">PowerSteeringBelt</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> PowerSteeringBelt <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PowerSteeringBelt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisteredFactories</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            System.out.println(Part.createRandom());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// GeneratorBelt</span></span><br><span class="line"><span class="comment">// CabinAirFilter</span></span><br><span class="line"><span class="comment">// GeneratorBelt</span></span><br><span class="line"><span class="comment">// AirFilter</span></span><br><span class="line"><span class="comment">// PowerSteeringBelt</span></span><br><span class="line"><span class="comment">// CabinAirFilter</span></span><br><span class="line"><span class="comment">// FuelFilter</span></span><br><span class="line"><span class="comment">// PowerSteeringBelt</span></span><br><span class="line"><span class="comment">// PowerSteeringBelt</span></span><br><span class="line"><span class="comment">// FuelFilter</span></span><br></pre></td></tr></table></figure>

<h2 id="instanceof-vs-Class-equivalence"><a href="#instanceof-vs-Class-equivalence" class="headerlink" title="instanceof vs. Class equivalence"></a>instanceof vs. Class equivalence</h2>]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>type</tag>
      </tags>
  </entry>
  <entry>
    <title>Java class 文件架构摘要</title>
    <url>/hexo/2020/11/19/Java-class-file-structure/</url>
    <content><![CDATA[<p>目标：通过阅读 深入理解 JVM 虚拟机 第三版 的第 6 章，结合 ASM 里的 Reader 和 Visitor 对 class 文件有个一比较深入的了解。</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV12y4y1B7pn?p=12">bilibili 参考视频</a>，很棒，白嫖</li>
</ul>
<h2 id="6-2-无关性的基石"><a href="#6-2-无关性的基石" class="headerlink" title="6.2 无关性的基石"></a>6.2 无关性的基石</h2><p>Java 虚拟机不与包括 Java 语言在内的任何语言绑定，它只与 Class 文件这种特定的二进制文件格式所关联，Class 文件中包含了 Java 虚拟机指令集，符号表以及若干其他辅助信息。</p>
<h2 id="6-3-Class-类文件的结构"><a href="#6-3-Class-类文件的结构" class="headerlink" title="6.3 Class 类文件的结构"></a>6.3 Class 类文件的结构</h2><blockquote>
<p>Idea 安装 BinEd 插件可以查看 Class 文件在各种进制下的值</p>
</blockquote>
<p>Class 文件是一组以 8 个字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑排列在文件之中，中间没有添加任何分隔符，这使得整个 Class 文件中存储的内容几乎全部是程序运行的必要数据，没有空隙存在。</p>
<p>Class 文件结构中只有两种数据类型：无符号数 + 表</p>
<ul>
<li>无符号数：是基本数据类，以 u1, u2, u4, u8 分别表示 1，2，4，8 个字节的无符号数。无符号数可以用来描述数字，索引引用，数量值或者按照 UTF-8 编码构成的字符串值</li>
<li>表：n 个无符号数 + 其他表构成的复合数据类型，命名习惯性的以 _info 结尾。表用于描述有层次关系的复合结构数据，整个 Class 可以看作一张表。</li>
</ul>
<p>Class 文件格式表：</p>
<table>
<thead>
<tr>
<th align="left">Type</th>
<th align="left">Name</th>
<th align="left">Count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u4</td>
<td align="left">magic</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">minor_version</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">major_version</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">constant_pool_count</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">cp_info</td>
<td align="left">constant_pool</td>
<td align="left">constant_pool_count-1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">access_flags</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">this_class</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">super_class</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">interfaces_count</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">interfaces</td>
<td align="left">interfaces_count</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">fields_count</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">field_info</td>
<td align="left">fields</td>
<td align="left">fields_count</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">methods_count</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">method_info</td>
<td align="left">methods</td>
<td align="left">methods_count</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">attributes_count</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">attribute_info</td>
<td align="left">attributes</td>
<td align="left">attributes_count</td>
</tr>
</tbody></table>
<h3 id="6-3-1-魔数与-Class-文件的版本"><a href="#6-3-1-魔数与-Class-文件的版本" class="headerlink" title="6.3.1 魔数与 Class 文件的版本"></a>6.3.1 魔数与 Class 文件的版本</h3><p>Class 文件前 4 个字节被称为魔数，值为 0xCAFEBABE，用来表明文件类型。紧接着 4 个字节为主次版本号。</p>
<p>Java 虚拟机规范在 Class 文件校验部分明确要求，即使文件格式并未发生任何变化，虚拟机也必须<strong>拒绝执行</strong>超过其版本号的 Class 文件。</p>
<table>
<thead>
<tr>
<th align="left">JDK version</th>
<th align="left">version number</th>
</tr>
</thead>
<tbody><tr>
<td align="left">JDK 13</td>
<td align="left">57</td>
</tr>
<tr>
<td align="left">JDK 12</td>
<td align="left">56</td>
</tr>
<tr>
<td align="left">JDK 11</td>
<td align="left">55</td>
</tr>
<tr>
<td align="left">JDK 10</td>
<td align="left">54</td>
</tr>
<tr>
<td align="left">JDK 9</td>
<td align="left">53</td>
</tr>
<tr>
<td align="left">JDK 8</td>
<td align="left">52</td>
</tr>
<tr>
<td align="left">JDK 7</td>
<td align="left">51</td>
</tr>
<tr>
<td align="left">JDK 6.0</td>
<td align="left">50</td>
</tr>
<tr>
<td align="left">JDK 5.0</td>
<td align="left">49</td>
</tr>
<tr>
<td align="left">JDK 1.4</td>
<td align="left">48</td>
</tr>
<tr>
<td align="left">JDK 1.3</td>
<td align="left">47</td>
</tr>
<tr>
<td align="left">JDK 1.2</td>
<td align="left">46</td>
</tr>
<tr>
<td align="left">JDK 1.1</td>
<td align="left">45</td>
</tr>
</tbody></table>
<p>仿照参考书写下测试代码, 不知道是不是编译器版本不一样，结果从常量池开始有些许偏差，不过无伤大雅，学习路径，方法还是一样的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> c631;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Class 文件 16 进制表达式</p>
<table>
<thead>
<tr>
<th align="center">line</th>
<th align="left">00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f</th>
<th align="left">hex value</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0000000000</td>
<td align="left">ca fe ba be 00 00 00 32 00 16 0a 00 04 00 12 09</td>
<td align="left">…….2……..</td>
</tr>
<tr>
<td align="center">0000000010</td>
<td align="left">00 03 00 13 07 00 14 07 00 15 01 00 01 6d 01 00</td>
<td align="left">………….m..</td>
</tr>
<tr>
<td align="center">0000000020</td>
<td align="left">01 49 01 00 06 3c 69 6e 69 74 3e 01 00 03 28 29</td>
<td align="left">.I…<init>…()</td>
</tr>
<tr>
<td align="center">0000000030</td>
<td align="left">56 01 00 04 43 6f 64 65 01 00 0f 4c 69 6e 65 4e</td>
<td align="left">V…Code…LineN</td>
</tr>
<tr>
<td align="center">0000000040</td>
<td align="left">75 6d 62 65 72 54 61 62 6c 65 01 00 12 4c 6f 63</td>
<td align="left">umberTable…Loc</td>
</tr>
<tr>
<td align="center">0000000050</td>
<td align="left">61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65 01</td>
<td align="left">alVariableTable.</td>
</tr>
<tr>
<td align="center">0000000060</td>
<td align="left">00 04 74 68 69 73 01 00 10 4c 63 36 33 31 2f 54</td>
<td align="left">..this…Lc631/T</td>
</tr>
<tr>
<td align="center">0000000070</td>
<td align="left">65 73 74 43 6c 61 73 73 3b 01 00 03 69 6e 63 01</td>
<td align="left">estClass;…inc.</td>
</tr>
<tr>
<td align="center">0000000080</td>
<td align="left">00 03 28 29 49 01 00 0a 53 6f 75 72 63 65 46 69</td>
<td align="left">..()I…SourceFi</td>
</tr>
<tr>
<td align="center">0000000090</td>
<td align="left">6c 65 01 00 0e 54 65 73 74 43 6c 61 73 73 2e 6a</td>
<td align="left">le…TestClass.j</td>
</tr>
<tr>
<td align="center">00000000a0</td>
<td align="left">61 76 61 0c 00 07 00 08 0c 00 05 00 06 01 00 0e</td>
<td align="left">ava………….</td>
</tr>
<tr>
<td align="center">00000000b0</td>
<td align="left">63 36 33 31 2f 54 65 73 74 43 6c 61 73 73 01 00</td>
<td align="left">c631/TestClass..</td>
</tr>
<tr>
<td align="center">00000000c0</td>
<td align="left">10 6a 61 76 61 2f 6c 61 6e 67 2f 4f 62 6a 65 63</td>
<td align="left">.java/lang/Objec</td>
</tr>
<tr>
<td align="center">00000000d0</td>
<td align="left">74 00 21 00 03 00 04 00 00 00 01 00 02 00 05 00</td>
<td align="left">t.!………….</td>
</tr>
<tr>
<td align="center">00000000e0</td>
<td align="left">06 00 00 00 02 00 01 00 07 00 08 00 01 00 09 00</td>
<td align="left">…………….</td>
</tr>
<tr>
<td align="center">00000000f0</td>
<td align="left">00 00 2f 00 01 00 01 00 00 00 05 2a b7 00 01 b1</td>
<td align="left">../……..*….</td>
</tr>
<tr>
<td align="center">0000000100</td>
<td align="left">00 00 00 02 00 0a 00 00 00 06 00 01 00 00 00 03</td>
<td align="left">…………….</td>
</tr>
<tr>
<td align="center">0000000110</td>
<td align="left">00 0b 00 00 00 0c 00 01 00 00 00 05 00 0c 00 0d</td>
<td align="left">…………….</td>
</tr>
<tr>
<td align="center">0000000120</td>
<td align="left">00 00 00 01 00 0e 00 0f 00 01 00 09 00 00 00 31</td>
<td align="left">……………1</td>
</tr>
<tr>
<td align="center">0000000130</td>
<td align="left">00 02 00 01 00 00 00 07 2a b4 00 02 04 60 ac 00</td>
<td align="left">……..*….`..</td>
</tr>
<tr>
<td align="center">0000000140</td>
<td align="left">00 00 02 00 0a 00 00 00 06 00 01 00 00 00 07 00</td>
<td align="left">…………….</td>
</tr>
<tr>
<td align="center">0000000150</td>
<td align="left">0b 00 00 00 0c 00 01 00 00 00 07 00 0c 00 0d 00</td>
<td align="left">…………….</td>
</tr>
<tr>
<td align="center">0000000160</td>
<td align="left">00 00 01 00 10 00 00 00 02 00 11</td>
<td align="left">………..</td>
</tr>
</tbody></table>
<p>魔数值 cafe, 版本号 <code>00 00 00 32</code> 转化后位 50 和我在 pom 指定的 1.6 版本 JDK 编译一致</p>
<h3 id="6-3-2-常量池"><a href="#6-3-2-常量池" class="headerlink" title="6.3.2 常量池"></a>6.3.2 常量池</h3><p>第 9-8 个字节表示常量池。常量池是从 1 开始的。示例中对应的值位 <code>00 16 - 22</code> 表明常量池总共有 21 个值。</p>
<p>PS: 常量池的 0 位空余，是为了考虑特殊情况。当指向常量池的数据需要表达 <code>不引用任何常量池中的项目</code> 这样的意思时，可以将索引值设置位 0 表示。</p>
<p>常量池主要存放两大类的常量：字面量 Literal + 符号引用 Symbolic References。字面量接近于 Java 语言层面的常量概念，符号引用则属于编译原理的概念主要包括下面几类常量：</p>
<ol>
<li>被模块导出或者开放的包 package</li>
<li>类和接口的全名限定 Fully Qualified Name</li>
<li>字段名称和描述符 Desciptor</li>
<li>方法名称和描述符</li>
<li>方法句柄和方法类型 Method Handle, Mehtod Type, Invoke Dynamic</li>
<li>动态调用点和动态常量 Dynamically-Computed Call Site, Dynamically-Computed Constant</li>
</ol>
<p>Class 文件中没有类似 C 语言中的链接，只有当 Class 文件在虚拟机中加载后才能确定内存分布。</p>
<p>常量池中每一项都是一个表，到 JDK13 为止有 17 种表结构</p>
<table>
<thead>
<tr>
<th align="left">Type</th>
<th align="left">Flag</th>
<th align="left">Desc</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CONSTANT_Utf8_info</td>
<td align="left">1</td>
<td align="left">UTF-8 编码的字符串</td>
</tr>
<tr>
<td align="left">CONSTANT_Integer_info</td>
<td align="left">3</td>
<td align="left">整型字面量</td>
</tr>
<tr>
<td align="left">CONSTANT_Float_info</td>
<td align="left">4</td>
<td align="left">浮点型字面量</td>
</tr>
<tr>
<td align="left">CONSTANT_Long_info</td>
<td align="left">5</td>
<td align="left">长整型型字面量</td>
</tr>
<tr>
<td align="left">CONSTANT_Class_info</td>
<td align="left">7</td>
<td align="left">类或接口的符号引用</td>
</tr>
<tr>
<td align="left">CONSTANT_String_info</td>
<td align="left">8</td>
<td align="left">字符串类型字面量</td>
</tr>
<tr>
<td align="left">CONSTANT_Fieldref_info</td>
<td align="left">9</td>
<td align="left">字段的符号引用</td>
</tr>
<tr>
<td align="left">CONSTANT_Methodref_info</td>
<td align="left">10</td>
<td align="left">类中方法的符号引用</td>
</tr>
<tr>
<td align="left">CONSTANT_InterfaceMethodref_info</td>
<td align="left">11</td>
<td align="left">接口中方法的符号引用</td>
</tr>
<tr>
<td align="left">CONSTANT_NameAndType_info</td>
<td align="left">12</td>
<td align="left">字段或方法的部分符号引用</td>
</tr>
<tr>
<td align="left">CONSTANT_MethodHandle_info</td>
<td align="left">15</td>
<td align="left">表示方法句柄</td>
</tr>
<tr>
<td align="left">CONSTANT_MethodType_info</td>
<td align="left">16</td>
<td align="left">表示方法类型</td>
</tr>
<tr>
<td align="left">CONSTANT_Dynamic_info</td>
<td align="left">17</td>
<td align="left">表示一个动态计算常量</td>
</tr>
<tr>
<td align="left">CONSTANT_InvokeDynamic_info</td>
<td align="left">18</td>
<td align="left">表示一个动态方法调用点</td>
</tr>
<tr>
<td align="left">CONSTANT_Module_info</td>
<td align="left">19</td>
<td align="left">表示一个模块</td>
</tr>
<tr>
<td align="left">CONSTANT_Package_info</td>
<td align="left">20</td>
<td align="left">表示一个模块中开放或者导出的包</td>
</tr>
</tbody></table>
<p>常量池第一项以 <code>0a - 10</code> 开头，查看上表得知为 CONSTANT_Methodref_info 类型的表，查询可知对应的表结构为</p>
<table>
<thead>
<tr>
<th align="left">Const Name</th>
<th align="left">Item</th>
<th align="left">Length</th>
<th align="left">desc</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CONSTANT_Methodref_info</td>
<td align="left">tag</td>
<td align="left">u1</td>
<td align="left">值为 10</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">index</td>
<td align="left">u2</td>
<td align="left">指向声明方法的类描述符 CONSTANT_Class_info 的索引项</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">index</td>
<td align="left">u2</td>
<td align="left">指向名称及类型描述符 CONSTANT_NameAndType 的索引项</td>
</tr>
</tbody></table>
<p>所以第一个常量值总共 5 个字节组成 <code>0a 00 04 00 12</code>，表示的是方法引用，类引用地址为 4，方法名称和类型地址为 18。</p>
<p>为了反向验证这样分析是否正确可以通过反编译命令 <code>javap -verbose TestClass</code> 查看 class 文件。</p>
<p>第一个常量值内容为 <code>#1 = Methodref          #4.#18         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</code> 和分析结果一致</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">C:\Users\jack\Downloads\helloworld\understanding-the-jvm\c6-file-structure\target\classes\c631&gt;javap -verbose TestClass</span><br><span class="line">警告: 文件 .\TestClass.class 不包含类 TestClass</span><br><span class="line">Classfile /C:/Users/jack/Downloads/helloworld/understanding-the-jvm/c6-file-structure/target/classes/c631/TestClass.class</span><br><span class="line">  Last modified 2020年11月19日; size 363 bytes</span><br><span class="line">  MD5 checksum 16826804824a30e99e96960a47c3a47a</span><br><span class="line">  Compiled from &quot;TestClass.java&quot;</span><br><span class="line">public class c631.TestClass</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 50</span><br><span class="line">  flags: (0x0021) ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  this_class: #3                          // c631/TestClass</span><br><span class="line">  super_class: #4                         // java/lang/Object</span><br><span class="line">  interfaces: 0, fields: 1, methods: 2, attributes: 1</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #4.#18         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = Fieldref           #3.#19         // c631/TestClass.m:I</span><br><span class="line">   #3 = Class              #20            // c631/TestClass</span><br><span class="line">   #4 = Class              #21            // java/lang/Object</span><br><span class="line">   #5 = Utf8               m</span><br><span class="line">   #6 = Utf8               I</span><br><span class="line">   #7 = Utf8               &lt;init&gt;</span><br><span class="line">   #8 = Utf8               ()V</span><br><span class="line">   #9 = Utf8               Code</span><br><span class="line">  #10 = Utf8               LineNumberTable</span><br><span class="line">  #11 = Utf8               LocalVariableTable</span><br><span class="line">  #12 = Utf8               this</span><br><span class="line">  #13 = Utf8               Lc631/TestClass;</span><br><span class="line">  #14 = Utf8               inc</span><br><span class="line">  #15 = Utf8               ()I</span><br><span class="line">  #16 = Utf8               SourceFile</span><br><span class="line">  #17 = Utf8               TestClass.java</span><br><span class="line">  #18 = NameAndType        #7:#8          // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #19 = NameAndType        #5:#6          // m:I</span><br><span class="line">  #20 = Utf8               c631/TestClass</span><br><span class="line">  #21 = Utf8               java/lang/Object</span><br><span class="line">&#123;</span><br><span class="line">  public c631.TestClass();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 3: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       5     0  this   Lc631/TestClass;</span><br><span class="line"></span><br><span class="line">  public int inc();</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: getfield      #2                  // Field m:I</span><br><span class="line">         4: iconst_1</span><br><span class="line">         5: iadd</span><br><span class="line">         6: ireturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 7: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       7     0  this   Lc631/TestClass;</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;TestClass.java&quot;</span><br></pre></td></tr></table></figure>

<p>第二个常量为 09 开头，查表可知为 field 的引用</p>
<table>
<thead>
<tr>
<th align="left">Const Name</th>
<th align="left">Item</th>
<th align="left">Length</th>
<th align="left">desc</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CONSTANT_Fieldref_info</td>
<td align="left">tag</td>
<td align="left">u1</td>
<td align="left">值为 9</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">index</td>
<td align="left">u2</td>
<td align="left">指向声明字段的类或接口类描述符 CONSTANT_Class_info 的索引项</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">index</td>
<td align="left">u2</td>
<td align="left">指向字段描述符 CONSTANT_NameAndType 的索引项</td>
</tr>
</tbody></table>
<p>值为 <code>09 00 03 00 13</code> 对应 <code>#2 = Fieldref           #3.#19         // c631/TestClass.m:I</code></p>
<p>第三个常量为 07 开头，为 Class 常量表</p>
<table>
<thead>
<tr>
<th align="left">Const Name</th>
<th align="left">Item</th>
<th align="left">Length</th>
<th align="left">desc</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CONSTANT_Class_info</td>
<td align="left">tag</td>
<td align="left">u1</td>
<td align="left">值为 7</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">index</td>
<td align="left">u2</td>
<td align="left">指向全限定名常量的索引项</td>
</tr>
</tbody></table>
<p><code>07 00 14</code> 对应 <code>#3 = Class              #20            // c631/TestClass</code></p>
<p>第四个也是 07 开头</p>
<p><code>07 00 15</code> - <code>#4 = Class              #21            // java/lang/Object</code></p>
<p>第五个为 01 开头, 表示 Utf8 类型的常量</p>
<table>
<thead>
<tr>
<th align="left">Const Name</th>
<th align="left">Item</th>
<th align="left">Type</th>
<th align="left">desc</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CONSTANT_Utf8_info</td>
<td align="left">tag</td>
<td align="left">u1</td>
<td align="left">值为 1</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">index</td>
<td align="left">u2</td>
<td align="left">UTF-8 编码的字符串占用的字节数</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">bytes</td>
<td align="left">u1</td>
<td align="left">长度为 length 的 UTF-8 编码字符串</td>
</tr>
</tbody></table>
<p><code>01 00 01 6d</code>, 占用字节数 1，内容为 6d 的 UTF 内容 <code>m</code>，对应关系可以通过各种在线工具查看，很常用 <code>#5 = Utf8               m</code></p>
<p>第六个常量 <code>01 00 01 49</code> - <code>#6 = Utf8               I</code></p>
<p>第七个常量 <code>01 00 06 3c 69 6e 69 74 3e</code> 占用字节数 6 个 - <code>#7 = Utf8               &lt;init&gt;</code></p>
<p>第八个 <code>01 00 03 28 29 56</code> - <code>#8 = Utf8               ()V</code></p>
<p>第九个 <code>01 00 04 43 6f 64 65</code> - <code>#9 = Utf8               Code</code> </p>
<p>第十个 <code>01 00 0f 4c 69 6e 65 4e 75 6d 62 65 72 54 61 62 6c 65</code> - <code>#10 = Utf8               LineNumberTable</code></p>
<p>第十一个 <code>01 00 12 4c 6f 63 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65</code> - <code>#11 = Utf8               LocalVariableTable</code></p>
<p>第十二个 <code>01 00 04 74 68 69 73</code> - <code>#12 = Utf8               this</code></p>
<p>第十三个 <code>01 00 10 4c 63 36 33 31 2f 54 65 73 74 43 6c 61 73 73 3b</code> - <code>#13 = Utf8               Lc631/TestClass;</code></p>
<p>第十四个 <code>01 00 03 69 6e 63</code> - <code>#14 = Utf8               inc</code></p>
<p>第十五个 <code>01 00 03 28 29 49</code> - <code>#15 = Utf8               ()I</code></p>
<p>第十六个 <code>01 00 0a 53 6f 75 72 63 65 46 69 6c 65</code> - <code>#16 = Utf8               SourceFile</code></p>
<p>第十七个 <code>01 00 0e 54 65 73 74 43 6c 61 73 73 2e 6a 61 76 61</code> - <code>#17 = Utf8               TestClass.java</code></p>
<p>第十八个 <code>0c</code> 开头，为 NameAndType 类型</p>
<table>
<thead>
<tr>
<th align="left">Const Name</th>
<th align="left">Item</th>
<th align="left">Length</th>
<th align="left">desc</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CONSTANT_NameAndType_info</td>
<td align="left">tag</td>
<td align="left">u1</td>
<td align="left">值为 12</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">index</td>
<td align="left">u2</td>
<td align="left">指向该字段或方法<strong>名称</strong>常量项的索引项</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">index</td>
<td align="left">u2</td>
<td align="left">指向该字段或方法<strong>描述符</strong>常量项的索引项</td>
</tr>
</tbody></table>
<p><code>0c 00 07 00 08</code> - <code>#18 = NameAndType        #7:#8          // &quot;&lt;init&gt;&quot;:()V</code></p>
<p>第十九 <code>0c 00 05 00 06</code> - <code>#19 = NameAndType        #5:#6          // m:I</code></p>
<p>第二十 <code>01 00 0e 63 36 33 31 2f 54 65 73 74 43 6c 61 73 73</code> - <code>#20 = Utf8               c631/TestClass</code></p>
<p>第二十一 <code>01 00 10 6a 61 76 61 2f 6c 61 6e 67 2f 4f 62 6a 65 63 74</code> - <code>#21 = Utf8               java/lang/Object</code></p>
<p>到此为止，常量池分析完毕</p>
<h3 id="6-3-3-访问标志"><a href="#6-3-3-访问标志" class="headerlink" title="6.3.3 访问标志"></a>6.3.3 访问标志</h3><p>紧跟在常量池之后，由两个字节组成，有 16 个标志位，当前只定义了 9 种。</p>
<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">flag value</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ACC_PUBLIC</td>
<td align="left">0x0001</td>
<td align="left">是否为 public 类型</td>
</tr>
<tr>
<td align="left">ACC_FINAL</td>
<td align="left">0x0010</td>
<td align="left">是否为 final 类型, 只有类可设置</td>
</tr>
<tr>
<td align="left">ACC_SUPER</td>
<td align="left">0x0020</td>
<td align="left">是否允许使用 invokespecial 字节码指定的新语义，<BR>invokespecial 语义在 JDK 1.0.2 发生过改变，<br>为了区别这条指令使用哪种语义， <BR>JDK 1.0.2 之后编译出来的类这个标志必须为真</td>
</tr>
<tr>
<td align="left">ACC_INTERFACE</td>
<td align="left">0x0200</td>
<td align="left">是否是一个接口</td>
</tr>
<tr>
<td align="left">ACC_ABSTRACT</td>
<td align="left">0x0400</td>
<td align="left">是否为 abstract 类型，对于接口或者抽象类来说，此标志必须为真，其他类型为假</td>
</tr>
<tr>
<td align="left">ACC_SYNTHETIC</td>
<td align="left">0x1000</td>
<td align="left">表示这个类并非由用户代码产生</td>
</tr>
<tr>
<td align="left">ACC_ANNOTATION</td>
<td align="left">0x2000</td>
<td align="left">标识这是一个注解</td>
</tr>
<tr>
<td align="left">ACC_ENUM</td>
<td align="left">0x4000</td>
<td align="left">标识这是一个枚举</td>
</tr>
<tr>
<td align="left">ACC_MODULE</td>
<td align="left">0x8000</td>
<td align="left">标识这是一个模块</td>
</tr>
</tbody></table>
<p>示例种值为 <code>00 21</code> 即 0020 &amp; 0001 所以是 public + super 类型</p>
<h3 id="6-3-4-类索引，父索引和接口索引集合"><a href="#6-3-4-类索引，父索引和接口索引集合" class="headerlink" title="6.3.4 类索引，父索引和接口索引集合"></a>6.3.4 类索引，父索引和接口索引集合</h3><ul>
<li>类索引（this_class） - u2 类型数据</li>
<li>父索引（super_class） - u2 类型数据</li>
<li>接口索引集合（super_class） - u2 类型数据</li>
</ul>
<p>这些所以确定类的继承关系，实例中数据 <code>00 03 00 04 00 00</code> 表示 类所以指向常量池第三个常量，父索引指向第四个常量，接口集合数量为 0 </p>
<p><code>#3 = Class              #20            // c631/TestClass</code></p>
<p><code>#4 = Class              #21            // java/lang/Object</code></p>
<h3 id="6-3-5-字段表集合"><a href="#6-3-5-字段表集合" class="headerlink" title="6.3.5 字段表集合"></a>6.3.5 字段表集合</h3><p>用来描述接口或类中声明的变量。这里的变量只包括<strong>类级</strong>变量以及<strong>实例级</strong>变量，不包含局部变量。</p>
<p>字段表结构</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">名称</th>
<th align="left">数量</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">access_flags</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">descriptor_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">attribute_count</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">attribute_info</td>
<td align="left">attributes</td>
<td align="left">attribute_count</td>
</tr>
</tbody></table>
<p>字段修饰符 access_flags 和类的访问修饰符很想都由一个 u2 的数据类型表示</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">标志值</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ACC_PUBLIC</td>
<td align="left">0x0001</td>
<td align="left">字段是否 public</td>
</tr>
<tr>
<td align="left">ACC_PRIVATE</td>
<td align="left">0x0002</td>
<td align="left">字段是否 private</td>
</tr>
<tr>
<td align="left">ACC_PROTECTED</td>
<td align="left">0x0004</td>
<td align="left">字段是否 protected</td>
</tr>
<tr>
<td align="left">ACC_STATIC</td>
<td align="left">0x0008</td>
<td align="left">字段是否 static</td>
</tr>
<tr>
<td align="left">ACC_FINAL</td>
<td align="left">0x0010</td>
<td align="left">字段是否 final</td>
</tr>
<tr>
<td align="left">ACC_VOLATILE</td>
<td align="left">0x0040</td>
<td align="left">字段是否 volatile</td>
</tr>
<tr>
<td align="left">ACC_TRANSIENT</td>
<td align="left">0x0080</td>
<td align="left">字段是否 transient</td>
</tr>
<tr>
<td align="left">ACC_SYNTHTIC</td>
<td align="left">0x0100</td>
<td align="left">字段是否由编译器产生</td>
</tr>
<tr>
<td align="left">ACC_ENUM</td>
<td align="left">0x0400</td>
<td align="left">字段是否 enum</td>
</tr>
</tbody></table>
<ul>
<li>作用域修饰符： public/private/protected</li>
<li>是否是类级字段：static</li>
<li>是否可变：final</li>
<li>是否强制主从内存读写：volatile</li>
<li>是否可序列化：transient</li>
</ul>
<p>name_index 和 descriptor_index 都指向常量池引用，表示字段简单名称以及字段和方法描述符。</p>
<ul>
<li>全名限定：用斜线分割的 路径+类名</li>
<li>简单名称：只有名字，没有路径信息</li>
<li>方法和字段描述符：参数列表+返回值类型，例如 ()V, (Lcom/lang/Object;)V</li>
</ul>
<p>基本数据类型含义表</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">B</td>
<td align="left">byte</td>
</tr>
<tr>
<td align="left">C</td>
<td align="left">char</td>
</tr>
<tr>
<td align="left">D</td>
<td align="left">double</td>
</tr>
<tr>
<td align="left">F</td>
<td align="left">float</td>
</tr>
<tr>
<td align="left">I</td>
<td align="left">int</td>
</tr>
<tr>
<td align="left">J</td>
<td align="left">long</td>
</tr>
<tr>
<td align="left">S</td>
<td align="left">short</td>
</tr>
<tr>
<td align="left">Z</td>
<td align="left">boolean</td>
</tr>
<tr>
<td align="left">V</td>
<td align="left">void</td>
</tr>
<tr>
<td align="left">L</td>
<td align="left">对象类型</td>
</tr>
</tbody></table>
<p>表示数组类型时，每一维度将使用一个前置的 <code>[</code> 字符描述，比如 String[][] 表示为 <code>[[Ljava/lang/String;</code>, 整形数组 int[] 表示为 <code>[I</code>。</p>
<p>实例中对应的字段表集合内容为 <code>00 01 00 02 00 05 00 06 00 00</code>， interface 之后紧接着为 fields_count 的表示位， <code>00 01</code>， 表示只有一个 field。</p>
<p><code>00 02</code> 表示方位权限 private，<code>00 05</code> 表示名字指向常量池第五个常量 <code>m</code>, <code>00 06</code> 表示描述符指向第六个常量 <code>I</code>，<code>00 00</code> 属性表个数位 0 个。</p>
<h3 id="6-3-6-方法表集合"><a href="#6-3-6-方法表集合" class="headerlink" title="6.3.6 方法表集合"></a>6.3.6 方法表集合</h3><p>方法表和之前的属性表，class 表是一个套路的, 方法表结构如下</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">名称</th>
<th align="left">数量</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">access_flags</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">descriptor_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">attribute_count</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">attribute_info</td>
<td align="left">attributes</td>
<td align="left">attribute_count</td>
</tr>
</tbody></table>
<p>方法表的 access_flag 相对 field 少了 volatile 和 trasient, 多了 synchronized, native, strictfp 和 abstract</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">标志值</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ACC_PUBLIC</td>
<td align="left">0x0001</td>
<td align="left">方法是否 public</td>
</tr>
<tr>
<td align="left">ACC_PRIVATE</td>
<td align="left">0x0002</td>
<td align="left">方法是否 private</td>
</tr>
<tr>
<td align="left">ACC_PROTECTED</td>
<td align="left">0x0004</td>
<td align="left">方法是否 protected</td>
</tr>
<tr>
<td align="left">ACC_STATIC</td>
<td align="left">0x0008</td>
<td align="left">方法是否 static</td>
</tr>
<tr>
<td align="left">ACC_FINAL</td>
<td align="left">0x0010</td>
<td align="left">方法是否 final</td>
</tr>
<tr>
<td align="left">ACC_SYNCHRONIZED</td>
<td align="left">0x0020</td>
<td align="left">方法是否 synchronized</td>
</tr>
<tr>
<td align="left">ACC_BRIDGE</td>
<td align="left">0x0040</td>
<td align="left">方法是否是由编译器产生的桥接方法</td>
</tr>
<tr>
<td align="left">ACC_VARARGS</td>
<td align="left">0x0080</td>
<td align="left">方法是否接收不定长参数</td>
</tr>
<tr>
<td align="left">ACC_NATIVE</td>
<td align="left">0x0100</td>
<td align="left">方法是否为 native</td>
</tr>
<tr>
<td align="left">ACC_ABSTRACT</td>
<td align="left">0x0400</td>
<td align="left">字段是否 abstract</td>
</tr>
<tr>
<td align="left">ACC_STRICT</td>
<td align="left">0x0800</td>
<td align="left">字段是否 strictfp</td>
</tr>
<tr>
<td align="left">ACC_SYNTHETIC</td>
<td align="left">0x1000</td>
<td align="left">字段是否由编译器自动产生</td>
</tr>
</tbody></table>
<p>方法中的具体实现经过 javac 编译成字节码指令后存在属性表集合中一个名为 Code 的属性里面。</p>
<p>实例内容 <code>00 02 00 01 00 07 00 08 00 01 00 09</code></p>
<ul>
<li>00 02 - 有两个方法</li>
<li>00 01 - public 类型的方法</li>
<li>00 07 - name 指向常量池7 - <init></li>
<li>00 08 - 描述符指向8 - ()V</li>
<li>00 01 - 属性数量 1</li>
<li>00 09 - 属性表索引 9，指向 Code</li>
</ul>
<p>方法签名：Java 语法中的方法签名可以从重载(Overload)理解。Java 中重载要求方法名一致，参数列表及参数类型不同。返回值并不在比较范围内。方法除了返回值不同的重载是会编译错误的。但是在字节码的语义中，只有返回值不同的重载是合法的。</p>
<h3 id="6-3-7-属性表集合"><a href="#6-3-7-属性表集合" class="headerlink" title="6.3.7 属性表集合"></a>6.3.7 属性表集合</h3><p>属性表集合的限制比前面那些结构要宽松一些，对虚拟机不认识的属性，会自动跳过。到 java 12 一共有 29 种预定义的属性</p>
<table>
<thead>
<tr>
<th align="left">属性名称</th>
<th align="left">使用位置</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Code</td>
<td align="left">方法表</td>
<td align="left">Java代码编译成的自己吗指令</td>
</tr>
<tr>
<td align="left">ConstantValue</td>
<td align="left">字段表</td>
<td align="left">由 final 关键字定义的常量值</td>
</tr>
<tr>
<td align="left">Deprecated</td>
<td align="left">类，方法，字段表</td>
<td align="left">被声明为 deprecated 的方法和字段</td>
</tr>
<tr>
<td align="left">Exceptions</td>
<td align="left">方法表</td>
<td align="left">方法抛出的异常列表</td>
</tr>
<tr>
<td align="left">EnclosingMethod</td>
<td align="left">类文件</td>
<td align="left">仅当一个类为局部类或匿名类是才拥有这个属性，用于标识这个类所在的外围方法</td>
</tr>
<tr>
<td align="left">InnerClasses</td>
<td align="left">类文件</td>
<td align="left">内部类列表</td>
</tr>
<tr>
<td align="left">LineNumberTable</td>
<td align="left">Code属性</td>
<td align="left">Java 源码的行号与字节码指令的对应关系</td>
</tr>
<tr>
<td align="left">LocalVariableTable</td>
<td align="left">Code属性</td>
<td align="left">方法的局部变量描述</td>
</tr>
<tr>
<td align="left">StackMapTable</td>
<td align="left">Code属性</td>
<td align="left">JDK6 新增，供新的类型检查验证器检查和处理目标方法的局部变量和操作数栈所需的类型是否匹配</td>
</tr>
<tr>
<td align="left">Signature</td>
<td align="left">类，方法表和字段表</td>
<td align="left">JDK5新增，用于支持泛型情况下的方法签名</td>
</tr>
<tr>
<td align="left">SourceFile</td>
<td align="left">类文件</td>
<td align="left">记录源文件名称</td>
</tr>
<tr>
<td align="left">SourceDebugExtension</td>
<td align="left">类文件</td>
<td align="left">JDK5新增，存储额外的调试信息</td>
</tr>
<tr>
<td align="left">Synthetic</td>
<td align="left">类，方法表，字段表</td>
<td align="left">标识是否由编译器产生</td>
</tr>
<tr>
<td align="left">LocalVariableTypeTable</td>
<td align="left">类</td>
<td align="left">JDK5新增，使用特征签名代替描述符，为了支持泛型</td>
</tr>
<tr>
<td align="left">RuntimeVisibleAnnotations</td>
<td align="left">类，方法表，字段表</td>
<td align="left">JDK5新增，为动态注解提供支持</td>
</tr>
<tr>
<td align="left">RuntimeInVisibleAnnotations</td>
<td align="left">类，方法表，字段表</td>
<td align="left">JDK5新增，为动态注解提供支持,标识不可见</td>
</tr>
<tr>
<td align="left">RuntimeVisibleParameterAnnotations</td>
<td align="left">方法表</td>
<td align="left">JDK5新增，作用对象为方法参数</td>
</tr>
<tr>
<td align="left">RuntimeInvisibleParameterAnnotations</td>
<td align="left">方法表</td>
<td align="left">JDK5新增，作用对象为方法参数</td>
</tr>
<tr>
<td align="left">AnnotationDefault</td>
<td align="left">方法表</td>
<td align="left">JDK5新增，注解类元素默认值</td>
</tr>
<tr>
<td align="left">BootstrapMethods</td>
<td align="left">类文件</td>
<td align="left">JDK7新增，保存 invokedynamic 指令引用的引导犯法限定符</td>
</tr>
<tr>
<td align="left">RuntimeVisibleTypeAnnotations</td>
<td align="left">类，方法表，字段表, Code属性</td>
<td align="left">JDK8新增</td>
</tr>
<tr>
<td align="left">RuntimeInvisibleTypeAnnotations</td>
<td align="left">类，方法表，字段表, Code属性</td>
<td align="left">JDK8新增</td>
</tr>
<tr>
<td align="left">MethodParameters</td>
<td align="left">方法表</td>
<td align="left">JDK8新增</td>
</tr>
<tr>
<td align="left">Module</td>
<td align="left">类</td>
<td align="left">JDK9新增</td>
</tr>
<tr>
<td align="left">ModulePackages</td>
<td align="left">类</td>
<td align="left">JDK9新增</td>
</tr>
<tr>
<td align="left">ModuleMainClass</td>
<td align="left">类</td>
<td align="left">JDK9新增</td>
</tr>
<tr>
<td align="left">NestHost</td>
<td align="left">类</td>
<td align="left">JDK11新增</td>
</tr>
<tr>
<td align="left">NestMembers</td>
<td align="left">类</td>
<td align="left">JDK11新增</td>
</tr>
</tbody></table>
<p>属性表结构</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">名称</th>
<th align="left">数量</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u1</td>
<td align="left">info</td>
<td align="left">attribute_length</td>
</tr>
</tbody></table>
<p>attribute_name_index 指向常量池中的一个引用，属性值结构完全自定义，attribute_length 说明属性值所占的位数。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p>Java 方法体种的代码经过 javac 编译器处理之后都会转化为字节码指令存储在 Code 属性内。Code 属性出现在方法表的属性集合中，但并非所有方法表都必须存在这个属性，比如抽象方法或接口中就可以不存在 Code 属性。</p>
<p>Code 属性表的结构</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">名称</th>
<th align="left">数量</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
<td align="left">指向 CONSTANT_Utf8_info 常量的索引，为固定值 Code</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
<td align="left">属性值长度</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">max_stack</td>
<td align="left">1</td>
<td align="left">操作数栈深度的最大值</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">max_locals</td>
<td align="left">1</td>
<td align="left">局部变量表存储空间，单位-变量槽(Slot)</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">code_length</td>
<td align="left">1</td>
<td align="left">编译后字节码指令个数</td>
</tr>
<tr>
<td align="left">u1</td>
<td align="left">code</td>
<td align="left">code_length</td>
<td align="left">编译后字节码指令</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">exception_table_length</td>
<td align="left">1</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">exception_info</td>
<td align="left">exception_table</td>
<td align="left">exception_table_length</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">attribute_count</td>
<td align="left">1</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">attribute_info</td>
<td align="left">attributes</td>
<td align="left">attribute_count</td>
<td align="left">-</td>
</tr>
</tbody></table>
<p>对于 byte, char, float, int, short, boolean 和 returnAddress 等长度不超过 32 byte 的数据类型，每个局部变量占用一个变量槽，double, long 这两个 64 位的占两个槽。</p>
<p>同时生存的最大局部变量和类型计算出 max_locals</p>
<p>字节码指令长度 u1。u1 可以最多表达 255 个指令，现在大约已经定义了 200 条。</p>
<p>测试案例中 init 方法对应的 code 代码块为 <code>00 09 00 00 00 2f 00 01 00 01 00 00 00 05 2a b7 00 01 b1 00 00 00 02</code></p>
<p><code>00 09</code> 前面已经说过，指向固定的 Code 字符地址</p>
<p><code>00 00 00 31</code> 属性表长度 3*16 + 1 = 49</p>
<p><code>00 01</code> 栈深 1</p>
<p><code>00 01</code> 本地变量表大小 1</p>
<p><code>00 00 00 05</code> code 长度 5</p>
<p><code>2a b7 00 01 b1</code> code 内容</p>
<ul>
<li><code>2a</code>: aload_0 将第一个变量推送至栈顶</li>
<li><code>b7</code> invokespecial, 后面接一个 u2 类型引用数据，执行构造方法或 private 方法，或它的父类方法</li>
<li><code>00 01</code> 方法引用，指向 init</li>
<li><code>b1</code> return 指令</li>
</ul>
<p>对应的 javap 代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public c631.TestClass();</span><br><span class="line">  descriptor: ()V</span><br><span class="line">  flags: (0x0001) ACC_PUBLIC</span><br><span class="line">  Code:</span><br><span class="line">    stack&#x3D;1, locals&#x3D;1, args_size&#x3D;1</span><br><span class="line">        0: aload_0</span><br><span class="line">        1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">        4: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 3: 0</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0       5     0  this   Lc631&#x2F;TestClass;</span><br></pre></td></tr></table></figure>

<p><code>args_size=1</code> 方法虽然没有参数，但是 Java 编译时会把 this 作为第一个默认参数塞入 code 代码块中。</p>
<p><code>00 00 00 02</code> 异常表长度 0， 属性表长度 2</p>
<p>异常表结构</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">名称</th>
<th align="left">数量</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">start_pc</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">end_pc</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">handler_pc</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">catch_type</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>异常代码案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> x;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          x = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">return</span> x;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          x = <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">return</span> x;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          x = <span class="number">3</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>对应的 javap 代码</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">public int inc();</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=5, args_size=1</span><br><span class="line">         0: iconst_1</span><br><span class="line">         1: istore_1</span><br><span class="line">         2: iload_1</span><br><span class="line">         3: istore_2</span><br><span class="line">         4: iconst_3</span><br><span class="line">         5: istore_1</span><br><span class="line">         6: iload_2</span><br><span class="line">         7: ireturn</span><br><span class="line">         8: astore_2</span><br><span class="line">         9: iconst_2</span><br><span class="line">        10: istore_1</span><br><span class="line">        11: iload_1</span><br><span class="line">        12: istore_3</span><br><span class="line">        13: iconst_3</span><br><span class="line">        14: istore_1</span><br><span class="line">        15: iload_3</span><br><span class="line">        16: ireturn</span><br><span class="line">        17: astore        4</span><br><span class="line">        19: iconst_3</span><br><span class="line">        20: istore_1</span><br><span class="line">        21: aload         4</span><br><span class="line">        23: athrow</span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             0     4     8   Class java/lang/Exception</span><br><span class="line">             0     4    17   any</span><br><span class="line">             8    13    17   any</span><br><span class="line">            17    19    17   any</span><br></pre></td></tr></table></figure>

<p>和书上的结果略有差别，但基本一致</p>
<h4 id="Exceptions-属性"><a href="#Exceptions-属性" class="headerlink" title="Exceptions 属性"></a>Exceptions 属性</h4><p>和 Code 平级的概念，并不是上一章节里 Code 下面的 exception 表。这里表示的是方法可能抛出的异常，就是 throws 后面的那些东西。属性结构如下:</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">number_of_exceptions</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">exception_index_table</td>
<td align="left">number_of_exceptions</td>
</tr>
</tbody></table>
<p>number_of_exceptions: 可能抛出的受检测的异常类型<br>exception_index_table: 指向常量池中的 CONSTANT_Class_info 索引</p>
<h4 id="LineNumberTable-属性"><a href="#LineNumberTable-属性" class="headerlink" title="LineNumberTable 属性"></a>LineNumberTable 属性</h4><p>描述 Java 源码行号和字节码行号之间的对应关系。可以在编译时指定不生成行号，但是会影响异常信息显示和 debug, 表结构如下:</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">line_number_table_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">line_number_info</td>
<td align="left">line_number_table</td>
<td align="left">line_number_table_length</td>
</tr>
</tbody></table>
<p>line_number_info: 包含 start_pc 和 line_number 两个 u2 类型的数据项，前者是字节码行号，后者是 Java 源码行号。</p>
<h4 id="LocalVarableTable-及-LocalVarableTypeTable-属性"><a href="#LocalVarableTable-及-LocalVarableTypeTable-属性" class="headerlink" title="LocalVarableTable 及 LocalVarableTypeTable 属性"></a>LocalVarableTable 及 LocalVarableTypeTable 属性</h4><p>LocalVarableTable 描述局部变量表的变量与 Java 源码中定义的变量之间的关系。非必须，可以指定 javac 参数去除且不影响运行。但是去除后方法参数名称会变为类似 arg0, arg1 的表示，不方便，表结构如下：</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">local_variable_table_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">local_variable_info</td>
<td align="left">local_variable_table</td>
<td align="left">local_variable_table_length</td>
</tr>
</tbody></table>
<p>local_variable_info 代表栈帧与源码中局部变量的关联，结构如下：</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">start_pc</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">descriptor_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">index</td>
<td align="left">1</td>
</tr>
</tbody></table>
<ul>
<li>start_pc + length: 限定了局部变量的作用范围，即作用域</li>
<li>name_index + descriptor_index: 指向常量池中 CONSTANT_Utf8_info 类型索引</li>
<li>index: 栈帧局部变量槽位置，当数据类型为 64 位则占用 index 和 index+1 两个</li>
</ul>
<p>LocalVarableTypeTable 是 JDK5 时为了支持泛型而引入的，基本功能和 LocalVarableTable 一样。</p>
<h4 id="SourceFile-及-SourceDebugExtension-属性"><a href="#SourceFile-及-SourceDebugExtension-属性" class="headerlink" title="SourceFile 及 SourceDebugExtension 属性"></a>SourceFile 及 SourceDebugExtension 属性</h4><p>SourceFile 记录生成 Class 文件的源码文件名称，可选，通常与类名同，特殊情况除外(如内部类)。表结构如下:</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">sourcefile_index</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>sourcefile_index: 指向常量池中 CONSTANT_Utf8_info 型常量的索引，值问文件名。</p>
<p>SourceDebugExtension 是 JDK5 中加入的新特性，存储额外调试信息，支持类似 JSP 这种使用 Java 编译器但是语法不同的语言，类中最多只允许一个该属性。表结构如下：</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">debug_extension[attribute_length]</td>
<td align="left">1</td>
</tr>
</tbody></table>
<h4 id="ConstantValue-属性"><a href="#ConstantValue-属性" class="headerlink" title="ConstantValue 属性"></a>ConstantValue 属性</h4><p>ConstantValue 通知虚拟机自动为静态变量赋值。只有被 static 修饰的变量才能使用这个属性。虚拟机中对非 static 变量在 <init>() 方法总进行，对于静态变量则有两种方式，一种是构造器 <clinit>() 另一种是 ConstantValue。Oracle 的 javac 中的实现方式为：static + final + 基本类型/String 在 ConstantValue 中赋值， 没有 final 或者是其他数据类型则在 <clinit>() 中赋值。表结构如下：</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">constantvalue_index</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>constantvalue_index: 指向常量池中一个引用，可选类型有 CONSTANT_Long_info, CONSTANT_Float_info, CONSTANT_Double_info, CONSTANT_Integer_info 和 CONSTANT_String_info。</p>
<h4 id="InnerClasses-属性"><a href="#InnerClasses-属性" class="headerlink" title="InnerClasses 属性"></a>InnerClasses 属性</h4><p>InnerClasses 记录内部类与宿主类之间的关联。结构如下：</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">number_of_classes</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">inner_classes_info</td>
<td align="left">inner_classes</td>
<td align="left">number_of_classes</td>
</tr>
</tbody></table>
<p>number_of_classes: 内部类个数</p>
<p>inner_classes_info 结构如下</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">inner_class_info_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">outer_class_info_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">inner_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">inner_class_access_flags</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>inner_class_info_index, outer_class_info_index：指向常量池中 CONSTANT_Class_info 常量索引，分别代表内部类和宿主类</p>
<p>inner_name_index：指向常量池 CONSTANT_Utf8_info 引用，代表内部类名称，如果是匿名内部类，值为 0</p>
<p>inner_class_access_flags：和 class 定义相似，类的访问标示符，取值范围如下</p>
<table>
<thead>
<tr>
<th align="left">标志名称</th>
<th align="left">标志值</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ACC_PUBLIC</td>
<td align="left">0x0001</td>
<td align="left">内部类是否为 public</td>
</tr>
<tr>
<td align="left">ACC_PRIVATE</td>
<td align="left">0x0002</td>
<td align="left">内部类是否为 private</td>
</tr>
<tr>
<td align="left">ACC_PROTECTED</td>
<td align="left">0x0004</td>
<td align="left">内部类是否为 protected</td>
</tr>
<tr>
<td align="left">ACC_STATIC</td>
<td align="left">0x0008</td>
<td align="left">内部类是否为 static</td>
</tr>
<tr>
<td align="left">ACC_FINAL</td>
<td align="left">0x0010</td>
<td align="left">内部类是否为 final</td>
</tr>
<tr>
<td align="left">ACC_INTERFACE</td>
<td align="left">0x0020</td>
<td align="left">内部类是否为 接口</td>
</tr>
<tr>
<td align="left">ACC_ABSTRACT</td>
<td align="left">0x0400</td>
<td align="left">内部类是否为 abstract</td>
</tr>
<tr>
<td align="left">ACC_SYNTHETIC</td>
<td align="left">0x1000</td>
<td align="left">内部类是否并非由用户代码产生</td>
</tr>
<tr>
<td align="left">ACC_ANNOTATION</td>
<td align="left">0x2000</td>
<td align="left">内部类是否为一个注解</td>
</tr>
<tr>
<td align="left">ACC_ENUM</td>
<td align="left">0x4000</td>
<td align="left">内部类是否为一个枚举</td>
</tr>
</tbody></table>
<h4 id="Deprecated-及-Synthetic-属性"><a href="#Deprecated-及-Synthetic-属性" class="headerlink" title="Deprecated 及 Synthetic 属性"></a>Deprecated 及 Synthetic 属性</h4><p>都是标志符类型的布尔属性，只有存在有和没有的区别，没有属性概念。Deprecated 对应 @deprecated 注解，表示不推荐使用。</p>
<p>Synthetic 标示字段或方法由编译器产生，JDK5之后同样的功能可以通过设置 ACC_SYNTHETIC 标志位达到。通过这种方式甚至可以越权访问或绕开语言限制功能。典型例子是枚举类中自动生成枚举元素数组和嵌套类的桥接方法(Bridge Method)。</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>attribute_length 必须为 0x00000000，因为诶呦任何属性需要设置。</p>
<h4 id="StackMapTable-属性"><a href="#StackMapTable-属性" class="headerlink" title="StackMapTable 属性"></a>StackMapTable 属性</h4><p>JDK6 增加到 Class 文件规范，一个相当复杂的变长属性，位于 Code 属性表中，用来代替原来的类型检查验证器，提升性能。实现很复杂，Java SE7 新增 120 页篇幅讲解描述。</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">number_of_entries</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">stack_map_frame</td>
<td align="left">stack_map_frame entries</td>
<td align="left">number_of_entries</td>
</tr>
</tbody></table>
<p>SE7 之后规定，版本号 &gt;= 50.0 的 class 文件都必须带有 StackMapTable 属性。一个 Code 属性最多只能有一个 StackMapTable 不然抛错 ClassFormatError。</p>
<h4 id="Signature-属性"><a href="#Signature-属性" class="headerlink" title="Signature 属性"></a>Signature 属性</h4><p>在 JDK5 中和泛型一起加入的，记录泛型签名信息。Java 中的泛型是伪泛型。</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">signature_index</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>signature_index 指向常量池的一个 CONSTANT_Utf8_info 索引。</p>
<h4 id="BootstrapMethods-属性"><a href="#BootstrapMethods-属性" class="headerlink" title="BootstrapMethods 属性"></a>BootstrapMethods 属性</h4><p>JDK7 时新增，JDK8 中通过 lambda 发扬光大。位于类文件属性表中，用于保存 invokeDynamic 指令引用的引导方法限定符。类文件常量池中出现过 CONSTANT_InvokeDynamic_info 类型的常量，那么属性表中必有 BootstrapMethods 属性，一个类文件中至多只能有一个 BootstrapMethods 属性。</p>
<p>BootstrapMethods 属性结构</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">num_bootstrap_methods</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">bootstrap_method</td>
<td align="left">bootstrap_methods</td>
<td align="left">num_bootstrap_methods</td>
</tr>
</tbody></table>
<p>bootstrap_methods[]: 每个成员包含一个指向常量池 CONSTANT_MethodHandle 结构的索引，代表一个引导方法。</p>
<p>bootstrap_method 属性结构</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">bootstrap_method_ref</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">num_bootstrap_arguments</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">bootstrap_arguments</td>
<td align="left">num_bootstrap_arguments</td>
</tr>
</tbody></table>
<ul>
<li>bootstrap_method_ref：对常量池的一个有效索引，索引处必须是一个 CONSTNAT_MethodHandle_info 结构</li>
<li>num_bootstrap_arguments：arg 数量</li>
<li>bootstrap_arguments：每个成员必须是对常量池的有效引用，指向的结构必须是：CONSTANT_String_info，CONSTANT_Class_info, CONSTANT_Integer_info, CONSTANT_Long_info, CONSTANT_Float_info, CONSTANT_Double_info, CONSTANT_MethodHandle_info 或 CONSTANT_MethodType_info 之一</li>
</ul>
<h4 id="MethodParameters-属性"><a href="#MethodParameters-属性" class="headerlink" title="MethodParameters 属性"></a>MethodParameters 属性</h4><p>JDK8 时加入，之前没有这个属性， jar 包反编译时缺少参数信息，不方便理解，影响传播。之前还有个替代方案，通过 ‘-g:var’ 存入 LocalVariableTable, 但是他时 Code 的字表，在接口方法这类没有具体实现的方法时不生效。</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u1</td>
<td align="left">parameters_count</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">parameter</td>
<td align="left">parameters</td>
<td align="left">parameters_count</td>
</tr>
</tbody></table>
<p>parameter 属性</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">access_flags</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>name_index 指向常量池 CONTANT_Utf8_info 的索引值，代表名称</p>
<p>access_flags 有三种 0x0001-ACC_FINAL, 0x1000-ACC_SYNTHETIC, 0x8000-ACC_MANDATED(原文件中隐式定义，典型用法 this)</p>
<h4 id="模块化相关属性"><a href="#模块化相关属性" class="headerlink" title="模块化相关属性"></a>模块化相关属性</h4><p>TBD 怎是没用到就不记了，以后用到再看看</p>
<h4 id="运行时注解相关属性"><a href="#运行时注解相关属性" class="headerlink" title="运行时注解相关属性"></a>运行时注解相关属性</h4><p>JDK5 时加入了注解相关信息到 Class 文件，他们是 RuntimeVisibleAnnotations, RuntimeInvisibleAnnotations, RuntimeVisibleParameterAnnotations 和 RuntimeInvisibleParameterAnnotations。JDK8 时新家了 RuntimeVisibleTypeAnnotations, RuntimeInvisibleTypeAnnotations。这些属性功能和结构都很雷同。</p>
<p>RuntimeVisibleAnnotations 属性结构</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">num_annotations</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">annotation</td>
<td align="left">annotations</td>
<td align="left">num_annotations</td>
</tr>
</tbody></table>
<p>annotations 属性结构</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">type_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">num_element_value_pairs</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">element_value_pair</td>
<td align="left">element_value_pairs</td>
<td align="left">num_element_value_pairs</td>
</tr>
</tbody></table>
<p>type_index 指向常量池 CONSTANT_Utf8_info 常量的索引， num_element_value_pairs 数组计数器，element_value_pair 为键值对</p>
<h2 id="6-4-字节码指令简介"><a href="#6-4-字节码指令简介" class="headerlink" title="6.4 字节码指令简介"></a>6.4 字节码指令简介</h2><p>虚拟机指令 = 操作码(opcode) + 操作数(oprand)</p>
<p>操作码为一个字节长度，操作数为 0 至 n 个，虚拟机执行模型</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">  自动计算 PC 寄存器的值加 1；</span><br><span class="line">  根据 PC 寄存器指示的位置，从字节码流中取出操作码；</span><br><span class="line">  if (字节码存在操作数) 从字节码流中取出操作数；</span><br><span class="line">  执行操作吗所定义的操作；</span><br><span class="line">&#125; while (字节码流长度 &gt; 0)</span><br></pre></td></tr></table></figure>

<h3 id="6-4-1-字节码与数据类型"><a href="#6-4-1-字节码与数据类型" class="headerlink" title="6.4.1 字节码与数据类型"></a>6.4.1 字节码与数据类型</h3><p>大多数操作码都包含对应操作数类型信息，比如 iload。</p>
<ul>
<li>i - int</li>
<li>l - long</li>
<li>s - short</li>
<li>b - byte</li>
<li>c - char</li>
<li>f - float</li>
<li>d - double</li>
<li>a - reference</li>
</ul>
<p>boolean, byte, short, char 在编译时会被扩展成 int 类型再处理。</p>
<h3 id="6-4-2-加载和存储指令"><a href="#6-4-2-加载和存储指令" class="headerlink" title="6.4.2 加载和存储指令"></a>6.4.2 加载和存储指令</h3><p>用于将数据在栈帧中的局部变量表和操作数栈之间来回传输</p>
<p>将局部变量加载到操作栈：(i/l/f/d/a)load, (i/l/f/d/a)load_<n></p>
<p>将一个数值从操作数栈存储到局部变量表：(i/l/f/d/a)store, (i/l/f/d/a)store_<n></p>
<p>将一个常量加载到操作数栈：bipush, sipush, ldc, ldc_w, ldc2_w, aconst_null, iconst_m1, icont_<i>, lconst_<l>, fconst_<f>, dconst_<d></p>
<p>扩充局部变量表的访问索引指令： wide</p>
<p>iload_<n> 代表了 iload_1, iload_2, iload_3</p>
<h3 id="6-4-3-运算指令"><a href="#6-4-3-运算指令" class="headerlink" title="6.4.3 运算指令"></a>6.4.3 运算指令</h3><p>算术指令用于对 操作数栈 上的两个值进行某种特定运算，并把 结果 重新存入操作栈 顶。byte, short, char 和 Boolean 会转化为 int 计算</p>
<ul>
<li>加法指令： (i, l, f, d)add</li>
<li>减法指令： (i, l, f, d)sub</li>
<li>乘法指令： (i, l, f, d)mul</li>
<li>除法指令： (i, l, f, d)div</li>
<li>求余指令： (i, l, f, d)rem</li>
<li>取反指令： (i, l, f, d)neg</li>
<li>位移指令： ishl, ishr, iushr, lshl, lshr, lushr</li>
<li>按位或指令： ior, lor</li>
<li>按位与指令： iand, land</li>
<li>按位异或指令： ixor, lxor</li>
<li>局部变量自增指令： iinc</li>
<li>比较指令： dcmpg, dcmpl, fcmpg, fcmpl, lcmp</li>
</ul>
<h3 id="6-4-4-类型转换指令"><a href="#6-4-4-类型转换指令" class="headerlink" title="6.4.4 类型转换指令"></a>6.4.4 类型转换指令</h3><p>该指令可以将两种不同数值类型的数据互相转化，这些转化操作一般用于用户代码中的显示类型转化，或者前面提到的字节码指令集中数据类型相关指令无法与数据类型一一对应的问题。</p>
<p>虚拟机直接支持宽化类型转化，及小范围向大范围转换</p>
<ol>
<li>int 类型到 long, float, double</li>
<li>long 到 float， double</li>
<li>float 到 double</li>
</ol>
<p>窄化转化指令： i2b, i2c, i2s, l2i, f2i, f2l, d2i, d2l, d2f。</p>
<p>窄化转化可能发生上限溢出，下限溢出 或精度丢失，但是这些问题都不会抛出运行时异常。</p>
<h3 id="6-4-5-对象创建与访问指令"><a href="#6-4-5-对象创建与访问指令" class="headerlink" title="6.4.5 对象创建与访问指令"></a>6.4.5 对象创建与访问指令</h3><ul>
<li>创建类实例 new</li>
<li>创建数组 newarray, anewarray, multianewarray</li>
<li>访问类字段和实例字段的指令：getfield, putfield, getstatic, putstatic</li>
<li>把一个数组元素加载到操作数栈中的指令：baload, caload, saload, iaload, laload, faload, daload, aaload</li>
<li>将一个操作数栈的值存储到数组元素中：bastore, castore, sastore, iastore, fastore, dastore, aastore</li>
<li>取数组长度的指令：arraylength</li>
<li>检查类实例类型的指令：instanceof, checkcast</li>
</ul>
<h3 id="6-4-6-操作数栈管理指令"><a href="#6-4-6-操作数栈管理指令" class="headerlink" title="6.4.6 操作数栈管理指令"></a>6.4.6 操作数栈管理指令</h3><ul>
<li>将操作数栈栈顶的一个或两个元素出栈：pop, pop2</li>
<li>复制栈顶的一个或两个数值并将复制或双份复制值重新压入栈顶：dup, dup2, dup_x1, dup2_x1, dup_x2, dup2_x2</li>
</ul>
<h3 id="6-4-7-控制转移指令"><a href="#6-4-7-控制转移指令" class="headerlink" title="6.4.7 控制转移指令"></a>6.4.7 控制转移指令</h3><p>可以让 Java 虚拟机有条件或五天见的从指定位置指令的吓一跳指令继续执行程序。</p>
<ul>
<li>条件分支： ifeq, iflt, ifle, ifne, ifgt, ifge, ifnull, ifnonnull, if_icmpeq, if_icmpne, if_icmplt, if_icompgt, if_icomple, if_icompge, if_acmpeq, if_acmpne</li>
<li>复合条件分支：tableswitch, lookupswitch</li>
<li>无条件分支：goto, goto_w, jsr, jsr_w, ret</li>
</ul>
<h3 id="6-4-8-方法调用和返回指令"><a href="#6-4-8-方法调用和返回指令" class="headerlink" title="6.4.8 方法调用和返回指令"></a>6.4.8 方法调用和返回指令</h3><ul>
<li>invokevirtual: 调用对象的实例方法，根据对象的世纪类型进行分派，Java 中最常见的分派方式</li>
<li>invokeinterface: 调用接口方法，运行时搜索一个实现了该接口方法的对象，找出适合的方法进行调用</li>
<li>invokespecial: 调用一些需要特殊处理的实例方法，包括实例初始化方法，私有方法和父类方法</li>
<li>invokestatic: 调用静态方法</li>
<li>invokedynamic: 运行时动态解析出调用点限定符所应用的方法，并执行该方法。</li>
</ul>
<p>返回指令：当返回值是 boolean, byte, char, short, int 时使用 ireturn, 其他还有 lreturn, freturn, dreturn 和 areturn。还有为 void 准备的 return。</p>
<h3 id="6-4-9-异常处理指令"><a href="#6-4-9-异常处理指令" class="headerlink" title="6.4.9 异常处理指令"></a>6.4.9 异常处理指令</h3><p>Java 中显示的排除异常操作由 athrow 指令实现，虚拟机中异常处理不是由字节码指令实现，而是通过 异常表</p>
<h3 id="6-4-10-同步指令"><a href="#6-4-10-同步指令" class="headerlink" title="6.4.10 同步指令"></a>6.4.10 同步指令</h3><p>虚拟机支持方法级别的同步和方法内部一段指令序列的同步，这两种同步结构都是用管程，也叫锁。方法级别的管程是隐示的无需通过字节码指令控制。他的实现在方法调用和返回之间。虚拟机可以重常量池方法表结构中的 ACC_SYNCHRONIZED 得知是否被声明为同步方法。如果执行时出现异常，同步方法所持有的锁会在异常抛到同步方法边界之外时自动释放。对应的指令为 monitorenter 和 monitorexit。</p>
<p>虚拟机必须保证每条 monitorenter 指令都有一条 monitorexit 指令与之对应。</p>
<h2 id="6-5-公有设计，私有实现"><a href="#6-5-公有设计，私有实现" class="headerlink" title="6.5 公有设计，私有实现"></a>6.5 公有设计，私有实现</h2><p>Class 文件格式和字节码集是完全独立于操作系统和虚拟机实现的，任何一款虚拟机实现都必须能够读取 Class 文件并精确实现包含在其中的 Java 虚拟机代码的语义。虚拟机规范鼓励在满足约束的条件下修改和优化实现。虚拟机实现方式主要有两种：</p>
<ol>
<li>将输入的 Java 虚拟机代码在加载或执行时翻译成另一种虚拟机代码</li>
<li>将输入的 Java 虚拟机代码在加载或执行时翻译成宿主机本地指令集，即 即时编译器代码生成技术</li>
</ol>
<h2 id="6-6-Class-文件结构的发展"><a href="#6-6-Class-文件结构的发展" class="headerlink" title="6.6 Class 文件结构的发展"></a>6.6 Class 文件结构的发展</h2><p>相对与 Java 技术体系的变化，Class 文件结构可谓是相当的稳定了。。。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>asm</tag>
        <tag>jvm</tag>
        <tag>todo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令行与shell脚本编程大全 第一章 Linux 命令行</title>
    <url>/hexo/2021/05/31/LSCASSB-parti-the-linux-command-line/</url>
    <content><![CDATA[<h2 id="Chapter-1-Starting-with-Linux-Shells"><a href="#Chapter-1-Starting-with-Linux-Shells" class="headerlink" title="Chapter 1: Starting with Linux Shells"></a>Chapter 1: Starting with Linux Shells</h2><h3 id="What-Is-Linux"><a href="#What-Is-Linux" class="headerlink" title="What Is Linux"></a>What Is Linux</h3><p>Linux 系统主要由一下 4 部分组成</p>
<ul>
<li>The Linux kernel</li>
<li>The GUN utilities</li>
<li>A graphical desktop environment</li>
<li>Application software</li>
</ul>
<h4 id="Looking-into-the-Linux-Kernel"><a href="#Looking-into-the-Linux-Kernel" class="headerlink" title="Looking into the Linux Kernel"></a>Looking into the Linux Kernel</h4><p>Linux 系统的核心就是 kernel，它起到调度硬件软件资源的作用。</p>
<p>kernel 有四个主要的功能</p>
<ul>
<li>System memory management</li>
<li>Software program management</li>
<li>Hardware management</li>
<li>Filesystem management</li>
</ul>
<h5 id="System-Memory-management"><a href="#System-Memory-management" class="headerlink" title="System Memory management"></a>System Memory management</h5><p>下面的内容和操作系统相关，很多概念我都不是很感兴趣，可以先跳过</p>
<h2 id="Chapter-2-Getting-to-the-Shell"><a href="#Chapter-2-Getting-to-the-Shell" class="headerlink" title="Chapter 2: Getting to the Shell"></a>Chapter 2: Getting to the Shell</h2><p>终端介绍，跳过</p>
<h2 id="Chapter-3-Basic-bash-Shell-Commands"><a href="#Chapter-3-Basic-bash-Shell-Commands" class="headerlink" title="Chapter 3: Basic bash Shell Commands"></a>Chapter 3: Basic bash Shell Commands</h2><h3 id="Interacting-with-the-bash-Manual"><a href="#Interacting-with-the-bash-Manual" class="headerlink" title="Interacting with the bash Manual"></a>Interacting with the bash Manual</h3><p>man page 的结构如下</p>
<table>
<thead>
<tr>
<th align="left">Section</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Name</td>
<td align="left">Displays command name and a short description</td>
</tr>
<tr>
<td align="left">Syopsis</td>
<td align="left">Shows command syntax</td>
</tr>
<tr>
<td align="left">Configuration</td>
<td align="left">Provides configuration information</td>
</tr>
<tr>
<td align="left">Description</td>
<td align="left">Describes command generally</td>
</tr>
<tr>
<td align="left">Options</td>
<td align="left">Describes command option(s)</td>
</tr>
<tr>
<td align="left">Exit Status</td>
<td align="left">Defines command exit status indicator(s)</td>
</tr>
<tr>
<td align="left">Return Value</td>
<td align="left">describes command return value(s)</td>
</tr>
<tr>
<td align="left">Errors</td>
<td align="left">Provides command return value(s)</td>
</tr>
<tr>
<td align="left">Environment</td>
<td align="left">Describes envrionment variable(s) used</td>
</tr>
<tr>
<td align="left">Files</td>
<td align="left">Defines files used by command</td>
</tr>
<tr>
<td align="left">Versions</td>
<td align="left">Describes command version information</td>
</tr>
<tr>
<td align="left">Conforming To</td>
<td align="left">Provides standards followed</td>
</tr>
<tr>
<td align="left">Notes</td>
<td align="left">Describes additional helpful command material</td>
</tr>
<tr>
<td align="left">Bugs</td>
<td align="left">Provides the location to report found buds</td>
</tr>
<tr>
<td align="left">Example</td>
<td align="left">Shows command use examples</td>
</tr>
<tr>
<td align="left">Authors</td>
<td align="left">Provides information on command developers</td>
</tr>
<tr>
<td align="left">Copyright</td>
<td align="left">Defines command code copyright status</td>
</tr>
<tr>
<td align="left">See Also</td>
<td align="left">Refers similar available commands</td>
</tr>
</tbody></table>
<h3 id="Navigating-the-Filesystem"><a href="#Navigating-the-Filesystem" class="headerlink" title="Navigating the Filesystem"></a>Navigating the Filesystem</h3><p>常见的目录及用途</p>
<table>
<thead>
<tr>
<th align="left">Directory</th>
<th align="left">Usage</th>
</tr>
</thead>
<tbody><tr>
<td align="left">/</td>
<td align="left">root of the virtual directory, where normally, no files are placed</td>
</tr>
<tr>
<td align="left">/bin</td>
<td align="left">binary directory, where GNU user-level utilities are stored</td>
</tr>
<tr>
<td align="left">/boot</td>
<td align="left">boot directory, where boot files are stored</td>
</tr>
<tr>
<td align="left">/dev</td>
<td align="left">device directory, where Linux creates device nodes</td>
</tr>
<tr>
<td align="left">/etc</td>
<td align="left">system configuration files directory</td>
</tr>
<tr>
<td align="left">/home</td>
<td align="left">home directory, where Linux creates user directories</td>
</tr>
<tr>
<td align="left">/lib</td>
<td align="left">library directory, where system and application library files are stored</td>
</tr>
<tr>
<td align="left">/media</td>
<td align="left">media directory, a common place for mount points used for removable media</td>
</tr>
<tr>
<td align="left">/mnt</td>
<td align="left">mount directory, another common place for mount points used for removable media</td>
</tr>
<tr>
<td align="left">/opt</td>
<td align="left">optional directory, often used to store third-part software packages and data files</td>
</tr>
<tr>
<td align="left">/proc</td>
<td align="left">process directory, where current hardware and process information is stored</td>
</tr>
<tr>
<td align="left">/root</td>
<td align="left">root home directory</td>
</tr>
<tr>
<td align="left">/sbin</td>
<td align="left">system binary directory, where many GNU admin-level utilities are stored</td>
</tr>
<tr>
<td align="left">/run</td>
<td align="left">run directory, where runtime data is held during system operation</td>
</tr>
<tr>
<td align="left">/srv</td>
<td align="left">service directory, where local services stre their files</td>
</tr>
<tr>
<td align="left">/sys</td>
<td align="left">system directory, where system hardware information files are stored</td>
</tr>
<tr>
<td align="left">/tmp</td>
<td align="left">temporary directory, where temporary work files can be crated and destroyed</td>
</tr>
<tr>
<td align="left">/usr</td>
<td align="left">user binary directory, where the bulk of GUN user-level utilities and data files are stored</td>
</tr>
<tr>
<td align="left">/var</td>
<td align="left">variable directory, for files that change frequently, such as log files</td>
</tr>
</tbody></table>
<h3 id="Listing-Files-and-Directories"><a href="#Listing-Files-and-Directories" class="headerlink" title="Listing Files and Directories"></a>Listing Files and Directories</h3><h4 id="Displaying-a-basic-list"><a href="#Displaying-a-basic-list" class="headerlink" title="Displaying a basic list"></a>Displaying a basic list</h4><p>展示文件命令 <code>ls</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果终端没有配置颜色，使用 -F 区分文件和文件夹,可执行文件后会加 *</span></span><br><span class="line">ls -F</span><br><span class="line"><span class="comment"># test3b.sh*      tmp_folder/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -a 显示所有文件，包括隐藏文件</span></span><br><span class="line">ls -a</span><br><span class="line"><span class="comment"># . npm  Documents</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -R 循环显示子目录</span></span><br><span class="line">ls -F -R</span><br><span class="line"><span class="comment"># badtest*        nohup.out       search.xml      search.xml.bak  tmp_folder/</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ./tmp_folder:</span></span><br><span class="line"><span class="comment"># test1.sh*       test10b.out</span></span><br></pre></td></tr></table></figure>

<h4 id="Displaying-a-long-listing"><a href="#Displaying-a-long-listing" class="headerlink" title="Displaying a long listing"></a>Displaying a long listing</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Displaying a long list</span></span><br><span class="line">ls -l</span><br><span class="line"><span class="comment"># total 10112</span></span><br><span class="line"><span class="comment"># -rwxr--r--   1 i306454  staff      159 May 30 15:56 badtest</span></span><br><span class="line"><span class="comment"># -rw-------   1 i306454  staff      138 Jun  2 19:12 nohup.out</span></span><br></pre></td></tr></table></figure>

<p>long list 显示格式说明</p>
<ul>
<li>The file type, directory(d), regular file(-), linked file(l), character device(c) or block device(b)</li>
<li>The file permissions</li>
<li>The number of file hard links</li>
<li>The file owner username</li>
<li>The file primary group name</li>
<li>The file byte size</li>
<li>The last time file was modified</li>
<li>The filename or directory name</li>
</ul>
<p>long list 是一个比较强力的模式，你可以收集到很多信息</p>
<h4 id="Filtering-listing-output"><a href="#Filtering-listing-output" class="headerlink" title="Filtering listing output"></a>Filtering listing output</h4><p>过滤文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -l bad*</span><br><span class="line"><span class="comment"># -rwxr--r--  1 i306454  staff  159 May 30 15:56 badtest</span></span><br></pre></td></tr></table></figure>

<p>可用的过滤符</p>
<ul>
<li>? 单个字符</li>
<li>* 多个字符</li>
<li>[] 多选，可以是 [ai], [a-i],[!a]</li>
</ul>
<p>使用星号的过滤方法也叫做 file globbing</p>
<h3 id="Handling-Files"><a href="#Handling-Files" class="headerlink" title="Handling Files"></a>Handling Files</h3><p>过一下常用的文件处理命令</p>
<h4 id="Creating-files"><a href="#Creating-files" class="headerlink" title="Creating files"></a>Creating files</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># touch 创建空文件</span></span><br><span class="line">touch test_one</span><br><span class="line">ls -l test_one</span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  0 Jun  4 11:25 test_one</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以在不改变文件内容的情况下更新最后改动时间，这个之前倒是不知道</span></span><br><span class="line">ls -l test_one </span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  3 Jun  4 11:27 test_one</span></span><br><span class="line">touch test_one </span><br><span class="line">ls -l test_one </span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  3 Jun  4 11:29 test_one</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -a 只修改最近访问时间</span></span><br><span class="line">ls -a test_one</span><br><span class="line"><span class="comment"># 不过 Mac 不支持这个参数</span></span><br></pre></td></tr></table></figure>

<h4 id="Copying-files"><a href="#Copying-files" class="headerlink" title="Copying files"></a>Copying files</h4><p>format: <code>cp source destination</code>, copy 的文件是一个全新的文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -i 当文件已经存在时，询问是否覆盖</span></span><br><span class="line">cp -i test_one test_two </span><br><span class="line"><span class="comment"># overwrite test_two? (y/n [n]) n</span></span><br><span class="line"><span class="comment"># not overwritten</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -d 只显示文件夹，不显示文件夹内容</span></span><br><span class="line">ls -Fd tmp_folder</span><br><span class="line"><span class="comment"># tmp_folder/</span></span><br><span class="line">ls -F tmp_folder/</span><br><span class="line"><span class="comment"># test1.sh*       test10b.out...</span></span><br></pre></td></tr></table></figure>

<h4 id="Linking-files"><a href="#Linking-files" class="headerlink" title="Linking files"></a>Linking files</h4><p>Linux 中你的文件可以有一个物理主体和多个虚拟链接，这种链接即为 links。系统中有两种链接</p>
<ul>
<li>A symbolic link</li>
<li>A hard link</li>
</ul>
<p>A symbolic link is simply a physical file that points to another file somewhere in the virtual directory structure. The two symnolically linked together files do not share the same contents.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ln -s test_one  sl_test_one</span><br><span class="line">ls -l *test_one</span><br><span class="line"><span class="comment"># lrwxr-xr-x  1 i306454  staff  8 Jun  4 12:30 sl_test_one -&gt; test_one</span></span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  3 Jun  4 11:29 test_one</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -i 显示 inode 名字</span></span><br><span class="line">ls -i *test_one</span><br><span class="line">51540816 sl_test_one    51538439 test_one</span><br></pre></td></tr></table></figure>

<p>hard link 是一个虚拟链接，你可以通过它对原文件做修改</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ln test_two hl_test_two</span><br><span class="line"></span><br><span class="line">ls -il *test_two</span><br><span class="line"><span class="comment"># 51538882 -rw-r--r--  2 i306454  staff  3 Jun  4 11:38 hl_test_two</span></span><br><span class="line"><span class="comment"># 51538882 -rw-r--r--  2 i306454  staff  3 Jun  4 11:38 test_two</span></span><br></pre></td></tr></table></figure>

<p><strong>Note</strong> 创建 hard link 要求你创建的地方是同一个物理空间，如果是分开的空间，只能创建 symblic link.</p>
<p>查阅下来发现，符号链接和硬链接最主要的区别有</p>
<ul>
<li>symbolic link 和原文件有不同的 inode, hard link 和原文件相同</li>
<li>hard link 启动备份的作用，当所有指向同一个 inode 的文件都删除了文件才删除</li>
<li>symbolic link 保存原文件路径，当原文件删除了，link 的文件内容就消失了</li>
</ul>
<h4 id="Renaming-files"><a href="#Renaming-files" class="headerlink" title="Renaming files"></a>Renaming files</h4><p>Renaming files is called moving files. <code>mv</code> won’t change the inode number.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">touch file1</span><br><span class="line">mv file1 file2</span><br><span class="line">ls file*</span><br><span class="line"><span class="comment"># file2</span></span><br></pre></td></tr></table></figure>

<p><code>mv</code> 也支持整个文件夹的迁移，且不需要加任何参数</p>
<h4 id="Deleting-files"><a href="#Deleting-files" class="headerlink" title="Deleting files"></a>Deleting files</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rm -i file2</span><br><span class="line"><span class="comment"># remove file2?</span></span><br></pre></td></tr></table></figure>

<h3 id="Managing-Directories"><a href="#Managing-Directories" class="headerlink" title="Managing Directories"></a>Managing Directories</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir New_Dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多级文件夹</span></span><br><span class="line">mkdir -p folder1/folder2/folder3</span><br><span class="line">ls -R folder1</span><br><span class="line"><span class="comment"># folder2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># folder1/folder2:</span></span><br><span class="line"><span class="comment"># folder3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># folder1/folder2/folder3:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rmdir 只能删除空文件夹</span></span><br><span class="line">rmdir folder1</span><br><span class="line"><span class="comment"># rmdir: folder1: Directory not empty</span></span><br><span class="line"></span><br><span class="line">rm -rf folder1</span><br></pre></td></tr></table></figure>

<h3 id="Viewing-File-Contents"><a href="#Viewing-File-Contents" class="headerlink" title="Viewing File Contents"></a>Viewing File Contents</h3><p>使用 <code>file</code> 瞥一眼文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">file folder1</span><br><span class="line"><span class="comment"># folder1: directory</span></span><br><span class="line">file file2</span><br><span class="line"><span class="comment"># file2: empty</span></span><br><span class="line">ile search.xml</span><br><span class="line"><span class="comment"># search.xml: XML 1.0 document text, UTF-8 Unicode text, with very long lines, with overstriking</span></span><br><span class="line">file badtest</span><br><span class="line"><span class="comment"># badtest: Bourne-Again shell script text executable, ASCII text</span></span><br></pre></td></tr></table></figure>

<p><code>cat</code> 全揽文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat tree.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># -n 显示行号</span></span><br><span class="line">cat -n badtest </span><br><span class="line">    <span class="comment">#  1  #!/usr/local/bin/bash</span></span><br><span class="line">    <span class="comment">#  2  # Testing closing file descriptors</span></span><br><span class="line">    <span class="comment">#  3</span></span><br><span class="line">    <span class="comment">#  4  exec 3&gt; test17file</span></span><br><span class="line">    <span class="comment">#  5</span></span><br><span class="line">    <span class="comment">#  6  echo &quot;This is a test line of data&quot; &gt;&amp;3</span></span><br><span class="line">    <span class="comment">#  7</span></span><br><span class="line">    <span class="comment">#  8  exec 3&gt;&amp;-</span></span><br><span class="line">    <span class="comment">#  9</span></span><br><span class="line">    <span class="comment"># 10  echo &quot;This won&#x27;t work&quot; &gt;&amp;3</span></span><br><span class="line">    <span class="comment"># 11</span></span><br><span class="line">    <span class="comment"># 12</span></span><br><span class="line">    <span class="comment"># 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示 non-blank 的行号</span></span><br><span class="line">cat -b badtest </span><br><span class="line">    <span class="comment">#  1  #!/usr/local/bin/bash</span></span><br><span class="line">    <span class="comment">#  2  # Testing closing file descriptors</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#  3  exec 3&gt; test17file</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#  4  echo &quot;This is a test line of data&quot; &gt;&amp;3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#  5  exec 3&gt;&amp;-</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#  6  echo &quot;This won&#x27;t work&quot; &gt;&amp;3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ^I 代替 tab, Mac 不支持</span></span><br><span class="line">cat -T badtest</span><br></pre></td></tr></table></figure>

<h4 id="Using-the-more-command"><a href="#Using-the-more-command" class="headerlink" title="Using the more command"></a>Using the more command</h4><p><code>cat</code> 只能全文显示，<code>more</code> 显示一部分并让你自己选择后面的动作</p>
<h4 id="Using-the-less-command"><a href="#Using-the-less-command" class="headerlink" title="Using the less command"></a>Using the less command</h4><p>别被它的名字骗了，其实他是 more 的增强版 for phrase ‘less is more’</p>
<h4 id="Viewing-parts-of-a-file"><a href="#Viewing-parts-of-a-file" class="headerlink" title="Viewing parts of a file"></a>Viewing parts of a file</h4><p><code>tail</code> 默认只显示文件的最后 10 行，<code>-n</code> 指定显示行数 <code>tail -n 2 file</code></p>
<p><code>head</code> 默认显示开头 10 行，<code>- 5</code> 指定行数 <code>head -3 file</code>. 格式和 tail 不统一，真是干了</p>
<p>试了下，这两个命令都可以用 <code>-n 3</code> 和 <code>-3</code> 的格式，没区别</p>
<h2 id="Chapter-4-More-bash-Shell-Commands"><a href="#Chapter-4-More-bash-Shell-Commands" class="headerlink" title="Chapter 4: More bash Shell Commands"></a>Chapter 4: More bash Shell Commands</h2><h3 id="Monitoring-Programs"><a href="#Monitoring-Programs" class="headerlink" title="Monitoring Programs"></a>Monitoring Programs</h3><h4 id="Peeking-at-the-processes"><a href="#Peeking-at-the-processes" class="headerlink" title="Peeking at the processes"></a>Peeking at the processes</h4><p>Linux 系统中，用 process 表示运行着的系统。可以用 <code>ps</code>(process status) 命令查看.</p>
<p>默认情况下，只显示四个内容，process ID，terminal that they are running from, and the CUP time the process has used.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ps </span><br><span class="line">  PID TTY           TIME CMD</span><br><span class="line">  647 ttys000    0:02.15 -zsh</span><br><span class="line">12163 ttys000   11:26.77 /Users/i306454/SAPDevelop/tools/sapjvm_8/bin/java -Dlog4j.co</span><br><span class="line">12183 ttys000    0:01.12 tail -f /Users/i306454/SAPDevelop/workspace/trunk/tomcat-sfs</span><br><span class="line"> 1238 ttys001    0:09.65 /bin/zsh -l</span><br><span class="line"> 9378 ttys002    0:03.04 /bin/zsh --login -i</span><br></pre></td></tr></table></figure>

<p><code>ps</code> command 有三种类型的参数</p>
<ul>
<li>Unix style parameters</li>
<li>BSD style parameters</li>
<li>GNU long parameters</li>
</ul>
<blockquote>
<p>Unix-style parameters</p>
</blockquote>
<p>简单摘录几个, 而且书上列的只是一部分，主要记住几个常用的就行了</p>
<table>
<thead>
<tr>
<th align="left">Parameter</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-A</td>
<td align="left">Shows all processes</td>
</tr>
<tr>
<td align="left">-N</td>
<td align="left">Shows the opposite of the specified parameters</td>
</tr>
<tr>
<td align="left">-a</td>
<td align="left">Shows all processes except session headers and processes without a terminal</td>
</tr>
<tr>
<td align="left">-d</td>
<td align="left">Shows all processes except session headers</td>
</tr>
<tr>
<td align="left">-e</td>
<td align="left">Shows all processes</td>
</tr>
<tr>
<td align="left">-f</td>
<td align="left">Displays a full format listing</td>
</tr>
<tr>
<td align="left">-l</td>
<td align="left">Displays a long listing</td>
</tr>
</tbody></table>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ps -ef | head</span><br><span class="line"><span class="comment">#   UID   PID  PPID   C STIME   TTY           TIME CMD</span></span><br><span class="line"><span class="comment">#     0     1     0   0 10:09AM ??         1:23.22 /sbin/launchd</span></span><br><span class="line"><span class="comment">#     0    64     1   0 10:09AM ??         0:03.00 /usr/sbin/syslogd</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">ps -l | head</span><br><span class="line"><span class="comment"># UID   PID  PPID        F CPU PRI NI       SZ    RSS WCHAN     S             ADDR TTY           TIME CMD</span></span><br><span class="line"><span class="comment"># 501   647   646     4006   0  31  0  5457412   5200 -      S+                  0 ttys000    0:04.03 -zsh</span></span><br></pre></td></tr></table></figure>

<ul>
<li>UID: The user responsible for launching the process</li>
<li>PID: The process ID of the process</li>
<li>PPID: The PID of the parent process(if a process is start by another process)</li>
<li>C: Processor utilization over the lifetime of the process</li>
<li>STIME: The system time when the process started</li>
<li>TTY: The termnal device from which the porcess was launched</li>
<li>TIME: The cumulative CUP Time required to run the process</li>
<li>CMD: The name of the program that wat started</li>
<li>F: System flags assigned to the process by the kernel</li>
<li>S: The state of the process. O-running on proecssor; S-sleeping; R-runnable, waiting to run; Z-zombie, process terminated but parent not availale; T-process stopped;</li>
<li>PRI: The priority of the process(higher numbers mean low priority)</li>
<li>NI: The nice value, which is used for determining priorites</li>
<li>ADDR: The memory address of the process</li>
<li>SZ: Approximate amount of swap space required if the process was swapped out</li>
<li>WCHAN: Address of the kernel function where the process is sleeping</li>
</ul>
<p>其他两种我很少用，先留着把，有机会再补全</p>
<h4 id="Real-time-process-monitoring"><a href="#Real-time-process-monitoring" class="headerlink" title="Real-time process monitoring"></a>Real-time process monitoring</h4><p><code>ps</code> 只能显示一个时间点的 process 状态，如果要实时显示，需要用到 <code>top</code> 命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">top</span><br><span class="line"><span class="comment"># PID    COMMAND      %CPU TIME     #TH    #WQ  #PORT MEM    PURG   CMPRS  PGRP  PPID STATE    BOOSTS          %CPU_ME %CPU_OTHRS UID  FAULTS     COW     MSGSENT    MSGRECV   SYSBSD     SYSMACH    CSW        PAGEIN IDLEW    POWE INSTRS    CYCLES    USER</span></span><br><span class="line"><span class="comment"># 1841   com.docker.h 36.7 68:12.08 13     0    37    19G    0B     629M   1710  1830 sleeping *0[1]           0.00000 0.00000    501  202373842+ 473     569        335       85444924+  920        48973831+  17     3949456+ 59.4 469486491 786452501 i306454</span></span><br></pre></td></tr></table></figure>

<h4 id="Stopping-processes"><a href="#Stopping-processes" class="headerlink" title="Stopping processes"></a>Stopping processes</h4><p>Linux 系统中使用 signals 来和其他 process 交互。常用的 signals 列表</p>
<table>
<thead>
<tr>
<th align="left">Signal</th>
<th align="left">Name</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">HUP</td>
<td align="left">Hangs up</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">INT</td>
<td align="left">Interrupts</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">QUIT</td>
<td align="left">Stops running</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">KILL</td>
<td align="left">Unconditionally terminates</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left">SEGV</td>
<td align="left">Produces segment violation</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left">TERM</td>
<td align="left">Terminates if possible</td>
</tr>
<tr>
<td align="left">17</td>
<td align="left">STOP</td>
<td align="left">Stops unconditionally, but doesn’t terminate</td>
</tr>
<tr>
<td align="left">18</td>
<td align="left">TSTP</td>
<td align="left">Stops or pauses, but continues to run in background</td>
</tr>
<tr>
<td align="left">19</td>
<td align="left">CONT</td>
<td align="left">Resumes execution after STOP or TSTP</td>
</tr>
</tbody></table>
<p><strong>The kill command</strong> 只有 process 的 owner 或者 root user 有权限杀死进程。 格式：<code>kill 3904</code></p>
<p><strong>The killall command</strong> 可以根据名字关闭多个进程 <code>killall http*</code></p>
<h3 id="Monitoring-Disk-Space"><a href="#Monitoring-Disk-Space" class="headerlink" title="Monitoring Disk Space"></a>Monitoring Disk Space</h3><h4 id="Mounting-media"><a href="#Mounting-media" class="headerlink" title="Mounting media"></a>Mounting media</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前挂在的设备</span></span><br><span class="line">mount</span><br><span class="line"><span class="comment"># /dev/disk1s1s1 on / (apfs, sealed, local, read-only, journaled)</span></span><br><span class="line"><span class="comment"># devfs on /dev (devfs, local, nobrowse)</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>显示信息：</p>
<ul>
<li>The device filename of the media</li>
<li>The mount point in the virtual directory where the media is mounted</li>
<li>The filesystem type</li>
<li>The access status of the mounted media</li>
</ul>
<p>手动挂载，你需要是 root 或者用 sudo，格式为 <code>mount -t type device directory</code>, sample <code>mount -t vfat /dev/sdb1 /media/disk</code></p>
<p>type 指定了设备的文件类型，如果你想要和 Windows 下共享这个设备，你最好使用下面这些文件类型</p>
<ul>
<li>vfat: Windows long filesystem</li>
<li>ntfs: Windows advanced filesystem used in Windows NT, XP and Vista</li>
<li>iso9660: The standard CD-ROM filesystem</li>
</ul>
<p><code>unmount [directory | device]</code> 解绑，如果解绑时有 process 还在这个设备上运行，系统会阻止你</p>
<h4 id="Using-the-df-command"><a href="#Using-the-df-command" class="headerlink" title="Using the df command"></a>Using the df command</h4><p>当你想要看看磁盘还有多少可用空间时。。。</p>
<p><code>df</code> command allows you to easily see what’s happening on all the mounted disks</p>
<p>df - display free disk space</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">df -h</span><br><span class="line"><span class="comment"># Filesystem       Size   Used  Avail Capacity iused      ifree %iused  Mounted on</span></span><br><span class="line"><span class="comment"># /dev/disk1s1s1  932Gi   14Gi  749Gi     2%  553757 9767424403    0%   /</span></span><br><span class="line"><span class="comment"># devfs           190Ki  190Ki    0Bi   100%     656          0  100%   /dev</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<h4 id="Using-the-du-command"><a href="#Using-the-du-command" class="headerlink" title="Using the du command"></a>Using the du command</h4><p>df 是查看磁盘细心， du 是查看磁盘下的文件信息</p>
<p>The <code>du</code> command shows the disk usage or a specific directory(by default, the current directory)</p>
<p>du - display disk usage statistics</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 说是文件也会显示，问什么我这里看不到。。。</span></span><br><span class="line">du .</span><br><span class="line"><span class="comment"># 104     ./tmp_folder</span></span><br><span class="line"><span class="comment"># 0       ./folder1/folder2/folder3</span></span><br><span class="line"><span class="comment"># 0       ./folder1/folder2</span></span><br><span class="line"><span class="comment"># 0       ./folder1</span></span><br></pre></td></tr></table></figure>

<p>一些可选参数</p>
<ul>
<li>-c: 统计结果</li>
<li>-h: 方便阅读的结果</li>
<li>-s: Summarizes each argument</li>
</ul>
<h3 id="Working-with-Data-Files"><a href="#Working-with-Data-Files" class="headerlink" title="Working with Data Files"></a>Working with Data Files</h3><p>列出一些处理大量数据时用到的工具</p>
<h4 id="Sorting-data"><a href="#Sorting-data" class="headerlink" title="Sorting data"></a>Sorting data</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat file1</span><br><span class="line"><span class="comment"># one</span></span><br><span class="line"><span class="comment"># two</span></span><br><span class="line"><span class="comment"># three</span></span><br><span class="line"><span class="comment"># four</span></span><br><span class="line"><span class="comment"># five</span></span><br><span class="line">sort file1</span><br><span class="line"><span class="comment"># five</span></span><br><span class="line"><span class="comment"># four</span></span><br><span class="line"><span class="comment"># one</span></span><br><span class="line"><span class="comment"># three</span></span><br><span class="line"><span class="comment"># two</span></span><br><span class="line">cat file2</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 100</span></span><br><span class="line"><span class="comment"># 45</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># 145</span></span><br><span class="line"><span class="comment"># 75</span></span><br><span class="line">sort file2</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># 100</span></span><br><span class="line"><span class="comment"># 145</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 45</span></span><br><span class="line"><span class="comment"># 75</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -n 指定数字排序</span></span><br><span class="line">sort -n file2</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># 45</span></span><br><span class="line"><span class="comment"># 75</span></span><br><span class="line"><span class="comment"># 100</span></span><br><span class="line"><span class="comment"># 145</span></span><br><span class="line"></span><br><span class="line">cat file3</span><br><span class="line"><span class="comment"># Apr</span></span><br><span class="line"><span class="comment"># Aug</span></span><br><span class="line"><span class="comment"># Dec</span></span><br><span class="line"><span class="comment"># Feb</span></span><br><span class="line"><span class="comment"># Jan</span></span><br><span class="line"><span class="comment"># Jul</span></span><br><span class="line"><span class="comment"># Jun</span></span><br><span class="line"><span class="comment"># Mar</span></span><br><span class="line"><span class="comment"># May</span></span><br><span class="line"><span class="comment"># Nov</span></span><br><span class="line"><span class="comment"># Oct</span></span><br><span class="line"><span class="comment"># Sep</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按月份排序</span></span><br><span class="line">sort -M file3</span><br><span class="line"><span class="comment"># Jan</span></span><br><span class="line"><span class="comment"># Feb</span></span><br><span class="line"><span class="comment"># Mar</span></span><br><span class="line"><span class="comment"># Apr</span></span><br><span class="line"><span class="comment"># May</span></span><br><span class="line"><span class="comment"># Jun</span></span><br><span class="line"><span class="comment"># Jul</span></span><br><span class="line"><span class="comment"># Aug</span></span><br><span class="line"><span class="comment"># Sep</span></span><br><span class="line"><span class="comment"># Oct</span></span><br><span class="line"><span class="comment"># Nov</span></span><br><span class="line"><span class="comment"># Dec</span></span><br></pre></td></tr></table></figure>

<p>其他比较常见的参数</p>
<ul>
<li>-t 指定分割符</li>
<li>-k 指定排序的列</li>
<li>-r 倒序</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前文件夹下的文件倒序排列</span></span><br><span class="line">du -sh * | sort -nr</span><br><span class="line"><span class="comment">#  52K    tmp_folder</span></span><br><span class="line"><span class="comment"># 4.0K    tree.txt</span></span><br><span class="line"><span class="comment"># 4.0K    test_thr</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<h4 id="Searching-for-data"><a href="#Searching-for-data" class="headerlink" title="Searching for data"></a>Searching for data</h4><p><code>grep [options] patttern [file]</code></p>
<p>一些有趣的可选参数</p>
<ul>
<li>-v 挑选不 match 的那些</li>
<li>-n 行号</li>
<li>-o 只显示配的内容</li>
<li>-c 显示匹配的数量</li>
<li>-e 多个匹配 <code>grep -e t -e f file1</code></li>
<li>使用正则 grep [tf] file1</li>
</ul>
<h4 id="Compressing-data"><a href="#Compressing-data" class="headerlink" title="Compressing data"></a>Compressing data</h4><p>Linux 系统中的压缩工具</p>
<table>
<thead>
<tr>
<th align="left">Utility</th>
<th align="left">File Extension</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">bzip2</td>
<td align="left">.bz2</td>
<td align="left">Uses the Burrows-Wheeler block sorting text compression algorith and Fuffman coding</td>
</tr>
<tr>
<td align="left">compress</td>
<td align="left">.Z</td>
<td align="left">Original Unix file compression utility; starting to fade away into obscurity</td>
</tr>
<tr>
<td align="left">gzip</td>
<td align="left">.gz</td>
<td align="left">The GUN Project’s compression utility; uses Lempel-Ziv coding</td>
</tr>
<tr>
<td align="left">zip</td>
<td align="left">.zip</td>
<td align="left">The Unix version of the PKZIP program for Windows</td>
</tr>
</tbody></table>
<p>gzip 是 Linux 中使用度最高的压缩工具，它由三部分组成</p>
<ul>
<li>gzip for compressing files</li>
<li>gzcat for displaying the contents of compressed text files</li>
<li>gunzip for uncompressing files</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gzip file1</span><br><span class="line">ls -l file1*</span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  50 Jun  4 13:57 file1.gz</span></span><br><span class="line">gzip file*</span><br><span class="line"><span class="comment"># gzip: file1.gz already has .gz suffix -- unchanged</span></span><br><span class="line">ls -l file*</span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  50 Jun  4 13:57 file1.gz</span></span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  46 Jun  4 13:58 file2.gz</span></span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  34 Jun  4 14:02 file3.gz</span></span><br></pre></td></tr></table></figure>

<h4 id="Archiving-data"><a href="#Archiving-data" class="headerlink" title="Archiving data"></a>Archiving data</h4><p>虽然 zip 挺好用，但是 Linux 上用的最多的还是 tar command. tar 本来是用来归档到 tape device 的，但是它也能用来归档到文件，后来还变得越来越受欢迎了</p>
<p><code>tar function [options] object1 object2</code></p>
<p>The tar Command Functions</p>
<table>
<thead>
<tr>
<th align="left">Function</th>
<th align="left">Long Name</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-A</td>
<td align="left">–concatenate</td>
<td align="left">Appends an existing tar archive file to another existing tar archive file</td>
</tr>
<tr>
<td align="left">-c</td>
<td align="left">–create</td>
<td align="left">Create a new tar archive file</td>
</tr>
<tr>
<td align="left">-d</td>
<td align="left">–diff</td>
<td align="left">Checks the differences between a tar archive file and the filesystem</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">–delete</td>
<td align="left">Deletes from an existing tar archive file</td>
</tr>
<tr>
<td align="left">-r</td>
<td align="left">–append</td>
<td align="left">Appends files to the end of an existing archive file</td>
</tr>
<tr>
<td align="left">-t</td>
<td align="left">–list</td>
<td align="left">Lists the contents of an existing tar archive file</td>
</tr>
<tr>
<td align="left">-u</td>
<td align="left">–update</td>
<td align="left">Appends files to an existing tar archive file that are newer than a file with the same name in the existing archive</td>
</tr>
<tr>
<td align="left">-x</td>
<td align="left">–extract</td>
<td align="left">Extract files from an existing archive file</td>
</tr>
</tbody></table>
<p>The tar Command Options</p>
<table>
<thead>
<tr>
<th align="left">Option</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-C dir</td>
<td align="left">Changes to the specified directory</td>
</tr>
<tr>
<td align="left">-f file</td>
<td align="left">Output results to file(or device)</td>
</tr>
<tr>
<td align="left">-j</td>
<td align="left">Redirects output to the bzip2 command for compression</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">Preserves all file permissions</td>
</tr>
<tr>
<td align="left">-v</td>
<td align="left">Lists files as they are processed</td>
</tr>
<tr>
<td align="left">-z</td>
<td align="left">Redirects the output to the gzip command for compression</td>
</tr>
</tbody></table>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -c create new tar file</span></span><br><span class="line"><span class="comment"># -v list process file</span></span><br><span class="line"><span class="comment"># -f output result to file</span></span><br><span class="line">tar -cvf test.tar tmp_folder/</span><br><span class="line"><span class="comment"># a tmp_folder</span></span><br><span class="line"><span class="comment"># a tmp_folder/test11.sh</span></span><br><span class="line"><span class="comment"># a tmp_folder/test2.sh</span></span><br><span class="line"><span class="comment"># a ...</span></span><br><span class="line"></span><br><span class="line">ls <span class="built_in">test</span>*</span><br><span class="line"><span class="comment"># test.tar </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并不会解压，只是看看</span></span><br><span class="line"><span class="comment"># -t list contents in tar</span></span><br><span class="line">tar -tf test.tar </span><br><span class="line"><span class="comment"># tmp_folder/</span></span><br><span class="line"><span class="comment"># tmp_folder/test11.sh</span></span><br><span class="line"><span class="comment"># tmp_folder/test2.sh</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xvf test.tar </span><br><span class="line"><span class="comment"># x tmp_folder/</span></span><br><span class="line"><span class="comment"># x tmp_folder/test11.sh</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p><strong>Tip</strong> 网上下的包很多都是 <code>.tgz</code> 格式的，是 gzipped tar files 的意思，可以用 <code>tar -zxvf filename.tgz</code></p>
<h2 id="Chapter-5-Understanding-the-Shell"><a href="#Chapter-5-Understanding-the-Shell" class="headerlink" title="Chapter 5: Understanding the Shell"></a>Chapter 5: Understanding the Shell</h2><p>这章将学习一些 shell process 相关的知识，子 shell 和 父 shell 的关系等</p>
<h3 id="Exploring-Shell-Types"><a href="#Exploring-Shell-Types" class="headerlink" title="Exploring Shell Types"></a>Exploring Shell Types</h3><p>你默认启动的 shell 是配置在 <code>/etc/passwd</code> 文件中的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># root:*:0:0:System Administrator:/var/root:/bin/sh</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">ls -lF /bin/sh </span><br><span class="line"><span class="comment"># -rwxr-xr-x  1 root  wheel  120912 Jan  1  2020 /bin/sh*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他一些自带的 sh</span></span><br><span class="line">ls -lF /bin/*sh</span><br><span class="line"><span class="comment"># -r-xr-xr-x  1 root  wheel  1296704 Jan  1  2020 /bin/bash*</span></span><br><span class="line"><span class="comment"># -rwxr-xr-x  1 root  wheel  1106144 Jan  1  2020 /bin/csh*</span></span><br><span class="line"><span class="comment"># -rwxr-xr-x  1 root  wheel   277440 Jan  1  2020 /bin/dash*</span></span><br><span class="line"><span class="comment"># -r-xr-xr-x  1 root  wheel  2585424 Jan  1  2020 /bin/ksh*</span></span><br><span class="line"><span class="comment"># -rwxr-xr-x  1 root  wheel   120912 Jan  1  2020 /bin/sh*</span></span><br><span class="line"><span class="comment"># -rwxr-xr-x  1 root  wheel  1106144 Jan  1  2020 /bin/tcsh*</span></span><br><span class="line"><span class="comment"># -rwxr-xr-x  1 root  wheel  1347856 Jan  1  2020 /bin/zsh*</span></span><br></pre></td></tr></table></figure>

<h3 id="Exploring-Parent-and-Child-Shell-Relationships"><a href="#Exploring-Parent-and-Child-Shell-Relationships" class="headerlink" title="Exploring Parent and Child Shell Relationships"></a>Exploring Parent and Child Shell Relationships</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ps -f               </span><br><span class="line">  <span class="comment"># UID   PID  PPID   C STIME   TTY           TIME CMD</span></span><br><span class="line">  <span class="comment"># 501   667   665   0 10:10AM ttys000    0:03.74 -zsh</span></span><br><span class="line">  <span class="comment"># 501  1454  1433   0 10:10AM ttys001    0:00.99 /bin/zsh -l</span></span><br><span class="line">  <span class="comment"># 501  2027   637   0 10:11AM ttys002    0:00.38 /bin/zsh --login -i</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 zsh 中启动一个 bash</span></span><br><span class="line">bash</span><br><span class="line"></span><br><span class="line">ps -f</span><br><span class="line">  <span class="comment"># UID   PID  PPID   C STIME   TTY           TIME CMD</span></span><br><span class="line">  <span class="comment"># 501   667   665   0 10:10AM ttys000    0:03.74 -zsh</span></span><br><span class="line">  <span class="comment"># 501  1454  1433   0 10:10AM ttys001    0:01.04 /bin/zsh -l</span></span><br><span class="line">  <span class="comment"># 501 12146  1454   0  4:07PM ttys001    0:00.01 bash</span></span><br><span class="line">  <span class="comment"># 501  2027   637   0 10:11AM ttys002    0:00.38 /bin/zsh --login -i</span></span><br><span class="line"><span class="comment"># 可以看到新建了一个 bash process, PPID 是 /bin/zsh 的地址</span></span><br></pre></td></tr></table></figure>

<p>上面的例子中，bash 就是 zsh 的子 shell, 他会复制一部分父 shell 的环境变量，这里会导致一些小问题，第6章会介绍。子 shell 也叫 subshell. subshell 可以再建 subshell. <code>ps --forest</code> 可以显示树桩结构，不过貌似 mac 不支持</p>
<h4 id="Looking-at-process-lists"><a href="#Looking-at-process-lists" class="headerlink" title="Looking at process lists"></a>Looking at process lists</h4><p>一行运行多个 cmd, 使用 semicolon 分割 <code>pwd ; ls ; cd /etc ; pwd ; cd ; pwd ; ls</code> 但是它并不是一个 process，将它用括号包裹之后，会启动 subshell 运行它 <code>(pwd ; ls ; cd /etc ; pwd ; cd ; pwd ; ls)</code> 和这个语法相似的还有 <code>&#123; command; &#125;</code> 这个不会启动 subshell. 可以通过打印 <code>$BASH_SUBSHELL</code> 变量来验证</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">pwd</span> ; ls ; <span class="built_in">cd</span> /etc ; <span class="built_in">pwd</span> ; <span class="built_in">cd</span> ; <span class="built_in">pwd</span> ; ls ; <span class="built_in">echo</span> <span class="variable">$BASH_SUBSHELL</span>)</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="built_in">pwd</span> ; ls ; <span class="built_in">cd</span> /etc ; <span class="built_in">pwd</span> ; <span class="built_in">cd</span> ; <span class="built_in">pwd</span> ; ls ; <span class="built_in">echo</span> <span class="variable">$BASH_SUBSHELL</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line">(<span class="built_in">pwd</span>; (<span class="built_in">echo</span> <span class="variable">$BASH_SUBSHELL</span>))</span><br><span class="line"><span class="comment"># /Users/i306454</span></span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

<h4 id="Creatively-using-subshells"><a href="#Creatively-using-subshells" class="headerlink" title="Creatively using subshells"></a>Creatively using subshells</h4><h4 id="Investigation-background-mode"><a href="#Investigation-background-mode" class="headerlink" title="Investigation background mode"></a>Investigation background mode</h4><p><code>slepp</code> - 等待 x 秒</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &amp; 符号设置后台运行</span></span><br><span class="line">sleep 3000 &amp;</span><br><span class="line"><span class="comment"># [1] 12603</span></span><br><span class="line">ps</span><br><span class="line"><span class="comment"># 12391 ttys001    0:00.03 bash</span></span><br><span class="line"><span class="comment"># 12603 ttys001    0:00.00 sleep 3000</span></span><br></pre></td></tr></table></figure>

<h4 id="Putting-process-lists-into-the-background"><a href="#Putting-process-lists-into-the-background" class="headerlink" title="Putting process lists into the background"></a>Putting process lists into the background</h4><p>a process list is a command or series of commands executed within a subshell.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(sleep 2 ; <span class="built_in">echo</span> <span class="variable">$BASH_SUBSHELL</span> ; sleep 2)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">(sleep 2 ; <span class="built_in">echo</span> <span class="variable">$BASH_SUBSHELL</span> ; sleep 2) &amp;</span><br><span class="line"><span class="comment"># [2] 12658</span></span><br><span class="line">ps</span><br><span class="line"><span class="comment"># 12658 ttys001    0:00.00 bash</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [2]+  Done                    ( sleep 2; echo $BASH_SUBSHELL; sleep 2 )</span></span><br></pre></td></tr></table></figure>

<p>background 运行脚本 not have your terminal tied up with subshell’s I/O</p>
<p>sleep 和 echo 的 sample 只是示范，工作中，你可能会后台执行 tar <code>(tar -cf Rich.tar /home/rich ; tar -cf My.tar /home/christine)&amp;</code></p>
<h4 id="Looking-at-co-processing"><a href="#Looking-at-co-processing" class="headerlink" title="Looking at co-processing"></a>Looking at co-processing</h4><p>Co-processing does two thins at the same time. coproc 会起一个后台的 job 运行对应的命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">coproc sleep 10</span><br><span class="line"><span class="comment"># [2] 12746</span></span><br><span class="line"><span class="built_in">jobs</span> </span><br><span class="line"><span class="comment"># [1]-  Running                 sleep 3000 &amp;</span></span><br><span class="line"><span class="comment"># [2]+  Done                    coproc COPROC sleep 10</span></span><br></pre></td></tr></table></figure>

<p>默认的 coproc 起的 job 名字为 COPRO, 你也可以指定名字, curly bracket({) 换括号后面要接空格，语法规定。一般用默认的名字就行，只有当你需要和他们通信时，才会特别的取一个名字</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">coproc My_Job &#123; sleep 10; &#125;</span><br><span class="line"><span class="comment"># [2] 12848</span></span><br><span class="line"><span class="built_in">jobs</span></span><br><span class="line"><span class="comment"># [2]+  Running                 coproc My_Job &#123; sleep 10; &#125; &amp;</span></span><br></pre></td></tr></table></figure>

<p>后面还跟了一个 <code>ps --forest</code> 的实验，没法做 ╮(￣▽￣””)╭</p>
<p>Just remember taht spawning a subshell can be <strong>expensive and slow</strong>. Creating nested subshells is even more so!</p>
<h3 id="Understanding-Shell-Built-In-Commands"><a href="#Understanding-Shell-Built-In-Commands" class="headerlink" title="Understanding Shell Built-In Commands"></a>Understanding Shell Built-In Commands</h3><p>Built-in commands and non-built-in commands</p>
<h4 id="Looking-at-external-commands"><a href="#Looking-at-external-commands" class="headerlink" title="Looking at external commands"></a>Looking at external commands</h4><p>external command 也被叫做 filesystem command, 是在 bash shell 之外的，通常放在 /bin, /usr/bin, /sbin 或者 /usr/sbin</p>
<p><code>ps</code> 就是一个 external 的 command</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> ps </span><br><span class="line"><span class="comment"># /bin/ps</span></span><br><span class="line"><span class="built_in">type</span> -a ps </span><br><span class="line"><span class="comment"># ps is /bin/ps</span></span><br></pre></td></tr></table></figure>

<p>每当 external command 执行时，都会创建一个 child process, 这种行为叫做 forking.</p>
<h4 id="Looking-at-built-in-comands"><a href="#Looking-at-built-in-comands" class="headerlink" title="Looking at built-in comands"></a>Looking at built-in comands</h4><p>Built-in commands 不需要 child process 就能执行。他们是 shell 工具集的一部分。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> <span class="built_in">exit</span></span><br><span class="line"><span class="comment"># exit is a shell builtin</span></span><br><span class="line"><span class="built_in">type</span> <span class="built_in">cd</span></span><br><span class="line"><span class="comment"># cd is a shell builtin</span></span><br></pre></td></tr></table></figure>

<p>他们不需要 fork 或者运行文件，所以他们更快，效率更高。</p>
<p>有些 cmd 有两个版本，which 只会显示 external command</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> -a <span class="built_in">echo</span> </span><br><span class="line"><span class="comment"># echo is a shell builtin</span></span><br><span class="line"><span class="comment"># echo is /bin/echo</span></span><br><span class="line"><span class="built_in">which</span> <span class="built_in">echo</span> </span><br><span class="line"><span class="comment"># /bin/echo</span></span><br></pre></td></tr></table></figure>

<h4 id="Using-the-history-command"><a href="#Using-the-history-command" class="headerlink" title="Using the history command"></a>Using the history command</h4><p>显示 cmd 的历史记录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">history</span> </span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="comment">#  42  code test19</span></span><br><span class="line">  <span class="comment">#  43  ./test19</span></span><br><span class="line">  <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p><strong>Tip</strong> 设置环境变量 HISTSIZE 改变数量上限</p>
<p>使用 <code>!!</code> 执行上一条命令, bash 的历史记录会存在 <code>.bash_history</code> 文件中，当前 shell 的历史存在内存中，退出后存到文件中，通过 <code>history -a</code> 强制立刻写入文件</p>
<h4 id="Using-command-aliases"><a href="#Using-command-aliases" class="headerlink" title="Using command aliases"></a>Using command aliases</h4><p>为了简化输入，有了别名(alias)。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示自带的别名</span></span><br><span class="line"><span class="built_in">alias</span> -p</span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> li=<span class="string">&#x27;ls -li&#x27;</span></span><br><span class="line">li</span><br><span class="line"><span class="comment"># total 8</span></span><br><span class="line"><span class="comment">#  5091820 drwx------@  3 i306454  staff    96 Aug 20  2020 Applications</span></span><br></pre></td></tr></table></figure>

<h2 id="Using-Linux-Environment-Variables"><a href="#Using-Linux-Environment-Variables" class="headerlink" title="Using Linux Environment Variables"></a>Using Linux Environment Variables</h2><p>Environment variables are set in lots of places on the Linux system, and you should know where these places are.</p>
<p>这章将介绍环境变量存储的位置，怎么创建自己的环境变量，还介绍怎么使用 variable arrays.</p>
<h3 id="Exploring-Environment-Variables"><a href="#Exploring-Environment-Variables" class="headerlink" title="Exploring Environment Variables"></a>Exploring Environment Variables</h3><p>bash shell 使用 environment variable 存储 shell session 和 工作环境相关的信息。环境变量分两种</p>
<ul>
<li>Gloabl variables</li>
<li>Local variables</li>
</ul>
<h4 id="Looing-at-global-environment-variables"><a href="#Looing-at-global-environment-variables" class="headerlink" title="Looing at global environment variables"></a>Looing at global environment variables</h4><p>Gloabl variables 是所有 shell 都可见的，Local variables 是当前 shell 才可见的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 gloabl variables</span></span><br><span class="line">printenv</span><br><span class="line"><span class="comment"># SHELL=/bin/zsh</span></span><br><span class="line"><span class="comment"># LSCOLORS=Gxfxcxdxbxegedabagacad</span></span><br><span class="line"><span class="comment"># PIPENV_VENV_IN_PROJECT=1</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出单个变量</span></span><br><span class="line">printenv HOME</span><br><span class="line"><span class="comment"># /Users/i306454</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># env 貌似不能输出单个变量</span></span><br><span class="line">env HOME</span><br><span class="line"><span class="comment"># env: HOME: No such file or directory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以用 echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$HOME</span></span><br><span class="line"><span class="comment"># /Users/i306454</span></span><br></pre></td></tr></table></figure>

<h4 id="Looing-at-local-environment-variables"><a href="#Looing-at-local-environment-variables" class="headerlink" title="Looing at local environment variables"></a>Looing at local environment variables</h4><p>Linux 默认为每个 shell 定义基本的 local variables, 当然你也可以自定。系统中并没有输出本地变量的命令，但是有 set 可以输出 global + local</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span></span><br><span class="line"><span class="comment"># &#x27;!&#x27;=0</span></span><br><span class="line"><span class="comment"># &#x27;#&#x27;=0</span></span><br><span class="line"><span class="comment"># &#x27;$&#x27;=13377</span></span><br></pre></td></tr></table></figure>

<p>env vs printenv vs set:</p>
<ul>
<li>set = global + local + user-defined variables, result is sorted</li>
<li>env has additional functionality that printenv not have</li>
</ul>
<h3 id="Setting-User-Defined-Variables"><a href="#Setting-User-Defined-Variables" class="headerlink" title="Setting User-Defined Variables"></a>Setting User-Defined Variables</h3><h4 id="Setting-local-user-defined-variables"><a href="#Setting-local-user-defined-variables" class="headerlink" title="Setting local user-defined variables"></a>Setting local user-defined variables</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$my_var</span></span><br><span class="line"></span><br><span class="line">my_var=Hello</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_var</span></span><br><span class="line"><span class="comment"># Hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含空格的，需要用单/双引号包裹</span></span><br><span class="line">my_var=Hello world</span><br><span class="line"><span class="comment"># bash: world: command not found</span></span><br><span class="line">my_var=<span class="string">&#x27;Hello world&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_var</span></span><br><span class="line"><span class="comment"># Hello world</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新启一个 bash, 访问不到之前定义的 local variable</span></span><br><span class="line">bash</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_var</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>user-defined local varibale 使用小写，global 的使用大写。Linux 中的变量是区分大小写的。</p>
<h4 id="Setting-global-environment-variables"><a href="#Setting-global-environment-variables" class="headerlink" title="Setting global environment variables"></a>Setting global environment variables</h4><p>创建 gloabl variable 的方法：先创建一个 local variable，然后 export 成一个 global environment</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">my_var=<span class="string">&quot;I am Gloabl now&quot;</span></span><br><span class="line"><span class="built_in">export</span> my_var</span><br><span class="line">bash</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_var</span></span><br><span class="line"><span class="comment"># I am Gloabl now</span></span><br></pre></td></tr></table></figure>

<p>但是，在 child shell 中修改 global variable 并<strong>不会</strong>影响到 parent shell 中的值，这个好神奇, 即使用 export 在 subshell 中修改也不行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">my_var=<span class="string">&quot;Null&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_var</span></span><br><span class="line"><span class="comment"># Null</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_var</span></span><br><span class="line"><span class="comment"># I am Gloabl now</span></span><br><span class="line"></span><br><span class="line">bash </span><br><span class="line"><span class="built_in">export</span> my_var=<span class="string">&quot;Null&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_var</span></span><br><span class="line"><span class="comment"># Null</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_var</span></span><br><span class="line"><span class="comment"># I am Gloabl now</span></span><br></pre></td></tr></table></figure>

<h4 id="Removing-Environment-Variables"><a href="#Removing-Environment-Variables" class="headerlink" title="Removing Environment Variables"></a>Removing Environment Variables</h4><p>使用 <code>unset</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$my_var</span></span><br><span class="line"><span class="comment"># I am Gloabl now</span></span><br><span class="line"><span class="built_in">unset</span> my_var</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_var</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><strong>Tip</strong> 当你向对变量做什么的时候，不需要加 $, 当你想要用变量做什么的时候，需要加 $. printenv 除外。</p>
<p>和之前的规则一样，当你在 subshell 中 unset 一个 global variable 时，这个 unset 只在 subshell 中生效，parent shell 中变量还是存在的</p>
<h4 id="Uncovering-Default-Shell-Environment-Variables"><a href="#Uncovering-Default-Shell-Environment-Variables" class="headerlink" title="Uncovering Default Shell Environment Variables"></a>Uncovering Default Shell Environment Variables</h4><p>Bash shell 除了自己定义一些环境变量外，还从 Unix Bourne shell 那边继承了一下变量过来。</p>
<p>The bash Shell Bourne Variables</p>
<table>
<thead>
<tr>
<th align="left">Variable</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CDPATH</td>
<td align="left">A colon-separated list of directories used as a search path for the cd command</td>
</tr>
<tr>
<td align="left">HOME</td>
<td align="left">The current user’s home directory</td>
</tr>
<tr>
<td align="left">IFS</td>
<td align="left">A list of characters that separate fields used by the shell to split text strings</td>
</tr>
<tr>
<td align="left">MAIL</td>
<td align="left">The filename fo the current user’s mailbox(The bash shell checks this file for new mail.)</td>
</tr>
<tr>
<td align="left">MAILPATH</td>
<td align="left">A colon-separated list of multiple filenames for the current user’s mailbox(The bash shell checks each file in this list for new mail.)</td>
</tr>
<tr>
<td align="left">OPTARG</td>
<td align="left">The value of the last option argument processed by the getopt command</td>
</tr>
<tr>
<td align="left">OPTIND</td>
<td align="left">The index value of the last option argument processed by the getopt command</td>
</tr>
<tr>
<td align="left">PATH</td>
<td align="left">A colon-separated list of directories where shell looks for commands</td>
</tr>
<tr>
<td align="left">PS1</td>
<td align="left">The primary shell command line interface prompt string</td>
</tr>
<tr>
<td align="left">PS2</td>
<td align="left">The sceondary shell command line interface prompt string</td>
</tr>
</tbody></table>
<p>除了这些，bash shell 还提供了一些自定义的变量, 太长了，不列了。</p>
<h3 id="Setting-the-PATH-Environment-Variable"><a href="#Setting-the-PATH-Environment-Variable" class="headerlink" title="Setting the PATH Environment Variable"></a>Setting the PATH Environment Variable</h3><p>当你在终端输入一个 external command 时，系统就会根据 PATH 中的路径找命令. 路径用冒号分割。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加路径</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:/home/jack/Scripts</span><br></pre></td></tr></table></figure>

<p><strong>Tips</strong> 如果 subshell 中也要用到新加的路劲，你就要 export 它。有一个技巧是，可以在 PATH 中添加当前路径 <code>PATH=$PATH:.</code></p>
<h4 id="Locating-System-Environment-Variables"><a href="#Locating-System-Environment-Variables" class="headerlink" title="Locating System Environment Variables"></a>Locating System Environment Variables</h4><p>前面我们介绍了如何使用这些变量，那么怎么将他们做持久化呢。当你启动一个 shell 的时候，系统会到 setup file or environment files 里面去加载这些变量。</p>
<p>你可以通过三种方式启动一个 bash shell:</p>
<ul>
<li>As a default login shell at login time</li>
<li>As an interactive shell that is started by spawning a subshell</li>
<li>As a non-inactive shell to run a script</li>
</ul>
<h4 id="Understanding-the-login-shell-process"><a href="#Understanding-the-login-shell-process" class="headerlink" title="Understanding the login shell process"></a>Understanding the login shell process</h4><p>当你登陆系统的时候，bash shell 开启了一个 login shell. login shell 会从一下五个文件中加载配置：</p>
<ul>
<li>/etc/profile</li>
<li>$HOME/.bash_profile</li>
<li>$HOME/.bashrc</li>
<li>$HOME/.bash_login</li>
<li>$HOME/.profile</li>
</ul>
<p><code>/etc/profile</code> 是所有用户登陆时都会执行的文件，其他的几个就是用户可以自定一的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/profile</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"><span class="built_in">export</span> PAGER=less</span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">&#x27;\h:\w\$ &#x27;</span></span><br><span class="line"><span class="built_in">umask</span> 022</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> script <span class="keyword">in</span> /etc/profile.d/*.sh ; <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ -r <span class="variable">$script</span> ] ; <span class="keyword">then</span></span><br><span class="line">                . <span class="variable">$script</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>脚本中循环处理 profile.d 文件夹下的内容，这个文件夹是专门用来放一下 application-specific startup file taht is executed by the shell when you log in.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -lF /etc/profile.d/</span><br><span class="line"><span class="comment"># total 8</span></span><br><span class="line"><span class="comment"># -rw-r--r--    1 root     root           295 May 30  2020 color_prompt</span></span><br><span class="line"><span class="comment"># -rw-r--r--    1 root     root            61 May 30  2020 locale.sh</span></span><br></pre></td></tr></table></figure>

<p>自定义位置文件加载顺序如下，第一个被找到后，其他的就不加载了</p>
<ul>
<li>$HOME/.bash_profile</li>
<li>$HOME/.bash_login</li>
<li>$HOME/.profile</li>
</ul>
<p><code>.bashrc</code> 不在其中，因为它会在其他 process 中被调用</p>
<h4 id="Understanding-the-interactive-shell-process"><a href="#Understanding-the-interactive-shell-process" class="headerlink" title="Understanding the interactive shell process"></a>Understanding the interactive shell process</h4><p>当你在终端输入 bash 时，你会启动一个 interactive shell. 当你启动 interactive shell 的时候，它不会加载 /etc/profile 中的内容。它只会 check .bashrc 中的配置。</p>
<p>.bashrc 做两件事</p>
<ol>
<li>check for a common bashrc file in /etc directory</li>
<li>provides a place for user to enter personal command alias + provide script functions</li>
</ol>
<h4 id="Understanding-the-non-interactive-shell-process"><a href="#Understanding-the-non-interactive-shell-process" class="headerlink" title="Understanding the non-interactive shell process"></a>Understanding the non-interactive shell process</h4><p>没遇到过使用场景，先 pass</p>
<h4 id="Making-environment-variables-persistent"><a href="#Making-environment-variables-persistent" class="headerlink" title="Making environment variables persistent"></a>Making environment variables persistent</h4><p>将自定义的变量存在 $HOME/.bashrc 是一个极好的习惯</p>
<h3 id="Learning-about-Variable-Arrays"><a href="#Learning-about-Variable-Arrays" class="headerlink" title="Learning about Variable Arrays"></a>Learning about Variable Arrays</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义数组 </span></span><br><span class="line">mytest=(one two three four five)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$mytest</span></span><br><span class="line"><span class="comment"># one</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;mytest[2]&#125;</span></span><br><span class="line"><span class="comment"># three</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;mytest[*]&#125;</span></span><br><span class="line"><span class="comment"># one two three four five</span></span><br><span class="line"></span><br><span class="line">mytest[2]=seven</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;mytest[*]&#125;</span></span><br><span class="line">one two seven four five</span><br></pre></td></tr></table></figure>

<p>可以通过 unset 移除某个元素，但是移除之后，print 不会显示，但是它位置还是占着的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> mytest[2]</span><br><span class="line"><span class="variable">$&#123;mytest[*]&#125;</span></span><br><span class="line"><span class="comment"># one two seven four five</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;mytest[2]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;mytest[3]&#125;</span></span><br><span class="line"><span class="comment"># four</span></span><br><span class="line"><span class="built_in">unset</span> mytest</span><br><span class="line">bash-5.1$ <span class="built_in">echo</span> <span class="variable">$&#123;mytest[*]&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>有时候 arrays 的使用挺复杂的，一般我们不再脚本中使用它，而且兼容性也不是很好。</p>
<h2 id="Understanding-Linux-File-Permissions"><a href="#Understanding-Linux-File-Permissions" class="headerlink" title="Understanding Linux File Permissions"></a>Understanding Linux File Permissions</h2><h3 id="Linux-Security"><a href="#Linux-Security" class="headerlink" title="Linux Security"></a>Linux Security</h3><p>Linux 系统的 security 核心是 account 这个概念。每个访问的用户都有一个唯一的账户，权限就是根据账户设置的。下面将介绍一些账户相关的文件和工具包。</p>
<h4 id="The-etc-passwd-file"><a href="#The-etc-passwd-file" class="headerlink" title="The /etc/passwd file"></a>The /etc/passwd file</h4><p>/etc/passed 文件中存储这一些 UID 相关的信息，root 是管理员账户，有固定的 UID 0.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd</span><br><span class="line"><span class="comment"># root:*:0:0:System Administrator:/var/root:/bin/sh</span></span><br><span class="line"><span class="comment"># daemon:*:1:1:System Services:/var/root:/usr/bin/false</span></span><br><span class="line"><span class="comment"># _uucp:*:4:4:Unix to Unix Copy Protocol:/var/spool/uucp:/usr/sbin/uucico</span></span><br></pre></td></tr></table></figure>

<p>系统还会为一些非用户的 process 创建 account，这些叫做 system accounts.</p>
<p>All services that run in background mode need to be logged in to the Linux system under a system user account.</p>
<p>Linux 将 500 以下的 UID 预留给了 system accounts.</p>
<p>passwd 文件中的信息包括</p>
<ul>
<li>The login name</li>
<li>The password for the user</li>
<li>The numberical UID of the user account</li>
<li>The numberical group ID(GID) of the user account</li>
<li>A text description of the user account(called the comment field)</li>
<li>The location of the HOME directory for the user</li>
<li>The default shell for the user</li>
</ul>
<p>password 字段为 x, 以前放置的还是加密后的 pwd 后来为了安全统一放到 /etc/shadow 下面去了</p>
<h4 id="The-etc-shadow-file"><a href="#The-etc-shadow-file" class="headerlink" title="The /etc/shadow file"></a>The /etc/shadow file</h4><p>只有 root user 可以访问 shadow 文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker bash 中的内容</span></span><br><span class="line">cat /etc/shadow</span><br><span class="line"><span class="comment"># root:!::0:::::</span></span><br><span class="line"><span class="comment"># bin:!::0:::::</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 书上的例子</span></span><br><span class="line"><span class="comment"># rich:$1$.FfcK0ns$f1UgiyHQ25wrB/hykCn020:11627:0:99999:7:::</span></span><br></pre></td></tr></table></figure>

<p>shadow 中的信息包括</p>
<ul>
<li>The login name corresponding to the login name in the /etc/passwd file</li>
<li>The encrypted password</li>
<li>The number of days since January 1, 1970, that the password was last changed</li>
<li>The minimun number of days before the password can be changed</li>
<li>The number of days before the password must be changed</li>
<li>The number of days before the password expiration that the user is warned to change the password</li>
<li>The number of days after a password expires before the account will be disabled</li>
<li>The date(stored as the number of days since January 1, 1970) since the user account was disabled</li>
<li>A filed reserved for feature use</li>
</ul>
<h4 id="Adding-a-new-user"><a href="#Adding-a-new-user" class="headerlink" title="Adding a new user"></a>Adding a new user</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 useradd 的默认配置</span></span><br><span class="line">useradd -D</span><br><span class="line"><span class="comment"># GROUP=100</span></span><br><span class="line"><span class="comment"># HOME=/home</span></span><br><span class="line"><span class="comment"># INACTIVE=-1</span></span><br><span class="line"><span class="comment"># EXPIRE=</span></span><br><span class="line"><span class="comment"># SHELL=/bin/sh</span></span><br><span class="line"><span class="comment"># SKEL=/etc/skel</span></span><br><span class="line"><span class="comment"># CREATE_MAIL_SPOOL=no</span></span><br></pre></td></tr></table></figure>

<p>当你在 useradd 的时候没有指定任何参数的时候，就会按照这个 default 的配置添加新用户。default 包含以下信息</p>
<ul>
<li>The user is added to a common group with group ID 100</li>
<li>The new user has a HOME account created in the directory /home/loginname</li>
<li>The account can’t be disabled when the password expires</li>
<li>The new account can’t be set to expire at a set date</li>
<li>The new account users the bin sh as the default shell</li>
<li>The system copies the contents of the /etc/skl directory to the user’s HOME directory</li>
<li>The system creates a file in the mail directory for the user account to receive mail</li>
</ul>
<p>倒数第二个 item 说的是，在创建用户的时候，admin 可以预先设置一个模版</p>
<p>默认情况下，useradd 并不会为用户创建 HOME 目录，需要添加 <code>-m</code> 参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -l /etc/skel</span><br><span class="line"><span class="comment"># total 16</span></span><br><span class="line"><span class="comment"># drwxr-xr-x+ 2 root root 4096 Aug 11  2017 Desktop</span></span><br><span class="line"><span class="comment"># -rw-r--r--  1 root root 8980 Apr 20  2016 examples.desktop</span></span><br><span class="line"></span><br><span class="line">useradd -m I306454</span><br><span class="line">ls -l /home</span><br><span class="line"><span class="comment"># total 28</span></span><br><span class="line"><span class="comment"># drwxr-xr-x+  5 fuser    fuser     4096 Aug 11  2017 fuser</span></span><br><span class="line"><span class="comment"># drwxr-xr-x+  4 I306454  I306454   4096 Jun  5 14:48 I306454</span></span><br><span class="line">ls -lF /home/I306454/</span><br><span class="line"><span class="comment"># total 16</span></span><br><span class="line"><span class="comment"># drwxr-xr-x+ 2 I306454 I306454 4096 Aug 11  2017 Desktop/</span></span><br><span class="line"><span class="comment"># -rw-r--r--  1 I306454 I306454 8980 Apr 20  2016 examples.desktop</span></span><br></pre></td></tr></table></figure>

<p>The useradd Command Line Parameters</p>
<table>
<thead>
<tr>
<th align="left">Parameter</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-c comment</td>
<td align="left">Adds text to the new user’s comment field</td>
</tr>
<tr>
<td align="left">-d home_dir</td>
<td align="left">Specifies a different name for the HOME directory other than the login name</td>
</tr>
<tr>
<td align="left">-e expire_date</td>
<td align="left">Specifies a date, in YYYY-MM-DD format, when the account will expire</td>
</tr>
<tr>
<td align="left">-f inactive_days</td>
<td align="left">Specifies the number of days after a password expires when the account will be disabled. A value of 0 disables the accunt as soon as the password expires; a value of -1 disables this feature</td>
</tr>
<tr>
<td align="left">-g initial_group</td>
<td align="left">Specifies the group name or GID of the user’s login group</td>
</tr>
<tr>
<td align="left">-G group</td>
<td align="left">Specifies one or more supplementary groups the user belongs to</td>
</tr>
<tr>
<td align="left">-k</td>
<td align="left">Gopies the /etc/skel directory contents into the user’s HOME directory(must use -m as well)</td>
</tr>
<tr>
<td align="left">-m</td>
<td align="left">Create the user’s HOME directory</td>
</tr>
<tr>
<td align="left">-M</td>
<td align="left">Doesn’t create a user’s HOME directory(user if the default setting is to create one)</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">Create a new group using the same name as the user’s login name</td>
</tr>
<tr>
<td align="left">-r</td>
<td align="left">Creates a system account</td>
</tr>
<tr>
<td align="left">-p passwd</td>
<td align="left">Specifies a default password for the user account</td>
</tr>
<tr>
<td align="left">-s shell</td>
<td align="left">Specifies the default login shell</td>
</tr>
<tr>
<td align="left">-u</td>
<td align="left">Specifies a unique UID for the account</td>
</tr>
</tbody></table>
<p>如果你有很多默认配置需要修改，那么你可以通过 <code>useradd -D</code> 修改这些默认配置</p>
<h4 id="Removing-a-user"><a href="#Removing-a-user" class="headerlink" title="Removing a user"></a>Removing a user</h4><p><code>userdel I306454</code> 默认情况下并不会删除对应用户的 HOME 目录。你需要添加 <code>-r</code> 参数达到这个效果</p>
<h4 id="Modifying-a-user"><a href="#Modifying-a-user" class="headerlink" title="Modifying a user"></a>Modifying a user</h4><p>Linux 提供了一些不同的工具包来修改用户信息</p>
<p>User account Modification Utilities</p>
<table>
<thead>
<tr>
<th align="left">Command</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">usermod</td>
<td align="left">Edits user accout fields, as well as specifying primary and seconday group membership</td>
</tr>
<tr>
<td align="left">passwd</td>
<td align="left">Changes the password for an existing user</td>
</tr>
<tr>
<td align="left">chpassed</td>
<td align="left">Reads a file of login name and password pairs, and updates the passwords</td>
</tr>
<tr>
<td align="left">chage</td>
<td align="left">Chagnes the password’s expiration date</td>
</tr>
<tr>
<td align="left">chfn</td>
<td align="left">Changes the user account’s comment information</td>
</tr>
<tr>
<td align="left">chsh</td>
<td align="left">Changes the user account’s default shell</td>
</tr>
</tbody></table>
<p>感觉 <code>usermod</code> 已经具备了所有账户相关的基本操作了</p>
<p>后面有这些 cmd 的用法简介，但是我暂时用不到，先不摘录了</p>
<h3 id="Using-Linux-Groups"><a href="#Using-Linux-Groups" class="headerlink" title="Using Linux Groups"></a>Using Linux Groups</h3><p>Group 可以以群的单位管理权限，每个 group 都有特定的 GID</p>
<h4 id="The-etc-group-file"><a href="#The-etc-group-file" class="headerlink" title="The /etc/group file"></a>The /etc/group file</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/group</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># jenkins:x:58116:</span></span><br><span class="line"><span class="comment"># mfe:x:58117:</span></span><br><span class="line"><span class="comment"># I306454:x:58118:</span></span><br></pre></td></tr></table></figure>

<ul>
<li>The gorup name</li>
<li>The group password</li>
<li>The GID</li>
<li>The list of user accounts that belong to the group</li>
</ul>
<p>你可以通过 usermod 命令添加用户进组</p>
<h4 id="Creating-new-groups"><a href="#Creating-new-groups" class="headerlink" title="Creating new groups"></a>Creating new groups</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">groupadd shared</span><br><span class="line">tail /etc/group</span><br><span class="line"><span class="comment"># I306454:x:58118:</span></span><br><span class="line"><span class="comment"># shared:x:58119:</span></span><br><span class="line"></span><br><span class="line">usermod -G shared I306454</span><br><span class="line">tail /etc/group</span><br><span class="line"><span class="comment"># shared:x:58119:I306454</span></span><br></pre></td></tr></table></figure>

<p>PS: 如果你改变用户组时，用户已经 login， 该用户需要重新 login 使之生效</p>
<p>PPS: 如果你用 -g 新组会代替旧组，如果 -G 则是多个组并存</p>
<h4 id="Modifying-groups"><a href="#Modifying-groups" class="headerlink" title="Modifying groups"></a>Modifying groups</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">groupmod -n sharing shared</span><br><span class="line">tail /etc/group</span><br><span class="line"><span class="comment"># sharing:x:58119:I306454</span></span><br></pre></td></tr></table></figure>

<h3 id="Decoding-File-Permissions"><a href="#Decoding-File-Permissions" class="headerlink" title="Decoding File Permissions"></a>Decoding File Permissions</h3><h4 id="Using-file-permission-symbols"><a href="#Using-file-permission-symbols" class="headerlink" title="Using file permission symbols"></a>Using file permission symbols</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -l </span><br><span class="line"><span class="comment"># total 10192</span></span><br><span class="line"><span class="comment"># -rwxr--r--   1 i306454  staff      159 May 30 15:56 badtest</span></span><br><span class="line"><span class="comment"># -rw-r--r--   1 i306454  staff       24 Jun  4 13:57 file1</span></span><br></pre></td></tr></table></figure>

<p><code>-rwxr--r--</code> 即为文件的权限信息</p>
<p>第一个字符表示文件类型</p>
<ul>
<li><ul>
<li>for files</li>
</ul>
</li>
<li>d for directories</li>
<li>l for links</li>
<li>c for character devices</li>
<li>b for block devices</li>
<li>n for network devices</li>
</ul>
<p>后面的字符都是权限</p>
<ul>
<li>r for read permission</li>
<li>w for write permission</li>
<li>x for execute permission</li>
<li><ul>
<li>denied</li>
</ul>
</li>
</ul>
<p>权限三个一组，分别代表 owner/group/everyone, owner 和 group 分别在 ls -l 后面有写出来</p>
<h4 id="Default-file-permissions"><a href="#Default-file-permissions" class="headerlink" title="Default file permissions"></a>Default file permissions</h4><p>umask 设置了所有文件和目录的默认权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">touch ttt</span><br><span class="line">ls -l ttt</span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  0 Jun  5 15:43 ttt</span></span><br><span class="line"><span class="built_in">umask</span> </span><br><span class="line"><span class="comment"># 0022</span></span><br></pre></td></tr></table></figure>

<p>umask 结果的第一位表示 sticky bit, 后三位是权限的 octal mode 表示</p>
<table>
<thead>
<tr>
<th align="left">Permissions</th>
<th align="left">Binary</th>
<th align="left">Octal</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">—</td>
<td align="left">000</td>
<td align="left">0</td>
<td align="left">No permissions</td>
</tr>
<tr>
<td align="left">–x</td>
<td align="left">001</td>
<td align="left">1</td>
<td align="left">Execute-only permission</td>
</tr>
<tr>
<td align="left">-w-</td>
<td align="left">010</td>
<td align="left">2</td>
<td align="left">Write-only permission</td>
</tr>
<tr>
<td align="left">-wx</td>
<td align="left">011</td>
<td align="left">3</td>
<td align="left">Write and execute permissions</td>
</tr>
<tr>
<td align="left">r–</td>
<td align="left">100</td>
<td align="left">4</td>
<td align="left">Read-only permission</td>
</tr>
<tr>
<td align="left">r-x</td>
<td align="left">101</td>
<td align="left">5</td>
<td align="left">Read and execute permissions</td>
</tr>
<tr>
<td align="left">rw-</td>
<td align="left">110</td>
<td align="left">6</td>
<td align="left">Read and write permissions</td>
</tr>
<tr>
<td align="left">rwx</td>
<td align="left">111</td>
<td align="left">7</td>
<td align="left">Read, write and execute permissions</td>
</tr>
</tbody></table>
<p>文件的 full 权限是 666，文件夹是 777. umask 可以理解为在这个 full 权限的基础上减去一个值。</p>
<p>之前我们 touch 的文件 <code>rw-r--r--</code> 是 644 = 666 - 022</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -ld newdir</span><br><span class="line"><span class="comment"># drwxr-xr-x  2 i306454  staff  64 Jun  5 15:56 newdir</span></span><br></pre></td></tr></table></figure>

<p><code>drwxr-xr-x</code> 755 = 777 - 022</p>
<h3 id="Changing-Security-Settings"><a href="#Changing-Security-Settings" class="headerlink" title="Changing Security Settings"></a>Changing Security Settings</h3><p><code>chmod options mode file</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -l ttt</span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  0 Jun  5 15:43 ttt</span></span><br><span class="line">chmod 760 ttt</span><br><span class="line">ls -l ttt</span><br><span class="line"><span class="comment"># -rwxrw----  1 i306454  staff  0 Jun  5 15:43 ttt</span></span><br></pre></td></tr></table></figure>

<p>除了数字表示，你也可以用字母表示</p>
<p>[ugoa…][+-=][rwxXstugo…]</p>
<ul>
<li><p>u for the user</p>
</li>
<li><p>g for the group</p>
</li>
<li><p>o for others(everyone else)</p>
</li>
<li><p>a for all of the above</p>
</li>
<li><ul>
<li>add perm</li>
</ul>
</li>
<li><ul>
<li>subtract perm</li>
</ul>
</li>
<li><p>= set perm</p>
</li>
<li><p>X assigns execute permissions only if the object is a directory or if it already has execute permissions</p>
</li>
<li><p>s sets the UID or GID on execution</p>
</li>
<li><p>t saves program text</p>
</li>
<li><p>u sets the permissions to the owner’s permission</p>
</li>
<li><p>g sets the permissions to the group’s permission</p>
</li>
<li><p>o sets the permissions to the other’s permission</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chmod o+r ttt</span><br><span class="line">ls -l ttt</span><br><span class="line"><span class="comment"># -rwxrw-r--  1 i306454  staff  0 Jun  5 15:43 ttt</span></span><br><span class="line"></span><br><span class="line">chmod u-x ttt</span><br><span class="line">ls -l ttt</span><br><span class="line"><span class="comment"># -rw-rw-r--  1 i306454  staff  0 Jun  5 15:43 ttt</span></span><br></pre></td></tr></table></figure>

<h4 id="Changing-ownership"><a href="#Changing-ownership" class="headerlink" title="Changing ownership"></a>Changing ownership</h4><p>改变文件 owner，比如离开组织的时候，做交接。使用 <code>chown options owner[.group] file</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只改 owner</span></span><br><span class="line">chown dan newfile</span><br><span class="line"><span class="comment"># 同时改变 owner 和 group</span></span><br><span class="line">chown dan.shared newfile</span><br><span class="line"><span class="comment"># 只改 group</span></span><br><span class="line">chown .shared newfile</span><br></pre></td></tr></table></figure>

<p>PS: 只有 root 可以改变文件的 owner, 任何 user 可以将文件组改变，重要这个user 是改变前后组的成员</p>
<h3 id="Sharing-Files"><a href="#Sharing-Files" class="headerlink" title="Sharing Files"></a>Sharing Files</h3><p>这个场景没用到过，以后再说</p>
<h2 id="Chapter-8-Managing-Filesystems"><a href="#Chapter-8-Managing-Filesystems" class="headerlink" title="Chapter 8: Managing Filesystems"></a>Chapter 8: Managing Filesystems</h2><p>这章的内容我大致浏览了一下，作为了解即可。他介绍了很多系统类型，ext3 什么的以前见过，但是不明所以，刚好可以学习一下。</p>
<h3 id="Exploring-Linux-Filesystems"><a href="#Exploring-Linux-Filesystems" class="headerlink" title="Exploring Linux Filesystems"></a>Exploring Linux Filesystems</h3><p>filesystem: 用于存储文件，管理存储设备</p>
<h4 id="Understanding-the-basic-Linux-filesystems"><a href="#Understanding-the-basic-Linux-filesystems" class="headerlink" title="Understanding the basic Linux filesystems"></a>Understanding the basic Linux filesystems</h4><p>最原始的 Linux 文件系统间的的仿造了 Unix 文件系统，下面我们会介绍这个文件系统的发现过程</p>
<ul>
<li>ext(extended filesystem) + inode(track info about files in directory) </li>
<li>ext 系统中文件最大只能 2G。 ext2 是 ext 的升级版，最大文件到 32G. 其他的特性就不举例了</li>
<li>Journaling filesystems, 貌似叫日志系统，算是文件更新到 inode 前的临时文件</li>
<li>ext3, 2001年加入 kernel</li>
<li>ext4, 2008年加入 kernel</li>
<li>Reiser filesystem, in 2001, Hans Reiser created the first journaling filesystem for Linux, call ReiserFS.</li>
<li>Journaled File System(JFS) 可能是最老的 journaling filesystem, IBM 1990 年开发</li>
</ul>
<p>其他暂时不看了。。。</p>
<h2 id="Chapter-9-Installing-Software"><a href="#Chapter-9-Installing-Software" class="headerlink" title="Chapter 9: Installing Software"></a>Chapter 9: Installing Software</h2><h2 id="Chapter-10-Working-with-Editors"><a href="#Chapter-10-Working-with-Editors" class="headerlink" title="Chapter 10: Working with Editors"></a>Chapter 10: Working with Editors</h2><p>第 9，10 章也没啥好看的，说的是软件安装和编辑器，跳过</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux命令行与shell脚本编程大全 3rd</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 异常错误 error handing with exceptions</title>
    <url>/hexo/2021/01/21/TIJ4-error-handing-with-exceptions/</url>
    <content><![CDATA[<p>刚好这几天要修一个异常处理的问题，回顾以下异常相关的知识点</p>
<p>想要解决的问题：</p>
<p>[x] runtime 异常和其他的异常有什么区别<br>[x] 异常处理的最佳实践是什么<br>[x] catch 里加一个 return，final 还会执行吗</p>
<p>Answers:</p>
<ol>
<li>RuntimeException 可以不用写 try-catch 处理，而 checked exception 你必须添加 try-catch block</li>
<li>本章的后半截有介绍，首先是根据当前节点是否有能力处理对应的异常，倒数第二章还有介绍一些规则。</li>
<li>final 还是会执行</li>
</ol>
<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>最理想的异常捕捉点是编译期，即代码运行之前。但是并不是所有的 errors 都能在编译器就被捕捉到。剩下的这些问题，我们需要在运行时让异常产生者将错误信息提交给接受者做适当的处理。</p>
<p>提升异常处理是增加代码健壮性的重要方式。异常恢复是每个码农都需要考虑的问题，对于 Java 这种旨在为他人提供接口的语言来说，这点尤为重要。通过提供 error-reporting 错误处理模式，Java 允许组件代码将异常传给客户端代码处理。</p>
<p>Java 中的异常处理机制旨在以尽量少的代码完成经可能多的功能的同时让你的程序覆盖尽可能多的异常情况。异常机制不难学，并且学会了他能马上对你的项目产生益处，他是唯一官方指定的处理异常的方式并且编译器强制检查的。</p>
<p>本章将介绍一些必须要用到异常的代码以及遇到异常时的处理方案。</p>
<h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><p>C 和其他一些早期语言经常会有多中处理异常的方式，这些方式基本都是便宜形式，并且不是语言的一部分。典型的案例就是放回一个特殊的值或者设置一个特殊的 flag，接收方根据这个返回值来进行相应的处理。但是渐渐的码农们突然意识到，自己定义的异常情况可能是不充分的，并且为了覆盖这些没有覆盖到的情况，代码会变得越来越难以维护。</p>
<p>解决方案是将异常处理正规化，这种思路的出现是一个很长过的过程，可以追溯到 1960 年。</p>
<p>exception 表示：我处理这个异常是为了。。。当异常发生时，你可能并不清楚你需要做什么，但是你知道，你不能在正常的执行下去了，你应该做点什么。你就可以将这个异常提交给上层处理，那里可能具备足够的知识处理它。</p>
<p>异常处理机制的另一个明显的好处是，它可以简化你的异常处理代码。如果没有他你必须在多个地方编写检测代码。有了它之后，就不必这么做了，exception 会保证，有人在合适的地方做检查。你只需要在一个地方处理即可。这种机制简化了你的代码，代码被分为两个分之，正常的分支和异常分支，同时你阅读，书写，调试代码也会变的更方便。</p>
<h2 id="Basic-exceptions"><a href="#Basic-exceptions" class="headerlink" title="Basic exceptions"></a>Basic exceptions</h2><p>发生异常的条件下，程序会停止执行当前方法。当代码发生异常时，程序由于缺少某些信息，已经不能继续执行程序了，他能做的就是跳出当前的上下文并且将执行权交给上层。</p>
<p><code>1\0</code> 就是这么一种情况，当代码中出现了除 0 的情况，就需要检查一下了。可能你知道为什么要除 0，可能是你业务逻辑的需要，你知道在这种情况下需要做什么。但是如果这是一个意外情况，你必须停止当前方法并且抛出一个异常。</p>
<p>当你跑出一个异常时，有几件事情会发生。首先一个异常对象会在堆上通过 new 的方式被创建出来。然后当前的执行路径被阻断，异常对象被当前上下文弹出。exception-handling 处理机制开始接收这个异常，并试图妥善的处理它。</p>
<p>Exception handler 就是处理异常的地方，他会判断是否继续执行或者寻求其他解决路径。</p>
<p>想象一个简单的场景，比如你有一个对象引用叫做 <code>t</code>，他可能没有被初始化过，所以你想在使用前检查一下。你可以将检查的错误通过一个对象包裹起来并 thorwing 出去，这种做法就叫做抛出异常，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(t == <span class="keyword">null</span>)</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br></pre></td></tr></table></figure>

<p>这种做法可以让你为以后做打算，他会在之后的什么地方被处理，你很快能看到。</p>
<p>Exceptions 让你能够以 事务(transaction) 为单位处理问题， 你也可以将它想象成一个 undo 系统，你可以设置多个恢复点，当你的程序抛出异常时，他可以将程序恢复到某个稳定的节点。</p>
<p>Exceptions 最重要的一个点就是，当异常发生时，他阻止程序继续执行下去。C 语言在这方面就很糟糕，C 语言中是没有打断机制的，这发生异常时，你都不能预期它会执行到什么状态。</p>
<h2 id="Exception-arguments"><a href="#Exception-arguments" class="headerlink" title="Exception arguments"></a>Exception arguments</h2><p>和其他 Java 中的对象一样，你可以通过 new 关键字创建一个 exception 对象，它有两种构造函数，一种是无参的，另一种是带字符串的，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;t = null&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>当然这个信息字符串也可以在之后通过调用 <code>set</code> 方法设置，之后有该种示例。</p>
<p><code>throw</code> 这个关键词可以产生几种很有趣的结果。当你使用 new 创建一个 exception 的时候，你指定了 throw 的对象。虽然这个对象和你方法的返回值类型不一样，但是它还是会被这个方法返回。由此，你可以将异常处理看作一种特殊的 return 机制。返回的同时，方法和 scope 将会弹出(出栈)。</p>
<p>和普通方法的共同点到此为止了，接下来的处理方式将迥异于普通方法。异常将会在 exception handler 中被处理。</p>
<p>虽然你可以在处理异常时抛出任何 Throwable 的子类，但是一般来说，我们本会更具 error 的具体类型来指定它。error 的信息可以从他的名字和内容体现出来，但是通常来说异常只包含类名而没有其他什么内容。</p>
<h2 id="Catching-an-exception"><a href="#Catching-an-exception" class="headerlink" title="Catching an exception"></a>Catching an exception</h2><p>在理解异常捕捉之前，你先得理解<strong>守护区域</strong>的概念，就是被 try 包裹的部分。它代表了一段可能抛出异常的代码段，这段代码之后会紧接着一段异常处理代码。</p>
<h3 id="The-try-block"><a href="#The-try-block" class="headerlink" title="The try block"></a>The try block</h3><p>如果你在方法体中抛出一个异常(或者方法体中调用的其他方法抛出异常)，那么这个方法体在执行完 throwing 之后就结束了。如果你不想就这个结束，你可以在这些代码外面加一个 try block</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">// Code that might generate exceptions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在不提供异常处理机制的语言中，如果你写代码很仔细的话，你可能需要为每一个方法添加异常处理，但是通过 try block 你只需要将他们全部包裹起来即可。这样你的代码会更容易阅读。</p>
<h3 id="Exception-handlers"><a href="#Exception-handlers" class="headerlink" title="Exception handlers"></a>Exception handlers</h3><p>当然，被抛出的异常都需要有一个地方来处理，这个地方就是 exception handler。它紧跟着 try block 通过关键字 catch 引出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">// Code that might generate exceptions</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(Type1 id1)|&#123;</span><br><span class="line"> <span class="comment">// Handle exceptions of Type1</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(Type2 id2) &#123;</span><br><span class="line"> <span class="comment">// Handle exceptions of Type2</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(Type3 id3) &#123;</span><br><span class="line"> <span class="comment">// Handle exceptions of Type3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// etc...</span></span><br></pre></td></tr></table></figure>

<p>每一个 catch 就是一个小的方法体，只接收一个参数。有时你甚至不需要这个参数，仅仅根据异常的名字就可以写完处理逻辑。</p>
<p>如果异常被抛出，exception-handling 机制会搜寻第一个匹配的 catch 分支并进入，当 catch 分支走完后，异常处理被视为结束。不像 switch，catch 分支<strong>不需要 break 关键字</strong>，执行完直接返回。</p>
<h2 id="Termination-vs-resumption-中断还是继续"><a href="#Termination-vs-resumption-中断还是继续" class="headerlink" title="Termination vs. resumption (中断还是继续?)"></a>Termination vs. resumption (中断还是继续?)</h2><p>异常处理有两种模型，Java 采用的是中断，他认为当异常发生后，你不能在回到异常发生的节点。</p>
<p>另一种是 resumption(继续)，他表示异常发生后，我们可以做一些补救措施，并且尝试重新执行失败的方法。采用这个方式意味着你在异常产生后依旧希望继续执行程序。</p>
<p>如果你想要 resumption 的处理方法，你不能在 error 发生的地方抛异常，或者你可以把你抛异常的代码放到一个循环中，多次运行，知道结果符合你预期。</p>
<p>历史上，码农们有尝试过使用 resumption 机制的操作系统，但最终回归到了 termination 机制。虽然 resumption 机制乍一听上去很美，但是并不是这么实用。可能是因为这种机制下你写的代码不能很通用，难以维护，特别是在写一些大型项目的时候，最后没有保留下来。</p>
<h2 id="Creating-your-own-exceptions"><a href="#Creating-your-own-exceptions" class="headerlink" title="Creating your own exceptions"></a>Creating your own exceptions</h2><p>Java 允许你自己定制异常，你需要做的只是继承一个已有的异常类即可。当然继承的时候如果可能的话，选一个最贴近你异常类的，那是极好的。创建时只需要用它的默认构造函数即可，代码很简单：</p>
<p>自定义个一个异常 SimpleException 继承自 Exception，其他什么都没有。这是很常见的定义异常的方式，它调用默认的无参构造函数。定义异常时，取一个见名知意的名字显得尤为重要。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritingExceptions</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> SimpleException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Throw SimpleException from f()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SimpleException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InheritingExceptions sed = <span class="keyword">new</span> InheritingExceptions();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sed.f();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SimpleException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught it!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Throw SimpleException from f()</span></span><br><span class="line"><span class="comment">// Caught it!</span></span><br></pre></td></tr></table></figure>

<p>下面是调用带参构造的例子，只需要少量的新加 code 就能实现带参构造，声明的时候用上 <code>super</code> 关键字即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FullConstructors</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Throwing MyException from f()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Throwing MyException from g()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;Originated in g()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            g();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Throwing MyException from f()</span></span><br><span class="line"><span class="comment">// reading.container.MyException</span></span><br><span class="line"><span class="comment">//     at reading.container.FullConstructors.f(FullConstructors.java:15)</span></span><br><span class="line"><span class="comment">//     at reading.container.FullConstructors.main(FullConstructors.java:25)</span></span><br><span class="line"><span class="comment">// Throwing MyException from g()</span></span><br><span class="line"><span class="comment">// reading.container.MyException: Originated in g()</span></span><br><span class="line"><span class="comment">//     at reading.container.FullConstructors.g(FullConstructors.java:20)</span></span><br><span class="line"><span class="comment">//     at reading.container.FullConstructors.main(FullConstructors.java:30)</span></span><br></pre></td></tr></table></figure>

<p>在 exception handler 中你可以看到一个方法调用叫做 <code>e.printStackTrace(System.out)</code>。他可以将异常信息输出。</p>
<h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h2><p>Exercise 1: (2) Create a class with a main( ) that throws an object of class Exception<br>inside a try block. Give the constructor for Exception a String argument. Catch the<br>exception inside a catch clause and print the String argument. Add a finally clause and<br>print a message to prove you were there.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exe1Exception</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    Exe1Exception(String msg) &#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exe1Exception(<span class="string">&quot;my exception msg...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exe1Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Into final cluster...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// my exception msg...</span></span><br><span class="line"><span class="comment">// Into final cluster...</span></span><br></pre></td></tr></table></figure>

<p>Exercise 2: (1) Define an object reference and initialize it to null. Try to call a method<br>through this reference. Now wrap the code in a try-catch clause to catch the exception.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String str = <span class="keyword">null</span>;</span><br><span class="line">            System.out.println(str.isEmpty());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Invoked object is null...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Invoked object is null...</span></span><br></pre></td></tr></table></figure>

<p>Exercise 3: (1) Write code to generate and catch an<br>ArraylndexOutOfBoundsException.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] strArr = <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line">            strArr[<span class="number">0</span>] = <span class="string">&quot;str&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ArrayIndexOutOfBoundsException caught...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Exercise 4: (2) Create your own exception class using the extends keyword. Write a<br>constructor for this class that takes a String argument and stores it inside the object with a<br>String reference. Write a method that displays the stored String. Create a try-catch clause<br>to exercise your new exception.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExeException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    ExeException(String msg) &#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getExeExceptionMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExeException(<span class="string">&quot;exe exception...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExeException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught ExeException, msg: &quot;</span> + e.getExeExceptionMsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Caught ExeException, msg: exe exception...</span></span><br></pre></td></tr></table></figure>

<p>Exercise 5: (3) Create your own resumption-like behavior using a while loop that<br>repeats until an exception is no longer thrown. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExeException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(index / <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Arithmetic exception when index is &quot;</span> + index);</span><br><span class="line">                index ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;end program...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Arithmetic exception when index is 0</span></span><br><span class="line"><span class="comment">// Arithmetic exception when index is 1</span></span><br><span class="line"><span class="comment">// Arithmetic exception when index is 2</span></span><br><span class="line"><span class="comment">// end program...</span></span><br></pre></td></tr></table></figure>

<h2 id="Exceptions-and-logging"><a href="#Exceptions-and-logging" class="headerlink" title="Exceptions and logging"></a>Exceptions and logging</h2><p>使用 logging 工具类记录信息，<code>Logger.getLogger()</code> 接收一个字符串作为参数创建 Logger 对象，如果没有其他设置，他回把对应的信息输出到 <code>System.err</code> 中去。<code>printStackTrace()</code> 接收一个 PrintWriter 作为参数，再通过调用 <code>logger.severe()</code> 将信息输出。</p>
<p>上面这种处理方式将所有的 logging 相关动作封装在了异常中，所以很简便，但是更常见的处理方式是将你要处理的 log 在 exception handler 中进行封装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.logging.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(<span class="string">&quot;LoggingException&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoggingException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringWriter trace = <span class="keyword">new</span> StringWriter();</span><br><span class="line">        printStackTrace(<span class="keyword">new</span> PrintWriter(trace));</span><br><span class="line">        logger.severe(trace.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingExceptions</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LoggingException();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LoggingException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Caught &quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LoggingException();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LoggingException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Caught &quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Jan 25, 2021 10:57:56 AM reading.container.LoggingException &lt;init&gt;</span></span><br><span class="line"><span class="comment">// SEVERE: reading.container.LoggingException</span></span><br><span class="line"><span class="comment">//     at reading.container.LoggingExceptions.main(LoggingExceptions.java:20)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Caught reading.container.LoggingException</span></span><br><span class="line"><span class="comment">// Jan 25, 2021 10:57:56 AM reading.container.LoggingException &lt;init&gt;</span></span><br><span class="line"><span class="comment">// SEVERE: reading.container.LoggingException</span></span><br><span class="line"><span class="comment">//     at reading.container.LoggingExceptions.main(LoggingExceptions.java:25)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Caught reading.container.LoggingException</span></span><br></pre></td></tr></table></figure>

<p>下面是在 catch 中 log 异常信息的例子。自定义一个异常 MyException2，重写三种构造函数，分别是默认，带一个字符串，带字符串和数字三种形式。三种方式会分别在异常对象中多设置一个属性。</p>
<p>ExtraFeatures 中声明三个方法，调用三种异初始化函数，并抛出。主函数中，捕获异常并处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException2</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException2</span><span class="params">(String msg)</span> </span>&#123; <span class="keyword">super</span>(msg); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException2</span><span class="params">(String msg, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">val</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Detail Message: &quot;</span> + x + <span class="string">&quot; &quot;</span> + <span class="keyword">super</span>.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtraFeatures</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> MyException2 </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Throwing MyException2 from f()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">throws</span> MyException2 </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Throwing MyException2 from g()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException2(<span class="string">&quot;Originated in g()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> <span class="keyword">throws</span> MyException2 </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Throwing MyException2 from h()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException2(<span class="string">&quot;Originated in h()&quot;</span>, <span class="number">47</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(MyException2 e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            g();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(MyException2 e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            h();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(MyException2 e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">            System.out.println(<span class="string">&quot;e.val() = &quot;</span> + e.val());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Throwing MyException2 from f()</span></span><br><span class="line"><span class="comment">// reading.container.MyException2: Detail Message: 0 null</span></span><br><span class="line"><span class="comment">//     at reading.container.ExtraFeatures.f(ExtraFeatures.java:20)</span></span><br><span class="line"><span class="comment">//     at reading.container.ExtraFeatures.main(ExtraFeatures.java:32)</span></span><br><span class="line"><span class="comment">// Throwing MyException2 from g()</span></span><br><span class="line"><span class="comment">// reading.container.MyException2: Detail Message: 0 Originated in g()</span></span><br><span class="line"><span class="comment">//     at reading.container.ExtraFeatures.g(ExtraFeatures.java:24)</span></span><br><span class="line"><span class="comment">//     at reading.container.ExtraFeatures.main(ExtraFeatures.java:37)</span></span><br><span class="line"><span class="comment">// Throwing MyException2 from h()</span></span><br><span class="line"><span class="comment">// reading.container.MyException2: Detail Message: 47 Originated in h()</span></span><br><span class="line"><span class="comment">//     at reading.container.ExtraFeatures.h(ExtraFeatures.java:28)</span></span><br><span class="line"><span class="comment">//     at reading.container.ExtraFeatures.main(ExtraFeatures.java:42)</span></span><br><span class="line"><span class="comment">// e.val() = 47</span></span><br></pre></td></tr></table></figure>

<p>exception 也是一个 Java 对象，你可以继续扩展这个类，但是值得注意的是，你的包装可能被其他人忽略，因为他们在使用的时候可能只想找一个贴切的异常并丢出去。</p>
<h2 id="The-exception-specification"><a href="#The-exception-specification" class="headerlink" title="The exception specification"></a>The exception specification</h2><p>在 Java 中，你需要告知调用者你的方法可能会抛出什么异常，而且这是强制的。这种语法使用 throw 作为关键字，后面接需要 catch 的异常 <code>void f() throws TooBig, TooSmall, DivZero &#123; //...</code></p>
<p>如果方法声明只是简单的 <code>void f() &#123; //...</code> 这表示没有异常从这个方法中抛出。 <code>&#123;except</code> 表示异常继承自 <code>RuntimeException</code>，这个异常可以在任何地方抛出。在异常声明中，你不能作弊。如果你方法中有抛出异常，但是你没有处理的话，编译器就会监测到并给你提示你要么抛出它要么在方法签名上给出提示。通过自顶向下的约束异常声明，Java 保证了在编译期的异常检测。</p>
<p>有一个特别的地方是，你可以在没有对应实现的情况下抛出异常。这种处理方式可以看作是一个预先打桩，为你将来的实现做准备，而且省去了以后改应用代码的麻烦。</p>
<p>在编译期强制做检测的这种异常叫做 Checked Exception(受检异常)。</p>
<h2 id="Catching-any-exception"><a href="#Catching-any-exception" class="headerlink" title="Catching any exception"></a>Catching any exception</h2><p>在异常处理中，声明一个 catch 来捕获 Exception 以达到捕获几乎所有异常的基类的目的，这样做是可行的而且很常见。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;Caught an exception&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>他会处理几乎所有的受检异常，所以确保将它放到你的 catch 列表的末位。由于他是一个基类，所以你一般不能得到什么很特殊的信息，但是你还是可以调用那些基于 Throwable 的方法，比如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">getMessage</span><span class="params">( )</span>  </span></span><br><span class="line"><span class="function">String <span class="title">getLocalizedMessage</span><span class="params">( )</span>  </span></span><br></pre></td></tr></table></figure>

<p>获取 message，或者是基于本地化的 message。</p>
<p><code>String toString( )</code> 返回一个简短的关于 Throwable 类的描述，如果这个类有详细信息的话，也会包含在其中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">( )</span>  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">(PrintStream)</span>  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">(java.io.PrintWriter)</span>  </span></span><br></pre></td></tr></table></figure>

<p>打印 Throwable 以及对应的调用栈信息。栈信息会告诉你异常发生的点。第一种方式会将异常输出到 standard error, 第二和三种方式会输出到对应的流。</p>
<p>Throwable 还有很多其他的方法可以调用，比如 <code>getClass()</code>， 它能返回一个异常对象，<code>getName()</code> 返回类信息，包含路径名，<code>getSimpleName()</code> 只含有类名。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionMethods</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;My Exception&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught Exception&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;getMessage():&quot;</span> + e.getMessage());</span><br><span class="line">            System.out.println(<span class="string">&quot;getLocalizedMessage():&quot;</span> +</span><br><span class="line">                    e.getLocalizedMessage());</span><br><span class="line">            System.out.println(<span class="string">&quot;toString():&quot;</span> + e);</span><br><span class="line">            System.out.println(<span class="string">&quot;System.out.printlnStackTrace():&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Caught Exception</span></span><br><span class="line"><span class="comment">// getMessage():My Exception</span></span><br><span class="line"><span class="comment">// getLocalizedMessage():My Exception</span></span><br><span class="line"><span class="comment">// toString():java.lang.Exception: My Exception</span></span><br><span class="line"><span class="comment">// System.out.printlnStackTrace():</span></span><br><span class="line"><span class="comment">// java.lang.Exception: My Exception</span></span><br><span class="line"><span class="comment">//     at reading.container.ExceptionMethods.main(ExceptionMethods.java:6)</span></span><br></pre></td></tr></table></figure>

<h3 id="The-stack-trace"><a href="#The-stack-trace" class="headerlink" title="The stack trace"></a>The stack trace</h3><p><code>printStackTrace( )</code> 中的信息也可以通过 <code>getStackTrace( )</code> 得到，他会返回一个信息栈。下面是一个示例，可以看到，root cause 是在第一行打印的，最外层的异常点在最后打印。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhoCalled</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Generate an exception to fill in the stack trace</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">for</span> (StackTraceElement ste : e.getStackTrace())</span><br><span class="line">                System.out.println(ste.getMethodName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        f();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        g();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        f();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">        g();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">        h();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// f</span></span><br><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="comment">// --------------------------------</span></span><br><span class="line"><span class="comment">// f</span></span><br><span class="line"><span class="comment">// g</span></span><br><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="comment">// --------------------------------</span></span><br><span class="line"><span class="comment">// f</span></span><br><span class="line"><span class="comment">// g</span></span><br><span class="line"><span class="comment">// h</span></span><br><span class="line"><span class="comment">// main</span></span><br></pre></td></tr></table></figure>

<h3 id="Rethrowing-an-exception"><a href="#Rethrowing-an-exception" class="headerlink" title="Rethrowing an exception"></a>Rethrowing an exception</h3><p>有时你在捕捉到异常之后会想要再一次 throw 它，比如之前提到的，通过 Exception 捕捉到异常的情况。这时你只需要在 handler 里面再 throw 即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;An exception was thrown&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Rethrowing 会将异常交由更高的 context 处理，这个过程中，异常对象的所有信息都会被保存下来，如果你想要创建一个新的异常对象，你可以使用 <code>fillInStackTrace( )</code> 方法，示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rethrowing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;originating the exception in f()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;thrown from f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Inside g(),e.printStackTrace()&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Inside h(),e.printStackTrace()&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">            <span class="keyword">throw</span> (Exception) e.fillInStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            g();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main: printStackTrace()&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            h();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main: printStackTrace()&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// originating the exception in f()</span></span><br><span class="line"><span class="comment">// Inside g(),e.printStackTrace()</span></span><br><span class="line"><span class="comment">// java.lang.Exception: thrown from f()</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.f(Rethrowing.java:6)</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.g(Rethrowing.java:11)</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.main(Rethrowing.java:31)</span></span><br><span class="line"><span class="comment">// main: printStackTrace()</span></span><br><span class="line"><span class="comment">// java.lang.Exception: thrown from f()</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.f(Rethrowing.java:6)</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.g(Rethrowing.java:11)</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.main(Rethrowing.java:31)</span></span><br><span class="line"><span class="comment">// /--------------------- Dash --------------------/</span></span><br><span class="line"><span class="comment">// originating the exception in f()</span></span><br><span class="line"><span class="comment">// Inside h(),e.printStackTrace()</span></span><br><span class="line"><span class="comment">// java.lang.Exception: thrown from f()</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.f(Rethrowing.java:6)</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.h(Rethrowing.java:21)</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.main(Rethrowing.java:38)</span></span><br><span class="line"><span class="comment">// main: printStackTrace()</span></span><br><span class="line"><span class="comment">// java.lang.Exception: thrown from f()</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.h(Rethrowing.java:25)</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.main(Rethrowing.java:38)</span></span><br></pre></td></tr></table></figure>

<p><code>f()</code> 中通过 <code>fillInStackTrace( )</code> 改变了异常原点，相比于之前的调用 <code>g()</code> 的方法信息没有了。当然你也可以用 throw 新的 Exception 来实现和 <code>fillInStackTrace()</code> 同样的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OneException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OneException</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TwoException</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RethrowNew</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> OneException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;originating the exception in f()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OneException(<span class="string">&quot;thrown from f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                f();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (OneException e) &#123;</span><br><span class="line">                System.out.println(</span><br><span class="line">                        <span class="string">&quot;Caught in inner try, e.printStackTrace()&quot;</span>);</span><br><span class="line">                e.printStackTrace(System.out);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TwoException(<span class="string">&quot;from inner try&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TwoException e) &#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">                    <span class="string">&quot;Caught in outer try, e.printStackTrace()&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// originating the exception in f()</span></span><br><span class="line"><span class="comment">// Caught in inner try, e.printStackTrace()</span></span><br><span class="line"><span class="comment">// reading.container.OneException: thrown from f()</span></span><br><span class="line"><span class="comment">//     at reading.container.RethrowNew.f(RethrowNew.java:18)</span></span><br><span class="line"><span class="comment">//     at reading.container.RethrowNew.main(RethrowNew.java:24)</span></span><br><span class="line"><span class="comment">// Caught in outer try, e.printStackTrace()</span></span><br><span class="line"><span class="comment">// reading.container.TwoException: from inner try</span></span><br><span class="line"><span class="comment">//     at reading.container.RethrowNew.main(RethrowNew.java:29)</span></span><br></pre></td></tr></table></figure>

<p>最后的 exception handler 只知道异常来源于 inner try block 而不知道任何关于 f() 的信息。你完全不用关心异常的清理问题，他们都是基于堆创建的对象，垃圾回收机制会负责清理他们。</p>
<h3 id="Exception-chaining"><a href="#Exception-chaining" class="headerlink" title="Exception chaining"></a>Exception chaining</h3><p>通常来说，当你抛出自己的异常时，你都会希望这个异常带有原始异常的信息。在 Java 1.4 以前，码农们需要自己处理这个问题，但是之后的版本中，你可以通过在构造函数中传入异常类来实现这个功能。</p>
<p>Throwable 的子类中只有三个提供这个功能，分别是 Error(用于记录 JVM 异常)，Exception 和 RuntimeException。如果其他类型的异常，你也想串联起来的话，你可以调用 <code>initCause()</code> 方法.</p>
<p>示例说明：</p>
<ul>
<li>自定义一个异常 DynamicFieldsException</li>
<li>DynamicFields 为测试类，包含一个需要处理的 field 叫做 fields，他是一个二维数组</li>
<li>fields 初始化时可以给定长度，宽度为固定值 2, 也就是 n*2 的矩阵</li>
<li>fields 的子单元值为对象，不能填充原始类型的值</li>
<li>自定义 toString 方法可以打印矩阵值</li>
<li>setField 可以设置一行的值，如果超出容量，自动 copy + append, 设置的值不能为 null，否则报错</li>
<li>getField 返回对应行的值，如果没有抛异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicFieldsException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicFields</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[][] fields;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicFields</span><span class="params">(<span class="keyword">int</span> initialSize)</span> </span>&#123;</span><br><span class="line">        fields = <span class="keyword">new</span> Object[initialSize][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; initialSize; i++)</span><br><span class="line">            fields[i] = <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">null</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (Object[] obj : fields) &#123;</span><br><span class="line">            result.append(obj[<span class="number">0</span>]);</span><br><span class="line">            result.append(<span class="string">&quot;: &quot;</span>);</span><br><span class="line">            result.append(obj[<span class="number">1</span>]);</span><br><span class="line">            result.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hasField</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (id.equals(fields[i][<span class="number">0</span>]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span></span><br><span class="line">    getFieldNumber(String id) <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">        <span class="keyword">int</span> fieldNum = hasField(id);</span><br><span class="line">        <span class="keyword">if</span> (fieldNum == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchFieldException();</span><br><span class="line">        <span class="keyword">return</span> fieldNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">makeField</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (fields[i][<span class="number">0</span>] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fields[i][<span class="number">0</span>] = id;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">// No empty fields. Add one:</span></span><br><span class="line">        Object[][] tmp = <span class="keyword">new</span> Object[fields.length + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++)</span><br><span class="line">            tmp[i] = fields[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = fields.length; i &lt; tmp.length; i++)</span><br><span class="line">            tmp[i] = <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">null</span>&#125;;</span><br><span class="line">        fields = tmp;</span><br><span class="line">        <span class="comment">// Recursive call with expanded fields:</span></span><br><span class="line">        <span class="keyword">return</span> makeField(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getField</span><span class="params">(String id)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fields[getFieldNumber(id)][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">setField</span><span class="params">(String id, Object value)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> DynamicFieldsException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Most exceptions don’t have a &quot;cause&quot; constructor.</span></span><br><span class="line">            <span class="comment">// In these cases you must use initCause(),</span></span><br><span class="line">            <span class="comment">// available in all Throwable subclasses.</span></span><br><span class="line">            DynamicFieldsException dfe = <span class="keyword">new</span> DynamicFieldsException();</span><br><span class="line">            dfe.initCause(<span class="keyword">new</span> NullPointerException());</span><br><span class="line">            <span class="keyword">throw</span> dfe;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> fieldNumber = hasField(id);</span><br><span class="line">        <span class="keyword">if</span> (fieldNumber == -<span class="number">1</span>)</span><br><span class="line">            fieldNumber = makeField(id);</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = getField(id); <span class="comment">// Get old value</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="comment">// Use constructor that takes &quot;cause&quot;:</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        fields[fieldNumber][<span class="number">1</span>] = value;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DynamicFields df = <span class="keyword">new</span> DynamicFields(<span class="number">3</span>);</span><br><span class="line">        System.out.println(df);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            df.setField(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;A value for d&quot;</span>);</span><br><span class="line">            df.setField(<span class="string">&quot;number&quot;</span>, <span class="number">47</span>);</span><br><span class="line">            df.setField(<span class="string">&quot;number2&quot;</span>, <span class="number">48</span>);</span><br><span class="line">            System.out.println(df);</span><br><span class="line">            df.setField(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;A new value for d&quot;</span>);</span><br><span class="line">            df.setField(<span class="string">&quot;number3&quot;</span>, <span class="number">11</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;df: &quot;</span> + df);</span><br><span class="line">            System.out.println(<span class="string">&quot;df.getField(\&quot;d\&quot;) : &quot;</span> + df.getField(<span class="string">&quot;d&quot;</span>));</span><br><span class="line">            Object field = df.setField(<span class="string">&quot;d&quot;</span>, <span class="keyword">null</span>); <span class="comment">// Exception</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DynamicFieldsException e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// null: null</span></span><br><span class="line"><span class="comment">// null: null</span></span><br><span class="line"><span class="comment">// null: null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// d: A value for d</span></span><br><span class="line"><span class="comment">// number: 47</span></span><br><span class="line"><span class="comment">// number2: 48</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// df: d: A new value for d</span></span><br><span class="line"><span class="comment">// number: 47</span></span><br><span class="line"><span class="comment">// number2: 48</span></span><br><span class="line"><span class="comment">// number3: 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// df.getField(&quot;d&quot;) : A new value for d</span></span><br><span class="line"><span class="comment">// reading.container.DynamicFieldsException</span></span><br><span class="line"><span class="comment">//     at reading.container.DynamicFields.setField(DynamicFields.java:68)</span></span><br><span class="line"><span class="comment">//     at reading.container.DynamicFields.main(DynamicFields.java:98)</span></span><br><span class="line"><span class="comment">// Caused by: java.lang.NullPointerException</span></span><br><span class="line"><span class="comment">//     at reading.container.DynamicFields.setField(DynamicFields.java:69)</span></span><br><span class="line"><span class="comment">//     ... 1 more</span></span><br></pre></td></tr></table></figure>

<p>在 <code>setField()</code> 方法中，我们我们为 DynamicFieldsException 通过调用 initCause 设置了 NPE 为 root</p>
<h2 id="Standard-Java-exceptions"><a href="#Standard-Java-exceptions" class="headerlink" title="Standard Java exceptions"></a>Standard Java exceptions</h2><p>Java 的 Throwable 类代表了所有可 throw 类，有两个常用子类 Error 和 Exception。Error 表示 compile-time 和系统错误，这些是你不需要关心的。另一类是 Exception，这些是码农需要关心的。</p>
<p>想要对 Exception 有一个概览，最好就去看一下 JDK 文档，这可以给你找找感觉，但是当你看了之后，你会发现，这些异常，除了名字不同外，其他基本都是一样的。如果你是用第三方包，那么很大概率会遇到他们自定义的异常。所以最重要的事是了解他的定义，还有就是知道当你遇到它时你需要做什么。</p>
<p>异常的名字就代表了它处理的场景，异常的命名要求贴切明了。异常并不是全都定义在 java.lang 下，其他一些包，比如 util, net 和 io 也都有自己的异常类。你可以通过查看他们的包路径知道这些信息。比如所有的 I/O 异常都是继承于 java.io.IOException。</p>
<h3 id="Special-case-RuntimeException"><a href="#Special-case-RuntimeException" class="headerlink" title="Special case: RuntimeException"></a>Special case: RuntimeException</h3><p>下面是第一个示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果代码中每个可能有 null 引用的地方都需要做 NPE 检测，那想象就很刺激。所幸，这个检测 Java 会替你完成，所以上述的代码中的 NPE 检查是多余的。</p>
<p>JDK 中有一族异常处理类似的问题，Java 代码中会自动抛出，自动处理这些异常签名。他们有一个基类叫做 <code>RuntimeException</code>, 由它派生出来的异常都不需要在声明中特别指出来。他们也被叫做 unchecked exceptions(非受检异常)。虽然你不需要检测 RuntimeException, 但是你在写代码的过程中可能会想要抛出这个异常。</p>
<p>下面是一个没有捕获 RuntimeException 的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NeverCaught</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;From f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        f();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        g();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Exception in thread &quot;main&quot; java.lang.RuntimeException: From f()</span></span><br><span class="line"><span class="comment">//     at reading.container.NeverCaught.f(NeverCaught.java:5)</span></span><br><span class="line"><span class="comment">//     at reading.container.NeverCaught.g(NeverCaught.java:9)</span></span><br><span class="line"><span class="comment">//     at reading.container.NeverCaught.main(NeverCaught.java:13)</span></span><br></pre></td></tr></table></figure>

<p>你可以看到，即使你在 f() 中 throw 了这个异常，但是你在调用它的位置也不需要用异常签名标识它。</p>
<p>时刻牢记，只有 运行时异常 可以这么处理， checked exception 不行，因为 Java 语法中，将运行时异常当作系统错误处理，系统错误的定义：</p>
<ol>
<li>那些你不能预料的异常，比如 null reference</li>
<li>那种作为作者，你在程序中应该检查的错误，比如 ArraylndexOutOfBoundsException</li>
</ol>
<h2 id="Performing-cleanup-with-finally"><a href="#Performing-cleanup-with-finally" class="headerlink" title="Performing cleanup with finally"></a>Performing cleanup with finally</h2><p>在你的代码中总有一些动作是你无论如何都要做的，不管是否有异常发生， 为了应对这些问题，我们在 catch 结束后引入了 <code>finally</code> 这个关键字。表现形式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">// The guarded region: Dangerous activities</span></span><br><span class="line"> <span class="comment">// that might throw A, B, or C</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(A a1) &#123;</span><br><span class="line"> <span class="comment">// Handler for situation A</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(B b1) &#123;</span><br><span class="line"> <span class="comment">// Handler for situation B</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(C c1) &#123;</span><br><span class="line"> <span class="comment">// Handler for situation C</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"> <span class="comment">// Activities that happen every time</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>为了表明 final 是一个必定执行的分支，我们创建了一下示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreeException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyWorks</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Post-increment is zero first time:</span></span><br><span class="line">                <span class="keyword">if</span> (count++ == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ThreeException();</span><br><span class="line">                System.out.println(<span class="string">&quot;No exception&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ThreeException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ThreeException&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;In finally clause&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">2</span>) <span class="keyword">break</span>; <span class="comment">// out of &quot;while&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// ThreeException</span></span><br><span class="line"><span class="comment">// In finally clause</span></span><br><span class="line"><span class="comment">// No exception</span></span><br><span class="line"><span class="comment">// In finally clause</span></span><br></pre></td></tr></table></figure>

<p>从输出的 log 我们可以看到，无论是否有异常抛出，finally 里面的内容都会被执行。</p>
<p>这个代码段同时也提示我们，Java 是不允许我们回到异常点的，如果你将你的 try block 放到一个循环中，你可以设定条件来重复执行他。</p>
<h3 id="What’s-finally-for"><a href="#What’s-finally-for" class="headerlink" title="What’s finally for?"></a>What’s finally for?</h3><p>在一个没有垃圾回收和和自动解构的语言中，finally 是很重要的，但是 Java 语言体系中已经默认给你提供了这些功能，那么 fianlly 又是用来做什么的呢？</p>
<p>finally 可以用于重制除内存以外的对象，比如关闭文件，或者网络链接之类的东西。</p>
<p>示例说明：</p>
<p>下面这个例子，我们想要达到的效果是无论如何要在程序结束时将开关关闭。</p>
<p>我们声明了两个异常 OnOffException1， OnOffException2，但是如果要将关闭的动作放到 catch 中，会出现很多重复的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnOffException1</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnOffException2</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Switch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> state = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state ? <span class="string">&quot;on&quot;</span> : <span class="string">&quot;off&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnOffSwitch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Switch sw = <span class="keyword">new</span> Switch();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> OnOffException1, OnOffException2 </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sw.on();</span><br><span class="line">            <span class="comment">// Code that can throw exceptions...</span></span><br><span class="line">            f();</span><br><span class="line">            sw.off();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OnOffException1 e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;OnOffException1&quot;</span>);</span><br><span class="line">            sw.off();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OnOffException2 e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;OnOffException2&quot;</span>);</span><br><span class="line">            sw.off();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// on</span></span><br><span class="line"><span class="comment">// off</span></span><br></pre></td></tr></table></figure>

<p>我们可以加一个 finally 来统一处理，去除重复代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WithFinally</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Switch sw = <span class="keyword">new</span> Switch();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sw.on();</span><br><span class="line">            <span class="comment">// Code that can throw exceptions...</span></span><br><span class="line">            OnOffSwitch.f();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OnOffException1 e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;OnOffException1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OnOffException2 e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;OnOffException2&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sw.off();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// on</span></span><br><span class="line"><span class="comment">// off</span></span><br></pre></td></tr></table></figure>

<p>现在无论异常是否抛出，switch 都会被 turn off。</p>
<p>下面是一个更加深入的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FourException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlwaysFinally</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Entering first try block&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Entering second try block&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FourException();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;finally in 2nd try block&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FourException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught FourException in 1st try block&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally in 1st try block&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Entering first try block</span></span><br><span class="line"><span class="comment">// Entering second try block</span></span><br><span class="line"><span class="comment">// finally in 2nd try block</span></span><br><span class="line"><span class="comment">// Caught FourException in 1st try block</span></span><br><span class="line"><span class="comment">// finally in 1st try block</span></span><br></pre></td></tr></table></figure>

<p>即使有 break 或者 continue 关键字，finally 还是会被执行，它的出现结束了 goto 关键字的使用。</p>
<h3 id="Using-finally-during-return"><a href="#Using-finally-during-return" class="headerlink" title="Using finally during return"></a>Using finally during return</h3><p>由于 finally 是保证会被执行的，这就使得一段程序中有两个返回点变为可能，而且一些重要的 cleanup 必定会被执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipleReturns</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Initialization that requires cleanup&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Point 1&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;Point 2&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;Point 3&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;End&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Performing cleanup&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">            f(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialization that requires cleanup</span></span><br><span class="line"><span class="comment">// Point 1</span></span><br><span class="line"><span class="comment">// Performing cleanup</span></span><br><span class="line"><span class="comment">// Initialization that requires cleanup</span></span><br><span class="line"><span class="comment">// Point 1</span></span><br><span class="line"><span class="comment">// Point 2</span></span><br><span class="line"><span class="comment">// Performing cleanup</span></span><br><span class="line"><span class="comment">// Initialization that requires cleanup</span></span><br><span class="line"><span class="comment">// Point 1</span></span><br><span class="line"><span class="comment">// Point 2</span></span><br><span class="line"><span class="comment">// Point 3</span></span><br><span class="line"><span class="comment">// Performing cleanup</span></span><br><span class="line"><span class="comment">// Initialization that requires cleanup</span></span><br><span class="line"><span class="comment">// Point 1</span></span><br><span class="line"><span class="comment">// Point 2</span></span><br><span class="line"><span class="comment">// Point 3</span></span><br><span class="line"><span class="comment">// End</span></span><br><span class="line"><span class="comment">// Performing cleanup</span></span><br></pre></td></tr></table></figure>

<p>我们可以看到，不管 return 在哪里，finally 都会被执行到。</p>
<h3 id="Pitfall-the-lost-exception"><a href="#Pitfall-the-lost-exception" class="headerlink" title="Pitfall: the lost exception"></a>Pitfall: the lost exception</h3><p>Java 异常处理终有一个缺陷可能导致我们漏掉异常。这种情况和 finally 有关，示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VeryImportantException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A very important exception!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HoHumException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A trivial exception&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LostMessage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> VeryImportantException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> VeryImportantException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> <span class="keyword">throws</span> HoHumException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HoHumException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            LostMessage lm = <span class="keyword">new</span> LostMessage();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lm.f();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lm.dispose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A trivial exception</span></span><br></pre></td></tr></table></figure>

<p>我们可以看到在上面的例子中 VerylmportantException 被吞了，只有 HoHumException 被捕获了。这种缺陷很严重，异常被完全抹去了，而且很难找到 root cause。</p>
<p>下面是一个更直接的例子, 如果我们在 final 中加了一个 return，那么所有的 try 中的异常都会被 skip 掉。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionSilencer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Using ‘return’ inside the finally block</span></span><br><span class="line">            <span class="comment">// will silence any thrown exception.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Exception-restrictions"><a href="#Exception-restrictions" class="headerlink" title="Exception restrictions"></a>Exception restrictions</h2><p>当你 重写 一个方法的时候，你只能抛出基类方法中规定的异常，这个限制很有用，通过这样的限制，就能使重写的方法可以在原方法出现的地方生效。下面的方法展示了异常在继承体系中的限制情况</p>
<p>示例说明：</p>
<p>Inning 为基类， Storm 为接口， StormyInning 为测试类，继承 Inning 并且实现 Storm 接口。接口和基类中抛出的异常不同，并且接口和异常中有一个方法是同名的。总结规则如下</p>
<ol>
<li>构造函数和一般方法相比，比较特别，它要求必须抛出和基类构造函数一致的异常的同时，可以新增异常</li>
<li>方法只在一个超类(接口或者基类)中出现，那么子类中的异常 &lt;= 超类，甚至可以不抛出异常</li>
<li>如果方法在接口和基类中都出现，则一基类为准</li>
<li>从 main 方法中可以看出，程序会根据你的类信息来处理对应的异常。StormyInning 时处理一类，转化为 Inning 时需要处理的异常就改变了。</li>
</ol>
<p>子类不能抛出基类没有定义的异常的理由：比如在框架层级的代码中，你写了一个 flow, 将所有的一族类统一到一个流程中，如果允许子类可以抛出基类没有的异常，那么就有可能 flow 中没有子类的异常处理逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseballException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foul</span> <span class="keyword">extends</span> <span class="title">BaseballException</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Strike</span> <span class="keyword">extends</span> <span class="title">BaseballException</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Inning</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Inning</span><span class="params">()</span> <span class="keyword">throws</span> BaseballException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">event</span><span class="params">()</span> <span class="keyword">throws</span> BaseballException </span>&#123;</span><br><span class="line">        <span class="comment">// Doesn’t actually have to throw anything</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">atBat</span><span class="params">()</span> <span class="keyword">throws</span> Strike, Foul</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// Throws no checked exceptions</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StormException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RainedOut</span> <span class="keyword">extends</span> <span class="title">StormException</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PopFoul</span> <span class="keyword">extends</span> <span class="title">Foul</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Storm</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">event</span><span class="params">()</span> <span class="keyword">throws</span> RainedOut</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rainHard</span><span class="params">()</span> <span class="keyword">throws</span> RainedOut</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StormyInning</span> <span class="keyword">extends</span> <span class="title">Inning</span> <span class="keyword">implements</span> <span class="title">Storm</span> </span>&#123;</span><br><span class="line">    <span class="comment">// OK to add new exceptions for constructors, but you</span></span><br><span class="line">    <span class="comment">// must deal with the base constructor exceptions:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StormyInning</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> RainedOut, BaseballException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StormyInning</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Foul, BaseballException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Regular methods must conform to base class:</span></span><br><span class="line">    <span class="comment">// !public void walk() throws PopFoul &#123;&#125; //Compile error</span></span><br><span class="line">    <span class="comment">// Interface CANNOT add exceptions to existing</span></span><br><span class="line">    <span class="comment">// methods from the base class:</span></span><br><span class="line">    <span class="comment">// !public void event() throws RainedOut &#123;&#125;</span></span><br><span class="line">    <span class="comment">// If the method doesn’t already exist in the</span></span><br><span class="line">    <span class="comment">// base class, the exception is OK:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rainHard</span><span class="params">()</span> <span class="keyword">throws</span> RainedOut </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// You can choose to not throw any exceptions,</span></span><br><span class="line">    <span class="comment">// even if the base version does:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">event</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Overridden methods can throw inherited exceptions:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">atBat</span><span class="params">()</span> <span class="keyword">throws</span> PopFoul </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            StormyInning si = <span class="keyword">new</span> StormyInning();</span><br><span class="line">            si.atBat();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PopFoul e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Pop foul&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RainedOut e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Rained out&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BaseballException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Generic baseball exception&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Strike not thrown in derived version.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// What happens if you upcast?</span></span><br><span class="line">            Inning i = <span class="keyword">new</span> StormyInning();</span><br><span class="line">            i.atBat();</span><br><span class="line">            <span class="comment">// You must catch the exceptions from the</span></span><br><span class="line">            <span class="comment">// base-class version of the method:</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Strike e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Strike&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Foul e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Foul&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RainedOut e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Rained out&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BaseballException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Generic baseball exception&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然异常签名会在继承时对你做一些语法上的要求，但是它并不是方法的一部分。方法签名只和 方法名，方法参数有关。所以你在重写方法的时候是不能基于异常类型的。</p>
<h2 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h2><p>时常问自己一句，“如果有异常发生，是不是所有的东西都会被清理干净” 是很重要的。大部分情况下你是安全的，但是在构造函数中，这就是个问题了。构造函数中，对象一开始是安全的，但是随着程序的进行，比如打开了一个文件。但是只有在完成读写后他才会关闭这个流。如果在构造函数中抛出异常，那么这个清理工作可能不能顺利完成。这就意味着，在处理构造函数的时候，你必须格外小心。</p>
<p>你可能会想，我们可以用 finally 来处理这种情况，但是情况可能并没有这么简单，因为 finally 是每次都会执行的。如果构造函数中途挂了，一些对象可能没有被正确的创建出来，那么对应的 finally 执行也可能出问题。</p>
<p>下面的例子中，我们用一个 I/O 的例子做示范：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader in;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InputFile</span><span class="params">(String fname)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(fname));</span><br><span class="line">            <span class="comment">// Other code that might throw exceptions</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Could not open &quot;</span> + fname);</span><br><span class="line">            <span class="comment">// Wasn’t open, so don’t close it</span></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// All other exceptions must close it</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e2) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;in.close() unsuccessful&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e; <span class="comment">// Rethrow</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Don’t close it here!!!</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s = in.readLine();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;readLine() failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in.close();</span><br><span class="line">            System.out.println(<span class="string">&quot;dispose() successful&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;in.close() failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造函数里，InputFile 用 String 表示文件名，并在一个 try block 创建一个 FileReader。InputFile 并没有什么特别的地方，它最大的作用是将 FileReader 和 BufferedReader 结合在了一起。</p>
<p>如果 FileReader 的构造失败了，就会抛出 FileNotFoundException。这种情况下，IO 流并没有被正常的开启，我们在异常处理时不需要关闭这个流。除这个异常外的其他异常，则要求我们关闭文件流。因为如果是其他的异常，则当时文件流已经被打开了，我们就需要在处理异常后关闭文件流。close() 方法也会抛出异常，对应的，我们在 catch 中也添加一个 try-catch 处理。处理完这些异常后我们再将这个异常抛出去。</p>
<p>上面的示例中，由于 finally 是每次比执行的，所以不是一个处理 close() 的好地方。</p>
<p>getLine() 会返回下一行内容。底层是调用了 readLine() 方法，它会抛出一个异常，但是这个异常被捕获并转化为 RuntimeException了，所以方法签名中不需要处理该异常。</p>
<p>当 InputFile 对象使用完毕后，调用 dispose() 方法释放资源。你可能想要将这个动作放到 finalize() 方法中，但是 Java 语言体系是不支持这种操作的，算是 Java 的缺陷之一。</p>
<p>像这种例子，最安全的做法应该是在原来的 try block 中再嵌套一个 try block。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cleanup</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputFile in = <span class="keyword">new</span> InputFile(<span class="string">&quot;Cleanup.java&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String s;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> ((s = in.getLine()) != <span class="keyword">null</span>)</span><br><span class="line">                    ; <span class="comment">// Perform line-by-line processing here...</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Caught Exception in main&quot;</span>);</span><br><span class="line">                e.printStackTrace(System.out);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                in.dispose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;InputFile construction failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// dispose() successful</span></span><br></pre></td></tr></table></figure>

<p>上例中，我们有通过两个 try block 进行嵌套，一个处理文件流的构造，一个处理文件流读写。构造方法失败无需调用 dispose()，读写失败则需要调用读写。</p>
<p>这种通用的 cleanup 即使是那些不会抛异常的构造函数，也可以适用。基本规则是：当你创建了需要 cleanup 的对象，你就可以开始适用 try-finally 了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeedsCleanup</span> </span>&#123; <span class="comment">// Construction can’t fail</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;NeedsCleanup &quot;</span> + id + <span class="string">&quot; disposed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConstructionException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeedsCleanup2</span> <span class="keyword">extends</span> <span class="title">NeedsCleanup</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Construction can fail:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NeedsCleanup2</span><span class="params">()</span> <span class="keyword">throws</span> ConstructionException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CleanupIdiom</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Section 1:</span></span><br><span class="line">        NeedsCleanup nc1 = <span class="keyword">new</span> NeedsCleanup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            nc1.dispose();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Section 2:</span></span><br><span class="line">        <span class="comment">// If construction cannot fail you can group objects:</span></span><br><span class="line">        NeedsCleanup nc2 = <span class="keyword">new</span> NeedsCleanup();</span><br><span class="line">        NeedsCleanup nc3 = <span class="keyword">new</span> NeedsCleanup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            nc3.dispose(); <span class="comment">// Reverse order of construction</span></span><br><span class="line">            nc2.dispose();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Section 3:</span></span><br><span class="line">        <span class="comment">// If construction can fail you must guard each one:</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            NeedsCleanup2 nc4 = <span class="keyword">new</span> NeedsCleanup2();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                NeedsCleanup2 nc5 = <span class="keyword">new</span> NeedsCleanup2();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// ...</span></span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    nc5.dispose();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ConstructionException e) &#123; <span class="comment">// nc5 constructor</span></span><br><span class="line">                System.out.println(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                nc4.dispose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ConstructionException e) &#123; <span class="comment">// nc4 constructor</span></span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// NeedsCleanup 1 disposed</span></span><br><span class="line"><span class="comment">// NeedsCleanup 3 disposed</span></span><br><span class="line"><span class="comment">// NeedsCleanup 2 disposed</span></span><br><span class="line"><span class="comment">// NeedsCleanup 5 disposed</span></span><br><span class="line"><span class="comment">// NeedsCleanup 4 disposed</span></span><br></pre></td></tr></table></figure>

<p>在 main() 函数中， section 1 的内容很直截了当，如果构造失败，就不需要 try-finally 了。</p>
<p>section 2 中，如果构造成功，我们可以在一个 try-finally 中同时关闭两个对象。</p>
<p>section 3 中，由于构造函数本身会跑出异常，所以每执行一个对象的初始化，你就需要有一个 try-finally 处理它，对应的代码会变得混乱。在这种情况下，强烈建议你将初始化的代码段也纳入 try 中，虽然有点容于，但是更好维护。</p>
<p>如果 dispose() 也会抛出异常，你需要额外的 try 来处理它，总之你必须处理所有可能出现的情况。</p>
<h2 id="Exception-matching"><a href="#Exception-matching" class="headerlink" title="Exception matching"></a>Exception matching</h2><p>当抛出异常时，异常处理系统会查找最近的处理器。如果找到一个匹配的，那么就视作异常已经被处理，不会找下一个了。</p>
<p>搜索异常是并不会精确匹配，子类异常可以匹配到基类异常处理器。</p>
<p>在下面的例子中，第一个 try block 中 <code>Sneeze</code> 异常被第一个 catch block 捕获，这个合理。但是当我们将第一个 catch 移除时，异常也可以被 Annoyance 这个基类异常捕获。</p>
<p>如果你将第一个示例中的 Annoyance 提前，会有<strong>编译错误</strong>指出 Sneeze 已经被捕获，不需要再处理了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Annoyance</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sneeze</span> <span class="keyword">extends</span> <span class="title">Annoyance</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Catch the exact type:</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Sneeze();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Sneeze s) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught Sneeze&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Annoyance a) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught Annoyance&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Catch the base type:</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Sneeze();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Annoyance a) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught Annoyance&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Caught Sneeze</span></span><br><span class="line"><span class="comment">// Caught Annoyance</span></span><br></pre></td></tr></table></figure>

<h2 id="Alternative-approaches"><a href="#Alternative-approaches" class="headerlink" title="Alternative approaches"></a>Alternative approaches</h2><p>异常处理系统提供了一个在程序异常时的分支。异常状态表示当前程序不能被处理，异常系统开发的初衷是为了给程序员处理异常情况提供便利性。</p>
<p>异常处理的准则之一：不要捕获那些你不知道怎么处理的异常。其实，异常处理的主要目标之一是将异常处理代码从当前节点移除。这样你就可以将你的主要逻辑集中到一个地方，而在不远处的 catch 中集中处理异常代码。这样代码更容易理解和维护。</p>
<p>一个 handler 可以处理多种异常，减少了处理代码的量</p>
<p>Checked exception 会强制你写 catch block 这个有违于 ‘harmful if swallowed’ 原则。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// ... to do something useful</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(ObligatoryException e) &#123;&#125; <span class="comment">// Gulp! </span></span><br></pre></td></tr></table></figure>

<p>码农们仅仅做了捕获，并不处理。但是编译器视这种做法合理，所以除非你重新回顾这段代码，不然这个异常就丢失了。当异常发生时，它被吞了。这是最简单但也可能是最糟糕的一种处理方式了。</p>
<p>第二版中，做了一些改进，我们在处理异常时打印了对应的 log。但是我们在那个时间点还是不知道应该怎么处理它。这个章节我们将提供几个处理异常时的可选项。</p>
<h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><p>各种语言的异常发展历史，pass</p>
<h3 id="Perspectives"><a href="#Perspectives" class="headerlink" title="Perspectives"></a>Perspectives</h3><p>各种语言的异常发展历史，pass</p>
<h3 id="Passing-exceptions-to-the-console"><a href="#Passing-exceptions-to-the-console" class="headerlink" title="Passing exceptions to the console"></a>Passing exceptions to the console</h3><p>在简单的代码段中，最简单的异常处理可能就是将异常抛出不处理。比如我们要打开/关闭一个文件，我们就会需要处理一些 IO Exception。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainException</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Pass all exceptions to the console:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// Open the file:</span></span><br><span class="line">        FileInputStream file = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;MainException.java&quot;</span>);</span><br><span class="line">        <span class="comment">// Use the file ...</span></span><br><span class="line">        <span class="comment">// Close the file:</span></span><br><span class="line">        file.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main() 也是一个可以携带异常签名的方法，上面的例子中，它带有一个异常 Exception，是所有受检异常的基类。通过把它在方法签名中抛出我们就不用在代码段中写 try-catch 了。</p>
<h3 id="Converting-checked-to-unchecked-exceptions"><a href="#Converting-checked-to-unchecked-exceptions" class="headerlink" title="Converting checked to unchecked exceptions"></a>Converting checked to unchecked exceptions</h3><p>从 main() 中抛出异常很方面，但是不实用。很多时候，你在调用其他方法的时候，你会想，我不知道怎么处理该异常，但是我又不想只是打印一条信息。这时我们可以简单的在这个异常外面套一个壳变成 Runtimexception。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">// ... to do something useful</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(IDontKnowWhatToDoWithThisCheckedException e) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>这中处理方式看上去很美好，他可以让你从 checked exception 中解放出来，你没有吞掉它。并且你通过异常链串起来，起初的异常也没有丢失。</p>
<p>虽然不用再写 try-catch 了，但是你还是可以通过 getCause() 处理。</p>
<p>下例中，WrapCheckedException.throwRuntimeException() 可以抛出不同的异常。他们被包裹在 RuntimeException 异常中的 cause 中。TurnOffChecking 中你在调用 throwRuntimeException 时可以不处理 try。</p>
<p>但是如果你想要处理，你也可以在方法调用外面包裹 try 并通过 getCause() 得到原始异常并处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WrapCheckedException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">throwRuntimeException</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException();</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Where am I?&quot;</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123; <span class="comment">// Adapt to unchecked:</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeOtherException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurnOffChecking</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WrapCheckedException wce = <span class="keyword">new</span> WrapCheckedException();</span><br><span class="line">        <span class="comment">// You can call throwRuntimeException() without a try</span></span><br><span class="line">        <span class="comment">// block, and let RuntimeExceptions leave the method:</span></span><br><span class="line">        wce.throwRuntimeException(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// Or you can choose to catch exceptions:</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">3</span>)</span><br><span class="line">                    wce.throwRuntimeException(i);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SomeOtherException();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SomeOtherException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;SomeOtherException: &quot;</span> + e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException re) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> re.getCause();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;FileNotFoundException: &quot;</span> + e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;IOException: &quot;</span> + e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Throwable: &quot;</span> + e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// FileNotFoundException: java.io.FileNotFoundException</span></span><br><span class="line"><span class="comment">// IOException: java.io.IOException</span></span><br><span class="line"><span class="comment">// Throwable: java.lang.RuntimeException: Where am I?</span></span><br><span class="line"><span class="comment">// SomeOtherException: reading.container.SomeOtherException</span></span><br></pre></td></tr></table></figure>

<p>当然你也可以包装一个 RuntimeException 的子类，并用它包装你捕获的受检异常。</p>
<h2 id="Exception-guidelines"><a href="#Exception-guidelines" class="headerlink" title="Exception guidelines"></a>Exception guidelines</h2><ol>
<li>在恰当的地方处理异常(Avoid catching exceptions unless you know what to do with them.)</li>
<li>Fix the problem and call the method that caused the exception again.</li>
<li>修复问题，不要用 retry</li>
<li>Calculate some alternative result instead of what the method was supposed to produce.</li>
<li>Do whatever you can in the current context and rethrow the same exception to a higher context.</li>
<li>Do whatever you can in the current context and throw a different exception to a higher context.</li>
<li>Terminate the program.</li>
<li>Simplify. (If your exception scheme makes things more complicated, then it is painful and annoying to use.)</li>
<li>Make your library and program safer. (This is a short-term investment for debugging, and a long-term investment for application robustness.) </li>
</ol>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Exception 是 Java 的一部分，如果你不了解他，那么你能做的事情就非常有限了。</p>
<p>异常处理的一大好处是，你可以将你的业务逻辑和异常处理代码分开。已经异常处理涵盖两部分，报告异常和修复程序，但是从遗忘的经验中来看，修复这个功能貌似都是难以实现的，或者压根不可能实现。</p>
<p>不管怎么说，我始终相信，报告异常才是异常处理的主要职责。通过异常机制，你可以将更多的精力集中到更有趣，有挑战的部分。</p>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>exception</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 弹射起步</title>
    <url>/hexo/2021/04/15/Docker-quick-start/</url>
    <content><![CDATA[<ul>
<li><a href="#学后总结">学后总结</a></li>
<li><a href="#虚拟机-vs-容器">虚拟机 Vs 容器</a></li>
<li><a href="#常用命令">常用命令</a></li>
<li><a href="#nginx-镜像操作实践">Nginx 镜像操作实践</a></li>
<li><a href="#tomcat-镜像操作实践">Tomcat 镜像操作实践</a></li>
<li><a href="#部署-es--kibana-操作实践">部署 ES + kibana 操作实践</a></li>
<li><a href="#可视化">可视化</a></li>
<li><a href="#docker-镜像加载原理">Docker 镜像加载原理</a></li>
<li><a href="#制作镜像">制作镜像</a></li>
<li><a href="#数据卷">数据卷</a></li>
<li><a href="#安装-mysql-操作实践">安装 MySQL 操作实践</a></li>
<li><a href="#具名挂载-vs-匿名挂载">具名挂载 Vs 匿名挂载</a></li>
<li><a href="#数据共享">数据共享</a></li>
<li><a href="#初识-dockerfile">初识 Dockerfile</a></li>
<li><a href="#dockerfile">Dockerfile</a></li>
<li><a href="#cmd-vs-entrypoint">CMD Vs ENTRYPOINT</a></li>
<li><a href="#实战-制作-tomcat-镜像">实战： 制作 Tomcat 镜像</a></li>
<li><a href="#docker0-网络详解">docker0 网络详解</a></li>
<li><a href="#--link">–link</a></li>
<li><a href="#自定义网络">自定义网络</a></li>
<li><a href="#网络联通">网络联通</a></li>
<li><a href="#实战部署-redis-集群">实战：部署 Redis 集群</a></li>
<li><a href="#springboot-微服务打包-docker-镜像">SpringBoot 微服务打包 Docker 镜像</a></li>
<li><a href="#docker-compose">Docker Compose</a></li>
<li><a href="#安装">安装</a></li>
<li><a href="#官方起步教程">官方起步教程</a></li>
<li><a href="#yaml-规则">YAML 规则</a></li>
<li><a href="#实战">实战</a></li>
<li><a href="#docker-swarm">Docker Swarm</a></li>
<li><a href="#raft-协议">Raft 协议</a></li>
<li><a href="#搭建集群">搭建集群</a></li>
<li><a href="#概念总结">概念总结</a></li>
<li><a href="#以后还要学-go">以后还要学 Go</a></li>
<li><a href="#问题">问题</a></li>
</ul>
<h2 id="学后总结"><a href="#学后总结" class="headerlink" title="学后总结"></a>学后总结</h2><ul>
<li>基本了解了 docker 相关的整个生态的基本情况</li>
<li>熟悉了 docker 的基本用法</li>
<li>有机会要学一下 Go 语言</li>
</ul>
<h2 id="虚拟机-Vs-容器"><a href="#虚拟机-Vs-容器" class="headerlink" title="虚拟机 Vs 容器"></a>虚拟机 Vs 容器</h2><ul>
<li>虚拟机运行整个系统，在系统上安装运行软件</li>
<li>容器内的应用直接运行在宿主机内，容器没有自己的内核，也没有虚拟硬件</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker client 信息显示</span></span><br><span class="line">docker version  <span class="comment"># docker engin, api 等的版本信息</span></span><br><span class="line">docker info     <span class="comment"># docker 环境信息，包括 image, container 数量，内核版本等</span></span><br><span class="line">docker --<span class="built_in">help</span>   <span class="comment"># 帮助</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像相关命令</span></span><br><span class="line">docker pull [OPTIONS] NAME[:TAG|@DIGEST]    <span class="comment"># 拉镜像</span></span><br><span class="line"><span class="comment"># Host&gt; docker pull mysql                   # 没有指定 tag 就默认下载 latest 版本</span></span><br><span class="line"><span class="comment"># Using default tag: latest</span></span><br><span class="line"><span class="comment"># latest: Pulling from library/mysql</span></span><br><span class="line"><span class="comment"># f7ec5a41d630: Already exists </span></span><br><span class="line"><span class="comment"># 9444bb562699: Pull complete               # 分层下载， docker image 的核心，联合文件系统</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># e47da95a5aab: Pull complete </span></span><br><span class="line"><span class="comment"># Digest: sha256:04ee7141256e83797ea4a84a4d31b1f1bc10111c8d1bc1879d52729ccd19e20a # 签名</span></span><br><span class="line"><span class="comment"># Status: Downloaded newer image for mysql:latest</span></span><br><span class="line"><span class="comment"># docker.io/library/mysql:latest            # 真实地址，等价于 docker pull docker.io/library/mysql:latest</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line"><span class="comment"># -f: 强制删除</span></span><br><span class="line">docker rmi [OPTIONS] IMAGE [IMAGE...]               <span class="comment"># 删除镜像</span></span><br><span class="line">docker rmi -f $(docker images -aq)                  <span class="comment"># 组合命令，删除全部镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器相关</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line"><span class="comment"># --name=&quot;my_name&quot;          # 指定容器名字</span></span><br><span class="line"><span class="comment"># -d                        # 后台运行</span></span><br><span class="line"><span class="comment"># -it                       # 交互方式运行，进去容器查看, 示例: docker run -it centos /bin/bash</span></span><br><span class="line"><span class="comment"># -p                        # 指定端口</span></span><br><span class="line"><span class="comment">#   -p ip:主机端口:容器端口</span></span><br><span class="line"><span class="comment">#   -p 主机端口:容器端口</span></span><br><span class="line"><span class="comment">#   -p 容器端口</span></span><br><span class="line"><span class="comment"># -P                        # 随机指定端口</span></span><br><span class="line"><span class="comment"># 常见坑：docker 容器使用后台运行，必须要给一个前台进程，如果 docker 发现没有应用就会自动停止</span></span><br><span class="line"><span class="comment"># 比如启动 nginx 容器，如果没有 -it 参数，容器就会立刻停止，ps 之后不会显示这个容器，加 -a 可以</span></span><br><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成临时 log</span></span><br><span class="line">docker run -d centos /bin/sh -c <span class="string">&quot;while true;do echo testlog;sleep 1;done&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -t                # 时间戳</span></span><br><span class="line"><span class="comment"># -f                # 持续打印</span></span><br><span class="line"><span class="comment"># --tail num        # 输出n条</span></span><br><span class="line"><span class="comment"># sample: docker logs -tf --tail 10 627b379be47a</span></span><br><span class="line">docker logs [OPTIONS] CONTAINER         <span class="comment"># 输出 console log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -a                # 所有容器, 包括已经停止的</span></span><br><span class="line"><span class="comment"># -aq               # 只显示容器 id</span></span><br><span class="line"><span class="comment"># -n=2 or -n 2      # 最近创建的2个容器</span></span><br><span class="line">docker ps [OPTIONS] <span class="comment"># 显示容器信息</span></span><br><span class="line"></span><br><span class="line">ctrl + p + q        <span class="comment"># 交互模式下推出容器并后台运行。mac 也是这个命令，不过 vscode 里不好使，应该是快捷键冲突</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -f                                                    # 强制移除</span></span><br><span class="line"><span class="comment"># sample: docker rm -f $(docker ps -qa)                 # 删除所有</span></span><br><span class="line"><span class="comment"># sample: docker ps -aq | xargs docker rm               # 通过 Linux pip 方式删除所有</span></span><br><span class="line">docker rm [OPTIONS] CONTAINER [CONTAINER...]            <span class="comment"># 删除容器，不能删除正在运行的容器，除非加 -f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除由某个 image 生成的所有 containers</span></span><br><span class="line"><span class="comment"># 这里有个小技巧，先通过 docker ps 打印一下，避免误删：docker ps -a --filter ancestor=nginx</span></span><br><span class="line">docker rm -f $(docker ps -aq --filter ancestor=nginx)</span><br><span class="line"></span><br><span class="line">docker start [OPTIONS] CONTAINER [CONTAINER...]         <span class="comment"># 启动停止的容器</span></span><br><span class="line">docker restart [OPTIONS] CONTAINER [CONTAINER...]       <span class="comment"># 重启容器</span></span><br><span class="line">docker stop [OPTIONS] CONTAINER [CONTAINER...]          <span class="comment"># 停止容器</span></span><br><span class="line">docker docker <span class="built_in">kill</span> [OPTIONS] CONTAINER [CONTAINER...]   <span class="comment"># stop 报错了可以用这个强制杀进程</span></span><br><span class="line"></span><br><span class="line">docker top CONTAINER [ps OPTIONS]                       <span class="comment"># 显示容器中的进程, 如下显示志之前 log 例子的 top 信息</span></span><br><span class="line"><span class="comment"># docker top 627b379be47a</span></span><br><span class="line"><span class="comment"># UID          PID          PPID         C            STIME               TTY          TIME         CMD</span></span><br><span class="line"><span class="comment"># root         12866         12840       0            10:29               ?            00:00:00     /bin/bash -c while true; do echo testlog; sleep 1; done</span></span><br><span class="line"></span><br><span class="line">docker inspect [OPTIONS] NAME|ID [NAME|ID...]           <span class="comment"># 显示容器底层信息, 包括 id, image, 共享卷，网络等信息</span></span><br><span class="line"><span class="comment"># [</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#         &quot;Id&quot;: &quot;247d2a88573fdb2893a90a3d35275bfaa2889f7fa450d875456646ed684643d4&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Created&quot;: &quot;2021-04-20T13:06:45.2632089Z&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Path&quot;: &quot;/bin/sh&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Args&quot;: [</span></span><br><span class="line"><span class="comment">#             &quot;-c&quot;,</span></span><br><span class="line"><span class="comment">#             &quot;while true;do echo testlog;sleep 1;done&quot;</span></span><br><span class="line"><span class="comment">#         ],</span></span><br><span class="line"><span class="comment">#         &quot;State&quot;: &#123;</span></span><br><span class="line"><span class="comment">#             &quot;Status&quot;: &quot;running&quot;,</span></span><br><span class="line"><span class="comment">#             ...</span></span><br><span class="line"><span class="comment">#         &#125;,</span></span><br><span class="line"><span class="comment">#         &quot;Image&quot;: &quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;,</span></span><br><span class="line"><span class="comment">#         ...</span></span><br><span class="line"><span class="comment">#         &quot;GraphDriver&quot;: &#123;</span></span><br><span class="line"><span class="comment">#             &quot;Data&quot;: &#123;</span></span><br><span class="line"><span class="comment">#                 &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/80783254f01fcdde559ac63ff7503d2dc317929d0328fb1c66846f9e519d98df/work&quot;</span></span><br><span class="line"><span class="comment">#                 ...</span></span><br><span class="line"><span class="comment">#             &#125;,</span></span><br><span class="line"><span class="comment">#             &quot;Name&quot;: &quot;overlay2&quot;</span></span><br><span class="line"><span class="comment">#         &#125;,</span></span><br><span class="line"><span class="comment">#         &quot;Mounts&quot;: [],</span></span><br><span class="line"><span class="comment">#         &quot;Config&quot;: &#123;</span></span><br><span class="line"><span class="comment">#             ...</span></span><br><span class="line"><span class="comment">#             &quot;Cmd&quot;: [</span></span><br><span class="line"><span class="comment">#                 &quot;/bin/sh&quot;,</span></span><br><span class="line"><span class="comment">#                 &quot;-c&quot;,</span></span><br><span class="line"><span class="comment">#                 &quot;while true;do echo testlog;sleep 1;done&quot;</span></span><br><span class="line"><span class="comment">#             ],</span></span><br><span class="line"><span class="comment">#             &quot;Image&quot;: &quot;centos&quot;,</span></span><br><span class="line"><span class="comment">#             &quot;Volumes&quot;: null,</span></span><br><span class="line"><span class="comment">#             &quot;WorkingDir&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="comment">#             &quot;Entrypoint&quot;: null,</span></span><br><span class="line"><span class="comment">#             &quot;OnBuild&quot;: null,</span></span><br><span class="line"><span class="comment">#             &quot;Labels&quot;: &#123;</span></span><br><span class="line"><span class="comment">#                 &quot;org.label-schema.build-date&quot;: &quot;20201204&quot;,</span></span><br><span class="line"><span class="comment">#                 ...</span></span><br><span class="line"><span class="comment">#             &#125;</span></span><br><span class="line"><span class="comment">#         &#125;,</span></span><br><span class="line"><span class="comment">#         &quot;NetworkSettings&quot;: &#123;</span></span><br><span class="line"><span class="comment">#             &quot;Bridge&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="comment">#             ...</span></span><br><span class="line"><span class="comment">#             &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span></span><br><span class="line"><span class="comment">#             &quot;Networks&quot;: &#123;</span></span><br><span class="line"><span class="comment">#                 &quot;bridge&quot;: &#123;</span></span><br><span class="line"><span class="comment">#                     &quot;IPAMConfig&quot;: null,</span></span><br><span class="line"><span class="comment">#                     &quot;Links&quot;: null,</span></span><br><span class="line"><span class="comment">#                     &quot;Aliases&quot;: null,</span></span><br><span class="line"><span class="comment">#                     &quot;NetworkID&quot;: &quot;2fbb6bb1ed5e760a8350664377ea726ffbf35fab4794d45926ab9f9f9bd28d8a&quot;,</span></span><br><span class="line"><span class="comment">#                     &quot;EndpointID&quot;: &quot;aa43be83ff078d4c2dbdff62a2e69217ef2e17c0585edfecdcda030dca3aef0f&quot;,</span></span><br><span class="line"><span class="comment">#                     &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span></span><br><span class="line"><span class="comment">#                     &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span></span><br><span class="line"><span class="comment">#                     &quot;IPPrefixLen&quot;: 16,</span></span><br><span class="line"><span class="comment">#                     &quot;IPv6Gateway&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="comment">#                     &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="comment">#                     &quot;GlobalIPv6PrefixLen&quot;: 0,</span></span><br><span class="line"><span class="comment">#                     &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span></span><br><span class="line"><span class="comment">#                     &quot;DriverOpts&quot;: null</span></span><br><span class="line"><span class="comment">#                 &#125;</span></span><br><span class="line"><span class="comment">#             &#125;</span></span><br><span class="line"><span class="comment">#         &#125;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sample: docker exec -it 627b379be47a /bin/bash </span></span><br><span class="line">docker <span class="built_in">exec</span> [OPTIONS] CONTAINER COMMAND [ARG...]        <span class="comment"># 进入容器，开启一个新的终端</span></span><br><span class="line">       </span><br><span class="line">docker attach [OPTIONS] CONTAINER                       <span class="comment"># 进去容器，为当前正在执行的终端</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker cp ./myyyyyy.tar  9b41928f2fb3:/</span></span><br><span class="line">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-      <span class="comment"># 容器和宿主机之间文件**互相**拷贝, - 这个符号可以操作 tar，查了一下没使用案例，测试失败</span></span><br><span class="line">docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br></pre></td></tr></table></figure>

<h2 id="Nginx-镜像操作实践"><a href="#Nginx-镜像操作实践" class="headerlink" title="Nginx 镜像操作实践"></a>Nginx 镜像操作实践</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search nginx         <span class="comment"># 从官方 repo 搜索镜像</span></span><br><span class="line"><span class="comment"># NAME                               DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span></span><br><span class="line"><span class="comment"># nginx                              Official build of Nginx.                        14752     [OK]</span></span><br><span class="line"><span class="comment"># jwilder/nginx-proxy                Automated Nginx reverse proxy for docker con…   2018                 [OK]</span></span><br><span class="line"></span><br><span class="line">docker pull nginx                               <span class="comment"># 下载镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -d                        # 后台运行</span></span><br><span class="line"><span class="comment"># --name:my-nginx           # 自定义容器名称</span></span><br><span class="line"><span class="comment"># -p                        # 指定端口号</span></span><br><span class="line">docker run -d --name nginx01 -p 3344:80 nginx   <span class="comment"># 启动容器</span></span><br><span class="line"></span><br><span class="line">curl localhost:3344                             <span class="comment"># 访问暴露的地址测试是否成功启动, 返回页面如下</span></span><br><span class="line"><span class="comment"># &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment"># &lt;html&gt;</span></span><br><span class="line"><span class="comment"># &lt;head&gt;</span></span><br><span class="line"><span class="comment"># &lt;title&gt;Welcome to nginx!&lt;/title&gt;</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># &lt;body&gt;</span></span><br><span class="line"><span class="comment"># &lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span></span><br><span class="line"><span class="comment"># &lt;p&gt;If you see this page, the nginx web server is successfully installed and</span></span><br><span class="line"><span class="comment"># working. Further configuration is required.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># &lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"># &lt;/body&gt;</span></span><br><span class="line"><span class="comment"># &lt;/html&gt;</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it nginx01 /bin/bash               <span class="comment"># 进入容器</span></span><br><span class="line">whereis nginx                                   <span class="comment"># linux 基础命令，查看配置</span></span><br></pre></td></tr></table></figure>

<h2 id="Tomcat-镜像操作实践"><a href="#Tomcat-镜像操作实践" class="headerlink" title="Tomcat 镜像操作实践"></a>Tomcat 镜像操作实践</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --rm      # 一般用于测试，用完即删除</span></span><br><span class="line">docker run -it --rm tomcat:9.0                      <span class="comment"># tomcat docker 镜像官方命令，可以达到测试完毕，推出即删除的效果</span></span><br><span class="line"></span><br><span class="line">docker run -d -p 3355:8080 --name tomcat01 tomcat   <span class="comment"># 容器命名为 tomcat01 跑在 3355 端口</span></span><br><span class="line">curl localhost:3355                                 <span class="comment"># 访问测试, 访问失败</span></span><br><span class="line"><span class="comment"># &lt;!doctype html&gt;...&lt;/b&gt; The origin server did not find a current representation for the target resource or is not willing to disclose that one exists...&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat01 /bin/bash                  <span class="comment"># 进入容器查看原因</span></span><br><span class="line"></span><br><span class="line">cp -r webapps.dist/* webapps                        <span class="comment"># 官方镜像 webapps 文件夹为空，样板页面放到了 webapps.dist 下了。拷贝一下，问题解决</span></span><br></pre></td></tr></table></figure>

<h2 id="部署-ES-kibana-操作实践"><a href="#部署-ES-kibana-操作实践" class="headerlink" title="部署 ES + kibana 操作实践"></a>部署 ES + kibana 操作实践</h2><p>ES 的问题：</p>
<ul>
<li>ES 暴露的接口多</li>
<li>ES 十分耗内存</li>
<li>ES 数据需要备份</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sample of official:</span></span><br><span class="line"><span class="comment">#   docker network create somenetwork</span></span><br><span class="line"><span class="comment">#   docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:tag</span></span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> elasticsearch:7.6.2</span><br><span class="line"></span><br><span class="line">docker stats            <span class="comment"># 实时显示容器的资源使用情况</span></span><br><span class="line"><span class="comment"># CONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O       PIDS</span></span><br><span class="line"><span class="comment"># 5e20f16bed99   elasticsearch   1.01%     1.332GiB / 15.64GiB   8.52%     836B / 0B   106MB / 729kB   46</span></span><br><span class="line"></span><br><span class="line">curl localhost:9200     <span class="comment"># 发送请求测试</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#   &quot;name&quot; : &quot;4d87cd0d4ff6&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;cluster_name&quot; : &quot;docker-cluster&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;cluster_uuid&quot; : &quot;ojWX85pITJyL7WkVnoKZcA&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;version&quot; : &#123;</span></span><br><span class="line"><span class="comment">#     &quot;number&quot; : &quot;7.6.2&quot;,</span></span><br><span class="line"><span class="comment">#    ...</span></span><br><span class="line"><span class="comment">#   &#125;,</span></span><br><span class="line"><span class="comment">#   &quot;tagline&quot; : &quot;You Know, for Search&quot;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -e        # 启动时添加环境配置，sample: ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; 修改内存配置, 再次查看 stats 可以看到内存使用量变化</span></span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> -e ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx512m&quot;</span> elasticsearch:7.6.2</span><br><span class="line"><span class="comment"># CONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O    PIDS</span></span><br><span class="line"><span class="comment"># 7a804bd391d6   elasticsearch   229.04%   318.1MiB / 15.64GiB   1.99%     766B / 0B   0B / 246kB   27</span></span><br></pre></td></tr></table></figure>

<h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><ul>
<li>Portainer - 图形化管理工具</li>
<li>Rancher - CI/CD</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 访问 localhost:9000 可见页面</span></span><br><span class="line">docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce</span><br></pre></td></tr></table></figure>

<h2 id="Docker-镜像加载原理"><a href="#Docker-镜像加载原理" class="headerlink" title="Docker 镜像加载原理"></a>Docker 镜像加载原理</h2><p>UnionFS 联合文件系统，分层，轻量级且高性能。有机会再做扩展。</p>
<h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -a                # 作者</span></span><br><span class="line"><span class="comment"># -m                # commit 信息</span></span><br><span class="line"><span class="comment"># 630bab3ed5c2      # 修改过的 container id</span></span><br><span class="line"><span class="comment"># tomcat02:1.0      # 新镜像名称:版本号</span></span><br><span class="line">docker commit -a=<span class="string">&#x27;jzheng&#x27;</span> -m=<span class="string">&#x27;add webapps&#x27;</span> 630bab3ed5c2 tomcat02:1.0</span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># REPOSITORY            TAG            IMAGE ID       CREATED         SIZE</span></span><br><span class="line"><span class="comment"># tomcat02              1.0            67be5e0517c6   7 seconds ago   672MB</span></span><br></pre></td></tr></table></figure>

<h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>docker 容器删除之后，运行时产生的数据也会一起删除，为了保留这些数据，我们有了数据卷技术。通过数据卷技术，我们将容器中数据同步到宿主机，容器之间也可以通过这个技术做数据共享。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -v, --volume list         # 挂载数据卷(Bind mount a volume)</span></span><br><span class="line"><span class="comment"># sample: docker run -it -v /Users/id/tmp/mount:/home centos /bin/bash</span></span><br><span class="line">docker run -it -v host_addr:container_addr [REPOSITORY[:TAG]]</span><br><span class="line"><span class="comment"># 测试 tomcat 时发现，-v 会以本地的文件夹为基准</span></span><br><span class="line"><span class="comment"># sample: docker run -d --name my-tomcat -P -v /Users/jack/tmp/mount:/usr/local/tomcat/webapps.dist tomcat</span></span><br><span class="line"><span class="comment"># 问题：</span></span><br><span class="line"><span class="comment">#   1. 本地路径必须是全路径 &#x27;./mount&#x27; 会查找失败</span></span><br><span class="line"><span class="comment">#   2. 挂载之后会以本地文件为基准，比如上例，webapps.dist 挂载到本地后，进入容器，这个文件夹下原有的文件都没了</span></span><br><span class="line"></span><br><span class="line">docker inspect [OPTIONS] NAME|ID [NAME|ID...]       <span class="comment"># 通过 inspect 可以看到具体的挂载信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># &quot;Mounts&quot;: [</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#         &quot;Type&quot;: &quot;bind&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Source&quot;: &quot;/Users/jack/tmp/mount&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Destination&quot;: &quot;/usr/local/tomcat/webapps.dist&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Mode&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;RW&quot;: true,</span></span><br><span class="line"><span class="comment">#         &quot;Propagation&quot;: &quot;rprivate&quot;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># ],</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">停止容器，修改宿主机下的同步文件夹内容，容器启动后改动会同步到容器中</span><br></pre></td></tr></table></figure>

<h2 id="安装-MySQL-操作实践"><a href="#安装-MySQL-操作实践" class="headerlink" title="安装 MySQL 操作实践"></a>安装 MySQL 操作实践</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># -e MYSQL_ROOT_PASSWORD=my-secret-pw           # 按官方镜像文档提示，启动容器时设置密码</span></span><br><span class="line">docker run -d -p 3000:3306 -v /Users/id/tmp/mysql/conf:/etc/mysql/conf.d -v /Users/id/tmp/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name=mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 DBeaver，链接数据库，报错：`Unable to load authentication plugin &#x27;caching_sha2_password&#x27;.`</span></span><br><span class="line"><span class="comment"># 搜索之后，发现是 mysql 驱动有跟新，需要修稿客户端的 pom, 升级到 8.x 就行。DBeaver 直接就在创建选项里给了方案，选 8.x 那个就行 [GitIssue](https://github.com/dbeaver/dbeaver/issues/4691)</span></span><br><span class="line"><span class="comment"># 使用高版本的 Mysql connection 还是有问题，不过 msg 变了：`Public Key Retrieval is not allowed`</span></span><br><span class="line"><span class="comment"># 搜索之后，发现还要改配置, connection setting -&gt; Driver properties -&gt; &#x27;allowPlblicKeyRetrieval&#x27; 改为 true</span></span><br><span class="line"><span class="comment"># 还有问题。。。继续抛错：`Access denied for user &#x27;root&#x27;@&#x27;localhost&#x27; (using password: YES)`</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql01 /bin/bash               <span class="comment"># 进去容器，输入 `mysql -u root -p` 尝试登陆，成功。推测是链接客户端的问题</span></span><br><span class="line">ps -ef | grep mysql                             <span class="comment"># 查看了一下，突然想起来，本地我也有安装 mysql 可能有冲突。果断将之前安装的 docker mysql 删除，重新指定一个新的端口，用 DBeaver 链接，成功！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过客户端创建一个新的数据库 new_test, 在本地映射的 data 目录下 ls 一下，可以看到新数据库文件可以同步创建</span></span><br><span class="line"><span class="comment"># &gt; ~/tmp/mydb/data ls</span></span><br><span class="line"><span class="comment"># auto.cnf           ca.pem             client-key.pem     ib_logfile0        ibdata1            mysql              performance_schema public_key.pem     server-key.pem</span></span><br><span class="line"><span class="comment"># ca-key.pem         client-cert.pem    ib_buffer_pool     ib_logfile1        ibtmp1             new_test           private_key.pem    server-cert.pem    sys</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器，本地文件依然存在！</span></span><br></pre></td></tr></table></figure>

<h2 id="具名挂载-Vs-匿名挂载"><a href="#具名挂载-Vs-匿名挂载" class="headerlink" title="具名挂载 Vs 匿名挂载"></a>具名挂载 Vs 匿名挂载</h2><p>具名挂载和匿名挂载是 <code>docker run</code> 命令中 <code>-v</code> 参数不同的使用情况。在明确指定挂载路径时(比如之前 mysql 和 tomcat 测试时的挂载指定), 通过 <code>docker volume ls</code> 可以看到是不会生产临时文件夹的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume rm $(docker volume ls -q)             <span class="comment"># 参考 rm 示例，删除所有的 volume, 准备测试环境</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -v path_in_container                              # 匿名挂载, 不指定宿主机挂载目录</span></span><br><span class="line">docker run -d --name my-tomcat01 -P -v /usr/<span class="built_in">local</span>/tomcat/webapps.dist tomcat</span><br><span class="line"></span><br><span class="line">docker volume ls                                    <span class="comment"># 查看卷情况</span></span><br><span class="line"><span class="comment"># DRIVER    VOLUME NAME</span></span><br><span class="line"><span class="comment"># local     0cd33950f5d8a050e61e58eaddae66b397db7b0e6968d40a1908a469c8386b03</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -v name:path_in_container                         # 具名挂载, 名字:容器中挂载点地址</span></span><br><span class="line">docker run -d --name my-tomcat02 -P -v tomcat02-volume:/usr/<span class="built_in">local</span>/tomcat/webapps.dist tomcat</span><br><span class="line"><span class="comment"># DRIVER    VOLUME NAME</span></span><br><span class="line"><span class="comment"># local     0cd33950f5d8a050e61e58eaddae66b397db7b0e6968d40a1908a469c8386b03</span></span><br><span class="line"><span class="comment"># local     tomcat02-volum</span></span><br><span class="line"></span><br><span class="line">docker volume inspect juming-nginx                  <span class="comment"># 使用 inspect 查看挂载点具体信息</span></span><br><span class="line"><span class="comment"># [</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#         &quot;CreatedAt&quot;: &quot;2021-04-26T12:20:25Z&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Driver&quot;: &quot;local&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Labels&quot;: null,</span></span><br><span class="line"><span class="comment">#         &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/tomcat02-volume/_data&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Name&quot;: &quot;tomcat02-volume&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Options&quot;: null,</span></span><br><span class="line"><span class="comment">#         &quot;Scope&quot;: &quot;local&quot;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结：</span></span><br><span class="line"><span class="comment">#   -v path-in-container                  # 匿名挂载</span></span><br><span class="line"><span class="comment">#   -v volume-name:path-in-container      # 具名挂载</span></span><br><span class="line"><span class="comment">#   -v host-path:path-in-container        # 指定路径挂载</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他使用方式，加 ro/rw 参数：</span></span><br><span class="line"><span class="comment">#   -v host-path:path-in-container:ro/rw</span></span><br><span class="line"><span class="comment">#       ro: read only, 只能通过宿主机改变，容器内部不能改变</span></span><br><span class="line"><span class="comment">#       rw: read and write, 默认的权限设置</span></span><br></pre></td></tr></table></figure>

<h2 id="数据共享"><a href="#数据共享" class="headerlink" title="数据共享"></a>数据共享</h2><p>多个容器之间是可以实现同步数据的效果的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume rm $(docker volume ls -q)                             <span class="comment"># 删除卷，准备实验环境</span></span><br><span class="line"></span><br><span class="line">docker run -it -d --name myos01 mycentos                            <span class="comment"># 启动自制容器作为父容器</span></span><br><span class="line"></span><br><span class="line">docker volume ls                                                    <span class="comment"># 两个挂载卷创建完毕</span></span><br><span class="line"><span class="comment"># DRIVER              VOLUME NAME</span></span><br><span class="line"><span class="comment"># local               8532efd6dabd0254bf5cec28de4df8225e4b633b91d83e13d80ba3ea97a9b314 &lt;- volume01</span></span><br><span class="line"><span class="comment"># local               b398a216526cfe3a52f71a92c383694f73b91900dbe57159c02ab63040078c21 &lt;- volume02</span></span><br><span class="line"></span><br><span class="line">docker run -it -d --name myos02 --volumes-from myos01 mycentos      <span class="comment"># 启动子容器, 查看卷信息，没有新建卷</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it myos01 /bin/bash                                    <span class="comment"># 进入容器 myos01</span></span><br><span class="line"><span class="built_in">cd</span> volume01 &amp;&amp; touch new.txt                                        <span class="comment"># 进入测试文件夹，新建测试文件</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it myos02 /bin/bash                                    <span class="comment"># 进入容器 myos02</span></span><br><span class="line">d volume01 &amp;&amp; ls                                                    <span class="comment"># 查看文件列表</span></span><br><span class="line"><span class="comment"># new.txt                                                           # 文件创建成功</span></span><br><span class="line"></span><br><span class="line">docker rm -f myos01                                                 <span class="comment"># 删除父容器</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it myos02 /bin/bash                                    <span class="comment"># 进入容器 myos02</span></span><br><span class="line">d volume01 &amp;&amp; ls                                                    <span class="comment"># 查看文件列表</span></span><br><span class="line"><span class="comment"># new.txt                                                           # 文件创建成功</span></span><br></pre></td></tr></table></figure>

<p>结论：</p>
<ul>
<li>数据卷容器的生命周期一直持续到没有容器使用为止</li>
<li>一旦持久化到本地，本地数据是不会删除的</li>
</ul>
<p>PS: 就我看还不如说，数据卷挂载的时候会在宿主机上创建一个对应的挂载点，文件都存在那里的，所以就算容器删了数据还是存在的</p>
<h2 id="初识-Dockerfile"><a href="#初识-Dockerfile" class="headerlink" title="初识 Dockerfile"></a>初识 Dockerfile</h2><p>用来构建 docker 镜像的文件</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile 示例，</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载两个卷</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;volume01&quot;</span>, <span class="string">&quot;volume02&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dockerfile 中只能有一条 CMD 指令，如果要执行多个 cmd 可以用 &amp;&amp; 链接</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;-----end-----&quot;</span> &amp;&amp; /bin/bash</span></span><br></pre></td></tr></table></figure>

<p>创建镜像文件并启动容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -f file-path          # 指定 Dockerfile 路径</span></span><br><span class="line"><span class="comment"># -t name:tag           # 为镜像取名，打 tag</span></span><br><span class="line">docker build [OPTIONS] PATH | URL | -</span><br><span class="line"><span class="comment"># sample: docker build -t mycentos .</span></span><br><span class="line"></span><br><span class="line">docker images           <span class="comment"># 查看新建 image 是否成功</span></span><br><span class="line"><span class="comment"># REPOSITORY       TAG                IMAGE ID       CREATED         SIZE</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># mycentos         0.1                1fa2eebe33e7   3 days ago      282MB</span></span><br><span class="line"><span class="comment"># docker images 查看自建的镜像</span></span><br><span class="line"></span><br><span class="line">docker run -it --name myos mycentos     <span class="comment"># 启动测试</span></span><br><span class="line"><span class="comment"># ----- end file -------                # 自定义 log 输出成功</span></span><br><span class="line"><span class="comment"># [root@ab726584ad36 /]# ls -al         # 两个新文件夹 volume1, volume2 创建成功</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># drwxr-xr-x   2 root root 4096 Apr 27 06:34 volume01</span></span><br><span class="line"><span class="comment"># drwxr-xr-x   2 root root 4096 Apr 27 06:34 volume02</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> volume1 &amp;&amp; ehco <span class="string">&quot;test&quot;</span> &gt;&gt; new_file.txt       <span class="comment"># 在 volume1 文件夹下创建一个测试文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 volume1 中新建文件 echo &quot;new&quot; &gt;&gt; new_file.txt</span></span><br><span class="line">docker inspect myos</span><br><span class="line"><span class="comment"># &quot;Mounts&quot;: [</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#         &quot;Type&quot;: &quot;volume&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Name&quot;: &quot;f8d5471d593bd05dc18d5ce04a09353f805113408b15b3557dafb71b84bdd73b&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Source&quot;: &quot;/var/lib/docker/volumes/f8d5471d593bd05dc18d5ce04a09353f805113408b15b3557dafb71b84bdd73b/_data&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Destination&quot;: &quot;volume02&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Driver&quot;: &quot;local&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Mode&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;RW&quot;: true,</span></span><br><span class="line"><span class="comment">#         &quot;Propagation&quot;: &quot;&quot;</span></span><br><span class="line"><span class="comment">#     &#125;,</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#         &quot;Type&quot;: &quot;volume&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Name&quot;: &quot;a4940f45b4573330e4db3964ad7534543404fc37eaacce797eff664744240337&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Source&quot;: &quot;/var/lib/docker/volumes/a4940f45b4573330e4db3964ad7534543404fc37eaacce797eff664744240337/_data&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Destination&quot;: &quot;volume01&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Driver&quot;: &quot;local&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Mode&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;RW&quot;: true,</span></span><br><span class="line"><span class="comment">#         &quot;Propagation&quot;: &quot;&quot;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/volumes/a4940f45b4573330e4db3964ad7534543404fc37eaacce797eff664744240337/_data &amp;&amp; ls     <span class="comment"># 查看挂载目录下的文件列表</span></span><br><span class="line"><span class="comment"># new_file.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面这个查看挂载文件的操作只能在 Linux 系统上做， Windows 和 MacOS 系统上的 docker 都是通过虚拟机启动的，虽然能看到类似的信息，但是本机上是不能访问挂载文件夹的</span></span><br></pre></td></tr></table></figure>

<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image.</p>
<p>构建镜像的步骤：</p>
<ol>
<li>创建 Dockerfile 文件</li>
<li>docker build 构建镜像</li>
<li>docker run 运行镜像</li>
<li>docker push 发布镜像</li>
</ol>
<p>文件格式注：</p>
<ul>
<li>每个保留关键字都必须是大写的字母</li>
<li>执行顺序从上倒下</li>
<li><code>#</code> 表示注释</li>
<li>每个指令都会创建提交一个新的镜像层，并提交</li>
</ul>
<p>常用指令：</p>
<p>参考<a href="https://docs.docker.com/engine/reference/builder/">官方文档</a></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span>            <span class="comment"># 基础镜像，起点</span></span><br><span class="line"><span class="keyword">MAINTAINER</span>      <span class="comment"># 作者</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">             <span class="comment"># 镜像构建的时候需要运行的命令</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash">             <span class="comment"># 步骤，比如添加tomcat 压缩包</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash">         <span class="comment"># 镜像工作目录</span></span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash">          <span class="comment"># 挂载目录</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span>          <span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash">             <span class="comment"># 指定容器启动的时候运行的命令，只有最后一个会生效，可被替代</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash">      <span class="comment"># 指定容器启动时运行的命令，可以追加命令</span></span></span><br><span class="line"><span class="keyword">ONBUILD</span>         <span class="comment"># 当构建一个被继承的 Dockerfile 就会运行 ONBUILD指令，触发指令</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash">            <span class="comment"># 类似 ADD， 将文件拷贝到镜像中</span></span></span><br><span class="line"><span class="keyword">ENV</span>             <span class="comment"># 设置环境变量</span></span><br></pre></td></tr></table></figure>

<p>实践案例：构建自己的 centos</p>
<p>编写 dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> jzheng&lt;jzheng@my.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CMD echo $MYPATH &amp;&amp; echo &quot;---- end ----&quot; &amp;&amp; /bin/bash 会出问题</span></span><br><span class="line"><span class="comment"># docker run -it --name my01 myos</span></span><br><span class="line"><span class="comment"># /usr/local</span></span><br><span class="line"><span class="comment"># ----end----</span></span><br><span class="line"><span class="comment"># /bin/sh: CMD: command not found</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>

<p>运行构建命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f Dockerfile -t mycentos .            <span class="comment"># 开始构建，mac 和 linux 上给的 log 有差别</span></span><br><span class="line"><span class="comment"># Sending build context to Docker daemon 2.048 kB</span></span><br><span class="line"><span class="comment"># Step 1/8 : FROM centos                            # 每一个 step 都会生产一个新的镜像文件</span></span><br><span class="line"><span class="comment">#  ---&gt; 300e315adb2f</span></span><br><span class="line"><span class="comment"># Step 2/8 : MAINTAINER jzheng&lt;jzheng@my.com&gt;</span></span><br><span class="line"><span class="comment">#  ---&gt; Running in e71638786ebe</span></span><br><span class="line"><span class="comment">#  ---&gt; 6dda844c25cb</span></span><br><span class="line"><span class="comment"># Removing intermediate container e71638786ebe</span></span><br><span class="line"><span class="comment"># Step 3/8 : ENV MYPATH /usr/local</span></span><br><span class="line"><span class="comment">#  ---&gt; Running in ad27737ada75</span></span><br><span class="line"><span class="comment">#  ---&gt; 9a617502fc06</span></span><br><span class="line"><span class="comment"># Removing intermediate container ad27737ada75</span></span><br><span class="line"><span class="comment"># Step 4/8 : WORKDIR $MYPATH</span></span><br><span class="line"><span class="comment">#  ---&gt; 79d1c3e4be51</span></span><br><span class="line"><span class="comment"># Removing intermediate container ea4189b4b4eb</span></span><br><span class="line"><span class="comment"># Step 5/8 : RUN yum -y install vim</span></span><br><span class="line"><span class="comment">#  ---&gt; Running in 27be499e2b36</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS Linux 8 - AppStream                      9.7 MB/s | 6.3 MB     00:00</span></span><br><span class="line"><span class="comment"># CentOS Linux 8 - BaseOS                         2.8 MB/s | 2.3 MB     00:00</span></span><br><span class="line"><span class="comment"># CentOS Linux 8 - Extras                          13 kB/s | 9.6 kB     00:00</span></span><br><span class="line"><span class="comment"># Dependencies resolved.</span></span><br><span class="line"><span class="comment"># ================================================================================</span></span><br><span class="line"><span class="comment">#  Package             Arch        Version                   Repository      Size</span></span><br><span class="line"><span class="comment"># ================================================================================</span></span><br><span class="line"><span class="comment"># Installing:</span></span><br><span class="line"><span class="comment">#  vim-enhanced        x86_64      2:8.0.1763-15.el8         appstream      1.4 M</span></span><br><span class="line"><span class="comment"># Installing dependencies:</span></span><br><span class="line"><span class="comment">#  gpm-libs            x86_64      1.20.7-15.el8             appstream       39 k</span></span><br><span class="line"><span class="comment">#  vim-common          x86_64      2:8.0.1763-15.el8         appstream      6.3 M</span></span><br><span class="line"><span class="comment">#  vim-filesystem      noarch      2:8.0.1763-15.el8         appstream       48 k</span></span><br><span class="line"><span class="comment">#  which               x86_64      2.21-12.el8               baseos          49 k</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Transaction Summary</span></span><br><span class="line"><span class="comment"># ================================================================================</span></span><br><span class="line"><span class="comment"># Install  5 Packages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Total download size: 7.8 M</span></span><br><span class="line"><span class="comment"># Installed size: 30 M</span></span><br><span class="line"><span class="comment"># Downloading Packages:</span></span><br><span class="line"><span class="comment"># (1/5): gpm-libs-1.20.7-15.el8.x86_64.rpm        860 kB/s |  39 kB     00:00</span></span><br><span class="line"><span class="comment"># (2/5): vim-filesystem-8.0.1763-15.el8.noarch.rp 4.1 MB/s |  48 kB     00:00</span></span><br><span class="line"><span class="comment"># (3/5): vim-enhanced-8.0.1763-15.el8.x86_64.rpm   13 MB/s | 1.4 MB     00:00</span></span><br><span class="line"><span class="comment"># (4/5): vim-common-8.0.1763-15.el8.x86_64.rpm     38 MB/s | 6.3 MB     00:00</span></span><br><span class="line"><span class="comment"># (5/5): which-2.21-12.el8.x86_64.rpm             435 kB/s |  49 kB     00:00</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Total                                           7.7 MB/s | 7.8 MB     00:01</span></span><br><span class="line"><span class="comment"># CentOS Linux 8 - AppStream                      1.6 MB/s | 1.6 kB     00:00</span></span><br><span class="line"><span class="comment"># warning: /var/cache/dnf/appstream-02e86d1c976ab532/packages/gpm-libs-1.20.7-15.el8.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 8483c65d: NOKEY</span></span><br><span class="line"><span class="comment"># Importing GPG key 0x8483C65D:</span></span><br><span class="line"><span class="comment">#  Userid     : &quot;CentOS (CentOS Official Signing Key) &lt;security@centos.org&gt;&quot;</span></span><br><span class="line"><span class="comment">#  Fingerprint: 99DB 70FA E1D7 CE22 7FB6 4882 05B5 55B3 8483 C65D</span></span><br><span class="line"><span class="comment">#  From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span></span><br><span class="line"><span class="comment"># Key imported successfully</span></span><br><span class="line"><span class="comment"># Running transaction check</span></span><br><span class="line"><span class="comment"># Transaction check succeeded.</span></span><br><span class="line"><span class="comment"># Running transaction test</span></span><br><span class="line"><span class="comment"># Transaction test succeeded.</span></span><br><span class="line"><span class="comment"># Running transaction</span></span><br><span class="line"><span class="comment">#   Preparing        :                                                        1/1</span></span><br><span class="line"><span class="comment">#   Installing       : which-2.21-12.el8.x86_64                               1/5</span></span><br><span class="line"><span class="comment">#   Installing       : vim-filesystem-2:8.0.1763-15.el8.noarch                2/5</span></span><br><span class="line"><span class="comment">#   Installing       : vim-common-2:8.0.1763-15.el8.x86_64                    3/5</span></span><br><span class="line"><span class="comment">#   Installing       : gpm-libs-1.20.7-15.el8.x86_64                          4/5</span></span><br><span class="line"><span class="comment">#   Running scriptlet: gpm-libs-1.20.7-15.el8.x86_64                          4/5</span></span><br><span class="line"><span class="comment">#   Installing       : vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5</span></span><br><span class="line"><span class="comment">#   Running scriptlet: vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5</span></span><br><span class="line"><span class="comment">#   Running scriptlet: vim-common-2:8.0.1763-15.el8.x86_64                    5/5</span></span><br><span class="line"><span class="comment">#   Verifying        : gpm-libs-1.20.7-15.el8.x86_64                          1/5</span></span><br><span class="line"><span class="comment">#   Verifying        : vim-common-2:8.0.1763-15.el8.x86_64                    2/5</span></span><br><span class="line"><span class="comment">#   Verifying        : vim-enhanced-2:8.0.1763-15.el8.x86_64                  3/5</span></span><br><span class="line"><span class="comment">#   Verifying        : vim-filesystem-2:8.0.1763-15.el8.noarch                4/5</span></span><br><span class="line"><span class="comment">#   Verifying        : which-2.21-12.el8.x86_64                               5/5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Installed:</span></span><br><span class="line"><span class="comment">#   gpm-libs-1.20.7-15.el8.x86_64         vim-common-2:8.0.1763-15.el8.x86_64</span></span><br><span class="line"><span class="comment">#   vim-enhanced-2:8.0.1763-15.el8.x86_64 vim-filesystem-2:8.0.1763-15.el8.noarch</span></span><br><span class="line"><span class="comment">#   which-2.21-12.el8.x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Complete!</span></span><br><span class="line"><span class="comment">#  ---&gt; 07a9459e3208</span></span><br><span class="line"><span class="comment"># Removing intermediate container 27be499e2b36</span></span><br><span class="line"><span class="comment"># Step 6/8 : RUN yum -y install net-tools</span></span><br><span class="line"><span class="comment">#  ---&gt; Running in 9dd0c1e98a2f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Last metadata expiration check: 0:00:07 ago on Tue Apr 27 08:30:37 2021.</span></span><br><span class="line"><span class="comment"># Dependencies resolved.</span></span><br><span class="line"><span class="comment"># ================================================================================</span></span><br><span class="line"><span class="comment">#  Package         Architecture Version                        Repository    Size</span></span><br><span class="line"><span class="comment"># ================================================================================</span></span><br><span class="line"><span class="comment"># Installing:</span></span><br><span class="line"><span class="comment">#  net-tools       x86_64       2.0-0.52.20160912git.el8       baseos       322 k</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Transaction Summary</span></span><br><span class="line"><span class="comment"># ================================================================================</span></span><br><span class="line"><span class="comment"># Install  1 Package</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Total download size: 322 k</span></span><br><span class="line"><span class="comment"># Installed size: 942 k</span></span><br><span class="line"><span class="comment"># Downloading Packages:</span></span><br><span class="line"><span class="comment"># net-tools-2.0-0.52.20160912git.el8.x86_64.rpm   1.6 MB/s | 322 kB     00:00</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Total                                           519 kB/s | 322 kB     00:00</span></span><br><span class="line"><span class="comment"># Running transaction check</span></span><br><span class="line"><span class="comment"># Transaction check succeeded.</span></span><br><span class="line"><span class="comment"># Running transaction test</span></span><br><span class="line"><span class="comment"># Transaction test succeeded.</span></span><br><span class="line"><span class="comment"># Running transaction</span></span><br><span class="line"><span class="comment">#   Preparing        :                                                        1/1</span></span><br><span class="line"><span class="comment">#   Installing       : net-tools-2.0-0.52.20160912git.el8.x86_64              1/1</span></span><br><span class="line"><span class="comment">#   Running scriptlet: net-tools-2.0-0.52.20160912git.el8.x86_64              1/1</span></span><br><span class="line"><span class="comment">#   Verifying        : net-tools-2.0-0.52.20160912git.el8.x86_64              1/1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Installed:</span></span><br><span class="line"><span class="comment">#   net-tools-2.0-0.52.20160912git.el8.x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Complete!</span></span><br><span class="line"><span class="comment">#  ---&gt; d4af6e7280be</span></span><br><span class="line"><span class="comment"># Removing intermediate container 9dd0c1e98a2f</span></span><br><span class="line"><span class="comment"># Step 7/8 : EXPOSE 80</span></span><br><span class="line"><span class="comment">#  ---&gt; Running in 8258f5335635</span></span><br><span class="line"><span class="comment">#  ---&gt; 612fbdec4589</span></span><br><span class="line"><span class="comment"># Removing intermediate container 8258f5335635</span></span><br><span class="line"><span class="comment"># Step 8/8 : CMD /bin/bash</span></span><br><span class="line"><span class="comment">#  ---&gt; Running in 1e7dc8bd18cb</span></span><br><span class="line"><span class="comment">#  ---&gt; 8ce94727fa9f</span></span><br><span class="line"><span class="comment"># Removing intermediate container 1e7dc8bd18cb</span></span><br><span class="line"><span class="comment"># Successfully built 8ce94727fa9f</span></span><br><span class="line"></span><br><span class="line">docker run -it --rm myos</span><br><span class="line"><span class="comment"># [root@af8b74546536 local]# pwd</span></span><br><span class="line"><span class="comment"># /usr/local                                # 起始目录已经和设定的一样发生了变化, 输入 ifconfig 和 vim 也能正常运行</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">history</span> myos                         <span class="comment"># 查看 image 构建历史, 可以查看热门 image 学习构建过程</span></span><br><span class="line"><span class="comment"># IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span></span><br><span class="line"><span class="comment"># 8ce94727fa9f        4 minutes ago       /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;/b...   0 B</span></span><br><span class="line"><span class="comment"># 612fbdec4589        4 minutes ago       /bin/sh -c #(nop)  EXPOSE 80/tcp                0 B</span></span><br><span class="line"><span class="comment"># d4af6e7280be        4 minutes ago       /bin/sh -c yum -y install net-tools             23.3 MB</span></span><br><span class="line"><span class="comment"># 07a9459e3208        4 minutes ago       /bin/sh -c yum -y install vim                   58 MB</span></span><br><span class="line"><span class="comment"># 79d1c3e4be51        4 minutes ago       /bin/sh -c #(nop) WORKDIR /usr/local            0 B</span></span><br><span class="line"><span class="comment"># 9a617502fc06        4 minutes ago       /bin/sh -c #(nop)  ENV MYPATH=/usr/local        0 B</span></span><br><span class="line"><span class="comment"># 6dda844c25cb        4 minutes ago       /bin/sh -c #(nop)  MAINTAINER jzheng&lt;jzhen...   0 B</span></span><br><span class="line"><span class="comment"># 300e315adb2f        4 months ago        /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0 B</span></span><br><span class="line"><span class="comment"># &lt;missing&gt;           4 months ago        /bin/sh -c #(nop)  LABEL org.label-schema....   0 B</span></span><br><span class="line"><span class="comment"># &lt;missing&gt;           4 months ago        /bin/sh -c #(nop) ADD file:bd7a2aed6ede423...   209 MB</span></span><br></pre></td></tr></table></figure>

<h2 id="CMD-Vs-ENTRYPOINT"><a href="#CMD-Vs-ENTRYPOINT" class="headerlink" title="CMD Vs ENTRYPOINT"></a>CMD Vs ENTRYPOINT</h2><p>CMD 只有最后一个命令会生效 由下面的 file 构建的 image, run 时只会输出 2</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;2&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>创建 Dockerfile 测试 CMD 命令</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-a&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>测试：构建镜像, 运行容器查看输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t cmdtest .</span><br><span class="line"><span class="comment"># Sending build context to Docker daemon 2.048 kB</span></span><br><span class="line"><span class="comment"># Step 1/2 : FROM centos</span></span><br><span class="line"><span class="comment">#  ---&gt; 300e315adb2f</span></span><br><span class="line"><span class="comment"># Step 2/2 : CMD ls -al</span></span><br><span class="line"><span class="comment">#  ---&gt; Running in e8e0790ae8f3</span></span><br><span class="line"><span class="comment">#  ---&gt; 513ebac8ebef</span></span><br><span class="line"><span class="comment"># Removing intermediate container e8e0790ae8f3</span></span><br><span class="line"><span class="comment"># Successfully built 513ebac8ebef</span></span><br><span class="line"></span><br><span class="line">docker run cmdtest</span><br><span class="line"><span class="comment"># .</span></span><br><span class="line"><span class="comment"># ..</span></span><br><span class="line"><span class="comment"># .dockerenv</span></span><br><span class="line"><span class="comment"># bin</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># sys</span></span><br><span class="line"><span class="comment"># tmp</span></span><br><span class="line"><span class="comment"># usr</span></span><br><span class="line"><span class="comment"># var</span></span><br><span class="line"></span><br><span class="line">docker run cmdtest -l               <span class="comment"># 如果想要追加 `l` 给出 `ls -al` 的效果怎么办？直接在 run 后接参数会报错</span></span><br><span class="line"><span class="comment"># container_linux.go:235: starting container process caused &quot;exec: \&quot;-l\&quot;: executable file not found in $PATH&quot;</span></span><br><span class="line"><span class="comment"># /usr/bin/docker-current: Error response from daemon: oci runtime error: container_linux.go:235: starting container process caused &quot;exec: \&quot;-l\&quot;: executable file not found in $PATH&quot;.</span></span><br><span class="line"></span><br><span class="line">docker run cmdtest ls -al         <span class="comment"># 输入完整命令可以达到想要的效果，就是有点冗余</span></span><br><span class="line"><span class="comment"># total 56</span></span><br><span class="line"><span class="comment"># drwxr-xr-x  1 root root 4096 Apr 27 08:49 .</span></span><br><span class="line"><span class="comment"># drwxr-xr-x  1 root root 4096 Apr 27 08:49 ..</span></span><br><span class="line"><span class="comment"># -rwxr-xr-x  1 root root    0 Apr 27 08:49 .dockerenv</span></span><br><span class="line"><span class="comment"># lrwxrwxrwx  1 root root    7 Nov  3 15:22 bin -&gt; usr/bin</span></span><br><span class="line"><span class="comment"># drwxr-xr-x  5 root root  340 Apr 27 08:49 dev</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>如果想要直接接命令参数，可以用 ENTRYPOINT</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-a&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f mydockerfile -t entrypointtest .        <span class="comment"># 构建镜像</span></span><br><span class="line"></span><br><span class="line">docker run entrypointtest -l                            <span class="comment"># 启动容器时直接加参数即可</span></span><br><span class="line"><span class="comment"># total 56</span></span><br><span class="line"><span class="comment"># drwxr-xr-x  1 root root 4096 Apr 27 08:53 .</span></span><br><span class="line"><span class="comment"># drwxr-xr-x  1 root root 4096 Apr 27 08:53 ..</span></span><br><span class="line"><span class="comment"># -rwxr-xr-x  1 root root    0 Apr 27 08:53 .dockerenv</span></span><br><span class="line"><span class="comment"># lrwxrwxrwx  1 root root    7 Nov  3 15:22 bin -&gt; usr/bin</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<h2 id="实战：-制作-Tomcat-镜像"><a href="#实战：-制作-Tomcat-镜像" class="headerlink" title="实战： 制作 Tomcat 镜像"></a>实战： 制作 Tomcat 镜像</h2><p>PS: 做这个练习前可以先本地安装 tomcat + JDK 找找感觉</p>
<ol>
<li>准备镜像文件 + tomcat压缩包 + JDK压缩包</li>
<li>编写 Dockerfile 文件</li>
</ol>
<p>Google 搜索名字可直接下载压缩包 <code>jdk-8u202-linux-x64.tar.gz</code> + <code>apache-tomcat-9.0.22.tar.gz</code></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;jzheng@aa.com&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> readme.txt /usr/<span class="built_in">local</span>/readme.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u202-linux-x64.tar.gz /usr/<span class="built_in">local</span>/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> apache-tomcat-9.0.22.tar.gz /usr/<span class="built_in">local</span>/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/jdk1.<span class="number">8.0</span>_11</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="keyword">ENV</span> CATALINA_HOME /usr/local/apache-tomcat-<span class="number">9.0</span>.<span class="number">22</span></span><br><span class="line"><span class="keyword">ENV</span> CATALINA_BASH /usr/local/apache-tomcat-<span class="number">9.0</span>.<span class="number">22</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /usr/<span class="built_in">local</span>/apache-tomcat-9.0.22/bin/startup.sh &amp;&amp; tail -F /usr/<span class="built_in">local</span>/apache-tomcat-9.0.22/bin/logs/catalina.out</span></span><br></pre></td></tr></table></figure>

<p>构建镜像 <code>docker build -t diytomcat .</code>, 由于使用官方标准的名字 Dockerfile 就不需要用 -f 参数了, 构建 log 如下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[+] Building 119.9s (11/11) FINISHED                                                                                                             </span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                                                                                        0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 677B                                                                                                        0.0s</span><br><span class="line"> =&gt; [internal] load .dockerignore                                                                                                           0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 2B                                                                                                             0.0s</span><br><span class="line"> =&gt; [internal] load metadata for docker.io/library/centos:latest                                                                            0.0s</span><br><span class="line"> =&gt; [internal] load build context                                                                                                           3.6s</span><br><span class="line"> =&gt; =&gt; transferring context: 205.02MB                                                                                                       3.6s</span><br><span class="line"> =&gt; CACHED [1/6] FROM docker.io/library/centos                                                                                              0.0s</span><br><span class="line"> =&gt; [2/6] COPY readme.txt /usr/local/readme.txt                                                                                             0.3s</span><br><span class="line"> =&gt; [3/6] ADD jdk-8u202-linux-x64.tar.gz /usr/local/                                                                                        4.8s</span><br><span class="line"> =&gt; [4/6] ADD apache-tomcat-9.0.22.tar.gz /usr/local/                                                                                       0.4s</span><br><span class="line"> =&gt; [5/6] RUN yum -y install vim                                                                                                          109.1s</span><br><span class="line"> =&gt; [6/6] WORKDIR /usr/local                                                                                                                0.0s</span><br><span class="line"> =&gt; exporting to image                                                                                                                      1.7s</span><br><span class="line"> =&gt; =&gt; exporting layers                                                                                                                     1.7s</span><br><span class="line"> =&gt; =&gt; writing image sha256:4be1d03815380be7ca336c90e33b928890b5c604d646646b6087303385b0c8c0                                                0.0s </span><br><span class="line"> =&gt; =&gt; naming to docker.io/library/diytomcat                                                                                                0.0s </span><br></pre></td></tr></table></figure>

<p>启动镜像，并为之挂载节点 <code>docker run -d -p 9090:8080 --name mytomcat -v /Users/jack/tmp/tmount/test:/usr/local/apache-tomcat-9.0.22/webapps/test -v /Users/jack/tmp/tmount/tomcatlogs:/usr/local/apache-tomcat-9.0.22/logs diytomcat</code></p>
<p>查看本地 logs 文件，报错</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&gt; cat catalina.out </span><br><span class="line">/usr/local/apache-tomcat-9.0.22/bin/catalina.sh: line 464: /usr/local/jdk1.8.0_11/bin/java: No such file or directory</span><br></pre></td></tr></table></figure>

<p>检查后发现我下载的是 <code>jdk-8u202-linux-x64</code> 和视频上的不一样，很多地方变量都错了，改了重新 build 一下</p>
<p>突发奇想：虽然配置错了，但是我其实是可以直接进到终端重新配置使 Java 生效的，但是回头整个 follow 过了一下，发现还是不行，无法暴露端口。。。</p>
<p>再次查看 logs 日志，并访问 localhost:9090 tomcat 启动成功 (●°u°●)​ 」</p>
<p>在本地 test 目录下创建测试用页面</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── WEB-INF</span><br><span class="line">│   └── web.xml</span><br><span class="line">└── index.jsp</span><br><span class="line"></span><br><span class="line">// index.jsp 内容如下</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;title&gt;hello, docker&lt;/title&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line"> &lt;%System.out.println(&quot;-------my test web logs--------&quot;);%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">// web.xml 内容如下</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app version=&quot;2.4&quot; </span><br><span class="line">    xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot; </span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee </span><br><span class="line">        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>

<p>直接访问 localhost:9090/test 可以看到新写的页面显示成功, logs 下的 catalina.out 会输出 jsp 里的打印信息</p>
<h2 id="docker0-网络详解"><a href="#docker0-网络详解" class="headerlink" title="docker0 网络详解"></a>docker0 网络详解</h2><p>这部分实验需要在 Linux 环境下测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr         <span class="comment"># 终端测试命令</span></span><br><span class="line"><span class="comment"># 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000               # 本机回环地址</span></span><br><span class="line"><span class="comment">#     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span></span><br><span class="line"><span class="comment">#     inet 127.0.0.1/8 scope host lo</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"><span class="comment">#     inet6 ::1/128 scope host</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"><span class="comment"># 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000     # 阿里云内网地址</span></span><br><span class="line"><span class="comment">#     link/ether 00:16:3e:23:6b:3f brd ff:ff:ff:ff:ff:ff</span></span><br><span class="line"><span class="comment">#     inet 172.28.231.212/20 brd 172.28.239.255 scope global dynamic eth0</span></span><br><span class="line"><span class="comment">#        valid_lft 315353600sec preferred_lft 315353600sec</span></span><br><span class="line"><span class="comment">#     inet6 fe80::216:3eff:fe23:6b3f/64 scope link</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"><span class="comment"># 3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default           # docker0地址</span></span><br><span class="line"><span class="comment">#     link/ether 02:42:79:29:30:37 brd ff:ff:ff:ff:ff:ff</span></span><br><span class="line"><span class="comment">#     inet 172.17.0.1/16 scope global docker0</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"><span class="comment">#     inet6 fe80::42:79ff:fe29:3037/64 scope link</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"></span><br><span class="line">docker run -d -P --name tomcat01 tomcat                     <span class="comment"># 启动测试容器</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat01 ip addr                            <span class="comment"># 进入容器查看本机地址，可以看到网卡名 eth0@if55，地址 172.17.0.2/16</span></span><br><span class="line"><span class="comment"># 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span></span><br><span class="line"><span class="comment">#     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span></span><br><span class="line"><span class="comment">#     inet 127.0.0.1/8 scope host lo</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"><span class="comment">#     inet6 ::1/128 scope host</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"><span class="comment"># 54: eth0@if55: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span></span><br><span class="line"><span class="comment">#     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span></span><br><span class="line"><span class="comment">#     inet 172.17.0.2/16 scope global eth0</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"><span class="comment">#     inet6 fe80::42:acff:fe11:2/64 scope link</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"></span><br><span class="line">ping 172.17.0.2     <span class="comment"># 回到宿主机，ping 容器，可以 ping 通, mac 不能 ping 通，应该是 OS 差异导致的</span></span><br><span class="line"><span class="comment"># PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span></span><br><span class="line"><span class="comment"># 64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.038 ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [原理] 我们每启动一个 docker 容器，docker 就会给 docker 容器分配一个 ip，只要安装了 docker 就会有一个 docker0，采用桥接模式，使用 veth-pair 技术。</span></span><br><span class="line"></span><br><span class="line">ip addr             <span class="comment"># 再次查看 ip 地址，可以看到有一个新的网卡 veth9a205ef@if54 生成了</span></span><br><span class="line"><span class="comment"># 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span></span><br><span class="line"><span class="comment">#     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span></span><br><span class="line"><span class="comment">#     inet 127.0.0.1/8 scope host lo</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"><span class="comment">#     inet6 ::1/128 scope host</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"><span class="comment"># 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span></span><br><span class="line"><span class="comment">#     link/ether 00:16:3e:23:6b:3f brd ff:ff:ff:ff:ff:ff</span></span><br><span class="line"><span class="comment">#     inet 172.28.231.212/20 brd 172.28.239.255 scope global dynamic eth0</span></span><br><span class="line"><span class="comment">#        valid_lft 315353315sec preferred_lft 315353315sec</span></span><br><span class="line"><span class="comment">#     inet6 fe80::216:3eff:fe23:6b3f/64 scope link</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"><span class="comment"># 3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span></span><br><span class="line"><span class="comment">#     link/ether 02:42:79:29:30:37 brd ff:ff:ff:ff:ff:ff</span></span><br><span class="line"><span class="comment">#     inet 172.17.0.1/16 scope global docker0</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"><span class="comment">#     inet6 fe80::42:79ff:fe29:3037/64 scope link</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"><span class="comment"># 55: veth9a205ef@if54: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span></span><br><span class="line"><span class="comment">#     link/ether e2:a0:b1:2d:41:18 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span></span><br><span class="line"><span class="comment">#     inet6 fe80::e0a0:b1ff:fe2d:4118/64 scope link</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"></span><br><span class="line">docker run -P -d --name tomcat02 tomcat         <span class="comment"># 启动新的容器，观察网卡信息</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat ip addr</span><br><span class="line"><span class="comment"># 56: eth0@if57: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span></span><br><span class="line"><span class="comment">#     link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span></span><br><span class="line"><span class="comment">#     inet 172.17.0.3/16 scope global eth0</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"><span class="comment">#     inet6 fe80::42:acff:fe11:3/64 scope link</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"></span><br><span class="line">ip addr                                         <span class="comment"># 宿主机和容器新增网卡对应关系 veth5b8ed66@if56 - eth0@if57</span></span><br><span class="line"><span class="comment"># 57: veth5b8ed66@if56: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span></span><br><span class="line"><span class="comment">#     link/ether ae:21:12:09:51:01 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span></span><br><span class="line"><span class="comment">#     inet6 fe80::ac21:12ff:fe09:5101/64 scope link</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat02 ping 172.17.02        <span class="comment"># 在 tomcat02 中尝试 ping tomcat01, 可以 ping 通</span></span><br><span class="line"><span class="comment"># PING 172.17.02 (172.17.0.2) 56(84) bytes of data.</span></span><br><span class="line"><span class="comment"># 64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.066 ms</span></span><br><span class="line"></span><br><span class="line">docker rm -f tomcat01                           <span class="comment"># 删除测试容器</span></span><br><span class="line"></span><br><span class="line">ip addr                                         <span class="comment"># 对应的虚拟网卡也被删除</span></span><br></pre></td></tr></table></figure>

<p>新建容器生产的网卡都是成对出现的，这里采用 veth-pair 技术，一端连着协议，一端彼此相连</p>
<p>veth-pair 充当一个桥梁，链接各种虚拟网络设备</p>
<p>docker0 相当于一个虚拟路由器, 通信模型如下</p>
<p><img src="docker_network.png" alt="docker network"></p>
<p>tomcat01 和 tomcat02 都是公用一个路由(docker0), 所有容器不指定网络的情况下，都使用 docker0 作为路由，docker 会给容器分配默认的可用 ip</p>
<p>255.255.0.1/16: 16 表示前 16 位为同一个网络</p>
<p><img src="docker_network01.png" alt="docker network02"></p>
<p>Docker 中所有的网络接口都是虚拟的，虚拟的转发效率高</p>
<h2 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h2><blockquote>
<p>思考：我们编写一个微服务， database url=ip…，项目不重启，数据库 ip 换掉了，配置就失效了。我们是否可以通过指定名字进行访问</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it tomcat01 ping tomcat02                          <span class="comment"># 默认通过 name 是不能 ping 通的</span></span><br><span class="line"><span class="comment"># ping: tomcat02: Name or service not known</span></span><br><span class="line"></span><br><span class="line">docker run -d -P --name tomcat03 --link tomcat02 tomcat         <span class="comment"># 启动容器时加入 --link 参数即可实现上述效果</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat03 ping tomcat02                </span><br><span class="line"><span class="comment"># PING tomcat02 (172.17.0.3) 56(84) bytes of data.</span></span><br><span class="line"><span class="comment"># 64 bytes from tomcat02 (172.17.0.3): icmp_seq=1 ttl=64 time=0.077 ms</span></span><br><span class="line"><span class="comment"># 64 bytes from tomcat02 (172.17.0.3): icmp_seq=2 ttl=64 time=0.050 ms</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat02 ping tomcat03                          <span class="comment"># 但是反向是 ping 不通的！！?</span></span><br><span class="line"><span class="comment"># ping: tomcat03: Name or service not known</span></span><br><span class="line"></span><br><span class="line">docker network ls                                               <span class="comment"># 使用 docker network ls 查看当前网络配置</span></span><br><span class="line"><span class="comment"># NETWORK ID          NAME                DRIVER              SCOPE</span></span><br><span class="line"><span class="comment"># ceb0592c9055        bridge              bridge              local</span></span><br><span class="line"><span class="comment"># 5ac97b2cf390        host                host                local</span></span><br><span class="line"><span class="comment"># 03f71a7f47f1        none                null                local</span></span><br><span class="line"></span><br><span class="line">docker inspect bridge                                           <span class="comment"># bridge 即 docker0 的网卡，包含 tomcat01-03 的网络信息</span></span><br><span class="line"><span class="comment"># [</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#         &quot;Name&quot;: &quot;bridge&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Id&quot;: &quot;ceb0592c9055bd94767114d43e3677b18fd8a41a2afe6966d64551b71a09041c&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Created&quot;: &quot;2021-04-27T15:19:48.803023317+08:00&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Scope&quot;: &quot;local&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Driver&quot;: &quot;bridge&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;EnableIPv6&quot;: false,</span></span><br><span class="line"><span class="comment">#         &quot;IPAM&quot;: &#123;</span></span><br><span class="line"><span class="comment">#             &quot;Driver&quot;: &quot;default&quot;,</span></span><br><span class="line"><span class="comment">#             &quot;Options&quot;: null,</span></span><br><span class="line"><span class="comment">#             &quot;Config&quot;: [</span></span><br><span class="line"><span class="comment">#                 &#123;</span></span><br><span class="line"><span class="comment">#                     &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;,  # 子网掩码，最多可配 256*256 个子节点</span></span><br><span class="line"><span class="comment">#                     &quot;Gateway&quot;: &quot;172.17.0.1&quot;     # 默认网关，docker0</span></span><br><span class="line"><span class="comment">#                 &#125;</span></span><br><span class="line"><span class="comment">#             ]</span></span><br><span class="line"><span class="comment">#         &#125;,</span></span><br><span class="line"><span class="comment">#         &quot;Internal&quot;: false,</span></span><br><span class="line"><span class="comment">#         &quot;Attachable&quot;: false,</span></span><br><span class="line"><span class="comment">#         &quot;Containers&quot;: &#123;</span></span><br><span class="line"><span class="comment">#             &quot;2d12d505984e201296ecf26c6705405dc0fd67fd2f837f2a9c0deadbe690eb06&quot;: &#123;</span></span><br><span class="line"><span class="comment">#                 &quot;Name&quot;: &quot;tomcat02&quot;,</span></span><br><span class="line"><span class="comment">#                 &quot;EndpointID&quot;: &quot;4a71a36b8e3c04febdc0bdc0c86a3d5fdbf2b39daec75dcef3873acf5d017c37&quot;,</span></span><br><span class="line"><span class="comment">#                 &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,</span></span><br><span class="line"><span class="comment">#                 &quot;IPv4Address&quot;: &quot;172.17.0.3/16&quot;,</span></span><br><span class="line"><span class="comment">#                 &quot;IPv6Address&quot;: &quot;&quot;</span></span><br><span class="line"><span class="comment">#             &#125;,</span></span><br><span class="line"><span class="comment">#             &quot;4adfd9b9e4a50876d65a1786ea188e7d0b4b0c0099747b3f3bb1e460be5f0849&quot;: &#123;</span></span><br><span class="line"><span class="comment">#                 &quot;Name&quot;: &quot;tomcat03&quot;,</span></span><br><span class="line"><span class="comment">#                 &quot;EndpointID&quot;: &quot;debaf9ed00b14992dc700a1d30ada54be9f12206139483d490d87e7ac055da0f&quot;,</span></span><br><span class="line"><span class="comment">#                 &quot;MacAddress&quot;: &quot;02:42:ac:11:00:04&quot;,</span></span><br><span class="line"><span class="comment">#                 &quot;IPv4Address&quot;: &quot;172.17.0.4/16&quot;,</span></span><br><span class="line"><span class="comment">#                 &quot;IPv6Address&quot;: &quot;&quot;</span></span><br><span class="line"><span class="comment">#             &#125;,</span></span><br><span class="line"><span class="comment">#             &quot;c1d873b0967c6c41929099f2898a0478eb91538b5d889c4d38ea74f29a3f4433&quot;: &#123;</span></span><br><span class="line"><span class="comment">#                 &quot;Name&quot;: &quot;tomcat01&quot;,</span></span><br><span class="line"><span class="comment">#                 &quot;EndpointID&quot;: &quot;28e9076a4c9b56044588ca3993a6d481e08989a78ebe82c7b6632b17d437f79c&quot;,</span></span><br><span class="line"><span class="comment">#                 &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span></span><br><span class="line"><span class="comment">#                 &quot;IPv4Address&quot;: &quot;172.17.0.2/16&quot;,</span></span><br><span class="line"><span class="comment">#                 &quot;IPv6Address&quot;: &quot;&quot;</span></span><br><span class="line"><span class="comment">#             &#125;</span></span><br><span class="line"><span class="comment">#         &#125;,</span></span><br><span class="line"><span class="comment">#         &quot;Options&quot;: &#123;</span></span><br><span class="line"><span class="comment">#             &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,</span></span><br><span class="line"><span class="comment">#             &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,</span></span><br><span class="line"><span class="comment">#             &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,</span></span><br><span class="line"><span class="comment">#             &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,</span></span><br><span class="line"><span class="comment">#             &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,</span></span><br><span class="line"><span class="comment">#             &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;</span></span><br><span class="line"><span class="comment">#         &#125;,</span></span><br><span class="line"><span class="comment">#         &quot;Labels&quot;: &#123;&#125;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line"></span><br><span class="line">docker inspect tomcat03                     <span class="comment"># 查看 link 配置</span></span><br><span class="line"><span class="comment"># &quot;Links&quot;: [</span></span><br><span class="line"><span class="comment">#     &quot;/tomcat02:/tomcat03/tomcat02&quot;</span></span><br><span class="line"><span class="comment"># ],</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat03 cat /etc/hosts     <span class="comment"># 查看 tomcat03 的 host 配置, --link 会修改容器 hosts 配置达到绑定 ip 的效果</span></span><br><span class="line"><span class="comment"># 127.0.0.1    localhost</span></span><br><span class="line"><span class="comment"># ::1    localhost ip6-localhost ip6-loopback</span></span><br><span class="line"><span class="comment"># fe00::0    ip6-localnet</span></span><br><span class="line"><span class="comment"># ff00::0    ip6-mcastprefix</span></span><br><span class="line"><span class="comment"># ff02::1    ip6-allnodes</span></span><br><span class="line"><span class="comment"># ff02::2    ip6-allrouters</span></span><br><span class="line"><span class="comment"># 172.17.0.3    tomcat02 2d12d505984e</span></span><br><span class="line"><span class="comment"># 172.17.0.4    4adfd9b9e4a5</span></span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># CONTAINER ID   IMAGE     COMMAND             CREATED             STATUS             PORTS                     NAMES</span></span><br><span class="line"><span class="comment"># 4ccaa4545718   tomcat    &quot;catalina.sh run&quot;   15 minutes ago      Up 15 minutes      0.0.0.0:55004-&gt;8080/tcp   tomcat03</span></span><br><span class="line"><span class="comment"># c5012b364397   tomcat    &quot;catalina.sh run&quot;   17 minutes ago      Up 17 minutes      0.0.0.0:55003-&gt;8080/tcp   tomcat02</span></span><br><span class="line"><span class="comment"># 3bf7596cfde9   tomcat    &quot;catalina.sh run&quot;   About an hour ago   Up About an hour   0.0.0.0:55002-&gt;8080/tcp   tomcat01</span></span><br></pre></td></tr></table></figure>

<p>本质：–link 就是在 hosts 中增加了一个域名劫持效果，但是现在这种做法已经<strong>不推荐了！！！</strong></p>
<h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><p>通过自定义网络可以达到容器互联的效果</p>
<p>网络模式：</p>
<ul>
<li>brige: 桥接模式 - 默认</li>
<li>none: 不配置</li>
<li>host: 和宿主机共享网络</li>
<li>container: 容器网络连通 - 用的少，局限大</li>
</ul>
<p>我们使用命令 <code>docker run -d -P --name tomcat01 tomcat</code> 创建容器时，会默认带有 <code>--net bridge</code> 的参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --driver bridge 桥接模式</span></span><br><span class="line"><span class="comment"># --subnet 192.168.0.0/16 子网掩码</span></span><br><span class="line"><span class="comment"># --gateway 192.168.0.1 网关</span></span><br><span class="line">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet       <span class="comment"># 创建自定义网络</span></span><br><span class="line"></span><br><span class="line">docker network ls                                                                        </span><br><span class="line"><span class="comment"># NETWORK ID          NAME                DRIVER              SCOPE</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># 5a8dc0f2df06        mynet               bridge              local</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">docker network inspect mynet       </span><br><span class="line"><span class="comment"># [</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#         &quot;Name&quot;: &quot;mynet&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Id&quot;: &quot;5a8dc0f2df0667684167d7e219c53f4657ae4d89690afef54659080ddbc52e1e&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Created&quot;: &quot;2021-04-27T17:55:26.42981439+08:00&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Scope&quot;: &quot;local&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;Driver&quot;: &quot;bridge&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;EnableIPv6&quot;: false,</span></span><br><span class="line"><span class="comment">#         &quot;IPAM&quot;: &#123;</span></span><br><span class="line"><span class="comment">#             &quot;Driver&quot;: &quot;default&quot;,</span></span><br><span class="line"><span class="comment">#             &quot;Options&quot;: &#123;&#125;,</span></span><br><span class="line"><span class="comment">#             &quot;Config&quot;: [</span></span><br><span class="line"><span class="comment">#                 &#123;</span></span><br><span class="line"><span class="comment">#                     &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span></span><br><span class="line"><span class="comment">#                     &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span></span><br><span class="line"><span class="comment">#                 &#125;</span></span><br><span class="line"><span class="comment">#             ]</span></span><br><span class="line"><span class="comment">#         &#125;,</span></span><br><span class="line"><span class="comment">#         &quot;Internal&quot;: false,</span></span><br><span class="line"><span class="comment">#         &quot;Attachable&quot;: false,</span></span><br><span class="line"><span class="comment">#         &quot;Containers&quot;: &#123;&#125;,</span></span><br><span class="line"><span class="comment">#         &quot;Options&quot;: &#123;&#125;,</span></span><br><span class="line"><span class="comment">#         &quot;Labels&quot;: &#123;&#125;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加容器到自定义网络</span></span><br><span class="line">docker run -d -P --name tomcat01 --net mynet tomcat         </span><br><span class="line">docker run -d -P --name tomcat02 --net mynet tomcat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看 mynet 信息可以看到新建容器已经加入到网络中</span></span><br><span class="line">docker network inspect mynet                       </span><br><span class="line"><span class="comment"># [</span></span><br><span class="line"><span class="comment">#  ...   </span></span><br><span class="line"><span class="comment"># &quot;Containers&quot;: &#123;</span></span><br><span class="line"><span class="comment">#     &quot;4075fa56e6edc165fead5290085747455d5fbe2ad7bafc06e62a118c481b3f5b&quot;: &#123;</span></span><br><span class="line"><span class="comment">#         &quot;Name&quot;: &quot;tomcat02&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;EndpointID&quot;: &quot;793ff48b6a30c18e2f4372e99bb0bb06ea830a609bfd1b4fb9292e8b3dd77326&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;IPv6Address&quot;: &quot;&quot;</span></span><br><span class="line"><span class="comment">#     &#125;,</span></span><br><span class="line"><span class="comment">#     &quot;b8e4896497b05f77ae5e3c5c3cc998500d68dc4eb2cdad2702fa90e33fd56b28&quot;: &#123;</span></span><br><span class="line"><span class="comment">#         &quot;Name&quot;: &quot;tomcat01&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;EndpointID&quot;: &quot;23f5a636ccf43e96b1734bd5572dcc2c53997dbf8087bf04474433fe645bf40e&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;IPv6Address&quot;: &quot;&quot;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># &#125;,</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat02 ping tomcat01              <span class="comment"># 重复之前 --link 的实验，容器间通过 name 互相 ping. 自定义网络虽然没有特殊设置，但是可以直接通过 name 连接</span></span><br><span class="line"><span class="comment"># PING tomcat01 (192.168.0.2) 56(84) bytes of data.</span></span><br><span class="line"><span class="comment"># 64 bytes from tomcat01.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.206 ms</span></span><br><span class="line"><span class="comment"># 64 bytes from tomcat01.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.294 ms</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat01 ping tomcat02</span><br><span class="line"><span class="comment"># PING tomcat02 (192.168.0.3) 56(84) bytes of data.</span></span><br><span class="line"><span class="comment"># 64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.170 ms</span></span><br><span class="line"><span class="comment"># 64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.290 ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义网络 docker 已经帮我们维护好了对应关系，推荐使用</span></span><br><span class="line"><span class="comment"># 比如 redis, mysql 集群网络互相隔离，保证集群的安全和健康</span></span><br></pre></td></tr></table></figure>

<h2 id="网络联通"><a href="#网络联通" class="headerlink" title="网络联通"></a>网络联通</h2><p>如何让一个容器连接到另一个网络，比如 docker0 中的 容器连接到 mynet</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认 docker0 网络下新建测试容器 tomcat03</span></span><br><span class="line">docker run -d -P --name tomcat03 tomcat </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker network connect --<span class="built_in">help</span>           <span class="comment"># 查看使用方式</span></span><br><span class="line"><span class="comment"># Usage:  docker network connect [OPTIONS] NETWORK CONTAINER</span></span><br><span class="line"><span class="comment"># Connect a container to a network</span></span><br><span class="line"><span class="comment"># Options:</span></span><br><span class="line"><span class="comment">#       --alias strings           Add network-scoped alias for the container</span></span><br><span class="line"><span class="comment">#       --driver-opt strings      driver options for the network</span></span><br><span class="line"><span class="comment">#       --ip string               IPv4 address (e.g., 172.30.100.104)</span></span><br><span class="line"><span class="comment">#       --ip6 string              IPv6 address (e.g., 2001:db8::33)</span></span><br><span class="line"><span class="comment">#       --link list               Add link to another container</span></span><br><span class="line"><span class="comment">#       --link-local-ip strings   Add a link-local address for the container</span></span><br><span class="line"></span><br><span class="line">docker network connect mynet tomcat03</span><br><span class="line"></span><br><span class="line">docker network inspect mynet            <span class="comment"># 再次查看 mynet 信息，可以看到 tomcat3 已经加入网络，即一个容器两个地址</span></span><br><span class="line"><span class="comment"># &quot;Containers&quot;: &#123;</span></span><br><span class="line"><span class="comment">#     &quot;4075fa56e6edc165fead5290085747455d5fbe2ad7bafc06e62a118c481b3f5b&quot;: &#123;</span></span><br><span class="line"><span class="comment">#         &quot;Name&quot;: &quot;tomcat02&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;EndpointID&quot;: &quot;793ff48b6a30c18e2f4372e99bb0bb06ea830a609bfd1b4fb9292e8b3dd77326&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;IPv6Address&quot;: &quot;&quot;</span></span><br><span class="line"><span class="comment">#     &#125;,</span></span><br><span class="line"><span class="comment">#     &quot;76c7258757f99e4d4efc565f5e305452277fdd700a783a5387c71b54275df506&quot;: &#123;</span></span><br><span class="line"><span class="comment">#         &quot;Name&quot;: &quot;tomcat03&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;EndpointID&quot;: &quot;fbad841162867dfc73872cfa997ef99c099fde95e8b58de76ca9ccdb3ff4359e&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:04&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;IPv4Address&quot;: &quot;192.168.0.4/16&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;IPv6Address&quot;: &quot;&quot;</span></span><br><span class="line"><span class="comment">#     &#125;,</span></span><br><span class="line"><span class="comment">#     &quot;b8e4896497b05f77ae5e3c5c3cc998500d68dc4eb2cdad2702fa90e33fd56b28&quot;: &#123;</span></span><br><span class="line"><span class="comment">#         &quot;Name&quot;: &quot;tomcat01&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;EndpointID&quot;: &quot;23f5a636ccf43e96b1734bd5572dcc2c53997dbf8087bf04474433fe645bf40e&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;IPv6Address&quot;: &quot;&quot;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># &#125;,</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat01 ping tomcat03              <span class="comment"># tomcat01, 03 互 ping 测试</span></span><br><span class="line"><span class="comment"># PING tomcat03 (192.168.0.4) 56(84) bytes of data.</span></span><br><span class="line"><span class="comment"># 64 bytes from tomcat03.mynet (192.168.0.4): icmp_seq=1 ttl=64 time=0.131 ms</span></span><br><span class="line"><span class="comment"># 64 bytes from tomcat03.mynet (192.168.0.4): icmp_seq=2 ttl=64 time=0.123 ms</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat03 ping tomcat01</span><br><span class="line"><span class="comment"># PING tomcat01 (192.168.0.2) 56(84) bytes of data.</span></span><br><span class="line"><span class="comment"># 64 bytes from tomcat01.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.085 ms</span></span><br></pre></td></tr></table></figure>

<h2 id="实战：部署-Redis-集群"><a href="#实战：部署-Redis-集群" class="headerlink" title="实战：部署 Redis 集群"></a>实战：部署 Redis 集群</h2><p>部署三主三从节点</p>
<p><img src="redis.png" alt="redis"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create --subnet 172.38.0.0/16 redis          <span class="comment"># 创建 redis 网络</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将下面的内容放入 redis.sh 使用 sh redis.sh 创建配置文件</span></span><br><span class="line"><span class="comment">################# SH START #################</span></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> $(seq 1 6); \</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line">mkdir -p /root/mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf</span><br><span class="line">touch /root/mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf/redis.conf</span><br><span class="line">cat  EOF &gt; /root/mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf/redis.conf</span><br><span class="line">port 6379 </span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">cluster-enabled yes </span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1<span class="variable">$&#123;port&#125;</span></span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">################# SH END #################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 redis 节点示例</span></span><br><span class="line">docker run -p 6371:6379 -p 16371:16379 --name redis-1 \</span><br><span class="line">-v /root/mydata/redis/node-1/data:/data \</span><br><span class="line">-v /root/mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 shell 脚本创建所有 redis 容器</span></span><br><span class="line"><span class="comment">################# SH START #################</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> $(seq 1 6); \</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line">docker run -p 637<span class="variable">$&#123;n&#125;</span>:6379 -p 1637<span class="variable">$&#123;n&#125;</span>:16379 --name redis-<span class="variable">$&#123;n&#125;</span> \</span><br><span class="line">-v /root/mydata/redis/node-<span class="variable">$&#123;n&#125;</span>/data:/data \</span><br><span class="line">-v /root/mydata/redis/node-<span class="variable">$&#123;n&#125;</span>/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.1<span class="variable">$&#123;n&#125;</span> redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">################# SH END #################</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it redis-1 /bin/sh         <span class="comment"># 进入 redis 容器, redis 容器中并没有 bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集群</span></span><br><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span></span><br><span class="line"><span class="comment"># Master[0] -&gt; Slots 0 - 5460</span></span><br><span class="line"><span class="comment"># Master[1] -&gt; Slots 5461 - 10922</span></span><br><span class="line"><span class="comment"># Master[2] -&gt; Slots 10923 - 16383</span></span><br><span class="line"><span class="comment"># Adding replica 172.38.0.15:6379 to 172.38.0.11:6379</span></span><br><span class="line"><span class="comment"># Adding replica 172.38.0.16:6379 to 172.38.0.12:6379</span></span><br><span class="line"><span class="comment"># Adding replica 172.38.0.14:6379 to 172.38.0.13:6379</span></span><br><span class="line"><span class="comment"># M: 4abbca8e1511fc4a04e8b410e35a93af1392bc62 172.38.0.11:6379</span></span><br><span class="line"><span class="comment">#    slots:[0-5460] (5461 slots) master</span></span><br><span class="line"><span class="comment"># M: 6ff00ea4f03e997b831c2e7d3150c7399c5fb44c 172.38.0.12:6379</span></span><br><span class="line"><span class="comment">#    slots:[5461-10922] (5462 slots) master</span></span><br><span class="line"><span class="comment"># M: 0d6d16438bcb68bf89109b2e91dc6b71208ea113 172.38.0.13:6379</span></span><br><span class="line"><span class="comment">#    slots:[10923-16383] (5461 slots) master</span></span><br><span class="line"><span class="comment"># S: c47e77a26e9c1186b489003c00f1a9c647e913c2 172.38.0.14:6379</span></span><br><span class="line"><span class="comment">#    replicates 0d6d16438bcb68bf89109b2e91dc6b71208ea113</span></span><br><span class="line"><span class="comment"># S: 69fa6ac41672b325cfce023353ea3a35181ca873 172.38.0.15:6379</span></span><br><span class="line"><span class="comment">#    replicates 4abbca8e1511fc4a04e8b410e35a93af1392bc62</span></span><br><span class="line"><span class="comment"># S: c7b681f08fbbe568c5fcb2bddf88660ec3d217bf 172.38.0.16:6379</span></span><br><span class="line"><span class="comment">#    replicates 6ff00ea4f03e997b831c2e7d3150c7399c5fb44c</span></span><br><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">&#x27;yes&#x27;</span> to accept): yes</span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Nodes configuration updated</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Assign a different config epoch to each node</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span></span><br><span class="line"><span class="comment"># Waiting for the cluster to join</span></span><br><span class="line"><span class="comment"># ....</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Performing Cluster Check (using node 172.38.0.11:6379)</span></span><br><span class="line"><span class="comment"># M: 4abbca8e1511fc4a04e8b410e35a93af1392bc62 172.38.0.11:6379</span></span><br><span class="line"><span class="comment">#    slots:[0-5460] (5461 slots) master</span></span><br><span class="line"><span class="comment">#    1 additional replica(s)</span></span><br><span class="line"><span class="comment"># S: c47e77a26e9c1186b489003c00f1a9c647e913c2 172.38.0.14:6379</span></span><br><span class="line"><span class="comment">#    slots: (0 slots) slave</span></span><br><span class="line"><span class="comment">#    replicates 0d6d16438bcb68bf89109b2e91dc6b71208ea113</span></span><br><span class="line"><span class="comment"># M: 0d6d16438bcb68bf89109b2e91dc6b71208ea113 172.38.0.13:6379</span></span><br><span class="line"><span class="comment">#    slots:[10923-16383] (5461 slots) master</span></span><br><span class="line"><span class="comment">#    1 additional replica(s)</span></span><br><span class="line"><span class="comment"># M: 6ff00ea4f03e997b831c2e7d3150c7399c5fb44c 172.38.0.12:6379</span></span><br><span class="line"><span class="comment">#    slots:[5461-10922] (5462 slots) master</span></span><br><span class="line"><span class="comment">#    1 additional replica(s)</span></span><br><span class="line"><span class="comment"># S: 69fa6ac41672b325cfce023353ea3a35181ca873 172.38.0.15:6379</span></span><br><span class="line"><span class="comment">#    slots: (0 slots) slave</span></span><br><span class="line"><span class="comment">#    replicates 4abbca8e1511fc4a04e8b410e35a93af1392bc62</span></span><br><span class="line"><span class="comment"># S: c7b681f08fbbe568c5fcb2bddf88660ec3d217bf 172.38.0.16:6379</span></span><br><span class="line"><span class="comment">#    slots: (0 slots) slave</span></span><br><span class="line"><span class="comment">#    replicates 6ff00ea4f03e997b831c2e7d3150c7399c5fb44c</span></span><br><span class="line"><span class="comment"># [OK] All nodes agree about slots configuration.</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Check for open slots...</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Check slots coverage...</span></span><br><span class="line"><span class="comment"># [OK] All 16384 slots covered.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群信息</span></span><br><span class="line">redis-cli -c </span><br><span class="line"><span class="comment"># 127.0.0.1:6379&gt; cluster info</span></span><br><span class="line"><span class="comment"># cluster_state:ok</span></span><br><span class="line"><span class="comment"># cluster_slots_assigned:16384</span></span><br><span class="line"><span class="comment"># cluster_slots_ok:16384</span></span><br><span class="line"><span class="comment"># cluster_slots_pfail:0</span></span><br><span class="line"><span class="comment"># cluster_slots_fail:0</span></span><br><span class="line"><span class="comment"># cluster_known_nodes:6</span></span><br><span class="line"><span class="comment"># cluster_size:3</span></span><br><span class="line"><span class="comment"># cluster_current_epoch:6</span></span><br><span class="line"><span class="comment"># cluster_my_epoch:1</span></span><br><span class="line"><span class="comment"># cluster_stats_messages_ping_sent:203</span></span><br><span class="line"><span class="comment"># cluster_stats_messages_pong_sent:201</span></span><br><span class="line"><span class="comment"># cluster_stats_messages_sent:404</span></span><br><span class="line"><span class="comment"># cluster_stats_messages_ping_received:196</span></span><br><span class="line"><span class="comment"># cluster_stats_messages_pong_received:203</span></span><br><span class="line"><span class="comment"># cluster_stats_messages_meet_received:5</span></span><br><span class="line"><span class="comment"># cluster_stats_messages_received:404</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; cluster nodes </span><br><span class="line"><span class="comment"># (error) ERR Unknown subcommand or wrong number of arguments for &#x27;noes&#x27;. Try CLUSTER HELP.</span></span><br><span class="line"><span class="comment"># 127.0.0.1:6379&gt; cluster nodes </span></span><br><span class="line"><span class="comment"># c47e77a26e9c1186b489003c00f1a9c647e913c2 172.38.0.14:6379@16379 slave 0d6d16438bcb68bf89109b2e91dc6b71208ea113 0 1619257734941 4 connected</span></span><br><span class="line"><span class="comment"># 0d6d16438bcb68bf89109b2e91dc6b71208ea113 172.38.0.13:6379@16379 master - 0 1619257736000 3 connected 10923-16383</span></span><br><span class="line"><span class="comment"># 6ff00ea4f03e997b831c2e7d3150c7399c5fb44c 172.38.0.12:6379@16379 master - 0 1619257736471 2 connected 5461-10922</span></span><br><span class="line"><span class="comment"># 4abbca8e1511fc4a04e8b410e35a93af1392bc62 172.38.0.11:6379@16379 myself,master - 0 1619257734000 1 connected 0-5460</span></span><br><span class="line"><span class="comment"># 69fa6ac41672b325cfce023353ea3a35181ca873 172.38.0.15:6379@16379 slave 4abbca8e1511fc4a04e8b410e35a93af1392bc62 0 1619257735453 5 connected</span></span><br><span class="line"><span class="comment"># c7b681f08fbbe568c5fcb2bddf88660ec3d217bf 172.38.0.16:6379@16379 slave 6ff00ea4f03e997b831c2e7d3150c7399c5fb44c 0 1619257735554 6 connected</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> a b             <span class="comment"># 从 log 看出，值存到了 13 节点中，下面将 13 节点容器 stop, 通过 get 测试备份是否生效</span></span><br><span class="line"><span class="comment"># -&gt; Redirected to slot [15495] located at 172.38.0.13:6379</span></span><br><span class="line"><span class="comment"># OK</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启一个新的终端，查看 13 节点信息</span></span><br><span class="line">docker inspect redis</span><br><span class="line"><span class="comment"># &quot;319cc5bc69cf7d6875a7244b089f832e800d21f1de9d1b24a09367a2e368ea60&quot;: &#123;</span></span><br><span class="line"><span class="comment">#     &quot;Name&quot;: &quot;redis-3&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;EndpointID&quot;: &quot;4419d36052f0849869b8227db835b9cffb0e053ba593730c0f76904a9465fa92&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;MacAddress&quot;: &quot;02:42:ac:26:00:0d&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;IPv4Address&quot;: &quot;172.38.0.13/16&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;IPv6Address&quot;: &quot;&quot;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">docker stop redis-3</span><br><span class="line"></span><br><span class="line">172.38.0.13:6379&gt; get a             <span class="comment"># 回到原来的终端进行 get 操作</span></span><br><span class="line"><span class="comment"># Error: Operation timed out</span></span><br><span class="line"><span class="comment"># /data #                           # 默认直接从原来的 13 节点拿了，服务停了，回到了 11 节点的 data 目录，再通过 redis-cli -c 进去集群终端 get a 信息从 14 节点，备份节点返回</span></span><br><span class="line"></span><br><span class="line">redis-cli -c</span><br><span class="line">127.0.0.1:6379&gt; get a               <span class="comment"># 从 log 可以看到值是从备份节点 14 拿到的</span></span><br><span class="line"><span class="comment"># -&gt; Redirected to slot [15495] located at 172.38.0.14:6379</span></span><br><span class="line"><span class="comment"># &quot;b&quot;</span></span><br><span class="line"></span><br><span class="line">172.38.0.14:6379&gt; cluster nodes     <span class="comment"># 通过 nodes 命令查看节点信息可以看到 13 挂了 172.38.0.13:6379@16379 master,fail, slave 直接翻身农奴把歌唱</span></span><br><span class="line"><span class="comment"># 6ff00ea4f03e997b831c2e7d3150c7399c5fb44c 172.38.0.12:6379@16379 master - 0 1619258378445 2 connected 5461-10922</span></span><br><span class="line"><span class="comment"># 0d6d16438bcb68bf89109b2e91dc6b71208ea113 172.38.0.13:6379@16379 master,fail - 1619258032356 1619258031341 3 connected</span></span><br><span class="line"><span class="comment"># c47e77a26e9c1186b489003c00f1a9c647e913c2 172.38.0.14:6379@16379 myself,master - 0 1619258377000 7 connected 10923-16383</span></span><br><span class="line"><span class="comment"># 4abbca8e1511fc4a04e8b410e35a93af1392bc62 172.38.0.11:6379@16379 master - 0 1619258377432 1 connected 0-5460</span></span><br><span class="line"><span class="comment"># c7b681f08fbbe568c5fcb2bddf88660ec3d217bf 172.38.0.16:6379@16379 slave 6ff00ea4f03e997b831c2e7d3150c7399c5fb44c 0 1619258377533 6 connected</span></span><br><span class="line"><span class="comment"># 69fa6ac41672b325cfce023353ea3a35181ca873 172.38.0.15:6379@16379 slave 4abbca8e1511fc4a04e8b410e35a93af1392bc62 0 1619258376415 5 connected</span></span><br></pre></td></tr></table></figure>

<h2 id="SpringBoot-微服务打包-Docker-镜像"><a href="#SpringBoot-微服务打包-Docker-镜像" class="headerlink" title="SpringBoot 微服务打包 Docker 镜像"></a>SpringBoot 微服务打包 Docker 镜像</h2><ol>
<li>构建 springboot 的 helloword 项目</li>
<li>打包应用</li>
<li>编写 dockerfile</li>
<li>构建镜像</li>
<li>发布运行</li>
</ol>
<p>到 Spring Initializr 去打包一个 Hello Word demo 进行测试</p>
<p>Application 同级建一个 controller 文件夹，其下创建 HelloController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello from springboot.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>右键运行 application，访问 localhost:8080/hello 得到字符串</p>
<p>maven task -&gt; Lifecycle -&gt; package 打包工程, jar 包会生成在 target 目录下</p>
<p>右键 open in terminal, 运行 <code>java -jar demo-0.0.1-SNAPSHOT.jar</code> 测试 jar 包是否能正常工作</p>
<p>在 target 目录下新建 Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> *.jar /app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;--server.port=8080&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>在 target 目录下 build image <code>docker build -t myspringapp .</code></p>
<p>等待结束后查看新建是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images </span><br><span class="line"><span class="comment"># REPOSITORY                                          TAG                IMAGE ID       CREATED              SIZE</span></span><br><span class="line"><span class="comment"># myspringapp                                         latest             8b39ad3c5928   About a minute ago   660MB</span></span><br></pre></td></tr></table></figure>

<p>测试运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一次忘了加 -P 导致容器端口没有暴露出来，直接就不能访问了</span></span><br><span class="line">docker run -d -P --name spapp myspringapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看映射地址</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># CONTAINER ID   IMAGE         COMMAND                  CREATED         STATUS         PORTS                     NAMES</span></span><br><span class="line"><span class="comment"># 0b4da52a4593   myspringapp   &quot;java -jar /app.jar …&quot;   3 seconds ago   Up 2 seconds   0.0.0.0:55010-&gt;8080/tcp   spapp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">curl localhost:55010/hello</span><br><span class="line"><span class="comment"># Hello from springboot.</span></span><br></pre></td></tr></table></figure>

<h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>Dockerfile 单个容器，Docker Compose 定义运行多个容器</p>
<p>Using Compose is basically a three-step process:</p>
<ol>
<li>Define your app’s environment with a Dockerfile so it can be reproduced anywhere.</li>
<li>Define the services that make up your app in <code>docker-compose.yml</code> so they can be run together in an isolated environment.</li>
<li>Run <code>docker compose up</code> and the Docker compose command starts and runs your entire app. You can alternatively run docker-compose up using the docker-compose binary.</li>
</ol>
<p>重要概念：</p>
<ul>
<li>服务 services, 容器，应用（web, redis…）</li>
<li>项目 project，一组关联的容器</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Mac 的 docker-compose 工具集是和客户端整合在一起的，所以不需要单独安装，直接可以使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose version</span><br><span class="line"><span class="comment"># docker-compose version 1.28.5, build c4eb3a1f</span></span><br><span class="line"><span class="comment"># docker-py version: 4.4.4</span></span><br><span class="line"><span class="comment"># CPython version: 3.9.0</span></span><br><span class="line"><span class="comment"># OpenSSL version: OpenSSL 1.1.1h  22 Sep 202</span></span><br></pre></td></tr></table></figure>

<p>Linux 安装</p>
<ol>
<li>从 github 下载(源文件)[sudo curl -L “<a href="https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$">https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$</a>(uname -s)-$(uname -m)” -o /usr/local/bin/docker-compose]</li>
<li>修改权限 <code>sudo chmod +x /usr/local/bin/docker-compose</code></li>
<li>测试运行 <code>docker compose --version</code></li>
</ol>
<h2 id="官方起步教程"><a href="#官方起步教程" class="headerlink" title="官方起步教程"></a>官方起步教程</h2><ol>
<li>写应用</li>
<li>Dockerfile 应用打包为镜像</li>
<li>Docker-compose yaml 文件整合所有 services</li>
<li>启动 compose 项目(docker-compose up .)</li>
</ol>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br><span class="line"></span><br><span class="line"># 创建网络</span><br><span class="line">Creating network &quot;composetest_default&quot; with the default driver</span><br><span class="line"></span><br><span class="line"># 根据 compose 文件构建</span><br><span class="line">Building web</span><br><span class="line">[+] Building 19.7s (13/13) FINISHED                                                                                  </span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                                                            0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 324B                                                                            0.0s</span><br><span class="line"> =&gt; [internal] load .dockerignore                                                                               0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 2B                                                                                 0.0s</span><br><span class="line"> =&gt; resolve image config for docker.io/docker/dockerfile:1                                                      3.6s</span><br><span class="line"> =&gt; docker-image://docker.io/docker/dockerfile:1@sha256:e2a8561e419ab1ba6b2fe6cbdf49fd92b95912df1cf7d313c3e2230a333fdbcc                                          1.5s</span><br><span class="line"> =&gt; =&gt; resolve docker.io/docker/dockerfile:1@sha256:e2a8561e419ab1ba6b2fe6cbdf49fd92b95912df1cf7d313c3e2230a333fdbcc                                              0.0s</span><br><span class="line"> =&gt; =&gt; sha256:e2a8561e419ab1ba6b2fe6cbdf49fd92b95912df1cf7d313c3e2230a333fdbcc 1.69kB / 1.69kB                  0.0s</span><br><span class="line"> =&gt; =&gt; sha256:e3ee2e6b536452d876b1c5aa12db9bca51b8f52b2505178cae6d13e33daeed2b 528B / 528B                      0.0s</span><br><span class="line"> =&gt; =&gt; sha256:86e43bba076d67c1a890cbc07813806b11eca53843dc643202d939b986c8c332 1.21kB / 1.21kB                  0.0s</span><br><span class="line"> =&gt; =&gt; sha256:3cc8e449ce9f6e0752ede8f50a7334bf0c7b2d24d76da2ffae7aa6a729dd1da4 9.64MB / 9.64MB                  0.8s</span><br><span class="line"> =&gt; =&gt; extracting sha256:3cc8e449ce9f6e0752ede8f50a7334bf0c7b2d24d76da2ffae7aa6a729dd1da4                       0.3s</span><br><span class="line"> =&gt; [internal] load metadata for docker.io/library/python:3.7-alpine                                            2.7s</span><br><span class="line"> =&gt; [1/6] FROM docker.io/library/python:3.7-alpine@sha256:3b0e1a61106a4c73d1253a86b7765b41d87d1122eb70f99c6de06f0b64edc434                                        2.2s</span><br><span class="line"> =&gt; =&gt; resolve docker.io/library/python:3.7-alpine@sha256:3b0e1a61106a4c73d1253a86b7765b41d87d1122eb70f99c6de06f0b64edc434                                        0.0s</span><br><span class="line"> =&gt; =&gt; sha256:a7ad1a75a9998a18ceb4b3e77ebc933525c48a5e9b1dd6abf258e86f537a7fbf 281.27kB / 281.27kB              0.6s</span><br><span class="line"> =&gt; =&gt; sha256:37ce6546d5dd0143d2fd48adccb48cd0f46c5c2587ce49a53fbd9bd1c5816665 10.57MB / 10.57MB                1.1s</span><br><span class="line"> =&gt; =&gt; sha256:3b0e1a61106a4c73d1253a86b7765b41d87d1122eb70f99c6de06f0b64edc434 1.65kB / 1.65kB                  0.0s</span><br><span class="line"> =&gt; =&gt; sha256:d7c477920ed69ca5744ae133810c519a5ea72ab2da3edf542375d48e10742720 1.37kB / 1.37kB                  0.0s</span><br><span class="line"> =&gt; =&gt; sha256:c46f62f378d72f9a78c4fb150000c479f2bf9095f5616b9f85a8387437e7592c 7.85kB / 7.85kB                  0.0s</span><br><span class="line"> =&gt; =&gt; sha256:540db60ca9383eac9e418f78490994d0af424aab7bf6d0e47ac8ed4e2e9bcbba 2.81MB / 2.81MB                  0.5s</span><br><span class="line"> =&gt; =&gt; extracting sha256:540db60ca9383eac9e418f78490994d0af424aab7bf6d0e47ac8ed4e2e9bcbba                       0.2s</span><br><span class="line"> =&gt; =&gt; sha256:ec9e91bed5a295437fbb8a07b8af46fd69d7dd5beb7ac009c839292454bb3d31 234B / 234B                      1.0s</span><br><span class="line"> =&gt; =&gt; sha256:c629b5f73da8f1113e9c8257d16fc65a95b812483506f56e418183e0d618f07e 2.16MB / 2.16MB                  1.3s</span><br><span class="line"> =&gt; =&gt; extracting sha256:a7ad1a75a9998a18ceb4b3e77ebc933525c48a5e9b1dd6abf258e86f537a7fbf                       0.1s</span><br><span class="line"> =&gt; =&gt; extracting sha256:37ce6546d5dd0143d2fd48adccb48cd0f46c5c2587ce49a53fbd9bd1c5816665                       0.5s</span><br><span class="line"> =&gt; =&gt; extracting sha256:ec9e91bed5a295437fbb8a07b8af46fd69d7dd5beb7ac009c839292454bb3d31                       0.0s</span><br><span class="line"> =&gt; =&gt; extracting sha256:c629b5f73da8f1113e9c8257d16fc65a95b812483506f56e418183e0d618f07e                       0.2s</span><br><span class="line"> =&gt; [internal] load build context                                                                               0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 1.08kB                                                                             0.0s</span><br><span class="line"> =&gt; [2/6] WORKDIR /code                                                                                         0.1s</span><br><span class="line"> =&gt; [3/6] RUN apk add --no-cache gcc musl-dev linux-headers                                                     3.8s</span><br><span class="line"> =&gt; [4/6] COPY requirements.txt requirements.txt                                                                0.0s</span><br><span class="line"> =&gt; [5/6] RUN pip install -r requirements.txt                                                                   4.7s</span><br><span class="line"> =&gt; [6/6] COPY . .                                                                                              0.0s</span><br><span class="line"> =&gt; exporting to image                                                                                          0.7s</span><br><span class="line"> =&gt; =&gt; exporting layers                                                                                         0.7s</span><br><span class="line"> =&gt; =&gt; writing image sha256:fa0cb4f4c056d1b79ddddb5ec6e21659cb3d84cad4a28d361775161cbe281811                    0.0s</span><br><span class="line"> =&gt; =&gt; naming to docker.io/library/composetest_web                                                              0.0s</span><br><span class="line">Successfully built fa0cb4f4c056d1b79ddddb5ec6e21659cb3d84cad4a28d361775161cbe281811</span><br><span class="line">WARNING: Image for service web was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.</span><br><span class="line">Pulling redis (redis:alpine)...</span><br><span class="line">alpine: Pulling from library/redis</span><br><span class="line">540db60ca938: Already exists</span><br><span class="line">29712d301e8c: Pull complete</span><br><span class="line">8173c12df40f: Pull complete</span><br><span class="line">0be901b3c77d: Pull complete</span><br><span class="line">c33773bf45b4: Pull complete</span><br><span class="line">6eeb0c30f7e7: Pull complete</span><br><span class="line">Digest: sha256:f9577ac6e68c70b518e691406f2bebee49d8db22118fc87bad3b39c16a1cb46e</span><br><span class="line">Status: Downloaded newer image for redis:alpine</span><br><span class="line">Creating composetest_web_1   ... done</span><br><span class="line">Creating composetest_redis_1 ... done</span><br><span class="line">Attaching to composetest_redis_1, composetest_web_1</span><br><span class="line">redis_1  | 1:C 25 Apr 2021 06:45:13.848 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">redis_1  | 1:C 25 Apr 2021 06:45:13.848 # Redis version=6.2.2, bits=64, commit=00000000, modified=0, pid=1, just started</span><br><span class="line">redis_1  | 1:C 25 Apr 2021 06:45:13.848 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span><br><span class="line">redis_1  | 1:M 25 Apr 2021 06:45:13.849 * monotonic clock: POSIX clock_gettime</span><br><span class="line">redis_1  | 1:M 25 Apr 2021 06:45:13.849 * Running mode=standalone, port=6379.</span><br><span class="line">redis_1  | 1:M 25 Apr 2021 06:45:13.849 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">redis_1  | 1:M 25 Apr 2021 06:45:13.849 # Server initialized</span><br><span class="line">redis_1  | 1:M 25 Apr 2021 06:45:13.850 * Ready to accept connections</span><br><span class="line">web_1    |  * Serving Flask app &quot;app.py&quot;</span><br><span class="line">web_1    |  * Environment: production</span><br><span class="line">web_1    |    WARNING: This is a development server. Do not use it in a production deployment.</span><br><span class="line">web_1    |    Use a production WSGI server instead.</span><br><span class="line">web_1    |  * Debug mode: off</span><br><span class="line">web_1    |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)</span><br><span class="line">web_1    | 172.20.0.1 - - [25/Apr/2021 06:45:42] &quot;GET / HTTP/1.1&quot; 200 -</span><br><span class="line">web_1    | 172.20.0.1 - - [25/Apr/2021 06:45:42] &quot;GET /favicon.ico HTTP/1.1&quot; 404 -</span><br><span class="line">web_1    | 172.20.0.1 - - [25/Apr/2021 06:45:46] &quot;GET / HTTP/1.1&quot; 200 -</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line"><span class="comment"># CONTAINER ID   IMAGE             COMMAND                  CREATED         STATUS         PORTS                    NAMES</span></span><br><span class="line"><span class="comment"># 621dc8726fe9   composetest_web   &quot;flask run&quot;              8 minutes ago   Up 8 minutes   0.0.0.0:5000-&gt;5000/tcp   composetest_web_1</span></span><br><span class="line"><span class="comment"># 6945405369e2   redis:alpine      &quot;docker-entrypoint.s…&quot;   8 minutes ago   Up 8 minutes   6379/tcp                 composetest_redis_1</span></span><br><span class="line"></span><br><span class="line">docker network ls</span><br><span class="line"><span class="comment"># NETWORK ID     NAME                      DRIVER    SCOPE</span></span><br><span class="line"><span class="comment"># 39a92d7cce05   bridge                    bridge    local</span></span><br><span class="line"><span class="comment"># f713400ac914   composetest_default       bridge    local &lt;- compose 启动之后会创建一个对应的网络，和之前的 log 匹配</span></span><br><span class="line"></span><br><span class="line">docker network inspect composetest_default</span><br><span class="line"><span class="comment"># &quot;Containers&quot;: &#123;</span></span><br><span class="line"><span class="comment">#     &quot;621dc8726fe93265134ead255af6cd572f7a6d82a802a97edd53780248f749dd&quot;: &#123;</span></span><br><span class="line"><span class="comment">#         &quot;Name&quot;: &quot;composetest_web_1&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;EndpointID&quot;: &quot;000a2b25cc2ffc6b1d86eca556dd06cac05ff6bb70a2cd37d5cce4054559c993&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;MacAddress&quot;: &quot;02:42:ac:14:00:02&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;IPv4Address&quot;: &quot;172.20.0.2/16&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;IPv6Address&quot;: &quot;&quot;</span></span><br><span class="line"><span class="comment">#     &#125;,</span></span><br><span class="line"><span class="comment">#     &quot;6945405369e252c5537743244ed60a7c740f713c20d1df4e0318cf929411f169&quot;: &#123;</span></span><br><span class="line"><span class="comment">#         &quot;Name&quot;: &quot;composetest_redis_1&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;EndpointID&quot;: &quot;857a5962c8220bd8972e6793c5ff521503b6e293d31155b8268a8949bfb4bb72&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;MacAddress&quot;: &quot;02:42:ac:14:00:03&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;IPv4Address&quot;: &quot;172.20.0.3/16&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;IPv6Address&quot;: &quot;&quot;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># &#125;,</span></span><br></pre></td></tr></table></figure>

<p>注意点：app 中 redis 是通过域名绑定的 <code>cache = redis.Redis(host=&#39;redis&#39;, port=6379)</code> 并不是指定 IP，这里已经用到了 docker 里面的网络了</p>
<h2 id="YAML-规则"><a href="#YAML-规则" class="headerlink" title="YAML 规则"></a>YAML 规则</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"># 3层</span><br><span class="line"></span><br><span class="line">version: &#x27;&#x27; # 版本</span><br><span class="line">services: # 服务</span><br><span class="line">    服务1: web</span><br><span class="line">        # 服务配置</span><br><span class="line">        images</span><br><span class="line">        build</span><br><span class="line">        network</span><br><span class="line">        ...</span><br><span class="line">    服务2: redis</span><br><span class="line">        ...</span><br><span class="line">    服务2: redis</span><br><span class="line">        ...</span><br><span class="line"># 其他配置 网络/卷，全局规则</span><br><span class="line">volumes:</span><br><span class="line">network:</span><br></pre></td></tr></table></figure>

<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>仿照官方的计数器，写一个 Java 版本的并 compose 启动</p>
<ol>
<li>写项目代码</li>
<li>dockerfile 构建镜像</li>
<li>docker-compose.yml 整合项目</li>
<li>上传服务器 docker-compose up . 启动</li>
</ol>
<p>通过 spring initializr 下载模版，将 spring web + spring data reactive redis 加入依赖</p>
<p>新建 controller 层代码, 目录结构如下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── CounterApplication.java</span><br><span class="line">└── controller</span><br><span class="line">    └── HelloController.java</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Long views = redisTemplate.opsForValue().increment(<span class="string">&quot;views&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello, counter views: &quot;</span> + views;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置端口，由于配置的是 redis，所以本地启动的时候 redis 是会出问题的，docker 里才 OK</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.port&#x3D;8080</span><br><span class="line">spring.redis.host&#x3D;redis</span><br></pre></td></tr></table></figure>

<p>maven -&gt; counter -&gt; Lifecycle -&gt; package 打包到 target folder 下</p>
<p>在 target 下新建 Dockerfile 和 docker-compose.yml</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> *.jar /app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;--server.port=8080&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">counterapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">counterapp</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;library/redis:alpine&quot;</span></span><br></pre></td></tr></table></figure>

<p>这个有一个东西很奇怪，其实在上面的 Dockerfile 里我是没有指定 docker image 叫什么， 但是下面的 compose file 里直接就拿到了。可能是下面的 <code>build .</code> 的意思是用但前文件加下的 Dockerfile 构建，并取名叫 counterapp </p>
<p>由于我本机就有环境，直接运行即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> target</span><br><span class="line">docker-compose up</span><br><span class="line"></span><br><span class="line"><span class="comment"># network 下会显示 folder 前缀的新网络</span></span><br><span class="line">docker network ls</span><br><span class="line"><span class="comment"># c2b31f70eead   target_default            bridge    local</span></span><br></pre></td></tr></table></figure>

<p>log 输出正常，访问页面正常</p>
<p><code>docker-compose --build</code> 重新构建</p>
<h2 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h2><p>PS：Mobaxtream multi-execution 简直是太酷炫了！！！</p>
<p>创建 4 个实例并安装 docker，准备实验环境</p>
<p><img src="how_node_work.png" alt="how node works"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm --<span class="built_in">help</span>         <span class="comment"># 查看可用命令</span></span><br><span class="line"><span class="comment"># Usage:  docker swarm COMMAND</span></span><br><span class="line"><span class="comment"># Manage Swarm</span></span><br><span class="line"><span class="comment"># Options:</span></span><br><span class="line"><span class="comment">#       --help   Print usage</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment">#   init        Initialize a swarm</span></span><br><span class="line"><span class="comment">#   join        Join a swarm as a node and/or manager</span></span><br><span class="line"><span class="comment">#   join-token  Manage join tokens</span></span><br><span class="line"><span class="comment">#   leave       Leave the swarm</span></span><br><span class="line"><span class="comment">#   unlock      Unlock swarm</span></span><br><span class="line"><span class="comment">#   unlock-key  Manage the unlock key</span></span><br><span class="line"><span class="comment">#   update      Update the swarm</span></span><br><span class="line"></span><br><span class="line">docker swarm init --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># Usage:  docker swarm init [OPTIONS]</span></span><br><span class="line"><span class="comment"># Initialize a swarm</span></span><br><span class="line"><span class="comment"># Options:</span></span><br><span class="line"><span class="comment">#       --advertise-addr string           Advertised address (format: &lt;ip|interface&gt;[:port])</span></span><br><span class="line"><span class="comment">#       --autolock                        Enable manager autolocking (requiring an unlock key to start a stopped manager)</span></span><br><span class="line"><span class="comment">#       --cert-expiry duration            Validity period for node certificates (ns|us|ms|s|m|h) (default 2160h0m0s)</span></span><br><span class="line"><span class="comment">#       --dispatcher-heartbeat duration   Dispatcher heartbeat period (ns|us|ms|s|m|h) (default 5s)</span></span><br><span class="line"><span class="comment">#       --external-ca external-ca         Specifications of one or more certificate signing endpoints</span></span><br><span class="line"><span class="comment">#       --force-new-cluster               Force create a new cluster from current state</span></span><br><span class="line"><span class="comment">#       --help                            Print usage</span></span><br><span class="line"><span class="comment">#       --listen-addr node-addr           Listen address (format: &lt;ip|interface&gt;[:port]) (default 0.0.0.0:2377)</span></span><br><span class="line"><span class="comment">#       --max-snapshots uint              Number of additional Raft snapshots to retain</span></span><br><span class="line"><span class="comment">#       --snapshot-interval uint          Number of log entries between Raft snapshots (default 10000)</span></span><br><span class="line"><span class="comment">#       --task-history-limit int          Task history retention limit (default 5)</span></span><br><span class="line"></span><br><span class="line">docker swarm init --advertise-addr 172.28.231.215       <span class="comment"># 创建 swarm 集群，提供两个可用命令，一个用于添加 worker 节点，一个用于添加 manager 节点</span></span><br><span class="line"><span class="comment"># Swarm initialized: current node (abele1bkn04awsnvvfzj0dof2) is now a manager.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To add a worker to this swarm, run the following command:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     docker swarm join \</span></span><br><span class="line"><span class="comment">#     --token SWMTKN-1-2n1wgk8ws8ca2bz2kr5nkqefrngtizuum901cv7hmhgqnsjuc1-3gwzzivpm27xfqk8ddclf6fth \</span></span><br><span class="line"><span class="comment">#     172.28.231.215:2377</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To add a manager to this swarm, run &#x27;docker swarm join-token manager&#x27; and follow the instructions.</span></span><br><span class="line"></span><br><span class="line">docker node ls              <span class="comment"># 显示集群节点状态</span></span><br><span class="line"><span class="comment"># ID                           HOSTNAME                 STATUS  AVAILABILITY  MANAGER STATUS</span></span><br><span class="line"><span class="comment"># abele1bkn04awsnvvfzj0dof2 *  iZuf6brcie4578p0e13tg9Z  Ready   Active        Leader</span></span><br><span class="line"></span><br><span class="line">docker swarm join \</span><br><span class="line">    --token SWMTKN-1-2n1wgk8ws8ca2bz2kr5nkqefrngtizuum901cv7hmhgqnsjuc1-3gwzzivpm27xfqk8ddclf6fth \</span><br><span class="line">    172.28.231.215:2377      <span class="comment"># 挑选一个可用节点，作为一个 worker 节点加入</span></span><br><span class="line"><span class="comment"># This node joined a swarm as a worker.</span></span><br><span class="line"></span><br><span class="line">docker node ls              <span class="comment"># 再次查看节点状态，节点加入成功   </span></span><br><span class="line"><span class="comment"># ID                           HOSTNAME                 STATUS  AVAILABILITY  MANAGER STATUS</span></span><br><span class="line"><span class="comment"># 9xujdtp2c7dob2t1o704tgwvl    iZuf6brcie4578p0e13tg8Z  Ready   Active</span></span><br><span class="line"><span class="comment"># abele1bkn04awsnvvfzj0dof2 *  iZuf6brcie4578p0e13tg9Z  Ready   Active        Leader</span></span><br><span class="line"></span><br><span class="line">docker swarm join-token manager     <span class="comment"># 生成 manager 节点 token</span></span><br><span class="line"><span class="comment"># To add a manager to this swarm, run the following command:</span></span><br><span class="line"><span class="comment">#     docker swarm join \</span></span><br><span class="line"><span class="comment">#     --token SWMTKN-1-2n1wgk8ws8ca2bz2kr5nkqefrngtizuum901cv7hmhgqnsjuc1-392uyq8gmjgp9dj484y8id8jq \</span></span><br><span class="line"><span class="comment">#     172.28.231.215:2377</span></span><br><span class="line"></span><br><span class="line">docker swarm join \</span><br><span class="line">&gt;     --token SWMTKN-1-2n1wgk8ws8ca2bz2kr5nkqefrngtizuum901cv7hmhgqnsjuc1-392uyq8gmjgp9dj484y8id8jq \</span><br><span class="line">&gt;     172.28.231.215:2377       <span class="comment"># 挑选一个可用节点，作为 manager 节点加入集群</span></span><br><span class="line"><span class="comment"># This node joined a swarm as a manager.</span></span><br></pre></td></tr></table></figure>

<h2 id="Raft-协议"><a href="#Raft-协议" class="headerlink" title="Raft 协议"></a>Raft 协议</h2><p>保证大多数节点存活才可用，只要 &gt;1， 集群则要求 &gt; 3</p>
<p>实验：双主双从的情况加，一个主机 down, 另一个主机还是不能使用，并不能达到备份的效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop docker       <span class="comment"># 停止一个 manager 节点</span></span><br><span class="line"></span><br><span class="line">docker node ls              <span class="comment"># 在另一个 manager 节点上显示 node 信息</span></span><br><span class="line"><span class="comment"># Error response from daemon: rpc error: code = 4 desc = context deadline exceeded</span></span><br><span class="line"></span><br><span class="line">systemctl start docker      <span class="comment"># 重启停止的节点</span></span><br><span class="line"></span><br><span class="line">docker node ls              <span class="comment"># manager 节点的主备节点互换了</span></span><br><span class="line"><span class="comment"># ID                           HOSTNAME                 STATUS  AVAILABILITY  MANAGER STATUS</span></span><br><span class="line"><span class="comment"># 9xujdtp2c7dob2t1o704tgwvl    iZuf6brcie4578p0e13tg8Z  Ready   Active</span></span><br><span class="line"><span class="comment"># abele1bkn04awsnvvfzj0dof2 *  iZuf6brcie4578p0e13tg9Z  Ready   Active        Reachable</span></span><br><span class="line"><span class="comment"># qr1s9a3q7h3j8dw48juw1emg4    myvm01                   Ready   Active        Leader</span></span><br><span class="line"><span class="comment"># y1gs7gsyuwoefjvmw8d9eswrm    iZuf6brcie4578p0e13tgaZ  Ready   Active</span></span><br><span class="line"></span><br><span class="line">docker swarm leave         <span class="comment"># 选取一个 worker 节点，起开集群</span></span><br><span class="line"></span><br><span class="line">docker node ls              <span class="comment"># manager 节点显示，上面的节点 down 了</span></span><br><span class="line"><span class="comment"># ID                           HOSTNAME                 STATUS  AVAILABILITY  MANAGER STATUS</span></span><br><span class="line"><span class="comment"># 9xujdtp2c7dob2t1o704tgwvl    iZuf6brcie4578p0e13tg8Z  Down    Active</span></span><br><span class="line"><span class="comment"># abele1bkn04awsnvvfzj0dof2 *  iZuf6brcie4578p0e13tg9Z  Ready   Active        Reachable</span></span><br><span class="line"><span class="comment"># qr1s9a3q7h3j8dw48juw1emg4    myvm01                   Ready   Active        Leader</span></span><br><span class="line"><span class="comment"># y1gs7gsyuwoefjvmw8d9eswrm    iZuf6brcie4578p0e13tgaZ  Ready   Active</span></span><br><span class="line"></span><br><span class="line">docker swarm join \</span><br><span class="line">     --token SWMTKN-1-2n1wgk8ws8ca2bz2kr5nkqefrngtizuum901cv7hmhgqnsjuc1-392uyq8gmjgp9dj484y8id8jq \</span><br><span class="line">     172.28.231.215:2377        <span class="comment"># 将其开的节点设置为 manger 节点</span></span><br><span class="line"><span class="comment"># This node joined a swarm as a manager.</span></span><br><span class="line"></span><br><span class="line">docker node ls                  <span class="comment"># 显示由三个 manager 节点</span></span><br><span class="line"><span class="comment"># ID                           HOSTNAME                 STATUS  AVAILABILITY  MANAGER STATUS</span></span><br><span class="line"><span class="comment"># 9xujdtp2c7dob2t1o704tgwvl    iZuf6brcie4578p0e13tg8Z  Down    Active</span></span><br><span class="line"><span class="comment"># abele1bkn04awsnvvfzj0dof2    iZuf6brcie4578p0e13tg9Z  Ready   Active        Reachable</span></span><br><span class="line"><span class="comment"># o97d3m17864yftbmq6kdaxel4 *  iZuf6brcie4578p0e13tg8Z  Ready   Active        Reachable</span></span><br><span class="line"><span class="comment"># qr1s9a3q7h3j8dw48juw1emg4    myvm01                   Ready   Active        Leader</span></span><br><span class="line"><span class="comment"># y1gs7gsyuwoefjvmw8d9eswrm    iZuf6brcie4578p0e13tgaZ  Ready   Active</span></span><br><span class="line"></span><br><span class="line">system stop  docker             <span class="comment"># 重复之前的实验，停止一个 manager 节点</span></span><br><span class="line"></span><br><span class="line">docker node ls                  <span class="comment"># 到备用 manager 节点，测试节点信息，可用</span></span><br><span class="line"><span class="comment"># ID                           HOSTNAME                 STATUS  AVAILABILITY  MANAGER STATUS</span></span><br><span class="line"><span class="comment"># 9xujdtp2c7dob2t1o704tgwvl    iZuf6brcie4578p0e13tg8Z  Down    Active</span></span><br><span class="line"><span class="comment"># abele1bkn04awsnvvfzj0dof2    iZuf6brcie4578p0e13tg9Z  Down    Active        Unreachable</span></span><br><span class="line"><span class="comment"># o97d3m17864yftbmq6kdaxel4    iZuf6brcie4578p0e13tg8Z  Ready   Active        Reachable</span></span><br><span class="line"><span class="comment"># qr1s9a3q7h3j8dw48juw1emg4 *  myvm01                   Ready   Active        Leader</span></span><br><span class="line"><span class="comment"># y1gs7gsyuwoefjvmw8d9eswrm    iZuf6brcie4578p0e13tgaZ  Ready   Active</span></span><br></pre></td></tr></table></figure>

<h2 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h2><p>docker-compose up 项目，单机</p>
<p>swarm 集群 services 高可用</p>
<p>容器 -&gt; 服务 -&gt; 副本</p>
<ul>
<li>docker run 容器启动，不能扩容</li>
<li>docker service 服务，可扩容</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service</span><br><span class="line"><span class="comment"># Usage:  docker service COMMAND</span></span><br><span class="line"><span class="comment"># Manage services</span></span><br><span class="line"><span class="comment"># Options:</span></span><br><span class="line"><span class="comment">#       --help   Print usage</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment">#   create      Create a new service</span></span><br><span class="line"><span class="comment">#   inspect     Display detailed information on one or more services</span></span><br><span class="line"><span class="comment">#   ls          List services</span></span><br><span class="line"><span class="comment">#   ps          List the tasks of a service</span></span><br><span class="line"><span class="comment">#   rm          Remove one or more services</span></span><br><span class="line"><span class="comment">#   scale       Scale one or multiple replicated services</span></span><br><span class="line"><span class="comment">#   update      Update a service</span></span><br><span class="line"><span class="comment"># Run &#x27;docker service COMMAND --help&#x27; for more information on a command.</span></span><br></pre></td></tr></table></figure>

<p>创建服务实践</p>
<ul>
<li>docker run: 单个容器, 不能扩缩容</li>
<li>docker service: 服务，可以扩缩容，可以滚动更新</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service create -p 8888:80 --name my-nginx nginx      <span class="comment"># 创建服务</span></span><br><span class="line"></span><br><span class="line">docker service ps my-nginx</span><br><span class="line"><span class="comment"># ID            NAME        IMAGE         NODE    DESIRED STATE  CURRENT STATE               ERROR  PORTS</span></span><br><span class="line"><span class="comment"># yb78d9o2lsyp  my-nginx.1  nginx:latest  myvm01  Running        Running about a minute ago</span></span><br><span class="line"></span><br><span class="line">docker service ls</span><br><span class="line"><span class="comment"># ID            NAME      MODE        REPLICAS  IMAGE</span></span><br><span class="line"><span class="comment"># sgcat9l69srz  my-nginx  replicated  1/1       nginx:latest</span></span><br><span class="line"></span><br><span class="line">docker ps           <span class="comment"># 这个服务是随机创建在 manager 节点上的</span></span><br><span class="line"></span><br><span class="line">docker service update --replicas 3 my-nginx     <span class="comment"># 添加三个副本</span></span><br><span class="line"></span><br><span class="line">docker ps           <span class="comment"># 去各个节点上看可以看到如下信息，names 为 1-3</span></span><br><span class="line"><span class="comment"># CONTAINER ID        IMAGE                                                                           COMMAND                  CREATED             STATUS              PORTS               NAMES</span></span><br><span class="line"><span class="comment"># 902bbdf9eb3a        nginx@sha256:75a55d33ecc73c2a242450a9f1cc858499d468f077ea942867e662c247b5e412   &quot;/docker-entrypoin...&quot;   9 minutes ago       Up 9 minutes        80/tcp              my-nginx.1.yb78d9o2lsyp0wg7558vn0eew</span></span><br><span class="line"></span><br><span class="line">curl 172.28.231.213:8888        <span class="comment"># 挑选一个节点访问其他节点 nginx 服务，可达</span></span><br><span class="line"><span class="comment"># &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment"># &lt;html&gt;</span></span><br><span class="line"><span class="comment"># &lt;head&gt;</span></span><br><span class="line"><span class="comment"># &lt;title&gt;Welcome to nginx!&lt;/title&gt;</span></span><br><span class="line"><span class="comment"># ....</span></span><br><span class="line"><span class="comment"># &lt;/body&gt;</span></span><br><span class="line"><span class="comment"># &lt;/html&gt;</span></span><br><span class="line"></span><br><span class="line">docker service ls</span><br><span class="line"><span class="comment"># ID            NAME      MODE        REPLICAS  IMAGE</span></span><br><span class="line"><span class="comment"># sgcat9l69srz  my-nginx  replicated  10/10     nginx:latest</span></span><br><span class="line"></span><br><span class="line">docker service update --replicas 10 my-nginx     <span class="comment"># 弹性扩缩容</span></span><br><span class="line">docker service update --replicas 1 my-nginx</span><br><span class="line"></span><br><span class="line">docker service scale my-nginx=4                  <span class="comment"># 效果一样，更方便一点</span></span><br><span class="line"><span class="comment"># my-nginx scaled to 4</span></span><br><span class="line"></span><br><span class="line">docker service rm my-nginx                       <span class="comment"># 移除服务</span></span><br></pre></td></tr></table></figure>

<h2 id="概念总结"><a href="#概念总结" class="headerlink" title="概念总结"></a>概念总结</h2><ul>
<li>swarm: 集群的管理和编排。 docker 可以创建一个集群，其他节点可以加入(worker, manager)</li>
<li>Node: docker节点(我觉得理解为虚拟机会比较好)，多个节点组成集群网络</li>
<li>service: 任务，可以在管理节点或工作节点运行</li>
<li>Task: 容器内的命令，细节任务</li>
</ul>
<p>命令 -&gt; 管理节点 -&gt; api -&gt; 调度 -&gt; 工作节点</p>
<p>Publish Mode:</p>
<ul>
<li>swarm</li>
<li>Overlay</li>
<li>ingress - 特殊的 overlay 网络，由负载均衡功能</li>
</ul>
<p><code>docker network ls</code> + <code>docker network inspect ingress</code> 可以看到 swarm 集群中的机子都在这个网络中</p>
<h2 id="以后还要学-Go"><a href="#以后还要学-Go" class="headerlink" title="以后还要学 Go"></a>以后还要学 Go</h2><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Q: 在最后的 spring 项目实战的 dockerfile 中我明明写了 EXPOSE 8080 为什么我在 run 的时候还要加 p 参数？<br>A: 查看了一下文档，发现这个 EXPOSE 只是起说明作用， run 的时候并不会自动暴露，但是他有一个好处，就是你写了之后，如果用 P 随机的模式的话，他会自动暴露</p>
<p>官方定义如下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">EXPOSE 指令是声明容器运行时提供服务的端口，这只是一个声明，在容器运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；</span><br><span class="line"></span><br><span class="line">另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</span><br><span class="line">要将 EXPOSE 和在运行时使用 -p &lt;宿主端口&gt;:&lt;容器端口&gt; 区分开来。-p，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>弹射起步</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令行与shell脚本编程大全 第二章 Shell 脚本基础知识</title>
    <url>/hexo/2021/05/24/LSCASSB-partii-shell-scripting-basics/</url>
    <content><![CDATA[<p>Linux命令行与shell脚本编程大全 3rd 第二部分命令实验记录</p>
<h2 id="Chapter-11-Basic-Script-building"><a href="#Chapter-11-Basic-Script-building" class="headerlink" title="Chapter 11: Basic Script building"></a>Chapter 11: Basic Script building</h2><h3 id="Using-Multiple-Commands"><a href="#Using-Multiple-Commands" class="headerlink" title="Using Multiple Commands"></a>Using Multiple Commands</h3><p>使用分号分隔命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">date ; who</span><br><span class="line"><span class="comment"># Mon May 24 12:36:11 CST 2021</span></span><br><span class="line"><span class="comment"># i306454  console  May 24 11:18 </span></span><br><span class="line"><span class="comment"># i306454  ttys000  May 24 11:18 </span></span><br><span class="line"><span class="comment"># i306454  ttys003  May 24 11:33</span></span><br></pre></td></tr></table></figure>

<h3 id="Creating-a-Script-File"><a href="#Creating-a-Script-File" class="headerlink" title="Creating a Script File"></a>Creating a Script File</h3><ol>
<li>新建文件 mysh.sh</li>
<li>填入内容</li>
<li>设置环境</li>
<li>运行</li>
</ol>
<blockquote>
<p>However, the fi rst line of a shell script fi le is a special case, and the pound sign followed by the exclamation point tells the shell what shell to run the script under<br>Shell script 的第一行表示你想要用哪个 Shell 运行你的脚本</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># This scri displays the date and who&#x27;s logged on</span></span><br><span class="line">date</span><br><span class="line">who</span><br></pre></td></tr></table></figure>

<p>尝试运行 <code>mysh.sh</code>，运行失败 <code>bash: mysh.sh: command not found</code></p>
<p>这是你有两种选择</p>
<ol>
<li>将包含脚本的目录添加到 PATH 中，eg: <code>export PATH=$PATH:path_to_folder</code></li>
<li>使用相对或绝对路径调用脚本, eg: <code>./mysh.sh</code></li>
</ol>
<p>PS: 发现直接用 <code>sh mysh.sh</code> 即可，还省去了赋权的操作</p>
<p>这里直接使用相对路径调用 <code>./mysh.sh</code>, 运行失败 <code>bash: ./mysh.sh: Permission denied</code>。通过 <code>ls -l mysh.sh</code> 查看权限, 发现并没有权限，然后赋权,再次尝试，运行成功。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -l mysh.sh </span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  70 May 24 12:40 mysh.sh</span></span><br><span class="line"></span><br><span class="line">chmod u+x mysh.sh </span><br><span class="line">./mysh.sh </span><br><span class="line"><span class="comment"># Mon May 24 13:11:37 CST 2021</span></span><br><span class="line"><span class="comment"># i306454  console  May 24 11:18 </span></span><br><span class="line"><span class="comment"># i306454  ttys000  May 24 11:18</span></span><br></pre></td></tr></table></figure>

<h3 id="Displaying-Messages"><a href="#Displaying-Messages" class="headerlink" title="Displaying Messages"></a>Displaying Messages</h3><p>使用 <code>echo</code> 打印信息</p>
<ul>
<li>当输出内容中没有什么特殊符号时，可以直接在 echo 后面接你要的内容</li>
<li>当输出内容中包含单/双引号时，需要将 echo 的内容包含在 双/单引号中</li>
<li>默认 echo 是会换行的，使用 <code>echo -n xxx</code> 取消换行</li>
</ul>
<h3 id="Using-Variables"><a href="#Using-Variables" class="headerlink" title="Using Variables"></a>Using Variables</h3><p><code>set</code>: 打印当前环境的所有环境变量, 输出内容包括 PATH，HOME 等</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span></span><br><span class="line"><span class="comment"># ANT_HOME=/Users/i306454/SAPDevelop/tools/apache-ant-1.8.4</span></span><br><span class="line"><span class="comment"># BASH=/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># BASHOPTS=checkwinsize:cmdhist:complete_fullquote:expand_aliases:extquote:force_fignore:globasciiranges:hostcomplete:interactive_comments:progcomp:promptvars:sourcepath</span></span><br><span class="line"><span class="comment"># BASH_ALIASES=()</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>在你的 sh 脚本中，可以调用这些变量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;User info for userid <span class="variable">$USER</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> UID: <span class="variable">$UID</span></span><br><span class="line"><span class="built_in">echo</span> HOME: <span class="variable">$HOME</span></span><br><span class="line"></span><br><span class="line">sh test_var.sh </span><br><span class="line"><span class="comment"># User info for userid i306454</span></span><br><span class="line"><span class="comment"># UID: 501</span></span><br><span class="line"><span class="comment"># HOME: /Users/i306454</span></span><br></pre></td></tr></table></figure>

<p>当你在输出语句中想要打印 <code>$</code> 这个特殊字符时，只需要在前面加斜杠</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This book cost <span class="variable">$15</span>&quot;</span></span><br><span class="line"><span class="comment"># This book cost 5</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This book cost \$15&quot;</span></span><br><span class="line"><span class="comment"># This book cost $15</span></span><br></pre></td></tr></table></figure>

<p>PS: <code>$&#123;variable&#125;</code> 也是合法的，这种声明起到强调变量名的作用</p>
<p>变量名限制：最多 20 个字符，可以是英文，数组或者下划线，区分大小写。使用等号链接，中间<strong>不允许</strong>有空格</p>
<blockquote>
<p>Command substitution</p>
</blockquote>
<p>你可以通过一下方式将 cmd 输出的值赋给你的变量</p>
<ol>
<li><code>`</code> 反引号符(backtick character)</li>
<li><code>$()</code> 表达式</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tdate=`date`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$tdate</span></span><br><span class="line"><span class="comment"># Mon May 24 15:46:51 CST 2021</span></span><br><span class="line">tdate2=$(date)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$tdate2</span></span><br><span class="line"><span class="comment"># Mon May 24 15:47:39 CST 2021</span></span><br></pre></td></tr></table></figure>

<p>这只是初级用法，更骚的操作是将输出定制之后用作后续命令的输出，比如下面这个例子，将文件夹下的所有目录写进 log 文件，并用时间戳做后缀 <code>today=$(date +%y%m%d); ls -al /usr/bin &gt; log.$today</code></p>
<p><strong>Caution:</strong> Command substitution creates what’s called a subshell to run the enclosed command. A subshell is a separate child shell generated from the shell that’s running the script. Because of that, any variables you create in the script aren’t available to the subshell command.</p>
<p>Command substitution 这种使用方法会创建一个子 shell 计算变量值，子 shell 运行的时候是看不到你外面的 shell 中定义的变量的</p>
<h3 id="Redirecting-Input-and-Output"><a href="#Redirecting-Input-and-Output" class="headerlink" title="Redirecting Input and Output"></a>Redirecting Input and Output</h3><blockquote>
<p>Output redirection</p>
</blockquote>
<p>可以使用大于号(greater-than symbol)将输出导入文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">date &gt; test6</span><br><span class="line">ls -l test6</span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  29 May 24 18:31 test6</span></span><br><span class="line">cat test6</span><br><span class="line"><span class="comment"># Mon May 24 18:31:40 CST 2021</span></span><br></pre></td></tr></table></figure>

<p>如果文件已经存在，则覆盖原有内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">who &gt; test6</span><br><span class="line">cat test6</span><br><span class="line"><span class="comment"># i306454  console  May 24 11:18 </span></span><br><span class="line"><span class="comment"># i306454  ttys000  May 24 11:18 </span></span><br><span class="line"><span class="comment"># i306454  ttys003  May 24 18:00</span></span><br></pre></td></tr></table></figure>

<p>使用两个大于号(double greater-than symbol)来做 append 操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">date &gt;&gt; test6</span><br><span class="line">cat test6</span><br><span class="line"><span class="comment"># i306454  console  May 24 11:18 </span></span><br><span class="line"><span class="comment"># i306454  ttys000  May 24 11:18 </span></span><br><span class="line"><span class="comment"># i306454  ttys003  May 24 18:00 </span></span><br><span class="line"><span class="comment"># Mon May 24 18:35:12 CST 2021</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Input redirection</p>
</blockquote>
<p>使用小于号(less-htan symbol)将文件中的内容导入输入流 <code>command &lt; inputfile</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wc &lt; test6</span><br><span class="line"><span class="comment">#    4      21     125</span></span><br><span class="line"><span class="comment"># wc: show lines, words and bytes of input</span></span><br></pre></td></tr></table></figure>

<p>除了从文件导入，从命令行直接导入多行也是可行的，术语叫做 <code>inline input redirection</code>。这个之前在之前阿里云 setup 环境的时候操作过的。使用两个小于号(&lt;&lt;) + 起止描述符实现</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wc &lt;&lt; EOF</span><br><span class="line">&gt; <span class="built_in">test</span> String 1</span><br><span class="line">&gt; <span class="built_in">test</span> String 2</span><br><span class="line">&gt; <span class="built_in">test</span> String 3</span><br><span class="line">&gt; EOF</span><br><span class="line"><span class="comment"># 3       9      42</span></span><br></pre></td></tr></table></figure>

<h3 id="Pipes"><a href="#Pipes" class="headerlink" title="Pipes"></a>Pipes</h3><p>使用方式 <code>command1 | command2</code></p>
<blockquote>
<p>Don’t think of piping as running two commands back to back. The Linux system actually runs both commands at the same time, linking them together internally in the system. As the fi rst command produces output, it’s sent immediately to the second command. No inter-mediate fi les or buffer areas are used to transfer the data.<br>pipe 中的命令是同时执行的，变量传递不涉及到中间变量</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls </span><br><span class="line"><span class="comment"># input.txt       mysh.sh         output.txt      test_echo.sh</span></span><br><span class="line"><span class="comment"># log.210524      out.txt         test6           test_var.sh</span></span><br><span class="line">ls | sort</span><br><span class="line"><span class="comment"># input.txt</span></span><br><span class="line"><span class="comment"># log.210524</span></span><br><span class="line"><span class="comment"># mysh.sh</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>pipe 可以无限级联 <code>cmd1 | cmd2 | cmd3 | ...</code></p>
<h3 id="Performing-Math"><a href="#Performing-Math" class="headerlink" title="Performing Math"></a>Performing Math</h3><p>Bash 中提供了两种方式进行计算</p>
<blockquote>
<p>The expr command</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">expr 1 + 5</span><br><span class="line"><span class="comment"># 6</span></span><br></pre></td></tr></table></figure>

<p>expr 支持常规算数运行 + 与或非 + 正则 + 字符串操作等</p>
<p>这个 expr 表达式有点尴尬，他的一些常规运算是要加反斜杠的，简直无情</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">expr 1 * 6</span><br><span class="line"><span class="comment"># expr: syntax error</span></span><br><span class="line">expr 1 \* 6</span><br><span class="line"><span class="comment"># 6</span></span><br></pre></td></tr></table></figure>

<p>这个还算好的，如果在 sh 文件中调用，表达式就更操蛋了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line">var1=10</span><br><span class="line">var2=20</span><br><span class="line">var3=$(expr <span class="variable">$var2</span> / <span class="variable">$var1</span>)</span><br><span class="line"><span class="built_in">echo</span> The result is <span class="variable">$var3</span></span><br><span class="line"></span><br><span class="line">sh test_expr.sh </span><br><span class="line"><span class="comment"># The result is 2</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Using brackets</p>
</blockquote>
<p>Bash 中保留 <code>expr</code> 是为了兼容 Bourne shell,同时它提供了一种更简便的计算方式，<code>$[ operation ]</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var1=$[1 + 5]</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var1</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line">var2=$[ <span class="variable">$var1</span> * 2 ]</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var2</span></span><br><span class="line"><span class="comment"># 12</span></span><br></pre></td></tr></table></figure>

<p>方括号表达式可以自动完成计算符号的识别，不需要用反斜杠做转义符，唯一的缺陷是，他只能做整数运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var1=100</span><br><span class="line">var2=45</span><br><span class="line">var3=$[<span class="variable">$var1</span>/<span class="variable">$var2</span>]</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var3</span></span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>A floating-point solution</p>
</blockquote>
<p>bc: bash calculation, 他可以识别一下内容</p>
<ul>
<li>Number(integer + floating point)</li>
<li>Variables(simple variables + arrays)</li>
<li>Comments(# or /* … */)</li>
<li>Expressions</li>
<li>Programming statements(such as if-then statements)</li>
<li>Functions</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bc</span><br><span class="line">bc 1.06</span><br><span class="line">Copyright 1991-1994, 1997, 1998, 2000 Free Software Foundation, Inc.</span><br><span class="line">This is free software with ABSOLUTELY NO WARRANTY.</span><br><span class="line">For details <span class="built_in">type</span> `warranty<span class="string">&#x27;.</span></span><br><span class="line"><span class="string">12 * 5.4</span></span><br><span class="line"><span class="string">64.8</span></span><br><span class="line"><span class="string">3.156 * (3 + 5)</span></span><br><span class="line"><span class="string">25.248</span></span><br><span class="line"><span class="string">quit</span></span><br></pre></td></tr></table></figure>

<p>可以通过 scale 关键字指定精确位, 默认 scale 为 0, <code>-q</code> 用于跳过命令文字说明</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bc -q </span><br><span class="line">3.44 / 5</span><br><span class="line">0</span><br><span class="line">scale=4</span><br><span class="line">3.44 / 5</span><br><span class="line">.6880</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>

<p>如前述，bc 可以识别变量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bc -q</span><br><span class="line">var1=10</span><br><span class="line">var1 * 4</span><br><span class="line">40</span><br><span class="line">var2 = var1 / 5</span><br><span class="line"><span class="built_in">print</span> var2</span><br><span class="line">2</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>

<p>你可以通过 Command substitution，在 sh 脚本中调用 bc, 形式为 <code>variable=$(echo &quot;options; expression&quot; | bc)</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test9</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># var1=$(echo &quot;scale=4; 3.44/5&quot; | bc)</span></span><br><span class="line"><span class="comment"># echo This answer is $var1</span></span><br><span class="line"></span><br><span class="line">sh test9</span><br><span class="line"><span class="comment"># This answer is .6880</span></span><br></pre></td></tr></table></figure>

<p>脚本中定义的变量也可以使用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test10</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># var1=100</span></span><br><span class="line"><span class="comment"># var2=45</span></span><br><span class="line"><span class="comment"># var3=$(echo &quot;scale=4; $var1 / $var2&quot; | bc)</span></span><br><span class="line"><span class="comment"># echo The answer for this is $var3bash-5.1$ </span></span><br><span class="line">sh test10</span><br><span class="line"><span class="comment"># The answer for this is 2.2222</span></span><br></pre></td></tr></table></figure>

<p>当遇到很长的计算表达式时，可以用 &lt;&lt; 将他们串起来</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test12</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># var1=10.46</span></span><br><span class="line"><span class="comment"># var2=43.67</span></span><br><span class="line"><span class="comment"># var3=33.2</span></span><br><span class="line"><span class="comment"># var4=71</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># var5=$(bc &lt;&lt; EOF</span></span><br><span class="line"><span class="comment"># scale = 4</span></span><br><span class="line"><span class="comment"># a1 = ($var1 * $var2)</span></span><br><span class="line"><span class="comment"># b1 = ($var3 * $var4)</span></span><br><span class="line"><span class="comment"># a1 + b1</span></span><br><span class="line"><span class="comment"># EOF</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># echo The final answer for this mess is $var5</span></span><br><span class="line">sh test12</span><br><span class="line"><span class="comment"># The final answer for this mess is 2813.9882</span></span><br></pre></td></tr></table></figure>

<p>PS: 在上面的脚本中我们用了 Command substitution 所以中间的变量前面都是要加 <code>$</code> 的，当终端调用 <code>bc</code> 时就不需要了</p>
<h3 id="Exiting-the-Script"><a href="#Exiting-the-Script" class="headerlink" title="Exiting the Script"></a>Exiting the Script</h3><p>There’s a more elegant way of completing things available to us. 每个命令结束时，系统都会分配一个 0-255 之间的整数给他</p>
<blockquote>
<p>Checking the exit status</p>
</blockquote>
<p>Linux 使用 <code>$?</code> 表示上一条命令的执行状态</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">date</span><br><span class="line"><span class="comment"># Mon May 24 19:47:29 CST 2021</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"><span class="comment"># 0</span></span><br></pre></td></tr></table></figure>

<p>运行正常，返回 0。如果有问题，则返回一个非零</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">asd</span><br><span class="line"><span class="comment"># bash: asd: command not found</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"><span class="comment"># 127</span></span><br></pre></td></tr></table></figure>

<p>常见错误码表</p>
<table>
<thead>
<tr>
<th align="left">Code</th>
<th align="left">Desc</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">Success</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">General unknown error</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">Misuse of shell command</td>
</tr>
<tr>
<td align="left">126</td>
<td align="left">The cmd can’t execute</td>
</tr>
<tr>
<td align="left">127</td>
<td align="left">Cmd not found</td>
</tr>
<tr>
<td align="left">128</td>
<td align="left">Invalid exit argument</td>
</tr>
<tr>
<td align="left">128+x</td>
<td align="left">Fatal err with Linux singal x</td>
</tr>
<tr>
<td align="left">130</td>
<td align="left">Cmd terminated with Ctrl+C</td>
</tr>
<tr>
<td align="left">255</td>
<td align="left">Exit status out of range</td>
</tr>
</tbody></table>
<blockquote>
<p>The exit command</p>
</blockquote>
<p>exit 关键字让你可以定制脚本的返回值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test13</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # testing the exit status</span></span><br><span class="line"><span class="comment"># var1=10</span></span><br><span class="line"><span class="comment"># var2=20</span></span><br><span class="line"><span class="comment"># var3=$[$var1 + $var2]</span></span><br><span class="line"><span class="comment"># echo The answer is $var3</span></span><br><span class="line"><span class="comment"># exit 5</span></span><br><span class="line"></span><br><span class="line">chmod u+x test13</span><br><span class="line">./test13</span><br><span class="line"><span class="comment"># The answer is 30</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"><span class="comment"># 5</span></span><br></pre></td></tr></table></figure>

<p>PS: 这里看出来差别了，如果我直接用 sh test13 执行的话，结果是 0</p>
<p>这里需要指出的是，exit code 最大为 255 如果超出了，系统会自己做修正</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test14</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # exit code more than 255</span></span><br><span class="line"><span class="comment"># var=300</span></span><br><span class="line"><span class="comment"># exit $var</span></span><br><span class="line"></span><br><span class="line">chmod u+x test14</span><br><span class="line">./test14</span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"><span class="comment"># 44</span></span><br></pre></td></tr></table></figure>

<h2 id="Chapter-12-Using-Structured-Commands"><a href="#Chapter-12-Using-Structured-Commands" class="headerlink" title="Chapter 12: Using Structured Commands"></a>Chapter 12: Using Structured Commands</h2><p>本章内容主要包括 loigc flow control 部分</p>
<blockquote>
<p>Working with the if-then Statement</p>
</blockquote>
<p>if-then 是最基本的控制方式，format 如下, 判断依据是 command 的 exit code, 如果是 0 则表示 success，其他的则为 fail.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">command</span></span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>positive sample 如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test1.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # testing the if statement</span></span><br><span class="line"><span class="comment"># if pwd</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#     echo &quot;It worked&quot;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line">chmod u+x test1.sh </span><br><span class="line">./test1.sh</span><br><span class="line"><span class="comment"># /Users/i306454/gitStore/hexo</span></span><br><span class="line"><span class="comment"># It worked</span></span><br></pre></td></tr></table></figure>

<p>negative sample 如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test2.sh </span><br><span class="line"><span class="comment"># # #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # # testing a bad command</span></span><br><span class="line"><span class="comment"># if IamNotACommand</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#     echo &quot;It worked&quot;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"><span class="comment"># echo &quot;We are outside the if statement&quot;</span></span><br><span class="line">chmod u+x test2.sh</span><br><span class="line">./test2.sh </span><br><span class="line"><span class="comment"># ./test2.sh: line 3: IamNotACommand: command not found</span></span><br><span class="line"><span class="comment"># We are outside the if statement</span></span><br></pre></td></tr></table></figure>

<p>PS: <code>if-then</code> 可以改一下 format，将 if-then 写在一行，看上去更贴近其他语言的表现形式</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">command</span>; <span class="keyword">then</span></span><br><span class="line">    commands</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>then 中可以写代码段，如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test3.sh</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # testing multiple commands in the then section</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># testuser=MySQL</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># if grep $testuser /etc/passwd</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#     echo &quot;This is my first command&quot;</span></span><br><span class="line"><span class="comment">#     echo &quot;This is my second command&quot;</span></span><br><span class="line"><span class="comment">#     echo &quot;I can even put in other commands beside echo:&quot;</span></span><br><span class="line"><span class="comment">#     ls -a /home/$testuser/.b*</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line">./test3.sh </span><br><span class="line"><span class="comment"># _mysql:*:74:74:MySQL Server:/var/empty:/usr/bin/false</span></span><br><span class="line"><span class="comment"># This is my first command</span></span><br><span class="line"><span class="comment"># This is my second command</span></span><br><span class="line"><span class="comment"># I can even put in other commands beside echo:</span></span><br><span class="line"><span class="comment"># ls: /home/MySQL/.b*: No such file or directory</span></span><br></pre></td></tr></table></figure>

<p>PS：由于是 mac 系统，有点出入，但是目的还是达到了。顺便测了一下缩进，将 echo 的缩进去了一样 work</p>
<blockquote>
<p>Exploring the if-then-else Statement</p>
</blockquote>
<p>格式如下, </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">command</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    commands</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    commands</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>改进 test3.sh 如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # testing multiple commands in the then section</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># testuser=NoSuchUser</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># if grep $testuser /etc/passwd</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#     echo &quot;This is my first command&quot;</span></span><br><span class="line"><span class="comment">#     echo &quot;This is my second command&quot;</span></span><br><span class="line"><span class="comment">#     echo &quot;I can even put in other commands beside echo:&quot;</span></span><br><span class="line"><span class="comment">#     ls -a /home/$testuser/.b*</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#     echo &quot;The user $testuser does not exist on this system.&quot;</span></span><br><span class="line"><span class="comment">#     echo</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line">./test4.sh </span><br><span class="line"><span class="comment"># The user NoSuchUser does not exist on this system.</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Nesting if</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> command1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    commands</span><br><span class="line"><span class="keyword">elif</span> command2</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    more commands</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>写脚本检测帐户是否存在，然后检测用户文件夹是否存在</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test5.sh</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # testing nested ifs - use elif</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># testuser=NoSuchUser</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># if grep $testuser /etc/passwd</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#     echo &quot;The user $testuser exists on this system&quot;</span></span><br><span class="line"><span class="comment"># elif ls -d /home/$testuser</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#     echo &quot;The user $testuser does not exist on this system&quot;</span></span><br><span class="line"><span class="comment">#     echo &quot;However, $testuset has directory.&quot;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line">chmod u+x test5.sh </span><br><span class="line">./test5.sh </span><br><span class="line"><span class="comment"># ls: /home/NoSuchUser: No such file or directory</span></span><br></pre></td></tr></table></figure>

<p><strong>Tips</strong>: Keep in mind that, with an elif statement, any else statements immediately following it are for that elif code block. They are not part of a preceding if-then statement code block.(elif 之后紧跟的 else 是一对的，它不属于前面的 if-then)</p>
<p>多个 elif 串连的形式</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> command1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">command</span> <span class="built_in">set</span> 1</span><br><span class="line"><span class="keyword">elif</span> command2</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">command</span> <span class="built_in">set</span> 2</span><br><span class="line"><span class="keyword">elif</span> command3</span><br><span class="line"><span class="keyword">then</span>    </span><br><span class="line">    <span class="built_in">command</span> <span class="built_in">set</span> 3</span><br><span class="line"><span class="keyword">elif</span> command4</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">command</span> <span class="built_in">set</span> 4</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Trying the test Command</p>
</blockquote>
<p>if-then 条件判断只支持 exit code，为了使它更通用，Linux 提供了 test 工具集，如果 test 判定结果为 TRUE 则返回 0 否则非 0，格式为 <code>test condition</code>, 将它和 if-then 结合，格式如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    commands</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>如果没有写 condition，则默认为非 0 返回值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test6.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Testing the test command</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># if test</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#     echo &quot;No expression return a True&quot;</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#     echo &quot;No expression return a False&quot;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line">./test6.sh </span><br><span class="line"><span class="comment"># No expression return a False</span></span><br></pre></td></tr></table></figure>

<p>将测试条件替换为变量，输出 True 的语句</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test6.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Testing the test command</span></span><br><span class="line"><span class="comment"># my_variable=&quot;Full&quot;</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># if my_variable</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#     echo &quot;The $my_variable expression return a True&quot;</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#     echo &quot;The $my_variable expression return a False&quot;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line">./test6.sh </span><br><span class="line"><span class="comment"># The Full expression return a False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># replace my_variable=&quot;&quot;</span></span><br><span class="line">./test6.sh </span><br><span class="line"><span class="comment"># The  expression return a False</span></span><br></pre></td></tr></table></figure>

<p>测试条件还可以简写成如下形式</p>
<p>Be careful; you <strong>must have a space</strong> after the first bracket and a space before the last bracket, or you’ll get an error message.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    commands</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>test condition 可以测试如下三种情景</p>
<ul>
<li>Numeric comparisons</li>
<li>String comparisons</li>
<li>File comparisions</li>
</ul>
<blockquote>
<p>Using numeric comparisons</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">Comparison</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">n1 -eq n2</td>
<td align="left">Check if n1 is equal to n2</td>
</tr>
<tr>
<td align="left">n1 -ge n2</td>
<td align="left">Check if n1 greater than or equal to n2</td>
</tr>
<tr>
<td align="left">n1 -gt n2</td>
<td align="left">Check if n1 is greater than n2</td>
</tr>
<tr>
<td align="left">n1 -le n2</td>
<td align="left">Check if n1 is less than or equal to n2</td>
</tr>
<tr>
<td align="left">n1 -lt n2</td>
<td align="left">Check if n1 less than n2</td>
</tr>
<tr>
<td align="left">n1 -ne n2</td>
<td align="left">Check if n1 is not equal to n2</td>
</tr>
</tbody></table>
<p>test condition 对变量也是有效的，示例如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat numeric_test.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Using numeric test eveluations</span></span><br><span class="line"><span class="comment"># value1=10</span></span><br><span class="line"><span class="comment"># value2=11</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># if [ $value1 -gt 5 ]</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#     echo &quot;The test value $value1 is greater than 5&quot;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># if [ $value1 -eq $value2 ]</span></span><br><span class="line"><span class="comment"># then echo &quot;The values are equal&quot;</span></span><br><span class="line"><span class="comment"># else </span></span><br><span class="line"><span class="comment">#     echo &quot;The values are different&quot;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line">./numeric_test.sh </span><br><span class="line"><span class="comment"># The test value 10 is greater than 5</span></span><br><span class="line"><span class="comment"># The values are different</span></span><br></pre></td></tr></table></figure>

<p>但是 test condition 有个缺陷，它不能测试浮点型数据</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">value1=5.55</span><br><span class="line">[ <span class="variable">$value1</span> -gt 5 ]; <span class="built_in">echo</span> $?</span><br><span class="line"><span class="comment"># bash: [: 5.55: integer expression expected</span></span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

<p><strong>Caution:</strong> Remember that the only numbers the bash shell can handle are integers.</p>
<blockquote>
<p>Using string comparisons</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">Comparison</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">str1 = str2</td>
<td align="left">Check if str1 is the same as string str2</td>
</tr>
<tr>
<td align="left">str1 != str2</td>
<td align="left">Check if str1 is not the same as string str2</td>
</tr>
<tr>
<td align="left">str1 &lt; str2</td>
<td align="left">Check if str1 is less than str2</td>
</tr>
<tr>
<td align="left">str1 &gt; str2</td>
<td align="left">Check if str1 is greater than string str2</td>
</tr>
<tr>
<td align="left">-n str1</td>
<td align="left">Check if str1 has a length greater than zero</td>
</tr>
<tr>
<td align="left">-z str1</td>
<td align="left">Check if str1 has a length of zero</td>
</tr>
</tbody></table>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test8.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Testing string equality</span></span><br><span class="line"><span class="comment"># testuser=baduser</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># if [ $USER != $testuser ]</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#     echo &quot;This is $testuser&quot;</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#     echo &quot;Welcome $testuser&quot;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line">./test8.sh </span><br><span class="line"><span class="comment"># This is baduser</span></span><br></pre></td></tr></table></figure>

<p>在处理 <code>&lt;</code> 和 <code>&gt;</code> 时，shell 会有一些很奇怪的注意点</p>
<ul>
<li><code>&lt;</code> 和 <code>&gt;</code> 必须使用转义符号，不然系统会把他们当作流操作</li>
<li><code>&lt;</code> 和 <code>&gt;</code> 的用法和 sort 中的用法时不一致的</li>
</ul>
<p>针对第一点的测试，测试中，比较符号被当成了流操作符，新生产了一个 hockey 文件。这个操作 exit code 是 0 所以执行了 true 的 loop. 你需要将条件语句改为 <code>if [ $val1 \&gt; $val2 ]</code> 才能生效</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat badtest.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # mis-using string comparisons</span></span><br><span class="line"><span class="comment"># val1=baseball</span></span><br><span class="line"><span class="comment"># val2=hockey</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># if [ $val1 &gt; $val2 ]</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#     echo &quot;$val1 is greater than $val2&quot;</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#     echo &quot;$val1 is less than $val2&quot;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line">/badtest.sh </span><br><span class="line"><span class="comment"># baseball is greater than hockey</span></span><br><span class="line">ls</span><br><span class="line"><span class="comment"># badtest.sh      hockey</span></span><br></pre></td></tr></table></figure>

<p>针对第二点，sort 和 test 对 string 的比较是相反的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test9b.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # testing string sort order</span></span><br><span class="line"><span class="comment"># val1=Testing</span></span><br><span class="line"><span class="comment"># val2=testing</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># if [ $val1 \&gt; $val2 ]</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#     echo &quot;$val1 is greater than $val2&quot;</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#     echo &quot;$val1 is less than $val2&quot;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line">./test9b.sh </span><br><span class="line">Testing is less than testing</span><br><span class="line"></span><br><span class="line">sort &lt;&lt; EOF</span><br><span class="line">&gt; Testing</span><br><span class="line">&gt; testing</span><br><span class="line">&gt; EOF</span><br><span class="line">Testing</span><br><span class="line">testing</span><br></pre></td></tr></table></figure>

<p>PS: 这里和书本上有出入，我在 MacOS 里测试两者是一致的，大写要小于小些，可能 Ubantu 上不一样把，有机会可以测一测</p>
<p><strong>Note:</strong> The test command and test expressions use the standard mathematical comparison symbols for string compari-sons and text codes for numerical comparisons. This is a subtle feature that many programmers manage to get reversed. If you use the mathematical comparison symbols for numeric values, the shell interprets them as string values and may not produce the correct results.</p>
<p>test condition 的处理模式是 数字 + test codes(-eq); string + 运算符(&lt;/&gt;/=)，刚好是交叉的，便于记忆</p>
<p>对 <code>-n</code> 和 <code>-z</code> 进行测试，undefined 的变量默认长度为 0</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test10.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # testing string length</span></span><br><span class="line"><span class="comment"># val1=testing</span></span><br><span class="line"><span class="comment"># val2=&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># if [ -n $val1 ]</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#     echo &quot;The string &#x27;$val1&#x27; is not empty&quot;</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#     echo &quot;The string &#x27;$val1&#x27; is empty&quot;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># if [ -z $val2 ]</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#     echo &quot;The string &#x27;$val2&#x27; is empty&quot;</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#     echo &quot;The string &#x27;$val2&#x27; is not empty&quot;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># if [ -z $val3 ]</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#     echo &quot;The string &#x27;$val3&#x27; is empty&quot;</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#     echo &quot;The string &#x27;$val3&#x27; is not empty&quot;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line">./test10.sh </span><br><span class="line"><span class="comment"># The string &#x27;testing&#x27; is not empty</span></span><br><span class="line"><span class="comment"># The string &#x27;&#x27; is empty</span></span><br><span class="line"><span class="comment"># The string &#x27;&#x27; is empty</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Using file comparisons</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">Comparison</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-d file</td>
<td align="left">Check if file exists and is a directory</td>
</tr>
<tr>
<td align="left">-e file</td>
<td align="left">Check if file or directory exists</td>
</tr>
<tr>
<td align="left">-f file</td>
<td align="left">Check if file exists and is a file</td>
</tr>
<tr>
<td align="left">-r file</td>
<td align="left">Check if file exists and is readable</td>
</tr>
<tr>
<td align="left">-s file</td>
<td align="left">Check if file exists and is not empty</td>
</tr>
<tr>
<td align="left">-w file</td>
<td align="left">Check if file exists and is writable</td>
</tr>
<tr>
<td align="left">-x file</td>
<td align="left">Check if file exists and is executable</td>
</tr>
<tr>
<td align="left">-O file</td>
<td align="left">Check if file exists and is owned by the current user</td>
</tr>
<tr>
<td align="left">-G file</td>
<td align="left">Check if file exists and the default group is the same as the current user</td>
</tr>
<tr>
<td align="left">file1 -nt file2</td>
<td align="left">Check if file1 is newer than file2</td>
</tr>
<tr>
<td align="left">file1 -ot file2</td>
<td align="left">Check if file1 is older than file2</td>
</tr>
</tbody></table>
<p>测试范例如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir test_folder</span><br><span class="line">[ -d test_folder ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># true</span></span><br><span class="line">[ -e test_folder ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># true</span></span><br><span class="line">[ -e xxx ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># false</span></span><br><span class="line"></span><br><span class="line">chmod u+xrw test_file.sh </span><br><span class="line">ls -l test_file.sh </span><br><span class="line"><span class="comment"># -rwxr--r--  1 i306454  staff  190 May 25 17:51 test_file.sh</span></span><br><span class="line">[ -r test_file.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># true</span></span><br><span class="line">[ -w test_file.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># true</span></span><br><span class="line">[ -x test_file.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># true</span></span><br><span class="line"></span><br><span class="line">chmod u-rxw test_file.sh </span><br><span class="line">ls -l test_file.sh </span><br><span class="line"><span class="comment"># ----r--r--  1 i306454  staff  190 May 25 17:51 test_file.sh</span></span><br><span class="line">[ -r test_file.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># false</span></span><br><span class="line">[ -w test_file.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># false</span></span><br><span class="line">[ -x test_file.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># false</span></span><br><span class="line"></span><br><span class="line">touch tmp_file</span><br><span class="line">[ -s tmp_file ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># false</span></span><br><span class="line"><span class="built_in">echo</span> new line &gt;&gt; tmp_file </span><br><span class="line">[ -s tmp_file ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># true</span></span><br><span class="line"></span><br><span class="line">ls -l</span><br><span class="line"><span class="comment"># total 8</span></span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  9 May 25 17:59 tmp_file</span></span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  0 May 25 18:01 tmp_file2</span></span><br><span class="line">[ tmp_file2 -nt tmp_file ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># true</span></span><br><span class="line">[ tmp_file -nt tmp_file2 ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># false</span></span><br><span class="line">[ tmp_file -ot tmp_file2 ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># true</span></span><br><span class="line">[ tmp_file2 -ot tmp_file ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># false</span></span><br></pre></td></tr></table></figure>

<h3 id="Considering-Compound-Testing"><a href="#Considering-Compound-Testing" class="headerlink" title="Considering Compound Testing"></a>Considering Compound Testing</h3><p>组合条件</p>
<ul>
<li>[ condition1 ] &amp;&amp; [  condition2 ]</li>
<li>[ condition1 ] || [  condition2 ]</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[ -f tmp_file ] &amp;&amp; [ -d <span class="variable">$HOME</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># true</span></span><br></pre></td></tr></table></figure>

<h3 id="Working-with-Advanced-if-then-Features"><a href="#Working-with-Advanced-if-then-Features" class="headerlink" title="Working with Advanced if-then Features"></a>Working with Advanced if-then Features</h3><p>if-then 的增强模式</p>
<ul>
<li>Double parentheses for mathematical expressions(双括号)</li>
<li>Double square brackets for advanced string handling functions(双方括号)</li>
</ul>
<blockquote>
<p>Using double parentheses</p>
</blockquote>
<p>创括号是针对算数运算的</p>
<p>test command 只提供了简单的算术运算，双括号提供的算力更强，效果和其他语言类似，格式 <code>(( expression ))</code>. 除了 test 支持的运算，它还支持如下运算</p>
<table>
<thead>
<tr>
<th align="left">Comparison</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">val++</td>
<td align="left">Post-incremnet</td>
</tr>
<tr>
<td align="left">val–</td>
<td align="left">Post-decrement</td>
</tr>
<tr>
<td align="left">++val</td>
<td align="left">Pre-increment</td>
</tr>
<tr>
<td align="left">–val</td>
<td align="left">Pre-decrement</td>
</tr>
<tr>
<td align="left">!</td>
<td align="left">Logical negation</td>
</tr>
<tr>
<td align="left">~</td>
<td align="left">Bitwise negation</td>
</tr>
<tr>
<td align="left">**</td>
<td align="left">Exponentiation</td>
</tr>
<tr>
<td align="left">&lt;&lt;</td>
<td align="left">Left bitwise shift</td>
</tr>
<tr>
<td align="left">&gt;&gt;</td>
<td align="left">Right bitwise shift</td>
</tr>
<tr>
<td align="left">&amp;</td>
<td align="left">Bitwise Boolean AND</td>
</tr>
<tr>
<td align="left">|</td>
<td align="left">Bitwise Boolean OR</td>
</tr>
<tr>
<td align="left">&amp;&amp;</td>
<td align="left">Logical AND</td>
</tr>
<tr>
<td align="left">||</td>
<td align="left">Logical OR</td>
</tr>
</tbody></table>
<p>测试范例如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ** 次方操作</span></span><br><span class="line">(( <span class="variable">$val1</span>**2 &gt; 90 )) &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Using double bracket</p>
</blockquote>
<p>双方括号是针对字符运算的，格式为 <code>[[ expression ]]</code>. 除了 test 相同的计算外，他还额外提供了<strong>正则</strong>的支持</p>
<p><strong>Note:</strong> bash 是支持双方括号的，但是其他 shell 就不一定了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[[ <span class="variable">$USER</span> == i* ]] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># true</span></span><br></pre></td></tr></table></figure>

<p>PS: 双等(==)表示 string 符合 pattern，直接用等号也是可以的</p>
<h3 id="Considering-the-case-Command"><a href="#Considering-the-case-Command" class="headerlink" title="Considering the case Command"></a>Considering the case Command</h3><p>对应 Java 中的 switch-case 语法, 格式如下. 当内容和 pattern 匹配时，就会执行对应的语句</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> variable <span class="keyword">in</span></span><br><span class="line">pattern1 | pattern2) command1;;</span><br><span class="line">pattern3) command2;;</span><br><span class="line">*) default commands;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test26.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # using the case command</span></span><br><span class="line"><span class="comment"># case $USER in </span></span><br><span class="line"><span class="comment"># rich | barbara)</span></span><br><span class="line"><span class="comment">#     echo &quot;Welcome $USER&quot;</span></span><br><span class="line"><span class="comment">#     echo &quot;Please enjoy your visit&quot;;;</span></span><br><span class="line"><span class="comment"># i306454)</span></span><br><span class="line"><span class="comment">#     echo &quot;Special testing account&quot;;;</span></span><br><span class="line"><span class="comment"># jessica)</span></span><br><span class="line"><span class="comment">#     echo &quot;Do not forget to log off when you&#x27;re done&quot;;;</span></span><br><span class="line"><span class="comment"># *)</span></span><br><span class="line"><span class="comment">#     echo &quot;Sorry, you are not allowed here&quot;;;</span></span><br><span class="line"><span class="comment"># esac</span></span><br><span class="line">./test26.sh </span><br><span class="line"><span class="comment"># Special testing account</span></span><br></pre></td></tr></table></figure>

<h3 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h3><p><strong>Issue1:</strong> 写脚本的时候，发现一个很奇怪的问题</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 未赋值的变脸 -n 会返回 true ?!</span></span><br><span class="line">[ -n <span class="variable">$ret23</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># true</span></span><br><span class="line"><span class="comment"># 经多方查证，需要加引号</span></span><br><span class="line">[ -n <span class="string">&quot;<span class="variable">$ret23</span>&quot;</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里就体现出增强型的好处了</span></span><br><span class="line">[[ -n <span class="variable">$ret23</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="literal">true</span> || <span class="built_in">echo</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># false</span></span><br></pre></td></tr></table></figure>

<p>以后可以的话都用增强型把，容错率更高</p>
<h2 id="More-Structured-Commands"><a href="#More-Structured-Commands" class="headerlink" title="More Structured Commands"></a>More Structured Commands</h2><p>这章介绍了其他一些流程控制的关键词</p>
<h3 id="The-for-Command"><a href="#The-for-Command" class="headerlink" title="The for Command"></a>The for Command</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> list</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    commands</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>PS: for 和 do 也可以写一起(for var in list; do)，和 if-then 那样</p>
<blockquote>
<p>Reading values in a list</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test1.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # basic for command</span></span><br><span class="line"><span class="comment"># for test in a b c d e</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo The character is $test</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test1.sh </span><br><span class="line"><span class="comment"># The character is a</span></span><br><span class="line"><span class="comment"># The character is b</span></span><br><span class="line"><span class="comment"># The character is c</span></span><br><span class="line"><span class="comment"># The character is d</span></span><br><span class="line"><span class="comment"># The character is e</span></span><br></pre></td></tr></table></figure>

<p>当 for 结束后变量还会存在</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test1b.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Testing the for variable after the looping</span></span><br><span class="line"><span class="comment"># for test in a b c d e</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo The character is $test</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># echo The last character is $test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test=Connecticut</span></span><br><span class="line"><span class="comment"># echo &quot;Wait, now we&#x27;re visiting $test&quot;</span></span><br><span class="line">./test1b.sh </span><br><span class="line"><span class="comment"># The character is a</span></span><br><span class="line"><span class="comment"># The character is b</span></span><br><span class="line"><span class="comment"># The character is c</span></span><br><span class="line"><span class="comment"># The character is d</span></span><br><span class="line"><span class="comment"># The character is e</span></span><br><span class="line"><span class="comment"># The last character is e</span></span><br><span class="line"><span class="comment"># Wait, now we&#x27;re visiting Connecticut</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Reading complex values in a list</p>
</blockquote>
<p>当 list 中包含一些标点时，结果可能就不是预期的那样了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat badtest1.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # another example of how not to use the for command</span></span><br><span class="line"><span class="comment"># for test in I don&#x27;t know if this&#x27;ll work, append some thing more?</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo The character is $test</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./badtest1.sh </span><br><span class="line"><span class="comment"># The character is I</span></span><br><span class="line"><span class="comment"># The character is dont know if thisll</span></span><br><span class="line"><span class="comment"># The character is work,</span></span><br><span class="line"><span class="comment"># The character is append</span></span><br><span class="line"><span class="comment"># The character is some</span></span><br><span class="line"><span class="comment"># The character is thing</span></span><br><span class="line"><span class="comment"># The character is more?</span></span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<ol>
<li>给引号加转义符(for test in I don&#39;t know if this&#39;ll work, append some thing more?)</li>
<li>将 string 用双引号包裹(for test in I don”‘“t know if this”‘“ll work, append some thing more?)</li>
</ol>
<p><code>for</code> 默认使用空格做分割，如果想要连词，你需要将对一个的词用双引号包裹起来</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat badtest2.sh</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # another example of how not to use the for command</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for test in Nevada New Hampshire New Mexico New York North Carolina</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo &quot;Now going to $test&quot;</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./badtest2.sh </span><br><span class="line"><span class="comment"># Now going to Nevada</span></span><br><span class="line"><span class="comment"># Now going to New</span></span><br><span class="line"><span class="comment"># Now going to Hampshire</span></span><br><span class="line"><span class="comment"># Now going to New</span></span><br><span class="line"><span class="comment"># Now going to Mexico</span></span><br><span class="line"><span class="comment"># Now going to New</span></span><br><span class="line"><span class="comment"># Now going to York</span></span><br><span class="line"><span class="comment"># Now going to North</span></span><br><span class="line"><span class="comment"># Now going to Carolina</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># update to: for test in Nevada &quot;New Hampshire&quot; &quot;New Mexico&quot; &quot;New York&quot;</span></span><br><span class="line">./badtest2.sh </span><br><span class="line"><span class="comment"># Now going to Nevada</span></span><br><span class="line"><span class="comment"># Now going to New Hampshire</span></span><br><span class="line"><span class="comment"># Now going to New Mexico</span></span><br><span class="line"><span class="comment"># Now going to New York</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Reading a list from a variable</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test4.sh</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # using a variable to hold the list</span></span><br><span class="line"><span class="comment"># list=&quot;Alabama Alaska Arizona Arkansas Colorado&quot;</span></span><br><span class="line"><span class="comment"># list=$list&quot; Connecticut&quot;</span></span><br><span class="line"><span class="comment"># for state in $list</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo &quot;Have you ever visited $state?&quot;</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test4.sh </span><br><span class="line"><span class="comment"># Have you ever visited Alabama?</span></span><br><span class="line"><span class="comment"># Have you ever visited Alaska?</span></span><br><span class="line"><span class="comment"># Have you ever visited Arizona?</span></span><br><span class="line"><span class="comment"># Have you ever visited Arkansas?</span></span><br><span class="line"><span class="comment"># Have you ever visited Colorado?</span></span><br><span class="line"><span class="comment"># Have you ever visited Connecticut?</span></span><br></pre></td></tr></table></figure>

<p>PS: <code>list=$list&quot; Connecticut&quot;</code> 是 shell 中 append 字符串的常见操作</p>
<blockquote>
<p>Reading values from a command</p>
</blockquote>
<p>结合其他命令，计算出 list 的值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> a b c &gt; states</span><br><span class="line">cat test5.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # reading values from a file</span></span><br><span class="line"><span class="comment"># file=states</span></span><br><span class="line"><span class="comment"># for state in $(cat $file)</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo &quot;Visit beautiful $state&quot;</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test5.sh </span><br><span class="line"><span class="comment"># Visit beautiful a</span></span><br><span class="line"><span class="comment"># Visit beautiful b</span></span><br><span class="line"><span class="comment"># Visit beautiful c</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Changing the field separator</p>
</blockquote>
<p>有一个特殊的环境变量叫做 IFS(internal field separator). 他可以作为分割 field 的依据。默认的分割符有</p>
<ul>
<li>A space</li>
<li>A tab</li>
<li>A newline</li>
</ul>
<p>如果你想要将换行作为分割符，你可以使用 <code>IFS=$&#39;\n&#39;</code></p>
<p><strong>Caution:</strong> 定制 IFS 之后一定要还原</p>
<p>测试环节：如何打印当前 IFS 的值？</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$IFS</span>&quot;</span> | hexdump</span><br><span class="line"><span class="comment"># 0000000 20 09 0a</span></span><br><span class="line"><span class="comment"># 0000003</span></span><br><span class="line"><span class="built_in">printf</span> %q <span class="string">&quot;<span class="variable">$IFS</span>&quot;</span></span><br><span class="line"><span class="comment"># &#x27; \t\n&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>Caution:</strong> 变量和引号之间的关系：</p>
<ul>
<li>单引号，所见即所得。写什么即是什么</li>
<li>双引号，中间的变量会做计算</li>
<li>没符号，用于连续的内容，如果内容中带空格，需要加双引号</li>
</ul>
<p>脚本中 <code>IFS.OLD=$IFS</code> 的赋值语句经常会抛异常 <code>./test_csv.sh: line 3: IFS.OLD=: command not found</code> 但是写成 <code>IFS_OLD</code> 的话就可以运行，可能是点号的形式会变成其他一些什么调用也说不定。以后为了稳定，还是用下划线的形式把 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">IFS_OLD=<span class="variable">$IFS</span></span><br><span class="line">IFS=$<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">&lt;use the new IFS value <span class="keyword">in</span> code&gt;</span><br><span class="line">IFS=<span class="variable">$IFS_OLD</span></span><br></pre></td></tr></table></figure>

<p>其他定制分割符 <code>IFS=:</code>, 或者多分割符 <code>IFS=$&#39;\n&#39;:;&quot;</code></p>
<blockquote>
<p>Reading a directory using wildcards</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test6.sh</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # iterate through all the files in a directory</span></span><br><span class="line"><span class="comment"># for file in /Users/i306454/tmp/*</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     if [ -d &quot;$file&quot; ]</span></span><br><span class="line"><span class="comment">#     then </span></span><br><span class="line"><span class="comment">#         echo &quot;$file is a directory&quot;</span></span><br><span class="line"><span class="comment">#     elif [ -f &quot;$file&quot; ]</span></span><br><span class="line"><span class="comment">#     then</span></span><br><span class="line"><span class="comment">#         echo &quot;$file is a file&quot;</span></span><br><span class="line"><span class="comment">#     fi</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test6.sh </span><br><span class="line"><span class="comment"># /Users/i306454/tmp/backup is a directory</span></span><br><span class="line"><span class="comment"># /Users/i306454/tmp/bash_test is a directory</span></span><br><span class="line"><span class="comment"># /Users/i306454/tmp/csv is a directory</span></span><br><span class="line"><span class="comment"># /Users/i306454/tmp/dfile is a directory</span></span><br><span class="line"><span class="comment"># /Users/i306454/tmp/ifenduser.sh is a file</span></span><br><span class="line"><span class="comment"># /Users/i306454/tmp/plantuml is a directory</span></span><br><span class="line"><span class="comment"># /Users/i306454/tmp/sh is a directory</span></span><br></pre></td></tr></table></figure>

<p>PS: 在这个例子中有一个很有意思的点，在 test 中，将变量 file 使用双引号包裹起来了。这是因为 Linux 中带空格的文件或文件夹是合法的，如果没有引号，解析就会出错</p>
<p><strong>Caution:</strong> It’s always a good idea to test each file or directory before trying to process it.</p>
<h3 id="The-C-Style-for-command"><a href="#The-C-Style-for-command" class="headerlink" title="The C-Style for command"></a>The C-Style for command</h3><p>C 语言中 for 循环如下</p>
<blockquote>
<p>The C language for command</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The next number is %d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>bash 中也提供了类似的功能, 语法为 <code>for (( variable assignment; condition; iteration process ))</code> 例子：<code>for(( a=1; a&lt;10; a++ ))</code></p>
<p>限制：</p>
<ul>
<li>The assignment of the variable value can contain space</li>
<li>The variable in the condition isn’t preceded with a dollar sign</li>
<li>The equation for the iteration process doesn’t use the expr command format</li>
</ul>
<p>这种用法，对我倒是很亲切，但是和之前用过的那些变量赋值之类的语句确实有一些语法差异的。这个语句中各种缩进，空格都不作限制</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test8.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Testing the C-style for loop</span></span><br><span class="line"><span class="comment"># for ((i=1; i&lt;= 3; i++))</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo &quot;The next number is $i&quot;</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test8.sh </span><br><span class="line"><span class="comment"># The next number is 1</span></span><br><span class="line"><span class="comment"># The next number is 2</span></span><br><span class="line"><span class="comment"># The next number is 3</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Using multiple variables</p>
</blockquote>
<p>for 中包含多个参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test9.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Testing the C-style for loop</span></span><br><span class="line"><span class="comment"># for ((a=1, b=10; a&lt;= 3; a++, b--))</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo $a - $b</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test9.sh </span><br><span class="line"><span class="comment"># 1 - 10</span></span><br><span class="line"><span class="comment"># 2 - 9</span></span><br><span class="line"><span class="comment"># 3 - 8</span></span><br></pre></td></tr></table></figure>

<h3 id="The-while-Command"><a href="#The-while-Command" class="headerlink" title="The while Command"></a>The while Command</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">test</span> <span class="built_in">command</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    other commands</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test10.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # while command test</span></span><br><span class="line"><span class="comment"># var1=3</span></span><br><span class="line"><span class="comment"># while [ $var1 -gt 0 ]</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo $var1</span></span><br><span class="line"><span class="comment">#     var1=$[ $var1 - 1 ]</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test10.sh </span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Using multiple test commands</p>
</blockquote>
<p>while 判断的时候可以接多个条件，但是只有最后一个条件的 exit code 起决定作用。就算第一个条件我直接改为 <code>cmd</code> 每次都抛错，循环照常进行</p>
<p>还有，每个条件要新起一行, 当然用分号隔开也是可以的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test11.sh </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Testing a multicommand while loop</span></span><br><span class="line"><span class="comment"># var1=3</span></span><br><span class="line"><span class="comment"># while echo $var1</span></span><br><span class="line"><span class="comment">#     [ $var1 -gt 0 ]</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo &quot;This is inside the loop&quot;</span></span><br><span class="line"><span class="comment">#     var1=$[ $var1 - 1 ]</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test11.sh </span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># This is inside the loop</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># This is inside the loop</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># This is inside the loop</span></span><br><span class="line"><span class="comment"># 0</span></span><br></pre></td></tr></table></figure>

<h3 id="The-until-Command"><a href="#The-until-Command" class="headerlink" title="The until Command"></a>The until Command</h3><p>语意上和 while 相反，但是用法一致</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">until <span class="built_in">test</span> commands</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    other commands</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test12 </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # using the until command</span></span><br><span class="line"><span class="comment"># var1=100</span></span><br><span class="line"><span class="comment"># until [ $var1 -eq 0 ]</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo $var1</span></span><br><span class="line"><span class="comment">#     var1=$[ $var1 - 25 ]</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test12 </span><br><span class="line"><span class="comment"># 100</span></span><br><span class="line"><span class="comment"># 75</span></span><br><span class="line"><span class="comment"># 50</span></span><br><span class="line"><span class="comment"># 25</span></span><br></pre></td></tr></table></figure>

<h3 id="Nesting-Loops"><a href="#Nesting-Loops" class="headerlink" title="Nesting Loops"></a>Nesting Loops</h3><p>循环嵌套，很常见</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test14             </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # nesting for loops</span></span><br><span class="line"><span class="comment"># for (( a=1; a&lt;=3; a++))</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo &quot;Starting loop $a:&quot;</span></span><br><span class="line"><span class="comment">#     for (( b=1; b&lt;=3; b++ ))</span></span><br><span class="line"><span class="comment">#     do</span></span><br><span class="line"><span class="comment">#         echo &quot;    Inside loop: $b&quot;</span></span><br><span class="line"><span class="comment">#     done</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test14</span><br><span class="line"><span class="comment"># Starting loop 1:</span></span><br><span class="line"><span class="comment">#     Inside loop: 1</span></span><br><span class="line"><span class="comment">#     Inside loop: 2</span></span><br><span class="line"><span class="comment">#     Inside loop: 3</span></span><br><span class="line"><span class="comment"># Starting loop 2:</span></span><br><span class="line"><span class="comment">#     Inside loop: 1</span></span><br><span class="line"><span class="comment">#     Inside loop: 2</span></span><br><span class="line"><span class="comment">#     Inside loop: 3</span></span><br><span class="line"><span class="comment"># Starting loop 3:</span></span><br><span class="line"><span class="comment">#     Inside loop: 1</span></span><br><span class="line"><span class="comment">#     Inside loop: 2</span></span><br><span class="line"><span class="comment">#     Inside loop: 3</span></span><br></pre></td></tr></table></figure>

<p>while + for 的例子。树上的例子 for 中 边界条件是 <code>$var2&lt;3;</code> 和之前表现的语法不一样，试了一下，有无 <code>$</code> 都是可以的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test14</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # nesting for loops</span></span><br><span class="line"><span class="comment"># var1=3</span></span><br><span class="line"><span class="comment"># while [ $var1 -ge 0 ]</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo &quot;Outer loop: $var1&quot;</span></span><br><span class="line"><span class="comment">#     for (( var2=1; var2&lt;3; var2++))</span></span><br><span class="line"><span class="comment">#     do</span></span><br><span class="line"><span class="comment">#         var3=$[ $var1*$var2 ]</span></span><br><span class="line"><span class="comment">#         echo &quot;    Inner loop: $var1 * $var2 = $var3&quot;</span></span><br><span class="line"><span class="comment">#     done</span></span><br><span class="line"><span class="comment">#     var1=$[ $var1 - 1 ]</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test14</span><br><span class="line"><span class="comment"># Outer loop: 3</span></span><br><span class="line"><span class="comment">#     Inner loop: 3 * 1 = 3</span></span><br><span class="line"><span class="comment">#     Inner loop: 3 * 2 = 6</span></span><br><span class="line"><span class="comment"># Outer loop: 2</span></span><br><span class="line"><span class="comment">#     Inner loop: 2 * 1 = 2</span></span><br><span class="line"><span class="comment">#     Inner loop: 2 * 2 = 4</span></span><br><span class="line"><span class="comment"># Outer loop: 1</span></span><br><span class="line"><span class="comment">#     Inner loop: 1 * 1 = 1</span></span><br><span class="line"><span class="comment">#     Inner loop: 1 * 2 = 2</span></span><br><span class="line"><span class="comment"># Outer loop: 0</span></span><br><span class="line"><span class="comment">#     Inner loop: 0 * 1 = 0</span></span><br><span class="line"><span class="comment">#     Inner loop: 0 * 2 = 0</span></span><br></pre></td></tr></table></figure>

<h3 id="Looping-on-File-Data"><a href="#Looping-on-File-Data" class="headerlink" title="Looping on File Data"></a>Looping on File Data</h3><p><a href="https://stackoverflow.com/questions/4128235/what-is-the-exact-meaning-of-ifs-n">Stackoverflow</a> 上看到一篇解释 IFS=$’\n’ 的帖子，挺好。一句话就是 <code>$&#39;...&#39;</code> 的语法可以表示转义符</p>
<p>通常来说，你会需要遍历文件中的内容，这需要两个知识点</p>
<ol>
<li>Using nested loops</li>
<li>Changing the IFS environment variable</li>
</ol>
<p>通过设置 IFS 你可以在包含空格的情况下处理一行内容. 下面是处理 <code>/etc/passwd</code> 文件是案例</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test1</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # changing the IFS value</span></span><br><span class="line"><span class="comment"># IFS.OLD=$IFS</span></span><br><span class="line"><span class="comment"># IFS=$&#x27;\n&#x27;</span></span><br><span class="line"><span class="comment"># for entry in $(cat /etc/passwd)</span></span><br><span class="line"><span class="comment"># do </span></span><br><span class="line"><span class="comment">#     echo &quot;Values in $entry -&quot;</span></span><br><span class="line"><span class="comment">#     IFS=:</span></span><br><span class="line"><span class="comment">#     for value in $entry</span></span><br><span class="line"><span class="comment">#     do</span></span><br><span class="line"><span class="comment">#         echo &quot;    $value&quot;</span></span><br><span class="line"><span class="comment">#     done</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test1</span><br><span class="line"><span class="comment"># Values in _oahd:*:441:441:OAH Daemon:/var/empty:/usr/bin/false</span></span><br><span class="line"><span class="comment">#     _oahd</span></span><br><span class="line"><span class="comment">#     badtest1.sh</span></span><br><span class="line"><span class="comment">#     badtest2.sh</span></span><br><span class="line"><span class="comment">#     test1</span></span><br><span class="line"><span class="comment">#     test12</span></span><br><span class="line"><span class="comment">#     test14</span></span><br><span class="line"><span class="comment">#     test15</span></span><br><span class="line"><span class="comment">#     441</span></span><br><span class="line"><span class="comment">#     441</span></span><br><span class="line"><span class="comment">#     OAH Daemon</span></span><br><span class="line"><span class="comment">#     /var/empty</span></span><br><span class="line"><span class="comment">#     /usr/bin/false</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<h3 id="Controlling-the-loop"><a href="#Controlling-the-loop" class="headerlink" title="Controlling the loop"></a>Controlling the loop</h3><p>通过 break, continue 控制流程</p>
<blockquote>
<p>The break command</p>
</blockquote>
<p>打断单层循环, 这个语法适用于任何循环语句，比如 for, while, until 等</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test17</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Breaking out of a for loop</span></span><br><span class="line"><span class="comment"># for var1 in 1 2 3 4 5</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     if [ $var1 -eq 3 ]</span></span><br><span class="line"><span class="comment">#     then</span></span><br><span class="line"><span class="comment">#         break</span></span><br><span class="line"><span class="comment">#     fi</span></span><br><span class="line"><span class="comment">#     echo &quot;Iteration number: $var1&quot;</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line"><span class="comment"># echo &quot;The for loop is completed&quot;</span></span><br><span class="line">./test17</span><br><span class="line"><span class="comment"># Iteration number: 1</span></span><br><span class="line"><span class="comment"># Iteration number: 2</span></span><br><span class="line"><span class="comment"># The for loop is completed</span></span><br></pre></td></tr></table></figure>

<p>打断内层循环</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test19</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Breaking out of an inner loop</span></span><br><span class="line"><span class="comment"># for (( a=1; a&lt;4; a++ ))</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo &quot;Outer loop: $a&quot;</span></span><br><span class="line"><span class="comment">#     for (( b=1; b&lt;4; b++ ))</span></span><br><span class="line"><span class="comment">#     do</span></span><br><span class="line"><span class="comment">#         if [ $b -eq 2 ]</span></span><br><span class="line"><span class="comment">#         then</span></span><br><span class="line"><span class="comment">#             break</span></span><br><span class="line"><span class="comment">#         fi</span></span><br><span class="line"><span class="comment">#         echo &quot;    Inner loop: $b&quot;</span></span><br><span class="line"><span class="comment">#     done</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test19</span><br><span class="line"><span class="comment"># Outer loop: 1</span></span><br><span class="line"><span class="comment">#     Inner loop: 1</span></span><br><span class="line"><span class="comment"># Outer loop: 2</span></span><br><span class="line"><span class="comment">#     Inner loop: 1</span></span><br><span class="line"><span class="comment"># Outer loop: 3</span></span><br><span class="line"><span class="comment">#     Inner loop: 1</span></span><br></pre></td></tr></table></figure>

<p>在内部循环执行过程中，打断外层循环，这个特性倒是很新颖，Java 中没见过 Haha</p>
<p><code>break n</code> 默认是 1，打断当前的循环，设置成 2 就是打断外面一层直接退出。下面例子中，我们通过在 inner for 中 break 2 直接退出了外层 for 循环</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test20 </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Breaking out of an outer loop</span></span><br><span class="line"><span class="comment"># for (( a=1; a&lt;4; a++ ))</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo &quot;Outer loop: $a&quot;</span></span><br><span class="line"><span class="comment">#     for (( b=1; b&lt;4; b++ ))</span></span><br><span class="line"><span class="comment">#     do</span></span><br><span class="line"><span class="comment">#         if [ $b -gt 2 ]</span></span><br><span class="line"><span class="comment">#         then</span></span><br><span class="line"><span class="comment">#             break 2</span></span><br><span class="line"><span class="comment">#         fi</span></span><br><span class="line"><span class="comment">#         echo &quot;    Inner loop: $b&quot;</span></span><br><span class="line"><span class="comment">#     done</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test20</span><br><span class="line"><span class="comment"># Outer loop: 1</span></span><br><span class="line"><span class="comment">#     Inner loop: 1</span></span><br><span class="line"><span class="comment">#     Inner loop: 2</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>The continue command</p>
</blockquote>
<p>提前结束循环，继续下一次循环. 下面例子中，当当前变量 3 &lt; x &lt; 8 时跳过打印. 前面介绍的循环体都适用，如 for, while 和 until</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test21 </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Using the continue command</span></span><br><span class="line"><span class="comment"># for (( var1=1; var1&lt;10; var1++ ))</span></span><br><span class="line"><span class="comment"># do </span></span><br><span class="line"><span class="comment">#     if [ $var1 -gt 3 ] &amp;&amp; [ $var1 -lt 8 ]</span></span><br><span class="line"><span class="comment">#     then</span></span><br><span class="line"><span class="comment">#         continue</span></span><br><span class="line"><span class="comment">#     fi</span></span><br><span class="line"><span class="comment">#     echo &quot;Iteration number: $var1&quot;</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test21 </span><br><span class="line"><span class="comment"># Iteration number: 1</span></span><br><span class="line"><span class="comment"># Iteration number: 2</span></span><br><span class="line"><span class="comment"># Iteration number: 3</span></span><br><span class="line"><span class="comment"># Iteration number: 8</span></span><br><span class="line"><span class="comment"># Iteration number: 9</span></span><br></pre></td></tr></table></figure>

<p>和 break 一样，continue 也支持 <code>continue n</code> 来跳过循环。测试用例中，当外层变量值 2 &lt; x &lt; 4 时，跳过打印</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test22</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Continuing an outer loop</span></span><br><span class="line"><span class="comment"># for (( a=1; a&lt;=5; a++ ))</span></span><br><span class="line"><span class="comment"># do </span></span><br><span class="line"><span class="comment">#     echo &quot;Iteration $a:&quot;</span></span><br><span class="line"><span class="comment">#     for (( b=1; b&lt;3; b++))</span></span><br><span class="line"><span class="comment">#     do</span></span><br><span class="line"><span class="comment">#         if [ $a -gt 2 ] &amp;&amp; [ $a -lt 4 ]</span></span><br><span class="line"><span class="comment">#         then</span></span><br><span class="line"><span class="comment">#             continue 2</span></span><br><span class="line"><span class="comment">#         fi</span></span><br><span class="line"><span class="comment">#         var3=$[ $a * $b ]</span></span><br><span class="line"><span class="comment">#         echo &quot;    The result of $a * $b is $var3&quot;</span></span><br><span class="line"><span class="comment">#     done</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test22</span><br><span class="line"><span class="comment"># Iteration 1:</span></span><br><span class="line"><span class="comment">#     The result of 1 * 1 is 1</span></span><br><span class="line"><span class="comment">#     The result of 1 * 2 is 2</span></span><br><span class="line"><span class="comment"># Iteration 2:</span></span><br><span class="line"><span class="comment">#     The result of 2 * 1 is 2</span></span><br><span class="line"><span class="comment">#     The result of 2 * 2 is 4</span></span><br><span class="line"><span class="comment"># Iteration 3:</span></span><br><span class="line"><span class="comment"># Iteration 4:</span></span><br><span class="line"><span class="comment">#     The result of 4 * 1 is 4</span></span><br><span class="line"><span class="comment">#     The result of 4 * 2 is 8</span></span><br><span class="line"><span class="comment"># Iteration 5:</span></span><br><span class="line"><span class="comment">#     The result of 5 * 1 is 5</span></span><br><span class="line"><span class="comment">#     The result of 5 * 2 is 10</span></span><br></pre></td></tr></table></figure>

<h3 id="Processing-the-Output-of-a-Loop"><a href="#Processing-the-Output-of-a-Loop" class="headerlink" title="Processing the Output of a Loop"></a>Processing the Output of a Loop</h3><p><code>for</code> 中打印的语句可以在 <code>done</code> 后面接文件操作符一起导入，还有这种功能。。。那我之前写脚本用的 printf 不是显得有点呆</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test23</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # redirecting the for output to a file</span></span><br><span class="line"><span class="comment"># for (( a=1; a&lt;=5; a++ ))</span></span><br><span class="line"><span class="comment"># do </span></span><br><span class="line"><span class="comment">#     echo &quot;The number is $a&quot;</span></span><br><span class="line"><span class="comment"># done &gt; test23.txt</span></span><br><span class="line">cat test23.txt </span><br><span class="line"><span class="comment"># The number is 1</span></span><br><span class="line"><span class="comment"># The number is 2</span></span><br><span class="line"><span class="comment"># The number is 3</span></span><br><span class="line"><span class="comment"># The number is 4</span></span><br><span class="line"><span class="comment"># The number is 5</span></span><br></pre></td></tr></table></figure>

<p>PS: 试了一下，<code>echo -n</code> 也是 OK 的</p>
<p>同理，<code>done</code> 后面还可以接其他的命令, 这个扩展很赞</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test24</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # piping a loop to another command</span></span><br><span class="line"><span class="comment"># for state in &quot;North Dakota&quot; Connecticut Illinois Alabama Tennessee</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo &quot;$state is the next place to go&quot;</span></span><br><span class="line"><span class="comment"># done | sort</span></span><br><span class="line"><span class="comment"># echo &quot;This completes our travels&quot;</span></span><br><span class="line">./test24</span><br><span class="line"><span class="comment"># Alabama is the next place to go</span></span><br><span class="line"><span class="comment"># Connecticut is the next place to go</span></span><br><span class="line"><span class="comment"># Illinois is the next place to go</span></span><br><span class="line"><span class="comment"># North Dakota is the next place to go</span></span><br><span class="line"><span class="comment"># Tennessee is the next place to go</span></span><br><span class="line"><span class="comment"># This completes our travels</span></span><br></pre></td></tr></table></figure>

<h3 id="Practical-Examples"><a href="#Practical-Examples" class="headerlink" title="Practical Examples"></a>Practical Examples</h3><p>一些实用的脚本范例</p>
<blockquote>
<p>Finding executable files</p>
</blockquote>
<p>通过遍历 PATH 中的路径，统计处你可以运行的 commands 列表</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test25</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Finding file in the PATH</span></span><br><span class="line"><span class="comment"># IFS.OLD=$IFS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IFS=:</span></span><br><span class="line"><span class="comment"># for folder in $PATH</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo &quot;$folder:&quot;</span></span><br><span class="line"><span class="comment">#     for file in $folder/*</span></span><br><span class="line"><span class="comment">#     do</span></span><br><span class="line"><span class="comment">#         if [ -x $file ]</span></span><br><span class="line"><span class="comment">#         then</span></span><br><span class="line"><span class="comment">#             echo &quot;    $file&quot;</span></span><br><span class="line"><span class="comment">#         fi</span></span><br><span class="line"><span class="comment">#     done</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IFS=$IFS.OLD</span></span><br><span class="line">./test25 | more</span><br><span class="line"><span class="comment"># /Users/i306454/.jenv/bin:</span></span><br><span class="line"><span class="comment"># /usr/local/sbin:</span></span><br><span class="line"><span class="comment">#     /usr/local/sbin/unbound</span></span><br><span class="line"><span class="comment">#     ....</span></span><br></pre></td></tr></table></figure>

<p>PS: 这个 <code>more</code> 就用的很灵性！！</p>
<blockquote>
<p>Creating multiple user accounts</p>
</blockquote>
<p>将需要创建的新用户写到文件中，并通过脚本解析文件，批量创建</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Process new user accounts</span></span><br><span class="line"></span><br><span class="line">input=<span class="string">&quot;users.csv&quot;</span></span><br><span class="line"><span class="keyword">while</span> IFS=<span class="string">&#x27;,&#x27;</span> <span class="built_in">read</span> -r userid name</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;adding <span class="variable">$userid</span>&quot;</span></span><br><span class="line">    useradd -c <span class="string">&quot;<span class="variable">$name</span>&quot;</span> -m <span class="variable">$userid</span></span><br><span class="line"><span class="keyword">done</span> &lt; <span class="string">&quot;<span class="variable">$input</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Chapter-14-Handling-User-Input"><a href="#Chapter-14-Handling-User-Input" class="headerlink" title="Chapter 14: Handling User Input"></a>Chapter 14: Handling User Input</h2><p>这章主要讲如何在脚本中做交互</p>
<h3 id="Passing-Parameters"><a href="#Passing-Parameters" class="headerlink" title="Passing Parameters"></a>Passing Parameters</h3><blockquote>
<p>Reading parameters</p>
</blockquote>
<p>bash 会将传入的所有变量都赋给 positional parameters. 这些位置变量以 <code>$</code> 开头，<code>$0</code> 为脚本名称，<code>$1</code> 为第一个参数，以此类推</p>
<p>根据传入参数计算斐波那契额终值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test1</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Using one command line parameter</span></span><br><span class="line"><span class="comment"># factorial=1</span></span><br><span class="line"><span class="comment"># for (( number=1; number&lt;=$1; number++ ))</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     factorial=$[ $factorial * $number ]</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line"><span class="comment"># echo The factorial of $1 is $factorial</span></span><br><span class="line">./test1 5</span><br><span class="line"><span class="comment"># The factorial of 5 is 120</span></span><br></pre></td></tr></table></figure>

<p>多参数调用案例</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test2</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Testing two command line parameters</span></span><br><span class="line"><span class="comment"># total=$[ $1 * $2 ]</span></span><br><span class="line"><span class="comment"># echo The first parameter is $1</span></span><br><span class="line"><span class="comment"># echo The first parameter is $2</span></span><br><span class="line"><span class="comment"># echo The total value is $total</span></span><br><span class="line"></span><br><span class="line">./test2 2 5</span><br><span class="line"><span class="comment"># The first parameter is 2</span></span><br><span class="line"><span class="comment"># The first parameter is 5</span></span><br><span class="line"><span class="comment"># The total value is 10</span></span><br></pre></td></tr></table></figure>

<p>字符串作为参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test3</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Testing string parameters</span></span><br><span class="line"><span class="comment"># echo Hello $1, glad to meet you</span></span><br><span class="line"></span><br><span class="line">bash-5.1$ ./test3 jack</span><br><span class="line"><span class="comment"># Hello jack, glad to meet you</span></span><br></pre></td></tr></table></figure>

<p>如果字符串之间有空格，需要用引号包裹起来</p>
<p>当参数数量超过 <strong>9</strong> 个的时候，你需要用花括号来调用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">at ./test4</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # handling lots of parameters</span></span><br><span class="line"><span class="comment"># total=$[ $&#123;10&#125; * $&#123;11&#125; ]</span></span><br><span class="line"><span class="comment"># echo The tenth parameter is $&#123;10&#125;</span></span><br><span class="line"><span class="comment"># echo The eleventh parameter is $&#123;11&#125;</span></span><br><span class="line"><span class="comment"># echo The total is $total</span></span><br><span class="line">./test4 1 2 3 4 5 6 7 8 9 10 11 12</span><br><span class="line"><span class="comment"># The tenth parameter is 10</span></span><br><span class="line"><span class="comment"># The eleventh parameter is 11</span></span><br><span class="line"><span class="comment"># The total is 110</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Reading the script name</p>
</blockquote>
<p>`$0 代表了脚本文件的名字</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test5</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Testing the $0 parameter</span></span><br><span class="line"><span class="comment"># echo the zero parameter is set to: $0</span></span><br><span class="line"></span><br><span class="line">bash test5</span><br><span class="line"><span class="comment"># the zero parameter is set to: test5</span></span><br><span class="line">./test5</span><br><span class="line"><span class="comment"># the zero parameter is set to: ./test5</span></span><br><span class="line">bash /Users/i306454/tmp/bash_test/test5</span><br><span class="line"><span class="comment"># the zero parameter is set to: /Users/i306454/tmp/bash_test/test5</span></span><br></pre></td></tr></table></figure>

<p>不一样的调用方式，得到的第 0 参数值会不一样，如果像统一得到文件名，可以使用 basename 命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test5b</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Using basename with the $0 parameter</span></span><br><span class="line"><span class="comment"># name=$(basename $0)</span></span><br><span class="line"><span class="comment"># echo the zero parameter is set to: $name</span></span><br><span class="line"></span><br><span class="line">bash-5.1$ ./test5b</span><br><span class="line"><span class="comment"># the zero parameter is set to: test5b</span></span><br><span class="line">sh test5b</span><br><span class="line"><span class="comment"># the zero parameter is set to: test5b</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Testing parameters</p>
</blockquote>
<p>当脚本中需要用到参数，但是参数没有给，则脚本会抛异常，但是我们可以更优雅的处理这种情况</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test7 </span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Testing parameters before use</span></span><br><span class="line"><span class="comment"># if [ -n &quot;$1&quot; ]</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#     echo Hello $1, glad to meet you.</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#     echo &quot;Sorry, you did not identity yourself.&quot;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"></span><br><span class="line">./test7 jack</span><br><span class="line"><span class="comment"># Hello jack, glad to meet you.</span></span><br><span class="line">./test7</span><br><span class="line"><span class="comment"># Sorry, you did not identity yourself.</span></span><br></pre></td></tr></table></figure>

<h3 id="Using-Special-Parameter-Variables"><a href="#Using-Special-Parameter-Variables" class="headerlink" title="Using Special Parameter Variables"></a>Using Special Parameter Variables</h3><blockquote>
<p>Counting parameters</p>
</blockquote>
<p><code>$#</code> 用于统计参数数量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test8</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Getting the number of parameters</span></span><br><span class="line"><span class="comment"># echo There were $# parameters supplied.</span></span><br><span class="line">./test8</span><br><span class="line"><span class="comment"># There were 0 parameters supplied.</span></span><br><span class="line">./test8 123</span><br><span class="line"><span class="comment"># There were 1 parameters supplied.</span></span><br><span class="line">./test8 1 2 3</span><br><span class="line"><span class="comment"># There were 3 parameters supplied.</span></span><br><span class="line">./test8 <span class="string">&quot;jack zheng&quot;</span></span><br><span class="line"><span class="comment"># There were 1 parameters supplied.</span></span><br></pre></td></tr></table></figure>

<p>根据上面的特性我们可以试着发散一下思路，尝试拿到最后一个参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat badtest1</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Testing grabbing last parameter</span></span><br><span class="line"><span class="comment"># echo The last parameter was $&#123;$#&#125;</span></span><br><span class="line">./badtest1 1 2 3</span><br><span class="line"><span class="comment"># The last parameter was 13965</span></span><br></pre></td></tr></table></figure>

<p>尝试失败，语法上来说，花括号中间是不允许有 <code>$</code> 符号的，你可以用叹号表达上面的意思</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Testing grabbing last parameter</span></span><br><span class="line"><span class="comment"># echo The last parameter was $&#123;!#&#125;</span></span><br><span class="line"></span><br><span class="line">./badtest1 1 2 3</span><br><span class="line"><span class="comment"># The last parameter was 3</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Grabbing all the data</p>
</blockquote>
<p>你可以使用 <code>$*</code> 或者 <code>$@</code> 拿到所有的参数，区别如下</p>
<ul>
<li><code>$*</code> 会将所有的参数当作一个变量对待</li>
<li><code>$@</code> 会将所有的参数当作类似数组那种概念，分开对待。也就是说，你可以在 for 中循环处理</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test11</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Testing $* and $@</span></span><br><span class="line"><span class="comment"># echo</span></span><br><span class="line"><span class="comment"># echo &quot;Using the \$* method: $*&quot;</span></span><br><span class="line"><span class="comment"># echo &quot;Using the \$@ method: $@&quot;</span></span><br><span class="line"></span><br><span class="line">./test11 a b c d</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using the $* method: a b c d</span></span><br><span class="line"><span class="comment"># Using the $@ method: a b c d</span></span><br></pre></td></tr></table></figure>

<p>看上去没区别。。。这里需要结合 for 来观察</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test12</span><br><span class="line"><span class="comment"># #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># # Testing $* and $@</span></span><br><span class="line"><span class="comment"># echo</span></span><br><span class="line"><span class="comment"># count=1</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># for param in &quot;$*&quot;</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo &quot;\$* Parameter #$count = $param&quot;</span></span><br><span class="line"><span class="comment">#     count=$[ $count + 1 ]</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># echo</span></span><br><span class="line"><span class="comment"># count=1</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># for param in &quot;$@&quot;</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment">#     echo &quot;\$@ Parameter #$count = $param&quot;</span></span><br><span class="line"><span class="comment">#     count=$[ $count + 1 ]</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line">./test12 a b c d</span><br><span class="line"></span><br><span class="line"><span class="comment"># $* Parameter #1 = a b c d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $@ Parameter #1 = a</span></span><br><span class="line"><span class="comment"># $@ Parameter #2 = b</span></span><br><span class="line"><span class="comment"># $@ Parameter #3 = c</span></span><br><span class="line"><span class="comment"># $@ Parameter #4 = d</span></span><br></pre></td></tr></table></figure>

<h3 id="Being-Shify"><a href="#Being-Shify" class="headerlink" title="Being Shify"></a>Being Shify</h3><p>我们可以通过 <code>shift</code> 关键字将参数左移，默认左移一位.</p>
<p>PS: note that the value for variable <code>$0</code>, the program name, remains unchanged</p>
<p>PPS: Be careful when working with the shift command. When a parameter is shifted out, its value is lost and can’t be recovered.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test13</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Demostrating the shift command</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Parameter #<span class="variable">$count</span> = <span class="variable">$1</span>&quot;</span></span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ]</span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">./test13 a b c d</span><br><span class="line"></span><br><span class="line"><span class="comment"># Parameter #1 = a</span></span><br><span class="line"><span class="comment"># Parameter #2 = b</span></span><br><span class="line"><span class="comment"># Parameter #3 = c</span></span><br><span class="line"><span class="comment"># Parameter #4 = d</span></span><br></pre></td></tr></table></figure>

<p>移动多个位置测试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test14</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Demostrating a multi-position shift</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The original parameters: $*&quot;</span></span><br><span class="line"><span class="built_in">shift</span> 2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The changed parameters: $*&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Here is the new first parameter: <span class="variable">$1</span>&quot;</span></span><br><span class="line"></span><br><span class="line">./test14 1 2 3 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># The original parameters: 1 2 3 4</span></span><br><span class="line"><span class="comment"># The changed parameters: 3 4</span></span><br><span class="line"><span class="comment"># Here is the new first parameter: 3</span></span><br></pre></td></tr></table></figure>

<h3 id="Working-with-Options"><a href="#Working-with-Options" class="headerlink" title="Working with Options"></a>Working with Options</h3><p>介绍三种添加 Options 的方法，Options 顾名思义，就是命令中的可选参数。</p>
<blockquote>
<p>Finding your options</p>
</blockquote>
<p><strong>单个依次处理法：</strong> 可以使用 case + shift 的语法识别 options。将预先设置的 Options 添加在 case 的过滤列表中，然后遍历 <code>$1</code> 识别它</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test15</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Extracting command line options as parameters</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">        -a) <span class="built_in">echo</span> <span class="string">&quot;Found the -a option&quot;</span>;;</span><br><span class="line">        -b) <span class="built_in">echo</span> <span class="string">&quot;Found the -b option&quot;</span>;;</span><br><span class="line">        -c) <span class="built_in">echo</span> <span class="string">&quot;Found the -c option&quot;</span>;;</span><br><span class="line">         *) <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> is not an option&quot;</span>;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">./test15 -a -b -c -d asd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Found the -a option</span></span><br><span class="line"><span class="comment"># Found the -b option</span></span><br><span class="line"><span class="comment"># Found the -c option</span></span><br><span class="line"><span class="comment"># -d is not an option</span></span><br><span class="line"><span class="comment"># asd is not an option</span></span><br></pre></td></tr></table></figure>

<p><strong>Options parameters 分开处理法：</strong> 我们可以认为的在两种参数中间添加一个分割符，比如 <code>--</code> 作为 options 的结束和 parameter 的开始. 在脚本中现实的识别并处理它。</p>
<p>PS: 突然意识到 <code>$0</code> 是不算在 <code>$*</code> 和 <code>$@</code> 中的</p>
<p>下面的例子中，如果没有 <code>--</code>，则所有参数都在第一个 do-while 中处理了。加了之后会在两个 loop 中处理</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test16</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Extracting options and parameters</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">        -a) <span class="built_in">echo</span> <span class="string">&quot;Found the -a option&quot;</span>;;</span><br><span class="line">        -b) <span class="built_in">echo</span> <span class="string">&quot;Found the -b option&quot;</span>;;</span><br><span class="line">        -c) <span class="built_in">echo</span> <span class="string">&quot;Found the -c option&quot;</span>;;</span><br><span class="line">        --) <span class="built_in">shift</span></span><br><span class="line">            <span class="built_in">break</span>;;</span><br><span class="line">         *) <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> is not an option&quot;</span>;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Parameter #<span class="variable">$count</span>: <span class="variable">$param</span>&quot;</span></span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">./test16 -c -a -b test1 test2 test3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Found the -c option</span></span><br><span class="line"><span class="comment"># Found the -a option</span></span><br><span class="line"><span class="comment"># Found the -b option</span></span><br><span class="line"><span class="comment"># test1 is not an option</span></span><br><span class="line"><span class="comment"># test2 is not an option</span></span><br><span class="line"><span class="comment"># test3 is not an option</span></span><br><span class="line"></span><br><span class="line">./test16 -c -a -b -- test1 test2 test3</span><br><span class="line"><span class="comment"># Found the -c option</span></span><br><span class="line"><span class="comment"># Found the -a option</span></span><br><span class="line"><span class="comment"># Found the -b option</span></span><br><span class="line"><span class="comment"># Parameter #1: test1</span></span><br><span class="line"><span class="comment"># Parameter #2: test2</span></span><br><span class="line"><span class="comment"># Parameter #3: test3</span></span><br></pre></td></tr></table></figure>

<p><strong>带值的 options 处理：</strong> 有些命令中 options 是带值的，比如 <code>./testing.sh -a test1 -b -c -d test2</code>。这是我们就需要在脚本中识别可选参对应的值</p>
<p>下面的例子中 <code>-b test1</code> 是一个带值的可选参数，我们在 识别到 <code>-b</code> 后立即拿到 <code>$2</code> 即为对应的值</p>
<p>PS: 但是怎么看，bash 中添加可选参数都很麻烦啊，如果是可选参数带多个值呢，那不是还得加逻辑。。。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test17</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Extracting command line options and values</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">        -a) <span class="built_in">echo</span> <span class="string">&quot;Found the -a option&quot;</span>;;</span><br><span class="line">        -b) param=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Found the -b option, with parameter value <span class="variable">$param</span>&quot;</span></span><br><span class="line">            <span class="built_in">shift</span> ;;</span><br><span class="line">        -c) <span class="built_in">echo</span> <span class="string">&quot;Found the -c option&quot;</span>;;</span><br><span class="line">        --) <span class="built_in">shift</span></span><br><span class="line">            <span class="built_in">break</span>;;</span><br><span class="line">         *) <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> is not an option&quot;</span>;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Parameter #<span class="variable">$count</span>: <span class="variable">$param</span>&quot;</span></span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">./test17 -a -b test1 -d </span><br><span class="line"></span><br><span class="line"><span class="comment"># Found the -a option</span></span><br><span class="line"><span class="comment"># Found the -b option, with parameter value test1</span></span><br><span class="line"><span class="comment"># -d is not an option</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Using the getopt command</p>
</blockquote>
<p>介绍 <code>getopt</code> 工具函数，方便处理传入的参数</p>
<p><strong>Looking at the command format</strong> <code>getopt</code> 可以接受一系列的 options 和 parameters 并以正确的格式返回, 语法如下 <code>getopt optstring parameters</code></p>
<p><strong>Tips</strong> getopt 还有一个增强版 getopts, 后面章节会介绍</p>
<p>测试 getopt, b 后面添加了冒号表示它是带值的可选参数. 如果输入的命令带有未定义的参数，则会给出错误信息。如果想要忽略错误信息，则需要 getopt 带 -q 参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">getopt ab:<span class="built_in">cd</span> -a -b test1 -<span class="built_in">cd</span> test2 test3</span><br><span class="line"><span class="comment">#  -a -b test1 -c -d -- test2 test3</span></span><br><span class="line"></span><br><span class="line">getopt ab:<span class="built_in">cd</span> -a -b test1 -cde test2 test3</span><br><span class="line"><span class="comment"># getopt: illegal option -- e</span></span><br><span class="line"><span class="comment">#  -a -b test1 -c -d -- test2 test3</span></span><br><span class="line"></span><br><span class="line">getopt -q  ab:<span class="built_in">cd</span> -a -b test1 -cde test2 test3</span><br><span class="line"><span class="comment">#  -a -b &#x27;test1&#x27; -c -d -- &#x27;test2&#x27; &#x27;test3&#x27;</span></span><br></pre></td></tr></table></figure>

<p>PS: MacOS 的 bash 是不支持 -q 参数的！使用 docker 绕过了这个限制 诶嘿 ╮(￣▽￣””)╭</p>
<p><strong>Using getopt in your scripts</strong> 这里有一个小技巧，我们需要将 getopt 和 set 配和使用 <code>set -- $(getopt -q ab:cd &quot;$@&quot;)</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Extracting command line options and values with getopt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">set</span> -- $(getopt ab:<span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 为了兼容 Mac version bash, 将参数去掉了</span></span><br><span class="line"><span class="comment"># set -- $(getopt -q ab:cd &quot;$@&quot;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">        -a) <span class="built_in">echo</span> <span class="string">&quot;Found the -a option&quot;</span>;;</span><br><span class="line">        -b) param=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Found the -b option, with parameter value <span class="variable">$param</span>&quot;</span></span><br><span class="line">            <span class="built_in">shift</span> ;;</span><br><span class="line">        -c) <span class="built_in">echo</span> <span class="string">&quot;Found the -c option&quot;</span>;;</span><br><span class="line">        --) <span class="built_in">shift</span></span><br><span class="line">            <span class="built_in">break</span>;;</span><br><span class="line">         *) <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> is not an option&quot;</span>;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Parameter #<span class="variable">$count</span>: <span class="variable">$param</span>&quot;</span></span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">./test18 -ac</span><br><span class="line"></span><br><span class="line"><span class="comment"># Found the -a option</span></span><br><span class="line"><span class="comment"># Found the -c option</span></span><br><span class="line"></span><br><span class="line">./test18 -a -b test1 -<span class="built_in">cd</span> test2 test3 test4</span><br><span class="line"></span><br><span class="line"><span class="comment"># Found the -a option</span></span><br><span class="line"><span class="comment"># Found the -b option, with parameter value test1</span></span><br><span class="line"><span class="comment"># Found the -c option</span></span><br><span class="line"><span class="comment"># -d is not an option</span></span><br><span class="line"><span class="comment"># Parameter #1: test2</span></span><br><span class="line"><span class="comment"># Parameter #2: test3</span></span><br><span class="line"><span class="comment"># Parameter #3: test4</span></span><br><span class="line"></span><br><span class="line">./test18 -a -b test1 -<span class="built_in">cd</span> <span class="string">&quot;test2 test3&quot;</span> test4</span><br><span class="line"></span><br><span class="line"><span class="comment"># Found the -a option</span></span><br><span class="line"><span class="comment"># Found the -b option, with parameter value test1</span></span><br><span class="line"><span class="comment"># Found the -c option</span></span><br><span class="line"><span class="comment"># -d is not an option</span></span><br><span class="line"><span class="comment"># Parameter #1: test2</span></span><br><span class="line"><span class="comment"># Parameter #2: test3</span></span><br><span class="line"><span class="comment"># Parameter #3: test4</span></span><br></pre></td></tr></table></figure>

<p>PS: 最后一个例子中可以看到 getopt 并不能很好的处理字符串， “test2 test3” 被分开解析了。幸运的是，我们有办法解决这个问题</p>
<blockquote>
<p>Advancing to getopts</p>
</blockquote>
<p><code>getopts</code> 是 <code>getopt</code> 的增强版本，格式如下 <code>getopts optstring variable</code>, optstring 以冒号开始</p>
<p>如下所示，<code>getopts</code> </p>
<ul>
<li>自动为我们将每个参数封装到 opt 变量中</li>
<li>删选的时候省区了 <code>-</code></li>
<li>提供了内置的 <code>$OPTARG</code> 代表可选参数的值</li>
<li>将为定义的参数类型用问好替换</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test19</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Simple demostration of the getopts command</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> :ab:c opt</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$opt</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">        a) <span class="built_in">echo</span> <span class="string">&quot;Found the -a option&quot;</span> ;;</span><br><span class="line">        b) <span class="built_in">echo</span> <span class="string">&quot;Found the -b option, with value <span class="variable">$OPTARG</span>&quot;</span> ;;</span><br><span class="line">        c) <span class="built_in">echo</span> <span class="string">&quot;Found the -c option&quot;</span> ;;</span><br><span class="line">        *) <span class="built_in">echo</span> <span class="string">&quot;Unknown option: <span class="variable">$opt</span>&quot;</span> ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">./test19 -ab test1 -c </span><br><span class="line"></span><br><span class="line"><span class="comment"># Found the -a option</span></span><br><span class="line"><span class="comment"># Found the -b option, with value test1</span></span><br><span class="line"><span class="comment"># Found the -c option</span></span><br><span class="line"></span><br><span class="line">./test19 -b <span class="string">&quot;test1 test2&quot;</span> -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># Found the -b option, with value test1 test2</span></span><br><span class="line"><span class="comment"># Found the -a option</span></span><br><span class="line"></span><br><span class="line">./test19 -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># Unknown option: ?</span></span><br></pre></td></tr></table></figure>

<p><code>getopts</code> 还内置了一个 OPTIND 变量，可以在处理每个参数的时候自动 +1. OPTIND 变量初始值为 1，如果要取 params 部分，则 shift $[ $OPTIND - 1 ]</p>
<p>下面例子中, </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test20</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Processing options $ paramters with getopts</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> start index: <span class="string">&quot;<span class="variable">$OPTIND</span>&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> :ab:<span class="built_in">cd</span> opt</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$opt</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">        a) <span class="built_in">echo</span> <span class="string">&quot;Found the -a option&quot;</span> ;;</span><br><span class="line">        b) <span class="built_in">echo</span> <span class="string">&quot;Found the -b option, with value <span class="variable">$OPTARG</span>&quot;</span> ;;</span><br><span class="line">        c) <span class="built_in">echo</span> <span class="string">&quot;Found the -c option&quot;</span> ;;</span><br><span class="line">        d) <span class="built_in">echo</span> <span class="string">&quot;Found the -d option&quot;</span> ;;</span><br><span class="line">        *) <span class="built_in">echo</span> <span class="string">&quot;Unknown option: <span class="variable">$opt</span>&quot;</span> ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">echo</span> changing index: <span class="string">&quot;<span class="variable">$OPTIND</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> opt index: <span class="string">&quot;<span class="variable">$OPTIND</span>&quot;</span></span><br><span class="line"><span class="built_in">shift</span> $[ <span class="variable">$OPTIND</span> -1 ]</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Parameter <span class="variable">$count</span>: <span class="variable">$param</span>&quot;</span></span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">./test20 -a -b test1 -d test2 test3 test4</span><br><span class="line"></span><br><span class="line"><span class="comment"># Found the -a option</span></span><br><span class="line"><span class="comment"># Found the -b option, with value test1</span></span><br><span class="line"><span class="comment"># Found the -d option</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># opt index: 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Parameter 1: test2</span></span><br><span class="line"><span class="comment"># Parameter 2: test3</span></span><br><span class="line"><span class="comment"># Parameter 3: test4</span></span><br></pre></td></tr></table></figure>

<h3 id="Standardizing-Options"><a href="#Standardizing-Options" class="headerlink" title="Standardizing Options"></a>Standardizing Options</h3><p>介绍 shell 中参数表示的 comman sense</p>
<table>
<thead>
<tr>
<th align="center">Option</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-a</td>
<td align="left">Shows all objects</td>
</tr>
<tr>
<td align="center">-c</td>
<td align="left">Produces a count</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="left">Specifies a directory</td>
</tr>
<tr>
<td align="center">-e</td>
<td align="left">Expands an object</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="left">Specifies a file to read data from</td>
</tr>
<tr>
<td align="center">-h</td>
<td align="left">Displays a help message for the command</td>
</tr>
<tr>
<td align="center">-i</td>
<td align="left">Ignores text case</td>
</tr>
<tr>
<td align="center">-l</td>
<td align="left">Produces a long format version of the output</td>
</tr>
<tr>
<td align="center">-n</td>
<td align="left">Uses a non-interactive(batch) mode</td>
</tr>
<tr>
<td align="center">-o</td>
<td align="left">Specifies an output file to redirect all output</td>
</tr>
<tr>
<td align="center">-q</td>
<td align="left">Run in quiet mode</td>
</tr>
<tr>
<td align="center">-r</td>
<td align="left">Processes directories and files recursively</td>
</tr>
<tr>
<td align="center">-s</td>
<td align="left">Runs in silent mode</td>
</tr>
<tr>
<td align="center">-v</td>
<td align="left">Produces verbose output</td>
</tr>
<tr>
<td align="center">-x</td>
<td align="left">Excludes an object</td>
</tr>
<tr>
<td align="center">-y</td>
<td align="left">Answers yes to all questions</td>
</tr>
</tbody></table>
<h3 id="Getting-User-Input"><a href="#Getting-User-Input" class="headerlink" title="Getting User Input"></a>Getting User Input</h3><p>bash 提供了 read 方法来作为用户输入</p>
<blockquote>
<p>Reading basics</p>
</blockquote>
<p><code>read</code> 可以从键盘或文件中获取输入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test21</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Testing the read command</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;Enter your name: &quot;</span></span><br><span class="line"><span class="built_in">read</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$name</span>, welcome to my program.&quot;</span></span><br><span class="line"></span><br><span class="line">./test21 </span><br><span class="line"><span class="comment"># Enter your name: jack</span></span><br><span class="line"><span class="comment"># Hello jack, welcome to my program.</span></span><br><span class="line"></span><br><span class="line">./test21</span><br><span class="line"><span class="comment"># Enter your name: jack zheng</span></span><br><span class="line"><span class="comment"># Hello jack zheng, welcome to my program.</span></span><br></pre></td></tr></table></figure>

<p>上面的例子中，cmd 会将所有的输入看作一个变量处理</p>
<p>带用户提示的输入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test22</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Testing the read -p option</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Please enter your age: &quot;</span> age</span><br><span class="line">days=$[ <span class="variable">$age</span> * 365 ]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;That makes you over <span class="variable">$days</span> days old! &quot;</span></span><br><span class="line"></span><br><span class="line">./test22</span><br><span class="line"><span class="comment"># Please enter your age: 5</span></span><br><span class="line"><span class="comment"># That makes you over 1825 days old!</span></span><br></pre></td></tr></table></figure>

<p>和第一个实验对照，cmd 也可以将所有输入当作 list 处理</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test23</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Testing the read command</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Enter your name: &quot;</span> first last</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Checking data for <span class="variable">$last</span>, <span class="variable">$first</span>&quot;</span></span><br><span class="line"></span><br><span class="line">./test23</span><br><span class="line"><span class="comment"># Enter your name: jack zheng</span></span><br><span class="line"><span class="comment"># Checking data for zheng, jack</span></span><br></pre></td></tr></table></figure>

<p>如果你没有为 read 指定变量，bash 会自动将这个值赋给环境变量 $REPLY</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test24</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Testing the REPLY Environment variable</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Enter your name: &quot;</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$REPLY</span>, welcome to my program.&quot;</span></span><br><span class="line"></span><br><span class="line">./test24 </span><br><span class="line"><span class="comment"># Enter your name: jack zheng</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hello jack zheng, welcome to my program.</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Timing out</p>
</blockquote>
<p>默认情况下 read 会一直阻塞在那里，等待用户输入，但是我们也可以设置一个等待时间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test25</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Timing the data entry</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">read</span> -t 5 -p <span class="string">&quot;Please enter your name: &quot;</span> name</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$name</span>, welcome to my script&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Sorry, too slow! &quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">./test25</span><br><span class="line"><span class="comment"># Please enter your name: </span></span><br><span class="line"><span class="comment"># Sorry, too slow! </span></span><br><span class="line">./test25</span><br><span class="line"><span class="comment"># Please enter your name: jack</span></span><br><span class="line"><span class="comment"># Hello jack, welcome to my script</span></span><br></pre></td></tr></table></figure>

<p>read 还可以指定输入的长度, 设定好长度后，你输入对应长度的内容，他立马就执行下去了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test26</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Getting just one character of input</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">read</span> -n1 -p <span class="string">&quot;Do you want to continue [Y/N]? &quot;</span> answer</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$answer</span> <span class="keyword">in</span></span><br><span class="line">Y | y)  <span class="built_in">echo</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;fine, continue on...&quot;</span> ;;</span><br><span class="line">N | n) <span class="built_in">echo</span></span><br><span class="line">        <span class="built_in">echo</span> OK, goodbye</span><br><span class="line">        <span class="built_in">exit</span> ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the end of the script&quot;</span></span><br><span class="line"></span><br><span class="line">./test26</span><br><span class="line"><span class="comment"># Do you want to continue [Y/N]? y</span></span><br><span class="line"><span class="comment"># fine, continue on...</span></span><br><span class="line"><span class="comment"># This is the end of the script</span></span><br><span class="line"></span><br><span class="line">./test26</span><br><span class="line"><span class="comment"># Do you want to continue [Y/N]? n</span></span><br><span class="line"><span class="comment"># OK, goodbye</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Reading with no display</p>
</blockquote>
<p>在输入一些敏感信息时，你不希望他显示在屏幕上，可以用 -s 参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test27</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># hiding input data from the monitor</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">read</span> -s -p <span class="string">&quot;Enter your password: &quot;</span> pass</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Is you password really <span class="variable">$pass</span>? &quot;</span></span><br><span class="line"></span><br><span class="line">./test27</span><br><span class="line"><span class="comment"># Enter your password: </span></span><br><span class="line"><span class="comment"># Is you password really jack?</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Reading from a file</p>
</blockquote>
<p>Linux 系统中，可以通过 read 命令从文件中按行读取。当读完后，返回非 0</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test28</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Reading data from a file</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">count=1</span><br><span class="line">cat <span class="built_in">test</span> | <span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Line <span class="variable">$count</span>: <span class="variable">$line</span>&quot;</span></span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Finished process the file&quot;</span></span><br><span class="line"></span><br><span class="line">cat <span class="built_in">test</span></span><br><span class="line"><span class="comment"># line 1</span></span><br><span class="line"><span class="comment"># line 2</span></span><br><span class="line">./test28</span><br><span class="line">Line 1: line 1</span><br><span class="line">Line 2: line 2</span><br><span class="line">Finished process the file</span><br></pre></td></tr></table></figure>

<p>PS: 如果文件的末行没有换行，则最后一行并不会被处理</p>
<h2 id="Presenting-Data"><a href="#Presenting-Data" class="headerlink" title="Presenting Data"></a>Presenting Data</h2><p>这章主要向你展示更多的输出流处理技巧</p>
<h3 id="Understanding-Input-and-Output"><a href="#Understanding-Input-and-Output" class="headerlink" title="Understanding Input and Output"></a>Understanding Input and Output</h3><p>现在为止，我们主要采取两种输出流展示方式</p>
<ul>
<li>终端屏显</li>
<li>重定向到文件</li>
</ul>
<p>目前为止我们只能将全部内容一起输出到文件或屏幕，在下面的小节中，我们将尝试将内容分开处理</p>
<blockquote>
<p>Standard file descriptors</p>
</blockquote>
<p>Linux 系统通过 file descriptor 来指代每一个文件对象，这个 decriptor 是一个唯一的非负的整数。每个进程同一时间允许至多 9 个打开的文件。bash 中将 0，1 和 2 用于特定的用途</p>
<table>
<thead>
<tr>
<th align="center">File descriptor</th>
<th align="center">Abbreviation</th>
<th align="center">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">STDIN</td>
<td align="center">Standard input</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">STDOUT</td>
<td align="center">Standard output</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">STDERR</td>
<td align="center">Standard error</td>
</tr>
</tbody></table>
<p><strong>STDIN</strong> 标准输入，比如终端的键盘输入和 <code>&lt;</code> 的文件输入. 很多 bash 命令接收 STDIN 的输入，比如 cat， 如果你没有指定文件，他就会接收键盘输入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cat </span><br><span class="line">thi</span><br><span class="line">thi</span><br><span class="line">this</span><br><span class="line">this</span><br></pre></td></tr></table></figure>

<p><strong>STDOUT</strong> shell 的标准输出就是 terminal monitor.</p>
<p><strong>STDERR</strong> 当运行命令出异常了，可以使用这个 descriptor 导流</p>
<h3 id="Redirecting-errors"><a href="#Redirecting-errors" class="headerlink" title="Redirecting errors"></a>Redirecting errors</h3><blockquote>
<p>Redirecting error only</p>
</blockquote>
<p>像前面表哥所示，STDERR 的文件描述符是 2，你可以在 redirection symbol 前加上这个标识符来指定导向</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -al badfile 2&gt; test4</span><br><span class="line">cat test4</span><br><span class="line"><span class="comment"># ls: badfile: No such file or directory</span></span><br></pre></td></tr></table></figure>

<p>下面的例子中，badfile 不存在，所以错误信息写入 test5 中，test4 存在，所以在屏幕上显示</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -al test4 badfile 2&gt; test5</span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  0 May 29 14:07 test4</span></span><br><span class="line">cat test5</span><br><span class="line"><span class="comment"># ls: badfile: No such file or directory</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Redirecting errors and data</p>
</blockquote>
<p>如果你想将正常和异常的信息都输出到文件，你需要指定两个输出</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls </span><br><span class="line"><span class="comment"># test5</span></span><br><span class="line">ls -al test5 badfile 2&gt; test6 1&gt; test7</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># test5   test6   test7</span></span><br><span class="line">cat test6</span><br><span class="line"><span class="comment"># ls: badfile: No such file or directory</span></span><br><span class="line">cat test7</span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  39 May 29 14:08 test5</span></span><br></pre></td></tr></table></figure>

<p>如果你想将这两种信息都导入一个文件，bash 提供了一个特殊的 redirection symbol 来做这个事情 <code>&amp;&gt;</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -al test5 badfile &amp;&gt; test8</span><br><span class="line">cat test8</span><br><span class="line"><span class="comment"># ls: badfile: No such file or directory</span></span><br><span class="line"><span class="comment"># -rw-r--r--  1 i306454  staff  39 May 29 14:08 test5</span></span><br></pre></td></tr></table></figure>

<h3 id="Redirecting-Output-in-Scripts"><a href="#Redirecting-Output-in-Scripts" class="headerlink" title="Redirecting Output in Scripts"></a>Redirecting Output in Scripts</h3><p>通过 STDOUT 和 STDERR 你可以将输出导入任何 file discriptors. 有两种方式可以重定向输出</p>
<ul>
<li>Temporarily redirecting each line</li>
<li>Permanently redirecting all comands in the script</li>
</ul>
<blockquote>
<p>Temorary redirections</p>
</blockquote>
<p>这段文字的描述有点蹩脚，还是直接用案例说明把。假如你想将你的 echo 内容输出到 STDERR 指定的流中，需要怎么做？这种用法就是打印自己的 err log 啊, 可以使用 <code>&gt;&amp;2</code> 的格式</p>
<p>下面的例子中，test8 中指定第一个 echo 通过 STDERR 输出，第二个 STDOUT 输出。当直接调用时，由于两个输出默认都是打在公屏上的，所以没什么区别，但是当我指定 err 输出到 test9 时，区别就出现了。只有错误信息导到 test9 了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test8</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Testing STDERR messages</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is an error&quot;</span> &gt;&amp;2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is normal output&quot;</span></span><br><span class="line"></span><br><span class="line">./test8</span><br><span class="line">This is an error</span><br><span class="line">This is normal output</span><br><span class="line"></span><br><span class="line">./test8 2&gt; test9</span><br><span class="line"><span class="comment"># This is normal output</span></span><br><span class="line">cat test9</span><br><span class="line"><span class="comment"># This is an error</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Permanent redirections</p>
</blockquote>
<p>上面的情况适合少量打 log 的情况。如果你有好多 err 需要重新导向，你可以这么做</p>
<p>exec 会启动一个新的 shell，下例中新启动的 shell 会将 STDOUT 的内容都发送的 testout 文件中去</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test10</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Redirecting all output to a file</span></span><br><span class="line"><span class="built_in">exec</span> 1&gt;testout</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a test of redirecting all output&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;from a script to another file.&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Without having to redirect every individual line&quot;</span></span><br><span class="line"></span><br><span class="line">./test10</span><br><span class="line">cat testout</span><br><span class="line"><span class="comment"># This is a test of redirecting all output</span></span><br><span class="line"><span class="comment"># from a script to another file.</span></span><br><span class="line"><span class="comment"># Without having to redirect every individual line</span></span><br></pre></td></tr></table></figure>

<p>你可以在程序中间做这样的操作. 下面的例子中，我们在开头部分指定 err 输出到 testerror 文件，接着打印两个普通输出。再指定普通输出，输出到文件，最后指定 err 输出到 err 文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test11</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Redirecting output to different locations</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 2&gt; testerror</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the start of the script&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;now redirecting all output to another location&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 1&gt;testout</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This output should go to the testout file&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;but this should go to the testerror file&quot;</span> &gt;&amp;2</span><br><span class="line"></span><br><span class="line">./test11</span><br><span class="line"><span class="comment"># This is the start of the script</span></span><br><span class="line"><span class="comment"># now redirecting all output to another location</span></span><br><span class="line">cat testout</span><br><span class="line"><span class="comment"># This output should go to the testout file</span></span><br><span class="line">cat testerror</span><br><span class="line"><span class="comment"># but this should go to the testerror file</span></span><br></pre></td></tr></table></figure>

<p>当你改变了 STDOUT 或者 STDERR 后，要再改回来就不是那么容易了，如果你需要切换这些流，需要用到一些技巧，这些将在后面的 Creating Your Own Redirection 章节讲到</p>
<h3 id="Redirecting-Input-in-Scripts"><a href="#Redirecting-Input-in-Scripts" class="headerlink" title="Redirecting Input in Scripts"></a>Redirecting Input in Scripts</h3><p>和输出流一样，我们可以通过定向符号操纵输入流 <code>exec 0&lt; testfile</code></p>
<p>下面的例子中，我们以文件中的命令代替键盘输入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test12</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Redirecting file input</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 0&lt; test12</span><br><span class="line">count=1</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Line #<span class="variable">$count</span>: <span class="variable">$line</span>&quot;</span></span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">./test12</span><br><span class="line"><span class="comment"># Line #1: #!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Line #2: # Redirecting file input</span></span><br><span class="line"><span class="comment"># Line #3: </span></span><br><span class="line"><span class="comment"># Line #4: exec 0&lt; test12</span></span><br><span class="line"><span class="comment"># Line #5: count=1</span></span><br><span class="line"><span class="comment"># Line #6: </span></span><br><span class="line"><span class="comment"># Line #7: while read line</span></span><br><span class="line"><span class="comment"># Line #8: do</span></span><br><span class="line"><span class="comment"># Line #9: echo &quot;Line #$count: $line&quot;</span></span><br><span class="line"><span class="comment"># Line #10: count=$[ $count + 1 ]</span></span><br><span class="line"><span class="comment"># Line #11: done</span></span><br><span class="line"><span class="comment"># Line #12:</span></span><br></pre></td></tr></table></figure>

<h3 id="Creating-Your-Own-Redirection"><a href="#Creating-Your-Own-Redirection" class="headerlink" title="Creating Your Own Redirection"></a>Creating Your Own Redirection</h3><p>shell 中最多只能有 9 个 file descriptor， 我们已经用了 0，1，2.下面我们将使用 3-8 自定义我们自己的 file descriptor.</p>
<blockquote>
<p>Creating output file descriptors</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test13</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Using an alternative file descriptor</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 3&gt; test13out</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This should display on the monitor&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;and this should stored in the file&quot;</span> &gt;&amp;3</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Then this should be back on the monitor&quot;</span></span><br><span class="line"></span><br><span class="line">./test13</span><br><span class="line"><span class="comment"># This should display on the monitor</span></span><br><span class="line"><span class="comment"># Then this should be back on the monitor</span></span><br><span class="line">cat test13out </span><br><span class="line"><span class="comment"># and this should stored in the file</span></span><br></pre></td></tr></table></figure>

<p>这个概念听起来有点复杂，但是其实很直接了当的，用法也和前面的默认文件描述符是一致的。</p>
<blockquote>
<p>Redirecting file descriptors</p>
</blockquote>
<p>下面的例子中我们会做重定向的切换。开始时，我们用 3 号 descriptor 代替 1 的位置。就是所有的 echo 都会输入到 3 号中，之后，我们还原，echo 就又输出到屏幕了。这个其实只用到了一个语法 <code>3&gt;&amp;1</code>，这个语句就是用 3 代替 1， 还原的时候顺序翻一下即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test14</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Using STDOUT, then coming back to it</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 3&gt;&amp;1</span><br><span class="line"><span class="built_in">exec</span> 1&gt;test14out</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This should store in the output file&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;along with this lien&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 1&gt;&amp;3</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Now things should be back to normal&quot;</span></span><br><span class="line"></span><br><span class="line">./test14</span><br><span class="line"><span class="comment"># Now things should be back to normal</span></span><br><span class="line">cat test14out</span><br><span class="line"><span class="comment"># This should store in the output file</span></span><br><span class="line"><span class="comment"># along with this lien</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Creating input file descriptors</p>
</blockquote>
<p>和输出流一样，输入流也可以用上面的这个技巧。下面的例子中，我们先用 6 号代替原始的 0 号键盘输入，做完操作后将它还原</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test15</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Redirecting input file descriptors</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 6&lt;&amp;0</span><br><span class="line"><span class="built_in">exec</span> 0&lt; testfile</span><br><span class="line"></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Line #<span class="variable">$count</span>: <span class="variable">$line</span>&quot;</span></span><br><span class="line">    count=$[ <span class="variable">$ount</span> + 1 ]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 0&lt;&amp;6</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Are you done now? &quot;</span> answer</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$answer</span> <span class="keyword">in</span></span><br><span class="line">Y | y) <span class="built_in">echo</span> <span class="string">&quot;Goodbye&quot;</span> ;;</span><br><span class="line">N | n) <span class="built_in">echo</span> <span class="string">&quot;Sorry, this is the end.&quot;</span> ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">./test15</span><br><span class="line"><span class="comment"># Line #1: line 1</span></span><br><span class="line"><span class="comment"># Line #1: line 2</span></span><br><span class="line"><span class="comment"># Line #1: line 3</span></span><br><span class="line"><span class="comment"># Are you done now? y</span></span><br><span class="line"><span class="comment"># Goodbye</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Creating a read/write file descriptor</p>
</blockquote>
<p>感觉这个例子有点。。。鸡肋。虽然实用性不高，但是挺有趣</p>
<p>下面的例子中，我们会将 3 同时设置为输入输出描述符。先读取一行，再输入一行。读取一行后，位置定位到第二行开头，这个时候写我们自己的内容，他会覆盖之前的内容。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test16</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Redirecting input/output file descriptor</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 3&lt;&gt; testfile</span><br><span class="line"><span class="built_in">read</span> line &lt;&amp;3</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Read: <span class="variable">$line</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a test line&quot;</span> &gt;&amp;3</span><br><span class="line"></span><br><span class="line">cat testfile </span><br><span class="line"><span class="comment"># This is the first line.</span></span><br><span class="line"><span class="comment"># This is the second line.</span></span><br><span class="line"><span class="comment"># This is the third line.</span></span><br><span class="line"></span><br><span class="line">./test16</span><br><span class="line"><span class="comment"># Read: This is the first line.</span></span><br><span class="line"></span><br><span class="line">cat testfile</span><br><span class="line"><span class="comment"># This is the first line.</span></span><br><span class="line"><span class="comment"># This is a test line</span></span><br><span class="line"><span class="comment"># ine.</span></span><br><span class="line"><span class="comment"># This is the third line.</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Closing file descriptors</p>
</blockquote>
<p>新创建的 file descriptors 都会在脚本结束时自动关闭。但是如果你想在接本结束前手动关闭，需要做什么？</p>
<p>关闭的格式如下 <code>exec 3&gt;&amp;-</code>, 下面的实验中我们将 3 号指向文件，输出内容，再关闭它，再试着输出内容。可以看到，关闭后再输出会抛异常</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat badtest</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Testing closing file descriptors</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 3&gt; test17file</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a test line of data&quot;</span> &gt;&amp;3</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 3&gt;&amp;-</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This won&#x27;t work&quot;</span> &gt;&amp;3</span><br><span class="line"></span><br><span class="line">./badtest</span><br><span class="line"><span class="comment"># ./badtest: line 10: 3: Bad file descriptor</span></span><br><span class="line">cat test17file</span><br><span class="line"><span class="comment"># This is a test line of data</span></span><br></pre></td></tr></table></figure>

<p>除此之外还有一个更重要的细节需要注意，如果你在一个脚本中，关闭后再使用同一个 file descriptor 的话。它会将之前写的内容覆盖掉</p>
<p>下面实验中，我们先用 3 号描述符将信息写入文件，关闭后 cat 输出，再打开它写东西。最后发现之前写的被覆盖了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test17</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Testing closing file descriptors</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 3&gt; test17file</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a test line of data&quot;</span> &gt;&amp;3</span><br><span class="line"><span class="built_in">exec</span> 3&gt;&amp;-</span><br><span class="line"></span><br><span class="line">cat test17file</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 3&gt; test17file</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This&#x27;ll be bad&quot;</span> &gt;&amp;3</span><br><span class="line"></span><br><span class="line">./test17</span><br><span class="line"><span class="comment"># This is a test line of data</span></span><br><span class="line">cat test17file </span><br><span class="line"><span class="comment"># This&#x27;ll be bad</span></span><br></pre></td></tr></table></figure>

<h3 id="Listing-Open-File-Descriptors"><a href="#Listing-Open-File-Descriptors" class="headerlink" title="Listing Open File Descriptors"></a>Listing Open File Descriptors</h3><p><code>lsof</code> 可以列出整个系统所有发开的 file descriptor, 这个在权限方面有些争议。MacOS 也有这个命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> lsof</span><br><span class="line"><span class="comment"># /usr/sbin/lsof</span></span><br></pre></td></tr></table></figure>

<p>显示当前进程的文件描述符使用情况</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lsof -a -p $$ -d 0,1,2</span><br><span class="line"><span class="comment"># COMMAND   PID    USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span></span><br><span class="line"><span class="comment"># bash    35349 i306454    0u   CHR   16,1 0t937569  667 /dev/ttys001</span></span><br><span class="line"><span class="comment"># bash    35349 i306454    1u   CHR   16,1 0t937569  667 /dev/ttys001</span></span><br><span class="line"><span class="comment"># bash    35349 i306454    2u   CHR   16,1 0t937569  667 /dev/ttys001</span></span><br></pre></td></tr></table></figure>

<p>lsof 输出说明</p>
<table>
<thead>
<tr>
<th align="left">Column</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">COMMAND</td>
<td align="left">The first nine characters of the name of the command in the process</td>
</tr>
<tr>
<td align="left">PID</td>
<td align="left">The process ID of the process</td>
</tr>
<tr>
<td align="left">USER</td>
<td align="left">The login name of the user who owns the process</td>
</tr>
<tr>
<td align="left">FD</td>
<td align="left">The file descriptor number and access type. r-read, w-write, u-read/write</td>
</tr>
<tr>
<td align="left">TYPE</td>
<td align="left">The type of file. CHR-character, BLK-block, DIR-directory, REG-regular file</td>
</tr>
<tr>
<td align="left">DEVICE</td>
<td align="left">The device numbers(major and minor) of the device</td>
</tr>
<tr>
<td align="left">SIZE</td>
<td align="left">If available, the size of the file</td>
</tr>
<tr>
<td align="left">NODE</td>
<td align="left">The node number of the local file</td>
</tr>
<tr>
<td align="left">NAME</td>
<td align="left">The name of the file</td>
</tr>
</tbody></table>
<p>作为对比，下面是一个文件中的 file descriptor 的信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test18</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Testing lsof with file descriptors</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 3&gt; test18file1</span><br><span class="line"><span class="built_in">exec</span> 6&gt; test18file2</span><br><span class="line"><span class="built_in">exec</span> 7&lt; testfile</span><br><span class="line"></span><br><span class="line">lsof -a -p $$ -d 0,1,2,3,6,7</span><br><span class="line"></span><br><span class="line">./test18</span><br><span class="line"><span class="comment"># COMMAND   PID    USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME</span></span><br><span class="line"><span class="comment"># bash    39156 i306454    0u   CHR   16,1 0t937995      667 /dev/ttys001</span></span><br><span class="line"><span class="comment"># bash    39156 i306454    1u   CHR   16,1 0t937995      667 /dev/ttys001</span></span><br><span class="line"><span class="comment"># bash    39156 i306454    2u   CHR   16,1 0t937995      667 /dev/ttys001</span></span><br><span class="line"><span class="comment"># bash    39156 i306454    3w   REG    1,5        0 51179042 /Users/i306454/tmp/bash_test/test18file1</span></span><br><span class="line"><span class="comment"># bash    39156 i306454    6w   REG    1,5        0 51179043 /Users/i306454/tmp/bash_test/test18file2</span></span><br><span class="line"><span class="comment"># bash    39156 i306454    7r   REG    1,5       73 51174255 /Users/i306454/tmp/bash_test/testfile</span></span><br></pre></td></tr></table></figure>

<h3 id="Suppressing-Command-Output"><a href="#Suppressing-Command-Output" class="headerlink" title="Suppressing Command Output"></a>Suppressing Command Output</h3><p>有些时候，你并不想看到任何异常输出，比如后台运行的时候。这时你可以将 STDERR 的内容输出到 null file 中去，位置是 /dev/null</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -al &gt; /dev/null</span><br><span class="line"><span class="comment"># cat /dev/null</span></span><br><span class="line"></span><br><span class="line">ls -al badfile test16 2&gt; /dev/null</span><br><span class="line"><span class="comment"># -rwxr--r--  1 i306454  staff  151 May 30 15:12 test16</span></span><br></pre></td></tr></table></figure>

<p>你也可以将输入指定到 null file. 这样做可以快速清空一个文件，算是 rm + touch 的简化版</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat testfile</span><br><span class="line"><span class="comment"># This is the first line.</span></span><br><span class="line"><span class="comment"># This is a test line</span></span><br><span class="line"><span class="comment"># ine.</span></span><br><span class="line"><span class="comment"># This is the third line.</span></span><br><span class="line"></span><br><span class="line">cat /dev/null &gt; testfile</span><br><span class="line">cat testfile</span><br></pre></td></tr></table></figure>

<h3 id="Using-Temporary-Files"><a href="#Using-Temporary-Files" class="headerlink" title="Using Temporary Files"></a>Using Temporary Files</h3><p>Linux 系统预留了 <code>/tmp</code> 文件夹放置临时文件, 设置提供了专用命令 <code>mktemp</code> 来创建临时文件，这个命令创建的文件在 umask 上给创建者所有权限，其他人则没有权限</p>
<blockquote>
<p>Creating a local temporary file</p>
</blockquote>
<p>零时文件名字中的末尾的大写 X 会被替换成随机数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mktemp testing.XXXXXX</span><br><span class="line">ls testing*</span><br><span class="line"><span class="comment"># testing.I3p5pe</span></span><br></pre></td></tr></table></figure>

<p>实验脚本中，我们创建一个临时文件并写入内容，然后关闭流，并 cat 一下。最后移除文件。把异常信息丢掉不显示</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test19</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Creating and using a temp file</span></span><br><span class="line"></span><br><span class="line">tempfile=$(mktemp test19.XXXXXX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 3&gt;<span class="variable">$tempfile</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This script writes to temp file <span class="variable">$tempfile</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the first line&quot;</span> &gt;&amp;3</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the second line&quot;</span> &gt;&amp;3</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the third line&quot;</span> &gt;&amp;3</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 3&gt;&amp;-</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Done creating temp file. the contents are:&quot;</span></span><br><span class="line">cat <span class="variable">$tempfile</span></span><br><span class="line"></span><br><span class="line">rm -f <span class="variable">$tempfile</span> 2&gt; /dev/null</span><br><span class="line"></span><br><span class="line">./test19</span><br><span class="line"><span class="comment"># This script writes to temp file test19.ksgCft</span></span><br><span class="line"><span class="comment"># Done creating temp file. the contents are:</span></span><br><span class="line"><span class="comment"># This is the first line</span></span><br><span class="line"><span class="comment"># This is the second line</span></span><br><span class="line"><span class="comment"># This is the third line</span></span><br><span class="line">ls test19*</span><br><span class="line"><span class="comment"># test19</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Creating a temporary file in /tmp</p>
</blockquote>
<p>前面的临时文件都是创建在当前文件夹下的，下面介绍在 tmp 文件夹下的创建办法，其实就是加一个 -t 的参数。。。结果和书上有区别，并该是 MacOS 定制过</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mktemp -t test.XXXXXX</span><br><span class="line"><span class="comment"># /var/folders/yr/8yr4mzlj1x34tf4m9c_wh2_h0000gn/T/test.XXXXXX.enBtwKYB</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test20</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Creating a temp file in /tmp</span></span><br><span class="line"></span><br><span class="line">tempfile=$(mktemp tmp.XXXXXX)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a test file.&quot;</span> &gt; <span class="variable">$tempfile</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the second line of the test.&quot;</span> &gt;&gt; <span class="variable">$tempfile</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The temp file is located at: <span class="variable">$tempfile</span>&quot;</span></span><br><span class="line">cat <span class="variable">$tempfile</span></span><br><span class="line">rm -f <span class="variable">$tempfile</span></span><br><span class="line"></span><br><span class="line">./test20</span><br><span class="line"><span class="comment"># The temp file is located at: tmp.OldzdO</span></span><br><span class="line"><span class="comment"># This is a test file.</span></span><br><span class="line"><span class="comment"># This is the second line of the test.</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Creating a temporary directory</p>
</blockquote>
<p>-d 创建临时文件夹</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test21</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Using a temporary directory</span></span><br><span class="line"></span><br><span class="line">tempdir=$(mktemp -d dir.XXXXXX)</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$tempdir</span></span><br><span class="line">tempfile1=$(mktemp temp.XXXXXX)</span><br><span class="line">tempfile2=$(mktemp temp.XXXXXX)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 7&gt; <span class="variable">$tempfile1</span></span><br><span class="line"><span class="built_in">exec</span> 8&gt; <span class="variable">$tempfile2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Sending data to directory <span class="variable">$tempdir</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a test line of data for <span class="variable">$tempfile1</span>&quot;</span> &gt;&amp;7</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a test line of data for <span class="variable">$tempfile2</span>&quot;</span> &gt;&amp;8</span><br><span class="line"></span><br><span class="line">./test21</span><br><span class="line"><span class="comment"># Sending data to directory dir.hE8Hbr</span></span><br><span class="line"></span><br><span class="line">ls -l dir*</span><br><span class="line"><span class="comment"># total 16</span></span><br><span class="line"><span class="comment"># -rw-------  1 i306454  staff  44 May 30 16:53 temp.2V4FAk</span></span><br><span class="line"><span class="comment"># -rw-------  1 i306454  staff  44 May 30 16:53 temp.59JjLm</span></span><br><span class="line"></span><br><span class="line">cat dir.hE8Hbr/temp.2V4FAk </span><br><span class="line"><span class="comment"># This is a test line of data for temp.2V4FAk</span></span><br><span class="line">cat dir.hE8Hbr/temp.59JjLm </span><br><span class="line"><span class="comment"># This is a test line of data for temp.59JjLm</span></span><br></pre></td></tr></table></figure>

<h3 id="Logging-Messages"><a href="#Logging-Messages" class="headerlink" title="Logging Messages"></a>Logging Messages</h3><p>有时你可能想一个流即打印到屏幕上，也输出到文件中，这个时候，你可以使用 tee</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">date | tee testfile </span><br><span class="line"><span class="comment"># Sun May 30 16:58:30 CST 2021</span></span><br><span class="line">cat testfile </span><br><span class="line"><span class="comment"># Sun May 30 16:58:30 CST 2021</span></span><br></pre></td></tr></table></figure>

<p>注意，tee 默认会覆盖原有内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">who | tee testfile</span><br><span class="line"><span class="comment"># i306454  console  May 27 15:12 </span></span><br><span class="line"><span class="comment"># i306454  ttys000  May 27 16:21 </span></span><br><span class="line">cat testfile </span><br><span class="line"><span class="comment"># i306454  console  May 27 15:12 </span></span><br><span class="line"><span class="comment"># i306454  ttys000  May 27 16:21</span></span><br></pre></td></tr></table></figure>

<p>之前 date 的内容被覆盖了，你可以用 -a 做 append 操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">date | tee -a testfile</span><br><span class="line"><span class="comment"># Sun May 30 17:00:41 CST 2021</span></span><br><span class="line">cat testfile </span><br><span class="line"><span class="comment"># i306454  console  May 27 15:12 </span></span><br><span class="line"><span class="comment"># i306454  ttys000  May 27 16:21 </span></span><br><span class="line"><span class="comment"># Sun May 30 17:00:41 CST 2021</span></span><br></pre></td></tr></table></figure>

<p>实操</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test22</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Using the tee command for logging</span></span><br><span class="line"></span><br><span class="line">tempfile=test22file</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the start of the test&quot;</span> | tee <span class="variable">$tempfile</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the second of the test&quot;</span> | tee -a <span class="variable">$tempfile</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the end of the test&quot;</span> | tee -a <span class="variable">$tempfile</span></span><br><span class="line"></span><br><span class="line">./test22</span><br><span class="line"><span class="comment"># This is the start of the test</span></span><br><span class="line"><span class="comment"># This is the second of the test</span></span><br><span class="line"><span class="comment"># This is the end of the test</span></span><br><span class="line">cat test22file </span><br><span class="line"><span class="comment"># This is the start of the test</span></span><br><span class="line"><span class="comment"># This is the second of the test</span></span><br><span class="line"><span class="comment"># This is the end of the test</span></span><br></pre></td></tr></table></figure>

<h3 id="Practical-Example"><a href="#Practical-Example" class="headerlink" title="Practical Example"></a>Practical Example</h3><p>解析一个 csv 文件，将其中的内容重组成一个 SQL 文件用作 import</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- cat members.csv  --&gt;</span><br><span class="line">Blum,Richard,123 Main St.,Chicago,IL,60601</span><br><span class="line">Blum,Barbara,123 Main St.,Chicago,IL,60601</span><br><span class="line">Bresnahan,Christine,456 Oak Ave.,Columbus,OH,43201</span><br><span class="line">Bresnahan,Timothy,456 Oak Ave.,Columbus,OH,43201bash-5.1$ .&#x2F;test23</span><br></pre></td></tr></table></figure>

<p>主要语法说明</p>
<ul>
<li>done &lt; ${1}: 将命令行中给的文件做输入</li>
<li>read lname…: 以逗号为分割，每个字段给个名字，方便后面调用</li>
<li>cat &gt;&gt; $outfile &lt;&lt; EOF: cat 会拿到一行的内容，并对这些内容做替换放到 outfile 中去. 这个用法和 tee myfile &lt;&lt; EOF.. 有异曲同工之妙</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test23</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Read file and create INSERT statements for MySQL</span></span><br><span class="line"></span><br><span class="line">outfile=<span class="string">&#x27;members.sql&#x27;</span></span><br><span class="line">IFS=<span class="string">&#x27;,&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> lname fname address city state zip</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    cat &gt;&gt; <span class="variable">$outfile</span> &lt;&lt; EOF</span><br><span class="line">    INSERT INTO members (lname, fname, address, city, state, zip) VALUES (<span class="string">&#x27;$lanme&#x27;</span>, <span class="string">&#x27;$fname&#x27;</span>, <span class="string">&#x27;$address&#x27;</span>, <span class="string">&#x27;$city&#x27;</span>, <span class="string">&#x27;$state&#x27;</span>, <span class="string">&#x27;$zip&#x27;</span>);</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">done</span> &lt; <span class="variable">$&#123;1&#125;</span></span><br><span class="line"></span><br><span class="line">./test23 members.csv </span><br><span class="line">cat members.sql </span><br><span class="line">    INSERT INTO members (lname, fname, address, city, state, zip) VALUES (<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;Richard&#x27;</span>, <span class="string">&#x27;123 Main St.&#x27;</span>, <span class="string">&#x27;Chicago&#x27;</span>, <span class="string">&#x27;IL&#x27;</span>, <span class="string">&#x27;60601&#x27;</span>);</span><br><span class="line">    INSERT INTO members (lname, fname, address, city, state, zip) VALUES (<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;Barbara&#x27;</span>, <span class="string">&#x27;123 Main St.&#x27;</span>, <span class="string">&#x27;Chicago&#x27;</span>, <span class="string">&#x27;IL&#x27;</span>, <span class="string">&#x27;60601&#x27;</span>);</span><br><span class="line">    INSERT INTO members (lname, fname, address, city, state, zip) VALUES (<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;Christine&#x27;</span>, <span class="string">&#x27;456 Oak Ave.&#x27;</span>, <span class="string">&#x27;Columbus&#x27;</span>, <span class="string">&#x27;OH&#x27;</span>, <span class="string">&#x27;43201&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Script-Control"><a href="#Script-Control" class="headerlink" title="Script Control"></a>Script Control</h2><h3 id="Handling-Signals"><a href="#Handling-Signals" class="headerlink" title="Handling Signals"></a>Handling Signals</h3><table>
<thead>
<tr>
<th align="left">Signal</th>
<th align="left">Name</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">SIGHUP</td>
<td align="left">Hangs up</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">SIGINT</td>
<td align="left">Interrupts</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">SIGQUIT</td>
<td align="left">Stops running</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">SIGKILL</td>
<td align="left">Unconditionally terminates</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left">SIGSEGV</td>
<td align="left">Produces segment violation</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left">SIGTERM</td>
<td align="left">Terminates if possible</td>
</tr>
<tr>
<td align="left">17</td>
<td align="left">SIGSTOP</td>
<td align="left">Stops unconditionally, but doesn’t terminate</td>
</tr>
<tr>
<td align="left">18</td>
<td align="left">SIGTSTP</td>
<td align="left">Stops or pauses, but continues to run in background</td>
</tr>
<tr>
<td align="left">19</td>
<td align="left">SIGCONT</td>
<td align="left">Resumes execution after STOP or TSTP</td>
</tr>
</tbody></table>
<p>默认情况下，bash shell 会忽略 QUIT 和 TERM 这两个信息，但是可以识别 HUP 和 INT。</p>
<blockquote>
<p>Generating signals</p>
</blockquote>
<p>通过键盘操作你可以产生两种信号</p>
<p><strong>Interrupting a process</strong> <code>Ctrl + C</code> 可以生成 SIGINT 信号并把它发送到任何终端正在执行的进程中</p>
<p><strong>Pausing a process</strong> <code>Ctrl + Z</code> 停止一个进程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sleep 100</span><br><span class="line"><span class="comment"># ^Z</span></span><br><span class="line"><span class="comment"># [1]+  Stopped                 sleep 100</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line"><span class="comment"># There are stopped jobs.</span></span><br></pre></td></tr></table></figure>

<p>当有 stop 的进程是，你是不能退出 bash 的可以用 ps 查看. 对应的 job 的 S(status) 为 T。你可以使用 kill 杀死它</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ps -l </span><br><span class="line"><span class="comment">#   UID   PID  PPID        F CPU PRI NI       SZ    RSS WCHAN     S             ADDR TTY           TIME CMD</span></span><br><span class="line"><span class="comment">#   ...</span></span><br><span class="line"><span class="comment">#   501 17153 12576     4006   0  31  0  4268408    672 -      T                   0 ttys001    0:00.00 sleep 100</span></span><br><span class="line"><span class="comment">#   ...</span></span><br><span class="line"><span class="built_in">kill</span> -9 17153</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Trapping signals</p>
</blockquote>
<p>脚本中我们可以指定需要忽略的 signal, 格式为 <code>trap command signals</code>。</p>
<p>下面的示例中，我们在脚本中指定忽略 <code>Ctrl + C</code> 发出的 SIGINT 信号，运行过程中即使按下组合键脚本继续运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test1.sh </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Testing signal trapping</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;echo &#x27; Sorry! I have trapped Ctrl-C&#x27;&quot;</span> SIGINT</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span> This is a <span class="built_in">test</span> script</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 10 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Loop #<span class="variable">$count</span>&quot;</span></span><br><span class="line">    sleep 1</span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the end of the test script&quot;</span></span><br><span class="line"></span><br><span class="line">./test1.sh </span><br><span class="line"><span class="comment"># This is a test script</span></span><br><span class="line"><span class="comment"># Loop #1</span></span><br><span class="line"><span class="comment"># Loop #2</span></span><br><span class="line"><span class="comment"># Loop #3</span></span><br><span class="line"><span class="comment"># Loop #4</span></span><br><span class="line"><span class="comment"># ^C Sorry! I have trapped Ctrl-C</span></span><br><span class="line"><span class="comment"># Loop #5</span></span><br><span class="line"><span class="comment"># Loop #6</span></span><br><span class="line"><span class="comment"># Loop #7</span></span><br><span class="line"><span class="comment"># Loop #8</span></span><br><span class="line"><span class="comment"># Loop #9</span></span><br><span class="line"><span class="comment"># Loop #10</span></span><br><span class="line"><span class="comment"># ^C Sorry! I have trapped Ctrl-C</span></span><br><span class="line"><span class="comment"># This is the end of the test script</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Trapping a script exit</p>
</blockquote>
<p>trap 命令还可以做到，当脚本结束时执行命令的效果，即使是通过 Ctrl + C 结束也会被出发。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test2.sh </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Trapping the script exit</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;echo Goodbye...&quot;</span> EXIT</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 5 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Loop #<span class="variable">$count</span>&quot;</span></span><br><span class="line">    sleep 1</span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the end of the test script&quot;</span></span><br><span class="line"></span><br><span class="line">./test2.sh </span><br><span class="line"><span class="comment"># Loop #1</span></span><br><span class="line"><span class="comment"># Loop #2</span></span><br><span class="line"><span class="comment"># ^CGoodbye...</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Modifying or removing a trap</p>
</blockquote>
<p>下面示例中展示了如何修改 trap 的动作。我们先定义当遇到 SIGINT 时 echo 的内容。当 5 秒循环后修改 echo 的内容。通过触发 SIGINT 查看改动是否生效</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test3.sh </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Modifying a set trap</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;echo &#x27;Sorry... Ctrl-C is trapped.&#x27;&quot;</span> SIGINT</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 5 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Loop #<span class="variable">$count</span>&quot;</span></span><br><span class="line">    sleep 1</span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;echo &#x27; I modified the trap!&#x27;&quot;</span> SIGINT</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 5 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Loop #<span class="variable">$count</span>&quot;</span></span><br><span class="line">    sleep 1</span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">./test3.sh </span><br><span class="line"><span class="comment"># Loop #1</span></span><br><span class="line"><span class="comment"># Loop #2</span></span><br><span class="line"><span class="comment"># ^CSorry... Ctrl-C is trapped.</span></span><br><span class="line"><span class="comment"># Loop #3</span></span><br><span class="line"><span class="comment"># Loop #4</span></span><br><span class="line"><span class="comment"># ^CSorry... Ctrl-C is trapped.</span></span><br><span class="line"><span class="comment"># Loop #5</span></span><br><span class="line"><span class="comment"># Loop #1</span></span><br><span class="line"><span class="comment"># Loop #2</span></span><br><span class="line"><span class="comment"># ^C I modified the trap!</span></span><br><span class="line"><span class="comment"># Loop #3</span></span><br><span class="line"><span class="comment"># Loop #4</span></span><br><span class="line"><span class="comment"># ^C I modified the trap!</span></span><br><span class="line"><span class="comment"># Loop #5</span></span><br></pre></td></tr></table></figure>

<p>你也可以通过 <code>trap -- SIGINT</code> 移除定义的 trap</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test3b.sh </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Modifying a set trap</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;echo &#x27;Sorry... Ctrl-C is trapped.&#x27;&quot;</span> SIGINT</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 5 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Loop #<span class="variable">$count</span>&quot;</span></span><br><span class="line">    sleep 1</span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">trap</span> -- SIGINT</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;I just removed the trap&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 5 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Loop #<span class="variable">$count</span>&quot;</span></span><br><span class="line">    sleep 1</span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">./test3b.sh </span><br><span class="line"><span class="comment"># Loop #1</span></span><br><span class="line"><span class="comment"># Loop #2</span></span><br><span class="line"><span class="comment"># ^CSorry... Ctrl-C is trapped.</span></span><br><span class="line"><span class="comment"># Loop #3</span></span><br><span class="line"><span class="comment"># Loop #4</span></span><br><span class="line"><span class="comment"># Loop #5</span></span><br><span class="line"><span class="comment"># I just removed the trap</span></span><br><span class="line"><span class="comment"># Loop #1</span></span><br><span class="line"><span class="comment"># Loop #2</span></span><br><span class="line"><span class="comment"># ^C</span></span><br></pre></td></tr></table></figure>

<p><strong>Tip</strong> 上面的去除也可以用单横线 <code>trap - SIGINT</code></p>
<h3 id="Running-scripts-in-Background-Mode"><a href="#Running-scripts-in-Background-Mode" class="headerlink" title="Running scripts in Background Mode"></a>Running scripts in Background Mode</h3><p>试想一下下面的情形，如果你的脚本需要执行比较长的时间，如果你在终端运行了它，那么你就没有终端可用了。你可以使用 background 的模式跑类似的脚本，<code>ps</code> 显示那些 process 很多都是后台运行的</p>
<blockquote>
<p>Running in the background</p>
</blockquote>
<p>想要后台运行脚本是很简单的，只需要在调用脚本时后面接一个 ampersand symbol <code>&amp;</code> 即可</p>
<p>下面程序中，我们声明了一个计时器，并在后台运行。运行时他会给出 PID 信息。当脚本执行结束时会打印 done 的信息</p>
<p>PS: bash 测试的时候要我会车才会打印，zsh 自动打印</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test4.sh </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Test running in the background</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 10 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    sleep 1</span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">./test4.sh &amp;</span><br><span class="line"><span class="comment"># [1] 16253</span></span><br><span class="line"><span class="comment"># [1]  + 16360 done       ./test4.sh</span></span><br></pre></td></tr></table></figure>

<p>当使用 background mode 的时候，他还是用的 STDOUT 和 STDERR</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test5.sh                                 </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Test running in the background with output</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Start the test script&quot;</span></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 5 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Loop #<span class="variable">$count</span>&quot;</span></span><br><span class="line">    sleep 1</span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Test script is complete&quot;</span></span><br><span class="line"></span><br><span class="line">./test5.sh &amp;</span><br><span class="line"><span class="comment"># [1] 16474</span></span><br><span class="line"><span class="comment"># bash-5.1$ Start the test script</span></span><br><span class="line"><span class="comment"># Loop #1</span></span><br><span class="line"><span class="comment"># Loop #2</span></span><br><span class="line"><span class="comment"># Loop #3</span></span><br><span class="line"><span class="comment"># Loop #4</span></span><br><span class="line"><span class="comment"># Loop #5</span></span><br><span class="line"><span class="comment"># Test script is complete</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [1]+  Done                    ./test5.sh</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Running multiple background jobs</p>
</blockquote>
<p>如果你想启动多个 background job 只需要终端运行多个 <code>xx.sh &amp;</code> 即可。每次系统多会分配一个 job id 和 process id 给后台进程，可以通过 ps 查看</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./test5.sh &amp;</span><br><span class="line">./test5.sh &amp;</span><br><span class="line">ps                  </span><br><span class="line"><span class="comment">#   PID TTY           TIME CMD</span></span><br><span class="line"><span class="comment">#  8019 ttys000    0:04.39 /bin/zsh --login -i</span></span><br><span class="line"><span class="comment">#  1479 ttys001    0:01.61 /bin/zsh -l</span></span><br><span class="line"><span class="comment"># 16661 ttys001    0:00.01 /usr/local/bin/bash ./test5.sh</span></span><br><span class="line"><span class="comment"># 16681 ttys001    0:00.01 /usr/local/bin/bash ./test5.sh</span></span><br><span class="line"><span class="comment"># 16700 ttys001    0:00.00 sleep 1</span></span><br><span class="line"><span class="comment"># 16702 ttys001    0:00.00 sleep 1</span></span><br><span class="line"><span class="comment">#  3202 ttys002    0:04.87 -zsh</span></span><br><span class="line"><span class="comment">#  9415 ttys003    0:01.10 -zsh</span></span><br></pre></td></tr></table></figure>

<h3 id="Running-Scripts-without-a-Hang-Up"><a href="#Running-Scripts-without-a-Hang-Up" class="headerlink" title="Running Scripts without a Hang-Up"></a>Running Scripts without a Hang-Up</h3><p>通过 <code>nohup</code> 命令，你可以让脚本始终在后台运行，即使关闭终端也行</p>
<p><code>nohup</code> 会将 script 和 STDOUT， STDERR 解绑。自动将输出绑定到 nohup.out 文件。如果你在一个文件夹下启动多个 nohup process, 他们的输出会混在一起</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nohup ./test1.sh &amp;</span><br><span class="line">cat nohup.out </span><br><span class="line"><span class="comment"># This is a test script</span></span><br><span class="line"><span class="comment"># Loop #1</span></span><br><span class="line"><span class="comment"># Loop #2</span></span><br><span class="line"><span class="comment"># Loop #3</span></span><br><span class="line"><span class="comment"># Loop #4</span></span><br><span class="line"><span class="comment"># Loop #5</span></span><br><span class="line"><span class="comment"># Loop #6</span></span><br><span class="line"><span class="comment"># Loop #7</span></span><br><span class="line"><span class="comment"># Loop #8</span></span><br><span class="line"><span class="comment"># Loop #9</span></span><br><span class="line"><span class="comment"># Loop #10</span></span><br><span class="line"><span class="comment"># This is the end of the test script</span></span><br><span class="line"><span class="comment"># [1]+  Done                    nohup ./test1.sh</span></span><br></pre></td></tr></table></figure>

<h3 id="Controlling-the-Job"><a href="#Controlling-the-Job" class="headerlink" title="Controlling the Job"></a>Controlling the Job</h3><p>job control 即 开始/通知/kill/重启 jobs 的动作</p>
<blockquote>
<p>Viewing jobs</p>
</blockquote>
<p><code>jobs</code> cmd 让你可以查看 shell 正在运行的 jobs</p>
<p>下面的例子中，我们启动一个计时器脚本。第一次运行，中间通过 Ctrl + Z stop 它。第二次采用后台运行。然后通过 jobs 命令观察这两个 job 的状态。jobs -l 可以显示 PID</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test10.sh </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Test job control</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># $$ to display the PID of process running this script</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Script Process ID: $$&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 10 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Loop #<span class="variable">$count</span>&quot;</span></span><br><span class="line">    sleep 1</span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;End of script...&quot;</span></span><br><span class="line"></span><br><span class="line">./test10.sh </span><br><span class="line"><span class="comment"># Script Process ID: 17179</span></span><br><span class="line"><span class="comment"># Loop #1</span></span><br><span class="line"><span class="comment"># Loop #2</span></span><br><span class="line"><span class="comment"># ^Z</span></span><br><span class="line"><span class="comment"># [1]+  Stopped                 ./test10.sh</span></span><br><span class="line">./test10.sh &gt; test10.out &amp;</span><br><span class="line"><span class="comment"># [2] 17192</span></span><br><span class="line"><span class="built_in">jobs</span> </span><br><span class="line"><span class="comment"># [1]+  Stopped                 ./test10.sh</span></span><br><span class="line"><span class="comment"># [2]-  Running                 ./test10.sh &gt; test10.out &amp;</span></span><br><span class="line"><span class="built_in">jobs</span> -l </span><br><span class="line"><span class="comment"># [1]+ 17179 Suspended: 18           ./test10.sh</span></span><br><span class="line"><span class="comment"># [2]- 17192 Done                    ./test10.sh &gt; test10.out</span></span><br></pre></td></tr></table></figure>

<p>jobs 命令的可选参数</p>
<table>
<thead>
<tr>
<th align="left">Parameter</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-l</td>
<td align="left">List the PID of the process along with the job number</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">Lists only jobs that have changed their status since the last notification from the shell</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">Lists only the PIDs of the jobs</td>
</tr>
<tr>
<td align="left">-r</td>
<td align="left">Lists only the running jobs</td>
</tr>
<tr>
<td align="left">-s</td>
<td align="left">Lists only stopped jobs</td>
</tr>
</tbody></table>
<p>jobs 列出的信息可以看到加号和减号。<code>+</code> 表示 default job. <code>-</code> 表示即将变成 default job 的 job。同一时间，只有一个带 加号 的 job 和一个带 减号 的 job。</p>
<p>下面实验中，我们启动三个后台脚本并观察 jobs 状态</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./test10.sh &gt; test10a.out &amp;</span><br><span class="line"><span class="comment"># [1] 17444</span></span><br><span class="line">./test10.sh &gt; test10b.out &amp;</span><br><span class="line"><span class="comment"># [2] 17448</span></span><br><span class="line">./test10.sh &gt; test10c.out &amp;</span><br><span class="line"><span class="comment"># [3] 17456</span></span><br><span class="line"><span class="built_in">jobs</span> -l </span><br><span class="line"><span class="comment"># [1]  17444 Running                 ./test10.sh &gt; test10a.out &amp;</span></span><br><span class="line"><span class="comment"># [2]- 17448 Running                 ./test10.sh &gt; test10b.out &amp;</span></span><br><span class="line"><span class="comment"># [3]+ 17456 Running                 ./test10.sh &gt; test10c.out &amp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> 17444</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Restarting stopped jobs</p>
</blockquote>
<p>通过 bash 的 job control 你可以重新启动停止的脚本，启动方式有 background 和 foreground 两种，后者会接管终端</p>
<p>当有多个 script 停止时，可以使用 bg + num 的方式启动对应的脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test11.sh </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Test job control</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 10 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    sleep 1</span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;End of script...&quot;</span></span><br><span class="line"></span><br><span class="line">./test11.sh </span><br><span class="line"><span class="comment"># ^Z</span></span><br><span class="line"><span class="comment"># [1]+  Stopped                 ./test11.sh</span></span><br><span class="line">./test11.sh </span><br><span class="line"><span class="comment"># ^Z</span></span><br><span class="line"><span class="comment"># [2]+  Stopped                 ./test11.sh</span></span><br><span class="line"><span class="built_in">jobs</span> -l</span><br><span class="line"><span class="comment"># [1]- 17657 Suspended: 18           ./test11.sh</span></span><br><span class="line"><span class="comment"># [2]+ 17659 Suspended: 18           ./test11.sh</span></span><br><span class="line"><span class="built_in">bg</span> 2</span><br><span class="line"><span class="comment"># [2]+ ./test11.sh &amp;</span></span><br><span class="line"><span class="comment"># End of script...</span></span><br></pre></td></tr></table></figure>

<p><code>bg</code> 和 <code>fg</code> 的最主要的区别。如果用 bg, 你还可以在当前终端运行命令，如果是 fg 你需要等命令全部执行完了才能继续运行</p>
<h3 id="Being-Nice"><a href="#Being-Nice" class="headerlink" title="Being Nice"></a>Being Nice</h3><p>Linux 系统中各 process 都有优先级，从 -20 到 19 不等。 shell 启动的 process 默认都是 0。19 是最低优先级的。可以通过 Nice guys finish last 方便记忆</p>
<blockquote>
<p>Using the nice command</p>
</blockquote>
<p>当需要指定优先级时，可以通过使用 <code>nice</code> 命令指定优先级等级</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MacOS 不支持 cmd column</span></span><br><span class="line">nice -n 10 ./test4.sh &gt; test4.out &amp;</span><br><span class="line"><span class="comment"># [2] 18051</span></span><br><span class="line"><span class="comment"># [1]   Done                    nice -n 10 ./test4.sh &gt; test4.out</span></span><br><span class="line">ps -p 18051 -o pid,ppid,ni</span><br><span class="line"><span class="comment">#   PID  PPID NI</span></span><br><span class="line"><span class="comment"># 18051 16881 10</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Using the renice command</p>
</blockquote>
<p>当 process 运行是，可以通过 <code>renice</code> 调整优先级</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./test11.sh &amp;</span><br><span class="line"><span class="comment"># [1] 18154</span></span><br><span class="line">ps -p 18154 -o pid,ni</span><br><span class="line"><span class="comment">#   PID NI</span></span><br><span class="line"><span class="comment"># 18154  0</span></span><br><span class="line">renice -n 10 -p 18154</span><br><span class="line">ps -p 18154 -o pid,ni</span><br><span class="line"><span class="comment">#   PID NI</span></span><br><span class="line"><span class="comment"># 18154 10</span></span><br></pre></td></tr></table></figure>

<p>和 nice 一样，renice 也有以下限制</p>
<ul>
<li>只能 renice 你自己 own 的 processes</li>
<li>renice 只能将优先级调低</li>
<li>root 用户可以用 renice 调整到任何等级</li>
</ul>
<h3 id="Running-Like-Clockwork"><a href="#Running-Like-Clockwork" class="headerlink" title="Running Like Clockwork"></a>Running Like Clockwork</h3><p>这章我们将会使用 <code>at</code> 和 <code>corn</code> 命令让我们的脚本定时运行</p>
<blockquote>
<p>Scheduling a job using the at command</p>
</blockquote>
<p><code>at</code> 让你可以定时的在系统中运行脚本，大多数 Linux 系统会在启动时开启一个 atd 的守进程，定时 check 并运行目标路径(/var/spool/at) 下的脚本</p>
<blockquote>
<p>Understanding the at command format</p>
</blockquote>
<p><code>at</code> 的基本格式很简单 <code>at [-f filename] time</code>. at 可以识别多种时间格式</p>
<ul>
<li>A standard hour and minute, such as 10:15</li>
<li>An AM/PM indicator, such as 10:15PM</li>
<li>A specific named time, such as now, noon, midnight or teatime(4PM)</li>
</ul>
<p>同时你可以指定特定格式的日期</p>
<ul>
<li>A standard date format, such as MMDDYY, MM/DD/YY, or DD.MM.YY</li>
<li>A text date, such as Jul 4 or Dec 25, with or withour the year</li>
<li>A time increment:<ul>
<li>Now + 25 minutes</li>
<li>10:15PM tomorrow</li>
<li>10:15 + 7 days</li>
</ul>
</li>
</ul>
<p>当使用 at 命令的时候，对应的 job 提交到 job queue 中。系统中有 26 种 job 可选，队列名字为字母大小写的 a-z</p>
<p><strong>Note</strong> 以前还有一个 batch 命令可以让你在 low useage 状态下运行 script，现在它只是通过调用 at + b queue 完成的定时脚本。队列的字母顺序越靠后，优先级越低。默认 job 优先级为 a</p>
<blockquote>
<p>Retrieving job output</p>
</blockquote>
<p>Linux 系统中，当 job 运行时是没有监测的地方的。系统会将内容记录到邮件中并发送给联系人</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test13.sh </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Test using at command</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This script ran at <span class="subst">$(date +%B%d,%T)</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> sleep 5</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the script&#x27;s end&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">at -f test13.sh now</span><br><span class="line"><span class="comment"># job 1 at Thu Jun  3 12:27:19 2021</span></span><br></pre></td></tr></table></figure>

<p>如果你系统没有配置邮箱，那就收不到邮件了，你可以直接指定输入到文件</p>
<p>PS: 这个实验失败，运行后我并没有看到 out 文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test13b.sh </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Test using at command</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This script ran at <span class="subst">$(date +%B%d,%T)</span>&quot;</span> &gt; test13b.out</span><br><span class="line"><span class="built_in">echo</span> &gt;&gt; test13b.out</span><br><span class="line"><span class="built_in">echo</span> sleep 5</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the script&#x27;s end&quot;</span> &gt;&gt; test13b.out</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查了一下 at 并没有 -M 这个可选参数啊。。</span></span><br><span class="line">at -M -f test13b.sh now </span><br><span class="line"><span class="comment"># job 3 at Thu Jun  3 12:34:11 2021</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Listing pending jobs</p>
</blockquote>
<p>显示所有 pendng 的 job, 我还以为也是用 jobs 呢，忙乎了半天</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">atq</span><br><span class="line"><span class="comment"># 1       Thu Jun  3 12:27:00 2021</span></span><br><span class="line"><span class="comment"># 4       Thu Jun  3 12:35:00 2021</span></span><br><span class="line"><span class="comment"># 5       Thu Jun  3 12:35:00 2021</span></span><br><span class="line"><span class="comment"># 2       Thu Jun  3 12:32:00 2021</span></span><br><span class="line"><span class="comment"># 3       Thu Jun  3 12:34:00 2021</span></span><br><span class="line"><span class="comment"># 6       Thu Jun  3 16:00:00 2021</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Removing jobs</p>
</blockquote>
<p>删除 at queue 中的 job</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">atrm 1</span><br><span class="line">atq</span><br><span class="line"><span class="comment"># 4       Thu Jun  3 12:35:00 2021</span></span><br><span class="line"><span class="comment"># 5       Thu Jun  3 12:35:00 2021</span></span><br><span class="line"><span class="comment"># 2       Thu Jun  3 12:32:00 2021</span></span><br><span class="line"><span class="comment"># 3       Thu Jun  3 12:34:00 2021</span></span><br><span class="line"><span class="comment"># 6       Thu Jun  3 16:00:00 2021</span></span><br></pre></td></tr></table></figure>

<p>Mac 是不是有什么特殊设置啊， 之前启动的 at job 都 block 了</p>
<h4 id="Scheduling-regular-scripts"><a href="#Scheduling-regular-scripts" class="headerlink" title="Scheduling regular scripts"></a>Scheduling regular scripts</h4><p>at 只能配置一次性 job, 如果要配置可重复的 job，可以用 cron. cron 在后台运行，他会检查 cron tables 看哪些 job 需要运行</p>
<h5 id="Looking-at-the-cron-table"><a href="#Looking-at-the-cron-table" class="headerlink" title="Looking at the cron table"></a>Looking at the cron table</h5><p>cron job 的语法：<code>min hour dayofmonth month dayofweek command</code> 示例如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># * 表示 每 的意思</span></span><br><span class="line"><span class="comment"># 下面的定时为 每天 10:15 </span></span><br><span class="line">15 10 * * * <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个周一的 16:15</span></span><br><span class="line">15 16 * * 1 <span class="built_in">command</span></span><br><span class="line"><span class="comment"># dayofweek 也可以是三个字母的表示 mon, tue, wed, thu, fri, sat, sun</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个月的第一天 12:00</span></span><br><span class="line">00 12 1 * * <span class="built_in">command</span></span><br><span class="line"><span class="comment"># dayofmonth 为 1-31</span></span><br></pre></td></tr></table></figure>

<p><strong>Note</strong> 怎么设置每月最后天 run 的 job? 可以通过检查明天是不是第一天解决这个问题，示例：<code>00 12 * * * if [</code>date +%d -d tomorrow<code>= 01 ] ;  then ; command</code> 解释：每天中午检查一下明天是不是下个月的第一天，如果是则执行 command</p>
<p>cron job 必须指出脚本的全路径 <code>15 10 * * * /home/rich/test4.sh &gt; test4out</code></p>
<h5 id="Building-the-cron-table"><a href="#Building-the-cron-table" class="headerlink" title="Building the cron table"></a>Building the cron table</h5><p>显示当前用户的 cron job</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br><span class="line"><span class="comment"># crontab: no crontab for i306454</span></span><br></pre></td></tr></table></figure>

<h5 id="View-cron-directories"><a href="#View-cron-directories" class="headerlink" title="View cron directories"></a>View cron directories</h5><p>mac 下没有这些配置，先跳过</p>
<h3 id="Starting-scripts-with-a-new-shell"><a href="#Starting-scripts-with-a-new-shell" class="headerlink" title="Starting scripts with a new shell"></a>Starting scripts with a new shell</h3><p>书中说的是 set shell features, 所以下面这一段讲的是配置问题</p>
<p>启动 shell 时配置文件加载顺序如下，当前面的被发现时，后面的就会被忽略</p>
<ul>
<li>$HOME/.bash_profile</li>
<li>$HOME/.bash_login</li>
<li>$HOME/.profile</li>
</ul>
<p>这里用的是 runs the <code>.bashrc</code> 所以感觉 rc 文件更像是添加什么新功能的感觉(主管臆测，就我本人，感觉什么东西都塞到 rc 中了，也能 work)</p>
<p>每次 bash shell 启动时都会运行 <code>.bashrc</code> 中的内容</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux命令行与shell脚本编程大全 3rd</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令行与shell脚本编程大全 第三章 Shell 高级用法</title>
    <url>/hexo/2021/06/05/LSCASSB-partiii-advanced-shell-scripting/</url>
    <content><![CDATA[<h2 id="Creating-Functions"><a href="#Creating-Functions" class="headerlink" title="Creating Functions"></a>Creating Functions</h2><h3 id="Basic-Script-Functions"><a href="#Basic-Script-Functions" class="headerlink" title="Basic Script Functions"></a>Basic Script Functions</h3><h4 id="Creating-a-function"><a href="#Creating-a-function" class="headerlink" title="Creating a function"></a>Creating a function</h4><p>方式一：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> name &#123;</span><br><span class="line">    commands</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方式二：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">name</span></span>() &#123;</span><br><span class="line">    commands</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Using-functions"><a href="#Using-functions" class="headerlink" title="Using functions"></a>Using functions</h4><p>function 不一定要写在开头，但是你使用之前，他的定义必须已经声明了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test1</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># using a function in a script</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> func1 &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;This is an example of a function&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 4 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    func1</span><br><span class="line">    count=$[ <span class="variable">$count</span> + 1 ]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the end of the loop&quot;</span></span><br><span class="line">func1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Now this is the end of the script&quot;</span></span><br><span class="line"></span><br><span class="line">./test1</span><br><span class="line"><span class="comment"># This is an example of a function</span></span><br><span class="line"><span class="comment"># This is an example of a function</span></span><br><span class="line"><span class="comment"># This is an example of a function</span></span><br><span class="line"><span class="comment"># This is an example of a function</span></span><br><span class="line"><span class="comment"># This is the end of the loop</span></span><br><span class="line"><span class="comment"># This is an example of a function</span></span><br><span class="line"><span class="comment"># Now this is the end of the script</span></span><br></pre></td></tr></table></figure>

<h3 id="Returning-a-Value"><a href="#Returning-a-Value" class="headerlink" title="Returning a Value"></a>Returning a Value</h3><p>bash shell 会在函数结束后给他一个返回值</p>
<h4 id="The-default-exit-status"><a href="#The-default-exit-status" class="headerlink" title="The default exit status"></a>The default exit status</h4><p>默认情况下，exit status 是函数中最后一个命令的返回值，可以使用 <code>$?</code> 查看</p>
<p>下面实验中，我们在 func1 中 ls 一个不存在的文件，并打印 exit code</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test4</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># testing the exit status of a function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> func1 &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Trying to display a non-existent file&quot;</span></span><br><span class="line">    ls -l badfile</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;testing the function&quot;</span></span><br><span class="line">func1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The exit status is: $?&quot;</span></span><br><span class="line"></span><br><span class="line">./test4 </span><br><span class="line"><span class="comment"># testing the function</span></span><br><span class="line"><span class="comment"># Trying to display a non-existent file</span></span><br><span class="line"><span class="comment"># ls: badfile: No such file or directory</span></span><br><span class="line"><span class="comment"># The exit status is: 1</span></span><br><span class="line"></span><br><span class="line">cat test4b</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># testing the exit status of a function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> func1 &#123;</span><br><span class="line">    ls -l badfile</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Trying to display a non-existent file&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;testing the function&quot;</span></span><br><span class="line">func1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The exit status is: $?&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">./test4b</span><br><span class="line"><span class="comment"># testing the function</span></span><br><span class="line"><span class="comment"># ls: badfile: No such file or directory</span></span><br><span class="line"><span class="comment"># Trying to display a non-existent file</span></span><br><span class="line"><span class="comment"># The exit status is: 0</span></span><br></pre></td></tr></table></figure>

<h4 id="Using-the-return-command"><a href="#Using-the-return-command" class="headerlink" title="Using the return command"></a>Using the return command</h4><p>你也可以用 return 关键子在函数末尾给他返回一个整数最 exit code</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test5</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># using the return command in a function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> db1 &#123;</span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;Enter a value: &quot;</span> value</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;doubling the value&quot;</span></span><br><span class="line">    <span class="built_in">return</span> $[ <span class="variable">$value</span> * 2 ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The new value is $?&quot;</span></span><br><span class="line"></span><br><span class="line">./test5</span><br><span class="line"><span class="comment"># Enter a value: 10</span></span><br><span class="line"><span class="comment"># doubling the value</span></span><br><span class="line"><span class="comment"># The new value is 20</span></span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ul>
<li>记得在 function 执行完成后立刻取值备用</li>
<li>exit code 返回只能在 0-255 之间</li>
</ul>
<h4 id="Using-function-output"><a href="#Using-function-output" class="headerlink" title="Using function output"></a>Using function output</h4><p>你也可以将返回值包装在输出里面，通过 <code>result=$(db1)</code> 的形式拿到。和之前调用系统函数一个套路</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test5b</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># using the return command in a function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> db1 &#123;</span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;Enter a value: &quot;</span> value</span><br><span class="line">    <span class="built_in">echo</span> $[ <span class="variable">$value</span> * 2 ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result=$(db1)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The new value is <span class="variable">$result</span>&quot;</span></span><br><span class="line"></span><br><span class="line">./test5b</span><br><span class="line"><span class="comment"># Enter a value: 20</span></span><br><span class="line"><span class="comment"># The new value is 40</span></span><br></pre></td></tr></table></figure>

<p><strong>Caution</strong> 如果函数中有多个 echo 他会将所有的 echo 内容合在一起作为 return 的值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat freturn.sh</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># multiple echo sentence in function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> multiecho &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;return 1&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;return 2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">./freturn.sh</span><br><span class="line"><span class="comment"># return 1</span></span><br><span class="line"><span class="comment"># return 2</span></span><br></pre></td></tr></table></figure>

<p><strong>Question</strong> 如果我把 echo 和 return 结合使用，他会拿什么当返回值？？？</p>
<p>结论：return 会被忽略</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat ./returnwithecho.sh</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># multiple echo sentence and return in function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> multiecho &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;return 1&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;return 2&quot;</span></span><br><span class="line">  <span class="built_in">return</span> 55</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">./freturn.sh</span><br><span class="line"><span class="comment"># return 1</span></span><br><span class="line"><span class="comment"># return 2</span></span><br></pre></td></tr></table></figure>

<h3 id="Using-Variables-in-Functions"><a href="#Using-Variables-in-Functions" class="headerlink" title="Using Variables in Functions"></a>Using Variables in Functions</h3><h4 id="Passing-parameters-to-a-function"><a href="#Passing-parameters-to-a-function" class="headerlink" title="Passing parameters to a function"></a>Passing parameters to a function</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test6</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># passing parameters to a function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> addem &#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$#</span> -eq 0 ] || [ <span class="variable">$#</span> -gt 2 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -1</span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">$#</span> -eq 1 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> $[ <span class="variable">$1</span> + <span class="variable">$1</span> ]</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> $[ <span class="variable">$1</span> + <span class="variable">$2</span> ]</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;Adding 10 and 15: &quot;</span></span><br><span class="line">value=$(addem 10 15)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$value</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;Let&#x27;s try adding just one number: &quot;</span></span><br><span class="line">value=$(addem 10)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$value</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;Now trying adding no numbers: &quot;</span></span><br><span class="line">value=$(addem)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$value</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;Finally, try adding three numbers: &quot;</span></span><br><span class="line">value=$(addem 10 15 20)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$value</span></span><br><span class="line"></span><br><span class="line">./test6</span><br><span class="line"><span class="comment"># Adding 10 and 15: 25</span></span><br><span class="line"><span class="comment"># Let&#x27;s try adding just one number: 20</span></span><br><span class="line"><span class="comment"># Now trying adding no numbers: -1</span></span><br><span class="line"><span class="comment"># Finally, try adding three numbers: -1</span></span><br></pre></td></tr></table></figure>

<p>但是脚本文件中的参数并不会默认的应用到你定义的 function 中去，你需要显示的指定才能使他生效</p>
<p>下面实验中，当我们运行脚本是没有给参数，则直接运行了 else 的路径，如果给了参数，这个参数也不会传递给 badfunc1</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat badtest1</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Trying to access script parameters inside a function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> badfunc1 &#123;</span><br><span class="line">    <span class="built_in">echo</span> $[ <span class="variable">$1</span> * <span class="variable">$2</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    value=$(badfunc1)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The result is <span class="variable">$value</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage: badtest1 a b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">./badtest1</span><br><span class="line"><span class="comment"># Usage: badtest1 a b</span></span><br><span class="line">./badtest1 10 15</span><br><span class="line"><span class="comment"># ./badtest1: line 5: *  : syntax error: operand expected (error token is &quot;*  &quot;)</span></span><br><span class="line"><span class="comment"># The result is</span></span><br></pre></td></tr></table></figure>

<p>如果要修复上面的脚本，你可以直接在实现中指定 <code>value=$(badfunc1 $1 $2)</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test7</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Trying to access script parameters inside a function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> func7 &#123;</span><br><span class="line">    <span class="built_in">echo</span> $[ <span class="variable">$1</span> * <span class="variable">$2</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    value=$(func7 <span class="variable">$1</span> <span class="variable">$2</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The result is <span class="variable">$value</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage: badtest1 a b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">./test7</span><br><span class="line"><span class="comment"># Usage: badtest1 a b</span></span><br><span class="line">./test7 10 15</span><br><span class="line"><span class="comment"># The result is 150</span></span><br></pre></td></tr></table></figure>

<h4 id="Handling-variables-in-a-function"><a href="#Handling-variables-in-a-function" class="headerlink" title="Handling variables in a function"></a>Handling variables in a function</h4><p>Functions 使用两种类型的变量</p>
<ul>
<li>Global</li>
<li>Local</li>
</ul>
<p>Global 变量是在 script 中任何地方都可以访问的变量。在主程序中定义的 global 变量，function 中可以访问到。function 中定义的 global 变量，主程序也能访问到。一般来说你在脚本中定义的变量都是 global 的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test8</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Using a global variable to pass a value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> db1 &#123;</span><br><span class="line">    value=$[ <span class="variable">$value</span> * 2 ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Enter a value: &quot;</span> value</span><br><span class="line">db1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The new value is: <span class="variable">$value</span>&quot;</span></span><br><span class="line"></span><br><span class="line">./test8</span><br><span class="line"><span class="comment"># Enter a value: 10</span></span><br><span class="line"><span class="comment"># The new value is: 20</span></span><br></pre></td></tr></table></figure>

<p>如果你在 script 和 function 中都用到了同名的变量，就可能导致赋值出问题，是你的程序难以排错</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat badtest2</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Demonstrating a db use of variables</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> func1 &#123;</span><br><span class="line">    temp=$[ <span class="variable">$value</span> + 5 ]</span><br><span class="line">    result=$[ <span class="variable">$temp</span> * 2 ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">temp=4</span><br><span class="line">value=6</span><br><span class="line"></span><br><span class="line">func1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The result is <span class="variable">$result</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$temp</span> -gt <span class="variable">$value</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;temp is larger&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;temp is smaller&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">./badtest2</span><br><span class="line"><span class="comment"># The result is 22</span></span><br><span class="line"><span class="comment"># temp is larger</span></span><br></pre></td></tr></table></figure>

<p>我们可以使用 local variables 避免这种问题，格式如下 <code>local temp</code>. 他让你的变量只在 function 中生效</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test9</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Demonstrating the local keyword</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> func1 &#123;</span><br><span class="line">    <span class="built_in">local</span> temp=$[ <span class="variable">$value</span> + 5 ]</span><br><span class="line">    result=$[ <span class="variable">$temp</span> * 2 ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">temp=4</span><br><span class="line">value=6</span><br><span class="line"></span><br><span class="line">func1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The result is <span class="variable">$result</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$temp</span> -gt <span class="variable">$value</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;temp is larger&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;temp is smaller&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">./test9</span><br><span class="line"><span class="comment"># The result is 22</span></span><br><span class="line"><span class="comment"># temp is smaller</span></span><br></pre></td></tr></table></figure>

<h3 id="Array-Variables-and-Functions"><a href="#Array-Variables-and-Functions" class="headerlink" title="Array Variables and Functions"></a>Array Variables and Functions</h3><h4 id="Passing-arrays-to-functions"><a href="#Passing-arrays-to-functions" class="headerlink" title="Passing arrays to functions"></a>Passing arrays to functions</h4><p>函数处理数组的方式有点特别，如果你传给函数一个数组，他默认只会取第一个元素作为参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat badtest3</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Trying to pass an array variable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> testit &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The parameters are: <span class="variable">$@</span>&quot;</span></span><br><span class="line">    thisarray=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The received array is <span class="variable">$&#123;thisarray[*]&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myarray=(1 2 3 4 5)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The original array is: <span class="variable">$&#123;myarray[*]&#125;</span>&quot;</span></span><br><span class="line">testit  <span class="variable">$myarray</span></span><br><span class="line"></span><br><span class="line">./badtest3</span><br><span class="line"><span class="comment"># The original array is: 1 2 3 4 5</span></span><br><span class="line"><span class="comment"># The parameters are: 1</span></span><br><span class="line"><span class="comment"># The received array is 1</span></span><br></pre></td></tr></table></figure>

<p>你可以将数组 disassemble 之后传给函数，在使用时在 reassemble 即可. 书上给的例子不能运行，网上找了一个可用的表达式</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test10</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># array variable to function test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> testit &#123;</span><br><span class="line">    <span class="built_in">local</span> newarray</span><br><span class="line">    <span class="comment"># 原始表达式为 newarray=(;&#x27;echo &quot;$@&quot;&#x27;)</span></span><br><span class="line">    newarray=($(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>))</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The new array value is <span class="variable">$&#123;newarray[*]&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myarray=(1 2 3 4 5)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The original array is: <span class="variable">$&#123;myarray[*]&#125;</span>&quot;</span></span><br><span class="line">testit  <span class="variable">$&#123;myarray[*]&#125;</span></span><br><span class="line"></span><br><span class="line">./test10</span><br><span class="line"><span class="comment"># The original array is: 1 2 3 4 5</span></span><br><span class="line"><span class="comment"># The new array value is 1 2 3 4 5</span></span><br></pre></td></tr></table></figure>

<h4 id="Return-arrays-from-functions"><a href="#Return-arrays-from-functions" class="headerlink" title="Return arrays from functions"></a>Return arrays from functions</h4><p>函数返回一个数组用了同样的技巧，函数中一个一个的 echo 值，接收方需要 reassemble 它们</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test12</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># returning an array value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> arraydblr &#123;</span><br><span class="line">    <span class="built_in">local</span> origarray</span><br><span class="line">    <span class="built_in">local</span> newarray</span><br><span class="line">    <span class="built_in">local</span> elements</span><br><span class="line">    <span class="built_in">local</span> i</span><br><span class="line">    origarray=($(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>))</span><br><span class="line">    newarray=($(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>))</span><br><span class="line">    elements=$[ <span class="variable">$#</span> - 1 ]</span><br><span class="line">    <span class="keyword">for</span> (( i=0; i&lt;= <span class="variable">$elements</span>; i++ ))</span><br><span class="line">    &#123;</span><br><span class="line">        newarray[<span class="variable">$i</span>]=$[ <span class="variable">$&#123;origarray[$i]&#125;</span> * 2 ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;newarray[*]&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myarray=(1 2 3 4 5)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The original array is: <span class="variable">$&#123;myarray[*]&#125;</span>&quot;</span></span><br><span class="line">arg1=$(<span class="built_in">echo</span> <span class="variable">$&#123;myarray[*]&#125;</span>)</span><br><span class="line">result=($(arraydblr <span class="variable">$arg1</span>))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The new array is: <span class="variable">$&#123;result[*]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">./test12</span><br><span class="line"><span class="comment"># The original array is: 1 2 3 4 5</span></span><br><span class="line"><span class="comment"># The new array is: 2 4 6 8 10</span></span><br></pre></td></tr></table></figure>

<h3 id="Function-Recursion"><a href="#Function-Recursion" class="headerlink" title="Function Recursion"></a>Function Recursion</h3><p>local function variable 提供 self-containment 功能。他使得函数可以实现 recursively 的效果</p>
<p>实现斐波那契数列</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test13</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># using recursion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> factorial &#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$1</span> -eq 1 ]</span><br><span class="line">    <span class="keyword">then</span> </span><br><span class="line">        <span class="built_in">echo</span> 1</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">local</span> temp=$[ <span class="variable">$1</span> - 1 ]</span><br><span class="line">        <span class="built_in">local</span> result=$(factorial <span class="variable">$temp</span>)</span><br><span class="line">        <span class="built_in">echo</span> $[ <span class="variable">$result</span> * <span class="variable">$1</span> ]</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Enter value: &quot;</span> value</span><br><span class="line">result=$(factorial <span class="variable">$value</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The factorial of <span class="variable">$value</span> is: <span class="variable">$result</span>&quot;</span></span><br><span class="line"></span><br><span class="line">./test13</span><br><span class="line"><span class="comment"># Enter value: 5</span></span><br><span class="line"><span class="comment"># The factorial of 5 is: 120</span></span><br></pre></td></tr></table></figure>

<h3 id="Creating-a-Library"><a href="#Creating-a-Library" class="headerlink" title="Creating a Library"></a>Creating a Library</h3><p>建立自己的函数库，实现脚本文件中的可复用。简单来说，就是将所有的函数都写在文件中。在其他脚本文件中，通过 <code>. path/to/myfuncs</code> 的语法引入自己的库文件即可。这个点号是 <code>source</code> 的快捷方式叫做 dot operator.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat myfuncs </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># my script functions</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> addem &#123;</span><br><span class="line">    <span class="built_in">echo</span> $[ <span class="variable">$1</span> + <span class="variable">$2</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> multem &#123;</span><br><span class="line">    <span class="built_in">echo</span> $[ <span class="variable">$1</span> * <span class="variable">$2</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> divem &#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$2</span> -ne 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> $[ <span class="variable">$1</span> / <span class="variable">$2</span> ]</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> -1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cat test14</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># using functions defined in a library file</span></span><br><span class="line">. ./myfuncs</span><br><span class="line"></span><br><span class="line">value1=10</span><br><span class="line">value2=5</span><br><span class="line">result1=$(addem <span class="variable">$value1</span> <span class="variable">$value2</span>)</span><br><span class="line">result2=$(multem <span class="variable">$value1</span> <span class="variable">$value2</span>)</span><br><span class="line">result3=$(divem <span class="variable">$value1</span> <span class="variable">$value2</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The result of adding them is: <span class="variable">$result1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The result of multiplying them is: <span class="variable">$result2</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The result of dividing them is: <span class="variable">$result3</span>&quot;</span></span><br><span class="line"></span><br><span class="line">./test14</span><br><span class="line"><span class="comment"># The result of adding them is: 15</span></span><br><span class="line"><span class="comment"># The result of multiplying them is: 50</span></span><br><span class="line"><span class="comment"># The result of dividing them is: 2</span></span><br></pre></td></tr></table></figure>

<h3 id="Using-Functions-on-the-Command-Line"><a href="#Using-Functions-on-the-Command-Line" class="headerlink" title="Using Functions on the Command Line"></a>Using Functions on the Command Line</h3><h4 id="Creating-functions-on-the-command-line"><a href="#Creating-functions-on-the-command-line" class="headerlink" title="Creating functions on the command line"></a>Creating functions on the command line</h4><p>方式一：终端一行定义</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> doubleit &#123; <span class="built_in">read</span> -p <span class="string">&quot;Enter value:&quot;</span> value; <span class="built_in">echo</span> $[ <span class="variable">$value</span> * 2 ]; &#125;</span><br><span class="line">doubleit</span><br><span class="line"><span class="comment"># Enter value:3</span></span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<p>方式二：多行定义，in this way, no need of semicolon</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> multem &#123;</span><br><span class="line">&gt; <span class="built_in">echo</span> $[ <span class="variable">$1</span> * <span class="variable">$2</span> ]</span><br><span class="line">&gt; &#125;</span><br><span class="line">multem 2 5</span><br><span class="line"><span class="comment"># 10</span></span><br></pre></td></tr></table></figure>

<p><strong>Caution</strong> 如果你终端定义函数的时候和系统自带的函数重名了，那么这个函数会覆盖系统函数。</p>
<h4 id="Defining-functions-in-the-bashrc-file"><a href="#Defining-functions-in-the-bashrc-file" class="headerlink" title="Defining functions in the .bashrc file"></a>Defining functions in the .bashrc file</h4><p>上面的这个方式，当终端退出时，函数就丢失了，你可以将函数写入 .bashrc 文件或使用 source 函数库的方式达到复用的效果。而且最方便的事，如果你将他们通过 bashrc 引入，你在写脚本的时候就不需要 source 了，直接可以调用</p>
<h3 id="Following-a-Practical-Example"><a href="#Following-a-Practical-Example" class="headerlink" title="Following a Practical Example"></a>Following a Practical Example</h3><p>这章展示如何使用开源 shell 工具包</p>
<ol>
<li><code>wget ftp://ftp.gnu.org/gnu/shtool/shtool-2.0.8.tar.gz</code> 下载实验包并 <code>tar -zxvf shtool-2.0.8.tar.gz</code> 解压</li>
<li>cd 到解压后的文件夹，<code>./configure</code> + <code>make</code>, 当然你也可以用 <code>make test</code> 测试一下构建</li>
<li><code>make install</code> 安装库文件</li>
</ol>
<p>shtool 包含了一系列的工具集，可以使用 <code>shtool [options] [fucntion [options] [args]]</code> 来查看</p>
<p>The shtool Library Functions</p>
<table>
<thead>
<tr>
<th align="left">Function</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">platform</td>
<td align="left">Displays the platform identity</td>
</tr>
<tr>
<td align="left">Prop</td>
<td align="left">Dispalys an animated progress propeller</td>
</tr>
</tbody></table>
<p>只列出用到的几个</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test16</span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"></span><br><span class="line">shtool platform</span><br><span class="line"></span><br><span class="line">./test16</span><br><span class="line"><span class="comment"># Mac OS X 11.4 (iX86)</span></span><br></pre></td></tr></table></figure>

<p>带进度条的显示 <code>ls -al /usr/bin | shtool prop -p &quot;waiting...&quot;</code> 太快了，看不出效果</p>
<h2 id="Chapter-18-Writing-Scripts-for-Graphical-Desktops"><a href="#Chapter-18-Writing-Scripts-for-Graphical-Desktops" class="headerlink" title="Chapter 18: Writing Scripts for Graphical Desktops"></a>Chapter 18: Writing Scripts for Graphical Desktops</h2><p>和我这次看书的目标不符，跳过</p>
<h2 id="Chapter-19-Introducing-sed-and-gawk"><a href="#Chapter-19-Introducing-sed-and-gawk" class="headerlink" title="Chapter 19: Introducing sed and gawk"></a>Chapter 19: Introducing sed and gawk</h2><p>实际工作中，很多工作都是文字处理相关的。使用 shell 自带工具处理文字会显得很笨拙。这时候就要用到 sed 和 gawk 了。</p>
<h3 id="Manipulating-Text"><a href="#Manipulating-Text" class="headerlink" title="Manipulating Text"></a>Manipulating Text</h3><p>Mac 自带的 sed 工具和书上的是不一样的，好像做了很多裁剪，很多 flag 是不支持的，可以通过 brew 重新装一个</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install gnu-sed</span><br><span class="line"><span class="comment"># 会给出添加 PATH 的提示，按照提示添加到配置文件中(.zshrc)</span></span><br><span class="line">brew info gnu-sed</span><br><span class="line"><span class="comment"># ==&gt; Caveats</span></span><br><span class="line"><span class="comment"># GNU &quot;sed&quot; has been installed as &quot;gsed&quot;.</span></span><br><span class="line"><span class="comment"># If you need to use it as &quot;sed&quot;, you can add a &quot;gnubin&quot; directory</span></span><br><span class="line"><span class="comment"># to your PATH from your bashrc like:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     PATH=&quot;/usr/local/opt/gnu-sed/libexec/gnubin:$PATH&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="Getting-to-know-the-sed-editor"><a href="#Getting-to-know-the-sed-editor" class="headerlink" title="Getting to know the sed editor"></a>Getting to know the sed editor</h4><p>sed 是一个流处理编辑器(stream editor)，你可以设定一系列的规则，然后通过这个流编辑器处理他。</p>
<p>sed 可以做如下事情</p>
<ol>
<li>Reads one data line at a time from the input</li>
<li>Matches that data with the supplied editor commands</li>
<li>Changes data in the stream as specified in the commands</li>
<li>Outputs the new data to STDOUT</li>
</ol>
<p>按行依次处理文件直到所有内容处理完毕结束，格式 <code>sed options script file</code></p>
<p>The sed Command Options</p>
<table>
<thead>
<tr>
<th align="left">Option</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-e script</td>
<td align="left">Adds commands specified in the script to the commands run while processing the input</td>
</tr>
<tr>
<td align="left">-f file</td>
<td align="left">Adds the commands specified in the file to the commands run while processing the input</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">Doesn’t produce output for each command, but waits for the print command</td>
</tr>
</tbody></table>
<h4 id="Defining-an-editor-command-int-the-command-line"><a href="#Defining-an-editor-command-int-the-command-line" class="headerlink" title="Defining an editor command int the command line"></a>Defining an editor command int the command line</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a test&quot;</span> | sed <span class="string">&#x27;s/test/big test/&#x27;</span></span><br><span class="line"><span class="comment"># This is a big test</span></span><br></pre></td></tr></table></figure>

<p><code>s</code> 表示替换(substitutes), 他会用后一个字符串替换前一个. 下面是替换文件内容的例子. sed 只会在输出内容中做修改，原文件还是保持原样</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data1.txt</span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line">sed <span class="string">&#x27;s/dog/cat/&#x27;</span> data1.txt </span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy cat.</span></span><br></pre></td></tr></table></figure>

<h4 id="Using-mulitple-editor-commands-int-the-command-line"><a href="#Using-mulitple-editor-commands-int-the-command-line" class="headerlink" title="Using mulitple editor commands int the command line"></a>Using mulitple editor commands int the command line</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -e <span class="string">&#x27;s/brown/green/; s/dog/cat/&#x27;</span> data1.txt </span><br><span class="line"><span class="comment"># The quick green fox jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick green fox jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick green fox jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick green fox jumps over the lazy cat.</span></span><br></pre></td></tr></table></figure>

<p>如果不想写在一行，可以写在多行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -e <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt; s/brown/green/</span></span><br><span class="line"><span class="string">&gt; s/fox/elephant/</span></span><br><span class="line"><span class="string">&gt; s/dog/cat/&#x27;</span> data1.txt</span><br><span class="line"><span class="comment"># The quick green elephant jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick green elephant jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick green elephant jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick green elephant jumps over the lazy cat.</span></span><br></pre></td></tr></table></figure>

<h4 id="Reading-editor-commands-from-a-file"><a href="#Reading-editor-commands-from-a-file" class="headerlink" title="Reading editor commands from a file"></a>Reading editor commands from a file</h4><p>如果命令太多，也可以将他们放到文件中</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat script1.sed </span><br><span class="line"><span class="comment"># s/brown/green/</span></span><br><span class="line"><span class="comment"># s/fox/elephant/</span></span><br><span class="line"><span class="comment"># s/dog/cat/</span></span><br><span class="line">sed -f script1.sed data1.txt </span><br><span class="line"><span class="comment"># The quick green elephant jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick green elephant jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick green elephant jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick green elephant jumps over the lazy cat.</span></span><br></pre></td></tr></table></figure>

<p>为了便于区分 shell 文件和 sed 条件，我们将 sed 条件文件存储为 <code>.sed</code> 结尾</p>
<h4 id="Getting-to-know-the-gawk-program"><a href="#Getting-to-know-the-gawk-program" class="headerlink" title="Getting to know the gawk program"></a>Getting to know the gawk program</h4><p>sed 让你动态改变文件内容，但是还是有局限性。gawk 提供一个更程序化的方式来处理文本信息. 这个工具包默认是没有的一般需要自己手动安装。gawk 是 GNU 版本的 awk, 通过它你可以</p>
<ul>
<li>Define variables to store data</li>
<li>Use arithmetic and string operatiors to perate on data</li>
<li>Use structured programming concepts, such as if-then statements and loops, to add logic to your data processing</li>
<li>Generate formatted reports by extracting data elements within the data file and repositioning them in another order or format</li>
</ul>
<p>第四点经常用来批量处理数据使之更具可读性，典型应用就是处理 log 文件。</p>
<h4 id="Visiting-the-gawk-command-format"><a href="#Visiting-the-gawk-command-format" class="headerlink" title="Visiting the gawk command format"></a>Visiting the gawk command format</h4><p>格式 <code>gawk options program file</code></p>
<p>The gawk Options</p>
<table>
<thead>
<tr>
<th align="left">Option</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-F fs</td>
<td align="left">Specifies a file separator for delineating data fields in a line</td>
</tr>
<tr>
<td align="left">-f file</td>
<td align="left">Specifies a file name to read the program from</td>
</tr>
<tr>
<td align="left">-v var=value</td>
<td align="left">Defines a variable and default value used in the gawk program</td>
</tr>
<tr>
<td align="left">-mf N</td>
<td align="left">Specifies the maximum number of fields to process in the data file</td>
</tr>
<tr>
<td align="left">-mr N</td>
<td align="left">Specifies the maximum record size in the data file</td>
</tr>
<tr>
<td align="left">-W keyword</td>
<td align="left">Specifies the compatibility mode or warning level of gawk</td>
</tr>
</tbody></table>
<p>gawk 最大的优势是可以用编程的手段，将数据重新格式化输出</p>
<h4 id="Reading-the-program-script-from-the-command-line"><a href="#Reading-the-program-script-from-the-command-line" class="headerlink" title="Reading the program script from the command line"></a>Reading the program script from the command line</h4><p>格式 <code>gawk &#39;&#123; commands &#125;&#39;</code> 比如 <code>gawk &#39;&#123;print &quot;Hello World!&quot;&#125;&#39;</code> 这个 demo 命令并没有做什么文字处理，只是简单的接收标准输入然后打印 Hello World. 使用 Ctrl + D 结束对话</p>
<p>gawk 最主要的功能是提供操作文本中数据的功能，默认情况下，gawk 会提取如下变量</p>
<ul>
<li>$0 represents the entire line of text</li>
<li>$1 represents the first data field in the line of text</li>
<li>$2 represents the second data field in the line of text</li>
<li>$n represents the nth data field in the line of text</li>
</ul>
<p>gawk 会根据命令中提供的分割符做行的分割，下面是 gawk 读取文件并显示第一行的示例</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data2.txt </span><br><span class="line"><span class="comment"># One line of test text.</span></span><br><span class="line"><span class="comment"># Two lines of test text.</span></span><br><span class="line"><span class="comment"># Three lines of test text.</span></span><br><span class="line"></span><br><span class="line">gawk <span class="string">&#x27;&#123; print $1 &#125;&#x27;</span> data2.txt </span><br><span class="line"><span class="comment"># One</span></span><br><span class="line"><span class="comment"># Two</span></span><br><span class="line"><span class="comment"># Three</span></span><br></pre></td></tr></table></figure>

<p>可以用 <code>-F</code> 指定分割符，比如你要处理 /etc/passwd 这个文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd | tail -3</span><br><span class="line"><span class="comment"># _coreml:*:280:280:CoreML Services:/var/empty:/usr/bin/false</span></span><br><span class="line"><span class="comment"># _trustd:*:282:282:trustd:/var/empty:/usr/bin/false</span></span><br><span class="line"><span class="comment"># _oahd:*:441:441:OAH Daemon:/var/empty:/usr/bin/false</span></span><br><span class="line"></span><br><span class="line">gawk -F: <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> /etc/passwd | tail -3 </span><br><span class="line"><span class="comment"># _coreml</span></span><br><span class="line"><span class="comment"># _trustd</span></span><br><span class="line"><span class="comment"># _oahd</span></span><br></pre></td></tr></table></figure>

<h4 id="Using-multiple-commands-in-the-program-script"><a href="#Using-multiple-commands-in-the-program-script" class="headerlink" title="Using multiple commands in the program script"></a>Using multiple commands in the program script</h4><p>使用分号分割 gawk 中想要运行的多个命令, 下面的命令会替换第四个 field 并打印整行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;My name is Rich&quot;</span> | gawk <span class="string">&#x27;&#123;$4=&quot;Christine&quot;;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># My name is Christine</span></span><br></pre></td></tr></table></figure>

<p>多行表示也是 OK 的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&gt; $4=&quot;Christine&quot;</span></span><br><span class="line"><span class="string">&gt; print $0</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span></span><br><span class="line">my name is Rich</span><br><span class="line">my name is Christine</span><br></pre></td></tr></table></figure>

<h4 id="Reading-the-program-from-a-file"><a href="#Reading-the-program-from-a-file" class="headerlink" title="Reading the program from a file"></a>Reading the program from a file</h4><p>和 sed 一样，gawk 也支持从文件读取命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat script2.gawk </span><br><span class="line"><span class="comment"># &#123;print $1 &quot;&#x27;s hoe directory is &quot; $6&#125;</span></span><br><span class="line">gawk -F: -f script2.gawk /etc/passwd | tail -3</span><br><span class="line"><span class="comment"># _coreml&#x27;s hoe directory is /var/empty</span></span><br><span class="line"><span class="comment"># _trustd&#x27;s hoe directory is /var/empty</span></span><br><span class="line"><span class="comment"># _oahd&#x27;s hoe directory is /var/empty</span></span><br></pre></td></tr></table></figure>

<p>gawk 文件中包含多个命令的示例</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat script3.gawk </span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#     text = &quot;&#x27;s home directory is &quot;</span></span><br><span class="line"><span class="comment">#     print $1 text $6</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line">gawk -F: -f script3.gawk /etc/passwd | tail -3</span><br><span class="line"><span class="comment"># _coreml&#x27;s home directory is /var/empty</span></span><br><span class="line"><span class="comment"># _trustd&#x27;s home directory is /var/empty</span></span><br><span class="line"><span class="comment"># _oahd&#x27;s home directory is /var/empty</span></span><br></pre></td></tr></table></figure>

<h4 id="Running-scripts-before-processing-data"><a href="#Running-scripts-before-processing-data" class="headerlink" title="Running scripts before processing data"></a>Running scripts before processing data</h4><p>gawk 提供了 BEGIN 关键字在处理文本前做一些操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN &#123;print &quot;Hello World!&quot;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># Hello World!</span></span><br></pre></td></tr></table></figure>

<p>BEGIN 处理文本的示例</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data3.txt </span><br><span class="line"><span class="comment"># Line 1</span></span><br><span class="line"><span class="comment"># Line 2</span></span><br><span class="line"><span class="comment"># Line 3</span></span><br><span class="line">gawk <span class="string">&#x27;BEGIN &#123;print &quot;The data3 File Contents: &quot;&#125;</span></span><br><span class="line"><span class="string">&gt; &#123;print $0&#125;&#x27;</span> data3.txt</span><br><span class="line">The data3 File Contents: </span><br><span class="line"><span class="comment"># Line 1</span></span><br><span class="line"><span class="comment"># Line 2</span></span><br><span class="line"><span class="comment"># Line 3</span></span><br></pre></td></tr></table></figure>

<h4 id="Running-scripts-after-processing-data"><a href="#Running-scripts-after-processing-data" class="headerlink" title="Running scripts after processing data"></a>Running scripts after processing data</h4><p>和前面对应的还有一个 after 操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN &#123;print &quot;The data3 File Contents:&quot;&#125;</span></span><br><span class="line"><span class="string">&#123;print $0&#125;</span></span><br><span class="line"><span class="string">&gt; END &#123;print &quot;End of File&quot;&#125;&#x27;</span> data3.txt</span><br><span class="line"><span class="comment"># The data3 File Contents:</span></span><br><span class="line"><span class="comment"># Line 1</span></span><br><span class="line"><span class="comment"># Line 2</span></span><br><span class="line"><span class="comment"># Line 3</span></span><br><span class="line"><span class="comment"># End of File</span></span><br></pre></td></tr></table></figure>

<p>如果过程多了，你还可以将这个步骤写到文件中</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">at script4.gawk </span><br><span class="line">BEGIN &#123;</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;The latest list of users and selles&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot; UserID\t Shell&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;-------\t------&quot;</span></span><br><span class="line">    FS=<span class="string">&quot;:&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">print</span> <span class="variable">$1</span> <span class="string">&quot;    \t &quot;</span> <span class="variable">$7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">END &#123;</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;This concludes the listing&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gawk -f script4.gawk  /etc/passwd</span><br><span class="line"><span class="comment"># The latest list of users and selles</span></span><br><span class="line"><span class="comment">#  UserID  Shell</span></span><br><span class="line"><span class="comment"># ------- ------</span></span><br><span class="line"><span class="comment"># nobody           /usr/bin/false</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># _oahd            /usr/bin/false</span></span><br><span class="line"><span class="comment"># This concludes the listing</span></span><br></pre></td></tr></table></figure>

<h3 id="Commanding-at-the-sed-Editor-Basics"><a href="#Commanding-at-the-sed-Editor-Basics" class="headerlink" title="Commanding at the sed Editor Basics"></a>Commanding at the sed Editor Basics</h3><p>本章简要介绍一下 sed 的常规用法</p>
<h4 id="Introducing-more-substitution-options"><a href="#Introducing-more-substitution-options" class="headerlink" title="Introducing more substitution options"></a>Introducing more substitution options</h4><h5 id="Substituting-flags"><a href="#Substituting-flags" class="headerlink" title="Substituting flags"></a>Substituting flags</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data4.txt </span><br><span class="line"><span class="comment"># This is a test of the test script.</span></span><br><span class="line"><span class="comment"># This is the second test of the test script.</span></span><br><span class="line">sed <span class="string">&#x27;s/test/trial/&#x27;</span> data4.txt </span><br><span class="line"><span class="comment"># This is a trial of the test script.</span></span><br><span class="line"><span class="comment"># This is the second trial of the test script.</span></span><br></pre></td></tr></table></figure>

<p>默认情况下，sed 只会替换每行中第一个出现的位置，如果想要处理多个位置，需要指定 flags。格式为 <code>s/pattern/replacemnet/flags</code></p>
<p>four types of substitution flags are available:</p>
<ul>
<li>A number, indicating the pattern occurrence for which new text should be substituted</li>
<li>g, indicating that new text should be substituted for all occrurences of the existing text</li>
<li>p, indicating that the contents of the original line should be printed</li>
<li>w file, which means to write the results of the substitution to a file</li>
</ul>
<p>替换指定位置的示例，下面示例中只替换了第二个位置的 test</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/test/trial/2&#x27;</span> data4.txt </span><br><span class="line"><span class="comment"># This is a test of the trial script.</span></span><br><span class="line"><span class="comment"># This is the second test of the trial script.</span></span><br></pre></td></tr></table></figure>

<p>全部替换示例</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/test/trial/g&#x27;</span> data4.txt </span><br><span class="line">This is a trial of the trial script.</span><br><span class="line">This is the second trial of the trial script.</span><br></pre></td></tr></table></figure>

<p>打印符合匹配条件的行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data5.txt </span><br><span class="line"><span class="comment"># This is a test line.</span></span><br><span class="line"><span class="comment"># This is a different line.</span></span><br><span class="line"></span><br><span class="line">sed -n <span class="string">&#x27;s/test/trial/p&#x27;</span> data5.txt</span><br><span class="line"><span class="comment"># This is a trial line.</span></span><br></pre></td></tr></table></figure>

<p><code>-w</code> 指定 sed 结果输出到文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/test/trial/w test.txt&#x27;</span> data5.txt </span><br><span class="line"><span class="comment"># This is a trial line.</span></span><br><span class="line"><span class="comment"># This is a different line.</span></span><br><span class="line">cat test.txt </span><br><span class="line"><span class="comment"># This is a trial line.</span></span><br></pre></td></tr></table></figure>

<h5 id="Replacing-characters"><a href="#Replacing-characters" class="headerlink" title="Replacing characters"></a>Replacing characters</h5><p>Linux 系统中路径符号和 sed 中的符号是重的，也就是说，如果我要用 sed 替换路径的时候就必须用一中很累赘的写法, 比如 <code>sed &#39;s/\/bin\/bash/\/bin\/csh/&#39; /etc/passwd</code></p>
<p>PS: Mac OS 语法和这个不一样</p>
<p>为了避免这么恶心的写法，我们可以用惊叹号(exclamation point) 代替原来的分割符 <code>sed &#39;s!/bin/bash!/bin/csh!&#39; /etc/passwd</code></p>
<h4 id="Using-addresses"><a href="#Using-addresses" class="headerlink" title="Using addresses"></a>Using addresses</h4><p>默认情况下 sed 会处理所有的行，如果你只需要处理特殊的几行，你可以使用 line address. line address 有两种模式</p>
<ul>
<li>A numberic range of lines</li>
<li>A text pattern that filters out a line</li>
</ul>
<p>两种模式的格式都是一样的 <code>[address] command</code> 你可以将多个命令组合到一起</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">address &#123;</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    command3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Addressing-the-numberic-line"><a href="#Addressing-the-numberic-line" class="headerlink" title="Addressing the numberic line"></a>Addressing the numberic line</h5><p>sed 会将 s 之前的内容当作行来处理, 下面的例子只替换第二行的内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;2s/dog/cat/&#x27;</span> data1.txt</span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br></pre></td></tr></table></figure>

<p>替换多行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;2,3s/dog/cat/&#x27;</span> data1.txt</span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br></pre></td></tr></table></figure>

<p>从第 n 行还是到结束</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;2,$s/dog/cat/&#x27;</span> data1.txt</span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy cat.</span></span><br></pre></td></tr></table></figure>

<h5 id="Using-text-pattern-filters"><a href="#Using-text-pattern-filters" class="headerlink" title="Using text pattern filters"></a>Using text pattern filters</h5><p>使用 pattern 处理特定的行，格式 <code>/pattern/command</code>, 你需要在 pattern 前面指定一个斜杠作为开始</p>
<p>下面的示例中我们只将 root 的 sh 改为 csh</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grep root /etc/passwd</span><br><span class="line"><span class="comment"># root:*:0:0:System Administrator:/var/root:/bin/sh</span></span><br><span class="line"><span class="comment"># daemon:*:1:1:System Services:/var/root:/usr/bin/false</span></span><br><span class="line"><span class="comment"># _cvmsroot:*:212:212:CVMS Root:/var/empty:/usr/bin/false</span></span><br><span class="line">sed <span class="string">&#x27;/root/s/sh/csh/&#x27;</span> /etc/passwd | grep root</span><br><span class="line"><span class="comment"># root:*:0:0:System Administrator:/var/root:/bin/csh</span></span><br><span class="line"><span class="comment"># daemon:*:1:1:System Services:/var/root:/usr/bin/false</span></span><br><span class="line"><span class="comment"># _cvmsroot:*:212:212:CVMS Root:/var/empty:/usr/bin/false</span></span><br></pre></td></tr></table></figure>

<p>sed 是通过正则表达式来做内容匹配的。</p>
<h5 id="Grouping-commands"><a href="#Grouping-commands" class="headerlink" title="Grouping commands"></a>Grouping commands</h5><p>和 gawk 一样，sed 也可以在一个命令中处理多个匹配</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;2&#123;</span></span><br><span class="line"><span class="string">s/fox/elephant/</span></span><br><span class="line"><span class="string">s/dog/cat/</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> data1.txt</span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># The quick brown elephant jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;3,$&#123;</span></span><br><span class="line"><span class="string">s/fox/elephant/</span></span><br><span class="line"><span class="string">s/dog/cat/</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> data1.txt</span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># The quick brown elephant jumps over the lazy cat.</span></span><br><span class="line"><span class="comment"># The quick brown elephant jumps over the lazy cat.</span></span><br></pre></td></tr></table></figure>

<h5 id="Deleting-lines"><a href="#Deleting-lines" class="headerlink" title="Deleting lines"></a>Deleting lines</h5><p><code>d</code> 用来在输出内容中删除某一行, 如果没有指定删选内容，所有输出都会被删除</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data6.txt </span><br><span class="line"><span class="comment"># This is line number 1.</span></span><br><span class="line"><span class="comment"># This is line number 2.</span></span><br><span class="line"><span class="comment"># This is line number 3.</span></span><br><span class="line"><span class="comment"># This is line number 4.</span></span><br><span class="line">sed <span class="string">&#x27;d&#x27;</span> data6.txt </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>指定删除的行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;3d&#x27;</span> data6.txt </span><br><span class="line"><span class="comment"># This is line number 1.</span></span><br><span class="line"><span class="comment"># This is line number 2.</span></span><br><span class="line"><span class="comment"># This is line number 4.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;2,3d&#x27;</span> data6.txt </span><br><span class="line"><span class="comment"># This is line number 1.</span></span><br><span class="line"><span class="comment"># This is line number 4.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;3,$d&#x27;</span> data6.txt </span><br><span class="line"><span class="comment"># This is line number 1.</span></span><br><span class="line"><span class="comment"># This is line number 2.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;/number 1/d&#x27;</span> data6.txt </span><br><span class="line"><span class="comment"># This is line number 2.</span></span><br><span class="line"><span class="comment"># This is line number 3.</span></span><br><span class="line"><span class="comment"># This is line number 4.</span></span><br></pre></td></tr></table></figure>

<p>PS: 这个删除只作用的输出，原文件保持不变</p>
<p>还有一种比较奇葩的删除方式，给两个匹配，删除会从第一个还是，第二个结束，删除内容包括当前行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;/1/,/3/d&#x27;</span> data6.txt </span><br><span class="line"><span class="comment"># This is line number 4.</span></span><br></pre></td></tr></table></figure>

<p>这里有一个坑，这种方式是匹配删除，当第一匹配时，删除开始，第二个匹配找到时，删除结束。如果文件中有多个地方能匹配到开始，则可能出现意想不到的情况. 比如在 data7 中，第 5 行也能匹配到 1 这个关键字，但是后面就没有 4 了，则会导致后面的内容都删掉. 如果我指定一个不存在的停止符，则所有内容都不显示了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data7.txt </span><br><span class="line"><span class="comment"># This is line number 1.</span></span><br><span class="line"><span class="comment"># This is line number 2.</span></span><br><span class="line"><span class="comment"># This is line number 3.</span></span><br><span class="line"><span class="comment"># This is line number 4.</span></span><br><span class="line"><span class="comment"># This is line number 1 again.</span></span><br><span class="line"><span class="comment"># This is text you want to keep.</span></span><br><span class="line"><span class="comment"># This is the last line in the file.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;/1/,/3/d&#x27;</span> data7.txt </span><br><span class="line"><span class="comment"># This is line number 4.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;/1/,/5/d&#x27;</span> data7.txt</span><br></pre></td></tr></table></figure>

<h5 id="Inserting-and-appending-text"><a href="#Inserting-and-appending-text" class="headerlink" title="Inserting and appending text"></a>Inserting and appending text</h5><p>sed 也允许你插入，续写内容，但是有一些特别的点</p>
<ul>
<li>The insert command(i) adds a new line before the specified line</li>
<li>The append commadn(a) adds a new line after the specified line</li>
</ul>
<p>特别的点在于，你需要新起一行写这些新加的行, 格式为</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;[address]command\</span></span><br><span class="line"><span class="string">new line&#x27;</span></span><br></pre></td></tr></table></figure>

<p>示例如下, 不过 mac 上貌似有语法错误</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Test Line 2&quot;</span> | sed <span class="string">&#x27;i\Test line 1&#x27;</span></span><br><span class="line"><span class="comment"># Test line 1</span></span><br><span class="line"><span class="comment"># Test Line 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Test Line 2&quot;</span> | sed <span class="string">&#x27;a\Test line 1&#x27;</span></span><br><span class="line"><span class="comment"># Test Line 2</span></span><br><span class="line"><span class="comment"># Test line 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Test Line 2&quot;</span> | sed <span class="string">&#x27;i\</span></span><br><span class="line"><span class="string">&gt; Test Line 1&#x27;</span></span><br><span class="line"><span class="comment"># Test Line 1</span></span><br><span class="line"><span class="comment"># Test Line 2</span></span><br></pre></td></tr></table></figure>

<p>上面演示的是在全部内容之前/后添加新的行，那么怎么在特定行前后做类似的操作呢，你可以用行号指定。但是不能用 range 形式的，因为定义上，i/a 是单行操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;3i\</span></span><br><span class="line"><span class="string">This is an inserted line.&#x27;</span> data6.txt</span><br><span class="line"><span class="comment"># This is line number1.</span></span><br><span class="line"><span class="comment"># This is line number2.</span></span><br><span class="line"><span class="comment"># This is an inserted line.</span></span><br><span class="line"><span class="comment"># This is line number3.</span></span><br><span class="line"><span class="comment"># This is line number4.</span></span><br><span class="line">sed <span class="string">&#x27;3a\This is an appended line.&#x27;</span> data6.txt</span><br><span class="line"><span class="comment"># This is line number1.</span></span><br><span class="line"><span class="comment"># This is line number2.</span></span><br><span class="line"><span class="comment"># This is line number3.</span></span><br><span class="line"><span class="comment"># This is an appended line.</span></span><br><span class="line"><span class="comment"># This is line number4.</span></span><br></pre></td></tr></table></figure>

<p>插入文本末尾</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;$a\</span></span><br><span class="line"><span class="string">&gt; This is a new line of text.&#x27;</span> data6.txt</span><br><span class="line"><span class="comment"># This is line number1.</span></span><br><span class="line"><span class="comment"># This is line number2.</span></span><br><span class="line"><span class="comment"># This is line number3.</span></span><br><span class="line"><span class="comment"># This is line number4.</span></span><br><span class="line"><span class="comment"># This is a new line of text.</span></span><br></pre></td></tr></table></figure>

<p>头部插入多行, 需要使用斜杠分割</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;1i\</span></span><br><span class="line"><span class="string">&gt; This is one line of new text.\</span></span><br><span class="line"><span class="string">&gt; This is another line of new text.&#x27;</span> data6.txt</span><br><span class="line"><span class="comment"># This is one line of new text.</span></span><br><span class="line"><span class="comment"># This is another line of new text.</span></span><br><span class="line"><span class="comment"># This is line number1.</span></span><br><span class="line"><span class="comment"># This is line number2.</span></span><br><span class="line"><span class="comment"># This is line number3.</span></span><br><span class="line"><span class="comment"># This is line number4.</span></span><br></pre></td></tr></table></figure>

<p>如果不指定行号，他会每一行都 insert 啊，和之前的理解不一样. append 也是一样的效果</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;i\head insert&#x27;</span> data6.txt</span><br><span class="line"><span class="comment"># head insert</span></span><br><span class="line"><span class="comment"># This is line number1.</span></span><br><span class="line"><span class="comment"># head insert</span></span><br><span class="line"><span class="comment"># This is line number2.</span></span><br><span class="line"><span class="comment"># head insert</span></span><br><span class="line"><span class="comment"># This is line number3.</span></span><br><span class="line"><span class="comment"># head insert</span></span><br><span class="line"><span class="comment"># This is line number4</span></span><br></pre></td></tr></table></figure>

<p>也能指定 range… 前面的理解果断有问题</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;1,2a\end append&#x27;</span> data6.txt</span><br><span class="line"><span class="comment"># This is line number1.</span></span><br><span class="line"><span class="comment"># end append</span></span><br><span class="line"><span class="comment"># This is line number2.</span></span><br><span class="line"><span class="comment"># end append</span></span><br><span class="line"><span class="comment"># This is line number3.</span></span><br><span class="line"><span class="comment"># This is line number4.</span></span><br></pre></td></tr></table></figure>

<h5 id="Changing-lines"><a href="#Changing-lines" class="headerlink" title="Changing lines"></a>Changing lines</h5><p>改变行内容，用法和前面的 i/a 没什么区别</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;3c\This is a chagned line of text.&#x27;</span> data6.txt</span><br><span class="line"><span class="comment"># This is line number1.</span></span><br><span class="line"><span class="comment"># This is line number2.</span></span><br><span class="line"><span class="comment"># This is a chagned line of text.</span></span><br><span class="line"><span class="comment"># This is line number4.</span></span><br></pre></td></tr></table></figure>

<p>pattern 方式替换</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;/number3/c\</span></span><br><span class="line"><span class="string">This is a changed line of text.&#x27;</span> data6.txt</span><br><span class="line"><span class="comment"># This is line number1.</span></span><br><span class="line"><span class="comment"># This is line number2.</span></span><br><span class="line"><span class="comment"># This is a changed line of text.</span></span><br><span class="line"><span class="comment"># This is line number4.</span></span><br></pre></td></tr></table></figure>

<p>pattern 替换多行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data8.txt</span><br><span class="line"><span class="comment"># This is line number1.</span></span><br><span class="line"><span class="comment"># This is line number2.</span></span><br><span class="line"><span class="comment"># This is line number3.</span></span><br><span class="line"><span class="comment"># This is line number4.</span></span><br><span class="line"><span class="comment"># This is line number1 again.</span></span><br><span class="line"><span class="comment"># This is yet another line.</span></span><br><span class="line"><span class="comment"># This is the last line in the line.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;/number1/c\This is a changed line of text.&#x27;</span> data8.txt</span><br><span class="line"><span class="comment"># This is a changed line of text.</span></span><br><span class="line"><span class="comment"># This is line number2.</span></span><br><span class="line"><span class="comment"># This is line number3.</span></span><br><span class="line"><span class="comment"># This is line number4.</span></span><br><span class="line"><span class="comment"># This is a changed line of text.</span></span><br><span class="line"><span class="comment"># This is yet another line.</span></span><br><span class="line"><span class="comment"># This is the last line in the line.</span></span><br></pre></td></tr></table></figure>

<p>指定行号替换的行为方式有点奇怪，他会将你指定的行中内容全部替换掉</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data6.txt</span><br><span class="line"><span class="comment"># This is line number1.</span></span><br><span class="line"><span class="comment"># This is line number2.</span></span><br><span class="line"><span class="comment"># This is line number3.</span></span><br><span class="line"><span class="comment"># This is line number4.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;2,3c\This is a new line of text.&#x27;</span> data6.txt</span><br><span class="line"><span class="comment"># This is line number1.</span></span><br><span class="line"><span class="comment"># This is a new line of text.</span></span><br><span class="line"><span class="comment"># This is line number4.</span></span><br></pre></td></tr></table></figure>

<h5 id="Transforming-characters"><a href="#Transforming-characters" class="headerlink" title="Transforming characters"></a>Transforming characters</h5><p>transform(y) 是唯 sed 支持的唯一一个用于替换单个字符的参数，格式 <code>[address]y/inchars/outchars/</code>. inchars 和 outchars 必须是等长的，不然会报错。他是做一对一替换，比如 <code>y/123/789</code> 他会用 1 代替 7， 2 代替 8 依次类推</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;y/123/789/&#x27;</span> data8.txt</span><br><span class="line"><span class="comment"># This is line number7.</span></span><br><span class="line"><span class="comment"># This is line number8.</span></span><br><span class="line"><span class="comment"># This is line number9.</span></span><br><span class="line"><span class="comment"># This is line number4.</span></span><br><span class="line"><span class="comment"># This is line number7 again.</span></span><br><span class="line"><span class="comment"># This is yet another line.</span></span><br><span class="line"><span class="comment"># This is the last line in the line.</span></span><br></pre></td></tr></table></figure>

<p>而且他是全局替换，任何出现的地方都会被换掉</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This 1 is a test of 1 try.&quot;</span> | sed <span class="string">&#x27;y/123/456/&#x27;</span></span><br><span class="line"><span class="comment"># This 4 is a test of 4 try.</span></span><br></pre></td></tr></table></figure>

<h5 id="Printing-revisited"><a href="#Printing-revisited" class="headerlink" title="Printing revisited"></a>Printing revisited</h5><p>和 p flag 类似的还有两个符号，表示如下</p>
<ul>
<li>The p command to print a text line</li>
<li>The equal sign(=) command to print line numbers</li>
<li>The l(lowercase L) command to list a line</li>
</ul>
<p>p 使用案例, -n 可以强制只打印匹配的内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;this is a test&quot;</span> | sed <span class="string">&#x27;p&#x27;</span></span><br><span class="line"><span class="comment"># this is a test</span></span><br><span class="line"><span class="comment"># this is a test</span></span><br><span class="line"></span><br><span class="line">cat data6.txt</span><br><span class="line"><span class="comment"># This is line number1.</span></span><br><span class="line"><span class="comment"># This is line number2.</span></span><br><span class="line"><span class="comment"># This is line number3.</span></span><br><span class="line"><span class="comment"># This is line number4.</span></span><br><span class="line"></span><br><span class="line">sed -n <span class="string">&#x27;/number3/p&#x27;</span> data6.txt</span><br><span class="line"><span class="comment"># This is line number3.</span></span><br><span class="line"></span><br><span class="line">sed -n <span class="string">&#x27;2,3p&#x27;</span> data6.txt</span><br><span class="line"><span class="comment"># This is line number2.</span></span><br><span class="line"><span class="comment"># This is line number3.</span></span><br></pre></td></tr></table></figure>

<p>找到匹配的行，先打印原始值，再替换并打印。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -n <span class="string">&#x27;/3/&#123;</span></span><br><span class="line"><span class="string">&gt; p</span></span><br><span class="line"><span class="string">&gt; s/line/test/p</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span> data6.txt</span><br><span class="line"><span class="comment"># This is line number3.</span></span><br><span class="line"><span class="comment"># This is test number3.</span></span><br></pre></td></tr></table></figure>

<p>equals 相关的案例，输出行号</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data1.txt </span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line">sed <span class="string">&#x27;=&#x27;</span> data1.txt </span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># The quick brown fox jumps over the lazy dog.</span></span><br></pre></td></tr></table></figure>

<p>搜索匹配的内容并打印行号</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -n <span class="string">&#x27;/number 4/&#123;</span></span><br><span class="line"><span class="string">&gt; =</span></span><br><span class="line"><span class="string">&gt; p</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span> data6.txt</span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># This is line number 4.</span></span><br></pre></td></tr></table></figure>

<p>l - listing lines, 打印文字和特殊字符(non-printable characters). 下面的实验中，tab 符号答应失败了，可能什么设置问题把，不过结尾符 <code>$</code> 倒是么什么问题</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data9.txt </span><br><span class="line"><span class="comment"># This    line    contains    tabs.</span></span><br><span class="line">sed -n <span class="string">&#x27;l&#x27;</span> data9.txt </span><br><span class="line"><span class="comment"># This    line    contains    tabs.$</span></span><br></pre></td></tr></table></figure>

<h4 id="Using-files-with-sed"><a href="#Using-files-with-sed" class="headerlink" title="Using files with sed"></a>Using files with sed</h4><h5 id="Writing-to-a-file"><a href="#Writing-to-a-file" class="headerlink" title="Writing to a file"></a>Writing to a file</h5><p>通过 w 将匹配的内容写到文件 <code>[address]w filename</code>, 使用 -n 只在屏幕上显示匹配部分</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;1,2w test.txt&#x27;</span> data6.txt </span><br><span class="line"><span class="comment"># This is line number 1.</span></span><br><span class="line"><span class="comment"># This is line number 2.</span></span><br><span class="line"><span class="comment"># This is line number 3.</span></span><br><span class="line"><span class="comment"># This is line number 4.</span></span><br><span class="line">cat test.txt </span><br><span class="line"><span class="comment"># This is line number 1.</span></span><br><span class="line"><span class="comment"># This is line number 2.</span></span><br></pre></td></tr></table></figure>

<p>这个技巧在筛选数据的时候格外好用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data11.txt </span><br><span class="line"><span class="comment"># Blum, R       Browncoat</span></span><br><span class="line"><span class="comment"># McGuiness, A  Alliance</span></span><br><span class="line"><span class="comment"># Bresnahan, C  Browncoat</span></span><br><span class="line"><span class="comment"># Harken, C     Alliance</span></span><br><span class="line"></span><br><span class="line">sed -n <span class="string">&#x27;/Browncoat/w Browncoats.txt&#x27;</span> data11.txt </span><br><span class="line">cat Browncoats.txt </span><br><span class="line"><span class="comment"># Blum, R       Browncoat</span></span><br><span class="line"><span class="comment"># Bresnahan, C  Browncoat</span></span><br></pre></td></tr></table></figure>

<h5 id="Reading-data-from-a-file"><a href="#Reading-data-from-a-file" class="headerlink" title="Reading data from a file"></a>Reading data from a file</h5><p>The read command(r) allows you to insert data contained in a separate file. format at: <code>[address]r filename</code></p>
<p>filename 可以是相对路径，也可以是绝对路径。你不能使用 range of address for the read command. you can only specify a single line number or text pattern address.</p>
<p>读取目标文件中的内容并插入到指定位置<strong>的后面</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data12.txt </span><br><span class="line"><span class="comment"># This is an added line.</span></span><br><span class="line"><span class="comment"># This is the second added line.</span></span><br><span class="line"></span><br><span class="line">cat data6.txt </span><br><span class="line"><span class="comment"># This is line number 1.</span></span><br><span class="line"><span class="comment"># This is line number 2.</span></span><br><span class="line"><span class="comment"># This is line number 3.</span></span><br><span class="line"><span class="comment"># This is line number 4.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;3r data12.txt&#x27;</span> data6.txt </span><br><span class="line"><span class="comment"># This is line number 1.</span></span><br><span class="line"><span class="comment"># This is line number 2.</span></span><br><span class="line"><span class="comment"># This is line number 3.</span></span><br><span class="line"><span class="comment"># This is an added line.</span></span><br><span class="line"><span class="comment"># This is the second added line.</span></span><br><span class="line"><span class="comment"># This is line number 4.</span></span><br></pre></td></tr></table></figure>

<p>pattern 同样支持</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;/number 2/r data12.txt&#x27;</span> data6.txt </span><br><span class="line"><span class="comment"># This is line number 1.</span></span><br><span class="line"><span class="comment"># This is line number 2.</span></span><br><span class="line"><span class="comment"># This is an added line.</span></span><br><span class="line"><span class="comment"># This is the second added line.</span></span><br><span class="line"><span class="comment"># This is line number 3.</span></span><br><span class="line"><span class="comment"># This is line number 4.</span></span><br></pre></td></tr></table></figure>

<p>添加到末尾</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;$r data12.txt&#x27;</span> data6.txt </span><br><span class="line"><span class="comment"># This is line number 1.</span></span><br><span class="line"><span class="comment"># This is line number 2.</span></span><br><span class="line"><span class="comment"># This is line number 3.</span></span><br><span class="line"><span class="comment"># This is line number 4.</span></span><br><span class="line"><span class="comment"># This is an added line.</span></span><br><span class="line"><span class="comment"># This is the second added line.</span></span><br></pre></td></tr></table></figure>

<p>将 read 和 delete 结合使用，我们就可以有类似于替换的效果了</p>
<p>下面例子中我们将名单用 LIST 这个单词做为占位符，将 data11.txt 中的内容替换进去</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat notice.std </span><br><span class="line"><span class="comment"># Would the following people:</span></span><br><span class="line"><span class="comment"># LIST</span></span><br><span class="line"><span class="comment"># please report to the ship&#x27;s captain.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;/LIST/&#123;</span></span><br><span class="line"><span class="string">&gt; r data11.txt</span></span><br><span class="line"><span class="string">&gt; d</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span> notice.std</span><br><span class="line"><span class="comment"># Would the following people:</span></span><br><span class="line"><span class="comment"># Blum, R       Browncoat</span></span><br><span class="line"><span class="comment"># McGuiness, A  Alliance</span></span><br><span class="line"><span class="comment"># Bresnahan, C  Browncoat</span></span><br><span class="line"><span class="comment"># Harken, C     Alliance</span></span><br><span class="line"><span class="comment"># please report to the ship&#x27;s captain.</span></span><br></pre></td></tr></table></figure>

<h2 id="Chapter-20-Regular-Expressions"><a href="#Chapter-20-Regular-Expressions" class="headerlink" title="Chapter 20: Regular Expressions"></a>Chapter 20: Regular Expressions</h2><h3 id="What-Are-Regular-Expressions"><a href="#What-Are-Regular-Expressions" class="headerlink" title="What Are Regular Expressions"></a>What Are Regular Expressions</h3><h4 id="A-definition"><a href="#A-definition" class="headerlink" title="A definition"></a>A definition</h4><p>A regular expression is a pattern template you define that a Linux utility users to filter text.</p>
<h4 id="Types-of-regular-expressions"><a href="#Types-of-regular-expressions" class="headerlink" title="Types of regular expressions"></a>Types of regular expressions</h4><p>Linux 系统中，一些不同的应用采用不同的正则表达式。正则表达式通过 regular expression engine 实现。Linux 世界中有两个爆款 engines:</p>
<ul>
<li>The POSIX Basic Regular Expression(BRE) engine</li>
<li>The POSIX Extened Regular Expression(ERE) engine</li>
</ul>
<p>大多数 Linux 工具都会适配 RRE，sed 除外，它的目标是尽可能快的处理，所以只识别部分 BRE。</p>
<h3 id="Defining-BRE-Patterns"><a href="#Defining-BRE-Patterns" class="headerlink" title="Defining BRE Patterns"></a>Defining BRE Patterns</h3><h4 id="Plain-text"><a href="#Plain-text" class="headerlink" title="Plain text"></a>Plain text</h4><p>搜索的关键字是目标的一部分即可</p>
<h4 id="Special-characters"><a href="#Special-characters" class="headerlink" title="Special characters"></a>Special characters</h4><p>正则可以识别的特殊字符 <code>.*[]^$&#123;&#125;\+?|()</code>, 如果你想要使用文本版的这些特殊字符，在他们前面加 backslash character()</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;The cost is $4.00&#x27;</span> | sed -n <span class="string">&#x27;/\$/p&#x27;</span></span><br><span class="line"><span class="comment"># The cost is $4.00</span></span><br></pre></td></tr></table></figure>

<h4 id="Anchor-characters"><a href="#Anchor-characters" class="headerlink" title="Anchor characters"></a>Anchor characters</h4><h5 id="Starting-at-the-beginning"><a href="#Starting-at-the-beginning" class="headerlink" title="Starting at the beginning"></a>Starting at the beginning</h5><p>caret character(^) 指代文本开头</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The book store&quot;</span> | sed -n <span class="string">&#x27;/^book/p&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Books are great&quot;</span> | sed -n <span class="string">&#x27;/^Book/p&#x27;</span></span><br><span class="line"><span class="comment"># Books are great</span></span><br></pre></td></tr></table></figure>

<p>当符号出现在非开头位置，则他会被当作普通字符处理</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This ^ is a test&quot;</span> | sed -n <span class="string">&#x27;/s ^/p&#x27;</span> </span><br><span class="line"><span class="comment"># This ^ is a test</span></span><br></pre></td></tr></table></figure>

<h5 id="Looking-for-the-ending"><a href="#Looking-for-the-ending" class="headerlink" title="Looking for the ending"></a>Looking for the ending</h5><p>The dollar sign($) 指代了文本的结尾</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a good book&quot;</span> | sed -n <span class="string">&#x27;/book$/p&#x27;</span></span><br><span class="line"><span class="comment"># This is a good book</span></span><br></pre></td></tr></table></figure>

<h4 id="The-dot-character"><a href="#The-dot-character" class="headerlink" title="The dot character"></a>The dot character</h4><p>dot 用于指代除换行外的任何字符, 如果 <code>.</code> 代表的位置没有东西，则匹配失败</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data6 </span><br><span class="line"><span class="comment"># This is a test of a line.</span></span><br><span class="line"><span class="comment"># The cat is sleeping.</span></span><br><span class="line"><span class="comment"># That is a very nice hat.</span></span><br><span class="line"><span class="comment"># This test is at line four.</span></span><br><span class="line"><span class="comment"># at ten o&#x27;clock we&#x27;ll go home.</span></span><br><span class="line">sed -n <span class="string">&#x27;/.at/p&#x27;</span> data6</span><br><span class="line"><span class="comment"># The cat is sleeping.</span></span><br><span class="line"><span class="comment"># That is a very nice hat.</span></span><br><span class="line"><span class="comment"># This test is at line four.</span></span><br></pre></td></tr></table></figure>

<h4 id="Character-classes"><a href="#Character-classes" class="headerlink" title="Character classes"></a>Character classes</h4><p>character class 用于限定匹配的内容，使用 square brackets([]) 表示</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -n <span class="string">&#x27;/[ch]at/p&#x27;</span> data6</span><br><span class="line"><span class="comment"># The cat is sleeping.</span></span><br><span class="line"><span class="comment"># That is a very nice hat.</span></span><br></pre></td></tr></table></figure>

<h4 id="Negating-character-classes"><a href="#Negating-character-classes" class="headerlink" title="Negating character classes"></a>Negating character classes</h4><p>和前面的相反，是不包含的意思</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -n <span class="string">&#x27;/[^ch]at/p&#x27;</span> data6</span><br><span class="line"><span class="comment"># This test is at line four.</span></span><br></pre></td></tr></table></figure>

<h4 id="Using-ranges"><a href="#Using-ranges" class="headerlink" title="Using ranges"></a>Using ranges</h4><p><code>sed -n &#39;/^[0-9][0-9][0-9][0-9][0-9]$/p&#39; data8</code> 这个技巧也使用于字符</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -n <span class="string">&#x27;/[c-h]at/p&#x27;</span> data6</span><br><span class="line"><span class="comment"># The cat is sleeping.</span></span><br><span class="line"><span class="comment"># That is a very nice hat.</span></span><br></pre></td></tr></table></figure>

<p>也可以指定非连续的字符集合</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -n <span class="string">&#x27;/[a-ch-m]at/p&#x27;</span> data6</span><br><span class="line"><span class="comment"># The cat is sleeping.</span></span><br><span class="line"><span class="comment"># That is a very nice hat.</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;I&#x27;m getting too fat&quot;</span> | sed -n <span class="string">&#x27;/[a-ch-m]at/p&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br></pre></td></tr></table></figure>

<h4 id="Special-character-classes"><a href="#Special-character-classes" class="headerlink" title="Special character classes"></a>Special character classes</h4><p>BRE Special Character classes</p>
<table>
<thead>
<tr>
<th align="left">Class</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">[[:alpha:]]</td>
<td align="left">Matches any alphabetical character, either upper or lower case</td>
</tr>
<tr>
<td align="left">[[:alnum:]]</td>
<td align="left">Matches any alphanumberic character 0-9, A-Z or a-z</td>
</tr>
<tr>
<td align="left">[[:blank:]]</td>
<td align="left">Matches a space or Tab character</td>
</tr>
<tr>
<td align="left">[[:digit:]]</td>
<td align="left">Matches a numberical digit from 0-9</td>
</tr>
<tr>
<td align="left">[[:lower:]]</td>
<td align="left">Matches any lowercase alphabetical character a-z</td>
</tr>
<tr>
<td align="left">[[:print:]]</td>
<td align="left">Matches any printable character</td>
</tr>
<tr>
<td align="left">[[:punct:]]</td>
<td align="left">Matches a punctuation character</td>
</tr>
<tr>
<td align="left">[[:space:]]</td>
<td align="left">Matches any whitespace character: space, Table, NL, FF, VT CR</td>
</tr>
<tr>
<td align="left">[[:upper:]]</td>
<td align="left">Matches any uppercase alphabetical character A-Z</td>
</tr>
</tbody></table>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;abc&quot;</span> | sed -n <span class="string">&#x27;/[[:digit:]]/p&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;abc&quot;</span> | sed -n <span class="string">&#x27;/[[:alpha:]]/p&#x27;</span></span><br><span class="line"><span class="comment"># abc</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;abc123&quot;</span> | sed -n <span class="string">&#x27;/[[:digit:]]/p&#x27;</span></span><br><span class="line"><span class="comment"># abc123</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is, a test&quot;</span> | sed -n <span class="string">&#x27;/[[:punct:]]/p&#x27;</span></span><br><span class="line"><span class="comment"># This is, a test</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a test&quot;</span> | sed -n <span class="string">&#x27;/[[:punct:]]/p&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br></pre></td></tr></table></figure>

<h4 id="The-asterisk"><a href="#The-asterisk" class="headerlink" title="The asterisk"></a>The asterisk</h4><p>星号标识字符出现一次或 n 次</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ik&quot;</span> | sed -n <span class="string">&#x27;/ie*k/p&#x27;</span></span><br><span class="line"><span class="comment"># ik</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;iek&quot;</span> | sed -n <span class="string">&#x27;/ie*k/p&#x27;</span></span><br><span class="line"><span class="comment"># iek</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ieeeek&quot;</span> | sed -n <span class="string">&#x27;/ie*k/p&#x27;</span></span><br><span class="line"><span class="comment"># ieeeek</span></span><br></pre></td></tr></table></figure>

<p>星号也可以和 character class 结合使用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;baeeeet&quot;</span> | sed -n <span class="string">&#x27;/b[ae]*t/p&#x27;</span></span><br><span class="line"><span class="comment"># baeeeet</span></span><br></pre></td></tr></table></figure>

<h3 id="Extended-Regular-Expressions"><a href="#Extended-Regular-Expressions" class="headerlink" title="Extended Regular Expressions"></a>Extended Regular Expressions</h3><p>gawk 识别 ERE pattern，ERE 新增了一些符号来扩展功能</p>
<p><strong>Caution</strong> sed 和 gawk 采用了不同的引擎，gawk 可以适配大部分的扩展功能。sed 不能，但是 sed 更快</p>
<h4 id="The-question-mark"><a href="#The-question-mark" class="headerlink" title="The question mark"></a>The question mark</h4><p>问号(?)表示出现 0 次或 1 次。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;bt&quot;</span> | gawk <span class="string">&#x27;/be?t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># bt</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bet&quot;</span> | gawk <span class="string">&#x27;/be?t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># bet</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;beet&quot;</span> | gawk <span class="string">&#x27;/be?t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br></pre></td></tr></table></figure>

<p>问号也可以结合 character class 使用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bt&quot;</span> | gawk <span class="string">&#x27;/b[ae]?t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># bt</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bat&quot;</span> | gawk <span class="string">&#x27;/b[ae]?t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># bat</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bot&quot;</span> | gawk <span class="string">&#x27;/b[ae]?t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bet&quot;</span> | gawk <span class="string">&#x27;/b[ae]?t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># bet</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;beaet&quot;</span> | gawk <span class="string">&#x27;/b[ae]?t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;baet&quot;</span> | gawk <span class="string">&#x27;/b[ae]?t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;beat&quot;</span> | gawk <span class="string">&#x27;/b[ae]?t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;beet&quot;</span> | gawk <span class="string">&#x27;/b[ae]?t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br></pre></td></tr></table></figure>

<h4 id="The-plus-sign"><a href="#The-plus-sign" class="headerlink" title="The plus sign"></a>The plus sign</h4><p>加号(+), 出现一次或多次</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;beet&quot;</span> | gawk <span class="string">&#x27;/be+t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># beet</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bet&quot;</span> | gawk <span class="string">&#x27;/be+t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># bet</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bt&quot;</span> | gawk <span class="string">&#x27;/be+t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br></pre></td></tr></table></figure>

<p>结合方括号使用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bt&quot;</span> | gawk <span class="string">&#x27;/b[ae]+t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bat&quot;</span> | gawk <span class="string">&#x27;/b[ae]+t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># bat</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bet&quot;</span> | gawk <span class="string">&#x27;/b[ae]+t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># bet</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;baet&quot;</span> | gawk <span class="string">&#x27;/b[ae]+t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># baet</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;beet&quot;</span> | gawk <span class="string">&#x27;/b[ae]+t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># beet</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;beeet&quot;</span> | gawk <span class="string">&#x27;/b[ae]+t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># beeet</span></span><br></pre></td></tr></table></figure>

<h4 id="Using-braces"><a href="#Using-braces" class="headerlink" title="Using braces"></a>Using braces</h4><p>花括号表示重复多次</p>
<ul>
<li>m: The regular expression appears exactly m times</li>
<li>m,n: The regular expression appears at least m times, but no more than n times</li>
</ul>
<p><strong>Cautim</strong> gawk 默认不识别这个模式，需要加上 –re-interval 参数增加这个功能</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bt&quot;</span> | gawk --re-interval <span class="string">&#x27;/be&#123;1&#125;t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bet&quot;</span> | gawk --re-interval <span class="string">&#x27;/be&#123;1&#125;t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># bet</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;beet&quot;</span> | gawk --re-interval <span class="string">&#x27;/be&#123;1&#125;t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br></pre></td></tr></table></figure>

<p>指定出现次数的区间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bt&quot;</span> | gawk --re-interval <span class="string">&#x27;/be&#123;1,2&#125;t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bet&quot;</span> | gawk --re-interval <span class="string">&#x27;/be&#123;1,2&#125;t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># bet</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;beet&quot;</span> | gawk --re-interval <span class="string">&#x27;/be&#123;1,2&#125;t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># beet</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;beeet&quot;</span> | gawk --re-interval <span class="string">&#x27;/be&#123;1,2&#125;t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br></pre></td></tr></table></figure>

<p>同样适用于 character class</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bt&quot;</span> | gawk --re-interval <span class="string">&#x27;/b[ae]&#123;1,2&#125;t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bat&quot;</span> | gawk --re-interval <span class="string">&#x27;/b[ae]&#123;1,2&#125;t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># bat</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bet&quot;</span> | gawk --re-interval <span class="string">&#x27;/b[ae]&#123;1,2&#125;t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># bet</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;beat&quot;</span> | gawk --re-interval <span class="string">&#x27;/b[ae]&#123;1,2&#125;t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># beat</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;beet&quot;</span> | gawk --re-interval <span class="string">&#x27;/b[ae]&#123;1,2&#125;t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># beet</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;beeet&quot;</span> | gawk --re-interval <span class="string">&#x27;/b[ae]&#123;1,2&#125;t/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br></pre></td></tr></table></figure>

<h4 id="The-pipe-symbol"><a href="#The-pipe-symbol" class="headerlink" title="The pipe symbol"></a>The pipe symbol</h4><p>pipe symbol 可以让你实现 OR 的逻辑，只要有一个匹配，就算 match 了 <code>expr1 | expr2 | ...</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The cat is asleep&quot;</span> | gawk <span class="string">&#x27;/cat|dog/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># The cat is asleep</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The dog is asleep&quot;</span> | gawk <span class="string">&#x27;/cat|dog/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># The dog is asleep</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The sheep is asleep&quot;</span> | gawk <span class="string">&#x27;/cat|dog/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># no matched</span></span><br></pre></td></tr></table></figure>

<p>结合 character class 使用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;He has a hat&quot;</span> | gawk <span class="string">&#x27;/[ch]at|dog/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># He has a hat</span></span><br></pre></td></tr></table></figure>

<h4 id="Grouping-expressions"><a href="#Grouping-expressions" class="headerlink" title="Grouping expressions"></a>Grouping expressions</h4><p>可以使用括号(parentheses)表示 group. 这个 group 会被当成一个基本字符对待。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Sat&quot;</span> | gawk <span class="string">&#x27;/Sat(urday)?/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># Sat</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Saturday&quot;</span> | gawk <span class="string">&#x27;/Sat(urday)?/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># Saturday</span></span><br></pre></td></tr></table></figure>

<p>group 经常和 pipe 结合使用来表示可能出现的组合</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;cat&quot;</span> | gawk <span class="string">&#x27;/(c|b)a(b|t)/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># cat</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;cab&quot;</span> | gawk <span class="string">&#x27;/(c|b)a(b|t)/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># cab</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bat&quot;</span> | gawk <span class="string">&#x27;/(c|b)a(b|t)/&#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># bat</span></span><br></pre></td></tr></table></figure>

<h3 id="Regular-Expressions-in-Action"><a href="#Regular-Expressions-in-Action" class="headerlink" title="Regular Expressions in Action"></a>Regular Expressions in Action</h3><p>实操，介绍一些使用案例</p>
<h4 id="Counting-directory-files"><a href="#Counting-directory-files" class="headerlink" title="Counting directory files"></a>Counting directory files</h4><p>统计环境变量中的可执行文件数量</p>
<p>步骤：echo $PATH 拿到路径，通过 <code>:</code> 分割，最后通过 <code>ls</code> 列出文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat countfiles.sh                                     </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Count number of files in you PATH</span></span><br><span class="line"></span><br><span class="line">mypath=$(<span class="built_in">echo</span> <span class="variable">$PATH</span> | sed <span class="string">&#x27;s/:/ /g&#x27;</span>)</span><br><span class="line">count=0</span><br><span class="line"><span class="keyword">for</span> directory <span class="keyword">in</span> <span class="variable">$mypath</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    check=$(ls <span class="variable">$direcotry</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable">$check</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        count=$[ <span class="variable">$count</span> + 1 ]</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$directory</span> - <span class="variable">$count</span>&quot;</span></span><br><span class="line">    count=0</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">./countfiles.sh </span><br><span class="line"><span class="comment"># /usr/local/opt/mysql@5.7/bin - 4</span></span><br><span class="line"><span class="comment"># /Users/i306454/SAPDevelop/tools/maven/bin - 4</span></span><br><span class="line"><span class="comment"># ....</span></span><br></pre></td></tr></table></figure>

<h4 id="Validating-a-phone-number"><a href="#Validating-a-phone-number" class="headerlink" title="Validating a phone number"></a>Validating a phone number</h4><p>写一个脚本匹配电话号码，样本</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">000-000-0000</span><br><span class="line">123-456-7890</span><br><span class="line">212-555-1234</span><br><span class="line">(317)555-1234</span><br><span class="line">(202) 555-9876</span><br><span class="line">33523</span><br><span class="line">1234567890</span><br><span class="line">234.123.4567</span><br></pre></td></tr></table></figure>

<p>规则：如下四种格式是合法的，其他都不合法</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">(123)456-7890</span><br><span class="line">(123) 456-7890</span><br><span class="line">123-456-7890</span><br><span class="line">123.456.7890</span><br></pre></td></tr></table></figure>

<p>找规律:</p>
<ul>
<li>可能以括号开头 <code>^\(?</code></li>
<li>接下来三位数是 area codes, 第一位是非 0，1的数，后两位是 0-9的数 <code>[2-9][0-9]&#123;2&#125;</code></li>
<li>可能存在的结束括号 <code>\)?</code></li>
<li>间隔符，可以没有，可以是空格，点，横线 <code>(| |-|\.)</code> 使用 group 把它看作一个集合，使用竖线表示 or</li>
<li>三个 0-9 的整数 <code>[0-9]&#123;3&#125;</code></li>
<li>空格(虽然例子上没显示)，横线或者点号 <code>( |-|\.)</code></li>
<li>最后接四位整数作为结尾 <code>[0-9]&#123;4&#125;$</code></li>
</ul>
<p>完整表达式 <code>^\(?[2-9][0-9]&#123;2&#125;\)?(| |-|\.)[0-9]&#123;3&#125;( |-|\.)[0-9]&#123;4&#125;$</code></p>
<p>测试:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat isphone              </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Script to filter out bad phone numbers</span></span><br><span class="line"></span><br><span class="line">gawk --re-interval <span class="string">&#x27;/^\(?[2-9][0-9]&#123;2&#125;\)?(| |-|\.)[0-9]&#123;3&#125;( |-|\.)[0-9]&#123;4&#125;$/&#123;print $0&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">cat phonelist | ./isphone       </span><br><span class="line"><span class="comment"># 212-555-1234</span></span><br><span class="line"><span class="comment"># (317)555-1234</span></span><br><span class="line"><span class="comment"># (202) 555-9876</span></span><br><span class="line"><span class="comment"># 234.123.4567</span></span><br></pre></td></tr></table></figure>

<p>PS: 中间那个过来间隔符的操作我之前是没有意识到的</p>
<h4 id="Parsing-an-e-mail-address"><a href="#Parsing-an-e-mail-address" class="headerlink" title="Parsing an e-mail address"></a>Parsing an e-mail address</h4><p>验证 email 的正则表达式</p>
<ul>
<li>用户名部分，可以是任何数字，字母，下划线，横杠和加号 <code>^([a-zA-Z0-9_\-\.\+]+)@</code></li>
<li>hostname 和名字部分一样的规则 <code>([a-zA-Z0-9_\-\.\+]+)</code></li>
<li>顶级域名值只能是字母，大于2个字符，小于5个字符 <code>\.([a-zA-Z]&#123;2,5&#125;)$</code></li>
</ul>
<p>完整表达式 <code>^([a-zA-Z0-9_\-\.\+]+)@([a-zA-Z0-9_\-\.\+]+)\.([a-zA-Z]&#123;2,5&#125;)$</code></p>
<p>测试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat isemail </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Script to filter out bad email</span></span><br><span class="line"></span><br><span class="line">gawk --re-interval <span class="string">&#x27;/^([a-zA-Z0-9_\-\.\+]+)@([a-zA-Z0-9_\-\.\+]+)\.([a-zA-Z]&#123;2,5&#125;)$/&#123;print $0&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;rich@here.now&quot;</span> | ./isemail</span><br><span class="line"><span class="comment"># rich@here.now</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;rich@here.now.&quot;</span> | ./isemail</span><br><span class="line"><span class="comment"># no match</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;rich.blum@here.now&quot;</span> | ./isemail</span><br><span class="line"><span class="comment"># rich.blum@here.now</span></span><br></pre></td></tr></table></figure>

<h2 id="Advanced-sed"><a href="#Advanced-sed" class="headerlink" title="Advanced sed"></a>Advanced sed</h2><h3 id="Looking-at-Multiline-Commands"><a href="#Looking-at-Multiline-Commands" class="headerlink" title="Looking at Multiline Commands"></a>Looking at Multiline Commands</h3><p>在前面的 sed 使用过程中，你可能已经察觉到了 sed 的一个限制，他只能按行处理。当 sed 拿到一个字符流时，他会将数据按照 newline characters 做分割，每次处理一行。</p>
<p>但是实际工作你总会遇到需要处理多行的情况，比如你要替换文件中的 <code>Linux System Administrators Group</code> 关键字，但是他可能分布在两行中，这时如果你安之前的 sed 做替换就会漏掉一些内容</p>
<p>为了应对这种情况，sed 提供了三个关键字来处理这种情况</p>
<ul>
<li>N add the next line in the data stream to create a multiline group for processing</li>
<li>D delete a single line in multiline group</li>
<li>P prints a single line in a multiline group</li>
</ul>
<h4 id="Navigating-the-next-command"><a href="#Navigating-the-next-command" class="headerlink" title="Navigating the next command"></a>Navigating the next command</h4><h5 id="Using-the-single-line-next-command"><a href="#Using-the-single-line-next-command" class="headerlink" title="Using the single-line next command"></a>Using the single-line next command</h5><p>下面的示例中，我们有5行文本，1，3，5有值，2，4为空。目标是通过 sed 只移除第二行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data1.txt</span><br><span class="line"><span class="comment"># This is the header line.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is a data line.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the last line.</span></span><br></pre></td></tr></table></figure>

<p>错误示范，会删掉所有空行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;/^$/d&#x27;</span> data1.txt       </span><br><span class="line"><span class="comment"># This is the header line.</span></span><br><span class="line"><span class="comment"># This is a data line.</span></span><br><span class="line"><span class="comment"># This is the last line.</span></span><br></pre></td></tr></table></figure>

<p>通过使用 <code>n</code> 这个关键字，可以将下一行也包括到搜索范围内</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;/header/&#123;n ; d&#125;&#x27;</span> data1.txt</span><br><span class="line"><span class="comment"># This is the header line.</span></span><br><span class="line"><span class="comment"># This is a data line.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the last line</span></span><br></pre></td></tr></table></figure>

<p>PS: MacOS 不支持，在 Ubantu 上做的实验</p>
<p>简单一句话就是，n 不会和前一句做合并处理. 说实话上面的例子还是不怎么理解，可能得另外找点书补充一下</p>
<h5 id="Combining-lines-of-text"><a href="#Combining-lines-of-text" class="headerlink" title="Combining lines of text"></a>Combining lines of text</h5><p>The single-line next command moves the next line of text from the data stream into the processing space(called the pattern space) of the sed editor.</p>
<p>The multiline version of the next command(which uses a captial N) adds the next line of text to the text already in the pattern space.</p>
<p>大写的 N 可以将两行拼成一行处理，中间用换行符隔开</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data2.txt</span><br><span class="line"><span class="comment"># This is the header line.</span></span><br><span class="line"><span class="comment"># This is the first data line.</span></span><br><span class="line"><span class="comment"># This is the second data line</span></span><br><span class="line"><span class="comment"># This is the last line</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;/first/&#123;N; s/\n/ /&#125;&#x27;</span> data2.txt</span><br><span class="line"><span class="comment"># This is the header line.</span></span><br><span class="line"><span class="comment"># This is the first data line. This is the second data line</span></span><br><span class="line"><span class="comment"># This is the last line</span></span><br></pre></td></tr></table></figure>

<p>上面的例子中，我们找到包含 first 的行，然后将下一行接上一起处理，处理的时候，将换行替换为空格</p>
<p>再举一个需要测试的数据落在两个段落中的例子</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data3.txt</span><br><span class="line"><span class="comment"># On Tuesday, the Linux System</span></span><br><span class="line"><span class="comment"># Administrator&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="comment"># All System Administrators should attend.</span></span><br><span class="line"><span class="comment"># Thank you for your attendance.</span></span><br></pre></td></tr></table></figure>

<p>第一个关键字替换失败，第二个成功，因为第一个用的换行，匹配用的空格</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;N;s/System Administrator/Desktop User/&#x27;</span> data3.txt</span><br><span class="line"><span class="comment"># On Tuesday, the Linux System</span></span><br><span class="line"><span class="comment"># Administrator&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="comment"># All Desktop Users should attend.</span></span><br><span class="line"><span class="comment"># Thank you for your attendance</span></span><br></pre></td></tr></table></figure>

<p>替换成功不过换行消失了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;N;s/System.Administrator/Desktop User/&#x27;</span> data3.txt</span><br><span class="line"><span class="comment"># On Tuesday, the Linux Desktop User&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="comment"># All Desktop Users should attend.</span></span><br><span class="line"><span class="comment"># Thank you for your attendance.</span></span><br></pre></td></tr></table></figure>

<p>使用两个替换分别应对换行和空格的情况</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;N</span></span><br><span class="line"><span class="string">&gt; s/System\nAdministrator/Desktop\nUser/</span></span><br><span class="line"><span class="string">&gt; s/System Administrator/Desktop User/</span></span><br><span class="line"><span class="string">&gt; &#x27;</span> data3.txt</span><br><span class="line"><span class="comment"># On Tuesday, the Linux Desktop</span></span><br><span class="line"><span class="comment"># User&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="comment"># All Desktop Users should attend.</span></span><br><span class="line"><span class="comment"># Thank you for your attendance.</span></span><br></pre></td></tr></table></figure>

<p>这里还有一个小问题，由于命令是 N 开头，他会先拿下一行到 pattern space，当处理最后一行时，下一行为空，直接结束了，如果要替换的目标在最后一行就会有遗漏</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data4.txt</span><br><span class="line"><span class="comment"># On Tuesday, the Linux System</span></span><br><span class="line"><span class="comment"># Administrator&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="comment"># All System Administrators should attend.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;N</span></span><br><span class="line"><span class="string">s/System\nAdministrator/Desktop\nUser/</span></span><br><span class="line"><span class="string">s/System Administrator/Desktop User/</span></span><br><span class="line"><span class="string">&#x27;</span> data4.txt</span><br><span class="line"><span class="comment"># On Tuesday, the Linux Desktop</span></span><br><span class="line"><span class="comment"># User&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="comment"># All System Administrators should attend.</span></span><br></pre></td></tr></table></figure>

<p>这时你可以换一下顺序</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt; s/System Administrator/Desktop User/</span></span><br><span class="line"><span class="string">&gt; N</span></span><br><span class="line"><span class="string">&gt; s/System\nAdministrator/Desktop\nUser/</span></span><br><span class="line"><span class="string">&gt; &#x27;</span> data4.txt</span><br><span class="line"><span class="comment"># On Tuesday, the Linux Desktop</span></span><br><span class="line"><span class="comment"># User&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="comment"># All Desktop Users should attend.</span></span><br></pre></td></tr></table></figure>

<p>（；￣ェ￣）简直无情，太繁琐了</p>
<h4 id="Navigating-the-multiline-delete-command"><a href="#Navigating-the-multiline-delete-command" class="headerlink" title="Navigating the multiline delete command"></a>Navigating the multiline delete command</h4><p>当使用 N 的方式做 delete 的时候，它会将匹配到的两行内容全部删掉</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data4.txt</span><br><span class="line"><span class="comment"># On Tuesday, the Linux System</span></span><br><span class="line"><span class="comment"># Administrator&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="comment"># All System Administrators should attend.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;N ; /System\nAdministrator/d&#x27;</span> data4.txt</span><br><span class="line"><span class="comment"># All System Administrators should attend.</span></span><br></pre></td></tr></table></figure>

<p>sed 提供了一个只删除第一行内容的 flag - D</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;N ; /System\nAdministrator/D&#x27;</span> data4.txt</span><br><span class="line"><span class="comment"># Administrator&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="comment"># All System Administrators should attend.</span></span><br></pre></td></tr></table></figure>

<p>类似的技巧可以用来删除文章开头的空行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat -n data1.txt</span><br><span class="line">    <span class="comment">#  1</span></span><br><span class="line">    <span class="comment">#  2    This is the header line.</span></span><br><span class="line">    <span class="comment">#  3</span></span><br><span class="line">    <span class="comment">#  4    This is a data line.</span></span><br><span class="line">    <span class="comment">#  5</span></span><br><span class="line">    <span class="comment">#  6    This is the last line</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;/^$/&#123;N;/header/D&#125;&#x27;</span> data1.txt | cat -n</span><br><span class="line">    <span class="comment">#  1    This is the header line.</span></span><br><span class="line">    <span class="comment">#  2</span></span><br><span class="line">    <span class="comment">#  3    This is a data line.</span></span><br><span class="line">    <span class="comment">#  4</span></span><br><span class="line">    <span class="comment">#  5    This is the last line</span></span><br></pre></td></tr></table></figure>

<h4 id="Navigating-the-multiline-print-command"><a href="#Navigating-the-multiline-print-command" class="headerlink" title="Navigating the multiline print command"></a>Navigating the multiline print command</h4><p>和 p 对应的还有一个 P， 用法和上面的 D 一样，如果用 p 会打印两行，而用 P 则只打印第一行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -n <span class="string">&#x27;N ; /System\nAdministrator/P&#x27;</span> data3.txt</span><br><span class="line"><span class="comment"># On Tuesday, the Linux System</span></span><br><span class="line">sed -n <span class="string">&#x27;N ; /System\nAdministrator/p&#x27;</span> data3.txt</span><br><span class="line"><span class="comment"># On Tuesday, the Linux System</span></span><br><span class="line"><span class="comment"># Administrator&#x27;s group meeting will be held.</span></span><br></pre></td></tr></table></figure>

<h3 id="Holding-Space"><a href="#Holding-Space" class="headerlink" title="Holding Space"></a>Holding Space</h3><p>pattern space 是 sed 用于存放正在的处理文本的空间。但是这并不是存放文本的唯一的地方，还有一个叫做 hold space. 下列是五个可以操作 hold space 的命令</p>
<p>The sed Editor Hold Space Commands</p>
<table>
<thead>
<tr>
<th align="left">Command</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">h</td>
<td align="left">Copies pattern space to hold space</td>
</tr>
<tr>
<td align="left">H</td>
<td align="left">Appends pattern space to hold space</td>
</tr>
<tr>
<td align="left">g</td>
<td align="left">Copies hold space to pattern sapce</td>
</tr>
<tr>
<td align="left">G</td>
<td align="left">Appends hold space to pattern space</td>
</tr>
<tr>
<td align="left">x</td>
<td align="left">Exchanges contents of pattern and hold spaces</td>
</tr>
</tbody></table>
<p>这些命令可以让 pattern space 空出来处理其他文本。一般来说，你在通过 h/H 将 pattern space 的内容移动到 hold space 之后，都会再通过 g/G/x 将内容在放回到 pattern space 中。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data2.txt</span><br><span class="line"><span class="comment"># This is the header line.</span></span><br><span class="line"><span class="comment"># This is the first data line.</span></span><br><span class="line"><span class="comment"># This is the second data line</span></span><br><span class="line"><span class="comment"># This is the last line</span></span><br><span class="line"></span><br><span class="line">sed -n <span class="string">&#x27;/first/ &#123;h ; p ; n ; p ; g ; p &#125;&#x27;</span> data2.txt</span><br><span class="line"><span class="comment"># This is the first data line.</span></span><br><span class="line"><span class="comment"># This is the second data line</span></span><br><span class="line"><span class="comment"># This is the first data line.</span></span><br></pre></td></tr></table></figure>

<p>解析上面的命令</p>
<ol>
<li>sed 通过 RE 过滤包含 first 的语句</li>
<li>匹配到目标语句后，开始执行 {} 中的内容，h 会将语句 copy 到 hold space 中</li>
<li>第一个 p 打印当前 pattern space 中内容</li>
<li>n 提取下一行内容并放到 pattern space</li>
<li>第二个 p 打印当前 pattern space 中内容, 即包含 second 的语句</li>
<li>g 将 hold space 中的内容再 copy 回去</li>
<li>第三个 p 打印当前 pattern space 中内容, 即包含 first 的语句</li>
</ol>
<h3 id="Negating-a-Command"><a href="#Negating-a-Command" class="headerlink" title="Negating a Command"></a>Negating a Command</h3><p>使用叹号(!)对操作取反</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data2.txt</span><br><span class="line"><span class="comment"># This is the header line.</span></span><br><span class="line"><span class="comment"># This is the first data line.</span></span><br><span class="line"><span class="comment"># This is the second data line</span></span><br><span class="line"><span class="comment"># This is the last line</span></span><br><span class="line">sed -n <span class="string">&#x27;/header/p&#x27;</span> data2.txt</span><br><span class="line"><span class="comment"># This is the header line.</span></span><br><span class="line">sed -n <span class="string">&#x27;/header/!p&#x27;</span> data2.txt</span><br><span class="line"><span class="comment"># This is the first data line.</span></span><br><span class="line"><span class="comment"># This is the second data line</span></span><br><span class="line"><span class="comment"># This is the last line</span></span><br></pre></td></tr></table></figure>

<p>N 也有取反操作, 之前的例子</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;N</span></span><br><span class="line"><span class="string">s/System\nAdministrator/Desktop\nUser/</span></span><br><span class="line"><span class="string">s/System Administrator/Desktop User/</span></span><br><span class="line"><span class="string">&#x27;</span> data4.txt</span><br><span class="line"><span class="comment"># On Tuesday, the Linux Desktop</span></span><br><span class="line"><span class="comment"># User&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="comment"># All System Administrators should attend.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;$!N</span></span><br><span class="line"><span class="string">&gt; s/System\nAdministrator/Desktop\nUser/</span></span><br><span class="line"><span class="string">&gt; s/System Administrator/Desktop User/</span></span><br><span class="line"><span class="string">&gt; &#x27;</span> data4.txt</span><br><span class="line"><span class="comment"># On Tuesday, the Linux Desktop</span></span><br><span class="line"><span class="comment"># User&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="comment"># All Desktop Users should attend.</span></span><br></pre></td></tr></table></figure>

<p><code>$!N</code> 消失 最后一行不执行 N 的操作。。。</p>
<p>通过上面介绍的这些技巧，你可以利用 hold space 做文本倒序的功能</p>
<ol>
<li>Place a line in the pattern space</li>
<li>Place the line from the pattern space to the hold space</li>
<li>Put the next line of text in the pattern space</li>
<li>Append the hold space to the pattern space</li>
<li>Place everything in the pttern space into the hold space</li>
<li>Repeat step 3-5 until you’ve put all the lines in reverse oder in the hold space</li>
<li>Retrieve the lines, and print them</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat -n data2.txt</span><br><span class="line">    <span class="comment">#  1    This is the header line.</span></span><br><span class="line">    <span class="comment">#  2    This is the first data line.</span></span><br><span class="line">    <span class="comment">#  3    This is the second data line</span></span><br><span class="line">    <span class="comment">#  4    This is the last line</span></span><br><span class="line"></span><br><span class="line">sed -n <span class="string">&#x27;&#123;1!G; h; $p&#125;&#x27;</span> data2.txt | cat -n</span><br><span class="line">    <span class="comment">#  1    This is the last line</span></span><br><span class="line">    <span class="comment">#  2    This is the second data line</span></span><br><span class="line">    <span class="comment">#  3    This is the first data line.</span></span><br><span class="line">    <span class="comment">#  4    This is the header line.</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>1!G</code> 第一行时不用将 hold space 的内容 append 过来, 不加的话会多一个空行</li>
<li><code>h</code> copy to hold space</li>
<li><code>$p</code> 最后一行的话 打印</li>
</ul>
<p>这尼玛也太精巧了把，我感觉我想不出来 （；￣ェ￣）</p>
<p>PS: 如果真要倒序，直接用 tac 即可， cat 的倒写</p>
<h3 id="Changing-the-Flow"><a href="#Changing-the-Flow" class="headerlink" title="Changing the Flow"></a>Changing the Flow</h3><p>默认情况下 sed 是从头到尾的处理的，但是他也提供了方法改变处理顺序，感觉像有点像结构化语言</p>
<h4 id="Branching"><a href="#Branching" class="headerlink" title="Branching"></a>Branching</h4><p>效果和叹号一样，只不过他是会根据 address 的标识批量操作而已</p>
<p>branch command: [address]b [label]</p>
<p>下面的例子中， sed 在做替换是根据 <code>2,3b</code> 跳过了第 2-3 行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data2.txt</span><br><span class="line"><span class="comment"># This is the header line.</span></span><br><span class="line"><span class="comment"># This is the first data line.</span></span><br><span class="line"><span class="comment"># This is the second data line.</span></span><br><span class="line"><span class="comment"># This is the last line.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;&#123;2,3b; s/This is/Is this/; s/line./test?/&#125;&#x27;</span> data2.txt</span><br><span class="line"><span class="comment"># Is this the header test?</span></span><br><span class="line"><span class="comment"># This is the first data line.</span></span><br><span class="line"><span class="comment"># This is the second data line.</span></span><br><span class="line"><span class="comment"># Is this the last test?</span></span><br></pre></td></tr></table></figure>

<p>label 的作用是设置一个跳点，本来看了第一个例子我还想说它很像 if condition 但是感觉上说他是 goto 还更恰当一点。 label 最长为 7 个字符</p>
<p>下面的例子，jump1 更像是 if, 如果 match 则跳过条件直接执行 :jump1 之后的命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data2.txt</span><br><span class="line"><span class="comment"># This is the header line.</span></span><br><span class="line"><span class="comment"># This is the first data line.</span></span><br><span class="line"><span class="comment"># This is the second data line.</span></span><br><span class="line"><span class="comment"># This is the last line.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;&#123;/first/b jump1; s/This is the/No jump on/</span></span><br><span class="line"><span class="string">&gt; :jump1</span></span><br><span class="line"><span class="string">&gt; s/This is the/Jump here on/&#125;&#x27;</span> data2.txt</span><br><span class="line"><span class="comment"># No jump on header line.</span></span><br><span class="line"><span class="comment"># Jump here on first data line.</span></span><br><span class="line"><span class="comment"># No jump on second data line.</span></span><br><span class="line"><span class="comment"># No jump on last line.</span></span><br></pre></td></tr></table></figure>

<p>当 b 匹配的内容出现，则跳过第一个替换，直接执行后一个。更骚的操作是下面的这个循环替换逗号的操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This, is, a, test, to, remove, commas.&quot;</span> | sed -n <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&gt; :start</span></span><br><span class="line"><span class="string">&gt; s/,//1p</span></span><br><span class="line"><span class="string">&gt; b start</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span></span><br><span class="line"><span class="comment"># This is, a, test, to, remove, commas.</span></span><br><span class="line"><span class="comment"># This is a, test, to, remove, commas.</span></span><br><span class="line"><span class="comment"># This is a test, to, remove, commas.</span></span><br><span class="line"><span class="comment"># This is a test to, remove, commas.</span></span><br><span class="line"><span class="comment"># This is a test to remove, commas.</span></span><br><span class="line"><span class="comment"># This is a test to remove commas.</span></span><br><span class="line"><span class="comment"># ^C</span></span><br></pre></td></tr></table></figure>

<p>这个例子大致意思我是懂得，但是不清楚为什么执行操作的时候文本一直有效，不会被冲掉吗？可能要深入了解一下 pattern space 才能直到原因。这个cmd 需要 Ctrl + C 才能强制结束, 下面是改进版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This, is, a, test, to, remove, commas.&quot;</span> | sed -n <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">:start</span></span><br><span class="line"><span class="string">s/,//1p</span></span><br><span class="line"><span class="string">/,/b start</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># This is, a, test, to, remove, commas.</span></span><br><span class="line"><span class="comment"># This is a, test, to, remove, commas.</span></span><br><span class="line"><span class="comment"># This is a test, to, remove, commas.</span></span><br><span class="line"><span class="comment"># This is a test to, remove, commas.</span></span><br><span class="line"><span class="comment"># This is a test to remove, commas.</span></span><br><span class="line"><span class="comment"># This is a test to remove commas.</span></span><br></pre></td></tr></table></figure>

<h4 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h4><p>语法和 branch 很像 <code>[address]t [label]</code></p>
<p>test command provide a cheap way to perform a basic if-then statement on the text in the data stream</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data2.txt</span><br><span class="line"><span class="comment"># This is the header line.</span></span><br><span class="line"><span class="comment"># This is the first data line.</span></span><br><span class="line"><span class="comment"># This is the second data line.</span></span><br><span class="line"><span class="comment"># This is the last line.</span></span><br><span class="line">sed <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&gt; s/first/matched/</span></span><br><span class="line"><span class="string">&gt; t</span></span><br><span class="line"><span class="string">&gt; s/This is the/No match on/</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span> data2.txt</span><br><span class="line"><span class="comment"># No match on header line.</span></span><br><span class="line"><span class="comment"># This is the matched data line.</span></span><br><span class="line"><span class="comment"># No match on second data line.</span></span><br><span class="line"><span class="comment"># No match on last line.</span></span><br></pre></td></tr></table></figure>

<p>如果 t 前面的 cmd 匹配则执行，不然直接执行后一个命令。之前循环替换逗号的例子用 t 的形式</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This, is, a, test, to, remove, commas.&quot;</span> | sed -n <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">:start</span></span><br><span class="line"><span class="string">s/,//1p</span></span><br><span class="line"><span class="string">t start</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># This is, a, test, to, remove, commas.</span></span><br><span class="line"><span class="comment"># This is a, test, to, remove, commas.</span></span><br><span class="line"><span class="comment"># This is a test, to, remove, commas.</span></span><br><span class="line"><span class="comment"># This is a test to, remove, commas.</span></span><br><span class="line"><span class="comment"># This is a test to remove, commas.</span></span><br><span class="line"><span class="comment"># This is a test to remove commas.</span></span><br></pre></td></tr></table></figure>

<h3 id="Replacing-via-a-Pattern"><a href="#Replacing-via-a-Pattern" class="headerlink" title="Replacing via a Pattern"></a>Replacing via a Pattern</h3><p>通过 sed 做精确替换还是简单的, 比如下面的例子要在 cat 外面添加双引号</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The cat sleeps in his hat.&quot;</span> | sed <span class="string">&#x27;s/cat/&quot;cat&quot;/&#x27;</span></span><br><span class="line"><span class="comment"># The &quot;cat&quot; sleeps in his hat.</span></span><br></pre></td></tr></table></figure>

<p>但是如果你想要在所有 .at 外面加双引号可能有会遇到问题了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The cat sleeps in his hat.&quot;</span> | sed <span class="string">&#x27;s/.at/&quot;.at&quot;/g&#x27;</span></span><br><span class="line"><span class="comment"># The &quot;.at&quot; sleeps in his &quot;.at&quot;.</span></span><br></pre></td></tr></table></figure>

<h4 id="Using-the-ampersand"><a href="#Using-the-ampersand" class="headerlink" title="Using the ampersand"></a>Using the ampersand</h4><p>为了解决上面的问题，sed 提供了 <code>&amp;</code> 符号指代匹配的字符</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The cat sleeps in his hat.&quot;</span> | sed <span class="string">&#x27;s/.at/&quot;&amp;&quot;/g&#x27;</span></span><br><span class="line"><span class="comment"># The &quot;cat&quot; sleeps in his &quot;hat&quot;.</span></span><br></pre></td></tr></table></figure>

<h4 id="Replacing-individual-words"><a href="#Replacing-individual-words" class="headerlink" title="Replacing individual words"></a>Replacing individual words</h4><p>如果你只想替换一部分内容，说人话就是支持 group 的模式减少 typing</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This System Administractor manual&quot;</span> | sed <span class="string">&#x27;</span></span><br><span class="line"><span class="string">s/\(System\) Administractor/\1 User/&#x27;</span></span><br><span class="line"><span class="comment"># This System User manual</span></span><br></pre></td></tr></table></figure>

<ul>
<li>group 需要用反斜线</li>
<li>指代 group 用反斜线加数子</li>
</ul>
<p>下面的例子中我们用原句中的一部分代替原有部分</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;That furry cat is pretty&quot;</span> | sed <span class="string">&#x27;s/furry \(.at\)/\1/&#x27;</span></span><br><span class="line"><span class="comment"># That cat is pretty</span></span><br></pre></td></tr></table></figure>

<p>这个技巧在插入值的时候很好用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1234567&quot;</span> | sed <span class="string">&#x27;&#123;                                    </span></span><br><span class="line"><span class="string">:start</span></span><br><span class="line"><span class="string">s/\(.*[0-9]\)\([0-9]\&#123;3\&#125;\)/\1,\2/</span></span><br><span class="line"><span class="string">t start</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 1,234,567</span></span><br></pre></td></tr></table></figure>

<p>有两个分组</p>
<ul>
<li>.*[0-9]</li>
<li>[0-9]{3}</li>
</ul>
<p>第一次替换结果为 1234,567，第二次 1,234,567</p>
<h3 id="Placing-sed-Commands-in-Script"><a href="#Placing-sed-Commands-in-Script" class="headerlink" title="Placing sed Commands in Script"></a>Placing sed Commands in Script</h3><p>展示一些脚本中使用 sed 的技巧</p>
<h4 id="Using-wrappers"><a href="#Using-wrappers" class="headerlink" title="Using wrappers"></a>Using wrappers</h4><p>每次使用 sed 的时候现打会很累赘，你可以将他们写到脚本中并调用</p>
<p>下面的例子中，我们将之前实现的 reverse 功能通过脚本调用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat reverse.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Shell wrapper for sed editor script.</span></span><br><span class="line"><span class="comment">#           to reverse text file lines</span></span><br><span class="line">sed -n <span class="string">&#x27;&#123;1!G; h; $p&#125;&#x27;</span> <span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">cat data2.txt</span><br><span class="line"><span class="comment"># This is the header line.</span></span><br><span class="line"><span class="comment"># This is the first data line.</span></span><br><span class="line"><span class="comment"># This is the second data line.</span></span><br><span class="line"><span class="comment"># This is the last line.</span></span><br><span class="line"></span><br><span class="line">./reverse.sh data2.txt</span><br><span class="line"><span class="comment"># This is the last line.</span></span><br><span class="line"><span class="comment"># This is the second data line.</span></span><br><span class="line"><span class="comment"># This is the first data line.</span></span><br><span class="line"><span class="comment"># This is the header line.</span></span><br></pre></td></tr></table></figure>

<h4 id="Redirecting-sed-output"><a href="#Redirecting-sed-output" class="headerlink" title="Redirecting sed output"></a>Redirecting sed output</h4><p>sed 操作后的输出可以用 $() 包裹起来作为结果引用</p>
<p>下面的例子中我们计算斐波那契额数列并用之前写的 sed 表达式为它加上逗号分割</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat fact.sh                        </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"><span class="comment"># Add commas to number in factorial answer</span></span><br><span class="line"></span><br><span class="line">factorial=1</span><br><span class="line">counter=1</span><br><span class="line">number=<span class="variable">$1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$counter</span> -le <span class="variable">$number</span> ]</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">    factorial=$[ <span class="variable">$factorial</span> * <span class="variable">$counter</span> ]</span><br><span class="line">    counter=$[ <span class="variable">$counter</span> + 1 ]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">result=$(<span class="built_in">echo</span> <span class="variable">$factorial</span> | sed <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">:start</span></span><br><span class="line"><span class="string">s/\(.*[0-9]\)\([0-9]\&#123;3\&#125;\)/\1,\2/</span></span><br><span class="line"><span class="string">t start</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The result is <span class="variable">$result</span>&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">./fact.sh 20      </span><br><span class="line"><span class="comment"># The result is 2,432,902,008,176,640,000</span></span><br></pre></td></tr></table></figure>

<h3 id="Creating-sed-Utilities"><a href="#Creating-sed-Utilities" class="headerlink" title="Creating sed Utilities"></a>Creating sed Utilities</h3><p>分享一些数据处理函数</p>
<h4 id="Spacing-with-double-lines"><a href="#Spacing-with-double-lines" class="headerlink" title="Spacing with double lines"></a>Spacing with double lines</h4><p>为文本中的每一行后面新家一个空行, 如果最后一行不想加空格，可以用叹号取反</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;G&#x27;</span> data2.txt  | cat -n</span><br><span class="line">    <span class="comment">#  1    This is the header line.</span></span><br><span class="line">    <span class="comment">#  2</span></span><br><span class="line">    <span class="comment">#  3    This is the first data line.</span></span><br><span class="line">    <span class="comment">#  4</span></span><br><span class="line">    <span class="comment">#  5    This is the second data line.</span></span><br><span class="line">    <span class="comment">#  6</span></span><br><span class="line">    <span class="comment">#  7    This is the last line.</span></span><br><span class="line">    <span class="comment">#  8</span></span><br><span class="line"> sed <span class="string">&#x27;$!G&#x27;</span> data2.txt  | cat -n</span><br><span class="line">    <span class="comment">#  1    This is the header line.</span></span><br><span class="line">    <span class="comment">#  2</span></span><br><span class="line">    <span class="comment">#  3    This is the first data line.</span></span><br><span class="line">    <span class="comment">#  4</span></span><br><span class="line">    <span class="comment">#  5    This is the second data line.</span></span><br><span class="line">    <span class="comment">#  6</span></span><br><span class="line">    <span class="comment">#  7    This is the last line.</span></span><br></pre></td></tr></table></figure>

<h4 id="Spacing-files-that-may-have-blanks"><a href="#Spacing-files-that-may-have-blanks" class="headerlink" title="Spacing files that may have blanks"></a>Spacing files that may have blanks</h4><p>如果你的文件中已经存在空行了，那么用上面的技巧，你的文件中可能出现多个空行，怎么保证空行数只有一个呢</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;$!G&#x27;</span> data6.txt | cat -n</span><br><span class="line">    <span class="comment">#  1    This is line number1.</span></span><br><span class="line">    <span class="comment">#  2</span></span><br><span class="line">    <span class="comment">#  3    This is line number2.</span></span><br><span class="line">    <span class="comment">#  4</span></span><br><span class="line">    <span class="comment">#  5</span></span><br><span class="line">    <span class="comment">#  6</span></span><br><span class="line">    <span class="comment">#  7    This is line number3.</span></span><br><span class="line">    <span class="comment">#  8</span></span><br><span class="line">    <span class="comment">#  9    This is line number4.</span></span><br></pre></td></tr></table></figure>

<p>解决方案，现将所有空格去了，再做加空行的操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;/^$/d; $!G;&#x27;</span> data6.txt  | cat  -A</span><br><span class="line"><span class="comment"># This is line number 1.$</span></span><br><span class="line"><span class="comment"># $</span></span><br><span class="line"><span class="comment"># This is line number 2.$</span></span><br><span class="line"><span class="comment"># $</span></span><br><span class="line"><span class="comment"># This is line number 3.$</span></span><br><span class="line"><span class="comment"># $</span></span><br><span class="line"><span class="comment"># This is line number 4.$</span></span><br></pre></td></tr></table></figure>

<p>PS: 使用 <code>i\</code> 的语法添加空行会带有一个空格，推荐使用 <code>1G</code> 的方式</p>
<h4 id="Numbering-lines-in-a-file"><a href="#Numbering-lines-in-a-file" class="headerlink" title="Numbering lines in a file"></a>Numbering lines in a file</h4><p>19 章时我们介绍过用 <code>=</code> 显示行号的操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;=&#x27;</span> data2.txt </span><br><span class="line">1</span><br><span class="line">This is the header line.</span><br><span class="line">2</span><br><span class="line">This is the first data line.</span><br><span class="line">3</span><br><span class="line">This is the second data line.</span><br><span class="line">4</span><br><span class="line">This is the last line.</span><br></pre></td></tr></table></figure>

<p>这种格式有点奇怪，更友好的方式应该时行号和字串在一行中，这里可以用 N</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;=&#x27;</span> data2.txt | sed <span class="string">&#x27;N; s/\n/ /&#x27;</span></span><br><span class="line"><span class="comment"># 1 This is the header line.</span></span><br><span class="line"><span class="comment"># 2 This is the first data line.</span></span><br><span class="line"><span class="comment"># 3 This is the second data line.</span></span><br><span class="line"><span class="comment"># 4 This is the last line.</span></span><br></pre></td></tr></table></figure>

<p>这中方式最大的好处是，没有加行额外的空格，一些其他的工具，比如 nl, cat -n 会在结果前面添加一些空格</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nl data2.txt</span><br><span class="line">    <span class="comment">#  1    This is the header line.</span></span><br><span class="line">    <span class="comment">#  2    This is the first data line.</span></span><br><span class="line">    <span class="comment">#  3    This is the second data line.</span></span><br><span class="line">    <span class="comment">#  4    This is the last line.</span></span><br><span class="line"></span><br><span class="line">cat -n data2.txt</span><br><span class="line">    <span class="comment">#  1    This is the header line.</span></span><br><span class="line">    <span class="comment">#  2    This is the first data line.</span></span><br><span class="line">    <span class="comment">#  3    This is the second data line.</span></span><br><span class="line">    <span class="comment">#  4    This is the last line.</span></span><br></pre></td></tr></table></figure>

<h4 id="Printing-last-lines"><a href="#Printing-last-lines" class="headerlink" title="Printing last lines"></a>Printing last lines</h4><p>只打印最后一行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -n <span class="string">&#x27;$p&#x27;</span> data2.txt</span><br><span class="line"><span class="comment"># This is the last line.</span></span><br></pre></td></tr></table></figure>

<p>使用类似的技巧，你可以显示末尾几行数据，这种做法叫做 rolling window</p>
<p>rolling window 中我们结合使用 N，将整块的文本存储到 pattern space 中</p>
<p>下面的例子中我们将用 sed 显示文本最后10行的内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data7.txt</span><br><span class="line"><span class="comment"># This is line 1.</span></span><br><span class="line"><span class="comment"># This is line 2.</span></span><br><span class="line"><span class="comment"># This is line 3.</span></span><br><span class="line"><span class="comment"># This is line 4.</span></span><br><span class="line"><span class="comment"># This is line 5.</span></span><br><span class="line"><span class="comment"># This is line 6.</span></span><br><span class="line"><span class="comment"># This is line 7.</span></span><br><span class="line"><span class="comment"># This is line 8.</span></span><br><span class="line"><span class="comment"># This is line 9.</span></span><br><span class="line"><span class="comment"># This is line 10.</span></span><br><span class="line"><span class="comment"># This is line 11.</span></span><br><span class="line"><span class="comment"># This is line 12.</span></span><br><span class="line"><span class="comment"># This is line 13.</span></span><br><span class="line"><span class="comment"># This is line 14.</span></span><br><span class="line"><span class="comment"># This is line 15.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">:start</span></span><br><span class="line"><span class="string">$q; N; 11,$D</span></span><br><span class="line"><span class="string">b start</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> data7.txt</span><br><span class="line"><span class="comment"># This is line 6.</span></span><br><span class="line"><span class="comment"># This is line 7.</span></span><br><span class="line"><span class="comment"># This is line 8.</span></span><br><span class="line"><span class="comment"># This is line 9.</span></span><br><span class="line"><span class="comment"># This is line 10.</span></span><br><span class="line"><span class="comment"># This is line 11.</span></span><br><span class="line"><span class="comment"># This is line 12.</span></span><br><span class="line"><span class="comment"># This is line 13.</span></span><br><span class="line"><span class="comment"># This is line 14.</span></span><br><span class="line"><span class="comment"># This is line 15.</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>$q</code> 退出</li>
<li><code>N</code> 将下一行 append 到 pattern space</li>
<li><code>11,$D</code> 如果当前为 10 行以后，删除第一行</li>
</ul>
<h4 id="Deleting-lines-1"><a href="#Deleting-lines-1" class="headerlink" title="Deleting lines"></a>Deleting lines</h4><p>这节将介绍一些快速移除空白行的操作</p>
<h5 id="Deleting-consecutive-blank-lines"><a href="#Deleting-consecutive-blank-lines" class="headerlink" title="Deleting consecutive blank lines"></a>Deleting consecutive blank lines</h5><p>删除多余空行，这里用了另外一种解决方案。这里的规则是，起始于任何非空行，终止于空行的内容都不会被删除</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat -n data8.txt   </span><br><span class="line">    <span class="comment">#  1  This is the header line.</span></span><br><span class="line">    <span class="comment">#  2</span></span><br><span class="line">    <span class="comment">#  3</span></span><br><span class="line">    <span class="comment">#  4  This is the first data line.</span></span><br><span class="line">    <span class="comment">#  5</span></span><br><span class="line">    <span class="comment">#  6  This is the second data line.</span></span><br><span class="line">    <span class="comment">#  7</span></span><br><span class="line">    <span class="comment">#  8</span></span><br><span class="line">    <span class="comment">#  9  This is the last line.</span></span><br><span class="line">    <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;/./,/^$/!d&#x27;</span> data8.txt | cat -n</span><br><span class="line">    <span class="comment">#  1  This is the header line.</span></span><br><span class="line">    <span class="comment">#  2</span></span><br><span class="line">    <span class="comment">#  3  This is the first data line.</span></span><br><span class="line">    <span class="comment">#  4</span></span><br><span class="line">    <span class="comment">#  5  This is the second data line.</span></span><br><span class="line">    <span class="comment">#  6</span></span><br><span class="line">    <span class="comment">#  7  This is the last line.</span></span><br><span class="line">    <span class="comment">#  8</span></span><br></pre></td></tr></table></figure>

<h5 id="Deleting-leading-blank-lines"><a href="#Deleting-leading-blank-lines" class="headerlink" title="Deleting leading blank lines"></a>Deleting leading blank lines</h5><p>删除开头部分的空行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat -n data9.txt </span><br><span class="line">    <span class="comment">#  1</span></span><br><span class="line">    <span class="comment">#  2</span></span><br><span class="line">    <span class="comment">#  3  This is line one.</span></span><br><span class="line">    <span class="comment">#  4</span></span><br><span class="line">    <span class="comment">#  5  This is line two.</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;/./,$!d&#x27;</span> data9.txt | cat -n</span><br><span class="line">    <span class="comment">#  1  This is line one.</span></span><br><span class="line">    <span class="comment">#  2</span></span><br><span class="line">    <span class="comment">#  3  This is line two.</span></span><br></pre></td></tr></table></figure>

<p>任何有内容的行开始，到结束不删除</p>
<h5 id="Deleting-trailing-blank-lines"><a href="#Deleting-trailing-blank-lines" class="headerlink" title="Deleting trailing blank lines"></a>Deleting trailing blank lines</h5><p>删除结尾部分的空行要比删除开头部分的空行麻烦一点，需要一些技巧和循环</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat -n data10.txt</span><br><span class="line">    <span class="comment">#  1    This is the first line.</span></span><br><span class="line">    <span class="comment">#  2    This is the second line.</span></span><br><span class="line">    <span class="comment">#  3</span></span><br><span class="line">    <span class="comment">#  4</span></span><br><span class="line">    <span class="comment">#  5</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">:start</span></span><br><span class="line"><span class="string">/^\n*$/&#123;$d; N; b start&#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> data10.txt | cat -n</span><br><span class="line">    <span class="comment">#  1    This is the first line.</span></span><br><span class="line">    <span class="comment">#  2    This is the second line.</span></span><br></pre></td></tr></table></figure>

<p>匹配任何只包含换行的 line, 如果是最后一行，则删除，如果不是就再次执行</p>
<h4 id="Removing-HTML-tags"><a href="#Removing-HTML-tags" class="headerlink" title="Removing HTML tags"></a>Removing HTML tags</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data11.txt</span><br><span class="line"><span class="comment"># &lt;html&gt;</span></span><br><span class="line"><span class="comment"># &lt;head&gt;</span></span><br><span class="line"><span class="comment"># &lt;title&gt;This is the page title&lt;/title&gt;</span></span><br><span class="line"><span class="comment"># &lt;/head&gt;</span></span><br><span class="line"><span class="comment"># &lt;body&gt;</span></span><br><span class="line"><span class="comment"># &lt;p&gt;</span></span><br><span class="line"><span class="comment"># This is the &lt;b&gt;first&lt;/b&gt; line in the Web page.</span></span><br><span class="line"><span class="comment"># This should provide some &lt;i&gt;useful&lt;/i&gt;</span></span><br><span class="line"><span class="comment"># information to use in our sed script.</span></span><br><span class="line"><span class="comment"># &lt;/p&gt;</span></span><br><span class="line"><span class="comment"># &lt;/body&gt;</span></span><br><span class="line"><span class="comment"># &lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果直接使用 <code>s/&lt;.*&gt;//g</code> 会出问题，一些文本类似 <code>&lt;b&gt;abc&lt;/b&gt;</code> 也会被删除</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/&lt;.*&gt;//g&#x27;</span> data11.txt | cat -n </span><br><span class="line">    <span class="comment">#  1</span></span><br><span class="line">    <span class="comment">#  2   </span></span><br><span class="line">    <span class="comment">#  3    </span></span><br><span class="line">    <span class="comment">#  4   </span></span><br><span class="line">    <span class="comment">#  5   </span></span><br><span class="line">    <span class="comment">#  6    </span></span><br><span class="line">    <span class="comment">#  7     This is the  line in the Web page.</span></span><br><span class="line">    <span class="comment">#  8     This should provide some </span></span><br><span class="line">    <span class="comment">#  9     information to use in our sed script.</span></span><br><span class="line">    <span class="comment"># 10    </span></span><br><span class="line">    <span class="comment"># 11   </span></span><br><span class="line">    <span class="comment"># 12</span></span><br></pre></td></tr></table></figure>

<p>这个是由于 sed 将内嵌的 <code>&gt;</code> 识别为 <code>.*</code> 的一部分了，可以使用 <code>s/&lt;[^&gt;]*&gt;//g</code> 修复, 再结合删除空格的语法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/&lt;[^&gt;]*&gt;//g; /^$/d&#x27;</span> data11.txt             </span><br><span class="line"><span class="comment"># This is the page title</span></span><br><span class="line"><span class="comment"># This is the first line in the Web page.</span></span><br><span class="line"><span class="comment"># This should provide some useful</span></span><br><span class="line"><span class="comment"># information to use in our sed script.</span></span><br></pre></td></tr></table></figure>

<h2 id="Chapter-22-Advanced-gawk"><a href="#Chapter-22-Advanced-gawk" class="headerlink" title="Chapter 22: Advanced gawk"></a>Chapter 22: Advanced gawk</h2><h3 id="Using-Variables"><a href="#Using-Variables" class="headerlink" title="Using Variables"></a>Using Variables</h3><p>gawk 支持两种不同类型的变量</p>
<ul>
<li>Built-in variables</li>
<li>User-defined variables</li>
</ul>
<h4 id="Built-in-variables"><a href="#Built-in-variables" class="headerlink" title="Built-in variables"></a>Built-in variables</h4><p>这一节将展示 gawk 自带变量的使用办法</p>
<h5 id="The-field-and-record-separator-variables"><a href="#The-field-and-record-separator-variables" class="headerlink" title="The field and record separator variables"></a>The field and record separator variables</h5><p>The gawk Data Field and REcord Variables</p>
<table>
<thead>
<tr>
<th align="left">Variable</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">FIELDWIDTHS</td>
<td align="left">A space-separated list of numbers defining the exact width(in spaces) of each data field</td>
</tr>
<tr>
<td align="left">FS</td>
<td align="left">Input field separator character</td>
</tr>
<tr>
<td align="left">RS</td>
<td align="left">Input record separator character</td>
</tr>
<tr>
<td align="left">OFS</td>
<td align="left">Output field separator character</td>
</tr>
<tr>
<td align="left">ORS</td>
<td align="left">Output record separator character</td>
</tr>
</tbody></table>
<p>下面的例子展示了 FS 的使用方法, 通过 FS 指定分割符，只输出每行前三组数据</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data1</span><br><span class="line"><span class="comment"># data11,data12,data13,data14,data15</span></span><br><span class="line"><span class="comment"># data21,data22,data23,data24,data25</span></span><br><span class="line"><span class="comment"># data31,data32,data33,data34,data35</span></span><br><span class="line"></span><br><span class="line">gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125; &#123;print $1, $2, $3&#125;&#x27;</span> data1</span><br><span class="line"><span class="comment"># data11 data12 data13</span></span><br><span class="line"><span class="comment"># data21 data22 data23</span></span><br><span class="line"><span class="comment"># data31 data32 data33</span></span><br></pre></td></tr></table></figure>

<p>OFS 指定输出时候的分割符</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;; OFS=&quot;--&quot;&#125; &#123;print $1, $2, $3&#125;&#x27;</span> data1</span><br><span class="line"><span class="comment"># data11--data12--data13</span></span><br><span class="line"><span class="comment"># data21--data22--data23</span></span><br><span class="line"><span class="comment"># data31--data32--data33</span></span><br></pre></td></tr></table></figure>

<p>有些数据并不是用固定的分割符做刷剧划分的，而是用的位置，这个时候你就要用到 FIELDWIDTHS 了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data1b                                                               </span><br><span class="line"><span class="comment"># 1005.3247596.37</span></span><br><span class="line"><span class="comment"># 115-2.349194.00</span></span><br><span class="line"><span class="comment"># 05810.1298100.1</span></span><br><span class="line"></span><br><span class="line">gawk <span class="string">&#x27;BEGIN&#123;FIELDWIDTHS=&quot;3 5 2 5&quot;&#125; &#123;print $1, $2, $3 $4&#125;&#x27;</span> data1b</span><br><span class="line"><span class="comment"># 100 5.324 7596.37</span></span><br><span class="line"><span class="comment"># 115 -2.34 9194.00</span></span><br><span class="line"><span class="comment"># 058 10.12 98100.1</span></span><br></pre></td></tr></table></figure>

<p>PS: FIEDLWIDTHS 必须是常数，变量是不支持的</p>
<p>RS/ORS 用于行数据，默认的 RS 即为换行符</p>
<p>下面是一个解析电话号码的例子，我们想要解析出用户和对应的电话号码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data2    </span><br><span class="line"><span class="comment"># Riley Mullen</span></span><br><span class="line"><span class="comment"># 123 Main Street</span></span><br><span class="line"><span class="comment"># Chicago, IL  60601</span></span><br><span class="line"><span class="comment"># (312)555-1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Frank Williams</span></span><br><span class="line"><span class="comment"># 456 Oak Street</span></span><br><span class="line"><span class="comment"># Indianapolis, IN  46201</span></span><br><span class="line"><span class="comment"># (317)555-9876</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Haley Snell</span></span><br><span class="line"><span class="comment"># 4231 Elm Street</span></span><br><span class="line"><span class="comment"># Detroit, MI 48201</span></span><br><span class="line"><span class="comment"># (313)555-4938</span></span><br></pre></td></tr></table></figure>

<p>如果我们还是用默认的换行符，则不能解析。我们可以将 <code>\n</code> 设置为字段分割符，将空行作为行分割符</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;\n&quot;; RS=&quot;&quot;&#125; &#123;print $1, $4&#125;&#x27;</span> data2 </span><br><span class="line"><span class="comment"># Riley Mullen (312)555-1234</span></span><br><span class="line"><span class="comment"># Frank Williams (317)555-9876</span></span><br><span class="line"><span class="comment"># Haley Snell (313)555-4938</span></span><br></pre></td></tr></table></figure>

<h5 id="Data-variables"><a href="#Data-variables" class="headerlink" title="Data variables"></a>Data variables</h5><p>More gawk Built-In Variables</p>
<table>
<thead>
<tr>
<th align="left">Variable</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ARGC</td>
<td align="left">The number of command line parameters present</td>
</tr>
<tr>
<td align="left">ARGIND</td>
<td align="left">The index in ARGV of the current file being proecssed</td>
</tr>
<tr>
<td align="left">ARGV</td>
<td align="left">An array of command line parameters</td>
</tr>
<tr>
<td align="left">CONVFMT</td>
<td align="left">The conversion format for numbers(see the printf statement), with a default value of %.6 g</td>
</tr>
<tr>
<td align="left">ENVIRON</td>
<td align="left">An associative array of the current shell environment variables and their values</td>
</tr>
<tr>
<td align="left">FNR</td>
<td align="left">The current record number in the data file</td>
</tr>
<tr>
<td align="left">NF</td>
<td align="left">The total number of data fields in the data file</td>
</tr>
<tr>
<td align="left">NR</td>
<td align="left">The number of input records processed</td>
</tr>
</tbody></table>
<p>其他懒得打了</p>
<p>ARGC, ARGV 和之前 shell 变量概念很想，不过 ARGV 是不会将 script 统计在内的，这个有点不一样</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;print ARGC, ARGV[0], ARGV[1]&#125;&#x27;</span> data1</span><br><span class="line"><span class="comment"># 2 gawk data1</span></span><br></pre></td></tr></table></figure>

<p>PS: 表达式也有点不一样，变量前不需要加 $</p>
<p>获取环境变量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;                                          </span></span><br><span class="line"><span class="string">quote&gt; BEGIN&#123;</span></span><br><span class="line"><span class="string">quote&gt; print ENVIRON[&quot;HOME&quot;]                    </span></span><br><span class="line"><span class="string">quote&gt; print ENVIRON[&quot;PATH&quot;]                    </span></span><br><span class="line"><span class="string">quote&gt; &#125;&#x27;</span></span><br><span class="line"><span class="comment"># /Users/i306454</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>FNR, NF, NR 可以标记 field 的位置。 NF 可以让你在不清楚 field 数量的情况下处理最后一个 field</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;; OFS=&quot;--&quot;&#125; &#123;print $1,$NF&#125;&#x27;</span> /etc/passwd</span><br><span class="line"><span class="comment"># _nearbyd--/usr/bin/false</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">cat /etc/passwd | tail -3                                </span><br><span class="line"><span class="comment"># _coreml:*:280:280:CoreML Services:/var/empty:/usr/bin/false</span></span><br><span class="line"><span class="comment"># _trustd:*:282:282:trustd:/var/empty:/usr/bin/false</span></span><br><span class="line"><span class="comment"># _oahd:*:441:441:OAH Daemon:/var/empty:/usr/bin/false</span></span><br></pre></td></tr></table></figure>

<p>FNR 表示当前 field 的序号. 下面的例子中，我们传入两个 data file, 每个文件处理完后 FNR 会重制</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125;&#123;print $1, &quot;FNR=&quot;FNR&#125;&#x27;</span> data1 data1    </span><br><span class="line"><span class="comment"># data11 FNR=1</span></span><br><span class="line"><span class="comment"># data21 FNR=2</span></span><br><span class="line"><span class="comment"># data31 FNR=3</span></span><br><span class="line"><span class="comment"># data11 FNR=1</span></span><br><span class="line"><span class="comment"># data21 FNR=2</span></span><br><span class="line"><span class="comment"># data31 FNR=3</span></span><br></pre></td></tr></table></figure>

<p>NR 则是将所有的传入数据一起统计的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125;                            </span></span><br><span class="line"><span class="string">quote&gt; &#123;print $1, &quot;FNR=&quot;FNR, &quot;NR=&quot;NR&#125;</span></span><br><span class="line"><span class="string">quote&gt; END&#123;print &quot;There were&quot;, NR, &quot;records processed&quot;&#125;&#x27;</span> data1 data1</span><br><span class="line"><span class="comment"># data11 FNR=1 NR=1</span></span><br><span class="line"><span class="comment"># data21 FNR=2 NR=2</span></span><br><span class="line"><span class="comment"># data31 FNR=3 NR=3</span></span><br><span class="line"><span class="comment"># data11 FNR=1 NR=4</span></span><br><span class="line"><span class="comment"># data21 FNR=2 NR=5</span></span><br><span class="line"><span class="comment"># data31 FNR=3 NR=6</span></span><br><span class="line"><span class="comment"># There were 6 records processed</span></span><br></pre></td></tr></table></figure>

<p>单个文件处理时 FNR 和 NR 是一致的，多个文件处理时不一样</p>
<h4 id="User-defined-variables"><a href="#User-defined-variables" class="headerlink" title="User-defined variables"></a>User-defined variables</h4><p>gawk 自第一变量不能以数字开头，大小写敏感</p>
<h5 id="Assigning-variables-in-scripts"><a href="#Assigning-variables-in-scripts" class="headerlink" title="Assigning variables in scripts"></a>Assigning variables in scripts</h5><p>使用方式了 shell 中一致, 下面例子中我们将数字，字符赋值给变量，而且支持计算</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;             </span></span><br><span class="line"><span class="string">quote&gt; BEGIN&#123;</span></span><br><span class="line"><span class="string">quote&gt; testing=&quot;This is a test&quot;</span></span><br><span class="line"><span class="string">quote&gt; print testing                            </span></span><br><span class="line"><span class="string">quote&gt; testing=45        </span></span><br><span class="line"><span class="string">quote&gt; print testing                            </span></span><br><span class="line"><span class="string">quote&gt; &#125;&#x27;</span></span><br><span class="line"><span class="comment"># This is a test</span></span><br><span class="line"><span class="comment"># 45</span></span><br><span class="line">gawk <span class="string">&#x27;BEGIN&#123;x=4; x=x*2+3; print x&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 11</span></span><br></pre></td></tr></table></figure>

<h5 id="Assigning-variables-on-the-command-line"><a href="#Assigning-variables-on-the-command-line" class="headerlink" title="Assigning variables on the command line"></a>Assigning variables on the command line</h5><p>支持从终端接受参数的形式</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat script1               </span><br><span class="line"><span class="comment"># BEGIN&#123;FS=&quot;,&quot;&#125;</span></span><br><span class="line"><span class="comment"># &#123;print $n&#125;</span></span><br><span class="line"></span><br><span class="line">gawk -f script1 n=2 data1                                      </span><br><span class="line"><span class="comment"># data12</span></span><br><span class="line"><span class="comment"># data22</span></span><br><span class="line"><span class="comment"># data32</span></span><br><span class="line">gawk -f script1 n=3 data1</span><br><span class="line"><span class="comment"># data13</span></span><br><span class="line"><span class="comment"># data23</span></span><br><span class="line"><span class="comment"># data33</span></span><br></pre></td></tr></table></figure>

<p>开起来挺好的，但是这里有一个问题，终端传入的参数，BEGIN 里面是访问不到的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat script2                    </span><br><span class="line"><span class="comment"># BEGIN&#123;print &quot;The starting value is&quot;, n; FS=&quot;,&quot;&#125;</span></span><br><span class="line"><span class="comment"># &#123;print $n&#125;</span></span><br><span class="line"></span><br><span class="line">gawk -f script2 n=3 data1</span><br><span class="line"><span class="comment"># The starting value is </span></span><br><span class="line"><span class="comment"># data13</span></span><br><span class="line"><span class="comment"># data23</span></span><br><span class="line"><span class="comment"># data33</span></span><br></pre></td></tr></table></figure>

<p>你可以用 -v 参数解决这个问题</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk -v n=3 -f script2 data1</span><br><span class="line"><span class="comment"># The starting value is 3</span></span><br><span class="line"><span class="comment"># data13</span></span><br><span class="line"><span class="comment"># data23</span></span><br><span class="line"><span class="comment"># data33</span></span><br></pre></td></tr></table></figure>

<h3 id="Working-with-Arrays"><a href="#Working-with-Arrays" class="headerlink" title="Working with Arrays"></a>Working with Arrays</h3><p>和很多其他语言一样，gawk 提供了 array 相关的功能，叫做 associative arrays. 个人感觉可以叫做 map, 行为方式是根据键拿值</p>
<h4 id="Defining-array-variables"><a href="#Defining-array-variables" class="headerlink" title="Defining array variables"></a>Defining array variables</h4><p>格式 <code>var[index] = element</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;</span></span><br><span class="line"><span class="string">captial[&quot;Illinois&quot;] = &quot;Springfield&quot;</span></span><br><span class="line"><span class="string">print captial[&quot;Illinois&quot;]</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># Springfield</span></span><br></pre></td></tr></table></figure>

<p>对数字也有效</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;</span></span><br><span class="line"><span class="string">quote&gt; var[1] = 34                         </span></span><br><span class="line"><span class="string">quote&gt; var[2] = 3                          </span></span><br><span class="line"><span class="string">quote&gt; total = var[1] + var[2]</span></span><br><span class="line"><span class="string">quote&gt; print total                              </span></span><br><span class="line"><span class="string">quote&gt; &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 37</span></span><br></pre></td></tr></table></figure>

<h4 id="Iterating-through-array-variables"><a href="#Iterating-through-array-variables" class="headerlink" title="Iterating through array variables"></a>Iterating through array variables</h4><p>gawk 中遍历 map 的语法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (var <span class="keyword">in</span> arry)</span><br><span class="line">&#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历 map 的示例</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;</span></span><br><span class="line"><span class="string">quote&gt; var[&quot;a&quot;] = 1                        </span></span><br><span class="line"><span class="string">quote&gt; var[&quot;g&quot;] = 2</span></span><br><span class="line"><span class="string">quote&gt; var[&quot;m&quot;] = 3</span></span><br><span class="line"><span class="string">quote&gt; var[&quot;u&quot;] = 4</span></span><br><span class="line"><span class="string">quote&gt; for (test in var)            </span></span><br><span class="line"><span class="string">quote&gt; &#123;</span></span><br><span class="line"><span class="string">quote&gt; print &quot;index:&quot;, test, &quot; - value:&quot;, var[test]</span></span><br><span class="line"><span class="string">quote&gt; &#125;</span></span><br><span class="line"><span class="string">quote&gt; &#125;&#x27;</span></span><br><span class="line"><span class="comment"># index: u  - value: 4</span></span><br><span class="line"><span class="comment"># index: m  - value: 3</span></span><br><span class="line"><span class="comment"># index: a  - value: 1</span></span><br><span class="line"><span class="comment"># index: g  - value: 2</span></span><br></pre></td></tr></table></figure>

<p>背后的实现和 hash 一样，不保证顺序</p>
<h4 id="Deleting-array-variables"><a href="#Deleting-array-variables" class="headerlink" title="Deleting array variables"></a>Deleting array variables</h4><p>语法：delete array[index]</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;</span></span><br><span class="line"><span class="string">var[&quot;a&quot;] = 1</span></span><br><span class="line"><span class="string">var[&quot;g&quot;] = 2</span></span><br><span class="line"><span class="string">for (test in var)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    print &quot;Index:&quot;, test, &quot; - Value:&quot;, var[test]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">delete var[&quot;g&quot;]             </span></span><br><span class="line"><span class="string">print &quot;---&quot;                              </span></span><br><span class="line"><span class="string">for (test in var)   </span></span><br><span class="line"><span class="string">    print &quot;Index:&quot;, test, &quot; - Value:&quot;, var[test]</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># Index: a  - Value: 1</span></span><br><span class="line"><span class="comment"># Index: g  - Value: 2</span></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"><span class="comment"># Index: a  - Value: 1</span></span><br></pre></td></tr></table></figure>

<p>PS: 原来他也支持单行 for 循环吗。。。</p>
<h3 id="Using-Patterns"><a href="#Using-Patterns" class="headerlink" title="Using Patterns"></a>Using Patterns</h3><p>本章介绍如何定义 pattern</p>
<h4 id="Regular-expressions"><a href="#Regular-expressions" class="headerlink" title="Regular expressions"></a>Regular expressions</h4><p>gawk 同时支持 BRE 和 ERE，正则要保证出现在 program script 之前</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125; /11/&#123;print $1&#125;&#x27;</span> data1    </span><br><span class="line"><span class="comment"># data11</span></span><br><span class="line"></span><br><span class="line">gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125; /,d/&#123;print $1&#125;&#x27;</span> data1</span><br><span class="line"><span class="comment"># data11</span></span><br><span class="line"><span class="comment"># data21</span></span><br><span class="line"><span class="comment"># data31</span></span><br></pre></td></tr></table></figure>

<h4 id="The-matching-operator"><a href="#The-matching-operator" class="headerlink" title="The matching operator"></a>The matching operator</h4><p>gawk 使用波浪线(~)表示匹配的动作，格式 <code>$1 ~ /^data/</code>. 下面的例子中，我们适配所有出现在 $2 这个位置上的 field， 以 data2 开头的即使我们寻在的目标</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125; $2 ~ /^data2/&#123;print $0&#125;&#x27;</span> data1</span><br><span class="line"><span class="comment"># data21,data22,data23,data24,data25</span></span><br></pre></td></tr></table></figure>

<p>这个技巧在 gawk 中经常被用到, 下面是在 passwd 文件中寻找包含 root 关键字的行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk -F: <span class="string">&#x27;$1 ~/root/&#123;print $1, $NF&#125;&#x27;</span> /etc/passwd               </span><br><span class="line"><span class="comment"># root /bin/sh</span></span><br><span class="line"><span class="comment"># _cvmsroot /usr/bin/false</span></span><br></pre></td></tr></table></figure>

<p>这个操作还支持取反 <code>$1 !~ /expression/</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125; $2 !~ /^data2/&#123;print $0&#125;&#x27;</span> data1</span><br><span class="line"><span class="comment"># data11,data12,data13,data14,data15</span></span><br><span class="line"><span class="comment"># data31,data32,data33,data34,data35</span></span><br></pre></td></tr></table></figure>

<h4 id="Mathematical-expressions"><a href="#Mathematical-expressions" class="headerlink" title="Mathematical expressions"></a>Mathematical expressions</h4><p>gawk 还支持直接在表达式中做计算的, 下面的例子中我们统计 group 等于 0 的用户</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk -F: <span class="string">&#x27;$4 == 0&#123;print $1&#125;&#x27;</span> /etc/passwd           </span><br><span class="line"><span class="comment"># root</span></span><br></pre></td></tr></table></figure>

<p>支持的算数表达式</p>
<ul>
<li>x == y: Value x is equal to y</li>
<li>x &lt;= y</li>
<li>x &lt; y</li>
<li>x &gt;=y</li>
<li>x &gt; y</li>
</ul>
<p><code>==</code> 也可以用于文字表示式，但是表示的是精确匹配</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk -F, <span class="string">&#x27;$1 == &quot;data&quot;&#123;print $1&#125;&#x27;</span> data1  </span><br><span class="line"><span class="comment"># no match</span></span><br><span class="line">gawk -F, <span class="string">&#x27;$1 == &quot;data11&quot;&#123;print $1&#125;&#x27;</span> data1</span><br><span class="line"><span class="comment"># data11</span></span><br></pre></td></tr></table></figure>

<h3 id="Structured-Commands"><a href="#Structured-Commands" class="headerlink" title="Structured Commands"></a>Structured Commands</h3><p>结构化脚本</p>
<h4 id="The-if-statement"><a href="#The-if-statement" class="headerlink" title="The if statement"></a>The if statement</h4><p>支持 if-then-else 语法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">    statement1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行的格式也 OK</span></span><br><span class="line"><span class="keyword">if</span> (condition) statement1</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data4 </span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 13</span></span><br><span class="line"><span class="comment"># 50</span></span><br><span class="line"><span class="comment"># 34</span></span><br><span class="line">gawk <span class="string">&#x27;&#123;if ($1 &gt; 20) print $1&#125;&#x27;</span> data4               </span><br><span class="line"><span class="comment"># 50</span></span><br><span class="line"><span class="comment"># 34</span></span><br></pre></td></tr></table></figure>

<p>如果 if 有多个条件，需要用花括号包裹</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;&#123;                             </span></span><br><span class="line"><span class="string">quote&gt; if ($1 &gt; 20)             </span></span><br><span class="line"><span class="string">quote&gt; &#123; </span></span><br><span class="line"><span class="string">quote&gt; x = $1 * 2                              </span></span><br><span class="line"><span class="string">quote&gt; print x                                  </span></span><br><span class="line"><span class="string">quote&gt; &#125;</span></span><br><span class="line"><span class="string">quote&gt; &#125;&#x27;</span> data4</span><br><span class="line"><span class="comment"># 100</span></span><br><span class="line"><span class="comment"># 68</span></span><br></pre></td></tr></table></figure>

<p>带 else 的例子</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">quote&gt; if ($1 &gt; 20)             </span></span><br><span class="line"><span class="string">quote&gt; &#123;</span></span><br><span class="line"><span class="string">quote&gt; x = $1 * 2                              </span></span><br><span class="line"><span class="string">quote&gt; print x                                  </span></span><br><span class="line"><span class="string">quote&gt; &#125; else </span></span><br><span class="line"><span class="string">quote&gt; &#123;</span></span><br><span class="line"><span class="string">quote&gt; x = $1 / 2                              </span></span><br><span class="line"><span class="string">quote&gt; print x                                  </span></span><br><span class="line"><span class="string">quote&gt; &#125;&#125;&#x27;</span> data4</span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 2.5</span></span><br><span class="line"><span class="comment"># 6.5</span></span><br><span class="line"><span class="comment"># 100</span></span><br><span class="line"><span class="comment"># 68</span></span><br></pre></td></tr></table></figure>

<p>也可以写在一行, 格式 <code>if (condition) statement1; else statement2</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;&#123;if ($1 &gt; 20) print $1 * 2; else print $1 /2&#125;&#x27;</span> data4</span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 2.5</span></span><br><span class="line"><span class="comment"># 6.5</span></span><br><span class="line"><span class="comment"># 100</span></span><br><span class="line"><span class="comment"># 68</span></span><br></pre></td></tr></table></figure>

<h4 id="The-while-statement"><a href="#The-while-statement" class="headerlink" title="The while statement"></a>The while statement</h4><p>格式：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition)</span><br><span class="line">&#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data5 </span><br><span class="line"><span class="comment"># 130 120 135</span></span><br><span class="line"><span class="comment"># 160 113 140</span></span><br><span class="line"><span class="comment"># 145 170 215</span></span><br><span class="line"></span><br><span class="line">gawk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">total = 0</span></span><br><span class="line"><span class="string">i = 1</span></span><br><span class="line"><span class="string">while (i&lt;4)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">total += $i</span></span><br><span class="line"><span class="string">i++</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">avg = total / 3</span></span><br><span class="line"><span class="string">print &quot;Average:&quot;, avg</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> data5</span><br><span class="line"><span class="comment"># Average: 128.333</span></span><br><span class="line"><span class="comment"># Average: 137.667</span></span><br><span class="line"><span class="comment"># Average: 176.667</span></span><br></pre></td></tr></table></figure>

<p>支持 break，continue 打断循环</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">quote&gt; total = 0      </span></span><br><span class="line"><span class="string">quote&gt; i = 1   </span></span><br><span class="line"><span class="string">quote&gt; while (i&lt;4)                                  </span></span><br><span class="line"><span class="string">quote&gt; &#123;</span></span><br><span class="line"><span class="string">quote&gt;      total += $i    </span></span><br><span class="line"><span class="string">quote&gt;      if (i == 2)              </span></span><br><span class="line"><span class="string">quote&gt;           break             </span></span><br><span class="line"><span class="string">quote&gt;      i++     </span></span><br><span class="line"><span class="string">quote&gt; &#125;</span></span><br><span class="line"><span class="string">quote&gt; avg = total/2                                                          </span></span><br><span class="line"><span class="string">quote&gt; print &quot;The average of the first two data is:&quot; , avg</span></span><br><span class="line"><span class="string">quote&gt; &#125;&#x27;</span> data5</span><br><span class="line"><span class="comment"># The average of the first two data is: 125</span></span><br><span class="line"><span class="comment"># The average of the first two data is: 136.5</span></span><br><span class="line"><span class="comment"># The average of the first two data is: 157.5</span></span><br></pre></td></tr></table></figure>

<h4 id="The-do-while-statement"><a href="#The-do-while-statement" class="headerlink" title="The do-while statement"></a>The do-while statement</h4><p>格式：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    statemnets</span><br><span class="line">&#125; <span class="keyword">while</span> (condition)</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">quote&gt; total = 0      </span></span><br><span class="line"><span class="string">quote&gt; i = 1   </span></span><br><span class="line"><span class="string">quote&gt; do                          </span></span><br><span class="line"><span class="string">quote&gt; &#123;</span></span><br><span class="line"><span class="string">quote&gt; total += $i    </span></span><br><span class="line"><span class="string">quote&gt; i++     </span></span><br><span class="line"><span class="string">quote&gt; &#125; while (total &lt; 150)</span></span><br><span class="line"><span class="string">quote&gt; print total &#125;&#x27;</span> data5                     </span><br><span class="line"><span class="comment"># 250</span></span><br><span class="line"><span class="comment"># 160</span></span><br><span class="line"><span class="comment"># 315</span></span><br></pre></td></tr></table></figure>

<h4 id="The-for-statement"><a href="#The-for-statement" class="headerlink" title="The for statement"></a>The for statement</h4><p>格式 <code>for( variable assignment; condition; iteration process)</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">quote&gt; total = 0      </span></span><br><span class="line"><span class="string">quote&gt; for  (i=1; i&lt;4; i++)</span></span><br><span class="line"><span class="string">quote&gt; &#123;</span></span><br><span class="line"><span class="string">quote&gt; total += $i    </span></span><br><span class="line"><span class="string">quote&gt; &#125;</span></span><br><span class="line"><span class="string">quote&gt; avg = total /3                                                           </span></span><br><span class="line"><span class="string">quote&gt; print &quot;Average:&quot;, avg                    </span></span><br><span class="line"><span class="string">quote&gt; &#125;&#x27;</span> data5</span><br><span class="line"><span class="comment"># Average: 128.333</span></span><br><span class="line"><span class="comment"># Average: 137.667</span></span><br><span class="line"><span class="comment"># Average: 176.667</span></span><br></pre></td></tr></table></figure>

<h3 id="Formatted-Printing"><a href="#Formatted-Printing" class="headerlink" title="Formatted Printing"></a>Formatted Printing</h3><p>gawk 使用 printf 格式化输出 <code>printf &quot;format string&quot;, var1, var2...</code></p>
<p>format string 是格式化输出的关键，采用的 C 语言相同的 printf 功能。格式为 <code>%[modifier]control-letter</code></p>
<p>Format Specifier Control Letters</p>
<table>
<thead>
<tr>
<th align="left">Control Letter</th>
<th align="left">Desciption</th>
</tr>
</thead>
<tbody><tr>
<td align="left">c</td>
<td align="left">Displays a number as an ASCII character</td>
</tr>
<tr>
<td align="left">d</td>
<td align="left">Displays an integer value</td>
</tr>
<tr>
<td align="left">i</td>
<td align="left">Displays an integer value(same as d)</td>
</tr>
<tr>
<td align="left">e</td>
<td align="left">Displays a number in scientific notation</td>
</tr>
<tr>
<td align="left">f</td>
<td align="left">Displays a floating-point value</td>
</tr>
<tr>
<td align="left">g</td>
<td align="left">Displays eigher scientific notation or floating point, whichever is shorter</td>
</tr>
<tr>
<td align="left">o</td>
<td align="left">Displays an octal value</td>
</tr>
<tr>
<td align="left">s</td>
<td align="left">Displays a text string</td>
</tr>
<tr>
<td align="left">x</td>
<td align="left">Displays a hexadecimal value</td>
</tr>
<tr>
<td align="left">X</td>
<td align="left">Displays a hexadecimal value, but using capital letters for A through F</td>
</tr>
</tbody></table>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;                                       </span></span><br><span class="line"><span class="string">quote&gt; x = 1 * 100                              </span></span><br><span class="line"><span class="string">quote&gt; printf &quot;The answer is: %e\n&quot;, x</span></span><br><span class="line"><span class="string">quote&gt; &#125;&#x27;</span></span><br><span class="line"><span class="comment"># The answer is: 1.000000e+02</span></span><br></pre></td></tr></table></figure>

<p>出来上面的控制符外，printf 还提供了另外三个控制项</p>
<ul>
<li>width, 控制宽度，小于设定值，给出空格补全，大于则用实际值覆盖</li>
<li>prec, </li>
<li>-(minus sign) 强制左对齐</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;\n&quot;; RS=&quot;&quot;&#125; &#123;print $1, $4&#125;&#x27;</span> data2</span><br><span class="line"><span class="comment"># Riley Mullen (312)555-1234</span></span><br><span class="line"><span class="comment"># Frank Williams (317)555-9876</span></span><br><span class="line"><span class="comment"># Haley Snell (313)555-4938</span></span><br><span class="line"></span><br><span class="line">gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;\n&quot;; RS=&quot;&quot;&#125; &#123;printf &quot;%s %s \n&quot;, $1, $4&#125;&#x27;</span> data2</span><br><span class="line"><span class="comment"># Riley Mullen (312)555-1234 </span></span><br><span class="line"><span class="comment"># Frank Williams (317)555-9876 </span></span><br><span class="line"><span class="comment"># Haley Snell (313)555-4938</span></span><br></pre></td></tr></table></figure>

<p>如果用 printf 需要自己打印换行符号，这种设定当你想讲多行数据放在一行的时候就很好使</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125; &#123;printf &quot;%s &quot;, $1&#125; END&#123;printf &quot;\n&quot;&#125;&#x27;</span> data1</span><br><span class="line"><span class="comment"># data11 data21 data31</span></span><br></pre></td></tr></table></figure>

<p>下面的例子我们通过 modifier 格式化名字这个字段</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;\n&quot;; RS=&quot;&quot;&#125; &#123;printf &quot;%16s %s\n &quot;, $1, $4&#125;&#x27;</span> data2</span><br><span class="line"><span class="comment">#     Riley Mullen (312)555-1234</span></span><br><span class="line"><span class="comment">#    Frank Williams (317)555-9876</span></span><br><span class="line"><span class="comment">#       Haley Snell (313)555-4938</span></span><br></pre></td></tr></table></figure>

<p>默认是右对齐的，可以使用 minus sign 来左对齐</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gawk &#x27;BEGIN&#123;FS=&quot;\n&quot;; RS=&quot;&quot;&#125; &#123;printf &quot;%-16s %s\n &quot;, $1, $4&#125;&#x27; data2Riley Mullen     (312)555-1234</span></span><br><span class="line"><span class="comment"># Frank Williams   (317)555-9876</span></span><br><span class="line"><span class="comment"># Haley Snell      (313)555-4938</span></span><br></pre></td></tr></table></figure>

<p>格式化浮点类型</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;&#123;                                                          </span></span><br><span class="line"><span class="string">quote&gt; total = 0      </span></span><br><span class="line"><span class="string">quote&gt; for (i=0; i&lt;4; i++)          </span></span><br><span class="line"><span class="string">quote&gt; &#123;</span></span><br><span class="line"><span class="string">quote&gt; total += $i    </span></span><br><span class="line"><span class="string">quote&gt; &#125;</span></span><br><span class="line"><span class="string">quote&gt; avg = total / 3                                                          </span></span><br><span class="line"><span class="string">quote&gt; printf &quot;Average: %5.1f\n&quot;, avg</span></span><br><span class="line"><span class="string">quote&gt; &#125;&#x27;</span> data5</span><br><span class="line"><span class="comment"># Average: 171.7</span></span><br><span class="line"><span class="comment"># Average: 191.0</span></span><br><span class="line"><span class="comment"># Average: 225.0</span></span><br></pre></td></tr></table></figure>

<h3 id="Built-In-Functions"><a href="#Built-In-Functions" class="headerlink" title="Built-In Functions"></a>Built-In Functions</h3><p>gawk 提供了不少的内建函数帮助你完成一些特定功能。</p>
<h4 id="Mathematical-functions"><a href="#Mathematical-functions" class="headerlink" title="Mathematical functions"></a>Mathematical functions</h4><p>The gawk Mathematical Functions</p>
<table>
<thead>
<tr>
<th align="left">Function</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">atan2(x, y)</td>
<td align="left">The arctangent of x/y, with x and y specified in radians</td>
</tr>
<tr>
<td align="left">cos(x)</td>
<td align="left">The cosine of x, with x specified in radians</td>
</tr>
<tr>
<td align="left">exp(x)</td>
<td align="left">The exponential of x</td>
</tr>
<tr>
<td align="left">int(x)</td>
<td align="left">The integer part of x, truncated toward 0</td>
</tr>
<tr>
<td align="left">log(x)</td>
<td align="left">The natural logarithm of x</td>
</tr>
<tr>
<td align="left">rand()</td>
<td align="left">A random floating point value larger thant 0 and less than 1</td>
</tr>
<tr>
<td align="left">sin(x)</td>
<td align="left">The sine of x, with x specified in radians</td>
</tr>
<tr>
<td align="left">sqrt(x)</td>
<td align="left">The square root of x</td>
</tr>
<tr>
<td align="left">srand(x)</td>
<td align="left">Specifies a seed value for calculating random numbers</td>
</tr>
</tbody></table>
<p>gawk 是有计算上线的，比如 exp(1000) 就会抛错</p>
<p>gawk 还提供了位运算</p>
<ul>
<li>and(v1, v2)</li>
<li>compl(val) 补全</li>
<li>lshift(val, count) 左移</li>
<li>or(v1, v2)</li>
<li>rshift(val, count)</li>
<li>xor(v1, v2) 异或</li>
</ul>
<h4 id="String-functions"><a href="#String-functions" class="headerlink" title="String functions"></a>String functions</h4><p>支持一些常规的字符操作，比如排序，截取，匹配，分割等</p>
<table>
<thead>
<tr>
<th align="left">Function</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">split(s, r [,a])</td>
<td align="left">This function splits s into array a using the FS character, or the regular expression r if supplied. It returns the number of fields</td>
</tr>
</tbody></table>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;x=&quot;testing&quot;; print toupper(x); print length(x)&#125;&#x27;</span></span><br><span class="line"><span class="comment"># TESTING</span></span><br><span class="line"><span class="comment"># 7</span></span><br></pre></td></tr></table></figure>

<p>sort 比较复杂, 下面的 asort 例子中，我们将原始 map 和输出结果 test 传给 asort 然后遍历打印 test. 打印时可以看到，原来的字母 index 被替换成了数字</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;</span></span><br><span class="line"><span class="string">var[&quot;a&quot;] = 1</span></span><br><span class="line"><span class="string">var[&quot;g&quot;] = 2</span></span><br><span class="line"><span class="string">var[&quot;m&quot;] = 3</span></span><br><span class="line"><span class="string">var[&quot;u&quot;] = 4</span></span><br><span class="line"><span class="string">asort(var, test)</span></span><br><span class="line"><span class="string">for (i in test)</span></span><br><span class="line"><span class="string">print &quot;Index:&quot;, i, &quot; - value:&quot;, test[i]</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># Index: 1  - value: 1</span></span><br><span class="line"><span class="comment"># Index: 2  - value: 2</span></span><br><span class="line"><span class="comment"># Index: 3  - value: 3</span></span><br><span class="line"><span class="comment"># Index: 4  - value: 4</span></span><br></pre></td></tr></table></figure>

<p>下面是 split 的测试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat data1</span><br><span class="line"><span class="comment"># data11,data12,data13,data14,data15</span></span><br><span class="line"><span class="comment"># data21,data22,data23,data24,data25</span></span><br><span class="line"><span class="comment"># data31,data32,data33,data34,data35</span></span><br><span class="line">gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125;&#123;</span></span><br><span class="line"><span class="string">split($0, var)</span></span><br><span class="line"><span class="string">    print var[1], var[5]                     </span></span><br><span class="line"><span class="string">&#125;&#x27;</span> data1</span><br><span class="line"><span class="comment"># data11 data15</span></span><br><span class="line"><span class="comment"># data21 data25</span></span><br><span class="line"><span class="comment"># data31 data35</span></span><br></pre></td></tr></table></figure>

<h4 id="Time-functions"><a href="#Time-functions" class="headerlink" title="Time functions"></a>Time functions</h4><table>
<thead>
<tr>
<th align="left">Function</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">mktime(datespec)</td>
<td align="left">Converts a date specified in the format YYYY NN DD HH MM SS[DST] into a timestamp value</td>
</tr>
<tr>
<td align="left">strftime(format[,timestamp])</td>
<td align="left">Formats either the current time of day timestamp, or timestamp if provided, into a formatted data and date, using the date() shell function format</td>
</tr>
<tr>
<td align="left">systime()</td>
<td align="left">Returns the timestamp for the current time of day</td>
</tr>
</tbody></table>
<p>时间函数在处理带时间相关的 log 文件时很有用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN&#123;        </span></span><br><span class="line"><span class="string">quote&gt; date = systime()            </span></span><br><span class="line"><span class="string">quote&gt; day = strftime(&quot;%A, %B %d, %Y&quot;, date)</span></span><br><span class="line"><span class="string">quote&gt; print day                                </span></span><br><span class="line"><span class="string">quote&gt; &#125;&#x27;</span></span><br><span class="line"><span class="comment"># Tuesday, June 15, 2021</span></span><br></pre></td></tr></table></figure>

<h3 id="User-Defined-Functions"><a href="#User-Defined-Functions" class="headerlink" title="User-Defined Functions"></a>User-Defined Functions</h3><h4 id="Defining-a-function"><a href="#Defining-a-function" class="headerlink" title="Defining a function"></a>Defining a function</h4><p>语法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> name([variables])</span><br><span class="line">&#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> printthird()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">print</span> <span class="variable">$3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>允许返回值 <code>return value</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> myrand(<span class="built_in">limit</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> int(<span class="built_in">limit</span> * rand())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Using-your-functions"><a href="#Using-your-functions" class="headerlink" title="Using your functions"></a>Using your functions</h4><p>当你定义一个函数的时候，它必须在最开始部分(before BEGIN).</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;      </span></span><br><span class="line"><span class="string">quote&gt; function myprint()                 </span></span><br><span class="line"><span class="string">quote&gt; &#123;</span></span><br><span class="line"><span class="string">quote&gt; printf &quot;%-16s - %s\n&quot;, $1, $4                                          </span></span><br><span class="line"><span class="string">quote&gt; &#125;</span></span><br><span class="line"><span class="string">quote&gt; BEGIN&#123;FS=&quot;\n&quot;; RS=&quot;&quot;&#125;</span></span><br><span class="line"><span class="string">quote&gt; &#123;</span></span><br><span class="line"><span class="string">quote&gt; myprint()</span></span><br><span class="line"><span class="string">quote&gt; &#125;&#x27;</span> data2</span><br><span class="line"><span class="comment"># Riley Mullen     - (312)555-1234</span></span><br><span class="line"><span class="comment"># Frank Williams   - (317)555-9876</span></span><br><span class="line"><span class="comment"># Haley Snell      - (313)555-4938</span></span><br></pre></td></tr></table></figure>

<h4 id="Creating-a-function-library"><a href="#Creating-a-function-library" class="headerlink" title="Creating a function library"></a>Creating a function library</h4><ol>
<li>为自定义还是创建库</li>
<li>将 gawk 脚本也存到文件中</li>
<li>在终端同时调用两个脚本</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat funclib </span><br><span class="line"><span class="comment"># function myprint()</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#     printf &quot;%-16s - %s\n&quot;, $1, $4</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># function myrand(limit)</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#     return int(limit * rand())</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># function printthird()</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#     print $3</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line">cat script4</span><br><span class="line"><span class="comment"># BEGIN&#123; FS=&quot;\n&quot;; RS=&quot;&quot;&#125;</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#     myprint()</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line">gawk -f funclib -f script4 data2         </span><br><span class="line"><span class="comment"># Riley Mullen     - (312)555-1234</span></span><br><span class="line"><span class="comment"># Frank Williams   - (317)555-9876</span></span><br><span class="line"><span class="comment"># Haley Snell      - (313)555-4938</span></span><br></pre></td></tr></table></figure>

<h3 id="Working-through-a-Practical-Example"><a href="#Working-through-a-Practical-Example" class="headerlink" title="Working through a Practical Example"></a>Working through a Practical Example</h3><p>When work with data files, the key is to first group related data records together and then perform any calculations required on the related data.</p>
<p>下面是一个保龄球得分统计的例子, 每一行分别包含 名字，组名，得分 的信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat scores.txt </span><br><span class="line"><span class="comment"># Rich Blum,team1,100,115,95</span></span><br><span class="line"><span class="comment"># Barbara Blum,team1,110,115,100</span></span><br><span class="line"><span class="comment"># Christine Bresnahan,team2,120,115,118</span></span><br><span class="line"><span class="comment"># Tim Bresnahan,team2,125,112,116</span></span><br></pre></td></tr></table></figure>

<p>目标：统计每个 team 的总分以及平均分</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat bowling.sh                               </span><br><span class="line"><span class="meta">#!/usr/local/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> team <span class="keyword">in</span> $(gawk -F, <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> scores.txt | uniq)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    gawk -v team=<span class="variable">$team</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">    BEGIN&#123; FS=&quot;,&quot;; total=0 &#125;</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        if ($2==team)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            total += $3 + $4 + $5;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    END &#123;</span></span><br><span class="line"><span class="string">        avg = total/6;</span></span><br><span class="line"><span class="string">        print &quot;Total for&quot;, team, &quot;is&quot;, total, &quot;, the average is&quot;,avg</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &#x27;</span> scores.txt</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">./bowling.sh </span><br><span class="line"><span class="comment"># Total for team1 is 635 , the average is 105.833</span></span><br><span class="line"><span class="comment"># Total for team2 is 706 , the average is 117.667</span></span><br></pre></td></tr></table></figure>

<p>计算方法：先遍历文件，取得所有的组名，然后再每个组名遍历一遍文件统计一次，打印一次。一开始我还以为可以一次对结果做分类统计的，如果是每次循环的话，还是很容易理解的</p>
<h2 id="Working-with-Alternative-Shells"><a href="#Working-with-Alternative-Shells" class="headerlink" title="Working with Alternative Shells"></a>Working with Alternative Shells</h2><p>介绍除 bash 外其他一些常见的 shell, 暂时不关心，pass</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux命令行与shell脚本编程大全 3rd</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 23 concurrency</title>
    <url>/hexo/2021/08/17/TIJ4-23-concurrency/</url>
    <content><![CDATA[<h2 id="The-manay-faces-of-concurrency"><a href="#The-manay-faces-of-concurrency" class="headerlink" title="The manay faces of concurrency"></a>The manay faces of concurrency</h2><p>并发看上去很让人摸不着头脑，主要是应为我们需要解决多个问题，并且解决问题的方法很多。这两者间也没有明确的匹配关系。所以你必须要全面的理解各种问题和场景才能更高效的使用并发。</p>
<p>使用并发可以解决的问题可以粗略归纳为两类</p>
<h3 id="Faster-execution"><a href="#Faster-execution" class="headerlink" title="Faster execution"></a>Faster execution</h3><p>多处理器系统通过并发可以提高效率，这很容易理解。但是有时但处理器系统通过并发也能提高效率，听上去可能有点反直觉，但是确实如此。一般来说，在但处理器系统中使用多线程，会有上下文切换(context switch)开销导致性能下降。但是如果场景中有较多的 IO 操作，则可能开销不增反降。</p>
<h3 id="Improving-code-design"><a href="#Improving-code-design" class="headerlink" title="Improving code design"></a>Improving code design</h3><p>单核系统中实现多线程，本质上，一个时间点也只能做一件事，理论上，我们可以将这个多线程转化为单线程实现。但是有时多线程可以提供更好的组织方式，比如在模拟动画的场景上。</p>
<p>Java 中多线程是有优先级的。通过这个优先级，JVM 会分配不同的时间片给程序执行。</p>
<h2 id="Basic-threading"><a href="#Basic-threading" class="headerlink" title="Basic threading"></a>Basic threading</h2><p>并发可以帮你讲你的程序分成独立的 task，每个 task 可以通过 processor 中的一个 thread 执行。每个 thread 可以线性的执行程序。通过这种方式单核 CUP 也能执行多线程，而且这对使用者是透明的，你不需要关心他的具体实现。</p>
<h3 id="Defining-tasks"><a href="#Defining-tasks" class="headerlink" title="Defining tasks"></a>Defining tasks</h3><p>并发中一个 thread 对应一个 task, 我们通过实现 Runnable 接口并实现 run() 方法的形式实现并发。</p>
<p>示例说明:</p>
<p>多线程打印变量指，run() 方法中有个 while 循环让 countDown 值递减，然后调用 print 方法打印状态信息。countDown = 0 时结束 task 并推出。</p>
<p>Thread.yield() 是 Thread 类自带的方法，作用是告诉 CPU 现在是时候让渡时间片了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiftOff</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> countDown = <span class="number">10</span>; <span class="comment">// Default</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> taskCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id = taskCount++;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LiftOff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LiftOff</span><span class="params">(<span class="keyword">int</span> countDown)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.countDown = countDown;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">status</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;#&quot;</span> + id + <span class="string">&quot;(&quot;</span> + (countDown &gt; <span class="number">0</span> ? countDown : <span class="string">&quot;Liftoff!&quot;</span>) + <span class="string">&quot;), &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (countDown-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.print(status());</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LiftOff launch = <span class="keyword">new</span> LiftOff();</span><br><span class="line">        launch.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),</span></span><br></pre></td></tr></table></figure>

<p>除了调用 run() 方法，还可以将 Runnable 类传给 Thread 类并调用 start() 方法启动线程。下面的例子中，我们在主函数中新建五个线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoreBasicThreads</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> LiftOff()).start();</span><br><span class="line">        System.out.println(<span class="string">&quot;Waiting for LiftOff...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #0(9), #1(9), #2(9), #0(8), #2(8), #1(8), #2(7), #0(7), #2(6),</span></span><br><span class="line"><span class="comment">// #3(9), #2(5), #3(8), #4(9), #3(7), #0(6), #3(6), Waiting for LiftOff...</span></span><br><span class="line"><span class="comment">// #1(7), #3(5), #0(5), #4(8), #2(4), #4(7), #0(4), #4(6), #3(4),</span></span><br><span class="line"><span class="comment">// #1(6), #3(3), #1(5), #4(5), #1(4), #0(3), #2(3), #1(3), #4(4),</span></span><br><span class="line"><span class="comment">// #2(2), #4(3), #3(2), #4(2), #2(1), #1(2), #0(2), #2(Liftoff!),</span></span><br><span class="line"><span class="comment">// #0(1), #4(1), #0(Liftoff!), #3(1), #4(Liftoff!), #1(1),</span></span><br><span class="line"><span class="comment">// #3(Liftoff!), #1(Liftoff!),</span></span><br></pre></td></tr></table></figure>

<p>从输出我们可以看出来，各个线程的 task 是混合执行的，通过 thread scheduler 调度。如果你使用的是多核系统，scheduler 会帮你讲这些 task 分配到不同核上计算。</p>
<p>main() 函数并不会持有创建出来的 Thread 的引用。对普通的对象来说，这会影响到垃圾回收，但是 Thread 有特殊的机制保证这一点。他会一直存在知道 run() 方法结束为止。</p>
<h3 id="Using-Executors"><a href="#Using-Executors" class="headerlink" title="Using Executors"></a>Using Executors</h3><p>Java SE5 以来，提供了另一种执行并发的方式 - Executor. 通过它你就不需要在 Client 中新建 Thread 来执行这个 task 了。Executor 是 Java5/6 中提倡的运行并发的方式。</p>
<p>Executor 提供了多种运行方式，有 CachedThreadPool, FixedThreadPool 和 SingleThreadPool.</p>
<p>CachedThreadPool 的例子如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> LiftOff());</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #0(9), #1(9), #2(9), #0(8), #2(8), #1(8), #3(9), #2(7), </span></span><br><span class="line"><span class="comment">// #0(7), #2(6), #3(8), #2(5), #1(7), #3(7), #2(4), #4(9), </span></span><br><span class="line"><span class="comment">// #4(8), #0(6), #4(7), #2(3), #3(6), #1(6), #3(5), #1(5), </span></span><br><span class="line"><span class="comment">// #2(2), #0(5), #0(4), #4(6), #0(3), #2(1), #1(4), #3(4), </span></span><br><span class="line"><span class="comment">// #2(Liftoff!), #3(3), #0(2), #4(5), #0(1), #3(2), #1(3), </span></span><br><span class="line"><span class="comment">// #3(1), #0(Liftoff!), #3(Liftoff!), #4(4), #1(2), #4(3), </span></span><br><span class="line"><span class="comment">// #1(1), #4(2), #1(Liftoff!), #4(1), #4(Liftoff!),</span></span><br></pre></td></tr></table></figure>

<p>task execute 之后需要调用 shutdown 方法防止新的 task 被提交到 Executor 中。</p>
<p>下面是 FixedThreadPool 的使用方法，和前面基本一样，我们可以自定义 pool size</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> LiftOff());</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相比于 CachedThreadPool, FixedThreadPool 会在开始前一并将制定的 Thread 都创建完以节省创建成本。同时由于指定了线程数，可以防止资源滥用。</p>
<p>书中例子都是用的 CachedTheadPool, 因为方便，他的机制是，更具使用情况创建线程，如果之前的线程用完了，会重用。产品代码还是尽量使用 FixedThreadPool 为好。</p>
<p>SingleThreadPool 和 FixedThreadPool 很像，只不过限定只能是单线程。这种情况在 常驻线程 和 临时线程 的情况下很有用。如果多个 task 被提交到 SingleThreadPool 中的话，他会顺序执行所有的线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleThreadExecutor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> LiftOff());</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), </span></span><br><span class="line"><span class="comment">// #0(1), #0(Liftoff!), #1(9), #1(8), #1(7), #1(6), #1(5), </span></span><br><span class="line"><span class="comment">// #1(4), #1(3), #1(2), #1(1), #1(Liftoff!), #2(9), #2(8), </span></span><br><span class="line"><span class="comment">// #2(7), #2(6), #2(5), #2(4), #2(3), #2(2), #2(1), #2(Liftoff!), </span></span><br><span class="line"><span class="comment">// #3(9), #3(8), #3(7), #3(6), #3(5), #3(4), #3(3), #3(2), #3(1), </span></span><br><span class="line"><span class="comment">// #3(Liftoff!), #4(9), #4(8), #4(7), #4(6), #4(5), #4(4), #4(3), </span></span><br><span class="line"><span class="comment">// #4(2), #4(1), #4(Liftoff!),</span></span><br></pre></td></tr></table></figure>

<p>通过 SingleThreadExectuor 你可以确保同一时间只有一个线程占用某个资源。如果读写文件系统时，可以通过这中 executor 避免死锁。当然最常见的还是给资源加锁，后面有介绍。</p>
<h3 id="Producing-return-values-from-tasks"><a href="#Producing-return-values-from-tasks" class="headerlink" title="Producing return values from tasks"></a>Producing return values from tasks</h3><p>Runnable 的方式，当 run 结束时即退出，是没有返回值的，如果想要在 task 结束后返回值，可以使用 Callable 接口，从 Java 5 开始支持这个接口。他只能通过 ExecutorService 的 submit 进行调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        ArrayList&lt;Future&lt;String&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            results.add(exec.submit(<span class="keyword">new</span> TaskWithResult(i)));</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">        <span class="keyword">for</span> (Future&lt;String&gt; fs : results) &#123;</span><br><span class="line">            System.out.println(fs.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// result of TaskWithResult 0</span></span><br><span class="line"><span class="comment">// result of TaskWithResult 1</span></span><br><span class="line"><span class="comment">// result of TaskWithResult 2</span></span><br><span class="line"><span class="comment">// result of TaskWithResult 3</span></span><br><span class="line"><span class="comment">// result of TaskWithResult 4</span></span><br><span class="line"><span class="comment">// result of TaskWithResult 5</span></span><br><span class="line"><span class="comment">// result of TaskWithResult 6</span></span><br><span class="line"><span class="comment">// result of TaskWithResult 7</span></span><br><span class="line"><span class="comment">// result of TaskWithResult 8</span></span><br><span class="line"><span class="comment">// result of TaskWithResult 9</span></span><br></pre></td></tr></table></figure>

<p>submit() 方法会产生一个 Future 对象来存储 Callable 的结果。Future 提供 isDone() 方法用以检测 task 是否执行结束。结束后可以执行 get() 方法得到结果。如果直接调用 get() 但是 task 还没有 done, 那 get() 就会 block 直到 task 完成，你也可以为 get() 设置 timeout。</p>
<h3 id="Sleeping"><a href="#Sleeping" class="headerlink" title="Sleeping"></a>Sleeping</h3><p>在 task 中，你可以通过调用 sleep() 方法来影响 task 的执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepingTask</span> <span class="keyword">extends</span> <span class="title">LiftOff</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (countDown-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(status());</span><br><span class="line">                <span class="comment">// Old-style: Thread.sleep(100);</span></span><br><span class="line">                <span class="comment">// Java SE5/6-style</span></span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> SleepingTask());</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #0(9), #2(9), #1(9), #3(9), #4(9), </span></span><br><span class="line"><span class="comment">// #0(8), #2(8), #1(8), #4(8), #3(8), </span></span><br><span class="line"><span class="comment">// #4(7), #1(7), #3(7), #2(7), #0(7), </span></span><br><span class="line"><span class="comment">// #1(6), #4(6), #3(6), #0(6), #2(6), </span></span><br><span class="line"><span class="comment">// #1(5), #4(5), #3(5), #0(5), #2(5), </span></span><br><span class="line"><span class="comment">// #4(4), #0(4), #2(4), #3(4), #1(4), </span></span><br><span class="line"><span class="comment">// #4(3), #0(3), #1(3), #3(3), #2(3), </span></span><br><span class="line"><span class="comment">// #3(2), #2(2), #0(2), #4(2), #1(2), </span></span><br><span class="line"><span class="comment">// #2(1), #3(1), #4(1), #0(1), #1(1), </span></span><br><span class="line"><span class="comment">// #4(Liftoff!), #3(Liftoff!), #2(Liftoff!), #0(Liftoff!), #1(Liftoff!),</span></span><br></pre></td></tr></table></figure>

<p>sleep() 会抛出 InterruptedException 异常，你必须在 run() 方法中处理他，因为异常是不能被传递到 main 中的。 TimeUnit 是对 Thread.sleep() 更精确的处理方式。</p>
<p>从输出内容我们可以看到，加了 sleep 之后 task 以轮训的形式输出，但是这个是不能保证的，不同的操作系统可能有不同的行为。</p>
<h3 id="Priority"><a href="#Priority" class="headerlink" title="Priority"></a>Priority</h3><p>priority 表示 thread 在 scheduler 总的重要程度。scheduler 会倾向于更频繁的调用 priority 高的 thread。</p>
<p>一般来说，你不需要人为的制定 thread priority，系统会自动为你分配。你可以调用 getPriority()/setPriority() 查看，指定优先级</p>
<p>示例如下，和前面的 LiftOff 基本一致，只是 run() 中的实现改为 10w 浮点计算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePriorities</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> countDown = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">double</span> d; <span class="comment">// No optimization</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> priority;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimplePriorities</span><span class="params">(<span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.priority = priority;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread() + <span class="string">&quot;: &quot;</span> + countDown;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread.currentThread().setPriority(priority);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// An expensive, interruptable operation</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">                d += (Math.PI + Math.E) / (<span class="keyword">double</span>) i;</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">1000</span> == <span class="number">0</span>)</span><br><span class="line">                    Thread.yield();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (--countDown == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> SimplePriorities(Thread.MIN_PRIORITY));</span><br><span class="line">        &#125;</span><br><span class="line">        exec.execute(<span class="keyword">new</span> SimplePriorities(Thread.MAX_PRIORITY));</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Thread[pool-1-thread-2,1,main]: 5</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-3,1,main]: 5</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-5,1,main]: 5</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-1,1,main]: 5</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-4,1,main]: 5</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-6,10,main]: 5</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-3,1,main]: 4</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-2,1,main]: 4</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-5,1,main]: 4</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-4,1,main]: 4</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-1,1,main]: 4</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-6,10,main]: 4</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-3,1,main]: 3</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-1,1,main]: 3</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-5,1,main]: 3</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-2,1,main]: 3</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-4,1,main]: 3</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-3,1,main]: 2</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-6,10,main]: 3</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-1,1,main]: 2</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-5,1,main]: 2</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-3,1,main]: 1</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-6,10,main]: 2</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-4,1,main]: 2</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-2,1,main]: 2</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-1,1,main]: 1</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-6,10,main]: 1</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-5,1,main]: 1</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-4,1,main]: 1</span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-2,1,main]: 1</span></span><br></pre></td></tr></table></figure>

<p>Thread 的 toString 方法有自定义过，输出时会打印 thread name + priority + group name. </p>
<p>Mac 上跑这个实验效果并不明显，期望值应该是 CPU 会优先执行 priority 为 5 的线程才对。。。</p>
<p>下面解释 d 变量增加这个 volatile 就是为了防止优化，不然看不到预期结果。难道 mac 上这个设置失效了？！之后调用 yield 释放线权。</p>
<p>JDK 有 10 个等级的优先级设置，不一定和操作系统匹配，比如 Windows 只有 7 级而 Linux 系统有 23 级。</p>
<h3 id="Yielding"><a href="#Yielding" class="headerlink" title="Yielding"></a>Yielding</h3><p>通过使用 yield 可以在 task 进行过程中，让渡 CPU 给其他同级别的 task，但是这个让渡并不能被保证，你不能通过他来严格控制 task 的执行顺序。</p>
<h3 id="Daemon-threads"><a href="#Daemon-threads" class="headerlink" title="Daemon threads"></a>Daemon threads</h3><p>守护进程可以在成勋运行时在后台提供一些其他的基础服务，但是这个服务和程序没关系。当所有 非守进程 的程序结束后，守护进程也会被杀死，程序退出。反之，只要有 非守护进程 没有结束，那么守护进程就不会结束。</p>
<p>示例演示</p>
<p>run 方法总我们指定新建的 thread 为 守护进程。当 main 结束时，守护进程也一起结束。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDaemons</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot; &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Thread daemon = <span class="keyword">new</span> Thread(<span class="keyword">new</span> SimpleDaemons());</span><br><span class="line">            daemon.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            daemon.start();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;All daemons started&quot;</span>);</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">175</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// All daemons started</span></span><br><span class="line"><span class="comment">// Thread[Thread-5,5,main] org.jz.c23.SimpleDaemons@501a67ca</span></span><br><span class="line"><span class="comment">// Thread[Thread-8,5,main] org.jz.c23.SimpleDaemons@22e706f4</span></span><br><span class="line"><span class="comment">// Thread[Thread-2,5,main] org.jz.c23.SimpleDaemons@4eba943c</span></span><br><span class="line"><span class="comment">// Thread[Thread-0,5,main] org.jz.c23.SimpleDaemons@c0a422e</span></span><br><span class="line"><span class="comment">// Thread[Thread-7,5,main] org.jz.c23.SimpleDaemons@317704a2</span></span><br><span class="line"><span class="comment">// Thread[Thread-3,5,main] org.jz.c23.SimpleDaemons@5ed3479d</span></span><br><span class="line"><span class="comment">// Thread[Thread-6,5,main] org.jz.c23.SimpleDaemons@2482ac6c</span></span><br><span class="line"><span class="comment">// Thread[Thread-9,5,main] org.jz.c23.SimpleDaemons@205caa11</span></span><br><span class="line"><span class="comment">// Thread[Thread-1,5,main] org.jz.c23.SimpleDaemons@71537d82</span></span><br><span class="line"><span class="comment">// Thread[Thread-4,5,main] org.jz.c23.SimpleDaemons@1b02d47b</span></span><br></pre></td></tr></table></figure>

<p>我们还可以通过定制 ThreadFactory 来生成 Thread. 然后通过 Executors 来做并发</p>
<p>示例说明：</p>
<p>main 中新建了一个 ExecutorService 并用 DaemonThreadFactory 作为参数。通过这种方式，所有创建的并发线程都是守护进程。他们会每隔 100ms 打印一次信息。同时 main 会 sleep 500ms 然后退出。同时守护进程全部结束。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span>  </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonFromFactory</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot; &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool(<span class="keyword">new</span> DaemonThreadFactory());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> DaemonFromFactory());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;All daemons started&quot;</span>);</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// All daemons started</span></span><br><span class="line"><span class="comment">// Thread[Thread-9,5,main] org.jz.c23.DaemonFromFactory@627a6c14</span></span><br><span class="line"><span class="comment">// Thread[Thread-6,5,main] org.jz.c23.DaemonFromFactory@43ca4e8</span></span><br><span class="line"><span class="comment">// ....</span></span><br></pre></td></tr></table></figure>

<p>我们还可以使用 ThreadPoolExecutor 来简化上面的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">ThreadPoolExecutor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DaemonThreadPoolExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">0</span>, Integer.MAX_VALUE, <span class="number">60L</span>, </span><br><span class="line">        TimeUnit.SECONDS, <span class="keyword">new</span> SynchronousQueue&lt;&gt;(), <span class="keyword">new</span> DaemonThreadFactory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以通过调用 isDaemon() 方法查看线程是否为 守护进程，由 守护进程 创建的所有 thread 都会自动变为 守护进程。</p>
<p>示例说明：</p>
<p>main 函数中为 Daemon 创建线程，并制定类型为 守护进程</p>
<p>Daemon 这个进程中会新建并启动十个 thread，逻辑都一样，就是生产后一直空转</p>
<p>打印这十个空转进程的类型，可以看到也是 守护进程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Daemons</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread d = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Daemon());</span><br><span class="line">        d.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        d.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;d.isDaemon() = &quot;</span> + d.isDaemon() + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        <span class="comment">// Allow the daemon threads to finish their startup processes</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DaemonSpawn</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Daemon</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Thread[] t = <span class="keyword">new</span> Thread[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length; i++) &#123;</span><br><span class="line">            t[i] = <span class="keyword">new</span> Thread(<span class="keyword">new</span> DaemonSpawn());</span><br><span class="line">            t[i].start();</span><br><span class="line">            System.out.println(<span class="string">&quot;DaemonSpawn &quot;</span> + i + <span class="string">&quot; started, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t[&quot;</span> + i + <span class="string">&quot;].isDaemon() = &quot;</span> + t[i].isDaemon() + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">            Thread.yield();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// d.isDaemon() = true, </span></span><br><span class="line"><span class="comment">// DaemonSpawn 0 started, </span></span><br><span class="line"><span class="comment">// DaemonSpawn 1 started, </span></span><br><span class="line"><span class="comment">// DaemonSpawn 2 started, </span></span><br><span class="line"><span class="comment">// DaemonSpawn 3 started, </span></span><br><span class="line"><span class="comment">// DaemonSpawn 4 started, </span></span><br><span class="line"><span class="comment">// DaemonSpawn 5 started, </span></span><br><span class="line"><span class="comment">// DaemonSpawn 6 started, </span></span><br><span class="line"><span class="comment">// DaemonSpawn 7 started, </span></span><br><span class="line"><span class="comment">// DaemonSpawn 8 started, </span></span><br><span class="line"><span class="comment">// DaemonSpawn 9 started, </span></span><br><span class="line"><span class="comment">// t[0].isDaemon() = true, </span></span><br><span class="line"><span class="comment">// t[1].isDaemon() = true, </span></span><br><span class="line"><span class="comment">// t[2].isDaemon() = true, </span></span><br><span class="line"><span class="comment">// t[3].isDaemon() = true, </span></span><br><span class="line"><span class="comment">// t[4].isDaemon() = true, </span></span><br><span class="line"><span class="comment">// t[5].isDaemon() = true, </span></span><br><span class="line"><span class="comment">// t[6].isDaemon() = true, </span></span><br><span class="line"><span class="comment">// t[7].isDaemon() = true, </span></span><br><span class="line"><span class="comment">// t[8].isDaemon() = true, </span></span><br></pre></td></tr></table></figure>

<p>注意：守护进程是可以在不执行 finally 的情况下退出的</p>
<p>示例说明：</p>
<p>主函数中新建一个 ADaemon 的 thread 并启动。 ADaemon 的 run 方法会答应 “Starting ADaemon” 并在 1s 后打印 “This should always run?”</p>
<p>祝函数启动并结束后，守护进程的 finally 中的语句并没有打印。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ADaemon</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Starting ADaemon&quot;</span>);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;This should always run?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonsDontRunFinally</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ADaemon());</span><br><span class="line">        t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Starting ADaemon</span></span><br></pre></td></tr></table></figure>

<p>如果我们将 t.setDaemon(true); 注释掉，则 finally 中的内容会被打印出来。</p>
<p>守护进程在没有其他 非守护进程 的时候会立即别 JVM 杀掉。所以一般来说鼓励创建 非守护进程。我们可以通过 Executor 关闭 非守护进程，后面会介绍。</p>
<h3 id="Coding-variations"><a href="#Coding-variations" class="headerlink" title="Coding variations"></a>Coding variations</h3><p>到现在为止，我们都用 Runnable 实现并发，其实并发还可以通过很多其他不同的方式实现</p>
<p>通过继承 Thread 类, 和 Runnable 的区别：</p>
<ul>
<li>Runnable 需要通过 Thread 类或者 Executor 才能启动，Thread 自己就可以启动</li>
<li>Runnable 启动时需要调用 start() 方法，Thread 不需要，new 完就启动了</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> countDown = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> threadCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Integer.toString(++threadCount));</span><br><span class="line">        start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;#&quot;</span> + getName() + <span class="string">&quot;(&quot;</span> + countDown + <span class="string">&quot;), &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (--countDown == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> SimpleThread();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #1(5), #1(4), #3(5), #3(4), #3(3), #3(2), #3(1), #4(5), #4(4), </span></span><br><span class="line"><span class="comment">// #2(5), #4(3), #4(2), #1(3), #1(2), #1(1), #4(1), #5(5), #5(4), </span></span><br><span class="line"><span class="comment">// #2(4), #5(3), #2(3), #2(2), #2(1), #5(2), #5(1), </span></span><br></pre></td></tr></table></figure>

<p>还可以在 Runnable 的实现中自启动, 这种写法的特点是，在成员变量中，将本身作为参数传给 Thread 的构造函数。在自己的构造函数中，调用 Thread 的 start 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfManaged</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> countDown = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> Thread t = <span class="keyword">new</span> Thread(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SelfManaged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName() + <span class="string">&quot;(&quot;</span> + countDown + <span class="string">&quot;), &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (--countDown == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> SelfManaged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Thread-0(5), Thread-2(5), Thread-1(5), Thread-3(5), Thread-2(4), Thread-2(3), </span></span><br><span class="line"><span class="comment">// Thread-4(5), Thread-4(4), Thread-0(4), Thread-4(3), Thread-4(2), Thread-2(2), </span></span><br><span class="line"><span class="comment">// Thread-3(4), Thread-3(3), Thread-3(2), Thread-3(1), Thread-1(4), Thread-2(1), </span></span><br><span class="line"><span class="comment">// Thread-4(1), Thread-0(3), Thread-0(2), Thread-1(3), Thread-0(1), Thread-1(2), </span></span><br><span class="line"><span class="comment">// Thread-1(1),</span></span><br></pre></td></tr></table></figure>

<p>PS: 这个例子中使用场景很简单，所以可能没什么风险，但是在构造函数中启动线程可能会很危险。其他 task 可能在这个 task 初始化结束之前就开始使用这个 task 对应的 thread，这个对象此时处于一个不稳定状态。这就是我们更倾向于使用 Executor 的原因</p>
<p>有时候，你并不想对外暴露并发类的实现，此时，你可以使用内部类的方式。以下是几种典型应用方式</p>
<p>通过显示的内部类实现</p>
<ul>
<li>InnerThread1 包含内部类 Inner，内部类继承 Thread</li>
<li>Inner 的构造函数会调用 start 方法启动线程</li>
<li>InnerThread1 有构造函数，调用 Inner 的构造函数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Using a named inner class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InnerThread1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> countDown = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> Inner inner;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        Inner(String name) &#123;</span><br><span class="line">            <span class="keyword">super</span>(name);</span><br><span class="line">            start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="keyword">this</span>);</span><br><span class="line">                    <span class="keyword">if</span> (--countDown == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">                    sleep(<span class="number">10</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Interrupted&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getName() + <span class="string">&quot;: &quot;</span> + countDown;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InnerThread1</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        inner = <span class="keyword">new</span> Inner(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过显示的内部类实现, 和上面的例子大同小异，只是把  Thread 类的声明塞到了 InnerThread2 构造函数中，然后直接调用 start() 开启线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Using an anonymous inner class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InnerThread2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> countDown = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> Thread t;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InnerThread2</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        t = <span class="keyword">new</span> Thread(name) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="keyword">this</span>);</span><br><span class="line">                        <span class="keyword">if</span> (--countDown == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">                        sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> getName() + <span class="string">&quot;: &quot;</span> + countDown;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部类 + Runnable, 和第一个例子类似，只不过通过 Runnable 接口做实现，start 的调用直接放在 Inner 的构造函数中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Using a named Runnable implementation</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InnerRunnable1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> countDown = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> Inner inner;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        Thread t;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            t = <span class="keyword">new</span> Thread(<span class="keyword">this</span>, name);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="keyword">this</span>);</span><br><span class="line">                    <span class="keyword">if</span> (--countDown == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> t.getName() + <span class="string">&quot;: &quot;</span> + countDown;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InnerRunnable1</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        inner = <span class="keyword">new</span> Inner(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部类 + Runnable, Runnable 实现放在构造函数中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Using an anonymous Runnable implementation</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InnerRunnable2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> countDown = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> Thread t;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InnerRunnable2</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="keyword">this</span>);</span><br><span class="line">                        <span class="keyword">if</span> (--countDown == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">                        TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + countDown;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, name);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将 Runnable 放到方法中做实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A separate method tu run some code as a task</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadMethod</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> countDown = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> Thread t;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadMethod</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">            t = <span class="keyword">new</span> Thread(name) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="keyword">this</span>);</span><br><span class="line">                            <span class="keyword">if</span> (--countDown == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">                            sleep(<span class="number">10</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadVariations</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> InnerThread1(<span class="string">&quot;InnerThread1&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> InnerThread2(<span class="string">&quot;InnerThread2&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> InnerRunnable1(<span class="string">&quot;InnerRunnable1&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> InnerRunnable2(<span class="string">&quot;InnerRunnable2&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> ThreadMethod(<span class="string">&quot;ThreadMethod&quot;</span>).runTask();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h3><p>术语解释，没发现什么有趣的点</p>
<h3 id="Joining-a-thread"><a href="#Joining-a-thread" class="headerlink" title="Joining a thread"></a>Joining a thread</h3><p>在线程 A 的执行中，如果你 call 了线程 B 的 join() 方法，那么，线程 A 会等待线程 B 结束后再执行。</p>
<p>上面的 join 的行为可以通过调用 B 的 interrup() 方法进行打断</p>
<p>示例解析：</p>
<p>Sleeper 继承自 Thread 通过构造函数指定线程名称和休眠时间。当被打断时输出日志。</p>
<p>Joiner 继承自 Thread, 通过参数指定 Thread name 和将要 join 的 thread</p>
<p>主程序中，创建两个 Sleeper 类，再创建两个 Joiner 类并将 Sleeper 分别传给他们。</p>
<p>Joiner 执行的时候，会等待传入的 Sleeper 执行结束再继续执行。其中一个 Sleper 调用 interrupt() 方法，中途中断，对应的 Joiner 继续执行</p>
<p>PS: 当现场被打断时，isInterrupted 被设置为 true, 当异常被捕获时，重制为 false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">joining</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sleeper</span><br><span class="line">                sleepy = <span class="keyword">new</span> Sleeper(<span class="string">&quot;Sleepy&quot;</span>, <span class="number">1500</span>),</span><br><span class="line">                grumpy = <span class="keyword">new</span> Sleeper(<span class="string">&quot;Grumpy&quot;</span>, <span class="number">1500</span>);</span><br><span class="line">        Joiner</span><br><span class="line">                dopey = <span class="keyword">new</span> Joiner(<span class="string">&quot;Dopey&quot;</span>, sleepy),</span><br><span class="line">                doc = <span class="keyword">new</span> Joiner(<span class="string">&quot;Doc&quot;</span>, grumpy);</span><br><span class="line">        grumpy.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sleeper</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> duration;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Sleeper</span> <span class="params">(String name, <span class="keyword">int</span> sleepTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        duration = sleepTime;</span><br><span class="line">        start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep(duration);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot; was interrupted. &quot;</span> + <span class="string">&quot;isInterrupted(): &quot;</span> + isInterrupted());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; has awakened&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Joiner</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sleeper sleeper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Joiner</span><span class="params">(String name, Sleeper sleeper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.sleeper = sleeper;</span><br><span class="line">        start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleeper.join();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Interrupted&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; join completed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Grumpy was interrupted. isInterrupted(): false</span></span><br><span class="line"><span class="comment">// Doc join completed</span></span><br><span class="line"><span class="comment">// Sleepy has awakened</span></span><br><span class="line"><span class="comment">// Dopey join completed</span></span><br></pre></td></tr></table></figure>

<h3 id="Creating-responsive-user-interface"><a href="#Creating-responsive-user-interface" class="headerlink" title="Creating responsive user interface"></a>Creating responsive user interface</h3><p>模拟图形界面，但是不太能 get 到他的点，pass</p>
<h3 id="Thread-groups"><a href="#Thread-groups" class="headerlink" title="Thread groups"></a>Thread groups</h3><p>Thread group 是一个失败的作品，你最好忘记他的存在</p>
<h3 id="Catching-exceptions"><a href="#Catching-exceptions" class="headerlink" title="Catching exceptions"></a>Catching exceptions</h3><p>由于 Thread 的特性，run() 中抛出的异常，你不能在 main 中 catch。示例如下，我们新建一个 Runnable 的实现类，并让跑抛异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        exec.execute(<span class="keyword">new</span> ExceptionThread());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Exception in thread &quot;pool-1-thread-1&quot; java.lang.RuntimeException</span></span><br><span class="line"><span class="comment">//     at org.jz.c23.ExceptionThread.run(ExceptionThread.java:9)</span></span><br><span class="line"><span class="comment">//     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span></span><br><span class="line"><span class="comment">//     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span></span><br><span class="line"><span class="comment">//     at java.lang.Thread.run(Thread.java:836)</span></span><br></pre></td></tr></table></figure>

<p>我们在 executor 外面添加 try-catch 试图捕获异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NaiveExceptionHandling</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">            exec.execute(<span class="keyword">new</span> ExceptionThread());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Exception has been handled...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Exception in thread &quot;pool-1-thread-1&quot; java.lang.RuntimeException</span></span><br><span class="line"><span class="comment">//     at org.jz.c23.ExceptionThread.run(ExceptionThread.java:9)</span></span><br><span class="line"><span class="comment">//     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span></span><br><span class="line"><span class="comment">//     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span></span><br><span class="line"><span class="comment">//     at java.lang.Thread.run(Thread.java:836)</span></span><br></pre></td></tr></table></figure>

<p>然并卵。。。。这时，你可以结合 Executor 使用它，在 new pool 的时候指定 factory， 并在 factory 的实现中指定异常的处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CaptureUncaughtException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool(<span class="keyword">new</span> HandlerThreadFactory());</span><br><span class="line">        exec.execute(<span class="keyword">new</span> ExceptionThread2());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        System.out.println(<span class="string">&quot;run() by &quot;</span> + t);</span><br><span class="line">        System.out.println(<span class="string">&quot;eh = &quot;</span> + t.getUncaughtExceptionHandler());</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUncaughtExceptionHandler</span> <span class="keyword">implements</span> <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;caught &quot;</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandlerThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">&quot; creating new thread&quot;</span>);</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        System.out.println(<span class="string">&quot;create &quot;</span> + t);</span><br><span class="line">        t.setUncaughtExceptionHandler(<span class="keyword">new</span> MyUncaughtExceptionHandler());</span><br><span class="line">        System.out.println(<span class="string">&quot;eh = &quot;</span> + t.getUncaughtExceptionHandler());</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// org.jz.c23.HandlerThreadFactory@39a054a5 creating new thread</span></span><br><span class="line"><span class="comment">// create Thread[Thread-0,5,main]</span></span><br><span class="line"><span class="comment">// eh = org.jz.c23.MyUncaughtExceptionHandler@6ed3ef1</span></span><br><span class="line"><span class="comment">// run() by Thread[Thread-0,5,main]</span></span><br><span class="line"><span class="comment">// eh = org.jz.c23.MyUncaughtExceptionHandler@6ed3ef1</span></span><br><span class="line"><span class="comment">// org.jz.c23.HandlerThreadFactory@39a054a5 creating new thread</span></span><br><span class="line"><span class="comment">// create Thread[Thread-1,5,main]</span></span><br><span class="line"><span class="comment">// eh = org.jz.c23.MyUncaughtExceptionHandler@78463d45</span></span><br><span class="line"><span class="comment">// caught java.lang.RuntimeException</span></span><br></pre></td></tr></table></figure>

<p>PS: 不知道为毛会有两次创建 handler 的动作，好奇怪</p>
<p>如果所有的异常都是一个 handler 处理的，还可以直接将 handler 设置给 Thread 简化操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SettingDefaultHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> MyUncaughtExceptionHandler());</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        exec.execute(<span class="keyword">new</span> ExceptionThread());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// caught java.lang.RuntimeException</span></span><br></pre></td></tr></table></figure>

<p>中间中间好几节暂时不用，先放一放</p>
<h2 id="Sharing-resources"><a href="#Sharing-resources" class="headerlink" title="Sharing resources"></a>Sharing resources</h2><p>并发需要解决的是多个线程操作共用资源的问题</p>
<h3 id="Improperly-accessing-resources"><a href="#Improperly-accessing-resources" class="headerlink" title="Improperly accessing resources"></a>Improperly accessing resources</h3><p>举一个多线程使用 int 生成器的例子。我们创建一个生成器的抽象接口,定义了抽象类中的方法。</p>
<ul>
<li>next() - 生成 int 结果</li>
<li>cancel() - 设置 flag</li>
<li>isCancel() - 返回 flag 结果</li>
</ul>
<p>canceled 这个 flag 还被定义为 volatile 确保其他线程可见</p>
<p>cancel() 为 boolean 赋值语句，是一个原子操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IntGenerator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> canceled = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123; canceled = <span class="keyword">true</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCanceled</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> canceled; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义 EvenChecker 并发检测奇偶情况.</p>
<ul>
<li>run() - 拿到生成的 int 值并判断，如果为奇数则停止线程</li>
<li>test() - 重载了两个 test 方法，启动多个线程运行 run 方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvenChecker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntGenerator generator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EvenChecker</span><span class="params">(IntGenerator g, <span class="keyword">int</span> ident)</span> </span>&#123;</span><br><span class="line">        generator = g;</span><br><span class="line">        id = ident;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!generator.isCanceled()) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = generator.next();</span><br><span class="line">            <span class="keyword">if</span> (val % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(val + <span class="string">&quot; not event...&quot;</span>);</span><br><span class="line">                generator.cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(IntGenerator gp, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Ctrl + c to exit&quot;</span>);</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> EvenChecker(gp, i));</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(IntGenerator gp)</span> </span>&#123;</span><br><span class="line">        test(gp, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成器的实现类 EvenGenerator, 声明一个初始值，并通过两个 ++ 运算，达到偶数次递增的目的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvenGenerator</span> <span class="keyword">extends</span> <span class="title">IntGenerator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentEvenValue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ++currentEvenValue;</span><br><span class="line">        ++currentEvenValue;</span><br><span class="line">        <span class="keyword">return</span> currentEvenValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EvenChecker.test(<span class="keyword">new</span> EvenGenerator());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// Ctrl + c to exit</span></span><br><span class="line"><span class="comment">// 1515 not event...</span></span><br><span class="line"><span class="comment">// 1519 not event...</span></span><br><span class="line"><span class="comment">// 1517 not event...</span></span><br></pre></td></tr></table></figure>

<p>运行后可以看到，三个线程检测到目标为奇数，停止了 generator。当执行 next() 时，有可能执行了一半，切到另一个线程执行 run() 中的判断了。这时，程序状态就会出错。你还可以在两个 ++ 操作中间通过新加 yield() 方法来加大重现频率。</p>
<p>还有一个需要注意的是 i++ 并不是一个原子操作，可能在执行间就切到另一个线程了。</p>
<h3 id="Resolving-shared-resource-contention"><a href="#Resolving-shared-resource-contention" class="headerlink" title="Resolving shared resource contention"></a>Resolving shared resource contention</h3><p>这里举了一个挺有意思的例子，处理并发就像是 你坐在餐桌上，准备夹一块肉的时候，突然，肉没了(你的线程被暂停，同时其他线程操作了这个资源)</p>
<p>你可以通过加锁防止这种事情的发生，这样保证一个资源同一时间只能由一个 task 访问，其他 task 需要排队等待解锁。</p>
<p>代码层面，Java 通过 synchronized 关键字来实现这一功能。shared resource 同行来说是一片系统内存，以对象的形式表现出来。也可能是一个文件，或者 IO 端口或者一些设备，比如打印机之类的。</p>
<p>你需要将 class 中代表你要 lock 的对象声明为 private，并且所有和这个对象相关的方法前加关键字，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>当一个方法被调用的时候，其他加了关键字的方法都会被 lock 住，直到前一个方法执行完毕为止。</p>
<p>PS: 将用到的对象声明为 private 是很关键的一步，否则控制并发会失败。</p>
<p>上述对象在 JVM 有一个 field 来记录锁的数量，默认为 0，当 synchronized 方法被调用时，count + 1，当对应的 task 调用这个对象的两一个 synchronized 方法时，再 + 1.</p>
<p>此外还有 class level 的 lock 用来控制 static 方法的同步，保证同一时间只有一个 task 访问这个静态方法。</p>
<p>加锁的原则：This is an important point: Every method that accesses a critical shared resource must be synchronized or it won’t work right.</p>
<h3 id="Synchronizing-the-EvenGenerator"><a href="#Synchronizing-the-EvenGenerator" class="headerlink" title="Synchronizing the EvenGenerator"></a>Synchronizing the EvenGenerator</h3><p>根据上一节的描述，我们通过给 next 方法加锁，将之前的 EvenGenerator 改为线程安全版本.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedEvenGenerator</span> <span class="keyword">extends</span> <span class="title">IntGenerator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentEvenValue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ++currentEvenValue;</span><br><span class="line">        Thread.yield();</span><br><span class="line">        ++currentEvenValue;</span><br><span class="line">        <span class="keyword">return</span> currentEvenValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EvenChecker.test(<span class="keyword">new</span> SynchronizedEvenGenerator());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Using-explicit-Lock-objects"><a href="#Using-explicit-Lock-objects" class="headerlink" title="Using explicit Lock objects"></a>Using explicit Lock objects</h3><p>Java 5 的 concurrent 包中提供了一个 Lock 类来更精确的控制锁的范围，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MutexEvenGenerator</span> <span class="keyword">extends</span> <span class="title">IntGenerator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentEventValue = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ++currentEventValue;</span><br><span class="line">            Thread.yield();</span><br><span class="line">            ++currentEventValue;</span><br><span class="line">            <span class="keyword">return</span> currentEventValue;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EvenChecker.test(<span class="keyword">new</span> MutexEvenGenerator());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用上面这种写法，你需要注意， 调用 lock() 方法之后，一定要用 try-finally 的语法，将 unlock 放到 finally 中，并切 try block 里面完成 return 的动作，防止指在外面被改动。</p>
<p>相比于传统的 synchronized 方式，try-finally 代码更多，但是它给你机会再程序出错时做出补救。</p>
<p>通过使用 concurrent 包下的方法，你可以实现 re-try 的机制</p>
<p>下面的例子中定义了两个方法，untimed/timed 功能都是一样的，尝试获取锁，并打印获取的情况。main 中一开始，顺序执行，两个方法可以拿到锁，并在使用完后释放。后面通过匿名类，启动一个新线程，获取锁并不释放，后面再次调用之前的方法，返回获取锁失败。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttemptLocking</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">untimed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> captured = lock.tryLock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;tryLock(): &quot;</span> + captured);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(captured)</span><br><span class="line">                lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> captured = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            captured = lock.tryLock(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;tryLock(2, TimeUnit.SECONDS): &quot;</span> + captured);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (captured)</span><br><span class="line">                lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> AttemptLocking al = <span class="keyword">new</span> AttemptLocking();</span><br><span class="line">        al.untimed();</span><br><span class="line">        al.timed();</span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            &#123;setDaemon(<span class="keyword">true</span>);&#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                al.lock.lock();</span><br><span class="line">                System.out.println(<span class="string">&quot;acquired&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        al.untimed();</span><br><span class="line">        al.timed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// tryLock(): true</span></span><br><span class="line"><span class="comment">// tryLock(2, TimeUnit.SECONDS): true</span></span><br><span class="line"><span class="comment">// tryLock(): true</span></span><br><span class="line"><span class="comment">// acquired</span></span><br><span class="line"><span class="comment">// tryLock(2, TimeUnit.SECONDS): false</span></span><br></pre></td></tr></table></figure>

<h3 id="Atomicity-and-volatility"><a href="#Atomicity-and-volatility" class="headerlink" title="Atomicity and volatility"></a>Atomicity and volatility</h3><p>一个原子操作是指，如果这个操作开始了，那么只有在操作结束后，JVM 才会考虑进行上下文切换。考虑到原子操作这么冷门而且很危险，建议专家级别了再作原子操作代替 synchronized 的优化。</p>
<blockquote>
<p>The Goetz Test: If you can write a hight-perormance JVM for a modern microprocessor, then you are qualified to think about whether you can avoid synchronizing.</p>
</blockquote>
<p>鼓励使用官方为你写的工具包(concurrent)，而不是自己造的轮子。</p>
<p>‘simple operation’ 和 除了 long/double 的 primitive 类型的数据操作都是原子操作。JVM 在处理 long/double 时会分成两个指令处理，但是如果你为这两类数据加上 volatile 修饰之后，可以保证原子性。</p>
<p>在多核处理器系统中，visibility 是比 atomicity 更容易出问题的点。一个 task 进行的一个原子操作，由于改动存放在本地处理器的 cache 中，导致其他 task 不知道这个改动，从而导致不同 task 之间 application 的状态不一致。synchronization 机制可以保证一个 task 的改动在其他 task 上也可以被观察到。</p>
<p>volatile 也可以保证这一点。如果你声明了一个 volatile 变量，一旦写操作执行了，那么所有要读他的地方会立即观察到这个变化，其实是 local cache 的情况也能保证。volatile 会保证 write 的动作立即反应到驻内存中。</p>
<p>atomicity 和 volatility 是两个概念，一个非 volatile 的原子操作并不会被 flush 到主内存中，如果多个 task 对他进行操作，会产生不一致。如果多个 task 都要访问一个 field，那么他就需要声明为 volatile 类型，或者用 synchronization 来管理他。如果用了 synchronizaiton 管理，就不需要用 volatile 修饰了</p>
<p>优先考虑用 synchronization，这个是最安全的解决方案。</p>
<p>Java 中赋值和返回语句是原子操作，自增/减不是。。。Java 反编译自增代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//: concurrency/Atomicity.java</span></span><br><span class="line"><span class="comment">// &#123;Exec: javap -c Atomicity&#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Atomicity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span> </span>&#123; i++; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span> </span>&#123; i += <span class="number">3</span>; &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/* Output: (Sample) </span></span><br><span class="line"><span class="comment">... void f1();</span></span><br><span class="line"><span class="comment">   Code:</span></span><br><span class="line"><span class="comment">    0:        aload_0    </span></span><br><span class="line"><span class="comment">    1:        dup    </span></span><br><span class="line"><span class="comment">    2:        getfield        #2; //Field i:I    </span></span><br><span class="line"><span class="comment">    5:        iconst_1    </span></span><br><span class="line"><span class="comment">    6:        iadd    </span></span><br><span class="line"><span class="comment">    7:        putfield        #2; //Field i:I    </span></span><br><span class="line"><span class="comment">    10:        return  </span></span><br><span class="line"><span class="comment">void f2();</span></span><br><span class="line"><span class="comment">   Code:    </span></span><br><span class="line"><span class="comment">   0:        aload_0    </span></span><br><span class="line"><span class="comment">   1:        dup    </span></span><br><span class="line"><span class="comment">   2:        getfield        #2; //Field i:I    </span></span><br><span class="line"><span class="comment">   5:        iconst_3    </span></span><br><span class="line"><span class="comment">   6:        iadd    </span></span><br><span class="line"><span class="comment">   7:        putfield        #2; //Field i:I    </span></span><br><span class="line"><span class="comment">   10:        return</span></span><br></pre></td></tr></table></figure>

<p>可以看到在 get 和 put 指令中间，还会执行一些其他的指令。上下文切换有可能发生在执行这些指令的时候，所以并不是原子行的。</p>
<p>即使是 getValue() 这样的操作，虽然说他是原子操作，但是如果不加 synchronized 也可能会出问题. 下面的程序中，我们实现了一个自增函数 evenIncrement 并用 synchronized 修饰，在 run 中让他一直运行。在 main 中启动这个线程，并打印当前 i 的值。可以看到还是会出问题。问题有两个</p>
<ul>
<li>变量没有用 volatile 修饰</li>
<li>getValue 没有用 synchronized 修饰</li>
</ul>
<p>试了一下，即使 i 用 volatile 修饰了还是会出问题的</p>
<p>没有 synchronized 修饰时，程序允许 getValue 在状态不确定的情况下访问变量，所以会出问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicityTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> i; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">evenIncrement</span><span class="params">()</span> </span>&#123; i++; i++; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">            evenIncrement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        AtomicityTest at = <span class="keyword">new</span> AtomicityTest();</span><br><span class="line">        exec.execute(at);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = at.getValue();</span><br><span class="line">            <span class="keyword">if</span>(val %<span class="number">2</span> !=<span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(val);</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 423</span></span><br></pre></td></tr></table></figure>

<p>下面是一个更简单的例子，一个生成器给出一系列的数字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialNumberGenerator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> serialNumber = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextSerialNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialNumber++;  <span class="comment">// Not thread-safe</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将变量声明为 volatile 可以告诉编译器不要对它进行优化。读写会被直接反应到内存中，而不是 cache. 而且还能防止指令重排。但是它并不表示这个自增是一个原子操作。</p>
<p>通常来说，如果有多个 task 操作一个 field，并且至少有一个会对他进行写操作，那么你就要讲他声明为 volatile。比如 flag 的操作。</p>
<p>为了测试上面的这个类，我们创建了如下的测试类</p>
<p>CircularSet 是一个容器类，用来存储生成器产生的数据。定义了一个数组，可以指定大小。 add/contains 使用 synchronized 修饰。主线程中，启动 10 个线程生产数据并存到容器中。理论上来说，如果线程安全，容器中不会有重复数据，如果有，则报错，结束进程。</p>
<p>这里一个比较巧妙的设置是，CircularSet 会存储一个下标，如果生产的值超出容量，他会循环利用之前的位置，覆盖之前的值。</p>
<p>可以在 SerialNumberGenerator 的 nextSerialNumber 方法前添加 synchronized 修饰修复这个问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialNumberChecker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CircularSet serials = <span class="keyword">new</span> CircularSet(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialChecker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> serial = SerialNumberGenerator.nextSerialNumber();</span><br><span class="line">                <span class="keyword">if</span> (serials.contains(serial)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Duplicate: &quot;</span> + serial);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                serials.add(serial);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> SerialChecker());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="keyword">new</span> Integer(args[<span class="number">0</span>]));</span><br><span class="line">            System.out.println(<span class="string">&quot;No duplicates detected&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircularSet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircularSet</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        len = size;</span><br><span class="line">        <span class="comment">// Initialize to a value not produced by the SerialNumberChecker</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            array[i] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        array[index] = i;</span><br><span class="line">        <span class="comment">// Wrap index and write over old elements</span></span><br><span class="line">        index = ++index % len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] == val) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Duplicate: 47</span></span><br></pre></td></tr></table></figure>

<h3 id="Atomic-classes"><a href="#Atomic-classes" class="headerlink" title="Atomic classes"></a>Atomic classes</h3><p>Java 5 引入了原子类，如 AtomicInteger, AtomicLong 和 AtomicReference 等提供原子级别的更新操作。</p>
<blockquote>
<p>boolean compareAndSet(expectedValue, updateValue);</p>
</blockquote>
<p>他们做过优化，可以保证机器层面的原子性，一般来说，你可以放心使用。下面我们用他们来重写之前的测试类 AtomicityTest.java. 内部逻辑和之前一样，我们将 volatile 和 synchronized 关键字都去了，同时定义一个 main 函数，在里面使用 Timer 设置程序 5s 之后退出，到程序结束为止一切运行正常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicIntegerTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger i = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">evenIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        i.addAndGet(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">            evenIncrement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Timer().schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Aborting&quot;</span>);</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        AtomicIntegerTest ait = <span class="keyword">new</span> AtomicIntegerTest();</span><br><span class="line">        exec.execute(ait);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = ait.getValue();</span><br><span class="line">            <span class="keyword">if</span> (val % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(val);</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的，我们使用 AtomicInteger 重写 EvenGenerator</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicEvenGenerator</span> <span class="keyword">extends</span> <span class="title">IntGenerator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger currentEvenValue = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentEvenValue.addAndGet(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EvenChecker.test(<span class="keyword">new</span> AtomicEvenGenerator());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然 Atomic class 可以解决原子行问题，但是还是强烈推荐使用锁机制。</p>
<h3 id="Critial-sections"><a href="#Critial-sections" class="headerlink" title="Critial sections"></a>Critial sections</h3><p>我们可以通过 critical sections 的方式，只对一段代码进行保护而不是整个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(syncObject) &#123;</span><br><span class="line">    <span class="comment">// This code can be accessed</span></span><br><span class="line">    <span class="comment">// by only one task at a time</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式也叫做 synchronized block. 如果此时 syncObject 被其他 task lock 了，那么当前 task 会一直等待，直到 lock 被释放。以下示例对两种 lock 方式进行性能比较</p>
<p>Pair 是我们要操作的对象，线程不安全，这个模型就是内部存两个 int 变量，我们的目标是保证这两个变量想等。还有一个 checkState 方法，如果两个变量值不同，则抛异常。</p>
<p>PairManager 是一个抽象类，里面声明了一个用来存储 pair 的 list, 使用 Collections.synchronizedList() 得到，所以线程安全。 getPair() 也用 synchronized 修饰，线程安全。 store 虽然没有修饰但是只在实现类中调用，调用的时候会加 synchronized 限制。</p>
<p>PairManager1， PairManager2 都是 PairManager 的实现，区别是一个用了 method level 的 lock， 一个用了 block level 的 lock</p>
<p>PairManipulator 代表使用 PairManager 的 task, 我们通过它来启动多线程实现 PM 的 increment 调用</p>
<p>PairChecker 也是一个多线程的 task 它用来检测 PM 的状态并记录检测次数</p>
<p>CriticalSection 相当于 client，将上面说的这些元素整合并调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CriticalSection</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Test the two different approaches:</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testApproaches</span><span class="params">(PairManager pman1, PairManager pman2)</span> </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        PairManipulator</span><br><span class="line">                pm1 = <span class="keyword">new</span> PairManipulator(pman1),</span><br><span class="line">                pm2 = <span class="keyword">new</span> PairManipulator(pman2);</span><br><span class="line">        PairChecker</span><br><span class="line">                pcheck1 = <span class="keyword">new</span> PairChecker(pman1),</span><br><span class="line">                pcheck2 = <span class="keyword">new</span> PairChecker(pman2);</span><br><span class="line">        exec.execute(pm1);</span><br><span class="line">        exec.execute(pm2);</span><br><span class="line">        exec.execute(pcheck1);</span><br><span class="line">        exec.execute(pcheck2);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Sleep interrupted&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;pm1: &quot;</span> + pm1 + <span class="string">&quot;\npm2: &quot;</span> + pm2);</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PairManager</span><br><span class="line">                pman1 = <span class="keyword">new</span> PairManager1(),</span><br><span class="line">                pman2 = <span class="keyword">new</span> PairManager2();</span><br><span class="line">        testApproaches(pman1, pman2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x, y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">incrementX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">incrementY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        y++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x: &quot;</span> + x + <span class="string">&quot;, y: &quot;</span> + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PairValuesNotEqualException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PairValuesNotEqualException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(<span class="string">&quot;Pair values not equal: &quot;</span> + Pair.<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x != y)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PairValuesNotEqualException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PairManager</span> </span>&#123;</span><br><span class="line">    AtomicInteger checkCounter = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">protected</span> Pair p = <span class="keyword">new</span> Pair();</span><br><span class="line">    <span class="keyword">private</span> List&lt;Pair&gt; storage = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Pair <span class="title">getPair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Make a copy to keep the original safe:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pair(p.getX(), p.getY());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assme this is a time consuming peration</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">store</span><span class="params">(Pair p)</span> </span>&#123;</span><br><span class="line">        storage.add(p);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">50</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PairManager1</span> <span class="keyword">extends</span> <span class="title">PairManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        p.incrementX();</span><br><span class="line">        p.incrementY();</span><br><span class="line">        store(getPair());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use a critical section</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PairManager2</span> <span class="keyword">extends</span> <span class="title">PairManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Pair temp;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            p.incrementX();</span><br><span class="line">            p.incrementY();</span><br><span class="line">            temp = getPair();</span><br><span class="line">        &#125;</span><br><span class="line">        store(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PairManipulator</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PairManager pm;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PairManipulator</span><span class="params">(PairManager pm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pm = pm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">            pm.increment();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Pair: &quot;</span> + pm.getPair() + <span class="string">&quot; checkCounter = &quot;</span> + pm.checkCounter.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PairChecker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PairManager pm;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PairChecker</span><span class="params">(PairManager pm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pm = pm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            pm.checkCounter.incrementAndGet();</span><br><span class="line">            pm.getPair().checkState();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pm1: Pair: x: 42, y: 42 checkCounter = 2</span></span><br><span class="line"><span class="comment">// pm2: Pair: x: 42, y: 42 checkCounter = 2133930</span></span><br></pre></td></tr></table></figure>

<p>PS: Note that the synchronized keyword is not part of the method signature and thus may be added during overriding. </p>
<p>synchronized 不是方法签名的一部分！！</p>
<p>从输出的实验结果可以看到方法锁的可使用率要比 block 锁低很多，完全是碾压级别的差距。block 类型的锁可以提供更多的 unlock time.</p>
<p>下面通过使用 Lock 类来进行精确锁, 共能和之前的例子类似，只不过新实现了两个 PairManager 类，一个还是用方法级别的锁， ExplicitPairManager1 由于已经加了 synchronized 的了，里面的 lock 其实没什么用，去掉也不影响结果</p>
<p>ExplicitPairManager1 中直接使用了 Lock 类进行 block level 的锁。运行结果失败，会抛异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExplicitCriticalSection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PairManager</span><br><span class="line">                pman1 = <span class="keyword">new</span> ExplicitPairManager1(),</span><br><span class="line">                pman2 = <span class="keyword">new</span> ExplicitPairManager2();</span><br><span class="line">        CriticalSection.testApproaches(pman1, pman2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExplicitPairManager1</span> <span class="keyword">extends</span> <span class="title">PairManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            p.incrementX();</span><br><span class="line">            p.incrementY();</span><br><span class="line">            store(getPair());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExplicitPairManager2</span> <span class="keyword">extends</span> <span class="title">PairManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Pair temp;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            p.incrementX();</span><br><span class="line">            p.incrementY();</span><br><span class="line">            temp = getPair();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        store(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// @Override</span></span><br><span class="line">    <span class="comment">// public Pair getPair() &#123;</span></span><br><span class="line">    <span class="comment">//     lock.lock();</span></span><br><span class="line">    <span class="comment">//     try &#123;</span></span><br><span class="line">    <span class="comment">//         return new Pair(p.getX(), p.getY());</span></span><br><span class="line">    <span class="comment">//     &#125; finally &#123;</span></span><br><span class="line">    <span class="comment">//         lock.unlock();</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Exception in thread &quot;pool-1-thread-4&quot; org.jz.c23.Pair$PairValuesNotEqualException: Pair values not equal: x: 2, y: 1</span></span><br><span class="line"><span class="comment">//     at org.jz.c23.Pair.checkState(CriticalSection.java:83)</span></span><br><span class="line"><span class="comment">//     at org.jz.c23.PairChecker.run(CriticalSection.java:163)</span></span><br><span class="line"><span class="comment">// pm1: Pair: x: 127, y: 127 checkCounter = 3</span></span><br><span class="line"><span class="comment">// pm2: Pair: x: 127, y: 127 checkCounter = 1816160</span></span><br></pre></td></tr></table></figure>

<p>搜索了一下，发先这个<a href="https://blog.nex3z.com/2016/07/03/%E6%B7%B7%E7%94%A8%E5%90%8C%E6%AD%A5%E5%9D%97%E5%92%8C%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E6%97%B6%E7%9A%84%E9%97%AE%E9%A2%98/">博客</a>说的挺好. 总结一下就是 getPair 用的 synchronized 语法，而 increment 用的 Lock 类的方法，两个都是锁，但是拿到的锁是不一样的，将 getPair 重写一下，也用同样的 Lock 类提供的锁即可修复。</p>
<h3 id="Synchronizing-on-other-objects"><a href="#Synchronizing-on-other-objects" class="headerlink" title="Synchronizing on other objects"></a>Synchronizing on other objects</h3><p>synchronized block 的写法中，需要给出一个 lock 的对象，一般来说我们都会使用 this 作为参数，表示持有这个方法的对象就是我们要 lock 的对象。当然你也可以指定另一个对象，但是你一定要理清楚自己的业务逻辑，知道你要 lock 的对象是哪一个</p>
<p>下面例子中声明了一个 DualSynch 类，里面有两个方法，f(), g() 分别打印 5 次，f() 是 method lock，就是锁住自己的意思，g() 在内部指定锁住一个内部成员变量。在主函数中，我们通过新起线程调用 f()，在主函数中调用 g()。可以看到虽然外部 class 实体也有 lock 但是和内部的变量是不冲突的，两个 task 可以一起执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> DualSynch ds = <span class="keyword">new</span> DualSynch();</span><br><span class="line">        <span class="keyword">new</span> Thread(ds::f).start();</span><br><span class="line">        ds.g();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DualSynch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object syncObject = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;f()&quot;</span>);</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (syncObject) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;g()&quot;</span>);</span><br><span class="line">                Thread.yield();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// g()</span></span><br><span class="line"><span class="comment">// f()</span></span><br><span class="line"><span class="comment">// f()</span></span><br><span class="line"><span class="comment">// g()</span></span><br><span class="line"><span class="comment">// f()</span></span><br><span class="line"><span class="comment">// f()</span></span><br><span class="line"><span class="comment">// f()</span></span><br><span class="line"><span class="comment">// g()</span></span><br><span class="line"><span class="comment">// g()</span></span><br><span class="line"><span class="comment">// g()</span></span><br></pre></td></tr></table></figure>

<h3 id="Thread-local-storage"><a href="#Thread-local-storage" class="headerlink" title="Thread local storage"></a>Thread local storage</h3><p>Java 还提供了另一种解决多线程使用共享资源时的冲突问题，叫做 ThreadLocal.</p>
<p>对与被管理的变量，Thread local storage 会在不同的 thread 总为变量创建单独的副本，所以各个 thread 彼此不会被影响到。</p>
<p>下面的例子中 Accessor 是一个具体的 task，他会通过 while 循环不停的调用 holder 的 increment 方法并答应对应的值。</p>
<p>ThreadLocalVariableHolder 中持有一个 Integer 类型的 ThreadLocal 变量，提供自增长方法，在 main 函数中，启动五个线程，调用自增方法并打印。</p>
<p>可以看到每个线程中拿到的 integer 值都是不一样的，而且相互不影响。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalVariableHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; value = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="keyword">private</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> Integer <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> rand.nextInt(<span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        value.set(value.get() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> Accessor(i));</span><br><span class="line">        &#125;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Accessor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Accessor</span><span class="params">(<span class="keyword">int</span> idn)</span> </span>&#123;</span><br><span class="line">        id = idn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">            ThreadLocalVariableHolder.increment();</span><br><span class="line">            System.out.println(<span class="keyword">this</span>);</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;#&quot;</span> + id + <span class="string">&quot;: &quot;</span> + ThreadLocalVariableHolder.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #0: 9259</span></span><br><span class="line"><span class="comment">// #1: 556</span></span><br><span class="line"><span class="comment">// #2: 6694</span></span><br><span class="line"><span class="comment">// #0: 9260</span></span><br><span class="line"><span class="comment">// #2: 6695</span></span><br><span class="line"><span class="comment">// #1: 557</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h2 id="Terminating-tasks"><a href="#Terminating-tasks" class="headerlink" title="Terminating tasks"></a>Terminating tasks</h2><p>本章介绍如何外部结束 task</p>
<h3 id="The-ornamental-garden"><a href="#The-ornamental-garden" class="headerlink" title="The ornamental garden"></a>The ornamental garden</h3><p>下面的例子模拟一个植物园的场景，植物园入口处有闸机，通过统计闸机记述统计园内总人数。只做演示用，没有其他深意。</p>
<p>Count 用来管理总人数，提供 increment 和 value 方法，且都是 synchronized 修饰的。increment 中还包含一个 yield 方法用来提高多线程问题出发的概率。</p>
<p>Entrance 表示入口，他持有一个 Count 的静态变量，用来合计总人数。同时还申明了一个 number 的成员变量，用来审计从这个门进入的游客数量。声明 entrances 这个静态变量，用于线程结束后的统计，cancel 声明为 volatile 用来控制 task 的结束。</p>
<p>OrnamentalGarden 为 client 端，他的 main 函数会启动五个线程模拟入园操作。3s 后结束，分别答应 number 加和以及 count 值做统计，两个值应该是一样的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrnamentalGarden</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> Entrance(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Run for a while then stop and collect the data:</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        Entrance.cancel();</span><br><span class="line">        exec.shutdown();</span><br><span class="line">        <span class="keyword">if</span> (!exec.awaitTermination(<span class="number">250</span>, TimeUnit.MILLISECONDS))</span><br><span class="line">            System.out.println(<span class="string">&quot;Some task were not terminated!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Total: &quot;</span> + Entrance.getTotalCount());</span><br><span class="line">        System.out.println(<span class="string">&quot;Sum of Entrances: &quot;</span> + Entrance.sumEntrances());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove the synchronized keyword to see counting fail:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = count;</span><br><span class="line">        <span class="keyword">if</span> (rand.nextBoolean()) <span class="comment">// Yield half the time</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        <span class="keyword">return</span> (count = ++temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entrance</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Count count = <span class="keyword">new</span> Count();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Entrance&gt; entrances = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Doesn&#x27;t need synchronization to read:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> canceled = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Atomic operation on a volatile field:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        canceled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Entrance</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="comment">// Keep this task in a list. Also prevents garbage collection of dead tasks:</span></span><br><span class="line">        entrances.add(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!canceled) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                ++number;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="keyword">this</span> + <span class="string">&quot; Total: &quot;</span> + count.increment());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Sleep interrupted&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Stopping &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Entrance &quot;</span> + id + <span class="string">&quot;: &quot;</span> + getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count.value();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sumEntrances</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Entrance entrance : entrances) &#123;</span><br><span class="line">            sum += entrance.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Entrance 0: 1 Total: 1</span></span><br><span class="line"><span class="comment">// Entrance 2: 1 Total: 3</span></span><br><span class="line"><span class="comment">// Entrance 1: 1 Total: 2</span></span><br><span class="line"><span class="comment">// Entrance 3: 1 Total: 4</span></span><br><span class="line"><span class="comment">// Entrance 4: 1 Total: 5</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// Entrance 2: 30 Total: 150</span></span><br><span class="line"><span class="comment">// Entrance 1: 30 Total: 148</span></span><br><span class="line"><span class="comment">// Stopping Entrance 3: 30</span></span><br><span class="line"><span class="comment">// Stopping Entrance 4: 30</span></span><br><span class="line"><span class="comment">// Stopping Entrance 1: 30</span></span><br><span class="line"><span class="comment">// Stopping Entrance 2: 30</span></span><br><span class="line"><span class="comment">// Stopping Entrance 0: 30</span></span><br><span class="line"><span class="comment">// Total: 150</span></span><br><span class="line"><span class="comment">// Sum of Entrances: 150</span></span><br></pre></td></tr></table></figure>

<h3 id="Terminating-when-blocked"><a href="#Terminating-when-blocked" class="headerlink" title="Terminating when blocked"></a>Terminating when blocked</h3><h4 id="Thread-states"><a href="#Thread-states" class="headerlink" title="Thread states"></a>Thread states</h4><p>一个 Thread 可能处于四种状态中的任意一种</p>
<ol>
<li>New: 这种状态很短暂，在创建线程的时候出现。系统为他配置所需要的资源，完成后，scheduler 会把它置于 runnable 或者 blocked</li>
<li>Runnable: 当 CPU 有空闲时就可以运行它</li>
<li>Blocked: 可以运行，但是被阻止了。CPU 会直接跳过它。</li>
<li>Dead: task 结束了，不会再被 schedule。从 run() 中返回，或者被 interrupted 时会处于这种状态。</li>
</ol>
<h4 id="Becoming-blocked"><a href="#Becoming-blocked" class="headerlink" title="Becoming blocked"></a>Becoming blocked</h4><p>一下情况会导致 task 进入 block 状态</p>
<ul>
<li>调用 sleep() 方法</li>
<li>调用 wait() 方法，可以调用 notify()/notifyAll() 解除</li>
<li>等待 I/O 完成</li>
<li>调用其他被 lock 的方法时</li>
</ul>
<h4 id="Interruption"><a href="#Interruption" class="headerlink" title="Interruption"></a>Interruption</h4><p>和你预期的一样，在 thread 中间打断它要比等到它出来，判断 cancel flag 结束要复杂的多，你打断 thread 的时候可能要处理很多 clean up 的操作。</p>
<p>你可以通过 Thread.interrupt() 方法打断线程，这个方法会将线程设置为 interrupted 状态，然后这个线程就会抛出 InterruptedException. 这个状态会在异常抛出或者调用 Thread.interrupted() 方法的时候置位。interrupted() 是另一种结束 run() 而不抛异常的方法。</p>
<p>为了调用 interrupt() 方法，你需要持有 Thread 对象。Java 提供的 concurrent 包让你避免直接使用 Thread，你可以用 Executor 来完成这类工作。shutdownNow() 会向它开启的所有线程发送 interrupt() 指令。如果你想单独控制某个 task 你可以使用 Executor 的 submit() 方法，它会返回 Feature 对象，你可以调用 feature.cancel(true) 来给对应的 task 传递 interrupt 指令。</p>
<p>下面是通过 feature.cancel() 来中断线程的测试, 定义了三种 block</p>
<p>SleepBlocked: 普通的 Runnable 实现，在 run 方法中，sleep 100s 作为 block</p>
<p>IOBlocked: 普通的 Runnable 实现，run 中读取输入流的内容</p>
<p>SynchronizedBlocked: f() 中无限循环调用 yield, 在构造函数中新起一个线程，调用 f(), 然后 main 中通过 test 起新线程制造 lock</p>
<p>Interrupting: 测试类， 写了一个 test 方法，接收 Runnable 实现，并通过 submit() 运行，然后通过 cancel(true) 中断 task. main 函数中将之前定义的 block 分别进行 test。</p>
<p>从输出可以看出，你可以 interrupt sleep 类型的 block，但是不能打断 IO 或者 Synchronized 类型的锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interrupting</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Runnable r)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Future&lt;?&gt; f = exec.submit(r);</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Interrupting &quot;</span> + r.getClass().getName());</span><br><span class="line">        f.cancel(<span class="keyword">true</span>); <span class="comment">// Interrupts if running</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Interrupt sent to &quot;</span> + r.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        test(<span class="keyword">new</span> SleepBlocked());</span><br><span class="line">        test(<span class="keyword">new</span> IOBlocked(System.in));</span><br><span class="line">        test(<span class="keyword">new</span> SynchronizedBlocked());</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Aborting with System.exit(0)&quot;</span>);</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SleepBlocked</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;InterruptedException&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Existing SleepBlocked.run()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IOBlocked</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IOBlocked</span><span class="params">(InputStream in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.in = in;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Waiting for read(): &quot;</span>);</span><br><span class="line">            in.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Interrupted from blocked I/O&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Exiting IOBlocked.run()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynchronizedBlocked</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">            Thread.yield();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SynchronizedBlocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                f(); <span class="comment">// Lock acquired by this thread</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Trying to call f()&quot;</span>);</span><br><span class="line">        f();</span><br><span class="line">        System.out.println(<span class="string">&quot;Exiting SynchronizedBlocked.run()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Interrupting org.jz.c23.SleepBlocked</span></span><br><span class="line"><span class="comment">// Interrupt sent to org.jz.c23.SleepBlocked</span></span><br><span class="line"><span class="comment">// InterruptedException</span></span><br><span class="line"><span class="comment">// Existing SleepBlocked.run()</span></span><br><span class="line"><span class="comment">// Waiting for read(): </span></span><br><span class="line"><span class="comment">// Interrupting org.jz.c23.IOBlocked</span></span><br><span class="line"><span class="comment">// Interrupt sent to org.jz.c23.IOBlocked</span></span><br><span class="line"><span class="comment">// Trying to call f()</span></span><br><span class="line"><span class="comment">// Interrupting org.jz.c23.SynchronizedBlocked</span></span><br><span class="line"><span class="comment">// Interrupt sent to org.jz.c23.SynchronizedBlocked</span></span><br><span class="line"><span class="comment">// Aborting with System.exit(0)</span></span><br></pre></td></tr></table></figure>

<p>有时你可以通过关闭底层的 resource 来中断 IO, 从输出可以看到， Socket 的输入流是通过异常关闭的，而 System.in 不是。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloseResource</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        ServerSocket server  = <span class="keyword">new</span> ServerSocket(<span class="number">8080</span>);</span><br><span class="line">        InputStream socketInput = <span class="keyword">new</span> Socket(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>).getInputStream();</span><br><span class="line"></span><br><span class="line">        exec.execute(<span class="keyword">new</span> IOBlocked(socketInput));</span><br><span class="line">        exec.execute(<span class="keyword">new</span> IOBlocked(System.in));</span><br><span class="line"></span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Shutting down all threads&quot;</span>);</span><br><span class="line">        exec.shutdownNow();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Closing &quot;</span> + socketInput.getClass().getName());</span><br><span class="line">        socketInput.close(); <span class="comment">// Releases blocked thread</span></span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Closing &quot;</span> + System.in.getClass().getName());</span><br><span class="line">        System.in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Waiting for read(): </span></span><br><span class="line"><span class="comment">// Waiting for read(): </span></span><br><span class="line"><span class="comment">// Shutting down all threads</span></span><br><span class="line"><span class="comment">// Closing java.net.SocketInputStream</span></span><br><span class="line"><span class="comment">// Interrupted from blocked I/O</span></span><br><span class="line"><span class="comment">// Exiting IOBlocked.run()</span></span><br><span class="line"><span class="comment">// Closing java.io.BufferedInputStream</span></span><br><span class="line"><span class="comment">// Exiting IOBlocked.run()</span></span><br></pre></td></tr></table></figure>

<p>好消息是 nio 相关的类有提供更好的终端 IO 的方法. blocked nio channels 会自动相应 interrupt 信号。</p>
<p>从输出可以看到，关闭底层的 channel 会释放 block，虽然这种方式和少用到。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOInterruption</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8080</span>);</span><br><span class="line">        InetSocketAddress isa = <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">        SocketChannel sc1 = SocketChannel.open(isa);</span><br><span class="line">        SocketChannel sc2 = SocketChannel.open(isa);</span><br><span class="line">        Future&lt;?&gt; f = exec.submit(<span class="keyword">new</span> NIOBlocked(sc1));</span><br><span class="line">        exec.execute(<span class="keyword">new</span> NIOBlocked(sc2));</span><br><span class="line">        exec.shutdown();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// Produce an interrupt via cancel;</span></span><br><span class="line">        f.cancel(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// Release the block by closing the channel</span></span><br><span class="line">        sc2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NIOBlocked</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SocketChannel sc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NIOBlocked</span><span class="params">(SocketChannel sc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sc = sc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Waiting for read() in &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">            sc.read(ByteBuffer.allocate(<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClosedByInterruptException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ClosedByInterruptException&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AsynchronousCloseException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;AsynchronousCloseException&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Exiting NIOBlocked.run() &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Waiting for read() in org.jz.c23.NIOBlocked@2bc68519</span></span><br><span class="line"><span class="comment">// Waiting for read() in org.jz.c23.NIOBlocked@50b0c91f</span></span><br><span class="line"><span class="comment">// ClosedByInterruptException</span></span><br><span class="line"><span class="comment">// Exiting NIOBlocked.run() org.jz.c23.NIOBlocked@2bc68519</span></span><br><span class="line"><span class="comment">// AsynchronousCloseException</span></span><br><span class="line"><span class="comment">// Exiting NIOBlocked.run() org.jz.c23.NIOBlocked@50b0c91f</span></span><br></pre></td></tr></table></figure>

<h4 id="Blocked-by-a-mutex"><a href="#Blocked-by-a-mutex" class="headerlink" title="Blocked by a mutex"></a>Blocked by a mutex</h4><p>从 Interrupting.java 的例子可以看到，如果我们调用一个对象的 synchronized 方法，如果该方法的 lock 已经被获取了，那么这个 task 会 block 并等到 lock 被释放后再调用。下面的例子展示了同一个 task 如何多次获取同一个对象的锁</p>
<p>MultiLock 有两个方法 f, g 分别调用对方，并用 synchronized 关键字修饰。每次方法被调用时，方法的实例都会被 lock 一次。</p>
<p>举一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;f1() calling f2() with count &quot;</span> + count);</span><br><span class="line">            f2(count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;f2() calling f1() with count &quot;</span> + count);</span><br><span class="line">            f1(count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> MultiLock multiLock = <span class="keyword">new</span> MultiLock();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; multiLock.f1(<span class="number">10</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// f1() calling f2() with count 9</span></span><br><span class="line"><span class="comment">// f2() calling f1() with count 8</span></span><br><span class="line"><span class="comment">// f1() calling f2() with count 7</span></span><br><span class="line"><span class="comment">// f2() calling f1() with count 6</span></span><br><span class="line"><span class="comment">// f1() calling f2() with count 5</span></span><br><span class="line"><span class="comment">// f2() calling f1() with count 4</span></span><br><span class="line"><span class="comment">// f1() calling f2() with count 3</span></span><br><span class="line"><span class="comment">// f2() calling f1() with count 2</span></span><br><span class="line"><span class="comment">// f1() calling f2() with count 1</span></span><br><span class="line"><span class="comment">// f2() calling f1() with count 0</span></span><br></pre></td></tr></table></figure>

<p>这个例子的说明不是很懂，但是大概就是 concurrency lib 的 RenntrantLocks 提供了一种打断机制</p>
<p>BlockedMutex 持有 ReentrantLock 变量，并在构造函数中 lock，提供 f() 方法，调用 lock.lockInterruptibly(); 由于构造中的 lock，这个方法会一直 block。</p>
<p>Blocked2 新建 BlockedMutex 对象，导致上锁。然后调用 f() 被 block。</p>
<p>Interrupting2 在启动 Blocked2 之后 1s 进行打断，interrupt 成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interrupting2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Blocked2());</span><br><span class="line">        t.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Issuing t.interrupt()&quot;</span>);</span><br><span class="line">        t.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockedMutex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlockedMutex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Acquire it right away, to demonstrate interruption of a task blocked on a ReentrantLock</span></span><br><span class="line">        lock.lock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// This will never be available to a second task</span></span><br><span class="line">            lock.lockInterruptibly();</span><br><span class="line">            System.out.println(<span class="string">&quot;lock acquired in f()&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Interrupted from lock acquisition in f()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blocked2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    BlockedMutex blocked = <span class="keyword">new</span> BlockedMutex();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Waiting for f() in BlockedMutex&quot;</span>);</span><br><span class="line">        blocked.f();</span><br><span class="line">        System.out.println(<span class="string">&quot;Broken out of blocked call&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Waiting for f() in BlockedMutex</span></span><br><span class="line"><span class="comment">// Issuing t.interrupt()</span></span><br><span class="line"><span class="comment">// Interrupted from lock acquisition in f()</span></span><br><span class="line"><span class="comment">// Broken out of blocked call</span></span><br></pre></td></tr></table></figure>

<h3 id="Checking-for-an-interrupt"><a href="#Checking-for-an-interrupt" class="headerlink" title="Checking for an interrupt"></a>Checking for an interrupt</h3><p>TBD</p>
<h2 id="Cooperation-between-tasks"><a href="#Cooperation-between-tasks" class="headerlink" title="Cooperation between tasks"></a>Cooperation between tasks</h2><p>通过之前的章节，我们知道可以通过互斥锁来控制多个 task 对一个资源的访问。</p>
<p>这章我们会学习如何通过内置方法，协调多个 task 之间对一个资源的调用。Object 提供了 wait()/notifyAll()，concurrent lib 提供了 await()/signal() 来完成这些功能。</p>
<h3 id="wait-and-notifyAll"><a href="#wait-and-notifyAll" class="headerlink" title="wait() and notifyAll()"></a>wait() and notifyAll()</h3><p>下面将 wait/notifyAll 应用在汽车打蜡的场景</p>
<p>Car 代表将会被 lock 的类, 提供了四个方法，使用 synchronized 修饰，分别是打蜡，抛光，等待上蜡，等待抛光。</p>
<p>WaxOn 代表上蜡的 task, 接收一个 car 做参数，在 run 中，打印状态并将 car 的 flag 置位 true，等待抛光</p>
<p>WaxOff 代表抛光的 task, 接收一个 car 做参数，在 run 中，打印状态并将 car 的 flag 置位 false, 并等待打蜡</p>
<p>WaxOMatic 新建 car 对象，并启动两个 task 让他们轮流操作 car, 并在一定时间后结束操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaxOMatic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car();</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        exec.execute(<span class="keyword">new</span> WaxOff(car));</span><br><span class="line">        exec.execute(<span class="keyword">new</span> WaxOn(car));</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        exec.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> waxOn = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waxed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        waxOn = <span class="keyword">true</span>; <span class="comment">// Ready to buff</span></span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buffed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        waxOn = <span class="keyword">false</span>; <span class="comment">// Ready for another coat of wax</span></span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waitForWaxing</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (waxOn == <span class="keyword">false</span>)</span><br><span class="line">            wait();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waitForBuffing</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (waxOn == <span class="keyword">true</span>)</span><br><span class="line">            wait();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaxOn</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WaxOn</span><span class="params">(Car c)</span> </span>&#123;</span><br><span class="line">        car = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (!Thread.interrupted()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Wax On!&quot;</span>);</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">200</span>);</span><br><span class="line">                car.waxed();</span><br><span class="line">                car.waitForBuffing();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Exiting via interrupt&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Ending Wax On task&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaxOff</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WaxOff</span><span class="params">(Car c)</span> </span>&#123;</span><br><span class="line">        car = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (!Thread.interrupted()) &#123;</span><br><span class="line">                car.waitForWaxing();</span><br><span class="line">                System.out.println(<span class="string">&quot;Wax Off!&quot;</span>);</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">200</span>);</span><br><span class="line">                car.buffed();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Exiting via interrupt&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Ending Wax Off task&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Wax On!</span></span><br><span class="line"><span class="comment">// Wax Off!</span></span><br><span class="line"><span class="comment">// Wax On!</span></span><br><span class="line"><span class="comment">// Wax Off!</span></span><br><span class="line"><span class="comment">// Wax On!</span></span><br><span class="line"><span class="comment">// Wax Off!</span></span><br><span class="line"><span class="comment">// Wax On!</span></span><br><span class="line"><span class="comment">// Wax Off!</span></span><br><span class="line"><span class="comment">// Wax On!</span></span><br><span class="line"><span class="comment">// Wax Off!</span></span><br><span class="line"><span class="comment">// Exiting via interrupt</span></span><br><span class="line"><span class="comment">// Ending Wax Off task</span></span><br><span class="line"><span class="comment">// Exiting via interrupt</span></span><br><span class="line"><span class="comment">// Ending Wax On task</span></span><br></pre></td></tr></table></figure>

<p>上面的例子中需要强调的一点是，你必须将 wait() 用 while 包裹起来，因为</p>
<ul>
<li>多个 task 等待同一个 lock 时，前面的 task 可能会改变某些条件，当前的 task 需要 block 住知道条件允许</li>
<li>当前 task 唤醒后，可能条件不允许，他要继续等待</li>
<li>当前 task 唤醒后，可能操作的对象还在 block 中，那它就要继续 wait</li>
</ul>
<h4 id="Missed-Singals"><a href="#Missed-Singals" class="headerlink" title="Missed Singals"></a>Missed Singals</h4><p>当两个 task 在通过 notify()/wait() 或者 notifyAll()/wait() 协调工作时，有可能错过一些指令，比如下面的例子</p>
<p><setup condition for T2> 会组织 T2 调用 wait</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">T1: </span><br><span class="line">synchronized(sharedMonitor) &#123;</span><br><span class="line">    &lt;setup condition for T2&gt;</span><br><span class="line">    sharedMonitor.notify(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T2: </span><br><span class="line">while(someCondition) &#123;</span><br><span class="line">    // Point 1   </span><br><span class="line">    synchronized(sharedMonitor) </span><br><span class="line">    &#123;     </span><br><span class="line">        sharedMonitor.wait();   </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>假设 T2 通过了 someCondition 的验证，在 Point1 时，切换到 T1，然后 T1 拿到锁并运行就结束，发出 notify() 这时切换回 T2 继续运行，发现 T2 一直等待，就死锁了。</p>
<p>T2 的正确写法应该是</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">synchronized(sharedMonitor) &#123;</span><br><span class="line">    while(someCondition)</span><br><span class="line">        sharedMonitor.wait();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果 T1 先运行，当返回到 T2 时，回判断 condition 不满足，将不会进入等待状态。相反，当 T2 先运行，他会进如 wait, 等待 T1 唤醒</p>
<p>PS: 看的很迷，我的逻辑应该是错的，但是我放弃思考了。。。</p>
<h3 id="notify-vs-notifyAll"><a href="#notify-vs-notifyAll" class="headerlink" title="notify() vs notifyAll()"></a>notify() vs notifyAll()</h3><p>notify 是 notifyAll 的一个优化，由于 notify 只会唤醒一个 task. 如果你要使用它，请确保，在你调用的时候只有想要调用的那个 task 是处于等待状态的。</p>
<p>notifyAll() 并不会 wake up “all waiting tasks”, only the tasks that are waiting on a particular lock are awoken when notifyAll() is called/or that lock</p>
<p>实验说明如下：</p>
<p>Blocker 是操作的对象类，提供三个方法，waitingCall 用来停留在 wait() 状态，prod/prodAll 分别是唤醒单个和唤醒全部线程。</p>
<p>Task1/2 分别是两个 task, 功能一样，唯一的作用是提供提供两个操作类进行实验。</p>
<p>NotifyVsNotifyAll 为 client 类，先启动 5 个 Task1，再启动 1 个 Task2. 6 个线程都停留在 wait 状态。然后通过 timer 分别出发 Task1 的 prod 和 prodAll 方法，从输出可以看到，当调用 notify 时只有一个 Task1 被唤醒，当调用 notifyAll 时，所有 Task1 都醒了，Task2 毫无反应。只有最后结束时调用了 Task2 的 prodAll 时，Task2 对应的线程被唤醒。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyVsNotifyAll</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> Task());</span><br><span class="line">        &#125;</span><br><span class="line">        exec.execute(<span class="keyword">new</span> Task2());</span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        timer.scheduleAtFixedRate(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="keyword">boolean</span> prod = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (prod) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;\nnotify() &quot;</span>);</span><br><span class="line">                    Task.blocker.prod();</span><br><span class="line">                    prod = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;\nnotifyAll() &quot;</span>);</span><br><span class="line">                    Task.blocker.prodAll();</span><br><span class="line">                    prod = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        timer.cancel();</span><br><span class="line">        System.out.println(<span class="string">&quot;\nTimer canceled&quot;</span>);</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Task2.blocker.prodAll() &quot;</span>);</span><br><span class="line">        Task2.blocker.prodAll();</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;\nShutting down&quot;</span>);</span><br><span class="line">        exec.shutdownNow();<span class="comment">// Interrupt all tasks</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blocker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waitingCall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (!Thread.interrupted()) &#123;</span><br><span class="line">                wait();</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// OK to exit this way</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">prod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">prodAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Blocker blocker = <span class="keyword">new</span> Blocker();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        blocker.waitingCall();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// A separate Blocker object:</span></span><br><span class="line">    <span class="keyword">static</span> Blocker blocker = <span class="keyword">new</span> Blocker();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        blocker.waitingCall();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// notify() </span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-1,5,main] </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// notifyAll() </span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-2,5,main] </span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-1,5,main] </span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-5,5,main] </span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-4,5,main] </span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-3,5,main] </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Timer canceled</span></span><br><span class="line"><span class="comment">// Task2.blocker.prodAll() </span></span><br><span class="line"><span class="comment">// Thread[pool-1-thread-6,5,main] </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Shutting down</span></span><br></pre></td></tr></table></figure>

<p>暂时就先看到这儿把，耐心已经磨光了，以后有动力了再接着看</p>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>concurrency</tag>
      </tags>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ASM 中的一些基本概念</title>
    <url>/hexo/2020/11/18/ASM-basic-concept/</url>
    <content><![CDATA[<p>记录下收集到的 ASM 的基础概念和例子</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://gitlab.ow2.org/asm/asm/-/blob/master/asm/src/test/java/org/objectweb/asm/TypeTest.java">ASM 官方 repo</a></p>
<h2 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h2><p>Type 类代 field 和 method 的 descriptor 属性。就是类似 <code>(Ljava/lang/String;)V</code> 这种表达式。该类中所有的方法几乎都是静态的，提供的功能也基本一致，传入某种类型的参数，然后返回代表 descriptor 的 type 对象。当传入为 method 类型的参数时，type 中会包含 <code>参数 + 返回值</code> 类型信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">    System.out.println(Type.getType(String.class));</span><br><span class="line">    System.out.println(Type.getType(<span class="keyword">this</span>.getClass().getMethod(<span class="string">&quot;testGetTypeFromDescriptor&quot;</span>, String.class)));</span><br><span class="line">    System.out.println(Arrays.toString(Type.getArgumentTypes(<span class="string">&quot;(Ljava/lang/String;)V&quot;</span>)));</span><br><span class="line">    System.out.println(Type.getType(<span class="keyword">this</span>.getClass().getMethod(<span class="string">&quot;getList&quot;</span>)));</span><br><span class="line">    System.out.println(Type.getType(<span class="keyword">this</span>.getClass().getMethod(<span class="string">&quot;getArr&quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetTypeFromDescriptor</span><span class="params">(<span class="keyword">final</span> String descriptor)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> Collections.emptyList();&#125;</span><br><span class="line"><span class="keyword">public</span> String[] getArr() &#123;<span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">&quot;A&quot;</span>&#125;;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Ljava/lang/String;</span></span><br><span class="line"><span class="comment">// (Ljava/lang/String;)V</span></span><br><span class="line"><span class="comment">// [Ljava/lang/String;]</span></span><br><span class="line"><span class="comment">// ()Ljava/util/List;</span></span><br><span class="line"><span class="comment">// ()[Ljava/lang/String;</span></span><br></pre></td></tr></table></figure>

<h2 id="Junit5-是怎么实现-Excutable-接口的？-看不懂"><a href="#Junit5-是怎么实现-Excutable-接口的？-看不懂" class="headerlink" title="Junit5 是怎么实现 Excutable 接口的？ 看不懂"></a>Junit5 是怎么实现 Excutable 接口的？ 看不懂</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConstructor_validApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Executable constructor = () -&gt; <span class="keyword">new</span> ClassVisitor(Opcodes.ASM4) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    assertDoesNotThrow(constructor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ClassReader"><a href="#ClassReader" class="headerlink" title="ClassReader"></a>ClassReader</h2><p>这个类可以看作字节码文件的读操作的入口，只负责读取，其他处理逻辑是在 XXXVisitor 里面实现的。</p>
<p>PS: 该类方法打印的类信息都是斜线 <code>/</code> 分割的</p>
<h2 id="官方测试是怎么测试-ClassReader-ClassVisitor-等类的"><a href="#官方测试是怎么测试-ClassReader-ClassVisitor-等类的" class="headerlink" title="官方测试是怎么测试 ClassReader, ClassVisitor 等类的"></a>官方测试是怎么测试 ClassReader, ClassVisitor 等类的</h2><p>ClassReader 其核心功能有两个，一个是解析文件流，拿到基本信息，比如编译版本，常量池信息等。另一个是定义 Visitor 接解析顺序。</p>
<p>测试时官方也分两类，第一类就是测试解析出来的信息，比如 ‘testGetClassName’ 等，第二类就是测试流程的，比如 ‘testAccept_emptyVisitor’。</p>
<p>测试 Visitor 时也很简单，定义一个自己的 Visitor，官方示例中是定义一个 LogMethodVisitor，然后直接调用对应 visitor.visitMethodInsn 等方法，测试自定义在 LogMethodVisitor 里的逻辑是不是符合预期就行了。这个还是很有启发的，可以用这种方法来完善 TraceSonar 的项目。</p>
<h2 id="Class-文件的格式"><a href="#Class-文件的格式" class="headerlink" title="Class 文件的格式"></a>Class 文件的格式</h2><p>以 ASM 官方例子的 <code>ClassVisitorTest.class</code> 为例，注意查看的是 <code>.class</code> 文件，不是 <code>.java</code> 文件。下载插件 BinEd 可以查看文件在不同进制下的内容。右键 class 文件 <code>open as Binary</code> 即可。</p>
<p>Class 文件在格式上有特殊的规定，比如以 16 进制打开 class 可以看到前 4 位值为：0xCAFE(B1100 1010 1111 1110/202 254)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadByte</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ClassReader classReader = <span class="keyword">new</span> ClassReader(getClass().getName());</span><br><span class="line">    System.out.println(bytesToHex(Arrays.copyOf(classReader.classFileBuffer, <span class="number">2</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] HEX_ARRAY = <span class="string">&quot;0123456789ABCDEF&quot;</span>.toCharArray();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">bytesToHex</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] hexChars = <span class="keyword">new</span> <span class="keyword">char</span>[bytes.length * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; bytes.length; j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = bytes[j] &amp; <span class="number">0xFF</span>;</span><br><span class="line">        hexChars[j * <span class="number">2</span>] = HEX_ARRAY[v &gt;&gt;&gt; <span class="number">4</span>];</span><br><span class="line">        hexChars[j * <span class="number">2</span> + <span class="number">1</span>] = HEX_ARRAY[v &amp; <span class="number">0x0F</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(hexChars);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: CAFE</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>asm</tag>
      </tags>
  </entry>
  <entry>
    <title>插入排序</title>
    <url>/hexo/2021/04/20/Algorithm-insertion-sort/</url>
    <content><![CDATA[<ul>
<li>参考<a href="https://zhuanlan.zhihu.com/p/122293204">动图</a></li>
</ul>
<p>插入排序是一个很基础的排序方法，基本解法思路为：</p>
<p>将待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</p>
<p>时间复杂度：O(n<sup>2</sup>)</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 第一次计算，拿二号元素和一号元素比较，如果二号小于一号，交换位置。计算后前两个元素为规则元素</span></span><br><span class="line"><span class="comment"> * 2. 第二次计算，拿三号元素依次和二号，一号做比较，如果三号小于其中某个元素，交换位置</span></span><br><span class="line"><span class="comment"> * 3. 重复以上规则对剩余元素进行排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertionSortDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] sample = <span class="keyword">new</span> Random().ints(<span class="number">0</span>, <span class="number">100</span>).limit(<span class="number">10</span>).toArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;Origin: &quot;</span> + Arrays.toString(sample));</span><br><span class="line"></span><br><span class="line">        insertionSort(sample);</span><br><span class="line">        System.out.println(<span class="string">&quot;After:  &quot;</span> + Arrays.toString(sample));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span>[] sample)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sample.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sample[j] &lt; sample[j-<span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(sample, j, j-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] sample, <span class="keyword">int</span> pos1, <span class="keyword">int</span> pos2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = sample[pos1];</span><br><span class="line">        sample[pos1] = sample[pos2];</span><br><span class="line">        sample[pos2] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Origin: [54, 66, 34, 28, 0, 10, 6, 61, 42, 97]</span></span><br><span class="line"><span class="comment">// After:  [0, 6, 10, 28, 34, 42, 54, 61, 66, 97]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>插入排序</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/hexo/2021/04/08/Algorithm-quick-sort/</url>
    <content><![CDATA[<p>分而治之（divide and conquer，D&amp;C）- 种著名的递归式问题解决方法</p>
<h2 id="4-1-分而治之"><a href="#4-1-分而治之" class="headerlink" title="4.1 分而治之"></a>4.1 分而治之</h2><p>练习1: 有一块 1680 x 640 的土地，将它等分成一个个正方形，那么正方形面积最大时，边长为多少？</p>
<p>解决方案，根据 欧几里得 算法，我们先将长方形分解成 640x640 + 640x640 + 640x400，然后再将 640x400 的长方形按照同样的方式分解，到最后分解为正方形时就是我们要的答案了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSquar</span>(<span class="params">length, width</span>):</span> </span><br><span class="line">    <span class="keyword">if</span> length%width == <span class="number">0</span>: </span><br><span class="line">        <span class="keyword">return</span> width </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> getSquar(width, length%width) </span><br><span class="line"></span><br><span class="line">getSquar(<span class="number">1680</span>, <span class="number">640</span>) </span><br><span class="line"><span class="comment"># 80</span></span><br></pre></td></tr></table></figure>

<p>重申一下D&amp;C的工作原理：</p>
<ol>
<li>找出简单的基线条件</li>
<li>确定如何缩小问题的规模，使其符合基线条件</li>
</ol>
<p>练习2: 使用 D&amp;C 的思路计算一个数组的和, sum = first + sum(sec…end)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [sub <span class="keyword">for</span> sub <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">list</span>):</span></span><br><span class="line">    <span class="keyword">if</span> list:</span><br><span class="line">        <span class="keyword">return</span> list[<span class="number">0</span>] + sum(list[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">sum(list)</span><br><span class="line"><span class="comment"># 45</span></span><br></pre></td></tr></table></figure>

<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>练习：准备一个无序数组，使用快排重新排序</p>
<p>快排原理：随机从数组中选择一个数作为基准，然后将数组分为 大于基准的数 + 基准 + 小于基准的数，在按照同样的思路对两堆数进行同样的排序，直到堆的 len &lt; 2 为止排序结束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = random.sample(range(<span class="number">0</span>, <span class="number">100</span>), <span class="number">10</span>)</span><br><span class="line"><span class="comment"># [71, 70, 99, 91, 12, 5, 80, 61, 17, 24]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qsort</span>(<span class="params">list</span>):</span> </span><br><span class="line">    <span class="keyword">if</span> len(list) &gt; <span class="number">2</span>: </span><br><span class="line">        pivot = list[<span class="number">0</span>] </span><br><span class="line">        small_partition = [sub <span class="keyword">for</span> sub <span class="keyword">in</span> list[<span class="number">1</span>:] <span class="keyword">if</span> sub &lt; pivot] </span><br><span class="line">        big_partition = [sub <span class="keyword">for</span> sub <span class="keyword">in</span> list[<span class="number">1</span>:] <span class="keyword">if</span> sub &gt;= pivot] </span><br><span class="line">        <span class="keyword">return</span> qsort(small_partition) + [pivot] + qsort(big_partition) </span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line"><span class="comment"># [5, 12, 17, 24, 61, 70, 71, 91, 80, 99]</span></span><br><span class="line"><span class="comment"># 看了下书上的答案基本一致 (●°u°●)​ 」</span></span><br></pre></td></tr></table></figure>

<h2 id="4-3-再谈大O表示法"><a href="#4-3-再谈大O表示法" class="headerlink" title="4.3 再谈大O表示法"></a>4.3 再谈大O表示法</h2><p>常见大O运行时间</p>
<p><img src="c4_01.png" alt="常见大O运行时间"></p>
<h3 id="4-3-2-平均情况和最糟情况"><a href="#4-3-2-平均情况和最糟情况" class="headerlink" title="4.3.2  平均情况和最糟情况"></a>4.3.2  平均情况和最糟情况</h3><p>当最糟情况时，n 个元素的数组，每层分析 n 次，栈深为 n, O(n) x O(n) = O(n<sup>2</sup>)</p>
<p>平均情况时，n 个元素的数组，每层分析 n 次，栈深为 log<sup>n</sup>, 时间复杂度为 O(n) x O(log<sup>n</sup>) = O(nlog<sup>n</sup>)</p>
<h2 id="Java-中的快排实现"><a href="#Java-中的快排实现" class="headerlink" title="Java 中的快排实现"></a>Java 中的快排实现</h2><p>Java 中快排的实现思路和 Python 中的是一样的，但是可能由于语法支持上的不同，感觉上，Java 的实现要比 Python 的实现复杂了很多</p>
<p>示例说明：</p>
<p>以第一个元素为基准，先遍历一遍数组将数组分为 [小于等于 pivot] + [pivot] + [大于 pivot] 三部分, 然后再对大于和小于的两部分做同样的算法</p>
<p>参考 <a href="https://blog.csdn.net/Holmofy/article/details/71168530">CSDN</a> 讲解的很详细，难点集中在分组的算法上，这里使用的是 挖坑法。</p>
<p>那数组的第一个元素作为 pivot，分别记录起止点下标i，j. 先从右向左找<strong>小于</strong>pivot的元素, 找到了就和 i 做交换。然后从左向右找<strong>大于</strong>pivot的元素，和j 做交换，知道 i &gt;= j结束。</p>
<p>完了将 pivot 的值赋给 i 位置。这个时候 i 和 j 是相等的。经过这一次遍历，数组被分为以 pivot 为界的两个自数组，元素分别小于和大于 pivot。</p>
<p>PS: 必须先从右向左扫描，不然我们就丢失了 j 的初始值引用了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSortDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] sample = <span class="keyword">new</span> Random().ints(<span class="number">0</span>, <span class="number">100</span>).limit(<span class="number">10</span>).toArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;Origin: &quot;</span> + Arrays.toString(sample));</span><br><span class="line"></span><br><span class="line">        qsort(sample, <span class="number">0</span>, sample.length - <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;After:  &quot;</span> + Arrays.toString(sample));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pivot_index = partition(arr, start, end);</span><br><span class="line">        qsort(arr, start, pivot_index - <span class="number">1</span>);</span><br><span class="line">        qsort(arr, pivot_index + <span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以第一个元素为基准，对数组排序，排序完之后，格式为 [小于pivot + pivot + 大于pivot]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> pivot index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[start];</span><br><span class="line">        <span class="keyword">int</span> i = start, j = end;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[j] &gt; pivot &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            <span class="keyword">while</span> (arr[i] &lt;= pivot &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = pivot;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [13, 40, 60, 68, 78, 82, 91, 92, 96, 99]</span></span><br></pre></td></tr></table></figure>

<h2 id="Arrays-sort-实现"><a href="#Arrays-sort-实现" class="headerlink" title="Arrays.sort 实现"></a>Arrays.sort 实现</h2><p>Arrays 在进行 sort 排序的时候可能会采用 插入排序，双轴快排 或 归并排序。具体判断流出如下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+--------------+                                                                                                                                      </span><br><span class="line">| Arrays.sort()|                                                                                                                                      </span><br><span class="line">+--------------+                                                                                                                                      </span><br><span class="line">        |                                                                                                                                             </span><br><span class="line">        |                                                                                                                                             </span><br><span class="line">        |                                                                                                                                             </span><br><span class="line">        |                                                                                                                                             </span><br><span class="line">        v                                                                                                                                             </span><br><span class="line"> +-------------+      N          +----------------------------+                                                                                       </span><br><span class="line"> |length &lt; 286 |---------------&gt; | check if arr nearly sorted |                                                                                       </span><br><span class="line"> +-------------+                 +----------------------------+                                                                                       </span><br><span class="line">        |             N                         |                                                                                                     </span><br><span class="line">        |&lt;--------------------------------------|                                                                                                     </span><br><span class="line">        |                                       |                                                                                                     </span><br><span class="line">        v                                       |                                                                                                     </span><br><span class="line"> +-------------+      N                         |                                                                                                     </span><br><span class="line"> |length &lt; 47  |--------------                  |Y                                                                                                    </span><br><span class="line"> +-------------+             |                  |                                                                                                     </span><br><span class="line">        |                    |                  |                                                                                                     </span><br><span class="line">        |Y                   |                  |                                                                                                     </span><br><span class="line">        |                    |                  |                                                                                                     </span><br><span class="line">        v                    v                  v                                                                                                     </span><br><span class="line">+----------------+     +------------+     +------------+                                                                                              </span><br><span class="line">| insertion sort |     | quick sort |     | merge sort |                                                                                              </span><br><span class="line">+----------------+     +------------+     +------------+                                                                                              </span><br><span class="line">        |                    |                  |                                                                                                     </span><br><span class="line">        |                    |                  |                                                                                                     </span><br><span class="line">        v                    |                  |                                                                                                     </span><br><span class="line">  +-------------+            |                  |                                                                                                     </span><br><span class="line">  | finish sort | &lt;------------------------------                                                                                                     </span><br><span class="line">  +-------------+                                                                                                                                     </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>算法图解</category>
      </categories>
      <tags>
        <tag>快速排序</tag>
        <tag>quick sort</tag>
      </tags>
  </entry>
  <entry>
    <title>链表反转</title>
    <url>/hexo/2021/03/18/Algorithm-reverse-list/</url>
    <content><![CDATA[<p>反转一个单链表。</p>
<p>示例:</p>
<p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL<br>进阶: 你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p>
<h2 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h2><p>先想象一下最简单的模型，怎么将第一个元素反转？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> val, ListNode next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iterVal(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">iterVal</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(node)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node.val + <span class="string">&quot; -&gt; &quot;</span> + iterVal(node.next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以声明一个空节点，然后把原始节点的第一个节点的 next 引用指向这个空节点就是我们想要的效果了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">1</span>, <span class="keyword">new</span> ListNode(<span class="number">2</span>, <span class="keyword">new</span> ListNode(<span class="number">3</span>, <span class="keyword">new</span> ListNode(<span class="number">4</span>, <span class="keyword">new</span> ListNode(<span class="number">5</span>, <span class="keyword">null</span>)))));</span><br><span class="line"></span><br><span class="line">        ListNode empty = <span class="keyword">null</span>;</span><br><span class="line">        head.next = empty;</span><br><span class="line">        System.out.println(head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 -&gt; null</span></span><br></pre></td></tr></table></figure>

<p>为了遍历后续的节点，我们需要在 head.next = empty 之前用另一变量来持有这个 next 引用 <code>ListNode holder1 = head.next;</code>。处理第二个节点的时候，我们其实重复了之前的操作，将它单独拆下来，然后拼接到 head 前面即可。按照这个思路，我可以直接联想使用 while 循环处理这个问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">1</span>, <span class="keyword">new</span> ListNode(<span class="number">2</span>, <span class="keyword">new</span> ListNode(<span class="number">3</span>, <span class="keyword">new</span> ListNode(<span class="number">4</span>, <span class="keyword">new</span> ListNode(<span class="number">5</span>, <span class="keyword">null</span>)))));</span><br><span class="line">        System.out.println(head);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ListNode result = <span class="keyword">null</span>;</span><br><span class="line">        ListNode holder;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            holder = head.next;</span><br><span class="line">            head.next = result;</span><br><span class="line">            result = head;</span><br><span class="line">            head = holder;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; null</span></span><br><span class="line"><span class="comment">// 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; null</span></span><br></pre></td></tr></table></figure>

<p>把上面的实现精简一下就是迭代法了 (●°u°●)​ 」</p>
<h2 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h2><p>想象的模型比较重要，我们准备两个空节点，一个用来拼接解析出来的节点，作为返回值，另一个用来持有后续节点，用来循环。</p>
<p>他这边有一个很奇特的点，就是平时我们在做链表操作的时候很多情况是<strong>持有一个最后的节点</strong>通过调用 node1.next = node2 的方式，在尾部拼接。但是这里的解体思路恰恰是相反的的，拿到一个新节点，通过 givenNode.next = node1 这种方式在头部拼接。第一次做的时候这个弯弯很难绕</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * input:  1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span></span><br><span class="line"><span class="comment"> * output: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseListSample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode fir = <span class="keyword">new</span> ListNode(<span class="number">1</span>, <span class="keyword">new</span> ListNode(<span class="number">2</span>, <span class="keyword">new</span> ListNode(<span class="number">3</span>, <span class="keyword">new</span> ListNode(<span class="number">4</span>, <span class="keyword">new</span> ListNode(<span class="number">5</span>)))));</span><br><span class="line">        System.out.println(fir.toString());</span><br><span class="line"></span><br><span class="line">        ListNode ret = reverseList(fir);</span><br><span class="line">        System.out.println(ret.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode next;</span><br><span class="line">        ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (Objects.nonNull(head)) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = pre;</span><br><span class="line">            pre = head;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; null</span></span><br><span class="line"><span class="comment">// 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; null</span></span><br></pre></td></tr></table></figure>

<h2 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h2><p>核心思想和前面的一致，具体到做表现形式上，我自己想出来的解法需要额外传入一个参数作为结果，有点累赘</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head, ListNode result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(head))</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    ListNode holder = head.next;</span><br><span class="line">    head.next = result;</span><br><span class="line">    <span class="comment">// 思路还是很清晰的， 先把传入的节点分离出来， 然后在作为 result 的节点前面一次添加分离出来的节点。当所有的节点都处理过后，返回</span></span><br><span class="line">    <span class="keyword">return</span> reverseList(holder, head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>搜索了一下单参数的解法</p>
<p>我们可以用 分治 的观点来看这个问题会更简单。终止条件为判空。否则，我们再次调用递归方法，拿到逆序结果。它骚就骚在一般我们的递归都是直接返回的，而它则是还要做一些操作。</p>
<p>但是值得注意的是，返回的结果是不能参与操作的，不然引用就会发生变化。必须通过现成的变量操作，不然循环就会被打破了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode current)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="keyword">null</span> || current.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line"></span><br><span class="line">    ListNode next = current.next; <span class="comment">// 拿到后续节点</span></span><br><span class="line">    </span><br><span class="line">    ListNode ret = reverseList(next); <span class="comment">// 拿到计算结果</span></span><br><span class="line">    current.next = <span class="keyword">null</span>; <span class="comment">// 打断当前节点, 防止闭环</span></span><br><span class="line">    next.next = current; <span class="comment">// 习惯性的写成 ret.next = current, 这样会打破迭代规律</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表反转</tag>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序</title>
    <url>/hexo/2021/04/20/Algorithm-selection-sort/</url>
    <content><![CDATA[<p>算法描述</p>
<ol>
<li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li>
<li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>
<li>重复第二步，直到所有元素均排序完毕。</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSortDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] sample = <span class="keyword">new</span> Random().ints(<span class="number">0</span>, <span class="number">100</span>).limit(<span class="number">10</span>).toArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;Origin: &quot;</span> + Arrays.toString(sample));</span><br><span class="line"></span><br><span class="line">        selectionSort(sample);</span><br><span class="line">        System.out.println(<span class="string">&quot;After:  &quot;</span> + Arrays.toString(sample));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] sample)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sample.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> max_idx = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; sample.length; j++) &#123; <span class="comment">// 这里注意一下，是对整个数组做 selection，所以为 sample.length, 如果写为 sample.length-1 则最后一个元素会跳过排序</span></span><br><span class="line">                <span class="keyword">if</span> (sample[max_idx] &lt; sample[j]) &#123;</span><br><span class="line">                    max_idx = j;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (max_idx != i) &#123;</span><br><span class="line">                swap(sample, i, max_idx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] sample, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = sample[i];</span><br><span class="line">        sample[i] = sample[j];</span><br><span class="line">        sample[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Origin: [32, 47, 97, 16, 3, 81, 61, 78, 43, 65]</span></span><br><span class="line"><span class="comment">// After:  [97, 81, 78, 65, 61, 47, 43, 32, 16, 3]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>选择排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache, Tomcat 和 Nginx 之间的关系</title>
    <url>/hexo/2020/07/03/Apache-Tomcat-%E5%92%8C-Nginx-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<p>想要解决的问题：</p>
<ol>
<li>Apache, Tomcat 和 Nginx 的定义/区别</li>
<li>Server 搭配拓扑图</li>
</ol>
<h2 id="Apache-Tomcat-和-Nginx-的定义-区别"><a href="#Apache-Tomcat-和-Nginx-的定义-区别" class="headerlink" title="Apache, Tomcat 和 Nginx 的定义/区别"></a>Apache, Tomcat 和 Nginx 的定义/区别</h2><p>名词解释：</p>
<ul>
<li>静态服务器，就是每次访问同一个地址只能返回同样的内容，不会改变</li>
</ul>
<p>Apache</p>
<blockquote>
<p>这里说的 Apache 指的是 Apache Http Server。静态服务器的一种，老牌(始于1995)，曾经的王者，近年来市场占有率下降。<br>模块多，性能稳定，rewrite 性能搞，配置相对复杂</p>
</blockquote>
<p>Nginx</p>
<blockquote>
<p>毛子出品，2004年首发，声势迅猛。如今是三巨头之一(另两个是Microsoft, Apache)，和 Apache 是同类产品。<br>支持反向代理，轻量级，非阻塞，高并发，社区活跃，bug 多</p>
</blockquote>
<p>Tomcat</p>
<blockquote>
<p>全名是 Apache Tomcat，Application Server 的一种，用来提供动态支持，和前面的不是一种类型。</p>
</blockquote>
<h2 id="Server-搭配拓扑图"><a href="#Server-搭配拓扑图" class="headerlink" title="Server 搭配拓扑图"></a>Server 搭配拓扑图</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">                                                       +-----------+</span><br><span class="line">                                              --------&gt;|  Tomcat01 |</span><br><span class="line">                                              |        |           |</span><br><span class="line">+--------------+          +------------+      |        +-----------+</span><br><span class="line">| Client       |          |Apache/Nginx|      |</span><br><span class="line">|              |--------&gt; |            |------|</span><br><span class="line">|              |          |            |      |</span><br><span class="line">+--------------+          +------------+      |</span><br><span class="line">                                              |        +-----------+</span><br><span class="line">                                              --------&gt;| Tomcat02  |</span><br><span class="line">                                                       |           |</span><br><span class="line">                                                       +-----------+</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
      <tags>
        <tag>解释</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 插件记事</title>
    <url>/hexo/2020/07/22/Chrome-%E6%8F%92%E4%BB%B6%E8%AE%B0%E4%BA%8B/</url>
    <content><![CDATA[<p>公司日常维护过程中，同事自己写的一个 Chrome 小插件很精巧，符合我小而美的审美，很适合处理某些需求，特此记录一下 Chrome 插件的小知识和一个阅读源码的收获</p>
<h2 id="插件目录结构"><a href="#插件目录结构" class="headerlink" title="插件目录结构"></a>插件目录结构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Root</span><br><span class="line">├── README.md</span><br><span class="line">├── background.js &lt;- 定义一些 js 脚本</span><br><span class="line">├── content.js</span><br><span class="line">├── doc</span><br><span class="line">│   └── images</span><br><span class="line">│       ├── extend_all.png</span><br><span class="line">│       ├── extend_status.png</span><br><span class="line">│       ├── extension_icon.png</span><br><span class="line">│       ├── extension_loaded.png</span><br><span class="line">│       └── load_unpacked_extension.png</span><br><span class="line">├── icon.png &lt;- icon 定义</span><br><span class="line">├── images</span><br><span class="line">│   ├── icon128.png</span><br><span class="line">│   ├── icon16.png</span><br><span class="line">│   └── icon48.png</span><br><span class="line">├── jquery-3.0.0.min.js</span><br><span class="line">├── manifest.json &lt;- 定义了 extension 的基本信息，权限等，可以概览整个应用</span><br><span class="line">├── options.html &lt;- 为客户提供可选项</span><br><span class="line">├── options.js</span><br><span class="line">├── popup.html &lt;- 点击弹出页面，用于交互</span><br><span class="line">├── popup.js</span><br><span class="line">├── style.css</span><br><span class="line">└── test.js</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://developer.chrome.com/extensions/getstarted">Chrome Extension Official</a> 官方文档好又多</li>
</ul>
<h2 id="JS-的一些知识点"><a href="#JS-的一些知识点" class="headerlink" title="JS 的一些知识点"></a>JS 的一些知识点</h2><ul>
<li>.aspx 页面，是基于微软 .Net 开发的站点</li>
<li>html 页面中可以直接在 onclick 里面写 logic，简直是随心所欲</li>
<li>通过 ajax 可以实现表单提交</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- click 中设置 confirm 内容 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ctl00$ContentPlaceHolder$GridViewLive$ctl02$Deletion&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Delete&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;if (!confirm(<span class="symbol">&amp;#39;</span>Are you sure you want to delete the company?<span class="symbol">&amp;#39;</span>)) return false; console.log(&#x27;Click Confirmed&#x27;)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  url: url,</span><br><span class="line">  data: data,</span><br><span class="line">  success: success,</span><br><span class="line">  dataType: dataType</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写形式</span></span><br><span class="line">$.post( <span class="string">&quot;ajax/test.html&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> data </span>) </span>&#123;</span><br><span class="line">  $( <span class="string">&quot;.result&quot;</span> ).html( data );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// form.serialize() 可以方便的实现数据提取</span></span><br><span class="line">$.post( <span class="string">&quot;test.php&quot;</span>, $( <span class="string">&quot;#testform&quot;</span> ).serialize() );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想要成功提示，还可以</span></span><br><span class="line">$.post(url, $(<span class="string">&quot;#ctl00&quot;</span>).serialize()).done(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"> data </span>) </span>&#123;</span><br><span class="line">    alert( <span class="string">&quot;extends success&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="调试脚本"><a href="#调试脚本" class="headerlink" title="调试脚本"></a>调试脚本</h2><p>由于这次只是查看代码，而且验证一些函数的功能，调试还是挺顺利的，直接通过 Chrome console 就完成了，各种变量自动装载完成，美滋滋儿。</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 渲染 ul 为树结构</title>
    <url>/hexo/2020/12/15/Code-snippet-use-html-show-ul-tag-in-tree-format/</url>
    <content><![CDATA[<p>看到网上有一段代码通过 CSS 把 ul+li 块渲染成目录树结构，很赞，加入收集。源代码链接: <a href="https://bootsnipp.com/snippets/ypNAe">bootsnipp</a></p>
<p>PS: 这个 post 最好是在这段代码下面嵌入一个页面显示效果，但是目前没时间做这方面的 re-search，以后如果有很多 html 示例的化可以考虑一下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;noindex, nofollow&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Tree<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/tree3.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bootstrap-css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;tree1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tree&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Node1</span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Node11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Node12<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Node13<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Node2</span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Company Maintenance<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Employee</span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Reports</span><br><span class="line">                            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Report1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Report2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Report3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Employee Maint<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Human Resources<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tree</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="comment">/* 画一条最外层 ul 边框的辅助线 */</span></span><br><span class="line">    <span class="comment">/* border: 1px solid red; */</span></span><br><span class="line">    <span class="attribute">position</span>: relative</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* 树状结构竖线部分 */</span></span><br><span class="line"><span class="selector-class">.tree</span> <span class="selector-tag">ul</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="comment">/* 伪类选择器，会选中 ul 的第一个元素 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tree</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#369</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="comment">/* font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* 树状结构横线部分 */</span></span><br><span class="line"> <span class="selector-class">.tree</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  覆盖最后一个节点多余的半截竖线 */</span></span><br><span class="line"><span class="selector-class">.tree</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一些平时发现的好的编程习惯</title>
    <url>/hexo/2021/01/08/Coding-best-practice/</url>
    <content><![CDATA[<h2 id="更抽象的命名"><a href="#更抽象的命名" class="headerlink" title="更抽象的命名"></a>更抽象的命名</h2><p>今天在写一个 Java bean 的时候，为了 merge bean 的属性，特意给这个 bean 写了一个 mergeUpdatedProperties(Properties props) 方法，同时 review 之后提出，直接用 merg(Bean bean) 的方式会更有扩展性，深以为然。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>习惯</tag>
      </tags>
  </entry>
  <entry>
    <title>编译好的 Java 类可以绕过类型检测？</title>
    <url>/hexo/2020/08/07/Compiled-Java-Class-Can-Bypass-Type-Check/</url>
    <content><![CDATA[<p>问题记录：</p>
<p>在做项目重构的时候遇到如下问题，repo1 下有 class A, 重构时我们在 repo1 中抽象出一个 interface FA 实现 A 的所有的方法，然后修改外部引用使 A 解偶。其中发现一个很有趣的现象，原先 repo2 使用 A 编译出来的 jar, 不做任何修改还是可以和 FA 源码进行编译，但是使用 repo2 的源码和 FA 源码进行编译会抛 mismatch 的 exception。猜测和 Java 编译规则有关系，难道是编译后的文件其实是一样的，所以原来的 jar 可以通用，但是源码的话和编译规则有冲突会挂。</p>
<p>本地试了下，并不能重现，不清楚是重现的不对还是公司的项目有什么特殊的处理方式，有机会再看看把 ╮(￣▽￣””)╭</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>编译器</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome + SwitchyOmega 配置方案</title>
    <url>/hexo/2021/02/25/Configuration-for-chrome-and-switchyomega/</url>
    <content><![CDATA[<p>Chrome + SwitchyOmega 已经配置了无数遍了，抽出来单独写一篇详细教程</p>
<h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><p>外网限制，安装 Chrome 扩展极度不便。所有的第一步是安装 SwithyOmega 的扩展来翻墙。</p>
<ol>
<li>去 <a href="https://github.com/FelisCatus/SwitchyOmega">SwitchyOmega</a> 官网下载 crx 文件。</li>
<li>重命名，将后缀改为 zip，然后直接拖到浏览器 - <strong>直接将 crx 文件拖进去会报错 <code>CRX_HEADER_INVALID</code></strong></li>
<li>左键点击插件 icon -&gt; Options -&gt; New profile 添加 Profile Proxy 类型配置文件</li>
<li>Protocol, Server, Port 一次填入 SOCKS5, 127.0.0.1, 1086</li>
<li>选择 auto switch, <code>Rule List Config</code> 下选择 AutoProxy 类型</li>
<li><code>Rule List URL</code> 填入 <code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code> 点击下载更新文件</li>
<li>Apply Change, 打完收工</li>
</ol>
<p>PS: 公司里面有提供 PAC 解决方案，很方便，规则都给你定好了 New Profile 选择 PAC 类型，填入指定的 URL, 再点击 download 即可</p>
<h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul>
<li><a href="https://github.com/FelisCatus/SwitchyOmega/wiki/GFWList">GFWList 配置教程 - 官方</a></li>
<li><a href="https://github.com/gfwlist/gfwlist">GFW 规则主页</a></li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>DBeaver 设置国内 Maven 源</title>
    <url>/hexo/2020/08/18/DBeaver-Set-Maven-Resource/</url>
    <content><![CDATA[<p>打开 DBeaver -&gt; Preferences -&gt; 搜索 Maven -&gt; Add, 填入信息 <code>http://maven.aliyun.com/nexus/content/groups/public/</code>，调整一下顺序，放到第一位。打完收工～</p>
<p>PS: 设置只有在新建 connection 时生效，所以已经创建的，删了重建即可</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>DBeaver</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式和外观模式</title>
    <url>/hexo/2021/04/09/Design-pattern-adapter-and-facade/</url>
    <content><![CDATA[<blockquote>
<p><strong>The Adapter Pattern</strong> converts the interface of a class into another interface the clients expect.  Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.<br>适配器模式将一种接口类型转化为另一种，他用来解决类中的类型适配问题</p>
</blockquote>
<blockquote>
<p><strong>The Facade Pattern</strong> provides a unified interface to a set of interfaces in a subsytem.  Facade defines a higher-level interface that makes the subsystem easier to use.<br>提供一套更 high-level 的接口简化子系统调用</p>
</blockquote>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>举例一个现实生活中的案例：插头转换器。比如我们的手机是两脚插头，但是家里只有三脚插座，那怎么整？答案是找一个插口转化器，把两脚的转成三脚的即可。adapter 模式的工作方式和这种解决方案完全一致。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+--------------------+     +-------+     +-------------+                                                                                              </span><br><span class="line">| Your existing      |     |Adaptor|     | Vendor      |                                                                                              </span><br><span class="line">| system             |     |       |     | Class       |                                                                                              </span><br><span class="line">|                    |---&gt; |       |----&gt;|             |                                                                                              </span><br><span class="line">|                    |     |       |     |             |                                                                                              </span><br><span class="line">|                    |     |       |     |             |                                                                                              </span><br><span class="line">+--------------------+     +-------+     +-------------+                                                                                              </span><br></pre></td></tr></table></figure>

<p>好了现在让我们用第一章的鸭子来举例子。话说有一天，PM 突然找到小码农说，我们的客户有一个特殊要求，想要一种有着火鸡内在的鸭子。小码农满脸的黑人问号，这也行？但是 PM 不管，说下周就要产品掩饰了，你自己看着办。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 假设之前的鸭子实现是通过 interface 来做的, 我们现在已有了 Duck，Turkey 的接口定义，以及 Turkey 的实现</span></span><br><span class="line"><span class="comment">* 我们只需要新建一个适配器，实现目标接口的方法，并且适配器持有需要代理的实例。在对应的方法中通过调用实例方法即可</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildTurkey</span> <span class="keyword">implements</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Gobble...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Fly a short distance...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuckAdaptor</span> <span class="keyword">implements</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Turkey turkey;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DuckAdaptor</span><span class="params">(Turkey turkey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.turkey = turkey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        turkey.gobble();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        turkey.fly();</span><br><span class="line">        turkey.fly();</span><br><span class="line">        turkey.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DuckAdaptor adaptor = <span class="keyword">new</span> DuckAdaptor(<span class="keyword">new</span> WildTurkey());</span><br><span class="line">        adaptor.quack();</span><br><span class="line">        adaptor.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Gobble...</span></span><br><span class="line"><span class="comment">// Fly a short distance...</span></span><br><span class="line"><span class="comment">// Fly a short distance...</span></span><br><span class="line"><span class="comment">// Fly a short distance...</span></span><br></pre></td></tr></table></figure>

<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+-----------------+     +---------------+                                                                                                            </span><br><span class="line">|                 |---&gt; |&lt;&lt;Interface&gt;&gt;  |                                                                                                            </span><br><span class="line">|    Client       |     |  Target       |                                                                                                            </span><br><span class="line">|                 |     +---------------+                                                                                                            </span><br><span class="line">+-----------------+             ^                                                                                                                    </span><br><span class="line">                                |                                                                                                                    </span><br><span class="line">                                |                                                                                                                    </span><br><span class="line">                                |                                                                                                                    </span><br><span class="line">                         +-------------+      +-----------------+                                                                                    </span><br><span class="line">                         |   Adapter   |      |   Adaptee       |                                                                                    </span><br><span class="line">                         |-------------| ----&gt;|-----------------|                                                                                    </span><br><span class="line">                         | request()   |      | specialRequest()|                                                                                    </span><br><span class="line">                         |             |      |                 |                                                                                    </span><br><span class="line">                         +-------------+      +-----------------+                                                                                    </span><br></pre></td></tr></table></figure>

<p>这里展示的是类 adaptor, 还有一种 class adaptor，但是由于 Java 是单继承的，语法上就不能实现 class adaptor 的这种定义。不过支持多继承的语言是可以实现的。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+-----------------+      +-------------+     +-----------------+                                                                                     </span><br><span class="line">|                 |---&gt;  |   Target    |     |   Adaptee       |                                                                                     </span><br><span class="line">|    Client       |      |-------------|     |-----------------|                                                                                     </span><br><span class="line">|                 |      | request()   |     | specialRequest()|                                                                                     </span><br><span class="line">+-----------------+      |             |     |                 |                                                                                     </span><br><span class="line">                         +-------------+     +-----------------+                                                                                     </span><br><span class="line">                                     ^         ^                                                                                                     </span><br><span class="line">                                     |         |                                                                                                     </span><br><span class="line">                                     |         |                                                                                                     </span><br><span class="line">                                     |         |                                                                                                     </span><br><span class="line">                                    +-------------+                                                                                                  </span><br><span class="line">                                    |   Adapter   |                                                                                                  </span><br><span class="line">                                    |-------------|                                                                                                  </span><br><span class="line">                                    | request()   |                                                                                                  </span><br><span class="line">                                    |             |                                                                                                  </span><br><span class="line">                                    +-------------+                                                                                                  </span><br></pre></td></tr></table></figure>

<h2 id="项目中可能用到-Adapter-的地方"><a href="#项目中可能用到-Adapter-的地方" class="headerlink" title="项目中可能用到 Adapter 的地方"></a>项目中可能用到 Adapter 的地方</h2><p>比如老代码中，很多地方会用到 Enumeration 类，但是在 JDK 1.2 时就推出了 Iterator 接口代替他。如果新的代码都时采用的 Iterator 做迭代，那么怎么兼容老的 Enumeration 呢。</p>
<p>可以新建一个 adapter 类，实现 iterator 接口，持有 enumeration 实现。在 client 中通过这个 adaptor 访问 enumeration。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterToEnum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;String&gt; strings = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        strings.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; enumeration = strings.elements();</span><br><span class="line"></span><br><span class="line">        IteratorAdapter adapter = <span class="keyword">new</span> IteratorAdapter(enumeration);</span><br><span class="line">        <span class="keyword">while</span> (adapter.hasNext()) &#123;</span><br><span class="line">            System.out.println(adapter.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PS: 书中视角 EnumerationAdapter, 但是我觉得不是应该叫 迭代器适配器 才合适吗？应该是我和作者对数据流向的理解相反，但是对这里的使用没有造成影响</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IteratorAdapter</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Enumeration&lt;String&gt; enumeration;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IteratorAdapter</span><span class="params">(Enumeration&lt;String&gt; enumeration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enumeration = enumeration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enumeration.hasMoreElements();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enumeration.nextElement();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Facade-外观-Pattern"><a href="#Facade-外观-Pattern" class="headerlink" title="Facade(外观) Pattern"></a>Facade(外观) Pattern</h2><p>假设我们要组一套家庭影院，我们有好多设备，比如投影仪，音响，爆米花机，DVD 等。我们每次想要看一场电影需要做如下事情</p>
<ol>
<li>开启 爆米花 机</li>
<li>开始爆米花</li>
<li>开启影响</li>
<li>设置音量</li>
<li>开启投影仪</li>
<li>摄制亮度</li>
<li>开启 DVD</li>
<li>塞入光盘</li>
<li>…</li>
</ol>
<p>而且等我们看完了，我们还需要逐个将上面的设备关掉，一套下来，可能以后再也不看电影了。</p>
<p>Facade 模式就是用来解决这种问题的。</p>
<blockquote>
<p>A facade not only simplifies an interface, it decouples a client from a subsystem of components.<br>Facades and adapters may wrap multiple classes, but a facade’s intent is to simplify, while an adapter’s is to convert the interface to something different.<br>外观模式不仅仅是简化接口，同时他还将子系统和客户端解耦了<br>Facade 和 Adapter 都会在类外面包一层，但是 Facade 是为了简化，而 Adapter 是为了转换</p>
</blockquote>
<p>为了简化代码，我们一拿 DVD 和投影仪举例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Player 类表示 DVD 机的开/关/放电影功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DvdPlayer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startPlayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Start DVD Player...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endPlayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;End DVD Player...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMovie</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Show movie: &quot;</span> + name + <span class="string">&quot; ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示屏幕功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Screen</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Down screen...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Up screen...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 家庭影院简化版</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeTheaterFacade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Screen screen;</span><br><span class="line">    <span class="keyword">private</span> DvdPlayer player;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeTheaterFacade</span><span class="params">(Screen screen, DvdPlayer player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.screen = screen;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startMovie</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        screen.downScreen();</span><br><span class="line">        player.startPlayer();</span><br><span class="line">        player.playMovie(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endMovie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        screen.upScreen();</span><br><span class="line">        player.endPlayer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端播放和结束放映</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HomeTheaterFacade facade = <span class="keyword">new</span> HomeTheaterFacade(<span class="keyword">new</span> Screen(), <span class="keyword">new</span> DvdPlayer());</span><br><span class="line">        facade.startMovie(<span class="string">&quot;&lt;&lt;NeZha&gt;&gt;&quot;</span>);</span><br><span class="line">        facade.endMovie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Down screen...</span></span><br><span class="line"><span class="comment">// Start DVD Player...</span></span><br><span class="line"><span class="comment">// Show movie: &lt;&lt;NeZha&gt;&gt; ...</span></span><br><span class="line"><span class="comment">// Up screen...</span></span><br><span class="line"><span class="comment">// End DVD Player...</span></span><br></pre></td></tr></table></figure>

<p>其实说是 Facade 模式，但是我这里平时经常会用到，只不过我一般把这种类型的东西叫做 Util 或者 Action 类。封装一些经常使用的方法，感觉效果上还是很相似的。</p>
<h2 id="The-Principle-of-Least-Knowledge"><a href="#The-Principle-of-Least-Knowledge" class="headerlink" title="The Principle of Least Knowledge"></a>The Principle of Least Knowledge</h2><p>这个规则是说，我们在写代码的时候要尽量减少涉及到多种返回值类型的链式调用。</p>
<blockquote>
<p>Principle of Least Knowledge - talk only to your immediate friends.</p>
</blockquote>
<p>在你的代码中，你只能调用下列对象的方法：</p>
<ul>
<li>对象本身</li>
<li>通过方法参数传入的对象</li>
<li>任何在本类中创建的对象</li>
<li>任何本对象的 field</li>
</ul>
<p>这样做可以减少两个对象之间的 dependencies 但是同时也有一个弊端，你需要写跟多的代码，项目会变得更大，还可能会性能下降。</p>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>HFDP</category>
      </categories>
      <tags>
        <tag>adapter pattern</tag>
        <tag>facade pattern</tag>
        <tag>适配器模式</tag>
        <tag>外观模式</tag>
      </tags>
  </entry>
  <entry>
    <title>生成器/建造者模式</title>
    <url>/hexo/2020/10/13/Design-pattern-builder/</url>
    <content><![CDATA[<p>在看 mybatis 源码的 xml 解析部分的时候，发现里面重度使用了生成器模式，特此整理一下。</p>
<p>定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一种对象创建型模式。</p>
<p>适用场景：构造函数多，且参数可选的情况下，建议使用。</p>
<p>案例，创建一个有五个属性的 computer 对象</p>
<h2 id="Java-简化版"><a href="#Java-简化版" class="headerlink" title="Java 简化版"></a>Java 简化版</h2><p>创建方案有两种：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方案一， 重载构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(String cpu, String ram)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(cpu, ram, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(String cpu, String ram, <span class="keyword">int</span> usbCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(cpu, ram, usbCount, <span class="string">&quot;罗技键盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(String cpu, String ram, <span class="keyword">int</span> usbCount, String keyboard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(cpu, ram, usbCount, keyboard, <span class="string">&quot;三星显示器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(String cpu, String ram, <span class="keyword">int</span> usbCount, String keyboard, String display)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">        <span class="keyword">this</span>.ram = ram;</span><br><span class="line">        <span class="keyword">this</span>.usbCount = usbCount;</span><br><span class="line">        <span class="keyword">this</span>.keyboard = keyboard;</span><br><span class="line">        <span class="keyword">this</span>.display = display;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方案二， 使用 new + set</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpu</span><span class="params">(String cpu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略其他 set 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>使用构造函数 - 弊端：参数过多，增加阅读，调用复杂度</li>
<li>使用 new + set - 弊端：不连续，可能少设置属性什么的</li>
</ol>
<p>Java 简化版方案：</p>
<ol>
<li>在对象内部创建一个 public 的内部静态类 Builder</li>
<li>复制一份对象的属性到 Builder 中</li>
<li>Builder 提供 set 方法</li>
<li>在对象内部添加一个私有的构造函数，参数为 Builder</li>
<li>通过链式调用 Builder 创建对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;<span class="comment">//必须</span></span><br><span class="line">    <span class="keyword">private</span> String ram;<span class="comment">//必须</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> usbCount;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">private</span> String keyboard;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">private</span> String display;<span class="comment">//可选</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Computer</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = builder.cpu;</span><br><span class="line">        <span class="keyword">this</span>.ram = builder.ram;</span><br><span class="line">        <span class="keyword">this</span>.usbCount = builder.usbCount;</span><br><span class="line">        <span class="keyword">this</span>.keyboard = builder.keyboard;</span><br><span class="line">        <span class="keyword">this</span>.display = builder.display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String cpu;<span class="comment">//必须</span></span><br><span class="line">        <span class="keyword">private</span> String ram;<span class="comment">//必须</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> usbCount;<span class="comment">//可选</span></span><br><span class="line">        <span class="keyword">private</span> String keyboard;<span class="comment">//可选</span></span><br><span class="line">        <span class="keyword">private</span> String display;<span class="comment">//可选</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(String cup, String ram)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.cpu = cup;</span><br><span class="line">            <span class="keyword">this</span>.ram = ram;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setUsbCount</span><span class="params">(<span class="keyword">int</span> usbCount)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.usbCount = usbCount;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setKeyboard</span><span class="params">(String keyboard)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.keyboard = keyboard;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setDisplay</span><span class="params">(String display)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.display = display;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Computer <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Computer(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h2>

<p>涉及到的角色：</p>
<ul>
<li>Builder: 抽象接口，定义了一系列需要实现的接口</li>
<li>ConcreateBuilder: 具体的 Builder 实现类</li>
<li>Production：生成的产品</li>
<li>Director：具体 Builder 调用方法顺序的类</li>
</ul>
<p>和上面的 Java 简化版相比，传统模式只不过是把类内部的 Builder 实现独立出来了而已，并没有什么其他很骚的操作。不过相比于简单的版本，它提供了 Builder 的扩展性，在这个实现里， ConcreateBuilder 可以有多个版本的实现，客户端可以根据实际需求调用所需要的 Builder。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// production 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;<span class="comment">//必须</span></span><br><span class="line">    <span class="keyword">private</span> String ram;<span class="comment">//必须</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> usbCount;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">private</span> String keyboard;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">private</span> String display;<span class="comment">//可选</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(String cpu, String ram)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">        <span class="keyword">this</span>.ram = ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsbCount</span><span class="params">(<span class="keyword">int</span> usbCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.usbCount = usbCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeyboard</span><span class="params">(String keyboard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.keyboard = keyboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDisplay</span><span class="params">(String display)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.display = display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Computer&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, ram=&#x27;&quot;</span> + ram + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, usbCount=&quot;</span> + usbCount +</span><br><span class="line">                <span class="string">&quot;, keyboard=&#x27;&quot;</span> + keyboard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, display=&#x27;&quot;</span> + display + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Builder 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUsbCount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setKeyboard</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDisplay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Computer <span class="title">getComputer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体实现类，分别组装两种品牌的电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacBuilder</span> <span class="keyword">implements</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MacBuilder</span><span class="params">(String cpu, String ram)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer = <span class="keyword">new</span> Computer(cpu, ram);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsbCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer.setUsbCount(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeyboard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer.setKeyboard(<span class="string">&quot;Mac Keyboard&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDisplay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer.setDisplay(<span class="string">&quot;Mac Display&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">getComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LenovoBuilder</span> <span class="keyword">implements</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LenovoBuilder</span><span class="params">(String cpu, String ram)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer = <span class="keyword">new</span> Computer(cpu, ram);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsbCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer.setUsbCount(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeyboard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer.setKeyboard(<span class="string">&quot;Logic&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDisplay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer.setDisplay(<span class="string">&quot;ThinkVision&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">getComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// director 控制流程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerDirector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeComputer</span><span class="params">(ComputerBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定制组装顺序</span></span><br><span class="line">        builder.setDisplay();</span><br><span class="line">        builder.setKeyboard();</span><br><span class="line">        builder.setUsbCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ComputerDirector director = <span class="keyword">new</span> ComputerDirector();</span><br><span class="line"></span><br><span class="line">    MacBuilder macBuilder = <span class="keyword">new</span> MacBuilder(<span class="string">&quot;I5&quot;</span>, <span class="string">&quot;Sansong 4G&quot;</span>);</span><br><span class="line">    director.makeComputer(macBuilder);</span><br><span class="line">    System.out.println(macBuilder.getComputer());</span><br><span class="line"></span><br><span class="line">    LenovoBuilder lenovoBuilder = <span class="keyword">new</span> LenovoBuilder(<span class="string">&quot;I7&quot;</span>, <span class="string">&quot;Kingston 8G&quot;</span>);</span><br><span class="line">    director.makeComputer(lenovoBuilder);</span><br><span class="line">    System.out.println(lenovoBuilder.getComputer());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Computer&#123;cpu=&#x27;I5&#x27;, ram=&#x27;Sansong 4G&#x27;, usbCount=2, keyboard=&#x27;Mac Keyboard&#x27;, display=&#x27;Mac Display&#x27;&#125;</span></span><br><span class="line"><span class="comment">// Computer&#123;cpu=&#x27;I7&#x27;, ram=&#x27;Kingston 8G&#x27;, usbCount=3, keyboard=&#x27;Logic&#x27;, display=&#x27;ThinkVision&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="建造者模式在-StringBuilder-中的应用"><a href="#建造者模式在-StringBuilder-中的应用" class="headerlink" title="建造者模式在 StringBuilder 中的应用"></a>建造者模式在 StringBuilder 中的应用</h2><p>TODO</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/58093669">逼乎</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>builder pattern</tag>
        <tag>构造器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器模式</title>
    <url>/hexo/2021/04/13/Design-pattern-decorator/</url>
    <content><![CDATA[<p><strong>Design Principle:</strong> Classes should be open for extension, but closed for modification.</p>
<blockquote>
<p><strong>The Decorator Pattern</strong> attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.<br>装饰器模式可以让你的对象动态添加特性</p>
</blockquote>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>Starbuzz 设计了一款软件卖咖啡，但是设计太烂了，导致类膨胀了。如果是你你会怎么整？</p>
<p>原始设计, 有一个基类 Beverage，然后各种子类比如浓缩咖啡，美式等。但是光咖啡还不够，我们还可以加入各种调味料，比如抹茶，奶盖等。每加入新的调料都是一种新的类，比如浓缩+抹茶。类数量成指数上升</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">                     +-----------------+                                                                                                              </span><br><span class="line">                     |    Beverate     |                                                                                                              </span><br><span class="line">                     |---------------- |                                                                                                              </span><br><span class="line">                     | description     |                                                                                                              </span><br><span class="line">                     |---------------- |                                                                                                              </span><br><span class="line">                     | getDescription()|                                                                                                              </span><br><span class="line">                     | cost()          |                                                                                                              </span><br><span class="line">                     |                 |                                                                                                              </span><br><span class="line">                     +-----------------+                                                                                                              </span><br><span class="line">                       ^        ^   ^                                                                                                                 </span><br><span class="line">                       |        |   |---------------                                                                                                  </span><br><span class="line">                       |        |                  |                                                                                                  </span><br><span class="line">          +--------------+   +--------------+      |                                                                                                  </span><br><span class="line">          |  Espreesso   |   |  DarkRoast   |      |                                                                                                  </span><br><span class="line">          |--------------|   |--------------|     ...                                                                                                 </span><br><span class="line">          |  cost()      |   |  cost()      |                                                                                                         </span><br><span class="line">          +--------------+   +--------------+                                                                                                         </span><br><span class="line">            ^          ^                                                                                                                              </span><br><span class="line">            |          |                                                                                                                              </span><br><span class="line">            |          |                                                                                                                              </span><br><span class="line">+-----------------+    |                                                                                                                              </span><br><span class="line">|EspreessoWithMilk|    |                                                                                                                              </span><br><span class="line">|-----------------|   ...                                                                                                                             </span><br><span class="line">|  cost()         |                                                                                                                                   </span><br><span class="line">+-----------------+                                                                                                                              </span><br></pre></td></tr></table></figure>

<p>随之设计师又想到了另一种解决方案，可以将所有的属性和调味品设置成属性放到基类中，然后通过 flag 知道是否含有某种调味品，然后在子类中通过设置这些 flag 的值，定制 cost 结果</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+----------------+                                                                                                                                 </span><br><span class="line">|    Beverage    |                                                                                                                                 </span><br><span class="line">|----------------|                                                                                                                                 </span><br><span class="line">| description    |                                                                                                                                 </span><br><span class="line">| soy            |                                                                                                                                 </span><br><span class="line">| mocha          |                                                                                                                                 </span><br><span class="line">| ...            |                                                                                                                                 </span><br><span class="line">|----------------|                                                                                                                                 </span><br><span class="line">| hasSoy()       |                                                                                                                                 </span><br><span class="line">| hasMocha()     |                                                                                                                                 </span><br><span class="line">| ...            |                                                                                                                                 </span><br><span class="line">|                |                                                                                                                                 </span><br><span class="line">|                |                                                                                                                                 </span><br><span class="line">|                |                                                                                                                                 </span><br><span class="line">|                |                                                                                                                                 </span><br><span class="line">|                |                                                                                                                                 </span><br><span class="line">+----------------+                                                                                                                                 </span><br></pre></td></tr></table></figure>

<p>对应的代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="comment">// declear condiment</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> condimentCost = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">if</span> (hasMilk()) &#123;</span><br><span class="line">            codimentCost += milkCost;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (hasSoy()) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DarkRoast</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.00</span> + <span class="keyword">super</span>.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样做虽然避免的类爆炸式增长，但是导致了新的问题。比如每当调料价格变动，你就必须得改变老得代码。新加调料，你还得修改之前的 if 逻辑。而且如果有新的饮料，比如茶，那么这个继承关系在逻辑层面上就不是很合理了。为了解决类似的问题，我们引入装饰者模式</p>
<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><ul>
<li>每个 Component 可以自己调用自己，也可以被 Decorator 包裹</li>
<li>每个 Decorator 都持有一个 Component 的引用</li>
<li>ConcrateComponent 是 Component 的具体实现</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">                    +--------------+                            </span><br><span class="line">                    |  Component   |                            </span><br><span class="line">                    |--------------|------------------|         </span><br><span class="line">                    | +operation() |                  |         </span><br><span class="line">                    |              |                  |         </span><br><span class="line">                    +--------------+                  |         </span><br><span class="line">                    ^             ^                   |         </span><br><span class="line">                    |             |                   |         </span><br><span class="line">                    |             |                   |         </span><br><span class="line">+---------------------+          +--------------+     |         </span><br><span class="line">|  ConcreateComponent |          |  Decorator   |&lt;&gt;---|         </span><br><span class="line">|---------------------|          |--------------|               </span><br><span class="line">| +operation()        |          | +operation() |               </span><br><span class="line">|                     |          |              |               </span><br><span class="line">+---------------------+          +--------------+               </span><br><span class="line">                                  ^         ^                   </span><br><span class="line">                                  |         |                   </span><br><span class="line">                                  |         |                   </span><br><span class="line">              +---------------------+    +---------------------+</span><br><span class="line">              | ConcreateDecoratorA |    | ConcreateDecoratorA |</span><br><span class="line">              |---------------------|    |---------------------|</span><br><span class="line">              | +operation()        |    | +operation()        |</span><br><span class="line">              | +addBehavior()      |    | +addBehavior()      |</span><br><span class="line">              +---------------------+    +---------------------+</span><br></pre></td></tr></table></figure>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基类实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    String description = <span class="string">&quot;Unknown Beverage&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例咖啡实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        description = <span class="string">&quot;Espresso&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰类的基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰类实现，装饰类会持有基类引用，并对方法做扩展</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line">    Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mocha</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.cost() + .<span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot;, Mocha&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soy</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line">    Beverage beverage;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Soy</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.cost() + .<span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot;, Soy&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Beverage myBeverage = <span class="keyword">new</span> Mocha(<span class="keyword">new</span> Soy(<span class="keyword">new</span> Espresso()));</span><br><span class="line">        System.out.println(myBeverage.cost());</span><br><span class="line">        System.out.println(myBeverage.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.3400000000000003</span></span><br><span class="line"><span class="comment">// Espresso, Soy, Mocha</span></span><br></pre></td></tr></table></figure>

<p>问，我现在如果加了双份的抹茶，description 输出时会现实 Mocha, Mocha。那如果我想要他输出 Double Mocha 的话需要怎么做?</p>
<p>按照装饰模式的思路，可以将 description 的实现改为容器，比如 list, 然后在最外层加入一个 CustomizedDescDecorator 截取 description 做整合</p>
<h2 id="该模式在-JDK-中的应用"><a href="#该模式在-JDK-中的应用" class="headerlink" title="该模式在 JDK 中的应用"></a>该模式在 JDK 中的应用</h2><p>Java 的 I/O 包就使用了装饰器模式。IO 分两种，字节流（Input/OutputStream）和字符流（Reader/Writer）。</p>
<p>以输入字节流 InputStream 为例，继承关系如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                                +-------------+                                                 </span><br><span class="line">                                | InputStream |                                                 </span><br><span class="line">                                +-------------+                                                 </span><br><span class="line">                                       ^                                                        </span><br><span class="line">         ------------------------------|------------------------------------------------------  </span><br><span class="line">        |                              |              |                       |              |  </span><br><span class="line">        |                              |              |                       |              |  </span><br><span class="line">+-----------------+  +-------------------+  +-------------------+  +----------------------+  |  </span><br><span class="line">| FileInputStream |  | FilterInputStream |  | ObjectInputStream |  | ByteArrayInputStream |  ...</span><br><span class="line">+-----------------+  +-------------------+  +-------------------+  +----------------------+     </span><br><span class="line">                                  ^                                                             </span><br><span class="line">        --------------------------|-----------------------------------------------              </span><br><span class="line">       |                          |                           |                  |              </span><br><span class="line">       |                          |                           |                  |              </span><br><span class="line">+---------------------+   +---------------------+    +--------------------+      |              </span><br><span class="line">| BufferedInputStream |   | DataInputStream     |    | PushbakInputStream |     ...             </span><br><span class="line">+---------------------+   +---------------------+    +--------------------+                     </span><br></pre></td></tr></table></figure>

<p>一开始看岔了，把 FilterInputStream 和 FileInputStream 看成同一个了，所以没能把它和装饰模式匹配起来。在 IO 的实现中，FileInputStream, ObjectInputStream 等即对饮了 ConcreateComponent, 是具体实现。</p>
<p>FilterInputStream 对应了 Decorator, 是修饰器的基类，持有了 inputStream 的引用，而 BufferedInputStream 则为装饰器的具体实现，起到包装 Component 的作用。</p>
<p>BufferedInputStream 使用示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoDecoratorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassLoader classloader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        InputStream is = classloader.getResourceAsStream(<span class="string">&quot;c1_2.xml&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(is)) &#123;</span><br><span class="line">            <span class="keyword">byte</span> data;</span><br><span class="line">            <span class="keyword">while</span> ((data = (<span class="keyword">byte</span>) bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Finish read...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
        <category>HFDP</category>
      </categories>
      <tags>
        <tag>decorator pattern</tag>
        <tag>装饰器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器模式</title>
    <url>/hexo/2021/04/16/Design-pattern-iterator/</url>
    <content><![CDATA[<blockquote>
<p><strong>The Iterator Pattern</strong> provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.<br>迭代器模式可以让我们在不需要知道一个集合的具体实现的情况下，依次访问集合中的各个元素</p>
</blockquote>
<p>it also places the task of traveral(遍历) on the iterator object, not on the aggregate, which simplifies the aggregate interface and implementation, and places the responsibility where it should be.</p>
<blockquote>
<p><strong>Design Principle:</strong> A class should have only one reason to change</p>
</blockquote>
<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>现在你是餐饮部的大老板了，上周你刚收购了两家餐厅，现在你要整合他们的业务，将他们的菜单合并以统一的用户体验提供服务，所幸，他们的底层菜品条目是一致的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuItem</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String description;</span><br><span class="line">    <span class="keyword">boolean</span> vegetarian;</span><br><span class="line">    <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">        <span class="keyword">this</span>.vegetarian = vegetarian;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;, desc:&#x27;&quot;</span> + description + <span class="string">&#x27;\&#x27;&#x27;</span> +  <span class="string">&quot;, vegetarian:&quot;</span> + vegetarian + <span class="string">&quot;, price:&quot;</span> + price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两家店铺的菜单实现代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 煎饼电，通过 List 来存储菜单</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PancakeHouseMenu</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;MenuItem&gt; menuItems;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PancakeHouseMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        menuItems = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        addItem(<span class="string">&quot;K &amp; B’s Pancake Breakfast&quot;</span>, <span class="string">&quot;Pancakes with scrambled eggs, and toast&quot;</span>, <span class="keyword">true</span>, <span class="number">2.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Regular Pancake Breakfast&quot;</span>, <span class="string">&quot;Pancakes with fried eggs, sausage&quot;</span>, <span class="keyword">false</span>, <span class="number">2.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Blueberry Pancakes&quot;</span>, <span class="string">&quot;Pancakes made with fresh blueberries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.49</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Waffles&quot;</span>, <span class="string">&quot;Waffles, with your choice of blueberries or strawberries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.59</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetarian, price);</span><br><span class="line">        menuItems.add(menuItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;MenuItem&gt; <span class="title">getMenuItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小吃店，通过 Array 存储菜单</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DinerMenu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> MAX_ITEMS = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> numberOfItems = <span class="number">0</span>;</span><br><span class="line">    MenuItem[] menuItems;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DinerMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        menuItems = <span class="keyword">new</span> MenuItem[MAX_ITEMS];</span><br><span class="line">        addItem(<span class="string">&quot;Vegetarian BLT&quot;</span>, <span class="string">&quot; (Fakin’)Bacon with lettuce &amp; tomato on whole wheat&quot;</span>, <span class="keyword">true</span>, <span class="number">2.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;BLT&quot;</span>, <span class="string">&quot;Bacon with lettuce &amp; tomato on whole wheat&quot;</span>, <span class="keyword">false</span>, <span class="number">2.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Soup of the day&quot;</span>, <span class="string">&quot;Soup of the day, with a side of potato salad&quot;</span>, <span class="keyword">false</span>, <span class="number">3.29</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Hotdog&quot;</span>, <span class="string">&quot;A hot dog, with saurkraut, relish, onions, topped with cheese&quot;</span>, <span class="keyword">false</span>, <span class="number">3.05</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Steamed Veggies and Brown Rice&quot;</span>, <span class="string">&quot;Steamed vegetables over brown rice&quot;</span>, <span class="keyword">false</span>, <span class="number">3.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Pasta&quot;</span>, <span class="string">&quot;Spaghetti with Marinara Sauce, and a slice of sourdough bread&quot;</span>, <span class="keyword">false</span>, <span class="number">3.89</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetarian, price);</span><br><span class="line">        <span class="keyword">if</span> (numberOfItems &gt;= MAX_ITEMS) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Sorry, menu is full !Can’t add item to menu&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            menuItems[numberOfItems] = menuItem;</span><br><span class="line">            numberOfItems = numberOfItems + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MenuItem[] getMenuItems() &#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在没有做重构的情况下，每当你想要打印所有的菜单，你就得用两个循环，分别 loop 一下这两家店的菜单, 并且更糟糕的是，下次你再收购店面，你就必须再改一次这部分代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopMenu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MenuItem[] dinerMenu = <span class="keyword">new</span> DinerMenu().getMenuItems();</span><br><span class="line">        <span class="keyword">for</span> (MenuItem menu : dinerMenu) &#123;</span><br><span class="line">            System.out.println(menu);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;MenuItem&gt; menuItemList = <span class="keyword">new</span> PancakeHouseMenu().getMenuItems();</span><br><span class="line">        <span class="keyword">for</span> (MenuItem menuItem : menuItemList) &#123;</span><br><span class="line">            System.out.println(menuItem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了解决这个问题，我们新建一个 Iterator 接口来解决这个问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为小吃店新建一个 Iterator 实现并在小吃点的菜单中添加返回 Iterator 的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DinerMenuIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    MenuItem[] items;</span><br><span class="line">    <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DinerMenuIterator</span><span class="params">(MenuItem[] items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// position 这里不用做 +1 处理，拿长度为 1 的 arr 做例子。初始化后，调用 hasNext()，0 &lt; 1 &amp;&amp; obj != null 返回 true</span></span><br><span class="line">        <span class="keyword">return</span> position &lt; items.length &amp;&amp; items[position] != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MenuItem item = items[position];</span><br><span class="line">        position++;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DinerMenu</span> </span>&#123;</span><br><span class="line">    <span class="comment">// duplicated before</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DinerMenuIterator(menuItems);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对煎饼摊做同样的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PancakeHouseMenuIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    List&lt;MenuItem&gt; menuItemList;</span><br><span class="line">    <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PancakeHouseMenuIterator</span><span class="params">(List&lt;MenuItem&gt; menuItemList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menuItemList = menuItemList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> position &lt; menuItemList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MenuItem item = menuItemList.get(position);</span><br><span class="line">        position++;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PancakeHouseMenu</span> </span>&#123;</span><br><span class="line">    <span class="comment">// duplicated before</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PancakeHouseMenuIterator(menuItems);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答应客户端的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Iterator it1 = <span class="keyword">new</span> PancakeHouseMenu().createIterator();</span><br><span class="line">        Iterator it2 = <span class="keyword">new</span> DinerMenu().createIterator();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;MENU\n----\nBREAKFAST&quot;</span>);</span><br><span class="line">        printMenu(it1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\nLUNCH&quot;</span>);</span><br><span class="line">        printMenu(it2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">(Iterator it)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MENU</span></span><br><span class="line"><span class="comment">// ----</span></span><br><span class="line"><span class="comment">// BREAKFAST</span></span><br><span class="line"><span class="comment">// K &amp; B’s Pancake Breakfast, 2.99 -- Pancakes with scrambled eggs, and toast</span></span><br><span class="line"><span class="comment">// Regular Pancake Breakfast, 2.99 -- Pancakes with fried eggs, sausage</span></span><br><span class="line"><span class="comment">// Blueberry Pancakes, 3.49 -- Pancakes made with fresh blueberries</span></span><br><span class="line"><span class="comment">// Waffles, 3.59 -- Waffles, with your choice of blueberries or strawberries</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LUNCH</span></span><br><span class="line"><span class="comment">// Vegetarian BLT, 2.99 --  (Fakin’)Bacon with lettuce &amp; tomato on whole wheat</span></span><br><span class="line"><span class="comment">// BLT, 2.99 -- Bacon with lettuce &amp; tomato on whole wheat</span></span><br><span class="line"><span class="comment">// Soup of the day, 3.29 -- Soup of the day, with a side of potato salad</span></span><br><span class="line"><span class="comment">// Hotdog, 3.05 -- A hot dog, with saurkraut, relish, onions, topped with cheese</span></span><br><span class="line"><span class="comment">// Steamed Veggies and Brown Rice, 3.99 -- Steamed vegetables over brown rice</span></span><br><span class="line"><span class="comment">// Pasta, 3.89 -- Spaghetti with Marinara Sauce, and a slice of sourdough bread</span></span><br></pre></td></tr></table></figure>

<p>其实 Java util 包下有自己的 Iterator 实现，集合类是这个设计模式的重度使用者，下面我们用官方实现替换我们自己的实现。</p>
<p>代码会更简单，除了在各 class 文件中引入引用外，PancakeHouseMenuIterator 可以删除， 在 PancakeHouseMenu 的 createIterator() 直接返回 List.iterator() 即可。</p>
<p>为了让实现更精简，我们还可以抽象出一个 Menu 类作为基类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Menu</span> </span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;MenuItem&gt; <span class="title">createIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后两个 Menu 实体类实现这个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DinerMenu</span> <span class="keyword">implements</span> <span class="title">Menu</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PancakeHouseMenu</span> <span class="keyword">implements</span> <span class="title">Menu</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端中通过 Menu 基类访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Menu menu1 = <span class="keyword">new</span> PancakeHouseMenu();</span><br><span class="line">        Menu menu2 = <span class="keyword">new</span> DinerMenu();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;MENU\n----\nBREAKFAST&quot;</span>);</span><br><span class="line">        printMenu(menu1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\nLUNCH&quot;</span>);</span><br><span class="line">        printMenu(menu2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        Iterator&lt;MenuItem&gt; it = menu.createIterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样最大的好处是，客户端只和接口做交互，不需要关心具体实现，这就是传说中的 面向接口编程</p>
<p>时隔半个月，你又收购了一家咖啡店，是时候测试一下你的策略是否好使了。咖啡店菜单如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CafeMenu</span> </span>&#123;</span><br><span class="line">    Hashtable menuItems = <span class="keyword">new</span> Hashtable();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CafeMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        addItem(<span class="string">&quot;Veggie Burger and Air Fries&quot;</span>, <span class="string">&quot;Veggie burger on a whole wheat bun, lettuce, tomato, and fries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Soup of the day&quot;</span>, <span class="string">&quot;A cup of the soup of the day, with a side salad&quot;</span>, <span class="keyword">false</span>, <span class="number">3.69</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Burrito&quot;</span>, <span class="string">&quot;A large burrito, with whole pinto beans, salsa, guacamole&quot;</span>, <span class="keyword">true</span>, <span class="number">4.29</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetarian, price);</span><br><span class="line">        menuItems.put(menuItem.getName(), menuItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hashtable <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们按照之前的重构方案，让他实现 Menu 接口并提对应的方法实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CafeMenu</span> <span class="keyword">implements</span> <span class="title">Menu</span></span>&#123;</span><br><span class="line">    Hashtable&lt;String, MenuItem&gt; menuItems = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CafeMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        addItem(<span class="string">&quot;Veggie Burger and Air Fries&quot;</span>, <span class="string">&quot;Veggie burger on a whole wheat bun, lettuce, tomato, and fries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Soup of the day&quot;</span>, <span class="string">&quot;A cup of the soup of the day, with a side salad&quot;</span>, <span class="keyword">false</span>, <span class="number">3.69</span>);</span><br><span class="line">        addItem(<span class="string">&quot;Burrito&quot;</span>, <span class="string">&quot;A large burrito, with whole pinto beans, salsa, guacamole&quot;</span>, <span class="keyword">true</span>, <span class="number">4.29</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetarian, price);</span><br><span class="line">        menuItems.put(menuItem.getName(), menuItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hashtable&lt;String, MenuItem&gt; <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;MenuItem&gt; <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems.values().iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在 IteratorClient 中添加对应的调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Menu menu1 = <span class="keyword">new</span> PancakeHouseMenu();</span><br><span class="line">        Menu menu2 = <span class="keyword">new</span> DinerMenu();</span><br><span class="line">        Menu menu3 = <span class="keyword">new</span> CafeMenu();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;MENU\n----\nBREAKFAST&quot;</span>);</span><br><span class="line">        printMenu(menu1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\nLUNCH&quot;</span>);</span><br><span class="line">        printMenu(menu2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n DRINK&quot;</span>);</span><br><span class="line">        printMenu(menu3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        Iterator&lt;MenuItem&gt; it = menu.createIterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MENU</span></span><br><span class="line"><span class="comment">// ----</span></span><br><span class="line"><span class="comment">// BREAKFAST</span></span><br><span class="line"><span class="comment">// K &amp; B’s Pancake Breakfast, 2.99 -- Pancakes with scrambled eggs, and toast</span></span><br><span class="line"><span class="comment">// Regular Pancake Breakfast, 2.99 -- Pancakes with fried eggs, sausage</span></span><br><span class="line"><span class="comment">// Blueberry Pancakes, 3.49 -- Pancakes made with fresh blueberries</span></span><br><span class="line"><span class="comment">// Waffles, 3.59 -- Waffles, with your choice of blueberries or strawberries</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LUNCH</span></span><br><span class="line"><span class="comment">// Vegetarian BLT, 2.99 --  (Fakin’)Bacon with lettuce &amp; tomato on whole wheat</span></span><br><span class="line"><span class="comment">// BLT, 2.99 -- Bacon with lettuce &amp; tomato on whole wheat</span></span><br><span class="line"><span class="comment">// Soup of the day, 3.29 -- Soup of the day, with a side of potato salad</span></span><br><span class="line"><span class="comment">// Hotdog, 3.05 -- A hot dog, with saurkraut, relish, onions, topped with cheese</span></span><br><span class="line"><span class="comment">// Steamed Veggies and Brown Rice, 3.99 -- Steamed vegetables over brown rice</span></span><br><span class="line"><span class="comment">// Pasta, 3.89 -- Spaghetti with Marinara Sauce, and a slice of sourdough bread</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  DRINK</span></span><br><span class="line"><span class="comment">// Soup of the day, 3.69 -- A cup of the soup of the day, with a side salad</span></span><br><span class="line"><span class="comment">// Burrito, 4.29 -- A large burrito, with whole pinto beans, salsa, guacamole</span></span><br></pre></td></tr></table></figure>

<p>一切和预期的一样 ╮(￣▽￣””)╭</p>
<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p>图示说明：</p>
<ul>
<li>interface 到实例之间是 虚线空心三角，表示接口实现</li>
<li>ConcreateAggregate 到 ConcreateIterator 是实线普通三角，表示拥有，回想一下 DinerHouse 是需要返回 DinerHouseMenuIterator 来做遍历的</li>
<li>Client 对两个 interface 也是 实线普通三角，也是表示拥有</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+------------------+                              +--------------------+                                                                             </span><br><span class="line">|  &lt;&lt;interface&gt;&gt;   |         +-----------+        |   &lt;&lt;interface&gt;&gt;    |                                                                             </span><br><span class="line">|    Aggregate     |&lt;--------|  Client   |------&gt; |      Iterator      |                                                                             </span><br><span class="line">|------------------|         |           |        |--------------------|                                                                             </span><br><span class="line">| createIterator() |         +-----------+        | hasNext()          |                                                                             </span><br><span class="line">|                  |                              | next()             |                                                                             </span><br><span class="line">+------------------+                              | remove()           |                                                                             </span><br><span class="line">        ^                                         +--------------------+                                                                             </span><br><span class="line">        |                                                     ^                                                                                      </span><br><span class="line">        |                                                     |                                                                                      </span><br><span class="line">        |                                                     |                                                                                      </span><br><span class="line">        |                                                     |                                                                                      </span><br><span class="line">+--------------------+                            +--------------------+                                                                             </span><br><span class="line">| ConcreateAggregate |---------------------------&gt;| ConcreateIterator  |                                                                             </span><br><span class="line">|--------------------|                            |--------------------|                                                                             </span><br><span class="line">| createIterator()   |                            | hasNext()          |                                                                             </span><br><span class="line">|                    |                            | next()             |                                                                             </span><br><span class="line">+--------------------+                            | remove()           |                                                                             </span><br><span class="line">                                                  +--------------------+                                                                             </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>HFDP</category>
      </categories>
      <tags>
        <tag>iterator pattern</tag>
        <tag>迭代器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/hexo/2020/10/12/Design-pattern-proxy/</url>
    <content><![CDATA[<p>记录一下代理模式的学习路径。代理模式常用的两种形式：静态代理，动态代理。其中，动态代理在两个国民级框架 mybatis 和 spring 中都有用到。</p>
<p>代理模式的定义：为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p>
<p>通过代理模式我们可以：</p>
<ol>
<li>隐藏委托类的具体实现</li>
<li>客户和委托类解偶，在不改变委托类的情况下添加额外功能</li>
</ol>
<p>插入类图 Here…</p>
<p>这里我们举一个生活中常见的例子，外卖小哥。在这个情境下，外卖小哥就是我们的代理。帮我们执行买餐这个动作。同时作为扩展，它还可以帮我们买烟买水，倒垃圾等。。。虽然我不提倡这种做法，只用于举例，无伤大雅。</p>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>公共接口，用来点单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">order</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户实现，这个类代表叫外卖的人</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Order and pay money...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>外卖小哥类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryGuy</span> <span class="keyword">implements</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeliveryGuy</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customer = customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        customer.order();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        Order order = <span class="keyword">new</span> DeliveryGuy(customer);</span><br><span class="line">        order.order();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ol>
<li>简单直接</li>
<li>解偶</li>
<li>代理类扩展业务方便</li>
</ol>
<p>缺点：</p>
<p>每个业务都需要一个代理类，冗余代码很多</p>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>常见的有两种方式：JDK 原生动态代理和 CGLib 动态代理，这里只介绍第一种。</p>
<p>JDK 根据代理模式的特性，制定了一套规范，参照他的规范，可以在很方便的在运行时产生代理类代码，而不需要在编译器写源码，更方便，当然代价就是增加了学习成本，代码不像之前那么一目了然了。实现时主要依赖两个 reflect 下的原生类 Proxy 和 InvocationHandler。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        Object obj = method.invoke(target, args);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;buy something...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;take out the trash...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LogHandler logHandler = <span class="keyword">new</span> LogHandler(<span class="keyword">new</span> Customer());</span><br><span class="line">        Order order = (Order) (Proxy.newProxyInstance(Order.class.getClassLoader(), <span class="keyword">new</span> Class[] &#123;Order.class&#125;, logHandler));</span><br><span class="line">        order.order();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LogHandler 的实现中 invok 的是要要特别注意一下，method.invoke 的参数是<strong>target</strong>。我一开始直接把 proxy 但参数传入了，排查了好久 （；￣ェ￣）</p>
<p>中的来说没什么难度，最花时间的部分是熟悉这种使用方式，第一次理解起来可能花点时间。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>proxy pattern</tag>
        <tag>代理模式</tag>
      </tags>
  </entry>
  <entry>
    <title>访问者模式</title>
    <url>/hexo/2020/09/09/Design-pattern-visitor/</url>
    <content><![CDATA[<blockquote>
<p>GoF 定义: Allows for one or more operation to be applied to a set of objects at runtime, decoupling the operations from the object structure. </p>
</blockquote>
<p>访问者模式讲的是表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>
<p>行为模式之一，目的是将<strong>行为</strong>和<strong>对象</strong>分开。</p>
<p>缺点：<strong>每增</strong>加一种支持的 object，你就必须在 visitor 及其实现类中添加新的方法支持这个改动。</p>
<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>被访问者就是上文中的 object，他持有数据，我们想把他和数据运算分离，保持其独立性</p>
<p>访问者代表着 operations，通过它可以实现数据运算</p>
<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="From-DZone"><a href="#From-DZone" class="headerlink" title="From DZone"></a>From DZone</h3><ul>
<li><a href="https://dzone.com/articles/design-patterns-visitor">DZone - Visitor Pattern</a></li>
</ul>
<p>抽象一个邮寄业务，计算购物车中所有的物件总的邮费。每样物件都有自己的属性，比如价格，重量之类的。我们将邮费计算的规则单独封装在 Visitor 中，在物件类中通过调用 accept 实现计算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代表 object 的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 accept 的实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price = <span class="number">8.0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> weight = <span class="number">3.2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// visitor 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Book book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Shoes shoes)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// visitor 实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostageVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> totalPostageForCart;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// rule to calculate book postage cost</span></span><br><span class="line">        <span class="comment">// if price over 10, free postage.</span></span><br><span class="line">        <span class="keyword">if</span>(book.getPrice() &lt; <span class="number">10.0</span>) &#123;</span><br><span class="line">            totalPostageForCart += book.getWeight() * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Shoes shoes)</span> </span>&#123; <span class="comment">//TODO &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalPostageForCart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.totalPostageForCart;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        Shoes shoes = <span class="keyword">new</span> Shoes();</span><br><span class="line">        PostageVisitor postageVisitor = <span class="keyword">new</span> PostageVisitor();</span><br><span class="line"></span><br><span class="line">        book.accept(postageVisitor);</span><br><span class="line">        shoes.accept(postageVisitor);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Total cost: &quot;</span> + postageVisitor.getTotalPostageForCart());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="From-Refactoring-Guru"><a href="#From-Refactoring-Guru" class="headerlink" title="From Refactoring Guru"></a>From Refactoring Guru</h3><ul>
<li><a href="https://refactoringguru.cn/design-patterns/visitor/java/example">重构大师</a></li>
</ul>
<p>根据定义的图形打印信息到 XML 文件中，这个例子本质上和前一个没什么区别，但是他提供了组合类型的 object 支持，并且输出 xml, 还有 format 都让我眼前一亮。反正感觉很赞！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义持有 accept 的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dot</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dot</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// move shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// draw shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.visitDot(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getter + setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义组合类型的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompoundShape</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Shape&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CompoundShape</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// move shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// draw shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.visitCompoundGraphic(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Shape shape)</span> </span>&#123;</span><br><span class="line">        children.add(shape);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 visitor 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">visitDot</span><span class="params">(Dot dot)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">visitCircle</span><span class="params">(Circle circle)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">visitRectangle</span><span class="params">(Rectangle rectangle)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">visitCompoundGraphic</span><span class="params">(CompoundShape cg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// visitor 实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLExportVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">export</span><span class="params">(Shape... args)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : args) &#123;</span><br><span class="line">            sb.append(shape.accept(<span class="keyword">this</span>)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">visitDot</span><span class="params">(Dot d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;dot&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;id&gt;&quot;</span> + d.getId() + <span class="string">&quot;&lt;/id&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;x&gt;&quot;</span> + d.getX() + <span class="string">&quot;&lt;/x&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;y&gt;&quot;</span> + d.getY() + <span class="string">&quot;&lt;/y&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/dot&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">visitCompoundGraphic</span><span class="params">(CompoundShape cg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;compound_graphic&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;   &lt;id&gt;&quot;</span> + cg.getId() + <span class="string">&quot;&lt;/id&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                _visitCompoundGraphic(cg) +</span><br><span class="line">                <span class="string">&quot;&lt;/compound_graphic&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">_visitCompoundGraphic</span><span class="params">(CompoundShape cg)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : cg.children) &#123;</span><br><span class="line">            String obj = shape.accept(<span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">// Proper indentation for sub-objects.</span></span><br><span class="line">            obj = <span class="string">&quot;    &quot;</span> + obj.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;\n    &quot;</span>) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            sb.append(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dot dot = <span class="keyword">new</span> Dot(<span class="number">1</span>, <span class="number">10</span>, <span class="number">55</span>);</span><br><span class="line">        Circle circle = <span class="keyword">new</span> Circle(<span class="number">2</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">10</span>);</span><br><span class="line">        Rectangle rectangle = <span class="keyword">new</span> Rectangle(<span class="number">3</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        CompoundShape compoundShape = <span class="keyword">new</span> CompoundShape(<span class="number">4</span>);</span><br><span class="line">        compoundShape.add(dot);</span><br><span class="line">        compoundShape.add(circle);</span><br><span class="line">        compoundShape.add(rectangle);</span><br><span class="line"></span><br><span class="line">        CompoundShape c = <span class="keyword">new</span> CompoundShape(<span class="number">5</span>);</span><br><span class="line">        c.add(dot);</span><br><span class="line">        compoundShape.add(c);</span><br><span class="line"></span><br><span class="line">        export(circle, compoundShape);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">export</span><span class="params">(Shape... shapes)</span> </span>&#123;</span><br><span class="line">        XMLExportVisitor exportVisitor = <span class="keyword">new</span> XMLExportVisitor();</span><br><span class="line">        System.out.println(exportVisitor.export(shapes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>visitor pattern</tag>
        <tag>访问者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 mybatis</title>
    <url>/hexo/2020/10/12/Dive-into-mybatis/</url>
    <content><![CDATA[<p>通过阅读 mybatis 源码，尝试深入理解其设计理念和实现方式。学习思路，通过对比 mybatis 代码结构和传统的 JDBC 实现来理解。说白了 mybatis 只是把传统的实现做了封装，避免了很多冗余代码。</p>
<p>JDBC 流程和 mybatis 的对应比较：</p>
<table>
<thead>
<tr>
<th align="left">JDBC</th>
<th align="left">Mybatis</th>
</tr>
</thead>
<tbody><tr>
<td align="left">加载驱动, 获取连接</td>
<td align="left">mybatis-config.xml</td>
</tr>
<tr>
<td align="left">执行 SQL</td>
<td align="left">SqlSessionFactory, SqlSession</td>
</tr>
<tr>
<td align="left">组装结果</td>
<td align="left">MappedStatement</td>
</tr>
</tbody></table>
<h2 id="配置加载"><a href="#配置加载" class="headerlink" title="配置加载"></a>配置加载</h2><p>在 JDBC 实现中，我们通过类似如下代码得到连接信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtils</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">//1.加载驱动程序</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="comment">//2.获得数据库的连接</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(URL, NAME, PASSWORD);</span><br><span class="line">    <span class="comment">// other actions...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 mybatis 中，这些信息都是写在核心配置文件 xml 中的。样板如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?...&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12345678&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/jzheng/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>加载相关的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="comment">// 获取文件流</span></span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource); </span><br><span class="line"><span class="comment">// 构建工厂</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure>

<p>想要了解的点：</p>
<ol>
<li>mybatis 是如何解析 xml 的 - 写一篇 Builder pattern 的文章，解析的时候重度使用这种模式</li>
<li>在解析的时候都塞了一些什么东西</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Item 34 能用枚举就别用 int 常量</title>
    <url>/hexo/2020/06/05/Effective-Java-Item-34-%E8%83%BD%E7%94%A8%E6%9E%9A%E4%B8%BE%E5%B0%B1%E5%88%AB%E7%94%A8-int-%E5%B8%B8%E9%87%8F/</url>
    <content><![CDATA[<p>本节要点：</p>
<ul>
<li>使用 enum 代替 整型/字符型枚举模式</li>
<li>enum 是 final，单例的安全</li>
<li>在 enum 内部使用 abstract 方法使得实例和方法绑定</li>
<li>用 values() 遍历，用 valueOf() 反向索取</li>
<li>使用策略枚举来封装算法</li>
</ul>
<p>在枚举类加入到 java 大家族之前，为了表达达到枚举的效果，我们使用整形常量来表示，这种表达方式被叫做： int 枚举模式(int enum pattern), 例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> APPLE_FUJI = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> APPLE_PIPPIN = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> APPLE_GRANNY_SMITH = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORANGE_NAVEL = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORANGE_TEMPLE = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORANGE_BLOOD = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>缺点： 类型不安全 + 描述性不好， 与之类似的还有 String 枚举模式(String enum pattern)。就是用 String 来代替上例中的 int, 这种做法更糟糕，就算拼写错误也能编译通过，很容易引入 bug。</p>
<p>枚举中每个实例都是单例的，是 public static final 的 field。 枚举没有可访问的构造器，所以不能被继承，是真正的 final 类型的 class。enum 提供了一个命名空间，所以不同 enum 中重名是允许的。示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Apple &#123; FUJI, PIPPIN, GRANNY_SMITH &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Orange &#123; NAVEL, TEMPLE, BLOOD &#125;</span><br></pre></td></tr></table></figure>

<p>太阳系八大行星枚举示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Planet &#123;</span><br><span class="line">    MERCURY(<span class="number">3.302e+23</span>, <span class="number">2.439e6</span>),</span><br><span class="line">    VENUS(<span class="number">4.869e+24</span>, <span class="number">6.052e6</span>),</span><br><span class="line">    EARTH(<span class="number">5.975e+24</span>, <span class="number">6.378e6</span>), </span><br><span class="line">    MARS(<span class="number">6.419e+23</span>, <span class="number">3.393e6</span>),</span><br><span class="line">    JUPITER(<span class="number">1.899e+27</span>, <span class="number">7.149e7</span>), </span><br><span class="line">    SATURN(<span class="number">5.685e+26</span>, <span class="number">6.027e7</span>),</span><br><span class="line">    URANUS(<span class="number">8.683e+25</span>, <span class="number">2.556e7</span>), </span><br><span class="line">    NEPTUNE(<span class="number">1.024e+26</span>, <span class="number">2.477e7</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> mass;           <span class="comment">// In kilograms</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> radius;         <span class="comment">// In meters</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> surfaceGravity; <span class="comment">// In m / s^2</span></span><br><span class="line">    <span class="comment">// Universal gravitational constant in m^3 / kg s^2</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> G = <span class="number">6.67300E-11</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    Planet(<span class="keyword">double</span> mass, <span class="keyword">double</span> radius) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mass = mass;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">        surfaceGravity = G * mass / (radius * radius);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">radius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">surfaceGravity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> surfaceGravity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">surfaceWeight</span><span class="params">(<span class="keyword">double</span> mass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mass * surfaceGravity;  <span class="comment">// F = ma&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>枚举中所有的 field 都应该是 final 的。枚举都有 values() 静态方法， 按照声明顺序返回枚举值。</p>
<p>根据枚举类的适用范围制定他的访问权限，如果是普适的，就把他定义成顶层类，比如 math 中控制舍入模式的 RoundingMode 类。</p>
<p>枚举绑定行为的最佳实践：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通表示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Operation &#123;</span><br><span class="line">    PLUS, MINUS, TIMES, DIVIDE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> PLUS:</span><br><span class="line">                <span class="keyword">return</span> x + y;</span><br><span class="line">            <span class="keyword">case</span> MINUS:</span><br><span class="line">                <span class="keyword">return</span> x - y;</span><br><span class="line">            <span class="keyword">case</span> TIMES:</span><br><span class="line">                <span class="keyword">return</span> x * y;</span><br><span class="line">            <span class="keyword">case</span> DIVIDE:</span><br><span class="line">                <span class="keyword">return</span> x / y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">&quot;Unknown op: &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺点：</p>
<ul>
<li>没有 throw exception 会编译失败</li>
<li>代码脆弱，在添加新操作，如果没有添加 switch 分支的话，新操作不能生效</li>
</ul>
<p>改进版：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Operation &#123;</span><br><span class="line">    PLUS(<span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, MINUS(<span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x - y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, TIMES(<span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x * y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, DIVIDE(<span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x / y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line"></span><br><span class="line">    Operation(String symbol) &#123;</span><br><span class="line">        <span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过将 apply 方法声明为 abstrct 类型迫使枚举类的每个 field 都必须实现自己的 apply 方法达到绑定的效果，这种做法称为：constant-specific method implementation。</p>
<p>通过使用 values() 方法，可以很方便的实现迭代</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">2.0</span>;</span><br><span class="line"><span class="keyword">double</span> y = <span class="number">4.0</span>;</span><br><span class="line"><span class="keyword">for</span> (Operation op : Operation.values()) &#123;</span><br><span class="line">    System.out.printf(<span class="string">&quot;%f %s %f = %f%n&quot;</span>, x, op , y, op.apply(x, y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果 enum 的 toString 方法被重写了，可以订制 fromString() 方法实现字符到枚举的转化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将枚举的名称和枚举类型配对，存到 map 中</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Operation&gt; stringToEnum = Stream.of(Operation.values()).collect(Collectors.toMap(Object::toString, e-&gt; e));</span><br><span class="line"><span class="comment">// 新增 fromString 方法根据 toString 的值到 map 中取数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;Operation&gt; <span class="title">fromString</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(stringToEnum.get(symbol));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(fromString(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">System.out.println(fromString(<span class="string">&quot;-&quot;</span>));</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Optional.empty</span></span><br><span class="line"><span class="comment">// Optional[-]</span></span><br></pre></td></tr></table></figure>

<p>通过 switch 来控制 enum 中的条件选择的例子, 该例用于计算薪资，根据工作日和休息日采取不同的薪资计算。在这个例子中周末工资的理解很有意思，它等于<strong>基本工资 + 从一开始就累加的加班工资</strong>，这样想的话这个例子理解起来会容易一点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> PayrollDay &#123;</span><br><span class="line">    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINS_PER_SHIFT = <span class="number">8</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> minutesWorked, <span class="keyword">int</span> payRate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> basePay = minutesWorked * payRate;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> overtimePay;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// weekends</span></span><br><span class="line">            <span class="keyword">case</span> SATURDAY:</span><br><span class="line">            <span class="keyword">case</span> SUNDAY:</span><br><span class="line">                overtimePay = basePay / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// work day</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                overtimePay = minutesWorked &lt;= MINS_PER_SHIFT ? <span class="number">0</span> : (minutesWorked - MINS_PER_SHIFT) * payRate / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> basePay + overtimePay;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 enum 中使用 switch 有一个弊端， 新添加的类型，比如我想加一个国亲节加班的薪资计算，如果忘了在 switch 中添加相应的分支， 虽然编译能过，然是薪资计算的规则已经出错了。我们通过在该 enum 中添加一个策略枚举来改善它</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> PayrollDay &#123;</span><br><span class="line">    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY,</span><br><span class="line">    SATURDAY(PayType.WEEKEND), SUNDAY(PayType.WEEKEND);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PayType payType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINS_PER_SHIFT = <span class="number">8</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    PayrollDay(PayType payType) &#123;</span><br><span class="line">        <span class="keyword">this</span>.payType = payType;</span><br><span class="line">    &#125; <span class="comment">// constructor for weekend</span></span><br><span class="line"></span><br><span class="line">    PayrollDay() &#123;</span><br><span class="line">        <span class="keyword">this</span>(PayType.WEEKDAY);</span><br><span class="line">    &#125; <span class="comment">// constructor for weekday</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> minutesWorked, <span class="keyword">int</span> payRate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> payType.pay(minutesWorked, payRate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> PayType &#123;</span><br><span class="line">        WEEKDAY &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">overtimePay</span><span class="params">(<span class="keyword">int</span> minsWorked, <span class="keyword">int</span> payRate)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> minsWorked &lt;= MINS_PER_SHIFT ? <span class="number">0</span> : (minsWorked - MINS_PER_SHIFT) * payRate / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        WEEKEND &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">overtimePay</span><span class="params">(<span class="keyword">int</span> minsWorked, <span class="keyword">int</span> payRate)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> minsWorked * payRate / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">overtimePay</span><span class="params">(<span class="keyword">int</span> minsWorked, <span class="keyword">int</span> payRate)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINS_PER_SHIFT = <span class="number">8</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> minsWorked, <span class="keyword">int</span> payRate)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> basePay = minsWorked * payRate;</span><br><span class="line">            <span class="keyword">return</span> basePay + overtimePay(minsWorked, payRate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以总结起来就是在枚举内部别用 switch， 在外部鼓励使用。枚举在性能上与 int 相当，但是由于包装成对象形肯定要略差的，但是使用上感觉不出来。所以<strong>每当需要一组固定常量，并且在编译时就知道其成员的时候，就应该使用枚举</strong></p>
<p>多个枚举共享行为是可以用<strong>策略枚举</strong>的形式</p>
<p>枚举中的常量集并不一定要始终保持不变(?不是很清楚怎么理解，没碰到过这种情况)</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effective java</tag>
        <tag>枚举和注解</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Item 42 Lambda 优先于匿名类</title>
    <url>/hexo/2020/06/04/Effective-Java-Item-42-Lambda-%E4%BC%98%E5%85%88%E4%BA%8E%E5%8C%BF%E5%90%8D%E7%B1%BB/</url>
    <content><![CDATA[<p>本节要点：</p>
<ul>
<li>使用 lambda 代替匿名函数</li>
<li>不要指定 lambda 中的数据类型，除非报错</li>
<li>主要长度，最多三行</li>
</ul>
<p>名词对照表</p>
<table>
<thead>
<tr>
<th>EN</th>
<th>CN</th>
</tr>
</thead>
<tbody><tr>
<td>function type</td>
<td>函数类型</td>
</tr>
<tr>
<td>function object</td>
<td>函数对象</td>
</tr>
<tr>
<td>function interface</td>
<td>函数接口</td>
</tr>
<tr>
<td>type inference</td>
<td>类型推导</td>
</tr>
<tr>
<td>raw type</td>
<td>原生类型</td>
</tr>
</tbody></table>
<p>自从 java 1.1 发布依赖，如果我们想要创建一个方法对象那么就需要使用到匿名函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;jerry&quot;</span>, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(o1.length(), o2.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// tom</span></span><br><span class="line"><span class="comment">// jerry</span></span><br></pre></td></tr></table></figure>

<p>这种表述方式可以实现我们的需求，但是实现繁琐并且语义表达不顺畅， 在 java 8 中，我们可以使用 lambda 来代替匿名函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;jerry&quot;</span>, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">Collections.sort(list, (s1, s2) -&gt; Integer.compare(s1.length(), s2.length()));</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 甚至可以简写为</span></span><br><span class="line">Collections.sort(list, Comparator.comparingInt(String::length));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者更甚</span></span><br><span class="line">list.sort(Comparator.comparingInt(String::length));</span><br></pre></td></tr></table></figure>

<p>再使用 lambda 的时候有一条原则<strong>去掉 lambda 中的所有参数类型，除非它能使你的表达更清楚</strong>。默认情况下，程序会根据上下文推断出类型，实在不行它会报错的，那个时候你再自己修不迟。</p>
<p>Operator 枚举类优化，可以将参数使用 DoubleBinaryOperator 这个方法接口做优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原始代码</span></span><br><span class="line"><span class="keyword">enum</span> Operation &#123;</span><br><span class="line">    PLUS(<span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    MINUS(<span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x - y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    TIMES(<span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x * y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    DIVIDE(<span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line"></span><br><span class="line">    Operation(String symbol) &#123; <span class="keyword">this</span>.symbol = symbol; &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> symbol; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过将上面的 apply() 方法抽象，这个 Operation 的枚举中的行为可以看作是传入两个数，进行计算， 我们将计算抽象，得到如下的简化形式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Operation &#123;</span><br><span class="line">    PLUS(<span class="string">&quot;+&quot;</span>, (x, y) -&gt; x + y),</span><br><span class="line">    MINUS(<span class="string">&quot;-&quot;</span>, (x, y) -&gt; x - y),</span><br><span class="line">    TIMES(<span class="string">&quot;*&quot;</span>, (x, y) -&gt; x * y),</span><br><span class="line">    DIVIDE(<span class="string">&quot;/&quot;</span>, (x, y) -&gt; x / y);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DoubleBinaryOperator operator;</span><br><span class="line"></span><br><span class="line">    Operation(String symbol, DoubleBinaryOperator operator) &#123;</span><br><span class="line">        <span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">        <span class="keyword">this</span>.operator = operator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> symbol; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> operator.applyAsDouble(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺点：lambda 没有名字和文档，如果一段算法不能自我描述，或者超出了几行，就别把他放到一个 lambda 函数中。 </p>
<p>lambda 注意点：</p>
<ul>
<li>一个 lambda 一行是最理想的，最多不能超过三行！</li>
<li>绝大多视情况下，使用 lambda 代替匿名函数，但是如果是对抽象类的实现，还是得依靠匿名函数， lambda 并不能完成这样的功能。</li>
<li>lambda 不能获取自身引用， 在 lambda 中 this 指代的是外围示例，匿名类中 this 指自己</li>
<li>可能的话，别去序列化 lambda 和 匿名函数</li>
<li>lambda 是小函数的最佳表现方式，除非万不得已，不然就别用匿名类实现函数接口</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effective java</tag>
        <tag>Lambda和Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Item 55 谨慎返回 Optional</title>
    <url>/hexo/2020/06/08/Effective-Java-Item-55-%E8%B0%A8%E6%85%8E%E8%BF%94%E5%9B%9E-Optional/</url>
    <content><![CDATA[<p>在 Java 8 中，引入了 Optional class 给我们在处理无法返回任何值的情况下，有了第三种选择。</p>
<h2 id="Optional-概览，基于-Java-1"><a href="#Optional-概览，基于-Java-1" class="headerlink" title="Optional 概览，基于 Java 1"></a>Optional 概览，基于 Java 1</h2><p>他是一个 final 类， 方法列表如下</p>
<table>
<thead>
<tr>
<th>name</th>
<th>返回值</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>empty()</td>
<td>Optional<T></td>
<td>返回一个空的实例</td>
</tr>
<tr>
<td>filter(Predicate&lt;? super T&gt; predicate)</td>
<td>Optional<T></td>
<td>过滤</td>
</tr>
<tr>
<td>flatMap(Function&lt;? super T, ? extends Optional&lt;? extends U&gt;&gt; mapper)</td>
<td>Optional<U></td>
<td>扁平化操作</td>
</tr>
<tr>
<td>get()</td>
<td>T</td>
<td>取值</td>
</tr>
<tr>
<td>ifPresent(Consumer&lt;? super T&gt; action)</td>
<td>void</td>
<td>如果值存在，执行给定的操作</td>
</tr>
<tr>
<td>ifPresentOrElse(Consumer&lt;? super T&gt; action, Runnable emptyAction)</td>
<td>void</td>
<td>如果存在，执行给定操作，否则运行 empty-base action</td>
</tr>
<tr>
<td>isEmpty()</td>
<td>boolean</td>
<td>是否为空</td>
</tr>
<tr>
<td>isPresent()</td>
<td>boolean</td>
<td>是否有值</td>
</tr>
<tr>
<td>map(Function&lt;? super T, ? extends U&gt; mapper)</td>
<td>Optional<U></td>
<td>对每个元素操作</td>
</tr>
<tr>
<td>of(T value)</td>
<td>Optional<T></td>
<td>生成对象</td>
</tr>
<tr>
<td>ofNullable(T value)</td>
<td>Optional<T></td>
<td>生成 empty 或 有值的 optional 对象</td>
</tr>
<tr>
<td>or(Supplier&lt;? extends Optional&lt;? extends T&gt;&gt; supplier)</td>
<td>Optional<T></td>
<td>present 返回自己，否则返回 supplier 生成的对象</td>
</tr>
<tr>
<td>orElse(T other)</td>
<td>T</td>
<td>present 返回自己，否则返回 else 中指定的值</td>
</tr>
<tr>
<td>orElseGet(Supplier&lt;? extends T&gt; supplier)</td>
<td>T</td>
<td>present 返回自己，否则返回 else 中指定的 spplier 生成的对象</td>
</tr>
<tr>
<td>orElseThrow()</td>
<td>T</td>
<td>存在值，返回，否则抛 NoSuchElementException</td>
</tr>
<tr>
<td>stream()</td>
<td>Stream<T></td>
<td>产生流</td>
</tr>
<tr>
<td>toString()</td>
<td>String</td>
<td>/</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; op = Optional.of(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">System.out.println(op.isEmpty()); <span class="comment">// false</span></span><br><span class="line">System.out.println(op.isPresent()); <span class="comment">// true</span></span><br><span class="line">Optional&lt;String&gt; op2 = Optional.empty();</span><br><span class="line">op2.get(); <span class="comment">// Exception in thread &quot;main&quot; java.util.NoSuchElementException</span></span><br><span class="line">String ret = op2.orElse(<span class="string">&quot;backup&quot;</span>); <span class="comment">// backup</span></span><br></pre></td></tr></table></figure>

<p>or vs orElseGet: 返回值不同，前者返回 Optional 对象，后者返回的泛型指定的值</p>
<h2 id="item-55"><a href="#item-55" class="headerlink" title="item 55"></a>item 55</h2><p>本节要点：</p>
<ul>
<li>Optional 强制客户端对返回值做校验</li>
<li>如果不能从 Optional 中 get 值，会抛 NoSuchElementException</li>
<li>永远不要通过返回 Optional 的方法返回 null, 这违背了设计的本意</li>
<li>Optional 本质上与受检测异常相似</li>
<li>容器类，比如 map, stream, 数组和 optional 都不应该装载在 optional 中，你可以返回空的容器，比如空的数组</li>
<li>不要返回基本包装类型的 Option， 有其他的替代品比如 OptionalInt</li>
<li>Optional 不要作为map， set 中的键元素，数组也不行</li>
<li>Optional 相对而言还是比较消耗资源的，性能要求高的场景谨慎使用</li>
</ul>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">E <span class="title">max</span><span class="params">(Collection&lt;E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Empty collection&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (E e : c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span> || e.compareTo(result) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result =  Objects.requireNonNull(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 Optional 优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">Optional&lt;E&gt; <span class="title">max</span><span class="params">(Collection&lt;E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (E e : c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span> || e.compareTo(result) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result =  Objects.requireNonNull(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Optional.of(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 Stream 优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">Optional&lt;E&gt; <span class="title">max</span><span class="params">(Collection&lt;E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c.stream().max(Comparator.naturalOrder());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果没有返回备选</span></span><br><span class="line">max(words).orElse(<span class="string">&quot;other words...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有，抛出异常</span></span><br><span class="line">max(toys).orElseThrow(TmperTantrumException::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">ph.parent().map(h -&gt; String.valueIf(h.pid())).orElse(<span class="string">&quot;N/A&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤非空的 Optional 集合</span></span><br><span class="line">List&lt;Optional&lt;String&gt;&gt; listOfOptionals = Arrays.asList(Optional.empty(), Optional.of(<span class="string">&quot;foo&quot;</span>), Optional.empty(), Optional.of(<span class="string">&quot;bar&quot;</span>));</span><br><span class="line"><span class="comment">// Java 8 </span></span><br><span class="line">List&lt;String&gt; filteredList = listOfOptionals.stream()</span><br><span class="line">  .filter(Optional::isPresent)</span><br><span class="line">  .map(Optional::get)</span><br><span class="line">  .collect(Collectors.toList());</span><br><span class="line"><span class="comment">// Java9 中可以简化为</span></span><br><span class="line">List&lt;String&gt; filteredList = listOfOptionals.stream()</span><br><span class="line">  .flatMap(Optional::stream)</span><br><span class="line">  .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effective java</tag>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java chapter 2 creating and destorying objects</title>
    <url>/hexo/2020/10/20/Effective-Java-chapter-2-creating-and-destorying-objects/</url>
    <content><![CDATA[<p>第二章 对象的生成和销毁 读书笔记</p>
<h2 id="实体类有很多构造函数的时候，使用-Builder"><a href="#实体类有很多构造函数的时候，使用-Builder" class="headerlink" title="实体类有很多构造函数的时候，使用 Builder"></a>实体类有很多构造函数的时候，使用 Builder</h2><blockquote>
<p>In summary, the Builder pattern is a good choice when designing classes whose constructors or static factories would have more than a handful of parameters, especially if many of the parameters are optional or of identical type. Client code is much easier to read and write with builders than with telescoping constructors, and builders are much safer than JavaBeans.</p>
<p>总的来说，builder 模式适用于实体类有多个构造函数并且参数大于 5 个，参数可选并且参数类型相同的情况。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单的多构造函数实体类例子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;  <span class="comment">// (mL)            required</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;     <span class="comment">// (per container) required</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;     <span class="comment">// (per serving)   optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;          <span class="comment">// (g/serving)     optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;       <span class="comment">// (mg/serving)    optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate; <span class="comment">// (g/serving)     optional</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, fat, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat, <span class="keyword">int</span> sodium)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, fat, sodium, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat, <span class="keyword">int</span> sodium, <span class="keyword">int</span> carbohydrate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servingSize = servingSize;</span><br><span class="line">        <span class="keyword">this</span>.servings = servings;</span><br><span class="line">        <span class="keyword">this</span>.calories = calories;</span><br><span class="line">        <span class="keyword">this</span>.fat = fat;</span><br><span class="line">        <span class="keyword">this</span>.sodium = sodium;</span><br><span class="line">        <span class="keyword">this</span>.carbohydrate = carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多构造函数能够工作，但是对客户端来说多个参数的构造函数在调用和阅读上比较容易出错。</p>
<p>为了解决上面的多构造器模式的弊端，还有一种解决方案是采用 简单构造函数 + setter 的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单构造函数 + Setter 的模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFactsV2</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Parameters initialized to default values (if any)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> servingSize = -<span class="number">1</span>; <span class="comment">// Required; no default value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> servings = -<span class="number">1</span>; <span class="comment">// Required; no default value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFactsV2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServingSize</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        servingSize = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServings</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        servings = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCalories</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        calories = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFat</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        fat = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSodium</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        sodium = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCarbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        carbohydrate = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>弊端：调用是分散的，类属性可能存在不一致；这种模式不可能把一类做成不可变，需要额外的努力来确保线程安全。</p>
<p>以下是建造者模式的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Required parameters</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Optional parameters - initialized to default values</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.servingSize = servingSize;</span><br><span class="line">            <span class="keyword">this</span>.servings = servings;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">calories</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            calories = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            fat = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            sodium = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">carbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            carbohydrate = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NutritionFacts <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NutritionFacts(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NutritionFacts</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        servingSize = builder.servingSize;</span><br><span class="line">        servings = builder.servings;</span><br><span class="line">        calories = builder.calories;</span><br><span class="line">        fat = builder.fat;</span><br><span class="line">        sodium = builder.sodium;</span><br><span class="line">        carbohydrate = builder.carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端调用代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NutritionFacts cocaCola = <span class="keyword">new</span> NutritionFacts.Builder(<span class="number">240</span>, <span class="number">8</span>).calories(<span class="number">100</span>).sodium(<span class="number">35</span>).carbohydrate(<span class="number">27</span>).build();</span><br></pre></td></tr></table></figure>

<p>多态下使用 Builder 模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Topping &#123;HAM, MUSHROOM, ONION, PEPPER, SAUSAGE&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Set&lt;Topping&gt; toppings;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Builder</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> EnumSet&lt;Topping&gt; toppings = EnumSet.noneOf(Topping.class);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">addTopping</span><span class="params">(Topping topping)</span> </span>&#123;</span><br><span class="line">            toppings.add(Objects.requireNonNull(topping));</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> Pizza <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Subclasses must override this method to return &quot;this&quot;</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">self</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Pizza(Builder&lt;?&gt; builder) &#123;</span><br><span class="line">        toppings = builder.toppings.clone(); <span class="comment">// See Item 50&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类其一</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Size &#123;SMALL, MEDIUM, LARGE&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Size size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NYPizza</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(builder);</span><br><span class="line">        <span class="keyword">this</span>.size = builder.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NYPizza&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;size=&quot;</span> + size +</span><br><span class="line">                <span class="string">&quot;, toppings=&quot;</span> + toppings +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">Pizza</span>.<span class="title">Builder</span>&lt;<span class="title">Builder</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Size size;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Size size)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.size = Objects.requireNonNull(size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function">NYPizza <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NYPizza(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Builder <span class="title">self</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类其二</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calzone</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> sauceInside;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Calzone</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(builder);</span><br><span class="line">        <span class="keyword">this</span>.sauceInside = builder.sauceInside;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Calzone&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;sauceInside=&quot;</span> + sauceInside +</span><br><span class="line">                <span class="string">&quot;, toppings=&quot;</span> + toppings +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">Pizza</span>.<span class="title">Builder</span>&lt;<span class="title">Builder</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> sauceInside = <span class="keyword">false</span>; <span class="comment">// Default</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sauceInside</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            sauceInside = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function">Calzone <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Calzone(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Builder <span class="title">self</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NYPizza nyPizza = <span class="keyword">new</span> NYPizza.Builder(NYPizza.Size.LARGE).addTopping(Pizza.Topping.ONION).addTopping(Pizza.Topping.HAM).build();</span><br><span class="line">        System.out.println(nyPizza);</span><br><span class="line"></span><br><span class="line">        Calzone calzone = <span class="keyword">new</span> Calzone.Builder().sauceInside().addTopping(Pizza.Topping.HAM).addTopping(Pizza.Topping.SAUSAGE).build();</span><br><span class="line">        System.out.println(calzone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Builder 模式出了比较冗长之外没有其他坏处，而且扩展性好。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>使用 final 修饰属性有什么好处?<ul>
<li>可以保证对应的变量只被赋值一次，并且 final 修饰的变量必须得赋值</li>
</ul>
</li>
</ul>
<p>PS: 外部类可以访问内部类的私有变量，这个我之前倒是没有想到的</p>
<ul>
<li><p><code>Builder&lt;T extends Builder&lt;T&gt;&gt;</code> 语法</p>
<ul>
<li>这种语法叫做 递归类型参数(recursive type parameter), 是泛型的一种，指代泛型参数必须是自己的子类，不理解可以先记着</li>
</ul>
</li>
<li><p><code>protected abstract T self();</code> 为什么不直接返回 <code>this</code>?</p>
<ul>
<li>亲自写一下就会发现，builder 本身是个抽象类，所以是没有 <code>this</code> 这个指代的</li>
</ul>
</li>
<li><p>父类的构造器是 <code>protected</code> 的，不然子类无法继承, 同理 <code>toppings</code> 也应该是 protected 的，不然子类根本就访问不了 (´Д` )</p>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effective java</tag>
      </tags>
  </entry>
  <entry>
    <title>Equals in python</title>
    <url>/hexo/2020/06/12/Equals-in-python/</url>
    <content><![CDATA[<ul>
<li><code>==</code> 和 <code>is</code> 的区别</li>
<li>怎么使得 Object 使用 <code>==</code> 比较相等</li>
<li>Set 集合中判断相等</li>
</ul>
<h2 id="Vs-is"><a href="#Vs-is" class="headerlink" title="== Vs is"></a>== Vs is</h2><p><code>==</code> 用来判断值相等，<code>is</code> 用来判断引用相等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line"></span><br><span class="line">a == b <span class="comment"># true</span></span><br><span class="line">a <span class="keyword">is</span> b <span class="comment"># true</span></span><br><span class="line"></span><br><span class="line">b = a[:]</span><br><span class="line">a == b <span class="comment"># true</span></span><br><span class="line">a <span class="keyword">is</span> b <span class="comment"># false</span></span><br></pre></td></tr></table></figure>

<h2 id="怎么使得-Object-使用-比较相等"><a href="#怎么使得-Object-使用-比较相等" class="headerlink" title="怎么使得 Object 使用 == 比较相等"></a>怎么使得 Object 使用 <code>==</code> 比较相等</h2><p>你需要重写 class 的 <strong>eq</strong> 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, id, name</span>):</span></span><br><span class="line">        self.id = id</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(other, Person):</span><br><span class="line">            <span class="comment"># don&#x27;t attempt to compare against unrelated types</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line">        <span class="keyword">return</span> self.id == other.id</span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">p2 = Person(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">p3 = Person(<span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p1 == p2 <span class="comment"># false</span></span><br><span class="line">p1 == p3 <span class="comment"># true</span></span><br></pre></td></tr></table></figure>

<p>Note: 重写 <strong>eq</strong> 将会使对象变为 unhashable，在存到 Set， Map 等集合中会有影响，你可以重写 <strong>hash</strong> 来定制</p>
<h2 id="Set-集合中判断相等"><a href="#Set-集合中判断相等" class="headerlink" title="Set 集合中判断相等"></a>Set 集合中判断相等</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, id, name</span>):</span></span><br><span class="line">        self.id = id</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(other, Person):</span><br><span class="line">            <span class="comment"># don&#x27;t attempt to compare against unrelated types</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line">        <span class="keyword">return</span> self.id == other.id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># necessary for instances to behave sanely in dicts and sets.</span></span><br><span class="line">        <span class="keyword">return</span> hash(self.id)</span><br><span class="line"></span><br><span class="line">set([p1, p2, p3]) <span class="comment"># only  p1, p2 will be stored</span></span><br></pre></td></tr></table></figure>

<p>set 中并没有使用新的 object 代替旧的的方法，所以如果想要更新的话只能 remove + add 了</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Get Know About Java Annotation</title>
    <url>/hexo/2020/08/05/Get-Know-About-Java-Annotation/</url>
    <content><![CDATA[<p>记录一下 Java 注解的学习过程</p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>设计一个测试案例，创建一个名为 Marked 的注解类，该注解可以添加在 method 上用来表示方法是否被标记过。在测试用力中遍历被标记的类并打印信息</p>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSelected;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter/Setter methods</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Marked</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Marked(value = true)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自己创建的注解类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Marked &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_print_by_anno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Method[] methods = Person.class.getDeclaredMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">        Marked myAnno = m.getAnnotation(Marked.class);</span><br><span class="line">        <span class="keyword">if</span> (myAnno != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Method: &quot;</span> + m.getName() + <span class="string">&quot; has marked annotation.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Marked value: &quot;</span> + myAnno.value());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Method: &quot;</span> + m.getName() + <span class="string">&quot; don&#x27;t has marked annotation.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>终端打印：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Method: getName has marked annotation.</span><br><span class="line">Marked value: false</span><br><span class="line">Method: setName don&#x27;t has marked annotation.</span><br><span class="line">Method: getAge has marked annotation.</span><br><span class="line">Marked value: true</span><br><span class="line">Method: setAge don&#x27;t has marked annotation.</span><br><span class="line">Method: isSelected don&#x27;t has marked annotation.</span><br><span class="line">Method: setSelected don&#x27;t has marked annotation.</span><br></pre></td></tr></table></figure>

<p>从这个例子可以看出来，Annotation 都是处理 class level 的问题的，和类延伸出来的实例基本没关系了</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>annotation</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 拾遗之 泛型</title>
    <url>/hexo/2020/08/07/Get-Know-About-Java-Generic/</url>
    <content><![CDATA[<p>记录一下泛型的定义，历史，使用案例等。素材主要来源于 On Java 8, Thinking in Java 和 Effective Java。</p>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>1.5 版本引入，主要动机是支持 Collection 类</p>
<h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>把这一块放到最前面时为了避免理解上的误区，泛型方法和泛型类，泛型接口没有从属关系，就算是普通的 Utils 方法也可以声明泛型方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">printParam</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    GenericUtils.printParam(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    GenericUtils.printParam(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Jack</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>即在声明类时添加类型声明，最常见的如 Collection 系列下的 ArrayList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>泛型接口只是在接口定义的时候在接口名称后接上类型声明而已。使用 lang 包中自带的 <code>Supplier</code> 接口为例，接口在声明时指定类型，并在 get() 方法中指定返回类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.8 中引入的接口，充当工厂方法的角色</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="function">T <span class="title">get</span><span class="params">()</span></span>; &#125;</span><br><span class="line"></span><br><span class="line">Supplier&lt;Integer&gt; integerSupplier = () -&gt; (<span class="keyword">new</span> Random()).nextInt();</span><br><span class="line">System.out.println(integerSupplier.get());</span><br></pre></td></tr></table></figure>

<h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><p>记录一下工作生活中遇到的具体使用案例</p>
<h3 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a>代码重构</h3><p>公司代码重构时遇到下面这种情况：</p>
<p>比如原来有个类叫 Background, 重构时为他抽了一个 interface IBackground。但是在替换一些集合相关的代码时出现了不兼容的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line">List&lt;Background&gt; list = someClass.getBackgroundList();</span><br><span class="line"><span class="comment">// what I prefer to, but compile failed</span></span><br><span class="line">List&lt;IBackground&gt; list = someClass.getBackgroundList();</span><br><span class="line"><span class="comment">// what I should do</span></span><br><span class="line">List&lt;IBackground&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(someClass.getBackgroundList());</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">List&lt;? extends IBackground&gt; list = someClass.getBackgroundList();</span><br></pre></td></tr></table></figure>

<p>上面的这种转换失败就是由泛型转化异常造成的</p>
<h3 id="指定泛型返回值为某个类的子类"><a href="#指定泛型返回值为某个类的子类" class="headerlink" title="指定泛型返回值为某个类的子类"></a>指定泛型返回值为某个类的子类</h3><p>可以使用泛型方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> &lt;T extends Sup&gt;  <span class="function">T <span class="title">getSometing</span><span class="params">()</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="返回-Map-类型的泛型方法？"><a href="#返回-Map-类型的泛型方法？" class="headerlink" title="返回 Map 类型的泛型方法？"></a>返回 Map 类型的泛型方法？</h2><p>这种用法称为 multi-level wildcards，参考 <a href="http://www.angelikalanger.com/GenericsFAQ/FAQSections/TypeArguments.html#FAQ101">这篇</a> 文章中的定义</p>
<p>子类现有方法为 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Sub&gt;&gt; getResult() &#123;</span><br><span class="line">    <span class="keyword">new</span> HashMap&lt;String, List&lt;Sub&gt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>想要给他一个抽 interface 类似 <code>Map&lt;String, List&lt;? extends Sup&gt;&gt; getResult();</code> 但是会编译错误，需要怎么写？</p>
<ul>
<li><a href="https://stackoverflow.com/questions/22806202/java-nested-generic-type">Stack Overflow 精彩解答</a></li>
</ul>
<p>先说答案，可以使用 <code>Map&lt;String, ? extends List&lt;? extends Sup&gt;&gt; getResult();</code> 这样的语法来适配上面说的这种场景</p>
<p>关于这个问题的几个点：</p>
<ol>
<li>List&lt;Sub&gt; 并不是 List&lt;Sup&gt; 的子类，想要表达子类的概念，Java 使用的是 <code>List&lt;? extends Sup&gt;</code> 这样的语法</li>
<li><code>List&lt;List&lt;?&gt;&gt;</code> 适配所有的参数类型的 list</li>
<li><code>List&lt;? extends List&lt;String&gt;&gt;</code> 适配任何 List 及其子类</li>
<li>两者结合一下 <code>List&lt;? extends List&lt;?&gt;&gt;</code> 适配任何 list 及其子类，并且适配所有参数类型</li>
</ol>
<p>Code sample:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sup</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Sup</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Father</span> </span>&#123; </span><br><span class="line">    Map&lt;String, ? extends List &lt;? extends Sup&gt;&gt; getNestMap(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">implements</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, List&lt;Sub&gt;&gt; getNestMap() &#123;</span><br><span class="line">        Map&lt;String, List&lt;Sub&gt;&gt; map =  <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        List&lt;Sub&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Sub());</span><br><span class="line">        map.put(<span class="string">&quot;Jack&quot;</span>, list);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS: List 前的 <code>? extends</code> 是不可少的，不然 Override 方法会编译错误，应为实现中是用 ArrayList 这个子类实现的，所以接口定义时语意上要有这个声明</p>
<h3 id="工作中遇到的问题"><a href="#工作中遇到的问题" class="headerlink" title="工作中遇到的问题"></a>工作中遇到的问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面两个方法有没有区别？</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WildCardTest</span> </span>&#123;</span><br><span class="line">    &lt;T extends Sup&gt; <span class="function">List&lt;T&gt; <span class="title">getList01</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    List&lt;? extends Sup&gt; getList02();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有。。。看了一下这两个方法编译出来的字节码是完全一样的，除了行号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; access flags 0x401</span><br><span class="line">&#x2F;&#x2F; signature &lt;T::Lcom&#x2F;playground&#x2F;genericsample&#x2F;Sup;&gt;()Ljava&#x2F;util&#x2F;List&lt;TT;&gt;;</span><br><span class="line">&#x2F;&#x2F; declaration: java.util.List&lt;T&gt; getList01&lt;T extends com.playground.genericsample.Sup&gt;()</span><br><span class="line">public abstract getList01()Ljava&#x2F;util&#x2F;List;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; access flags 0x401</span><br><span class="line">&#x2F;&#x2F; signature ()Ljava&#x2F;util&#x2F;List&lt;+Lcom&#x2F;playground&#x2F;genericsample&#x2F;Sup;&gt;;</span><br><span class="line">&#x2F;&#x2F; declaration: java.util.List&lt;? extends com.playground.genericsample.Sup&gt; getList02()</span><br><span class="line">public abstract getList02()Ljava&#x2F;util&#x2F;List;</span><br></pre></td></tr></table></figure>

<p>但是这两种表达方式在实现的时候还是有区别的，用界限符(?)的这种，要求在集合类型前面也加上界限符。。。</p>
<h3 id="向-List-lt-extends-Number-gt-中添加数据失败"><a href="#向-List-lt-extends-Number-gt-中添加数据失败" class="headerlink" title="向 List&lt;? extends Number&gt; 中添加数据失败"></a>向 List&lt;? extends Number&gt; 中添加数据失败</h3><p><code>List&lt;? extends Number&gt; list = new ArrayList&lt;&gt;(); list.add(3);</code> 向该 list 中添加数据 3 有编译错误。这是应为通过 <code>List&lt;? extends Number&gt; list</code> 声明的 list 可以存储 Number 及其子类，效果上来看下面这些声明的集合只是 <code>? extends Number</code> 的一部分，那么我们加 3 这个行为在类型一致这个前提下就会有与以上的错误。一般这种声明方式拿到的结果只用于读操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;? extends Number&gt; foo3 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();  <span class="comment">// Number &quot;extends&quot; Number</span></span><br><span class="line">List&lt;? extends Number&gt; foo3 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(); <span class="comment">// Integer extends Number</span></span><br><span class="line">List&lt;? extends Number&gt; foo3 = <span class="keyword">new</span> ArrayList&lt;Double&gt;();  <span class="comment">// Double extends Number</span></span><br></pre></td></tr></table></figure>

<h3 id="方法中同时有-Class-T-和-T-bean-的情况怎么兼容"><a href="#方法中同时有-Class-T-和-T-bean-的情况怎么兼容" class="headerlink" title="方法中同时有 Class T 和 T bean 的情况怎么兼容"></a>方法中同时有 Class T 和 T bean 的情况怎么兼容</h3><p>声明一个 list 类型是 <code>&lt;? extends Number&gt;</code> 我们还有一个方法参数列表 <code>Class&lt;T&gt; clz1, T clz2</code> 这种情况下怎么兼容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Class&lt;? extends Number&gt;&gt; list = Arrays.asList(Integer.class, Double.class, Long.class);</span><br><span class="line">        <span class="comment">// !testGeneric(list.get(0), 1); // compile failed</span></span><br><span class="line">        testGeneric(Integer.class, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">testGeneric</span><span class="params">(Class&lt;T&gt; clz1, T clz2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>语法上就兼容不了，无解，最后通过重新理解 event 系统，根据框架重新安排逻辑绕过了 （；￣ェ￣） 等读完泛型相关的章节可以再回头看看，不知道到时会不会有新解</p>
<p>最新消息，上面的有解，只需要在前面加上强转到 Class 类型即可 <code>testGeneric((Class)list.get(0), 1);</code> 资深的还是厉害啊，佩服佩服 (●°u°●)​ 」不过直接把 Class 类强转就能绕过检测我是没想到，六的飞起。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>拾遗</tag>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 拾遗之 反射</title>
    <url>/hexo/2020/07/31/Get-Know-About-Java-Reflection/</url>
    <content><![CDATA[<p>记录一些 Java 反射基础知识</p>
<h2 id="准备测试-Bean"><a href="#准备测试-Bean" class="headerlink" title="准备测试 Bean"></a>准备测试 Bean</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflectiontest.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUser</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">public</span>  String gender;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Getter and Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="getFields-VS-getDeclaredFields"><a href="#getFields-VS-getDeclaredFields" class="headerlink" title="getFields VS getDeclaredFields"></a>getFields VS getDeclaredFields</h2><p>getFields 只会返回 public 类型的 fields, getDeclaredFields 会返回所有类型的 fieds</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_class_field</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Field[] fields = TestUser.class.getFields();</span><br><span class="line">System.out.println(<span class="string">&quot;Output of getFields...&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">Field[] declareFields = TestUser.class.getDeclaredFields();</span><br><span class="line">System.out.println(<span class="string">&quot;Output of getDeclaredFields...&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Field f : declareFields) &#123;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output of getFields...</span></span><br><span class="line"><span class="comment">// public java.lang.String reflectiontest.bean.TestUser.gender</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Output of getDeclaredFields...</span></span><br><span class="line"><span class="comment">// private java.lang.String reflectiontest.bean.TestUser.name</span></span><br><span class="line"><span class="comment">// private int reflectiontest.bean.TestUser.age</span></span><br><span class="line"><span class="comment">// public java.lang.String reflectiontest.bean.TestUser.gender</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>拾遗</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 拾遗之 Stream 类</title>
    <url>/hexo/2020/06/07/Get-Know-About-Java-Stream/</url>
    <content><![CDATA[<p>概要：</p>
<ul>
<li>Stream 不是数据结构，更像是算法的集合</li>
<li>在流操作过程中不会修改元数据</li>
<li>以 lambda 表达式为参数</li>
<li>惰性</li>
<li>免费提供并行计算能力</li>
<li>元数据可以无限大</li>
<li>类型确定时使用 IntStream 之类的 class 可以提高效率</li>
</ul>
<h2 id="API-简介"><a href="#API-简介" class="headerlink" title="API 简介"></a>API 简介</h2><p>在 Java 8 的 API 中， Stream 内置了 39 个方法。</p>
<p>匹配，检测 source 中是否有符合条件的元素</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>allMatch(Predicate&lt;? super T&gt; predicate)</td>
<td>boolean</td>
<td>全部匹配返回 true</td>
</tr>
<tr>
<td>anyMatch(Predicate&lt;? super T&gt; predicate)</td>
<td>boolean</td>
<td>只要有一个匹配 true</td>
</tr>
<tr>
<td>noneMatch(Predicate&lt;? super T&gt; predicate)</td>
<td>boolean</td>
<td>全部匹配返回 true</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测Stream 中是否有数能被 2 整除</span></span><br><span class="line"><span class="keyword">boolean</span> ret = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).anyMatch(x -&gt; x % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">System.out.println(ret);</span><br><span class="line"><span class="comment">// output: true</span></span><br></pre></td></tr></table></figure>

<p>用于产生流对象的方法</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>builder()</td>
<td>static <T> Stream.Builder<T></td>
<td>返回一个流的构造器</td>
</tr>
<tr>
<td>concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</td>
<td>static <T> Stream<T></td>
<td>拼接多个流并一起操作</td>
</tr>
<tr>
<td>empty()</td>
<td>static <T> Stream<T></td>
<td>创建一个空的流对象</td>
</tr>
<tr>
<td>generate(Supplier<T> s)</td>
<td>static <T> Stream<T></td>
<td>传入一个 Supplier 构造器，返回构造器指定的对象</td>
</tr>
<tr>
<td>iterate(T seed, UnaryOperator<T> f)</td>
<td>static <T> Stream<T></td>
<td>seed 为初始值，UnaryOperator 为算法</td>
</tr>
<tr>
<td>limit(long maxSize)</td>
<td>Stream<T></td>
<td>配合其他生成方法指定生成个数</td>
</tr>
<tr>
<td>skip(long n)</td>
<td>Stream<T></td>
<td>跳过几个元素，可以结合 iterate, generate 使用</td>
</tr>
<tr>
<td>of(T… values)</td>
<td>static <T> Stream<T></td>
<td>生成一个流</td>
</tr>
<tr>
<td>of(T t)</td>
<td>static <T> Stream<T></td>
<td>/</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.Builder&lt;String&gt; builder = Stream.builder();</span><br><span class="line">Stream&lt;String&gt; stream = builder.add(<span class="string">&quot;Jerry&quot;</span>).add(<span class="string">&quot;Tom&quot;</span>).build();</span><br><span class="line">stream.forEach(System.out::println);</span><br><span class="line"><span class="comment">// output: Jerry Tom</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// concat sample, concat 中为需要拼接的流对象</span></span><br><span class="line">Stream.concat(Stream.of(<span class="string">&quot;Jerry&quot;</span>), Stream.of(<span class="string">&quot;Tom&quot;</span>)).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机产生 3 个整形</span></span><br><span class="line">Stream&lt;Integer&gt; ret = Stream.generate(<span class="keyword">new</span> Random()::nextInt).limit(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// iterate sample, 0 作为初始值，每次返回值 +1， 返回 3 次</span></span><br><span class="line">Stream.iterate(<span class="number">0</span>, x -&gt; x+<span class="number">1</span>).limit(<span class="number">3</span>).forEach(System.out::print);</span><br><span class="line"><span class="comment">// output: 012</span></span><br></pre></td></tr></table></figure>

<p>常用的查找函数 max/min/distinct</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>distinct()</td>
<td>Stream<T></td>
<td>去重</td>
</tr>
<tr>
<td>max(Comparator&lt;? super T&gt; comparator)</td>
<td>Optional<T></td>
<td>查找最大值</td>
</tr>
<tr>
<td>min(Comparator&lt;? super T&gt; comparator)</td>
<td>Optional<T></td>
<td>查找最小值</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// distinct sample</span></span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).distinct().forEach(System.out::print);</span><br><span class="line"><span class="comment">// output: 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果传入的时对象，那个会更具 equals, hashCode 来判断是不是重复</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// Constructor, getter and setter</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(age, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> + <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stream.of(<span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>, <span class="number">30</span>), <span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>, <span class="number">30</span>), <span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>, <span class="number">20</span>)).distinct().forEach(System.out::print);</span><br><span class="line"><span class="comment">// output: Person&#123;name=&#x27;Jack&#x27;, age=30&#125; Person&#123;name=&#x27;Jack&#x27;, age=20&#125;</span></span><br></pre></td></tr></table></figure>

<p>生成指定类型的 Stream 对象</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>map(Function&lt;? super T,? extends R&gt; mapper)</td>
<td>Stream<T></td>
<td>返回指定类型的 Stream</td>
</tr>
<tr>
<td>mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper)</td>
<td>DoubleStream</td>
<td>返回 Double 类型的 Stream</td>
</tr>
<tr>
<td>mapToInt(ToIntFunction&lt;? super T&gt; mapper)</td>
<td>IntStream</td>
<td>返回 Int 类型的 Stream</td>
</tr>
<tr>
<td>mapToLong(ToLongFunction&lt;? super T&gt; mapper)</td>
<td>LongStream</td>
<td>返回 Long 类型的 Stream</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>).map(x -&gt; <span class="string">&quot;Name: &quot;</span> + x).forEach(System.out::println);</span><br><span class="line"><span class="comment">// output: Name: Jack Name: Tom</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他几个类似，只不过把返回类型指定了</span></span><br></pre></td></tr></table></figure>

<p>将流中的处理结果整合输出到集合中</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>collect(Collector&lt;? super T,A,R&gt; collector)</td>
<td>&lt;R,A&gt; R</td>
<td>/</td>
</tr>
<tr>
<td>collect(Supplier<R> supplier, BiConsumer&lt;R,? super T&gt; accumulator, BiConsumer&lt;R,R&gt; combiner)</td>
<td><R> R</td>
<td>/</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将流中的值连接起来</span></span><br><span class="line">Stream.of(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>).collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串组成 string, length 的键值对</span></span><br><span class="line">Map&lt;String, Integer&gt; ret = Stream.of(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>).collect(Collectors.toMap(Function.identity(), String::length));</span><br></pre></td></tr></table></figure>

<p>map 及类似的操作</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>map(Function&lt;? super T,? extends R&gt; mapper)</td>
<td><R> Stream<R></td>
<td>对流中的元素逐个操作</td>
</tr>
<tr>
<td>mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper)</td>
<td>DoubleStream</td>
<td>/</td>
</tr>
<tr>
<td>mapToInt(ToIntFunction&lt;? super T&gt; mapper)</td>
<td>IntStream</td>
<td>/</td>
</tr>
<tr>
<td>mapToLong(ToLongFunction&lt;? super T&gt; mapper)</td>
<td>LongStream</td>
<td>/</td>
</tr>
<tr>
<td>flatMap(Function&lt;? super T,? extends Stream&lt;? extends R&gt;&gt; mapper)</td>
<td><R> Stream<R></td>
<td>和 map 主要的区别时<strong>扁平化</strong></td>
</tr>
<tr>
<td>flatMapToDouble(Function&lt;? super T,? extends DoubleStream&gt; mapper)</td>
<td>DoubleStream</td>
<td>/</td>
</tr>
<tr>
<td>flatMapToInt(Function&lt;? super T,? extends IntStream&gt; mapper)</td>
<td>IntStream</td>
<td>/</td>
</tr>
<tr>
<td>flatMapToLong(Function&lt;? super T,? extends LongStream&gt; mapper)</td>
<td>LongStream</td>
<td>/</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扁平化就是将集合中的集合拆散成基本元素，下例中将 list 中的最基本的元素做平方操作</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; listOfList = Arrays.asList(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>), Arrays.asList(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">listOfList.stream().flatMap(Collection::stream).map(x -&gt; x*x).forEach(System.out::println);</span><br><span class="line"><span class="comment">// output: 1, 4, 9 ,16</span></span><br></pre></td></tr></table></figure>

<p>过滤</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>filter(Predicate&lt;? super T&gt; predicate)</td>
<td>Stream<T></td>
<td>根据 predicate 过滤</td>
</tr>
<tr>
<td>reduce(BinaryOperator<T> accumulator)</td>
<td>Optional<T></td>
<td>从多个元素中产生一个结果</td>
</tr>
<tr>
<td>reduce(T identity, BinaryOperator<T> accumulator)</td>
<td>T</td>
<td>identity - 初始值</td>
</tr>
<tr>
<td>reduce(U identity, BiFunction&lt;U,? super T,U&gt; accumulator, BinaryOperator<U> combiner)</td>
<td><U> U</td>
<td>combiner 是并行运算时需要指定的值</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; ret = Stream.of(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>).reduce(String::concat);</span><br><span class="line">System.out.println(ret.get());</span><br><span class="line"><span class="comment">// output: JackTom</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 identity 作为初始值</span></span><br><span class="line">Optional&lt;String&gt; ret = Optional.ofNullable(Stream.of(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>).reduce(<span class="string">&quot;Name Ret:&quot;</span>, String::concat));</span><br><span class="line">System.out.println(ret.get());</span><br><span class="line"><span class="comment">// output: Name Ret:JackTom</span></span><br></pre></td></tr></table></figure>

<p>Find*</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>findAny()</td>
<td>Optional<T></td>
<td>随机返回一个值，并不关心值的内容，在单线程中一般返回第一个，但是不保证</td>
</tr>
<tr>
<td>findFirst()</td>
<td>Optional<T></td>
<td>返回第一个</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).findFirst().get());</span><br></pre></td></tr></table></figure>

<p>forEach*</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>forEach(Consumer&lt;? super T&gt; action)</td>
<td>void</td>
<td>遍历不保证顺序(多线程下可能会顺序不定)</td>
</tr>
<tr>
<td>forEachOrdered(Consumer&lt;? super T&gt; action)</td>
<td>void</td>
<td>遍历保证顺序</td>
</tr>
</tbody></table>
<p>count</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>count()</td>
<td>long</td>
<td>输出元素个数</td>
</tr>
<tr>
<td>peek(Consumer&lt;? super T&gt; action)</td>
<td>Stream<T></td>
<td>得到流对象，可用于调试</td>
</tr>
<tr>
<td>sorted()</td>
<td>Stream<T></td>
<td>使用自然排序</td>
</tr>
<tr>
<td>sorted(Comparator&lt;? super T&gt; comparator)</td>
<td>Stream<T></td>
<td>定制排序</td>
</tr>
<tr>
<td>toArray()</td>
<td>Object[]</td>
<td>生成数组</td>
</tr>
<tr>
<td>toArray(IntFunction&lt;A[]&gt; generator)</td>
<td><A> A[]</td>
<td>/</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// steam 转化为 array</span></span><br><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">String[] stringArray = stringStream.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">Arrays.stream(stringArray).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h2><p>创建实例或者调用方法时可以使用 <code>::</code> 两个冒号的形式调用</p>
<h2 id="Supplier-使用举例"><a href="#Supplier-使用举例" class="headerlink" title="Supplier 使用举例"></a>Supplier 使用举例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">Supplier&lt;LocalDateTime&gt; s = LocalDateTime::now;</span><br><span class="line">System.out.println(s.get());</span><br><span class="line"></span><br><span class="line">Supplier&lt;String&gt; s1 = () -&gt; dtf.format(LocalDateTime.now());</span><br><span class="line">System.out.println(s1.get());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>枚举和注解</tag>
        <tag>拾遗</tag>
        <tag>stream</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 集合类初探</title>
    <url>/hexo/2021/01/14/Get-know-about-java-collection/</url>
    <content><![CDATA[<p>想要解决的问题：</p>
<ol>
<li>了解集合类的大致情况，包括名称，类关系</li>
<li>HashMap 和 Collection 的关系</li>
<li>自己画一个关系图并和 TIJ4 做对比</li>
<li>为什么 ArrayList 在继承了 AbstractList 之后还要 impl List 接口？意义上不是重复了吗</li>
</ol>
<p>Answers:</p>
<ol start="4">
<li>这样做，语义上没有改变，便于阅读，省的你再去一层层的去父类找接口实现， Stackoverflow 上是这么说的</li>
</ol>
<p>基本上能将这一簇类的关系图画出来即可</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 拾遗之 final 关键字</title>
    <url>/hexo/2020/10/22/Get-know-about-java-final/</url>
    <content><![CDATA[<p>从定义上来说 final 表达的是只能赋值一次，赋之后不能改变的意思。下面介绍几种常见使用形式。</p>
<h2 id="final-attr"><a href="#final-attr" class="headerlink" title="final + attr"></a>final + attr</h2><p>这种形式即实体类有 final 变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;default&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// public Test(int i) &#123;&#125; -- compile fail</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于 name 由 final 修饰，所以要求每个构造函数都要有 name 的初始化，或者声明时直接赋值。不然不就等于允许在运行时改变 name 值了</p>
<h2 id="static-final-attr"><a href="#static-final-attr" class="headerlink" title="static + final + attr"></a>static + final + attr</h2><p>这种形式常见于 class 属性，声明时就得赋值，static block 都不好使</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="final-method"><a href="#final-method" class="headerlink" title="final + method"></a>final + method</h2><blockquote>
<p><code>final</code> is used with a Java method to mark that the method can’t be overridden (for object scope) or hidden (for static). This allows the original developer to create functionality that cannot be changed by subclasses, and that is all the guarantee it provides.</p>
<p>方法不能被重写，防止继承之后方法语意发生变化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">printT3</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;printT3...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub3</span> <span class="keyword">extends</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// compile error, can&#x27;t override final method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">printT3</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub3...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>拾遗</tag>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 小贴士</title>
    <url>/hexo/2019/11/15/Git-Tips/</url>
    <content><![CDATA[<h2 id="怎么添加-commited-file-到-gitignore-中"><a href="#怎么添加-commited-file-到-gitignore-中" class="headerlink" title="怎么添加 commited file 到 .gitignore 中"></a>怎么添加 commited file 到 <code>.gitignore</code> 中</h2><blockquote>
<p><a href="https://stackoverflow.com/questions/7527982/applying-gitignore-to-committed-files/7528016">StackOverflow: applying-gitignore-to-committed-files</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm --cached path/to/file</span><br></pre></td></tr></table></figure>

<h2 id="怎么把local-master-branch-还原成和-remote-端一致"><a href="#怎么把local-master-branch-还原成和-remote-端一致" class="headerlink" title="怎么把local master branch 还原成和 remote 端一致"></a>怎么把local master branch 还原成和 remote 端一致</h2><blockquote>
<p><a href="https://stackoverflow.com/questions/1628088/reset-local-repository-branch-to-be-just-like-remote-repository-head">StackOverflow: reset-local-repository-branch-to-be-just-like-remote-repository-head</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure>

<h2 id="移除本地的-commit"><a href="#移除本地的-commit" class="headerlink" title="移除本地的 commit"></a>移除本地的 commit</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD~1</span><br></pre></td></tr></table></figure>

<h2 id="将-remote-会滚到上个-commit"><a href="#将-remote-会滚到上个-commit" class="headerlink" title="将 remote 会滚到上个 commit"></a>将 remote 会滚到上个 commit</h2><p><code>git revert -m 1 commit_hash</code> 将对应的 commit 改动回滚， 很棒！</p>
<p>PS: <code>-m 1</code> 会使用默认的 comment 信息，如果你想自定义 comment 内容，可以将这个参数去掉</p>
<h2 id="reset-VS-revert"><a href="#reset-VS-revert" class="headerlink" title="reset VS revert"></a>reset VS revert</h2><p>reset 历史记录后退，revert 前进</p>
<p>reset 会将历史记录也一并会滚，这样就会导致记录缺失。不是很好，但是在自己 local branch 做了改动想还原的这种 scenario 还是和合适的。还有 <code>reset --hard commit_hash + git push --force</code> 也可以重置代码，但是会修改历史记录，操作比较危险</p>
<p>revert 会在原有的基础上将对应的 commit 改动重置并添加新的历史记录，路径更完成</p>
<p>这个 <a href="https://juejin.im/post/6844903614767448072">文章</a> 比较两者的区别，写的挺清楚的</p>
<h2 id="将本地的-commit-回退到前一个-commit"><a href="#将本地的-commit-回退到前一个-commit" class="headerlink" title="将本地的 commit 回退到前一个 commit"></a>将本地的 commit 回退到前一个 commit</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD~1 <span class="comment"># 保留改动，回退到 index 状态（add 之前）</span></span><br><span class="line">git reset --soft HEAD~1 <span class="comment"># 保留改动到 stage 状态 (add 之后，commit 之前)</span></span><br><span class="line">git reset --hard HEAD~1 <span class="comment"># 同时将改动也去掉</span></span><br></pre></td></tr></table></figure>

<h2 id="将本地的单个文件还原成-master-版本"><a href="#将本地的单个文件还原成-master-版本" class="headerlink" title="将本地的单个文件还原成 master 版本"></a>将本地的单个文件还原成 master 版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout origin/master -- /path/to/file</span><br></pre></td></tr></table></figure>

<h2 id="将-git-add-commit-合并到一个命令中"><a href="#将-git-add-commit-合并到一个命令中" class="headerlink" title="将 git add, commit 合并到一个命令中"></a>将 git add, commit 合并到一个命令中</h2><blockquote>
<p><a href="https://stackoverflow.com/questions/4298960/git-add-and-commit-in-one-command">StackOverflow: git-add-and-commit-in-one-command</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># config git alias</span></span><br><span class="line">git config --global alias.add-commit <span class="string">&#x27;!git add -A &amp;&amp; git commit&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># and use it with</span></span><br><span class="line">git add-commit -m <span class="string">&#x27;My commit message&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Rename-local-repo"><a href="#Rename-local-repo" class="headerlink" title="Rename local repo"></a>Rename local repo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout &lt;repo need to re-name&gt;</span><br><span class="line">git branch -m &lt;new name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># or make sure you are not at renamed repo</span></span><br><span class="line">git branch -m &lt;old repo name&gt; &lt;new repo name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="移除-merge-内容"><a href="#移除-merge-内容" class="headerlink" title="移除 merge 内容"></a>移除 merge 内容</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">git merge --abort</span><br></pre></td></tr></table></figure>

<h2 id="国内-git-clone-有时会卡住-有没有-debug-的选项"><a href="#国内-git-clone-有时会卡住-有没有-debug-的选项" class="headerlink" title="国内 git clone 有时会卡住, 有没有 debug 的选项"></a>国内 git clone 有时会卡住, 有没有 debug 的选项</h2><blockquote>
<p><a href="https://stackoverflow.com/questions/6178401/how-can-i-debug-git-git-shell-related-problems">StackOverflow: how-can-i-debug-git-git-shell-related-problems</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIT_CURL_VERBOSE&#x3D;1 GIT_TRACE&#x3D;1 git pull origin master</span><br></pre></td></tr></table></figure>

<h2 id="已创建-repo-添加证书"><a href="#已创建-repo-添加证书" class="headerlink" title="已创建 repo 添加证书"></a>已创建 repo 添加证书</h2><blockquote>
<p>跳转到项目页面，添加文件 ‘create a new file’ -&gt; 输入 ‘license’ 会给出提示</p>
</blockquote>
<h2 id="查看某人的-commit-记录"><a href="#查看某人的-commit-记录" class="headerlink" title="查看某人的 commit 记录"></a>查看某人的 commit 记录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --author=<span class="string">&#x27;jack&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="查看-log-反序"><a href="#查看-log-反序" class="headerlink" title="查看 log 反序"></a>查看 log 反序</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --reverse</span><br></pre></td></tr></table></figure>

<h2 id="对比文件"><a href="#对比文件" class="headerlink" title="对比文件"></a>对比文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff &lt;base-commit&gt; &lt;changed-commit&gt; -- &lt;file-path&gt;</span><br></pre></td></tr></table></figure>

<p>比如我像比较 8ab244e3b2de31ca 相对于 f31762ada1764 有什么改动可以使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff f31762ada1764 8ab244e3b2de31ca -- &lt;file-path&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是相对于 header 的改动，可以省略第一个 commit 内容</span></span><br></pre></td></tr></table></figure>

<h2 id="查看被删除文件的历史记录"><a href="#查看被删除文件的历史记录" class="headerlink" title="查看被删除文件的历史记录"></a>查看被删除文件的历史记录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -- &lt;file path&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --full-log -- &lt;file path&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种会包含各种 merge 的信息， 比较全。但是一般第一种就够用了</span></span><br></pre></td></tr></table></figure>

<h2 id="查看文件某一行删除记录"><a href="#查看文件某一行删除记录" class="headerlink" title="查看文件某一行删除记录"></a>查看文件某一行删除记录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -G 直接支持正则，-S 需要添加其他参数来支持正则</span></span><br><span class="line">git <span class="built_in">log</span> -S/G<span class="string">&#x27;key&#x27;</span> /path/to/file</span><br></pre></td></tr></table></figure>

<h2 id="已经-check-in-的文件夹加入-gitignore"><a href="#已经-check-in-的文件夹加入-gitignore" class="headerlink" title="已经 check in 的文件夹加入 .gitignore"></a>已经 check in 的文件夹加入 .gitignore</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 处理文件夹</span></span><br><span class="line">git rm -r --cached /folder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理文件</span></span><br><span class="line">git rm --cached /path/to/file</span><br></pre></td></tr></table></figure>

<h2 id="显示-repo-关联的远端地址"><a href="#显示-repo-关联的远端地址" class="headerlink" title="显示 repo 关联的远端地址"></a>显示 repo 关联的远端地址</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure>

<h2 id="cherry-pick-提取某一个-commit-和并到目标分支"><a href="#cherry-pick-提取某一个-commit-和并到目标分支" class="headerlink" title="cherry pick 提取某一个 commit 和并到目标分支"></a>cherry pick 提取某一个 commit 和并到目标分支</h2><p>情景描述：</p>
<p>我自己有一个分支 A， 同时创建了另一个分支 B 并在上面做了改动，commit 为 c1。我对他的这个 commit 有依赖，又不想自己 CV 代码或者以后有 conflict 什么的，这时可以 checkout 到我自己的分支，然后 <code>git cherry-pick c1</code> 来合并代码。他的代码 merge 之后我也不用解决冲突，美滋滋儿。</p>
<p>PS: 在合并 B 分支上的 commit 的时候我并不需要指定分支名字，是不是从侧面验证了，每个 git commit 都是唯一的，不同分支的 commit 也保证 id 不重复</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">^                  ^                                               </span><br><span class="line">|                  |                                               </span><br><span class="line">|   cherry-pick    |                                               </span><br><span class="line">|C1 &lt;---------     |C2                                             </span><br><span class="line">|            |     |                                               </span><br><span class="line">|            |     |                                               </span><br><span class="line">|C1&#x27;         ----- |C1                                             </span><br><span class="line">|                  |                                               </span><br><span class="line">|                  |                                               </span><br><span class="line">|Branch-A          |Branch-B                                       </span><br><span class="line">|------------------|                                               </span><br><span class="line">          ^                                                        </span><br><span class="line">          |                                                        </span><br><span class="line">          |                                                        </span><br><span class="line">          |                                                        </span><br><span class="line">          | Master                                                 </span><br><span class="line">          |                                                        </span><br><span class="line">          |                                                        </span><br></pre></td></tr></table></figure>

<h2 id="cherry-pick-revert"><a href="#cherry-pick-revert" class="headerlink" title="cherry pick revert"></a>cherry pick revert</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<h3 id="How-to-drop"><a href="#How-to-drop" class="headerlink" title="How to drop"></a>How to drop</h3><p>如果本地有改动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git reset --hard HEAD^</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<p>如果没有直接 <code>git reset --hard HEAD^</code>, <code>cherry-pick</code> 本质上就是新加了一个 commit 到 branch 而已。</p>
<h2 id="使用-rebase-来合并自己分支的-commit-记录，强迫症福音"><a href="#使用-rebase-来合并自己分支的-commit-记录，强迫症福音" class="headerlink" title="使用 rebase 来合并自己分支的 commit 记录，强迫症福音"></a>使用 rebase 来合并自己分支的 commit 记录，强迫症福音</h2><p>check out 一个测试 branch，修改 readme</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;a&#x27;</span> &gt;&gt; README.md</span><br><span class="line">git add-commit -m <span class="string">&#x27;edit01&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;b&#x27;</span> &gt;&gt; README.md</span><br><span class="line">git add-commit -m <span class="string">&#x27;edit01&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;c&#x27;</span> &gt;&gt; README.md</span><br><span class="line">git add-commit -m <span class="string">&#x27;edit01&#x27;</span></span><br></pre></td></tr></table></figure>

<p>git log –oneline 查看 commit 记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dc0a087 (HEAD -&gt; testrebase2) edit03</span><br><span class="line">c6feb2a edit02</span><br><span class="line">0436650 edit01</span><br><span class="line">0dcdaac init porject</span><br></pre></td></tr></table></figure>

<p>现在通过 rebase 将 edit01-03 合并为一个 commit。这里有一个地方要注意的是如果指定 commit id，start point 是你想要合并的 ID 的前一个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~3 或者 git rebase -i 0dcdaac</span><br></pre></td></tr></table></figure>

<p>terminal 给出提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pick 0436650 edit01</span><br><span class="line">pick c6feb2a edit02</span><br><span class="line">pick dc0a087 edit03</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 0dcdaac..dc0a087 onto 0dcdaac (3 commands)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick &lt;commit&gt; = use commit</span></span><br><span class="line"><span class="comment"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span><br><span class="line"><span class="comment"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment"># f, fixup &lt;commit&gt; = like &quot;squash&quot;, but discard this commit&#x27;s log message</span></span><br><span class="line"><span class="comment"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment"># b, break = stop here (continue rebase later with &#x27;git rebase --continue&#x27;)</span></span><br><span class="line"><span class="comment"># d, drop &lt;commit&gt; = remove commit</span></span><br><span class="line"><span class="comment"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br><span class="line"><span class="comment"># t, reset &lt;label&gt; = reset HEAD to a label</span></span><br><span class="line"><span class="comment"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span></span><br><span class="line"><span class="comment"># .       create a merge commit using the original merge commit&#x27;s</span></span><br></pre></td></tr></table></figure>

<p>将 edit02, 03 的前缀改成 s，然后 :wq 进入下一个界面需改 commit message</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pick 0436650 edit01</span><br><span class="line">s c6feb2a edit02</span><br><span class="line">s dc0a087 edit03</span><br></pre></td></tr></table></figure>

<p>提示信息如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is a combination of 3 commits.</span></span><br><span class="line"><span class="comment"># This is the 1st commit message:</span></span><br><span class="line"></span><br><span class="line">edit01</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #2:</span></span><br><span class="line"></span><br><span class="line">edit02</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #3:</span></span><br><span class="line"></span><br><span class="line">edit03</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Date:      Wed Jul 8 17:10:52 2020 +0800</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># interactive rebase in progress; onto 0dcdaac</span></span><br><span class="line"><span class="comment"># Last commands done (3 commands done):</span></span><br></pre></td></tr></table></figure>

<p>带 # 号的行不会显示，只需要修改之前我们自己添加的那些行就行了，这里修改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">merge commit edit01-03</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Date:      Wed Jul 8 17:10:52 2020 +0800</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># interactive rebase in progress; onto 0dcdaac</span></span><br><span class="line"><span class="comment"># Last commands done (3 commands done):</span></span><br><span class="line"><span class="comment">#    squash c6feb2a edit02</span></span><br><span class="line"><span class="comment">#    squash dc0a087 edit03</span></span><br><span class="line"><span class="comment"># No commands remaining.</span></span><br><span class="line"><span class="comment"># You are currently rebasing branch &#x27;testrebase2&#x27; on &#x27;0dcdaac&#x27;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#   modified:   README.md</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>esc + :wq 退出，终端会给出修改成功的提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[detached HEAD 6c42812] merge commit edit01-03</span><br><span class="line"> Date: Wed Jul 8 17:10:52 2020 +0800</span><br><span class="line"> 1 file changed, 3 insertions(+)</span><br><span class="line">Successfully rebased and updated refs/heads/testrebase2.</span><br></pre></td></tr></table></figure>

<p>这是再使用 git log –oneline 查看，可以发现目标 commit 已经合并成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">6c42812 (HEAD -&gt; testrebase2) merge commit edit01-03</span><br><span class="line">0dcdaac init porject</span><br></pre></td></tr></table></figure>

<h2 id="怎么避免-branch-上出现很多-merge-的-commit-强迫症福音-2-0"><a href="#怎么避免-branch-上出现很多-merge-的-commit-强迫症福音-2-0" class="headerlink" title="怎么避免 branch 上出现很多 merge 的 commit, 强迫症福音 2.0"></a>怎么避免 branch 上出现很多 merge 的 commit, 强迫症福音 2.0</h2><p>TODO</p>
<h2 id="Git-SS-加速"><a href="#Git-SS-加速" class="headerlink" title="Git SS 加速"></a>Git SS 加速</h2><p>修改 .gitconfig 文件，添加配置如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># config your &#96;~&#x2F;.gitconfig&#96; file</span><br><span class="line">[http]</span><br><span class="line">proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">sslVerify &#x3D; false</span><br><span class="line"></span><br><span class="line">[https]</span><br><span class="line">proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>或者在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># or you can config it by typing terminal</span></span><br><span class="line">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global http.sslVerify <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># turn off proxy, 开启后 git commit 会受影响</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客添加 sitemap</title>
    <url>/hexo/2019/11/22/Hexo%20%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%20sitemap/</url>
    <content><![CDATA[<p>为博客添加 sitemap 并将博客添加至搜索引擎</p>
<h2 id="Google-Search-Console"><a href="#Google-Search-Console" class="headerlink" title="Google Search Console"></a>Google Search Console</h2><p>到博客根目录下运行 command 安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>

<p>在根目录下的 _config.yml 中添加 sitemap 配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Config sitemap to enable SEO</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure>

<p>重新生成文件，启动 server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>访问 url/sitemap.xml 可以看到新生成的 sitemap xml 文件</p>
<p>访问 <a href="https://search.google.com/search-console/about">Google Search Console</a> 注册你的页面。<br>如果你的博客挂在 github 上，选右边的那个，输入你的 github 博客地址，比如我的是 <code>https://jack-zheng.github.io/hexo</code><br><img src="seo01.jpg" alt="资源类型"></p>
<p>结下来是验证所有权, 选择 HTML 标记会简单一点。点击他，你会得到一串码。复制它然后到 themes/next/_config.yml 中，找到 <code>google_site_verification:</code> 将值写在后面</p>
<p><img src="seo02.png" alt="所有权验证"></p>
<p>添加完后，将你的博客部署，在次访问是查看页面源码，你会发现头部多了一段 meta 数据</p>
<p><img src="seo_meta.png" alt="文件头"></p>
<p>然后点击 Verify 按钮，验证成功</p>
<p><img src="seo03.png" alt="所有权验证"></p>
<p>点击 <code>站点地图</code> 在 1 处填写你的 sitemap 地址。添加完成后，他会显示在 2 处</p>
<p><img src="seo04.png" alt="添加站点"></p>
<p>等一段时间后，google 就会将你的博客抓去出来了， 通过在搜索框中输入 <code>site:https://jack-zheng.github.io/</code> 可以看到结果，我是在第二天看的，不是很清楚精确需要等多久</p>
<p><img src="seo05.png" alt="Google Search 结果"></p>
<h2 id="博客添加图片引用"><a href="#博客添加图片引用" class="headerlink" title="博客添加图片引用"></a>博客添加图片引用</h2><ul>
<li><a href="https://hexo.io/zh-cn/docs/asset-folders.html">官方文档</a></li>
</ul>
<p>由于我的博客是挂载在 subdirectory 下面的，在 source 下面创建 images 的方案不生效，也没有找到对应的解决办法，我还以为可以在 _config.yml 里面配置来着，残念 ┑(￣Д ￣)┍</p>
<p>最后采用了 post_asset_folder 的配置，这个配置默认就有的，默认关闭，把他设置成 true 打开，之后每次创建新 post 的时候，会在 _posts 下面新建文件夹，将你要上传的图片放在里面，在 post 正文中使用 <code>![Google Search 结果](seo05.png)</code> 引用即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># folder structure sample</span></span><br><span class="line"><span class="built_in">source</span></span><br><span class="line">├── _posts</span><br><span class="line">│   ├── git-commands.md</span><br><span class="line">│   ├── hexo-comments.md</span><br><span class="line">│   ├── hexo-search-seo</span><br><span class="line">│   │   ├── seo01.jpg</span><br><span class="line">│   │   ├── ...</span><br><span class="line">│   │   └── seo05.png</span><br><span class="line">│   ├── hexo-search-seo.md</span><br><span class="line">│   ├── ...</span><br><span class="line">│   └── setup-hexo-tag-category.md</span><br><span class="line">├── categories</span><br><span class="line">│   └── index.md</span><br><span class="line">└── tags</span><br><span class="line">    └── index.md</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 换皮肤</title>
    <url>/hexo/2019/11/15/Hexo%20%E6%8D%A2%E7%9A%AE%E8%82%A4/</url>
    <content><![CDATA[<p>今天决定尝试一下给 blog 换皮肤。就拿时下最流行的 Next 主题好了，用的人多，文档齐全，熟悉了之后有需求再发挥。</p>
<h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>安装很简单，官方地址 <a href="https://github.com/theme-next/hexo-theme-next">hexo-theme-next</a>。</p>
<ol>
<li><code>cd hexo</code></li>
<li><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></li>
<li>到 <code>themes/next</code> 目录下把 repo 的 .git, .github 删掉</li>
<li>起 server 验证，打完收工</li>
</ol>
<p>其他一些比较个人的配置去 next 目录下的 <code>_config.yml</code> 里面配置，像什么头像啦，github 三角标什么的都要有的。</p>
<h3 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h3><p>如果你只是将 next clone 下来没有删掉 .git 就 add 的话会有 warning 给出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .gitignore _config.yml themes&#x2F;warning: adding embedded git repository: themes&#x2F;nexthint: You&#39;ve added another git repository inside your current repository.</span><br><span class="line">hint: Clones of the outer repository will not contain the contents of</span><br><span class="line">hint: the embedded repository and will not know how to obtain it.</span><br><span class="line">hint: If you meant to add a submodule, use:</span><br><span class="line">hint:</span><br><span class="line">hint:   git submodule add &lt;url&gt; themes&#x2F;next</span><br><span class="line">hint:</span><br><span class="line">hint: If you added this path by mistake, you can remove it from the</span><br><span class="line">hint: index with:</span><br><span class="line">hint:</span><br><span class="line">hint:   git rm --cached themes&#x2F;next</span><br><span class="line">hint:</span><br><span class="line">hint: See &quot;git help submodule&quot; for more information.</span><br></pre></td></tr></table></figure>

<p>这是应为 git 是不支持嵌套 repo 管理的，你可以通过 submodules 来管理，不过使用上会有点冲突，按 submodules 的定义来说，它是为那些需要使用子模块但是那些模块不需要更新，或者只需要跟着官方的 branch 走就行了。就 hexo 这种情况，你可以自己 fork 一个，然后作为子模块管理，但是这样你 fork 的 repo 就不能跟进官方的 repo 了 ┑(￣Д ￣)┍， 反正就我的情况来说，用最简单的删 .git 就行了，真有需求以后在研究。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 添加字数显示，更改语言</title>
    <url>/hexo/2019/11/19/Hexo%20%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E6%98%BE%E7%A4%BA%EF%BC%8C%E6%9B%B4%E6%94%B9%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<p>本篇包含两个配置</p>
<ol>
<li>文章字数，阅读时间显示</li>
<li>语言设置，显示中文</li>
</ol>
<h2 id="配置字数"><a href="#配置字数" class="headerlink" title="配置字数"></a>配置字数</h2><p>参靠 repo: <a href="https://github.com/theme-next/hexo-symbols-count-time">hexo-symbols-count-time</a></p>
<ol>
<li>到根目录下执行 <code>npm install hexo-symbols-count-time</code> 安装插件</li>
<li>到根目录下的 _config.yml 中添加配置</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br></pre></td></tr></table></figure>

<h2 id="配置中文显示"><a href="#配置中文显示" class="headerlink" title="配置中文显示"></a>配置中文显示</h2><p>查看 Next 主题下面的 language 文件夹，找到其中的中文显示文件名，把根目录下的 _config.yml 里的 language 改为这个名字就行了。我这边文件名为 <code>zh-CN.yml</code>，将 yml 中 language 改为 <code>zh-CN</code></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 设置 tags 和 Categories 分类</title>
    <url>/hexo/2019/11/15/Hexo%20%E8%AE%BE%E7%BD%AE%20tags%20%E5%92%8C%20Categories%20%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p>默认设置下 Hexo Next 主题是关闭 <code>tag</code> 和 <code>categories</code> 的，你可以通过一下步骤打开它。</p>
<ol>
<li>去到 next folder 下，打开 <code>_config.yml</code>, 去掉 menu 下的 tags 和 categories 的注释。此时刷新页面，主页上会在 Archive 旁边多两个icon.</li>
<li>repo 目录下 run command: <code>hexo new page categories</code>, 并向该文件中添加新行 <code>type: &quot;categories&quot;</code>。新文件目录 <code>path/to/blog/source/categories/index.md</code></li>
<li>repo 目录下 run command: <code>hexo new page tags</code>, 并向该文件中添加新行 <code>type: &quot;tags&quot;</code>。新文件目录 <code>path/to/blog/source/tags/index.md</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># categories index.md</span><br><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2019-11-15 16:42:15</span><br><span class="line">type: &quot;categories&quot;  &lt;--- 新行</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tags index.md</span><br><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-11-15 16:29:40</span><br><span class="line">type: &quot;tags&quot;  &lt;--- 新行</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>顺便还可以去 <code>path/to/blog/scaffolds/post.md</code>，在 post.md 中添加新行 <code>categories:</code>， 这样每次 new post 的时候都会自动带上这个标签了 ♪(´ε｀ )</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/">linlif-Hexo</a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 设置阅读数，文章授权</title>
    <url>/hexo/2019/11/20/Hexo%20%E8%AE%BE%E7%BD%AE%E9%98%85%E8%AF%BB%E6%95%B0%EF%BC%8C%E6%96%87%E7%AB%A0%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<p>本篇将介绍如何设置统计文章阅读量和文章授权。</p>
<h2 id="阅读量统计"><a href="#阅读量统计" class="headerlink" title="阅读量统计"></a>阅读量统计</h2><p>Hexo 默认使用’不蒜子’做阅读量统计，而且已经配置好了，如果想要开启它只需要到 <code>next/_config.yml</code> 下将 <code>busuanzi_count:</code> 下的 <code>enable:</code> 设置为 true 即可。重启后访问也看可以看到文章标题下多处一只眼睛标志，旁边就是总阅读量。</p>
<p><a href="http://ibruce.info/2015/04/04/busuanzi/">不蒜子</a>, 貌似是某程序员建的站，托管在七牛上的，赞！</p>
<h2 id="文章授权"><a href="#文章授权" class="headerlink" title="文章授权"></a>文章授权</h2><p>Hexo 默认授权是关闭的，可以在 <code>next/_config.yml</code> 的 <code>creative_commons</code> 模块做设置。默认是 <code>by-nc-sa</code> 授权。</p>
<p><a href="https://zh.wikipedia.org/wiki/%E7%9F%A5%E8%AF%86%E5%85%B1%E4%BA%AB%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE">常见授权方式Wiki</a></p>
<table>
<thead>
<tr>
<th>许可协议</th>
<th align="center">简称</th>
</tr>
</thead>
<tbody><tr>
<td>创作共享 署名</td>
<td align="center">CC BY</td>
</tr>
<tr>
<td>创作共享 署名-相同方式共享</td>
<td align="center">CC BY-SA</td>
</tr>
<tr>
<td>创作共享 署名-非商业性</td>
<td align="center">CC BY-NC</td>
</tr>
<tr>
<td>创作共享 署名-禁止演绎</td>
<td align="center">CC BY-ND</td>
</tr>
<tr>
<td>创作共享 署名-非商业性-禁止演绎</td>
<td align="center">CC BY-NC-ND</td>
</tr>
<tr>
<td>创作共享 署名-非商业性-相同方式共享</td>
<td align="center">CC BY-NC-SA</td>
</tr>
<tr>
<td>创作共享 相同方式共享</td>
<td align="center">CC SA</td>
</tr>
<tr>
<td>创作共享 非商业性</td>
<td align="center">CC NC</td>
</tr>
<tr>
<td>创作共享 禁止演绎</td>
<td align="center">CC ND</td>
</tr>
<tr>
<td>创作共享 非商业性-相同方式共享</td>
<td align="center">CC NC-SA</td>
</tr>
<tr>
<td>创作共享 非商业性-禁止演绎</td>
<td align="center">CC NC-ND</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 评论功能</title>
    <url>/hexo/2019/11/18/Hexo%20%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>为博客增加评论功能，参考 next 的配置文件，截止 2019-11-18 号为止，next 已经默认支持了 changyan | disqus | disqusjs | gitalk | livere | valine 这些评论系统。这里出于兼容性和可靠性的原则，选择 gitalk 作为评论系统。</p>
<p>Steps:</p>
<ol>
<li>github 创建一个新的 repo 用于存放 comments，比如叫做 hexo-comments</li>
<li>去到 github 账号的配置页面新建一个 Oauth 授权，<a href="https://github.com/settings/applications/new">点这里快速跳转</a></li>
<li>填写授权信息 Homepage URL 和 Authorization callback URL 都写自己的博客地址就行了</li>
<li>确认后跳转到授权信息页面，记下他的 app id 和 secret</li>
<li>配置 next 的 _config.yml 如下</li>
<li>提交代码测试</li>
</ol>
<p>测试评论，成功。新添加的评论会出现在 hexo-comments 的 issues tab 下面，按这样的操作的话，我觉的可能都不需要自建创建 comments repo 了，直接放在一个 repo 下面就完事了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id: jack-zheng # GitHub repo owner</span><br><span class="line">  repo: hexo-comments # 新建的用于存放评论的repo</span><br><span class="line">  client_id: d44xxxxxxe3a # GitHub Application Client ID</span><br><span class="line">  client_secret: 9b3c4xxxxxb708ef # GitHub Application Client Secret</span><br><span class="line">  admin_user: jack-zheng # GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line">  # Gitalk&#39;s display language depends on user&#39;s browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure>

<p>PS: 用这种方案的话，默认只有 github 的用户才能评论，不过看这种文章的应该都是github用户，所以问题不大<br>PPS: 网上很多文章都会要你去配置 swig 文件，最新版的 next 已经不需要这个步骤了</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://github.com/gitalk/gitalk">gitalk</a></li>
<li><a href="https://www.jianshu.com/p/b5f509f25872">简书-Jonzzs</a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 搜索</title>
    <url>/hexo/2020/05/28/Hexo-Search-Plugin/</url>
    <content><![CDATA[<p>Hexo 提供全区搜索功能很方便，在两个 <code>_config.yml</code> 文件下添加配置就行了，一个在 hexo 下，一个在 next 皮肤下。</p>
<p>root -&gt; _config.yml 添加配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Config for search service</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">    <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>root -&gt; themes -&gt; next -&gt; _config.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h2><p>某一天突然发现部分 Post 不能被 search 出来了，排查了好久，发现是 Splunk 之后一个都失效了。继续排查，是这片文章中有个 ‘Steps:’ 的节点，在编辑器里面查看是没什么问题的，但是贴到其他工具，比如 idea 或者 browser 里面时，他会带一个 [BS] 的前缀。太神奇了。。。所以之前一直没发现。</p>
<p>在 VSCode 里面看结构还是 <code>&lt;p&gt;Steps&lt;/p&gt;</code> 但是用 linux cat 时就变成 <code>&lt;pSteps:&lt;/p&gt;</code> 所以后面的 search 解析就出问题了。查了下 BS 代表的是退格键 0x008, 也解释了为什么 xml p 标签会少一个尖括号了 ╮(￣▽￣””)╭</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客 Setup</title>
    <url>/hexo/2019/11/12/Hexo-blog-setup/</url>
    <content><![CDATA[<p>Hexo setup 笔记。网上有好多 setup 的教程，这里就不赘述了。记录一下我 setup 时候用到的命令，作为备忘。</p>
<p>这里使用的 Next 版本 <strong>V7.5.0</strong></p>
<h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><ol>
<li>安装 node/npm, <code>brew install node</code>, type <code>node -v</code>, <code>npm -v</code> to check if install successfully.</li>
<li>run command: <code>npm install -g hexo-cli</code>, 安装 hexo 工具, 安装完成，type <code>hexo</code> to check</li>
<li>Setup 博客基础架构 <code>hexo init &lt;folder&gt;</code>, cd &lt;folder&gt;, run command: <code>hexo server</code> 就可以得到一个本地可访问的 hello world 博客模版</li>
<li><code>hexo new post_name</code>, 在 source 文件夹下面会创建一个新的 post_name.md 文件作为新博客的载体</li>
<li>为你的博客新建一个git repo, repo name 必须是<strong>你的Git用户名.github.io</strong>, 如果已经创建了, rename 一下</li>
<li>编辑 &lt;folder&gt;_config.yml 关联 git repo</li>
<li><code>npm install hexo-deployer-git --save</code> 安装 git 集成工具</li>
<li><code>hexo g</code> 生成工程目录及相关文件</li>
<li><code>hexo s</code> 启动本地 server 验证</li>
<li><code>hexo d</code> 部署发布到 github, 等一两分钟访问 <code>https://&lt;你的Git用户名&gt;.github.io</code> 就可以看到你的作品了 (^з^)-☆</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;&lt;username&gt;.github.io.git</span><br><span class="line">  # SSH 格式的也OK, 简单理解就是去 github repo 页面, 把你的 repo 地址复制一下</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h3 id="异地环境-setup"><a href="#异地环境-setup" class="headerlink" title="异地环境 setup"></a>异地环境 setup</h3><h4 id="Win10"><a href="#Win10" class="headerlink" title="Win10"></a>Win10</h4><p>在其他机子上面重新 setup 环境只需要安装 git 和 nodejs, 把项目 clone 到本地之后 cd 到博客根目录下运行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>就行了，在 Windows 下使用 VS Code 的默认命令行时还遇到另外一个问题，hexo 命令不能执行，抛出 Exception:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\lanmo\gitStore\hexo&gt; hexo</span><br><span class="line">hexo : 无法加载文件 C:\Users\lanmo\AppData\Roaming\npm\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft</span><br><span class="line">.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ hexo</span><br><span class="line">+ ~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure>

<p>这是由于 powershell 的默认脚本执行策略把这个 command 阻塞了，可以执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许本地脚本执行</span></span><br><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br></pre></td></tr></table></figure>

<p>来开放权限，其他可用命令还有</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看可用策略</span></span><br><span class="line">Get-ExecutionPolicy -List</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前策略</span></span><br><span class="line">Get-ExecutionPolicy</span><br></pre></td></tr></table></figure>

<p>更多可以参考官方文档 <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-6">About Execution Policies</a></p>
<h4 id="Win10-WSL"><a href="#Win10-WSL" class="headerlink" title="Win10 WSL"></a>Win10 WSL</h4><p>WSL 默认已经安装了 git, 所以只需要额外安装 nodejs 就行了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果速度慢可以使用 taobao 源加速</span></span><br><span class="line">npm --registry https://registry.npm.taobao.org install nodejs</span><br><span class="line"><span class="comment"># 配置永久源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>安装完后运行 <code>node -v</code> 和 <code>npm -v</code> 查看是否安装成功。我本地安装完后，node 可以正常调用，但是 npm 不行，报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jack@DESKTOP-9TGTFK1:~$ npm -v</span><br><span class="line">: not foundram Files/nodejs/npm: 3: /mnt/c/Program Files/nodejs/npm:</span><br><span class="line">: not foundram Files/nodejs/npm: 5: /mnt/c/Program Files/nodejs/npm:</span><br><span class="line">/mnt/c/Program Files/nodejs/npm: 6: /mnt/c/Program Files/nodejs/npm: Syntax error: word unexpected (expecting <span class="string">&quot;in&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 which npm 查看路径</span></span><br><span class="line">jack@DESKTOP-9TGTFK1:~$ <span class="built_in">which</span> npm</span><br><span class="line">/usr/bin/npm</span><br></pre></td></tr></table></figure>

<p>是应为路径有问题，修改 WSL 下的 <code>~/.profile</code> 文件，添加 npm 执行路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PATH=<span class="string">&quot;<span class="variable">$HOME</span>/bin:<span class="variable">$HOME</span>/.local/bin:/usr/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后 <code>source ~/.profile</code> 在运行 <code>npm -v</code>, 成功。</p>
<p>该问题可以参考 <a href="https://github.com/microsoft/WSL/issues/1512">VSCode Git Issue</a></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://hexo.io/docs/github-pages">Hexo 官方文档</a></li>
<li><a href="https://juejin.im/post/5bebfe51e51d45332a456de0">Juejin-最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26625249">Zhihu-GitHub+Hexo 搭建个人网站详细教程</a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 保存博客源码</title>
    <url>/hexo/2019/11/13/Hexo-use-travis-to-auto-publish/</url>
    <content><![CDATA[<p>按照之前的教程，虽然 github page 上顺利发布了，但是 blog 的 source code 并没有一起同步过去，还在本地。Hexo 工具只是把你翻译之后的 web 信息同步过去了。search 了一下，想要同步 source 有大概三种路子：</p>
<ol>
<li>hexo 插件: hexo-git-backup</li>
<li>在原来的 blog repo 里面新建分支存储</li>
<li>官方方法，集成 Travis CI，每次 push 自动帮你部署</li>
</ol>
<p>本文只描述怎么集成 Travis CI, 其他的方案有机会再补，网上教程很多，随便找找就有了。</p>
<blockquote>
<p>采用 Travis CI 的方案之后，原来的 repo name 需要改变，不然 blog 访问不了, 针对这种情况，其实还有另一种解决方案，将 master 用来存放编译好的 blog, 源码用新的 branch 存放，和前面的那些原理都一样</p>
</blockquote>
<h3 id="Travis-CI-集成"><a href="#Travis-CI-集成" class="headerlink" title="Travis CI 集成"></a>Travis CI 集成</h3><ol>
<li>新建一个 repo, 这里我用 hexo 作为 repo name</li>
<li>clone 到本地，将之前的 blog source copy 进去，添加 <code>.gitignore</code> 文件，把 <code>public\</code> 添加进 list</li>
<li>注册 Travis 账号，用 github 授权就行，授权 repo, 添加 token. 官方文档都有链接，很方便</li>
<li>update <code>_config.yml</code> 里的 url 和 root 值</li>
<li>添加 <code>.travis.yml</code> 做 CI 集成管理</li>
<li>commit + push 这些改动，Travis 自动 build 就会被触发了</li>
<li>build 完成后，repo 会有一个新的 branch 叫 gh-pages. 访问 <code>https://jack-zheng.github.io/hexo</code> 查看改动结果</li>
</ol>
<p>国内，第一次访问会比较慢，cache 了文件之后后面访问会快一点</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml setting</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://jack-zheng.github.io/hexo</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/hexo/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#.gitignore</span><br><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br><span class="line">.vscode</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .travis.yml</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10</span> <span class="comment"># use nodejs v10 LTS</span></span><br><span class="line"><span class="attr">cache:</span> <span class="string">npm</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span> <span class="comment"># build master branch only</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="comment"># generate static files</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip-cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github-token:</span> <span class="string">$GH_TOKEN</span></span><br><span class="line">  <span class="attr">keep-history:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">local-dir:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure>

<h3 id="Issue-Trace"><a href="#Issue-Trace" class="headerlink" title="Issue Trace"></a>Issue Trace</h3><p>在按照官方教程走完流程后，repo 的 setting page 会有如下 Warning, 删了 <code>themes/landscape/README.md</code> 这个文件再 build 一下就行了</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Your site is having problems building: The tag fancybox on line 77 in themes/landscape/README.md is not a recognized Liquid tag. For more information, see https://help.github.com/en/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#unknown-tag-error.</span><br></pre></td></tr></table></figure>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://hexo.io/docs/github-pages">Travis CI 集成 - 官方</a></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何给心仪的项目提交 PR</title>
    <url>/hexo/2020/09/25/How-to-give-PR-to-the-repo-you-like/</url>
    <content><![CDATA[<ol>
<li>fork 项目，下载到本地</li>
<li>新建分支，修改代码</li>
<li>命令行提交改动，push 到远端</li>
<li>登陆到 github，查看 fork 的项目，手动选择将改动作为一个 PR 推送到你原始项目</li>
</ol>
<p>打完收工～</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea 常用配置</title>
    <url>/hexo/2019/12/26/Idea-configuration/</url>
    <content><![CDATA[<p>Idea 中关于 Maven 的一些配置</p>
<h2 id="Configurations"><a href="#Configurations" class="headerlink" title="Configurations"></a>Configurations</h2><h3 id="避免-import"><a href="#避免-import" class="headerlink" title="避免 import *"></a>避免 import *</h3><p>默认设置下，同一个包下 import 数量超过 5 个就会用 * 来代替，可以去 Setting -&gt; editor -&gt; code style -&gt; java, 然后右边选择 Imports tab, 修改 ‘Class count to use import *’ 的值即可</p>
<h3 id="Maven-下载仓库配"><a href="#Maven-下载仓库配" class="headerlink" title="Maven 下载仓库配"></a>Maven 下载仓库配</h3><ol>
<li>Shift + Ctrl + A -&gt; 搜索 <code>Settings.xml</code>, Open/Create 这个文件 -&gt; 添加仓库地址  </li>
<li>localRepository 这个变量的地址应该是对应到本地的 <code>.m</code> folder 下的 repository 文件夹  </li>
<li>Settings.xml 路径可以在 ‘Build, Excutations, Deployment’ 下的 maven tag 下查看</li>
</ol>
<h3 id="设置-Maven-自动下载包源码"><a href="#设置-Maven-自动下载包源码" class="headerlink" title="设置 Maven 自动下载包源码"></a>设置 Maven 自动下载包源码</h3><ol>
<li>Build, Excutations, Deployment -&gt; Maven -&gt; Importing -&gt; Automatically download: source, documentation 打勾  </li>
<li>回到主界面，在侧边栏的 Maven 里面会出现 ‘Download source and/or documentation’ 的按钮</li>
</ol>
<h3 id="Win10-下-Idea-NVIDIA-快捷键冲突"><a href="#Win10-下-Idea-NVIDIA-快捷键冲突" class="headerlink" title="Win10 下 Idea/NVIDIA 快捷键冲突"></a>Win10 下 Idea/NVIDIA 快捷键冲突</h3><ol>
<li>NVIDIA Graphic 开启的时候 Ctrl + Alt + 方向键会变成调整显示方向的设置，和 Idea 的代码跳转冲突</li>
<li>右键桌面 -&gt; 图形属性 -&gt; 选项和支持 -&gt; 禁用快捷键</li>
</ol>
<h3 id="Idea-查看-JDK-源码"><a href="#Idea-查看-JDK-源码" class="headerlink" title="Idea 查看 JDK 源码"></a>Idea 查看 JDK 源码</h3><p>File -&gt; project setting -&gt; SDKs -&gt; 右边有个 Sourcepath -&gt; 导航到 JDK 文件目录下找到 src.zip 就行了</p>
<h3 id="设置条件断点"><a href="#设置条件断点" class="headerlink" title="设置条件断点"></a>设置条件断点</h3><p>添加断点之后，在断点上右键输入你想要的条件，比如： a==10</p>
<h3 id="Debug-显示设置"><a href="#Debug-显示设置" class="headerlink" title="Debug 显示设置"></a>Debug 显示设置</h3><p>debug 时一些值比如 <code>byte[]</code> 想要看具体的值时多少，可以右键 -&gt; Evaluate Expression… 输入表达式 <code>new String(dmBytes)</code> 查看，也可以通过 add to watch 输入同样的表达式</p>
<h3 id="复制代码段的时候，取消格式复制"><a href="#复制代码段的时候，取消格式复制" class="headerlink" title="复制代码段的时候，取消格式复制"></a>复制代码段的时候，取消格式复制</h3><p>cmd+shift+A 打开搜索框，输入关键字 ‘copy as rich text’, 关闭对应的开关</p>
<h3 id="IDEA中显示空格"><a href="#IDEA中显示空格" class="headerlink" title="IDEA中显示空格"></a>IDEA中显示空格</h3><p>cmd+shift+A 打开搜索框，输入关键字 ‘show withspace’, 操作对应的开关</p>
<h3 id="快速实现-tab-lt-gt-space-转化"><a href="#快速实现-tab-lt-gt-space-转化" class="headerlink" title="快速实现 tab &lt;-&gt; space 转化"></a>快速实现 tab &lt;-&gt; space 转化</h3><ol>
<li>cmd+shift+A 打开搜索框，输入关键字 ‘convert indents’, 选择 ‘To Spaces’</li>
<li>或者在输入关键字的时候直接选择 ‘To Spaces’</li>
</ol>
<h3 id="查看类继承关系"><a href="#查看类继承关系" class="headerlink" title="查看类继承关系"></a>查看类继承关系</h3><p>Navigate -&gt; Type Hierarchy 或者 Ctrl + H</p>
<h3 id="关闭-Idea-自动更新提示"><a href="#关闭-Idea-自动更新提示" class="headerlink" title="关闭 Idea 自动更新提示"></a>关闭 Idea 自动更新提示</h3><p>快捷搜索 <code>Automatically check update for</code> 然后将更新选项去掉</p>
<h3 id="Class-生成-Enter就会提示自动创建serialVersionUID"><a href="#Class-生成-Enter就会提示自动创建serialVersionUID" class="headerlink" title="Class 生成 Enter就会提示自动创建serialVersionUID"></a>Class 生成 Enter就会提示自动创建serialVersionUID</h3><ol>
<li>Setting-&gt;Inspections-&gt;Serialization issues-&gt;Serializable class without ’serialVersionUID’ </li>
<li>选上以后，在你的class中：Alt+Enter就会提示自动创建serialVersionUID了。</li>
</ol>
<h3 id="设置终端-log-size"><a href="#设置终端-log-size" class="headerlink" title="设置终端 log size"></a>设置终端 log size</h3><p>默认终端数量有限，稍微多点就把前面的给冲掉了，可以设置 Preferences &gt; Editor &gt; General &gt; Console, 勾选 Override console cycle buffer size (1024 KB)，并把值调大就行</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul>
<li>查看字节码：安装 jclasslib，重启。选中文件，选择导航栏上的 view -&gt; Show byte code with jclasslib 选项即可</li>
</ul>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table>
<thead>
<tr>
<th align="left">功能</th>
<th align="center">Mac</th>
<th align="center">Win</th>
</tr>
</thead>
<tbody><tr>
<td align="left">万能快捷键</td>
<td align="center">CMD + Shift + A</td>
<td align="center">TODO</td>
</tr>
<tr>
<td align="left">查找类</td>
<td align="center">CMD+ O</td>
<td align="center">TODO</td>
</tr>
</tbody></table>
<h2 id="Spring-中-Autowired-warning"><a href="#Spring-中-Autowired-warning" class="headerlink" title="Spring 中 Autowired warning"></a>Spring 中 Autowired warning</h2><p>Settings -&gt; Editor -&gt; Code Style -&gt; Inspections -&gt; Spring Core -&gt; Code -&gt; Field injection warning 选项 disable 掉</p>
<h2 id="maven-assembly-plugin-not-found"><a href="#maven-assembly-plugin-not-found" class="headerlink" title="maven-assembly-plugin not found"></a>maven-assembly-plugin not found</h2><p>For newer versions of IntelliJ, enable the use plugin registry option within the Maven settings as follows:</p>
<ol>
<li>Click File -&gt; Settings.</li>
<li>Expand Build, Execution, Deployment -&gt; Build Tools -&gt; Maven. Check Use plugin registry.</li>
<li>Click OK or Apply.</li>
</ol>
<p>For IntelliJ 14.0.1, open the preferences—not settings—to find the plugin registry option:</p>
<ol>
<li>Click File -&gt; Preferences. Regardless of version, also invalidate the caches:</li>
<li>Click File -&gt; Invalidate Caches / Restart.</li>
<li>Click Invalidate and Restart.</li>
</ol>
<p>When IntelliJ starts again the problem should be vanquished.</p>
<h2 id="默认注释格式"><a href="#默认注释格式" class="headerlink" title="默认注释格式"></a>默认注释格式</h2><p>默认注释格式会把双斜杠放到最前面，和习惯很不搭配，可以通过 Perferences -&gt; settings -&gt; Editor -&gt; Code style -&gt; java 跳出设置界面</p>
<p>到 Code generic tab 下面，将 Comment Code 选项下的 <code>Line comment at first coumn</code> 去掉，下一级的 <code>Add a space at comment start</code> 选上即可</p>
<h2 id="2021-04-15"><a href="#2021-04-15" class="headerlink" title="2021-04-15"></a>2021-04-15</h2><p>升级 Idea 之后，原来的项目在 Idea 里面编译失败，但是终端却可以。由此断定项目肯定是好的。Google 了一下，可以通过 File -&gt; Invalidate caches -&gt; Invalidate and Restart 重启 Idea 解决问题</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>maven</tag>
        <tag>配置</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea 破解</title>
    <url>/hexo/2019/12/26/Idea-cracking/</url>
    <content><![CDATA[<p>简单记录一下怎么破解 idea, 主要是记录下破解的文章引用，方便以后查找，引用的文章 po 主说会持续跟新的 (～￣▽￣)～</p>
<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><blockquote>
<p>PS: 预算充足的一定要支持正版啊啊啊啊 (●’◡’●)</p>
</blockquote>
<ol>
<li>去官网下载最新的 Pro 版</li>
<li>下载 JetbrainsCrack.jar 破解包，放到 idea 安装路径的 bin 文件夹下</li>
<li>打开安装好的 idea，选择试用 30 天。 进入界面之后 Help -&gt; Edit Custom VM Options, 如果提示是否创建文件，选择 Yes</li>
<li>拿到刚刚的 jar 文件的绝对路径，添加到末尾，比如我这里是：<code>-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2019.2.4\bin\JetbrainsCrack.jar</code></li>
<li>重启 idea, 再到 Help -&gt; Register, 选择 License server 方式，idea 会自动填入 <code>http://jetbrains-license-server</code>，确定</li>
<li>在重启一波，根据提示信息可以看到破解完成</li>
</ol>
<h2 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h2><ul>
<li><a href="https://www.algerfan.cn/articles/2019/03/06/1551868940012.html">感谢给出资源和解决方案的 - AlgerFan</a></li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>破解</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea tomcat log 乱码</title>
    <url>/hexo/2020/11/02/Idea-tomcat-terminal-garbled/</url>
    <content><![CDATA[<p>Windows 平台练习 spring 项目的时候，idea 终端 tomcat 乱码，不方便调试排错，可以改动如下</p>
<p>先确定 tomcat 本身是不是有乱码。先启动一个 tomcat，查看 Windows 终端的显示情况，这部分可以查看 tomcat 安装目录的配置文件 <code>C:\Program Files\Apache Software Foundation\Tomcat 9.0\conf\logging.properties</code>，所有的编码设置成 UTF-8 <code>encoding = UTF-8</code> </p>
<p>配置 Idea 编码选项</p>
<ol>
<li>Editor -&gt; File Encoding， Global 和 Project 都设置成 UTF-8</li>
<li>Java compiler 页面的 ‘Additional command line parameters:’ 添加 <code>-encoding utf-8</code></li>
<li>项目的 tomcat 服务器 VM options: 添加 <code>-Dfile.encoding=UTF-8</code></li>
<li>Help -&gt; <code>Edit Custom VM Options...</code> 添加配置 <code>-Dfile.encoding=utf-8</code></li>
</ol>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>乱码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 面试之多线程</title>
    <url>/hexo/2021/03/26/Interview-concurrency/</url>
    <content><![CDATA[<p>备忘一下多线程相关的面试题</p>
<h2 id="Java-如何开启线程，怎么保证线程安全"><a href="#Java-如何开启线程，怎么保证线程安全" class="headerlink" title="Java 如何开启线程，怎么保证线程安全"></a>Java 如何开启线程，怎么保证线程安全</h2><p>进程是操作系统分配<strong>资源</strong>的最小系统，线程是系统进行分配<strong>任务</strong>的最小单元，线程隶属于进程。</p>
<p>如何开启：</p>
<ol>
<li>继承 Thread, 重写 run 方法</li>
<li>实现 Runable 接口，实现 run 方法</li>
<li>实现 Callable 接口，实现 call 方法。通过 FeatureTask 创建一个线程，获取线程执行返回结果</li>
<li>通过线程池开启线程</li>
</ol>
<p>3，4 有对应的只是储备可以延伸一下，不然就别提了, 这两个都是在 concurrent 包下的，等学习那个包的时候再看</p>
<p>为什么要有以上两种方式：Java 采用单继承，多实现的设计模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// extends class 实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ThreadDemo print count: &quot;</span> + i)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadDemo threadDemo1 = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        ThreadDemo threadDemo2 = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        ThreadDemo threadDemo3 = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        threadDemo1.start();</span><br><span class="line">        threadDemo2.start();</span><br><span class="line">        threadDemo3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以用 lambda 简写, 但是 lambda 的形式是不能复用的，一次性产品</span></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">&quot;ThreadDemo print count: &quot;</span> + i)).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// implement class 实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - RunnableDemo count: &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RunnableDemo runnableDemo = <span class="keyword">new</span> RunnableDemo();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(runnableDemo, <span class="string">&quot;1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnableDemo, <span class="string">&quot;2&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnableDemo, <span class="string">&quot;3&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>怎么保证线程安全：加锁</p>
<ol>
<li>JVM 锁， Synchronized</li>
<li>JDK 锁， Lock</li>
</ol>
<h2 id="Volatile-和-Synchronized-有什么区别？-Volatile-能不能保证线程安全？-DCL-Double-Check-Lock-单例为什么要加-Volatile"><a href="#Volatile-和-Synchronized-有什么区别？-Volatile-能不能保证线程安全？-DCL-Double-Check-Lock-单例为什么要加-Volatile" class="headerlink" title="Volatile 和 Synchronized 有什么区别？ Volatile 能不能保证线程安全？ DCL(Double Check Lock) 单例为什么要加 Volatile?"></a>Volatile 和 Synchronized 有什么区别？ Volatile 能不能保证线程安全？ DCL(Double Check Lock) 单例为什么要加 Volatile?</h2><p>Syncronized 用于加锁。Volatile 只保持变量的线程可见性，通常用于一个线程写，多个线程读取的情况</p>
<p>Volatile 不能保证线程安全，只保证可见行，不保证原子性</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="comment">/**volatile**/</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;-------- End Thread --------&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------- Set flag to false --------&quot;</span>);</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当注释掉 volatile 时，终端只输出 set flag 提示并挂起</span></span><br><span class="line"><span class="comment">// -------- Set flag to false --------</span></span><br><span class="line"><span class="comment">// 当使用 volatile 时，程序正常结束</span></span><br><span class="line"><span class="comment">// -------- Set flag to false --------</span></span><br><span class="line"><span class="comment">// -------- End Thread --------</span></span><br></pre></td></tr></table></figure>

<p>TODO: 补一张主/从内存 copy 图</p>
<p>DCL(Double Check Lock) 单例为什么要加 Volatile：防止指令重排，防止高并发下指令重拍导致的线程安全问题。</p>
<p>DCL 示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 懒汉式 DCL, 懒加载, 只在要用到的时候实例化</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 一定要加 volatile 不然并不安全, 第一次写的时候还错了。 https://www.jianshu.com/p/246e8f72dc9a 解释的挺清楚,</span></span><br><span class="line"><span class="comment">    * 简而言之，不加的话会有指令重排的可能。</span></span><br><span class="line"><span class="comment">    * singleDemo = new SingleDemo(); 为代码层面可以分为三步，分配空间，构建实例，实例赋值。重排之后实例赋值可能要比构建实例先执行，</span></span><br><span class="line"><span class="comment">    * 那么其他线程在判断 null == singleDemo 时就会判断为 true, 但是后续对该实例地址上对象操作时可能由于实例还没有构建完成而出现异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingleDemo singleDemo; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleDemo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleDemo <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singleDemo) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingleDemo.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == singleDemo) &#123;</span><br><span class="line">                    singleDemo = <span class="keyword">new</span> SingleDemo();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleDemo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 饿汉式 DCL, 类加载即实例化</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single single = <span class="keyword">new</span> Single();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getSingle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TODO: 补图</p>
<h2 id="Java-线程锁机制是什么怎么样的？偏向锁，轻量级锁，重量级锁有什么区别，锁机制如何升级"><a href="#Java-线程锁机制是什么怎么样的？偏向锁，轻量级锁，重量级锁有什么区别，锁机制如何升级" class="headerlink" title="Java 线程锁机制是什么怎么样的？偏向锁，轻量级锁，重量级锁有什么区别，锁机制如何升级"></a>Java 线程锁机制是什么怎么样的？偏向锁，轻量级锁，重量级锁有什么区别，锁机制如何升级</h2><p>和视频给的结果不一样，视频中，只有 markword 不一样，体现出这个标志位表示了锁状态，表示很清楚问什么，难道是平台问题，回去后用 Windows 试一下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jol/jol-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jol<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jol-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以打印出 Java 对象在内存中的分布情况 --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.openjdk.jol.info.ClassLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JolDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object o = <span class="keyword">new</span> Object();</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">            System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.lang.Object object internals:</span></span><br><span class="line"><span class="comment">//  OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span></span><br><span class="line"><span class="comment">//       0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span></span><br><span class="line"><span class="comment">//       4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span></span><br><span class="line"><span class="comment">//       8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)</span></span><br><span class="line"><span class="comment">//      12     4        (loss due to the next object alignment)</span></span><br><span class="line"><span class="comment">// Instance size: 16 bytes</span></span><br><span class="line"><span class="comment">// Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// java.lang.Object object internals:</span></span><br><span class="line"><span class="comment">//  OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span></span><br><span class="line"><span class="comment">//       0     4        (object header)                           d0 a9 41 0d (11010000 10101001 01000001 00001101) (222407120)</span></span><br><span class="line"><span class="comment">//       4     4        (object header)                           00 70 00 00 (00000000 01110000 00000000 00000000) (28672)</span></span><br><span class="line"><span class="comment">//       8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)</span></span><br><span class="line"><span class="comment">//      12     4        (loss due to the next object alignment)</span></span><br><span class="line"><span class="comment">// Instance size: 16 bytes</span></span><br><span class="line"><span class="comment">// Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</span></span><br></pre></td></tr></table></figure>

<p>Java 的锁就是在对象的 Markword 中记录的一种状态，无锁，偏向锁，轻量级锁，重量级锁 对应标志位的不同状态</p>
<p>Java 的锁机制就是根据资源竞争的激烈程度不断进行锁升级的过程</p>
<p>TODO：补图</p>
<p>JVM 锁优化：休眠 5s 之后对象自带偏向锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JolDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Object o = <span class="keyword">new</span> Object();</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// -XX:UseBiasedLocking 是否打开偏向所，默认关闭</span></span><br><span class="line">        <span class="comment">// -XX:BiasedLockingStartupDelay 默认开启</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        Object o2 = <span class="keyword">new</span> Object();</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(o2).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.lang.Object object internals:</span></span><br><span class="line"><span class="comment">//  OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span></span><br><span class="line"><span class="comment">//       0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span></span><br><span class="line"><span class="comment">//       4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span></span><br><span class="line"><span class="comment">//       8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)</span></span><br><span class="line"><span class="comment">//      12     4        (loss due to the next object alignment)</span></span><br><span class="line"><span class="comment">// Instance size: 16 bytes</span></span><br><span class="line"><span class="comment">// Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// java.lang.Object object internals:</span></span><br><span class="line"><span class="comment">//  OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span></span><br><span class="line"><span class="comment">//       0     4        (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)</span></span><br><span class="line"><span class="comment">//       4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span></span><br><span class="line"><span class="comment">//       8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)</span></span><br><span class="line"><span class="comment">//      12     4        (loss due to the next object alignment)</span></span><br><span class="line"><span class="comment">// Instance size: 16 bytes</span></span><br><span class="line"><span class="comment">// Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</span></span><br></pre></td></tr></table></figure>

<h2 id="谈谈对-AQS-的理解"><a href="#谈谈对-AQS-的理解" class="headerlink" title="谈谈对 AQS 的理解"></a>谈谈对 AQS 的理解</h2><h2 id="有-ABC-三个线程，如何保证三个线程同时执行，如何在并发情况下保证三个线程一次执行，如何保证三个线程有序交错进行"><a href="#有-ABC-三个线程，如何保证三个线程同时执行，如何在并发情况下保证三个线程一次执行，如何保证三个线程有序交错进行" class="headerlink" title="有 ABC 三个线程，如何保证三个线程同时执行，如何在并发情况下保证三个线程一次执行，如何保证三个线程有序交错进行"></a>有 ABC 三个线程，如何保证三个线程同时执行，如何在并发情况下保证三个线程一次执行，如何保证三个线程有序交错进行</h2><h2 id="如何对一个字符串快速进行排序（多线程快排）"><a href="#如何对一个字符串快速进行排序（多线程快排）" class="headerlink" title="如何对一个字符串快速进行排序（多线程快排）"></a>如何对一个字符串快速进行排序（多线程快排）</h2>]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>interview</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存模型与线程</title>
    <url>/hexo/2021/04/01/JVM-c12-java-memory-model-and-thread/</url>
    <content><![CDATA[<p>深入理解 Java 虚拟机第 12 章Java内存模型与线程笔记</p>
<h2 id="12-3-Java-内存模型"><a href="#12-3-Java-内存模型" class="headerlink" title="12.3 Java 内存模型"></a>12.3 Java 内存模型</h2><p>Java 内存模型(JMM) 用来屏蔽各种硬件和操作系统的内存访问差异，已实现 Java 程序在各种平台下都能达到一致的内存访问效果。 PS：看起来这就是传说中的一次编译，到处运行的功能吧。</p>
<h3 id="12-3-1-主内存和工作内存"><a href="#12-3-1-主内存和工作内存" class="headerlink" title="12.3.1 主内存和工作内存"></a>12.3.1 主内存和工作内存</h3><p>JMM 规定，</p>
<ul>
<li>所有变量都存储在主内存(Main Memory)中</li>
<li>每条线程有自己的工作内存(Working Memory)</li>
<li>线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存中的数据</li>
<li>不同线程不能访问对方的工作内存中的变量</li>
<li>线程间值传递需要通过主内存完成</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+-----------+          +-----------+           +-------+                                                                                             </span><br><span class="line">| Java      |  &lt;-----&gt; | Working   |  &lt;-----&gt;  |       |                                                                                             </span><br><span class="line">| Thread    |          | Memory    |           |       |         +---------------+                                                                   </span><br><span class="line">+-----------+          +-----------+           | Save  |         |               |                                                                   </span><br><span class="line">                                               | &amp;     |         |  Main Memory  |                                                                   </span><br><span class="line">+-----------+          +-----------+           | Load  | &lt;-----&gt; |               |                                                                   </span><br><span class="line">| Java      |          | Working   |           |       |         |               |                                                                   </span><br><span class="line">| Thread    |  &lt;-----&gt; | Memory    |  &lt;-----&gt;  |       |         |               |                                                                   </span><br><span class="line">+-----------+          +-----------+           |       |         |               |                                                                   </span><br><span class="line">                                               |       |         |               |                                                                   </span><br><span class="line">+-----------+          +-----------+           |       |         +---------------+                                                                   </span><br><span class="line">| Java      |          | Working   |           |       |                                                                                             </span><br><span class="line">| Thread    |  &lt;-----&gt; | Memory    |  &lt;-----&gt;  |       |                                                                                             </span><br><span class="line">+-----------+          +-----------+           +-------+                                </span><br></pre></td></tr></table></figure>

<h3 id="12-3-2-内存间交互操作"><a href="#12-3-2-内存间交互操作" class="headerlink" title="12.3.2 内存间交互操作"></a>12.3.2 内存间交互操作</h3><p>JMM 规定了主内存和工作内存之间的具体交互协议，定义了 8 中操作，这些操作都要求是原子的，不可再分的(对 double/long 类型的变量来说， laod, store,read,write 操作在某些平台上允许例外)</p>
<ul>
<li>lock - 作用主内存，把变量标识为线程独占</li>
<li>unlock - 作用主内存，把变量从锁定状态释放</li>
<li>read - 作用主内存，将变量从主内存传输到工作内存</li>
<li>load - 作用工作内存，把 read 操作得到的变量放入工作内存的变量副本中</li>
<li>use - 作用工作内存，把变量传给执行引擎</li>
<li>assign - 作用工作内存，将工作引擎计算结果赋值给变量</li>
<li>store - 作用工作内存，将工作内存变量值传给主内存</li>
<li>write - 作用主内存，把 store 操作传过来的变量放入主内存</li>
</ul>
<p>JMM 还对这八种操作做了一些限制，比如 store 和 write 必须顺序执行，不允许一个线程丢弃它最近的 assign 操作等，这些细节这里就不深究了，感觉是很理论的东西，以后真的用到了，再回头看啊。</p>
<h3 id="12-3-3-对于-volatile-型变量的特殊规则"><a href="#12-3-3-对于-volatile-型变量的特殊规则" class="headerlink" title="12.3.3 对于 volatile 型变量的特殊规则"></a>12.3.3 对于 volatile 型变量的特殊规则</h3><p>volatile 是 JVM 提供的最轻量级的同步机制，JMM 专门为他定义了一些特殊规则。当一个变量定义为 volatile 后，它具备两个特性：</p>
<ol>
<li>保证变量对所有线程的可见性，当一条线程修改了这个变量的值，新值对于其他线程立即可知</li>
<li>禁止指令重排序优化 - PS: java 1.5 之前这个关键字有问题，并不能保证可见性</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实验 #1 volatile 虽然是线程可见的，但是多线程同时写操作时依然线程不安全</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 声明一个 volatile 的 int 变量，给初始值 0，起 20 个线程，每个线程都对变量做 10000 次加 1 操作，统计最终计算结果。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 结论：虽然 volatile 保证了变量的线程可见性，但是由于 race++ 是非原子性的。具体情况可能如下：</span></span><br><span class="line"><span class="comment">* 线程A：进行累加操作，取得计算前的值 100，并进行累加操作</span></span><br><span class="line"><span class="comment">* 线程B：取得累加前的值 100 进行操作</span></span><br><span class="line"><span class="comment">* 线程A：完成操作 101 并赋值给主内存</span></span><br><span class="line"><span class="comment">* 线程B：完成操作 101 并赋值给主内存</span></span><br><span class="line"><span class="comment">* 所以计算结果总是小于理论值 20 0000</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> race = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                    race++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 这个实验用 Idea 会失败，Idea 在起线程的时候会通过守护进程的方式，所以 activeCount 一直为 2, 死循环。使用 Eclipse 则能正常工作。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(race);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 34490</span></span><br></pre></td></tr></table></figure>

<p>volatile 只保证可见性，在不符合以下两条规则的运算场景中，还是需要通过加锁保证原子性：</p>
<ul>
<li>运算结果并不依赖变量的当前值，或者能够保证只有单一的线程修改变量值</li>
<li>变量不需要与其他的状态变量共同参与不变约束</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实验 #2-1</span></span><br><span class="line"><span class="comment">* 禁止指令重排序优化为代码。在没有添加 volatile 修饰的时候，由于指令重排序优化，initialized = true 可能被提前执行，导致线程 B 执行异常</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">Map configOptions;</span><br><span class="line"><span class="keyword">char</span>[] configText;</span><br><span class="line"><span class="comment">// 此变量必须定义为 volatile</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> initialized = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设以下代码在线程 A 中进行</span></span><br><span class="line"><span class="comment">// 模拟读取配置星系，当读取完成后</span></span><br><span class="line"><span class="comment">// 将 initialized 设置为 true，同志其他线程配置可用</span></span><br><span class="line">configOptions = <span class="keyword">new</span> HashMap();</span><br><span class="line">configText = readConfigFile(fileName);</span><br><span class="line">processConfigOptions(configText, configOptions);</span><br><span class="line">initialized = <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设以下代码在线程 B 中进行</span></span><br><span class="line"><span class="comment">// 等待 initialized 为 true，代表 A 已完成初始化</span></span><br><span class="line"><span class="keyword">while</span>(!initialized) &#123;</span><br><span class="line">    sleep();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用线程 A 中初始化好的配置信息</span></span><br><span class="line">doSomethingWithConfig();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实验 #2-2</span></span><br><span class="line"><span class="comment">* DCL 双锁检测</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            syncronized(Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本章最后还介绍了 volatile 底层实现和 JMM 中定义的规则，暂时就不深入了。</p>
<h3 id="12-3-4-针对-long-和-double-型变量的特殊规则"><a href="#12-3-4-针对-long-和-double-型变量的特殊规则" class="headerlink" title="12.3.4 针对 long 和 double 型变量的特殊规则"></a>12.3.4 针对 long 和 double 型变量的特殊规则</h3><p>虚拟机允许将没有被 volatile 修饰的 64 位数据的读写操作分为两次 32 位的操作进行，即不保证 64 位数据类型的 load, store, read, write 的原子性。这就是所谓的 ‘long 和 double 的非原子性协定’， 目前主流商用 64 位虚拟机并不会出现非原子访问。</p>
<h3 id="12-3-5-原子性，可见性与有序性"><a href="#12-3-5-原子性，可见性与有序性" class="headerlink" title="12.3.5 原子性，可见性与有序性"></a>12.3.5 原子性，可见性与有序性</h3><p><strong>原子性</strong>：JMM 直接保证 read, load, assign, use, store 和 write 操作的原子性，对于一个更大范围的原子性保证，JMM 提供了 lock 和 unlock 这两个操作，反应到字节码就是 monitorenter/monitorexit，Java 代码层面就是 synchronized 关键字了</p>
<p><strong>可见性</strong>：当一个线程修改了共享变量值时，其他线程能够立即得知这个修改。对于 volatile 类型的数据，JMM 通过修改后立即同步回主内存，在变量读取前刷新变量值以保证可见性，普通变量不是立即执行的。</p>
<p>除了 volatile 外，synchronized 和 final 也能实现可见性。synchronized 通过规则：在 unlock 之前必须把此变量同步回主内存中(执行 store，write)来达到目的。final 的可见性指：被 final 修饰的字段在构造器中一旦被初始化完成，并且构造器没有吧 this 引用传递出去，那么其他线程就能看到 final 字段的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* i， j 都具备可见性，不许同步就可以被其他线程访问</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 后续省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 可也以在构造函数中初始化</span></span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 后续省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>有序性</strong>：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有操作都是无序的。volatile 和 synchronized 关键字可用于保证线程操作之间的有序性，volatile 本省包含禁止指令重排的语义，而 synchronized 则是由 ‘一个变量在同一时刻只允许一条线程对其进行 lock 操作’ 的这条规则决定。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>JMM</tag>
        <tag>内存模型</tag>
        <tag>concurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 中 C 语言风格的参数声明</title>
    <url>/hexo/2020/08/13/Java-C-Style-Declaration/</url>
    <content><![CDATA[<p>最近在调查一个 build issue 的时候发现有一段函数声明大致如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ParameterTest parameterTest = <span class="keyword">new</span> ParameterTest();</span><br><span class="line">        parameterTest.test(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;Jack&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String list[])</span> </span>&#123;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是就感觉很好奇，<code>test(String list[])</code> 这样的声明竟然能通过编译检测。查了下资料，这中做法是合法的，是 C 语言中数组的声明方式，大概是早期为了让 C 程序员能更好的迁移过来做的兼容把，表达的语意和 <code>test(String[] list)</code> 是完全一样的。</p>
<p>果然一个老项目里面什么情况都能遇到 ╮(￣▽￣””)╭</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 通过 ClassLoader 获取 resources</title>
    <url>/hexo/2020/11/06/Java-ClassLoader-getResources/</url>
    <content><![CDATA[<p>今天突然发现了一个 class loader 的新用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Enumeration&lt;URL&gt; urls = Thread.currentThread().getContextClassLoader().getResources(<span class="string">&quot;my.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>getResources</code> 竟然连 jar 包中的资源文件也会加载，以前一只以为只会加载当前项目的资源的，孤陋寡闻了，哈哈哈哈 ε-(´∀｀; )</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>Java HashMap things</title>
    <url>/hexo/2021/03/09/Java-HashMap-things/</url>
    <content><![CDATA[<p>今天再看一个 defect 的时候涉及到 HashMap 存储的问题，回头想一下发现自己只对 HashMap 以 key 的 Hash 作为依存储依据这点比较清楚外，其他的印象很模糊，写这篇文章记录一下。想要了解的问题如下：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> HashMap 再存储时是否只用 key 的 hash 做依据，和 value 有关系吗 - 只和 key 有关系，只用 key 的 hashCode 做 hash 后的结果作为判断依据</li>
<li><input checked="" disabled="" type="checkbox"> HashMap 底层使用什么数据结构存储的 - array + list/tree(红黑树)</li>
<li><input checked="" disabled="" type="checkbox"> HashMap 的类继承关系</li>
</ul>
<p>以后对 HashMap 的知识点都可以考虑在这篇中做扩展，做成一个总集篇</p>
<p>有趣的知识点：</p>
<ul>
<li>为什么因子选在 0.75? - 在头部注释中给出了解释，根据统计学的结果，hash 冲突符合泊松分布，在 7-8 之间时冲突概率最低</li>
</ul>
<h2 id="HashMap-图示"><a href="#HashMap-图示" class="headerlink" title="HashMap 图示"></a>HashMap 图示</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"> +-------------------------------------------+ </span><br><span class="line"> |      |      |       |       |             | </span><br><span class="line"> | Node | Node | Tree  | Node  | ...         | </span><br><span class="line"> |      |      |       |       |             | </span><br><span class="line"> |      |      |       |       |             | </span><br><span class="line"> |------|------|       |------ |             | </span><br><span class="line"> | next | next |       | next  |             | </span><br><span class="line"> +------|------|-------|-------|-------------+ </span><br><span class="line">    .                                          </span><br><span class="line">    .                                          </span><br><span class="line">    .                                          </span><br><span class="line">+------+                                       </span><br><span class="line">| Node |                                       </span><br><span class="line">|      |                                       </span><br><span class="line">|      |                                       </span><br><span class="line">|----- |                                       </span><br><span class="line">| next |                                       </span><br><span class="line">+------+                                       </span><br></pre></td></tr></table></figure>

<h2 id="HashMap-的类继承关系"><a href="#HashMap-的类继承关系" class="headerlink" title="HashMap 的类继承关系"></a>HashMap 的类继承关系</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  I               I                                                                                                                               </span><br><span class="line"> +--------+      +----------------------------+                                                                                                   </span><br><span class="line"> |  Map   |      | Map/Cloneable/Serializable |                                                                                                   </span><br><span class="line"> +--------+      +----------------------------+                                                                                                   </span><br><span class="line">      ^                    ^                                                                                                                      </span><br><span class="line">      |                    |                                                                                                                      </span><br><span class="line"> C    |                    |                                                                                                                      </span><br><span class="line">+-------------+            |                                                                                                                      </span><br><span class="line">| AbstractMap |            |                                                                                                                      </span><br><span class="line">+-------------+            |                                                                                                                      </span><br><span class="line">      ^                    |                                                                                                                      </span><br><span class="line">      |                    |                                                                                                                      </span><br><span class="line">      |                    |                                                                                                                      </span><br><span class="line">      |                    |                                                                                                                      </span><br><span class="line">      |                    |                                                                                                                      </span><br><span class="line">   +-------------------------------+                                                                                                              </span><br><span class="line">   |           HashMap             |                                                                                                              </span><br><span class="line">   |                               |                                                                                                              </span><br><span class="line">   +-------------------------------+ </span><br></pre></td></tr></table></figure>

<p>JDK8 中对 HashMap 的实现做了改动，原先是 Array + link list, 时间复杂度 O(1)+O(n) 当哈希冲突严重时，性能就取决于后者了。新的实现采用 Array + list/tree, 当 list 长度大于 8 时就会将 list 转化为红黑树，即 O(1)+O(logn) 比原先会有提升</p>
<h2 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a>基本数据结构</h2><p>Map.Entry: 定义了基本 get/set 方法的接口</p>
<p>HashMap.Node: 单项可延伸的链表结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line"><span class="keyword">final</span> K key;</span><br><span class="line">V value;</span><br><span class="line">Node&lt;K,V&gt; next;</span><br></pre></td></tr></table></figure>

<p>LinkedHashMap.Entry: 增加了 before，after 属性，但是没有调用，好奇怪</p>
<p>HashMap.TreeNode: 红黑树实现，extends LinkedHashMap.Entry, 但是在我看来直接继承 HashMap.Node 不是更好？</p>
<h2 id="put-方法实现"><a href="#put-方法实现" class="headerlink" title="put 方法实现"></a>put 方法实现</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">               +----------------+                             </span><br><span class="line">               |   Start        |                             </span><br><span class="line">               | Give node info |                             </span><br><span class="line">               +----------------+                             </span><br><span class="line">                       |                                      </span><br><span class="line">                       |                                      </span><br><span class="line">                       v                                      </span><br><span class="line">                 +-----------+                                </span><br><span class="line">                 |If Conflict|                                </span><br><span class="line">                 +-----------+                                </span><br><span class="line">             No   /         \   Yes                           </span><br><span class="line">                 /           \                                </span><br><span class="line">                v             v                               </span><br><span class="line">+------------------+      +------------------+                </span><br><span class="line">|  Creae new node  |      | Check key &amp; node |                </span><br><span class="line">+------------------+      +------------------+                </span><br><span class="line"> |                            /      |      \                 </span><br><span class="line"> |                           /       |       \                </span><br><span class="line"> |                          /        |        \               </span><br><span class="line"> |                         /         |         \              </span><br><span class="line"> |                        /          |          \             </span><br><span class="line"> |                       v           v           v            </span><br><span class="line"> |       +---------------+ +------------------+ +-----------+ </span><br><span class="line"> |       | key same with | |Node is tree type | |List type  | </span><br><span class="line"> |       | first element | +------------------+ +-----------+ </span><br><span class="line"> |       +---------------+    |                  /            </span><br><span class="line"> |                |           |                 /             </span><br><span class="line"> |                |           |                /              </span><br><span class="line"> |                v           v               v               </span><br><span class="line"> |           +-----------------------------------+            </span><br><span class="line"> |--------&gt;  |          Check if resize          |            </span><br><span class="line">             +-----------------------------------+            </span><br><span class="line">                         |                                    </span><br><span class="line">                         |                                    </span><br><span class="line">                         v                                    </span><br><span class="line">                     +--------+                               </span><br><span class="line">                     |  End   |                               </span><br><span class="line">                     +--------+                               </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) <span class="comment">// 如果 tab 是空的，给一个初始 size</span></span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>) <span class="comment">// 如果 bucket 位置没有值，直接填充一个</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 如果 bucket 位置上有值，则再看</span></span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) <span class="comment">// 如果 key 已经存在，将值放入 e 在后面做 value 替换</span></span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode) <span class="comment">// 如果是 tree, 则在 tree 后面添加节点</span></span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">// 处理 linked list 的情况</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123; <span class="comment">// 如果是末尾节点，直接 append</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// 如果达到转化阀值，将链表转化为树</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) <span class="comment">// 如果 key 重复，跳出循环</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e; <span class="comment">// 给 p 赋值，继续循环</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// 对已经存在的 node 做值替换</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="get-方法实现"><a href="#get-方法实现" class="headerlink" title="get 方法实现"></a>get 方法实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Implements Map.get and related methods.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the node, or null if none</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">   Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">   <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp; (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (first.hash == hash &amp;&amp; ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) <span class="comment">// always check first node</span></span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">      <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode) <span class="comment">// 如果是 tree 类型，调用 tree 的 get 方法</span></span><br><span class="line">               <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123; <span class="comment">// 否则遍历链表</span></span><br><span class="line">               <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                  ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                  <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h2><p>可以参考这篇内容: <a href="https://segmentfault.com/a/1190000015812438">https://segmentfault.com/a/1190000015812438</a> , 现在状态不太好，看不进去。。。</p>
<h2 id="Idea-调试优化"><a href="#Idea-调试优化" class="headerlink" title="Idea 调试优化"></a>Idea 调试优化</h2><p>当调试 HashMap 时，默认设置下 Node 只显示 K，V 值，对其他细节，比如静态变量，Node 的 next 都是忽略的，可以通过以下方式查看</p>
<p><strong>临时方案</strong></p>
<p>在底部 debug 界面，选中需要查看的 entry, 右键 View as -&gt; Object 即可，但是下次调试是会重制，需要再次设置</p>
<p><strong>永久方案</strong></p>
<p>Debug 是选中 tab 下的元素，右键 View as -&gt; Create… -&gt; Apply render to object of type 中输入 <code>java.util.HashMap$Node</code> 再 Apply 以下就行了。我这边是自动填充好了的</p>
<p><strong>查看静态变量</strong></p>
<p>Customize Data Views -&gt; 勾选 static fields, static final fields</p>
<p>PS: 我本地设置了貌似没什么效果 （；￣ェ￣）</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.devwu.com/2018/06/07/IntelliJ%20IDEA%20%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%97%B6%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E5%8F%98%E9%87%8F/">Debug 设置</a></li>
<li><a href="https://yikun.github.io/2015/04/01/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/">HashMap 原理</a></li>
<li><a href="http://openjdk.java.net/jeps/180">官方针对 7-8 HashMap 实现修改的说明</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>collection</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>Class 这个类中的方法使用记录</title>
    <url>/hexo/2020/12/24/Java-class-methods-note/</url>
    <content><![CDATA[<p>最近在使用 Class 这个类的时候遇到一些问题，顺便记录一下这个类中方法的使用案例</p>
<h2 id="isAssignFrom"><a href="#isAssignFrom" class="headerlink" title="isAssignFrom"></a>isAssignFrom</h2><p>简单来说就是测试传入的 Class 是不是前面的 Class 本身或子类, 同时适用于接口实现的情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Number isAssignableFrom Number.class: &quot;</span> + Number.class.isAssignableFrom(Number.class));</span><br><span class="line">System.out.println(<span class="string">&quot;Number isAssignableFrom Integer.class: &quot;</span> + Number.class.isAssignableFrom(Integer.class));</span><br><span class="line">System.out.println(<span class="string">&quot;Integer.class isAssignableFrom Number: &quot;</span> + Integer.class.isAssignableFrom(Number.class));</span><br><span class="line">System.out.println(<span class="string">&quot;Collection.class isAssignableFrom ArrayList.class: &quot;</span> + Collection.class.isAssignableFrom(ArrayList.class));</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Number isAssignableFrom Number.class: true</span></span><br><span class="line"><span class="comment">// Number isAssignableFrom Integer.class: true</span></span><br><span class="line"><span class="comment">// Integer.class isAssignableFrom Number: false</span></span><br><span class="line"><span class="comment">// Collection.class isAssignableFrom ArrayList.class: true</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 代码块记录</title>
    <url>/hexo/2020/08/10/Java-code-snippet/</url>
    <content><![CDATA[<p>记录平时遇到的一些精巧的小代码段</p>
<h2 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h2><p>摘自 On Java 8 泛型章节。元组的定义：用户只能取值而不能设置值，所以这里没有使用 getter/setter 的封装形式，而是使用 public + final 关键字实现了该功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tuple2</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> A a1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> B a2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tuple2</span><span class="params">(A a, B b)</span> </span>&#123; a1 = a; a2 = b; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">rep</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> a1 + <span class="string">&quot;, &quot;</span> + a2; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + rep() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><h3 id="实现-interface"><a href="#实现-interface" class="headerlink" title="实现 interface"></a>实现 interface</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyPrint print;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print = System.out::println;</span><br><span class="line">        print.print(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyPrint</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: jack</span></span><br></pre></td></tr></table></figure>

<h3 id="判断-collection-中是否包含某元素"><a href="#判断-collection-中是否包含某元素" class="headerlink" title="判断 collection 中是否包含某元素"></a>判断 collection 中是否包含某元素</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).stream.anyMatch(sub -&gt; sub &gt; <span class="number">3</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda 使用时遇到的一些奇奇怪怪的问题</title>
    <url>/hexo/2021/03/10/Java-lambda-confusing-opints/</url>
    <content><![CDATA[<ul>
<li><code>Predicate pre = Boolean::valueOf;</code> compile failed, 提示说: <code>Cannot resolve method &#39;valueOf&#39;</code> 改为 <code>Predicate&lt;Boolean&gt; pre = Boolean::valueOf;</code> works</li>
<li><code>Predicate&lt;Boolean&gt; pre = Boolean::valueOf; pre.test(null);</code> 会抛出 NPE</li>
<li><code>Predicate&lt;Boolean&gt; pre2 = Objects::isNull; pre2.test(null);</code> 类似的调用 Objects 的 isNull 等方法却不会跑错</li>
</ul>
<p>貌似无解，根据这个 <a href="https://stackoverflow.com/questions/29143803/java-lambdas-how-it-works-in-jvm-is-it-oop">StackOverflow lambda</a> 相关的问题来看，JVM 解析 lambda 的时候，直接将我们写的表达式编译成字节码，然后 JVM 通过 <code>InvokeDynamic</code> 指令就执行了，如果是这样的还，我是我发看到他的中间状态的，上面的那些问题看来只能通过经验来解决了 （；￣ェ￣）</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 函数式编程</title>
    <url>/hexo/2020/05/28/Java-lambda/</url>
    <content><![CDATA[<p>Java 8 函数式编程读书笔记</p>
<h2 id="第一章-简介"><a href="#第一章-简介" class="headerlink" title="第一章 简介"></a>第一章 简介</h2><ul>
<li>Java 8 增加 Lambda 表达式来支持对大型数据的并发操作 - 核实一下</li>
<li>面向对象式对数据进行抽象，函数式编程时对行为进行抽象</li>
</ul>
<h2 id="第二章-Lambda-表达式"><a href="#第二章-Lambda-表达式" class="headerlink" title="第二章 Lambda 表达式"></a>第二章 Lambda 表达式</h2><p>以 Swing 为例，传统做法中监听事件需要如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">button.addActionListener(</span><br><span class="line">    <span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent event)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;button clicked&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>当我们使用 lambda 表达式时可以简写为 <code>button.addActionListener(event -&gt; System.out.println(&quot;button clicked&quot;));</code></p>
<p>Lambda 表达式中的类型都是由编译器推断出来的，但你也可以显示的声明参数类型。</p>
<p>Lambda 表达式引用的是值，而不是变量。</p>
<table>
<thead>
<tr>
<th>接口</th>
<th>参数</th>
<th>返回类型</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>Predicate&lt;T&gt;</td>
<td>T</td>
<td>boolean</td>
<td>唱片是否发行</td>
</tr>
<tr>
<td>Consumer&lt;T&gt;</td>
<td>T</td>
<td>void</td>
<td>输出一个值</td>
</tr>
<tr>
<td>Function&lt;T, R&gt;</td>
<td>T</td>
<td>R</td>
<td>获取Artist 对象的名字</td>
</tr>
<tr>
<td>Supplier&lt;T&gt;</td>
<td>None</td>
<td>T</td>
<td>工厂方法</td>
</tr>
<tr>
<td>UnaryOperator&lt;T&gt;</td>
<td>T</td>
<td>T</td>
<td>逻辑非(!)</td>
</tr>
<tr>
<td>BinaryOperator&lt;T&gt;</td>
<td>(T, T)</td>
<td>T</td>
<td>求连个数的乘积(*)</td>
</tr>
</tbody></table>
<p>在复杂的情况下需要指定泛型类型才能使编译通过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果省略掉 &lt;Long&gt; 编译报错：Operator&#x27;&amp;#x002B;&#x27;cannotbeappliedtojava.lang.Object,java.lang.Object.</span></span><br><span class="line">BinaryOperator&lt;Long&gt; addLongs = (x, y) -&gt; x + y;</span><br></pre></td></tr></table></figure>

<p>Predicate 可用于检测对象是否符合要求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测字符串是否以 J 开头</span></span><br><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Jerry&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">List&lt;String&gt; ret = names.stream().filter(name -&gt; name.charAt(<span class="number">0</span>) == <span class="string">&#x27;J&#x27;</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter 中的部分就是 Predicate 表达式，也可以分开定义写成如下形式</span></span><br><span class="line">Predicate&lt;String&gt; filterTom = input -&gt; input.equals(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">ret = names.stream().filter(filterTom).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义 predicate 表达式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicateSamples</span> </span>&#123;</span><br><span class="line">    Predicate&lt;String&gt; checkLength = input -&gt; input.length() &gt; <span class="number">5</span>;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_checkLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(checkLength.test(<span class="string">&quot;1234&quot;</span>));</span><br><span class="line">        <span class="comment">// true</span></span><br><span class="line">        System.out.println(checkLength.test(<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义方法生成 predicate 作为返回值</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Predicate&lt;String&gt; <span class="title">generatePredicateExpression</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> test -&gt; prefix.startsWith(test);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_generate_expression</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// true</span></span><br><span class="line">    System.out.println(generatePredicateExpression(<span class="string">&quot;jack123&quot;</span>).test(<span class="string">&quot;jack&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Consumer 对传入的参数做操作，没有返回值，例如可以用它实现打印，断言等操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ret.forEach(System.out::print);</span><br><span class="line">names.forEach(name -&gt; Assert.assertEquals(name, <span class="string">&quot;Jerry&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>Function 对传入的对象操作并放回结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; ret = names.stream().map(String::toUpperCase).collect(Collectors.toList());</span><br><span class="line">ret.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>Supplier 可以帮你生产数据, 但是只能使用应用于无参的 constructor，不支持传入参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Supplier&lt;User&gt; userSupplier = User::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure>

<h2 id="第三章-流"><a href="#第三章-流" class="headerlink" title="第三章 流"></a>第三章 流</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for 处理集合模板</span></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Artist artist : allArtists) &#123;</span><br><span class="line">    <span class="keyword">if</span> (artist.isFrom(<span class="string">&quot;London&quot;</span>)) &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">外部迭代方式： 通过拿到 iterator， 然后通过 hasNext(), next() 方法完成迭代</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">Iterator&lt;Artist&gt; iterator = allArtists.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Artistartist = iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (artist.isFrom(<span class="string">&quot;London&quot;</span>)) &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部迭代：通过 Steam 对集合类进行复杂操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// filter：只保留通过某项测试的对象，整个过程被分为两步，过滤和计算</span></span><br><span class="line"><span class="keyword">long</span> count = allArtists.stream().filter(artist -&gt; artist.isFrom(<span class="string">&quot;London&quot;</span>)).count();</span><br></pre></td></tr></table></figure>

<p>filter 中的表达式是惰性求值方法，count 是及早求职方法，惰性求值并不会真正执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此实例中并不会在控制台打印文字</span></span><br><span class="line">allArtists.stream().filter(artist -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;print artist&#x27;s location: &quot;</span> + artist.location);</span><br><span class="line">            <span class="keyword">return</span> artist.isFrom(<span class="string">&quot;London&quot;</span>);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p>如果返回值是 Stream 则为 惰性求值；如果返回值是另一个值或为空则是 及早求值。使用这些操作的理想方式就是形成一个惰性求值的链，最后用一个及早求值的操作返回想要的结果，这正是它的合理之处。</p>
<h3 id="常用的流操作"><a href="#常用的流操作" class="headerlink" title="常用的流操作"></a>常用的流操作</h3><table>
<thead>
<tr>
<th>操作</th>
<th>用途</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>collect</td>
<td>生成集合</td>
<td>Stream.of(“a”, “b”, “c”).collect(Collectors.toList());</td>
</tr>
<tr>
<td>map</td>
<td>类型转换</td>
<td>Stream.of(“a”).map(string -&gt; string.toUpperCase()).collect(Collectors.toList());</td>
</tr>
<tr>
<td>filter</td>
<td>检查过滤</td>
<td>Stream.of(“a”, “12b”).filter(val -&gt; isDigit(val.charAt(0))).(Collectors.toList());</td>
</tr>
<tr>
<td>flatMap</td>
<td>拼接多个 Stream</td>
<td>Stream.of(asList(1, 2), asList(3, 4)).flatMap(numbers -&gt; numbers.stream()).collect(toList());</td>
</tr>
<tr>
<td>max/min</td>
<td>最值</td>
<td>tracks.stream().min(Comparator.comparing(track -&gt; track.getLength())).get();</td>
</tr>
<tr>
<td>reduce</td>
<td>提供计算功能</td>
<td>Stream.of(1,2,3).reduce(0, (acc, ele) - &gt; acc + ele);</td>
</tr>
</tbody></table>
<h2 id="第四章-类库"><a href="#第四章-类库" class="headerlink" title="第四章 类库"></a>第四章 类库</h2><p>日志优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger = <span class="keyword">new</span> Logger();</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">    logger.debug(<span class="string">&quot;Look at this:&quot;</span> + expensiveOperation());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 Lambda 优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger = <span class="keyword">new</span> Logger();</span><br><span class="line">logger.debug(() -&gt; <span class="string">&quot;Look at this:&quot;</span> + expensiveOperation());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Logger 类中添加方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(Supplier&lt;String&gt; message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isDebugEnabled()) &#123;</span><br><span class="line">        debug(message.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Supplier -&gt; get(), Predicate -&gt; test, Function -&gt; apply.</p>
<p>如果可以的话，在流中尽量使用对基本类型的操作，而不是封装类型。 mapToInt 之类的操作还提供了很多简便操作得到最值和平均值。</p>
<p><strong>Optional</strong>是一个新设计的数据类新来替换 null 值。 使用它有两个目的：</p>
<ul>
<li>Optional 对象鼓励程序员适时检测变量是否为空，以避免代码缺陷</li>
<li>将一个类的 API 中可能为空的值文档化，这比阅读实现代码要简单的很多</li>
</ul>
<h2 id="第五章-高级集合类和收集器"><a href="#第五章-高级集合类和收集器" class="headerlink" title="第五章 高级集合类和收集器"></a>第五章 高级集合类和收集器</h2><p><code>方法引用</code>语法， artist -&gt; artist.getName() 等价于 Artist::getName, 标准语法为 Classname::methodName. 由此，新建 Artist 对象的代码可以由 （name, nationality） -&gt; new Artist(name, nationality) 简化为 Artist::new, 类似的可以通过 String[]::new 创建新的数组。</p>
<p><code>stream.collect()</code> 可以生成你想要的集合形式。例如：<code>stream.collect(toCollection(TreeSet::new));</code></p>
<p><code>partitioningBy</code> 收集器可用于分流, 与之类似的还有 <code>groupingBy</code> 关键字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;Boolean, List&lt;Artist&gt;&gt; bandsAndSolo(Stream&lt;Artist&gt; artists) &#123;</span><br><span class="line">    <span class="keyword">return</span> artist.collect(partitioningBy(artist -&gt; artist.isSolo())); <span class="comment">// artist -&gt; artist.isSolo() 可替换为 Artist::isSolo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>字符串流操作示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String ret = artists.steam().map(Artist::getName).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>查询并加入 map 的简化操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Artist <span class="title">getArtist</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    Artist artist = artistCache.get(name);</span><br><span class="line">    <span class="keyword">if</span> (artist == <span class="keyword">null</span>) &#123;</span><br><span class="line">        artist = readArtistFromDB(name);</span><br><span class="line">        artistCache.put(name, artist);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> artist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// after</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Artist <span class="title">getArtist</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> artistCache.computeIfAbsent(name, <span class="keyword">this</span>::readArtistFromDB);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 forEach 简化 map 的统计操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line">Map&lt;Artist, Integer&gt; countOfAlbums = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Artist, List&lt;Album&gt;&gt; entry : albumsByArtist.entrySet()) &#123;</span><br><span class="line">    Artist artist = entry.getKey();</span><br><span class="line">    List&lt;Album&gt; albums = entry.getValue();</span><br><span class="line">    countOfAlbums.put(artist, albums.size());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// after</span></span><br><span class="line">Map&lt;Artist, Integer&gt; countOfAlbums = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">albumsByArtist.forEach((artist, albums) -&gt; &#123;</span><br><span class="line">    countOfAlbums.put(artist, albums.size());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="第六章-数据并行化"><a href="#第六章-数据并行化" class="headerlink" title="第六章 数据并行化"></a>第六章 数据并行化</h2><p>并行化：同一任务拆分，多核执行<br>并发化：单核多任务</p>
<p>实现上只需要在调用方法时将 <code>.stream()</code> 改为 <code>.parallelStream()</code> 就行了。但是并不是并行了就快，取决于处理量等其他因素。</p>
<p>影响因素：数据大小， 源数据结构， 装箱， 核的数量， 单元处理开销， 底层还是使用了 fork/join 的模式。</p>
<p>数据结构并行性能：ArrayList, 数组， IntStream.range &gt; HashSet, Treeset &gt; LinkedList, Streams.iterate, BufferedReader.lines</p>
<p>为 array 赋初值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">Arrays.setAll(a, i-&gt;i);</span><br><span class="line"><span class="comment">// 输出：0，1，3.。。99</span></span><br></pre></td></tr></table></figure>

<h2 id="第七章-测试，调试和重构"><a href="#第七章-测试，调试和重构" class="headerlink" title="第七章 测试，调试和重构"></a>第七章 测试，调试和重构</h2><p>ThreadLocal 优化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line">ThreadLocal&lt;album&gt; thisAlbum = <span class="keyword">new</span> ThreadLocal&lt;Album&gt; () &#123;</span><br><span class="line">    <span class="meta">@Overrride</span> <span class="function"><span class="keyword">protected</span> Album <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> database.lookupCurrentAlbum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// after</span></span><br><span class="line">ThreadLocal&lt;Album&gt; thisAlbum = ThreadLocal.withInitial(() -&gt; database.lookupCurrentAlbum());</span><br></pre></td></tr></table></figure>

<p>可以使用 peek 进行流的调试</p>
<h2 id="第八章-设计和架构的原则"><a href="#第八章-设计和架构的原则" class="headerlink" title="第八章 设计和架构的原则"></a>第八章 设计和架构的原则</h2><p>列举了 Lambda 和 设计模式， DSL 的结合的例子，和我看这本书的初衷有点远了，先跳过。</p>
<h2 id="第九章-使用-Lambda-表达式编写并发程序"><a href="#第九章-使用-Lambda-表达式编写并发程序" class="headerlink" title="第九章 使用 Lambda 表达式编写并发程序"></a>第九章 使用 Lambda 表达式编写并发程序</h2><p>使用 Vertx 框架结合 Lambda 的知识点，实现一个聊天室，跳过。但是它的这个框架我倒是感觉很有意思，灵感是从 NodeJS 那边来的，支持并发。</p>
<h2 id="工作中遇到的一些例子"><a href="#工作中遇到的一些例子" class="headerlink" title="工作中遇到的一些例子"></a>工作中遇到的一些例子</h2><h3 id="如果集合包含范型信息，在没有指定具体的范型类的时候，调用-lambda-会报编译错误"><a href="#如果集合包含范型信息，在没有指定具体的范型类的时候，调用-lambda-会报编译错误" class="headerlink" title="如果集合包含范型信息，在没有指定具体的范型类的时候，调用 lambda 会报编译错误"></a>如果集合包含范型信息，在没有指定具体的范型类的时候，调用 lambda 会报编译错误</h3><p>当使用注释掉的语句代替现有的语句时就会报编译错误：Non-static method cannot be referenced from a static contex</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Set&lt;MyProp&gt; props = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">  MyProp p1 = <span class="keyword">new</span> MyProp(<span class="number">1</span>);</span><br><span class="line">  MyProp p2 = <span class="keyword">new</span> MyProp(<span class="number">2</span>);</span><br><span class="line">  props.add(p1);</span><br><span class="line">  props.add(p2);</span><br><span class="line">  MyInterface&lt;String&gt; i0 = <span class="keyword">new</span> MyInterface&lt;&gt;(props); <span class="comment">// MyInterface i0 = new MyInterface&lt;&gt;(props);</span></span><br><span class="line">  System.out.println(i0.getList().stream().map(MyProp::getId).collect(Collectors.toList()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Set props;</span><br><span class="line">  MyInterface(Set props) &#123;</span><br><span class="line">    <span class="keyword">this</span>.props = props;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Set&lt;MyProp&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123; <span class="comment">// public Set getList() </span></span><br><span class="line">    <span class="keyword">return</span> props;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProp</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyProp</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找了一下网上的解释，虽然有重现和解决方案，但是对它的底层原因并没有很清楚的解释，以后如果有机会再深入了解 lambda 的语法的话，可以再看看</p>
<p>PS: 个人感觉应该是在没有指定 type 的时候，类型判断有问题</p>
<h3 id="从-List-中抽取属性组成新的集合"><a href="#从-List-中抽取属性组成新的集合" class="headerlink" title="从 List 中抽取属性组成新的集合"></a>从 List 中抽取属性组成新的集合</h3><p>List of BeanProperty, BeanProperty 有 <code>getName()</code> 方法，如何通过 lambda 函数抽取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; ret = list.stream().map(BeanProperty::getName).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="Map-gt-Map-转化"><a href="#Map-gt-Map-转化" class="headerlink" title="Map -&gt; Map 转化"></a>Map -&gt; Map 转化</h3><p>Map&lt;String, List&lt;Obj&gt;&gt; 对 list 中的值进行修改，案例简化为 Map&lt;String, List&lt;String&gt;&gt; 将 list 中的 String 转化为大写</p>
<p>第一步先熟悉 list -&gt; list 转化方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; test = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">List&lt;String&gt; answer = test.stream().map(String::toUpperCase).collect(Collectors.toList());</span><br><span class="line">System.out.println(answer);</span><br><span class="line"><span class="comment">//output: [A, C]</span></span><br></pre></td></tr></table></figure>

<p>熟悉 map 转化方式并结合 list 转化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, List&lt;String&gt;&gt; origin = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">origin.put(<span class="string">&quot;a&quot;</span>, Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;n&quot;</span>));</span><br><span class="line">origin.put(<span class="string">&quot;b&quot;</span>, Arrays.asList(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">origin.put(<span class="string">&quot;c&quot;</span>, Arrays.asList(<span class="string">&quot;c&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(origin);</span><br><span class="line"></span><br><span class="line">Map&lt;String, List&lt;String&gt;&gt; after = origin.entrySet().stream().</span><br><span class="line">        collect(Collectors.toMap(</span><br><span class="line">                Map.Entry::getKey, (entry) -&gt; entry.getValue().stream().map(String::toUpperCase).collect(Collectors.toList()))</span><br><span class="line">        );</span><br><span class="line">System.out.println(after);</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// &#123;a=[a, n], b=[b], c=[c]&#125;</span></span><br><span class="line"><span class="comment">// &#123;a=[A, N], b=[B], c=[C]&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Collectors-toMap-怎么使用"><a href="#Collectors-toMap-怎么使用" class="headerlink" title="Collectors.toMap() 怎么使用"></a>Collectors.toMap() 怎么使用</h3><p>函数定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K, U&gt;</span><br><span class="line">    Collector&lt;T, ?, Map&lt;K,U&gt;&gt; toMap(Function&lt;? <span class="keyword">super</span> T, ? extends K&gt; keyMapper,</span><br><span class="line">                                    Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; valueMapper) &#123;</span><br><span class="line">        <span class="keyword">return</span> toMap(keyMapper, valueMapper, throwingMerger(), HashMap::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>简单理解就是两个参数分别是两个计算式，得到 key 和 value 的对应的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Class&lt;? extends Number&gt;&gt; list = Arrays.asList(Integer.class, Double.class, Long.class);</span><br><span class="line">Map map = list.stream().collect(Collectors.toMap(Function.identity(), x-&gt;<span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<p><code>Function.identity()</code> 等价于 x -&gt; x</p>
<p><code>x -&gt; 0</code> 等价于设置常量</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>lambda</tag>
        <tag>函数式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 中重写 equals 和 hashcode 的问题</title>
    <url>/hexo/2020/12/01/Java-methods-equals-and-hashcode/</url>
    <content><![CDATA[<p>刚好最近遇到需要重写 equals 和 hashcode 的情况，总结记录一下，加深印象。</p>
<h2 id="官方对-hashCode-方法的描述"><a href="#官方对-hashCode-方法的描述" class="headerlink" title="官方对 hashCode 方法的描述"></a>官方对 hashCode 方法的描述</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by HashMap.</span><br><span class="line"></span><br><span class="line">The general contract of hashCode is:</span><br><span class="line"></span><br><span class="line">1. Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application.</span><br><span class="line">2. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.</span><br><span class="line">3. It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.</span><br><span class="line"></span><br><span class="line">As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the JavaTM programming language.)</span><br></pre></td></tr></table></figure>

<p>概括起来就是 equals 相等的两个对象 hashcode 必须相同，反过来，hashcode 相等的像个对象，equals 可以不想等。</p>
<p>hashcode 是需要结合集合类才能体现出来的。试想一下，如果没有 hashcode, 那么我们在一个存了 1000 个对象的 HashSet 中添加一个新的对象就要进行 1000 次的 equals 比较，这样的性能消耗无疑是巨大的。所以 HashXXX 的数据结构引入 hash 算法来简化比较。</p>
<p>hash 的数据结构中是允许存在 hash 值相同的对象的，这种情况下，他会在 hash 的地址位置创建一个链表存储 hash 值相同的对象。</p>
<p>当集合存入一个对象时，他会先根据 hash 值判断是否有重复的元素， 如果 hash 值已经存在，那么他会找到对应的链表然后一次进行对象的 equals 判断重复。好的 hash 算法要尽量减少 hash 冲突来提高检索效率。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>equals</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 操作符优先级</title>
    <url>/hexo/2020/10/22/Java-operator-precedence/</url>
    <content><![CDATA[<p>记录一下工作中遇到的操作符优先级的问题，总体的逻辑是：从左到右依次计算</p>
<p><a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html">Java Operator Precedence</a></p>
<table>
<thead>
<tr>
<th align="center">Operators</th>
<th align="center">Precedence</th>
</tr>
</thead>
<tbody><tr>
<td align="center">postfix</td>
<td align="center">expr++ expr–</td>
</tr>
<tr>
<td align="center">unary</td>
<td align="center">++expr –expr +expr -expr ~ !</td>
</tr>
<tr>
<td align="center">multiplicative</td>
<td align="center">* / %</td>
</tr>
<tr>
<td align="center">additive</td>
<td align="center">+ -</td>
</tr>
<tr>
<td align="center">shift</td>
<td align="center">&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td>
</tr>
<tr>
<td align="center">relational</td>
<td align="center">&lt; &gt; &lt;= &gt;= instanceof</td>
</tr>
<tr>
<td align="center">equality</td>
<td align="center">== !=</td>
</tr>
<tr>
<td align="center">bitwise AND</td>
<td align="center">&amp;</td>
</tr>
<tr>
<td align="center">bitwise exclusive OR</td>
<td align="center">^</td>
</tr>
<tr>
<td align="center">bitwise inclusive OR</td>
<td align="center">|</td>
</tr>
<tr>
<td align="center">logical AND</td>
<td align="center">&amp;&amp;</td>
</tr>
<tr>
<td align="center">logical OR</td>
<td align="center">||</td>
</tr>
<tr>
<td align="center">ternary</td>
<td align="center">? :</td>
</tr>
<tr>
<td align="center">assignment</td>
<td align="center">= += -= *= /= %= &amp;= ^= | = &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</td>
</tr>
</tbody></table>
<h2 id="逻辑与-和-逻辑非"><a href="#逻辑与-和-逻辑非" class="headerlink" title="逻辑与 和 逻辑非"></a>逻辑与 和 逻辑非</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != params &amp;&amp; params.isFeatureExist(FeatureEnum.FEATURE_01) &amp;&amp; !(ElementTypeEnum.ADDRESS.equals(Element.getElementTypeEnum()) || ElementTypeEnum.BUSINESS_ADDRESS.equals(Element.getElementTypeEnum())) &amp;&amp; !ElementTypeEnum.PERSON_GLOBAL_INFO.getElementId().equals(Element.getId()))</span><br></pre></td></tr></table></figure>

<p>从左到右依次判断就完事儿啦。。。感觉上面表格中的 逻辑与 &gt; 逻辑非 的表示还混淆了我的判断（；￣ェ￣）</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>优先级</tag>
      </tags>
  </entry>
  <entry>
    <title>Java random int</title>
    <url>/hexo/2021/04/21/Java-random-int/</url>
    <content><![CDATA[<p>遇到一个问题，在写测试的时候需要产生一串随机数，找了一下解决方案，记录一下</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>需求：</p>
<ol>
<li>字符串以 Test 开头</li>
<li>中间加指定格式的日期</li>
<li>结尾加上前面补0的4位随机整数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String prefix = <span class="string">&quot;Test&quot;</span>;</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat sdfDate = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyMMdd&quot;</span>);</span><br><span class="line">        String mid = sdfDate.format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        String suffix = String.format(<span class="string">&quot;%04d&quot;</span>, <span class="keyword">new</span> Random().nextInt(<span class="number">10000</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(prefix + mid + suffix);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Test2104215709</span></span><br></pre></td></tr></table></figure>

<p>%04d 的含义：</p>
<ul>
<li>0: 前面补0</li>
<li>4: 长度为4</li>
<li>d: 对整形做操作</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>随机数</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 表示一棵树</title>
    <url>/hexo/2020/11/10/Java-tree-related-code/</url>
    <content><![CDATA[<p>最近在看 TraceSonar 的源码的时候，看到生成树相关的代码， 感觉我自己徒手写应该是没戏了，至少他的这个方案是可以 work 的，同时像收集一下网上能找到的生成树的一些优秀代码</p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; parent = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Node&lt;T&gt;&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node&lt;T&gt; <span class="title">addChild</span><span class="params">(Node&lt;T&gt; child)</span> </span>&#123;</span><br><span class="line">        child.setParent(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.children.add(child);</span><br><span class="line">        <span class="keyword">return</span> child;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addChildren</span><span class="params">(List&lt;Node&lt;T&gt;&gt; children)</span> </span>&#123;</span><br><span class="line">        children.forEach(each -&gt; each.setParent(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">this</span>.children.addAll(children);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Node&lt;T&gt;&gt; getChildren() &#123;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(Node&lt;T&gt; parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node&lt;T&gt; <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node&lt;T&gt; <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent.getRoot();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node&lt;String&gt; root = <span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Node&lt;String&gt; node1 = root.addChild(<span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;node 1&quot;</span>));</span><br><span class="line"></span><br><span class="line">    Node&lt;String&gt; node11 = node1.addChild(<span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;node 11&quot;</span>));</span><br><span class="line">    node11.addChild(<span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;node 111&quot;</span>));</span><br><span class="line">    node11.addChild(<span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;node 112&quot;</span>));</span><br><span class="line"></span><br><span class="line">    node1.addChild(<span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;node 12&quot;</span>));</span><br><span class="line"></span><br><span class="line">    Node&lt;String&gt; node2 = root.addChild(<span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;node 2&quot;</span>));</span><br><span class="line"></span><br><span class="line">    node2.addChild(<span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;node 21&quot;</span>));</span><br><span class="line">    node2.addChild(<span class="keyword">new</span> Node&lt;&gt;(<span class="string">&quot;node 22&quot;</span>));</span><br><span class="line"></span><br><span class="line">    printTree(root, <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">printTree</span><span class="params">(Node&lt;T&gt; node, String appender)</span> </span>&#123;</span><br><span class="line">    System.out.println(appender + node.getData());</span><br><span class="line">    node.getChildren().forEach(each -&gt; printTree(each, appender + appender));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// root</span></span><br><span class="line"><span class="comment">//   node 1</span></span><br><span class="line"><span class="comment">//     node 11</span></span><br><span class="line"><span class="comment">//         node 111</span></span><br><span class="line"><span class="comment">//         node 112</span></span><br><span class="line"><span class="comment">//     node 12</span></span><br><span class="line"><span class="comment">//   node 2</span></span><br><span class="line"><span class="comment">//     node 21</span></span><br><span class="line"><span class="comment">//     node 22</span></span><br></pre></td></tr></table></figure>

<p>这种解法，首先把树这种结构解析出来，单独作为一个载体，你可以根据自己的需求填充树中的内容，其次打印的时候用的 lambda 表达式也很简洁，很喜欢这个例子。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.javagists.com/java-tree-data-structure">javagists</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 SAX 解析 XM</title>
    <url>/hexo/2020/11/03/Java-use-SAX-parse-xml/</url>
    <content><![CDATA[<p>简单记录一下 Java 解析 xml 的例子。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>DefaulHandler: 为了简化代码将几个常用的 handler 合并为这个 DefaultHandler</li>
<li>EntityResolver: 提供获取外部文件的方法， Spring 在介些 xml 的时候也定义过这哥方法，可以参考下</li>
<li>DTDHandler: 这个类都没有使用例子，是不是一个很冷门的类啊 （；￣ェ￣） 以后有机会看到再记录把</li>
<li>ContentHandler: 负责处理 xml 节点的逻辑</li>
<li>ErrorHandler: 结合 DTD 处理异常</li>
<li>systemId: 外部资源(多半是DTD)的URI，比如本地文件 <code>file:///usr/share/dtd/somefile.dtd</code> 或者网络某个地址的文件 <code>http://www.w3.org/somefile.dtd</code></li>
<li>publicId: 和 systemId 类似，区别在于<strong>间接性</strong><ul>
<li>publicID 就相当于一个名字，这个名字代表了一个外部资源。比如，我们规定 <code>W3C HTML 4.01</code> 这个字符串对应 <code>http://www.w3.org/somedir/somefile.dtd</code> 这个资源。那么，<code>publicID=&quot;W3C HTML 4.01&quot;</code> 和 <code>systemID=&quot;http://www.w3.org/somedir/somefile.dtd&quot;</code> 是一样的，二者都引用了 <code>http://www.w3.org/somedir/somefile.dtd</code> 作为该文档的外部DTD。</li>
</ul>
</li>
<li>xmlReader.setFeature(url, flag): 用来表示某个特定的验证规则是否打开了</li>
<li>XML schema, 就是我们在 Spring 项目中经常能看到的 <code>.xsd</code> 文件，他是 DTD 的替代品，支持的验证功能更多，格式和 XML 一致</li>
</ul>
<p>基本套路：</p>
<ol>
<li>自定义一个 hander 继承 DefaultHandler, 重写其中的解析逻辑</li>
<li>客户端代码中通过 SAXParserFactory 拿到 parser</li>
<li>parser 中传入要解析的文件和自定义 handler</li>
<li>parse 是 handler 中定义的 bean 被解析</li>
<li>parse 完成后重 handler 中拿到解析结果</li>
</ol>
<p>下面展示的例子都存在 mybatis 的 repo 的</p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul>
<li>add URL here</li>
<li>SAX 是怎么做到事件触发的，光想想找不到思路。。。得看看源码</li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="http://www.saxproject.org/quickstart.html">官方文档</a></li>
<li><a href="https://docstore.mik.ua/orelly/xml/sax2/index.htm">Orelly 书集</a></li>
</ul>
<h2 id="Parse-xml-并生成对应的实体类"><a href="#Parse-xml-并生成对应的实体类" class="headerlink" title="Parse xml 并生成对应的实体类"></a>Parse xml 并生成对应的实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义 handler，解析 element 并被 emp bean 赋值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// List to hold Employees object</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Employee&gt; empList = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Employee emp = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder data = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter method for employee list</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getEmpList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> bAge = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> bName = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> bGender = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> bRole = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;Employee&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// create a new Employee and put it in Map</span></span><br><span class="line">            String id = attributes.getValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="comment">// initialize Employee object and set id attribute</span></span><br><span class="line">            emp = <span class="keyword">new</span> Employee();</span><br><span class="line">            emp.setId(Integer.parseInt(id));</span><br><span class="line">            <span class="comment">// initialize list</span></span><br><span class="line">            <span class="keyword">if</span> (empList == <span class="keyword">null</span>)</span><br><span class="line">                empList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;name&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// set boolean values for fields, will be used in setting Employee variables</span></span><br><span class="line">            bName = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;age&quot;</span>)) &#123;</span><br><span class="line">            bAge = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;gender&quot;</span>)) &#123;</span><br><span class="line">            bGender = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;role&quot;</span>)) &#123;</span><br><span class="line">            bRole = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// create the data container</span></span><br><span class="line">        data = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bAge) &#123;</span><br><span class="line">            <span class="comment">// age element, set Employee age</span></span><br><span class="line">            emp.setAge(Integer.parseInt(data.toString()));</span><br><span class="line">            bAge = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bName) &#123;</span><br><span class="line">            emp.setName(data.toString());</span><br><span class="line">            bName = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bRole) &#123;</span><br><span class="line">            emp.setRole(data.toString());</span><br><span class="line">            bRole = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bGender) &#123;</span><br><span class="line">            emp.setGender(data.toString());</span><br><span class="line">            bGender = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;Employee&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// add Employee object to list</span></span><br><span class="line">            empList.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span> ch[], <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        data.append(<span class="keyword">new</span> String(ch, start, length));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_myhandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SAXParser saxParser = saxParserFactory.newSAXParser();</span><br><span class="line">        MyHandler handler = <span class="keyword">new</span> MyHandler();</span><br><span class="line"></span><br><span class="line">        ClassLoader classLoader = getClass().getClassLoader();</span><br><span class="line">        File file = <span class="keyword">new</span> File(Objects.requireNonNull(classLoader.getResource(<span class="string">&quot;employees.xml&quot;</span>)).getFile());</span><br><span class="line"></span><br><span class="line">        saxParser.parse(file, handler);</span><br><span class="line">        <span class="comment">//Get Employees list</span></span><br><span class="line">        List&lt;Employee&gt; empList = handler.getEmpList();</span><br><span class="line">        <span class="comment">//print employee information</span></span><br><span class="line">        <span class="keyword">for</span> (Employee emp : empList)</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParserConfigurationException | SAXException | IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用 employees.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Employees</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Employee</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>29<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pankaj<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">role</span>&gt;</span>Java Developer<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Employee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Employee</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>35<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Lisa<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>Female<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">role</span>&gt;</span>CEO<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Employee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Employee</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>40<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">role</span>&gt;</span>Manager<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Employee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Employee</span> <span class="attr">id</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>25<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Meghna<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>Female<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">role</span>&gt;</span>Manager<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Employee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Employees</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="SAXParser-Vs-XMLReader"><a href="#SAXParser-Vs-XMLReader" class="headerlink" title="SAXParser Vs XMLReader"></a>SAXParser Vs XMLReader</h2><p>SAXParser 和 XMLReader 的关系：SAXParser 隶属于 javax 包， XMLReader 是从 saxproject 这个项目拿过来的。他们都可以读取 xml, SAXParser 底层还是调用了 XMLReader, 前者调用简单，只提供常规用法，后者使用稍显繁琐，但是可以实现的定制化功能多。</p>
<p>类关系上：SAXParser 继承了 AbstractSAXParser, AbstractSAXParser 实现了 XMLReader 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saxParser_vs_xmlReader</span><span class="params">()</span> <span class="keyword">throws</span> ParserConfigurationException, SAXException, IOException </span>&#123;</span><br><span class="line">    String emp =</span><br><span class="line">            <span class="string">&quot;&lt;Employee id=\&quot;1\&quot;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;age&gt;29&lt;/age&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;name&gt;Pankaj&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;gender&gt;Male&lt;/gender&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;role&gt;Java Developer&lt;/role&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &lt;/Employee&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    MyHandler handler = <span class="keyword">new</span> MyHandler();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parse with sax parser</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SaxParser result: &quot;</span>);</span><br><span class="line">    SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">    SAXParser saxParser= factory.newSAXParser();</span><br><span class="line">    saxParser.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(emp)), handler);</span><br><span class="line">    System.out.println(handler.getEmpList());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;XMLReader result: &quot;</span>);</span><br><span class="line">    XMLReader xmlReader = SAXParserFactory.newInstance().newSAXParser().getXMLReader();</span><br><span class="line">    xmlReader.setContentHandler(handler);</span><br><span class="line">    xmlReader.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(emp)));</span><br><span class="line">    System.out.println(handler.getEmpList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output, 第二次打印的时候</span></span><br><span class="line"><span class="comment">// SaxParser result: </span></span><br><span class="line"><span class="comment">// [Employee(id=1, name=Pankaj, gender=Male, age=29, role=Java Developer)]</span></span><br><span class="line"><span class="comment">// XMLReader result: </span></span><br><span class="line"><span class="comment">// [Employee(id=1, name=Pankaj, gender=Male, age=29, role=Java Developer), Employee(id=1, name=Pankaj, gender=Male, age=29, role=Java Developer)]</span></span><br></pre></td></tr></table></figure>

<h2 id="ErrorHandler-DTD-验证-XML"><a href="#ErrorHandler-DTD-验证-XML" class="headerlink" title="ErrorHandler + DTD 验证 XML"></a>ErrorHandler + DTD 验证 XML</h2><p>在原来的基础上，我们想要在解析 xml 的时候添加一些限制，比如 Employee 元素必须包含 gender 不然抛错。这种功能可以通过添加 DTD 规则并且打开 xml 验证功能来实现。</p>
<p>定义 DTD 文件，DTD 中会包含 xml 各个 element 的从属关系，可以设置的属性值，属性数量等信息。如下方的例子中我们就规定 Employee 元素必须有至少一个的 gender 信息， 并且 Employee 必须包含 id 属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorHandler</span> <span class="keyword">implements</span> <span class="title">ErrorHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warning</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        show(<span class="string">&quot;--Warning--&quot;</span>, exception);</span><br><span class="line">        <span class="keyword">throw</span> (exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        show(<span class="string">&quot;--Error--&quot;</span>, exception);</span><br><span class="line">        <span class="keyword">throw</span> (exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fatalError</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        show(<span class="string">&quot;--Fatal Error--&quot;</span>, exception);</span><br><span class="line">        <span class="keyword">throw</span> (exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String type, SAXParseException e)</span> </span>&#123;</span><br><span class="line">        System.out.println(type + <span class="string">&quot;: &quot;</span> + e.getMessage());</span><br><span class="line">        System.out.println(<span class="string">&quot;Line &quot;</span> + e.getLineNumber() + <span class="string">&quot; Column &quot;</span> + e.getColumnNumber());</span><br><span class="line">        System.out.println(<span class="string">&quot;System ID: &quot;</span> + e.getSystemId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> ParserConfigurationException, SAXException, IOException </span>&#123;</span><br><span class="line">    String str_with_dtd =</span><br><span class="line">            <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;!DOCTYPE Employees [\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;!ELEMENT Employees (Employee)*&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;!ELEMENT Employee (age?, name?, gender+, role*)&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;!ATTLIST Employee\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                id CDATA #REQUIRED\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                &gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;!ELEMENT age (#PCDATA)&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;!ELEMENT name (#PCDATA)&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;!ELEMENT gender (#PCDATA)&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;!ELEMENT role (#PCDATA)&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        ]&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;Employees&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &lt;Employee id=\&quot;1\&quot;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;age&gt;29&lt;/age&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;name&gt;Pankaj&lt;/name&gt;\n&quot;</span> +</span><br><span class="line"><span class="comment">//                &quot;        &lt;gender&gt;Male&lt;/gender&gt;\n&quot; +</span></span><br><span class="line">            <span class="string">&quot;        &lt;role&gt;Java Developer&lt;/role&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &lt;/Employee&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;/Employees&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    XMLReader xmlReader = SAXParserFactory.newInstance().newSAXParser().getXMLReader();</span><br><span class="line">    xmlReader.setFeature(<span class="string">&quot;http://xml.org/sax/features/validation&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    xmlReader.setErrorHandler(<span class="keyword">new</span> MyErrorHandler());</span><br><span class="line">    xmlReader.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(str_with_dtd)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// --Error--: The content of element type &quot;Employee&quot; must match &quot;(age?,name?,gender+,role*)&quot;.</span></span><br><span class="line"><span class="comment">// Line 18 Column 16</span></span><br><span class="line"><span class="comment">// System ID: null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.xml.sax.SAXParseException; lineNumber: 18; columnNumber: 16; The content of element type &quot;Employee&quot; must match &quot;(age?,name?,gender+,role*)&quot;.</span></span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong> 在这个例子中我们只能用 XMLReader, 应为我们只实现了 ErrorHandler 接口。SaxParser 只能处理继承了 DefaultHandler 的类</p>
<h2 id="EntityResolver-samples"><a href="#EntityResolver-samples" class="headerlink" title="EntityResolver samples"></a>EntityResolver samples</h2><p>Spring中使用DelegatingEntityResolver 类为 EntityResolver的实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InputSource <span class="title">resolveEntity</span><span class="params">(String publicId, String systemId)</span> <span class="keyword">throws</span> SAXException, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (systemId != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果是DTD从这里开始</span></span><br><span class="line">        <span class="keyword">if</span> (systemId.endsWith(DTD_SUFFIX)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.dtdResolver.resolveEntity(publicId, systemId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是XSD从这里开始</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (systemId.endsWith(XSD_SUFFIX)) &#123;</span><br><span class="line">            <span class="comment">// 通过调用META-INF/Spring.schemas解析</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.schemaResolver.resolveEntity(publicId, systemId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例二:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEntityResolver</span> <span class="keyword">implements</span> <span class="title">EntityResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputSource <span class="title">resolveEntity</span><span class="params">(String publicId, String systemId)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;----- Call MyEntityResolver, PID: %s + SID: + %s&quot;</span>, publicId, systemId));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> ParserConfigurationException, SAXException, IOException </span>&#123;</span><br><span class="line">    String str_with_dtd = <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;!DOCTYPE succession-data-model PUBLIC \&quot;Self_defined_plublic_name\&quot; \&quot;http://self/defined/public/name\&quot;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;succession-data-model&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;/succession-data-model&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    XMLReader xmlReader = XMLReaderFactory.createXMLReader();</span><br><span class="line">    xmlReader.setEntityResolver(<span class="keyword">new</span> MyEntityResolver());</span><br><span class="line">    xmlReader.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(str_with_dtd)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">// ----- Call MyEntityResolver, PID: Self_defined_plublic_name + SID: + http://self/defined/public/name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// java.net.UnknownHostException: self</span></span><br><span class="line"><span class="comment">// at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:196)</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>在输出了 publicId 和 systemId 之后，他会试图通过 http 拿到 inputStream 中指定的文件数据，但是我随便写的，所以报错了，但是实验目的已经达到了</p>
<h2 id="External-DTD-XSD-sample"><a href="#External-DTD-XSD-sample" class="headerlink" title="External DTD/XSD sample"></a>External DTD/XSD sample</h2><p>这部分我们可以等到以后看 spring 或者 mybatis 解析 xml 的时候看，直接是现成的例子， 他是通过 EntityResolver 指定的解析规则</p>
<h2 id="XMLFilter-使用案例"><a href="#XMLFilter-使用案例" class="headerlink" title="XMLFilter 使用案例"></a>XMLFilter 使用案例</h2><p>解析 XML 时如果需要过滤某些节点，可以使用该技术，优点：避免修改原有逻辑，使得逻辑更清晰，分层</p>
<p>Scenario: 解析 Employee 只处理 deptid = 3 的节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FemaleFilter</span> <span class="keyword">extends</span> <span class="title">XMLFilterImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FemaleFilter</span> <span class="params">(XMLReader parent)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes atts)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;employee&quot;</span>.equals(qName) &amp;&amp; atts.getValue(<span class="string">&quot;deptid&quot;</span>).equals(<span class="string">&quot;3&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">super</span>.startElement(uri, localName, qName, atts);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FemaleHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;employee&quot;</span>.equals(qName)) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;QName: %s, id: %s, deptid: %s %n&quot;</span>, qName, attributes.getValue(<span class="string">&quot;empid&quot;</span>), attributes.getValue(<span class="string">&quot;deptid&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> SAXException, IOException </span>&#123;</span><br><span class="line">    String xml = <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;personnel&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;employee empid=\&quot;332\&quot; deptid=\&quot;24\&quot; shift=\&quot;night\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;         status=\&quot;contact\&quot;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    JennyBerman\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;/employee&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;employee empid=\&quot;994\&quot; deptid=\&quot;24\&quot; shift=\&quot;day\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;         status=\&quot;donotcontact\&quot;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    AndrewFule\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;/employee&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;employee empid=\&quot;948\&quot; deptid=\&quot;3\&quot; shift=\&quot;night\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;         status=\&quot;contact\&quot;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    AnnaBangle\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;/employee&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;employee empid=\&quot;1032\&quot; deptid=\&quot;3\&quot; shift=\&quot;day\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;         status=\&quot;contact\&quot;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    DavidBaines\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;/employee&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;/personnel&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    XMLReader reader = XMLReaderFactory.createXMLReader();</span><br><span class="line">    XMLFilter femaleFilter = <span class="keyword">new</span> FemaleFilter(reader);</span><br><span class="line">    femaleFilter.setContentHandler(<span class="keyword">new</span> FemaleHandler());</span><br><span class="line">    femaleFilter.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(xml)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// QName: employee, id: 948, deptid: 3</span></span><br><span class="line"><span class="comment">// QName: employee, id: 1032, deptid: 3</span></span><br></pre></td></tr></table></figure>

<p>例子里面的示例比较简单，如果判断条件分散在好几个 node 里面，可能解析起来就不方便了，不过得具体问题具体分析</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>xml</tag>
        <tag>sax</tag>
      </tags>
  </entry>
  <entry>
    <title>变量赋值，跌进了坑中</title>
    <url>/hexo/2021/03/19/Java-variable-assignment/</url>
    <content><![CDATA[<p>今天在修一个 feature 的时候，掉进了一个很初级的坑中而不自觉，debug 了好久才发现的，汗颜</p>
<h2 id="问题简化"><a href="#问题简化" class="headerlink" title="问题简化"></a>问题简化</h2><p>求解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String , Integer&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScope</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Integer&gt; tmp = person.getMap();</span><br><span class="line">        System.out.println(tmp); <span class="comment">// null</span></span><br><span class="line">        System.out.println(person.getMap()); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">        tmp = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        tmp.put(<span class="string">&quot;jack&quot;</span>, <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(tmp); <span class="comment">// &#123;jack=31&#125;</span></span><br><span class="line">        System.out.println(person.getMap()); <span class="comment">// null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>debug 的时候还一直纳闷，怎么 person 引用没有被赋值。。。作为对比看下面的例子应该就很清楚了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String , Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 带初始化引用类型的</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScope</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Integer&gt; tmp = person.getMap();</span><br><span class="line">        System.out.println(tmp); <span class="comment">// &#123;&#125;</span></span><br><span class="line">        System.out.println(person.getMap()); <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">        tmp.put(<span class="string">&quot;jack&quot;</span>, <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(tmp); <span class="comment">// &#123;jack=31&#125;</span></span><br><span class="line">        System.out.println(person.getMap()); <span class="comment">// &#123;jack=31&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在特殊化一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScope</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Integer&gt; tmp = person.getMap();</span><br><span class="line">        System.out.println(tmp); <span class="comment">// &#123;&#125;</span></span><br><span class="line">        System.out.println(person.getMap()); <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">        tmp.put(<span class="string">&quot;jack&quot;</span>, <span class="number">31</span>);</span><br><span class="line">        tmp = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        tmp.put(<span class="string">&quot;jerry&quot;</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(tmp); <span class="comment">// &#123;jack=21&#125;</span></span><br><span class="line">        System.out.println(person.getMap()); <span class="comment">// &#123;jack=31&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结一下就是，改变引用类型的值没什么问题，但是如果一开始是 null 的话它就不会随着一起改了</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Java xml parser compare</title>
    <url>/hexo/2020/11/05/Java-xml-parser-compare/</url>
    <content><![CDATA[<p>记录一下公司实际项目中新老两种 XML 解析框架的实现方式，作为以后类似问题的参考</p>
<h2 id="老的实现方式"><a href="#老的实现方式" class="headerlink" title="老的实现方式"></a>老的实现方式</h2><p>用的是最传统的 SAX 解析模式，优点是很直观，在这个模块规模还小的时候挺好的，只要熟悉 SAX 的使用方式上手很快，但是不管什么功能，在经过十几年的反复堆砌之后都会变成一个难以维护的怪物。</p>
<p>实现的时候，最大的弊端应该是参杂了很多的业务逻辑到解析过程中，就我看来，解析就应该是纯粹的过程，业务相关的验证应该放到解析后做才对！</p>
<p>重构前：</p>
<ul>
<li>最外层有 3k 的代码来解析 xml</li>
<li>最外层到 DefaultHandler 接口，中间还有 2 个父类继承关系存放各种公共变量和方法</li>
<li>所有的模块组都在一个 class 中维护代码，很臃肿，很多冗余</li>
<li>一些公共的 element, 比如 description, label 之类的每个模块都可能出一些奇葩用法，维护更难</li>
<li>在最外层的 Handler 实现中需要存储很多变量来存储中间状态的值</li>
</ul>
<p>实现伪代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LegacyParser</span> <span class="keyword">extends</span> <span class="title">SuperParser3</span>...<span class="title">SuperParser1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ParsedResultBean bean;</span><br><span class="line">    <span class="keyword">private</span> ModuleElement1 element1;</span><br><span class="line">    <span class="keyword">private</span> ModuleElement2 element1;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> ModuleElementN elementn;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, IModuleElement&gt; elementGroup1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, IModuleElement&gt; elementGroupn = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多种重载的构造函数包含 module 各自的 flag 参数，再定制后面 module 内容部的处理逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">LegacyParser</span><span class="params">(ParsedResultBean bean)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">LegacyParser</span><span class="params">(ParsedResultBean bean, <span class="keyword">boolean</span> moduleFlag1)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">LegacyParser</span><span class="params">(ParsedResultBean bean, <span class="keyword">boolean</span> moduleFlag1, <span class="keyword">boolean</span> moduleFlag2)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个集合存储可用解析器</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, ElementParser&gt; availableParsers = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ElementParser1</span> <span class="keyword">extends</span> <span class="title">BaseElementParser</span>...<span class="title">DefaultHander</span> <span class="keyword">implements</span> <span class="title">IElementParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getElementName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ElementName1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attrs)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">          <span class="comment">// module logic</span></span><br><span class="line">          elementGroup1.put(...);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moduleMehtods</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ElementParser2</span>...<span class="title">N</span> <span class="keyword">extends</span> <span class="title">BaseElementParser</span>...<span class="title">DefaultHander</span> <span class="keyword">implements</span> <span class="title">IElementParser</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最外部一个</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String name, Attributes attrs)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (availableParsers.containsKey(name)) &#123;</span><br><span class="line">            elementParsers.get(name).startElement(uri, localName, name, attrs);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SAXException(<span class="string">&quot;Unexpected element &quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String name, Attributes attrs)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (availableParsers.containsKey(name)) &#123;</span><br><span class="line">            elementParsers.get(name).endElement(uri, localName, name, attrs);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SAXException(<span class="string">&quot;Unexpected element &quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>lang 包类简介</title>
    <url>/hexo/2020/01/08/Lang%20%E5%8C%85%E7%B1%BB%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>用人话解释我用过的 Class 类中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 食用方法：classA.isAssignableFrom(classB)</span></span><br><span class="line"><span class="comment">* 表达的意思：classB 是不是 classA 的子类/接口 或 本身</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isAssignableFrom</span><span class="params">(Class&lt;?&gt; cls)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Samples, all tests passed.</span></span><br><span class="line"><span class="keyword">import</span> org.testng.Assert;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIsAssignableFrom</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_isAssignableFrom</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 对自己使用，返回 true</span></span><br><span class="line">        Assert.assertTrue(ClassA.class.isAssignableFrom(ClassA.class));</span><br><span class="line">        <span class="comment">// 父类对子类使用，返回 true</span></span><br><span class="line">        Assert.assertTrue(ClassA.class.isAssignableFrom(ClassB.class));</span><br><span class="line">        <span class="comment">// 子类对父类使用，返回 false</span></span><br><span class="line">        Assert.assertFalse(ClassB.class.isAssignableFrom(ClassA.class));</span><br><span class="line">        <span class="comment">// 父接口对自接口使用，返回 true</span></span><br><span class="line">        Assert.assertTrue(InterfaceC.class.isAssignableFrom(InterfaceD.class));</span><br><span class="line">        <span class="comment">// 子接口对父接口使用，返回 false</span></span><br><span class="line">        Assert.assertFalse(InterfaceD.class.isAssignableFrom(InterfaceC.class));</span><br><span class="line">        <span class="comment">// 接口对实现了自己的类使用，返回 true</span></span><br><span class="line">        Assert.assertTrue(InterfaceC.class.isAssignableFrom(ClassB.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> <span class="keyword">extends</span> <span class="title">ClassA</span> <span class="keyword">implements</span> <span class="title">InterfaceC</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterfaceC</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterfaceD</span> <span class="keyword">extends</span> <span class="title">InterfaceC</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>lang</tag>
        <tag>class</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 换源</title>
    <url>/hexo/2019/12/02/Linux%20%E6%8D%A2%E6%BA%90/</url>
    <content><![CDATA[<p>Linux 配置国内源加速，以 Ubuntu 为例子</p>
<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><p>运行 command</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换 sources.list 中的源信息</span></span><br><span class="line">sudo sed -i <span class="string">&#x27;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新索引</span></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>如果配置不生效，查看 sources.list 文件中的源信息，可能不是 <code>archive.ubuntu.com</code> 所以更新失败，比如我的 WSL环境中，原始的源就 <code>security.ubuntu.com</code> 需要把上面的命令改为, 使之生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/security.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://mirrors.ustc.edu.cn/help/ubuntu.html">Ubuntu 源使用帮助</a></li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>换源</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 命令小贴士</title>
    <url>/hexo/2020/07/08/Linux-cmd-tips/</url>
    <content><![CDATA[<p>常用 Linux command 备忘录</p>
<h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>终端获取资源，Sample: <code>curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python</code></p>
<p>-s: 静默模式，去掉显示进度等信息<br>-S: 显示错误信息<br>-L: 自动站点跳转</p>
<p>将 query 结果存到本地文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl url &gt;&gt; ret.json</span><br></pre></td></tr></table></figure>

<h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p><code>ping</code> 命令不需要带 protocal，如果要指定端口可以加 <code>-p</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping -p 8089 cloudsearch-dc8.cld.ondemand.com</span><br></pre></td></tr></table></figure>

<h2 id="容量查询"><a href="#容量查询" class="headerlink" title="容量查询"></a>容量查询</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示系统容量</span></span><br><span class="line">df -hl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前目录下个文件夹大小</span></span><br><span class="line">du -sh *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示文件大小并倒序排列</span></span><br><span class="line">du -sh * | sort -hr</span><br></pre></td></tr></table></figure>

<h2 id="ps-命令保留表头"><a href="#ps-命令保留表头" class="headerlink" title="ps 命令保留表头"></a>ps 命令保留表头</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个命令不是很好，比较繁琐，效率也不高。</span></span><br><span class="line"><span class="comment"># 实现方式是先 ps 一下拿到 head 打印出来，再 ps 一次拿到我们想要的结果</span></span><br><span class="line">ps | head -1; ps | grep java</span><br></pre></td></tr></table></figure>
<h2 id="查看文件-夹大小"><a href="#查看文件-夹大小" class="headerlink" title="查看文件/夹大小"></a>查看文件/夹大小</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># du: disk usage</span></span><br><span class="line">du -sh *</span><br></pre></td></tr></table></figure>

<h2 id="链接-SFTP"><a href="#链接-SFTP" class="headerlink" title="链接 SFTP"></a>链接 SFTP</h2><p>建立联接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sfpt username@1.1.1.1 <span class="comment"># 回车输入密码</span></span></span><br></pre></td></tr></table></figure>

<p>获取文件下载到指定路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">sftp&gt;</span><span class="bash"> get /<span class="built_in">export</span>/sftp/test.csv /Users/my/Downloads</span></span><br><span class="line">Fetching /export/sftp/test.csv to /Users/my/Downloads/test.csv</span><br><span class="line">/export/sftp/test.csv            100%  133     0.3KB/s   00:00</span><br></pre></td></tr></table></figure>

<p>上传本地文件到服务器指定路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">sftp&gt;</span><span class="bash"> put /Users/my/Downloads/re-produce.gif /<span class="built_in">export</span>/sftp</span></span><br><span class="line">Uploading /Users/my/Downloads/re-produce.gif to /export/sftp/re-produce.gif</span><br><span class="line">/Users/my/Downloads/re-produce.gif            100%  257KB  86.6KB/s   00:02</span><br></pre></td></tr></table></figure>

<h2 id="统计文件"><a href="#统计文件" class="headerlink" title="统计文件"></a>统计文件</h2><ul>
<li>当前目录下的文件个数，不包含文件夹 <code>ls -l | grep &#39;^-&#39; | wc -l</code></li>
<li>当前目录下的文件个数，递归 <code>ls -l | grep &#39;^-&#39; | wc -l</code></li>
<li>当前目录下的文件夹个数 <code>ls -l | grep &#39;^d&#39; | wc -l</code></li>
</ul>
<p>解释：</p>
<ul>
<li><code>ls -l</code>: 显示当前目录下所有文件，文件+文件夹</li>
<li><code>grep &#39;^-&#39;</code>: 删选文件，<code>grep &#39;^-&#39;</code> 筛选文件夹。 示例 <code>-rw-r--r--    1 jack  staff     1061 Aug  3 16:53 LICENSE</code></li>
<li><code>wc -l</code>: 统计行数</li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 安装教程</title>
    <url>/hexo/2020/09/16/Mysql-Installation/</url>
    <content><![CDATA[<h2 id="Windows-版本安装"><a href="#Windows-版本安装" class="headerlink" title="Windows 版本安装"></a>Windows 版本安装</h2><ol>
<li>下载安装包 <a href="https://dev.mysql.com/downloads/mysql/">官方地址</a> 下载比较小的，不到测试套件的版本即可</li>
<li>C 盘下新建 Mysql 文件夹，将下载的压缩包解压</li>
<li>进去解压文件夹下，新建一个 my.ini 配置文件并添加配置</li>
<li>将对应的 bin 路径添加到系统的 path 中去，做法和添加 JAVA_HOME 一样</li>
<li>管理员模式打开终端，输入命令 <code>mysqld --initialize-insecure --user=mysql</code> 初始化，并且用户密码为空</li>
<li>输入 <code>mysqld -install</code> 安装数据库，终端出现 <code>Service successfully installed</code> 表示安装成功</li>
<li><code>net start mysql</code> 启动服务器</li>
<li>输入 <code>mysql -u root -p</code> 不用输入密码直接回车, 出现mysql&gt;表示配置完成</li>
<li>输入 <code>alter user user() identified by &quot;your-password&quot;;</code> 修改 root 用户密码</li>
<li>输入 <code>net stop mysql</code> 关闭数据库</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port&#x3D;3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir&#x3D;C:\Mysql\mysql-8.0.21-winx64</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir&#x3D;C:\Mysql\mysql-8.0.21-winx64\data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections&#x3D;200</span><br><span class="line"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="line">max_connect_errors&#x3D;10</span><br><span class="line"># 服务端使用的字符集默认为UTF8</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line"># 默认使用“mysql_native_password”插件认证</span><br><span class="line">default_authentication_plugin&#x3D;mysql_native_password</span><br></pre></td></tr></table></figure>

<h2 id="Windows-part-issues"><a href="#Windows-part-issues" class="headerlink" title="Windows part issues"></a>Windows part issues</h2><p>Windows 运行 <code>mysqld --initialize-insecure --user=mysql</code> 配置时报错 <code>由于找不到vcruntime140_1.dll,无法继续执行代码</code> 可以去 <a href="https://cn.dll-files.com/vcruntime140_1.dll.html">官网</a> 下载 dll 文件放到 <code>C:\Windows\System32</code> 下即可</p>
<p>Idea 链接 mysql 后报错 <code>Server returns invalid timezone. Go to &#39;Advanced&#39; tab and set &#39;serverTimezone&#39; property manually</code>，可以通过设置 mysql 时区解决</p>
<ol>
<li>cmd -&gt; mysql -uroot -p 登录 DB</li>
<li><code>show variables like&#39;%time_zone&#39;;</code> 查看时区， Value 为 SYSTEM 则表示没有设置过</li>
<li><code>set global time_zone = &#39;+8:00&#39;;</code> 修改时区为东八区</li>
<li>重试链接，问题解决</li>
</ol>
<p>这只是临时方案，重启 DB 后时区会重置，可以去 my.ini 配置文件中添加配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 设置默认时区</span><br><span class="line">default-time_zone&#x3D;&#39;+8:00&#39;</span><br></pre></td></tr></table></figure>

<h2 id="MacOS-版本安装"><a href="#MacOS-版本安装" class="headerlink" title="MacOS 版本安装"></a>MacOS 版本安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install mysql <span class="comment"># 使用 homebrew 安装</span></span><br></pre></td></tr></table></figure>

<p>安装完毕的时候，终端回给出提示，最后的那段话比较值得注意</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">We&#x27;ve installed your MySQL database without a root password. To secure it run:</span><br><span class="line">    mysql_secure_installation</span><br><span class="line"></span><br><span class="line">MySQL is configured to only allow connections from localhost by default</span><br><span class="line"></span><br><span class="line">To connect run:</span><br><span class="line">    mysql -uroot</span><br><span class="line"></span><br><span class="line">To have launchd start mysql now and restart at login:</span><br><span class="line">  brew services start mysql</span><br><span class="line">Or, if you don&#x27;t want/need a background service you can just run:</span><br><span class="line">  mysql.server start</span><br></pre></td></tr></table></figure>

<p>翻译成人话就是</p>
<ol>
<li>DB 安装成功，但是数据库 root 用户是没有密码的，你直接登陆会失败</li>
<li>运行 mysql_secure_installation 给数据库设置密码</li>
<li>使用命令 <code>mysql -uroot</code> 联接数据库</li>
<li>后台启动使用 <code>brew services start mysql</code> 前台启动使用 <code>mysql.server start</code></li>
</ol>
<p>PS: 想要改密码得先启动服务，即运行 <code>brew services start mysql</code> 命令</p>
<p>在安全设置脚本中，mysql 会让你进行如重设 root 密码，删除匿名用户等操作，按照提示操作即可。以下是提示样本：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Jack &gt; ~ &gt; mysql_secure_installation</span><br><span class="line"></span><br><span class="line">## 开始进行设置</span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Connecting to MySQL using a blank password.</span><br><span class="line"></span><br><span class="line">VALIDATE PASSWORD COMPONENT can be used to test passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to set only those passwords which are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD component?</span><br><span class="line"></span><br><span class="line">## 是否进行安全设置</span><br><span class="line">Press y|Y for Yes, any other key for No: y</span><br><span class="line"></span><br><span class="line">There are three levels of password validation policy:</span><br><span class="line"></span><br><span class="line">LOW    Length &gt;= 8</span><br><span class="line">MEDIUM Length &gt;= 8, numeric, mixed case, and special characters</span><br><span class="line">STRONG Length &gt;= 8, numeric, mixed case, special characters and dictionary                  file</span><br><span class="line"></span><br><span class="line">## 设置密码复杂度，最低也要 *8* 位密码起步</span><br><span class="line">Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 0</span><br><span class="line">Please set the password for root here.</span><br><span class="line"></span><br><span class="line">New password:</span><br><span class="line"></span><br><span class="line">Re-enter new password:</span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 50</span><br><span class="line">Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : y</span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them. This is intended only for</span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">## 是否删除匿名用户</span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">&#x27;localhost&#x27;. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line"></span><br><span class="line">## 是否开放 root 用户远程访问</span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) :</span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, MySQL comes with a database named &#x27;test&#x27; that</span><br><span class="line">anyone can access. This is also intended only for testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">## 是否删除测试表</span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) :</span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">## 是否重新加载使得配置生效</span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All done!</span><br></pre></td></tr></table></figure>

<p>设置完毕之后就可以使用 <code>mysql -uroot -p</code> 登陆测试了。没有遇到其他问题，还挺顺利的 ε-(´∀｀; )</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>新系统初始化设置</title>
    <url>/hexo/2020/08/03/New-OS-Setup/</url>
    <content><![CDATA[<p>记录一下新系统常用配置和软件安装</p>
<h2 id="MacOS-显示隐藏文件"><a href="#MacOS-显示隐藏文件" class="headerlink" title="MacOS 显示隐藏文件"></a>MacOS 显示隐藏文件</h2><p><code>cmd + shift + .</code></p>
<h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>官网推荐的通过 curl raw 文件安装，本地没有 proxy 的话 pass，基本不动。可以直接通过 <code>git clone https://github.com/Homebrew/install</code> 这个 repo 然后 <code>cd</code> 到 install 文件夹下执行 <code>/bin/bash -c ./install.sh</code> 来触发任务</p>
<h3 id="速度测试"><a href="#速度测试" class="headerlink" title="速度测试"></a>速度测试</h3><p>运行如下命令，查看是哪个步骤速度比较慢</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update --verbose</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jack@PC /usr/<span class="built_in">local</span>/Homebrew/stable brew update --verbose</span><br><span class="line">Checking <span class="keyword">if</span> we need to fetch /usr/<span class="built_in">local</span>/Homebrew...</span><br><span class="line">Checking <span class="keyword">if</span> we need to fetch /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-cask...</span><br><span class="line">Fetching /usr/<span class="built_in">local</span>/Homebrew...</span><br><span class="line">Checking <span class="keyword">if</span> we need to fetch /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core...</span><br><span class="line">Checking <span class="keyword">if</span> we need to fetch /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-services...</span><br><span class="line">Fetching /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core...</span><br><span class="line">Fetching /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-cask...</span><br><span class="line">remote: Counting objects: 5806, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (2626/2626), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 5806 (delta 4179), reused 4564 (delta 3087)</span><br><span class="line">Receiving objects: 100% (5806/5806), 1.30 MiB | 203.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (4179/4179), completed with 375 <span class="built_in">local</span> objects.</span><br><span class="line">From https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew</span><br><span class="line">   7b67ac5e3..a4d7bb64a  master     -&gt; origin/master</span><br><span class="line"> * [new tag]             2.1.10     -&gt; 2.1.10</span><br><span class="line"> * [new tag]             2.1.11     -&gt; 2.1.11</span><br><span class="line"> * [new tag]             2.1.12     -&gt; 2.1.12</span><br><span class="line"> * [new tag]             2.1.13     -&gt; 2.1.13</span><br><span class="line"> * [new tag]             2.1.14     -&gt; 2.1.14</span><br><span class="line"> * [new tag]             2.1.15     -&gt; 2.1.15</span><br><span class="line"> * [new tag]             2.1.16     -&gt; 2.1.16</span><br><span class="line"> * [new tag]             2.1.3      -&gt; 2.1.3</span><br><span class="line"> * [new tag]             2.1.4      -&gt; 2.1.4</span><br><span class="line"> * [new tag]             2.1.5      -&gt; 2.1.5</span><br><span class="line"> * [new tag]             2.1.6      -&gt; 2.1.6</span><br><span class="line"> * [new tag]             2.1.7      -&gt; 2.1.7</span><br><span class="line"> * [new tag]             2.1.8      -&gt; 2.1.8</span><br><span class="line"> * [new tag]             2.1.9      -&gt; 2.1.9</span><br><span class="line">remote: Counting objects: 71830, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (27226/27226), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 71830 (delta 53303), reused 62922 (delta 44592)</span><br><span class="line">Receiving objects: 100% (71830/71830), 21.95 MiB | 11.70 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (53303/53303), completed with 4020 <span class="built_in">local</span> objects.</span><br><span class="line">From https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core</span><br><span class="line">   ea056b500e..6ec9c907ea master     -&gt; origin/master</span><br><span class="line">remote: Enumerating objects: 235987, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (215906/215906), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (58941/58941), <span class="keyword">done</span>.</span><br><span class="line">Receiving objects:  45% (92674/205138), 23.64 MiB | 345.00 KiB/s</span><br></pre></td></tr></table></figure>

<h3 id="更新-Brew-配置"><a href="#更新-Brew-配置" class="headerlink" title="更新 Brew 配置"></a>更新 Brew 配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换brew.git:</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换homebrew-core.git:</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换homebrew-cask.git:</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span>/Library/Taps/homebrew/homebrew-cask</span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 homebrew bottles 源, zsh 用户:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 homebrew bottles 源, bash 用户:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>如果这个源挂了可以试试清华的</p>
<h2 id="update-warning"><a href="#update-warning" class="headerlink" title="update warning"></a>update warning</h2><p>brew update 抛 warning</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Updating /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core...</span><br><span class="line">fatal: It seems that there is already a rebase-apply directory, and</span><br><span class="line">I wonder <span class="keyword">if</span> you are <span class="keyword">in</span> the middle of another rebase.  If that is the</span><br><span class="line"><span class="keyword">case</span>, please try</span><br><span class="line">    git rebase (--<span class="built_in">continue</span> | --abort | --skip)</span><br><span class="line">If that is not the <span class="keyword">case</span>, please</span><br><span class="line">    rm -fr <span class="string">&quot;.git/rebase-apply&quot;</span></span><br><span class="line">and run me again.  I am stopping <span class="keyword">in</span> <span class="keyword">case</span> you still have something</span><br><span class="line">valuable there.</span><br></pre></td></tr></table></figure>

<p>存在 <code>/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/.git/rebase-apply</code> 这样的备份文件，通过 <code>rm -rf rebase-apply</code> 删掉就好了</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://www.raydbg.com/2019/Homebrew-Update-Slow/">RayDBG</a></li>
<li><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git">USTC Guide</a></li>
</ul>
<h2 id="Iterm2"><a href="#Iterm2" class="headerlink" title="Iterm2"></a>Iterm2</h2><ul>
<li>最大化窗口：CMD + Ctrl + F</li>
<li>Item2 最大化终端：CMD + Enter</li>
</ul>
<p>可以通过下载 <a href="https://www.iterm2.com/downloads.html">官方 zip</a> 包离线安装，也可以通过 brew 安装 <code>brew cask install iterm2</code>。brew 会比较慢</p>
<p>修改提示符 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">prompt_context</span></span> () &#123;</span><br><span class="line">    prompt_segment black default <span class="string">&quot;Jack&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置-solarized-配色方案"><a href="#配置-solarized-配色方案" class="headerlink" title="配置 solarized 配色方案"></a>配置 solarized 配色方案</h3><p>最新版的系统已经默认支持这个配色方案了，打开 iterm2 终端，<code>cmd + ,</code> 打开配置窗口。 Preferences -&gt; Profiles -&gt; Colors -&gt; Color Presets -&gt; Solarized Dark</p>
<h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><p>官方 <a href="https://github.com/ohmyzsh/ohmyzsh">git</a> 地址， 应为网络原因选择 clone repo 安装: <code>git clone https://github.com/ohmyzsh/ohmyzsh.git</code> + <code>sh -c &#39;./install.sh</code></p>
<p>重启后终端抛出 warning</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Last login: Mon Aug  3 18:08:08 on ttys000</span><br><span class="line">[oh-my-zsh] Insecure completion-dependent directories detected:</span><br><span class="line">drwxrwxr-x  3 jack  admin   96 Aug  3 13:18 /usr/<span class="built_in">local</span>/share/zsh</span><br><span class="line">drwxrwxr-x  4 jack  admin  128 Aug  3 13:22 /usr/<span class="built_in">local</span>/share/zsh/site-functions</span><br><span class="line"></span><br><span class="line">[oh-my-zsh] For safety, we will not load completions from these directories until</span><br><span class="line">[oh-my-zsh] you fix their permissions and ownership and restart zsh.</span><br><span class="line">[oh-my-zsh] See the above list <span class="keyword">for</span> directories with group or other writability.</span><br><span class="line"></span><br><span class="line">[oh-my-zsh] To fix your permissions you can <span class="keyword">do</span> so by disabling</span><br><span class="line">[oh-my-zsh] the write permission of <span class="string">&quot;group&quot;</span> and <span class="string">&quot;others&quot;</span> and making sure that the</span><br><span class="line">[oh-my-zsh] owner of these directories is either root or your current user.</span><br><span class="line">[oh-my-zsh] The following <span class="built_in">command</span> may <span class="built_in">help</span>:</span><br><span class="line">[oh-my-zsh]     compaudit | xargs chmod g-w,o-w</span><br><span class="line"></span><br><span class="line">[oh-my-zsh] If the above didn<span class="string">&#x27;t help or you want to skip the verification of</span></span><br><span class="line"><span class="string">[oh-my-zsh] insecure directories you can set the variable ZSH_DISABLE_COMPFIX to</span></span><br><span class="line"><span class="string">[oh-my-zsh] &quot;true&quot; before oh-my-zsh is sourced in your zshrc file.</span></span><br></pre></td></tr></table></figure>

<p>运行如下 cmd 修复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 755 /usr/<span class="built_in">local</span>/share/zsh</span><br><span class="line">chmod 755 /usr/<span class="built_in">local</span>/share/zsh/site-functions</span><br></pre></td></tr></table></figure>

<p>配置命令高亮: <code>brew install zsh-syntax-highlighting</code> 并在 .zshrc 中添加配置行 <code>source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</code></p>
<p>配置命令自动补全提示: <code>git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</code> 添加 .zshrc 配置 <code>plugins=(zsh-autosuggestions)</code></p>
<p>为提示插件绑定快捷键: 在 zshrc 文件中添加配置 <code>bindkey &#39;^ &#39; autosuggest-accept</code>, MacOS 下这个快捷键和系统默认的输入法切换冲突，在 System Preferences -&gt; keyboard -&gt; shortcuts -&gt; input sources 下将 select the previous input source 和 selet the next input soure menue 的勾选去掉就行了</p>
<p>PS: 这个快捷键在 VSCode 的 terminal 上不能 work, 试着把 vscode 自带的 <code>ctrl + space</code> 都改掉还是没效果(´Д`) 先凑合着用把，干</p>
<p>PPS: 想要重新绑定 <code>shift + space</code> 为补全，不过找不到对应的 zsh code， 擦擦擦。在 linux 下有款终端工具叫 showkey 的貌似可以解决这个问题， 也可以试试终端输入 cat 回车，按键他就会打印出来键符，不过 shift 貌似没给提示。。。</p>
<p>solarized dark 配色和 zsh-autosuggestion 自动提示配色有冲突，会看不到，参考 <a href="https://github.com/zsh-users/zsh-autosuggestions/issues/416#issuecomment-486516333">issue</a>。我本地直接把配色改成系统自带的 Tango Dark 了</p>
<h3 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h3><p>使用 <code>agnoster</code> 主题时需要加载一个字体，不然很多箭头之类的表示符会显示乱码。下载字体：<code>git clone https://github.com/powerline/fonts.git</code>, 找到 <code>fonts/Meslo Slashed/Meslo LG M Regular for Powerline.ttf</code> 双击安装。 然后打开 iTerm2，按 <code>Command + ,</code> 键，打开 Preferences 配置界面，然后Profiles -&gt; Text -&gt; Font -&gt; Chanage Font，选择 Meslo LG M Regular for Powerline 字体。</p>
<h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><p>打开 VSCode, <code>CMD + SHIFT + P</code>, 选择 <code>Shell Command: Install &#39;code&#39; command in PATH</code> 命令，应用会自动安装好，在终端输入 <code>code</code> 测试</p>
<p>配置完 zsh 之后，VSCode 的终端会显示乱码，<code>cmd + shift + p</code> 搜索 ‘Preferences: Open Settings(JSON)’ 添加配置 <code>&#123; &quot;terminal.integrated.fontFamily&quot;: &quot;Meslo LG M for Powerline&quot; &#125;</code> 即可修复，保存后可以看到效果。</p>
<p>VSCode 在终端安装 code 命令之后每次重启都会失效，应该是因为我只是把它放在 Document, Download 文件夹下面了。把它放到 Application 下再安装一下 shell 继承命令就可以了。顺带着之前 <code>zsh-autosuggestion</code> 不能补全也是这个原因！！！</p>
<h3 id="安装-VirtualBox"><a href="#安装-VirtualBox" class="headerlink" title="安装 VirtualBox"></a>安装 VirtualBox</h3><p>MacOS 10.15.6 Catalina 安装 VirtualBox 的时候报错，安装失败，是应为 MacOS 默认设置是禁止安装 Oracle 公司产品的，你可以去 System Preference -&gt; Security &amp; Privacy 页面点一下左下方的小锁，允许安装 Oracle 相关软件。再重新安装一下，就行了。</p>
<h2 id="使用-IDEA-的快捷键时跳出窗口"><a href="#使用-IDEA-的快捷键时跳出窗口" class="headerlink" title="使用 IDEA 的快捷键时跳出窗口"></a>使用 IDEA 的快捷键时跳出窗口</h2><p>窗口内容： “No manual entry for <command>“， Refer to <a href="https://intellij-support.jetbrains.com/hc/en-us/articles/360005137400-Cmd-Shift-A-hotkey-opens-Terminal-with-apropos-search-instead-of-the-Find-Action-dialog">Official IDEA Support</a></p>
<p>MacOS since 10.14, 官方定义了这个快捷键，和 IDEA 冲突了，Keyboard -&gt; shortcut -&gt; service -&gt; search man page index in terminal 把这个选项 disable 掉，或者替换掉</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>No sleep night</title>
    <url>/hexo/2020/11/27/No-sleep-night/</url>
    <content><![CDATA[<p>码农生活小记</p>
<h2 id="2020-11-27"><a href="#2020-11-27" class="headerlink" title="2020-11-27"></a>2020-11-27</h2><p>Cross pillar 的改动，我们 team 在做重构的时候改了其他 team 的 code，半年过去了，突然告诉我上线出问题了，也不知道他们之前都是怎么做的测试，无力吐槽。打了 emergency 的 patch。也是各种折腾，第一次 fix 还导致了更大的 issue，瑟瑟发抖。搞到将近一点，release 成功，等第二天的测试结果。索性一切 OK。发现老板工作是真的拼，晚上守到近两点，早上七点多又起来 verify，大老板也是，佩服佩服。敬业没得说，值的学习。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>NoClassDefFoundError 记录</title>
    <url>/hexo/2020/01/06/NoClassDefFoundError%20%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>写 UT 的时候遇到一个 NoClassDefFoundError, 以前没碰到过，记一笔</p>
<h3 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h3><p>编译时能找到 class 但是运行时对应的类找不到了，听上去可能不点矛盾</p>
<h3 id="与-ClassNotFoundException-的区别"><a href="#与-ClassNotFoundException-的区别" class="headerlink" title="与 ClassNotFoundException 的区别"></a>与 ClassNotFoundException 的区别</h3><p>ClassNotFoundException 的场景更多的是我们给出 class name, 然后 JVM 根据名字去 load 的时候找不到就会跑抛出这个异常</p>
<p>NoClassDefFoundError 则是在编译期，JVM 是能找到对应的类的，但是等运行期时找不到了</p>
<h3 id="怎么修复"><a href="#怎么修复" class="headerlink" title="怎么修复"></a>怎么修复</h3><ol>
<li>检测 Classpath 是不是缺少你需要的 jar 包，缺少就加一下。我本地就是这个问题，测试的 dependency 中没有类的引用，挂了</li>
<li>检查 error exception stack, 看看是不是类初始化时 static 部分出错了</li>
</ol>
<h3 id="打印-Classpath-调试"><a href="#打印-Classpath-调试" class="headerlink" title="打印 Classpath 调试"></a>打印 Classpath 调试</h3><p>通过打印 classpath 输出当前运行环境是否缺少需要的 jar 包。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintClassPath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassLoader cl = ClassLoader.getSystemClassLoader();</span><br><span class="line"></span><br><span class="line">        URL[] urls = ((URLClassLoader)cl).getURLs();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(URL url: urls)&#123;</span><br><span class="line">            System.out.println(url.getFile());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/charsets.jar</span></span><br><span class="line"><span class="comment">// /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/deploy.jar</span></span><br><span class="line"><span class="comment">// /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/cldrdata.jar</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h3 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h3><p><a href="https://javarevisited.blogspot.com/2011/06/noclassdeffounderror-exception-in.html">很全面的一个 NoClassDefFoundError 异常分析博文</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>exception</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas 快速入门</title>
    <url>/hexo/2020/06/29/Pandas-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>记录 Pandas 常用方法作为快速入门导航</p>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path = <span class="string">&#x27;/Users/i306454/Downloads/dump.json&#x27;</span></span><br><span class="line">dump = pandas.read_json(path)</span><br><span class="line"><span class="comment"># 输出一个二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示每一列的基本信息，包括类型，是否空等</span></span><br><span class="line">dump.info()</span><br><span class="line"><span class="comment"># &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"><span class="comment"># RangeIndex: 18846 entries, 0 to 18845</span></span><br><span class="line"><span class="comment"># Data columns (total 6 columns):</span></span><br><span class="line"><span class="comment">#  #   Column        Non-Null Count  Dtype</span></span><br><span class="line"><span class="comment"># ---  ------        --------------  -----</span></span><br><span class="line"><span class="comment">#  0   subject       18846 non-null  object</span></span><br><span class="line"><span class="comment">#  1   receive_from  18846 non-null  object</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示可计算列的统计信息，最值，方差，分布等</span></span><br><span class="line">dump.describe()</span><br><span class="line"><span class="comment">#                size</span></span><br><span class="line"><span class="comment"># count  1.884600e+04</span></span><br><span class="line"><span class="comment"># mean   5.790807e+04</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示前三条，用作预览</span></span><br><span class="line">dump.head(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取值 loc/iloc, loc 通过名字，iloc 通过数字标签</span></span><br><span class="line"><span class="comment"># 取1,2 行, size 到 receive_data 矩阵, 和 python 的语法不一样的是这个表达式会包含第二行</span></span><br><span class="line">dump.loc[<span class="number">1</span>:<span class="number">2</span>, <span class="string">&#x27;size&#x27;</span>:]</span><br><span class="line"><span class="comment">#     size         receive_date</span></span><br><span class="line"><span class="comment"># 1  11593  2015-08-06T08:36:19</span></span><br><span class="line"><span class="comment"># 2  15863  2017-08-06T08:09:36</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接到方括号可以选择列</span></span><br><span class="line">dump[<span class="string">&#x27;size&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看矩阵大小</span></span><br><span class="line">dump.shape</span><br><span class="line"><span class="comment"># (15, 6)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 size &gt; 3M 的行</span></span><br><span class="line">dump[dump[<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">2000000</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画直方图, bins 如果是数字的话表示你想分成几个 bar</span></span><br><span class="line">dump[<span class="string">&#x27;size&#x27;</span>].hist(bins=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas 的直方图可选项比较少，画图可以用 matplotlib</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = [<span class="number">2500</span>*sub <span class="keyword">for</span> sub <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">22</span>)]</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.hist(main[<span class="string">&#x27;size&#x27;</span>].values, bins=range(<span class="number">0</span>, <span class="number">50000</span>+<span class="number">1</span>, <span class="number">2500</span>))</span><br><span class="line">plt.grid()</span><br><span class="line">plt.xticks(x, [<span class="string">&#x27;&#123;:.1f&#125;KB&#x27;</span>.format(sub/<span class="number">1000</span>) <span class="keyword">for</span> sub <span class="keyword">in</span> x])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产次云, 通过 scale 控制清晰度</span></span><br><span class="line">titles = dump[<span class="string">&#x27;subject&#x27;</span>]</span><br><span class="line">titletxt = <span class="string">&#x27; &#x27;</span>.join(titles)</span><br><span class="line">wordcloud = WordCloud(scale=<span class="number">10</span>).generate(titletxt)</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.imshow(wordcloud, interpolation=<span class="string">&#x27;bilinear&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="修改-pandas-describe-格式"><a href="#修改-pandas-describe-格式" class="headerlink" title="修改 pandas describe 格式"></a>修改 pandas describe 格式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.set_option(<span class="string">&#x27;display.float_format&#x27;</span>, <span class="keyword">lambda</span> x: <span class="string">&#x27;&#123;:.2f&#125;KB&#x27;</span>.format(x/<span class="number">1000</span>))</span><br><span class="line">dump.describe()</span><br><span class="line"><span class="comment">#            size</span></span><br><span class="line"><span class="comment"># count   18.85KB</span></span><br><span class="line"><span class="comment"># mean    57.91KB</span></span><br><span class="line"><span class="comment"># std    143.28KB</span></span><br><span class="line"><span class="comment"># min      3.21KB</span></span><br><span class="line"><span class="comment"># 25%     11.09KB</span></span><br><span class="line"><span class="comment"># 50%     23.72KB</span></span><br><span class="line"><span class="comment"># 75%     42.62KB</span></span><br><span class="line"><span class="comment"># max   5235.50KB</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 poetry 和 click 自定义终端命令</title>
    <url>/hexo/2021/01/20/Python-build-and-test-a-cmd-interface-with-poetry-and-click/</url>
    <content><![CDATA[<p>最近打算新加一个命令到项目，突然发现项目启动不了了，查了一下是 <code>setup.py</code> 和 toml 文件的兼容性有问题，找到了解决方案，顺便结合找到的资料，将使用 poetry 和 click 自定义命令重新记录一下。</p>
<h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><p>Python: 3.7.3<br>pip: 19.3.1<br>OS:       posix</p>
<h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>新建项目 <code>poetry new --name greet --src clickgreet</code>，如过想名字保持一致，那直接 <code>poetry new greet</code> 即可。命令执行完后会在当前目录下生成项目，结构如下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">clickgreet</span><br><span class="line">├── README.rst</span><br><span class="line">├── pyproject.toml</span><br><span class="line">├── src</span><br><span class="line">│   └── greet</span><br><span class="line">│       └── __init__.py</span><br><span class="line">└── tests</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── test_greet.py</span><br></pre></td></tr></table></figure>

<p>安装依赖包 <code>poetry add click</code>, 首次运行 add 命令时，poetry 会帮你创建一个虚拟环境，并将包安装进去。安装完后你可以在项目的 toml 文件中看到 <code>tool.poetry.dependencies</code> 下有了 click 的依赖</p>
<p>在 src/greet 文件夹下新建 <code>greet.py</code> 添加逻辑代码, 代码实现如下功能：接受两个参数 name, count 后在终端输出对应次数的名字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(&#x27;--count&#x27;, default=1, help=&#x27;Number of greetings.&#x27;)</span></span><br><span class="line"><span class="meta">@click.option(&#x27;--name&#x27;, prompt=&#x27;Your name&#x27;,</span></span><br><span class="line">              help=<span class="string">&#x27;The person to greet.&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">count, name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simple program that greets NAME for a total of COUNT times.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(count):</span><br><span class="line">        click.echo(<span class="string">&#x27;Hello %s!&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    greet()</span><br></pre></td></tr></table></figure>

<p>在 toml 中添加程序入口</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[tool.poetry.scripts]</span></span><br><span class="line"><span class="attr">greet</span> = <span class="string">&quot;greet.greet:greet&quot;</span></span><br></pre></td></tr></table></figure>

<p>终端输入 <code>poetry install</code> 将代码安装到虚拟环境，之后输入 <code>poetry run greet</code> 试运行脚本，可以看到终端给出提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mypc ~/tmp/clickgreet &gt; poetry run greet</span><br><span class="line">Your name: jack</span><br><span class="line">Hello jack!</span><br></pre></td></tr></table></figure>

<p>至此，主题部分结束，下面开始编写测试部分，在目录的 <code>test_greet.py</code> 中添加测试代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> click.testing <span class="keyword">import</span> CliRunner</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> greet.greet <span class="keyword">import</span> greet</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> greet <span class="keyword">import</span> __version__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_version</span>():</span></span><br><span class="line">    <span class="keyword">assert</span> __version__ == <span class="string">&#x27;0.1.0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_greet_cli</span>():</span></span><br><span class="line">    runner = CliRunner()</span><br><span class="line">    result = runner.invoke(greet, [<span class="string">&#x27;--name&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>])</span><br><span class="line">    <span class="keyword">assert</span> result.exit_code == <span class="number">0</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&quot;Hello jack!&quot;</span> <span class="keyword">in</span> result.output</span><br></pre></td></tr></table></figure>

<p>终端输人 <code>poetry run pytest</code> 运行测试用例, 至此教程主体结束。</p>
<p>PS: 可以在 toml 中添加配置使用 douban 镜像加速下载</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[[tool.poetry.source]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;douban&quot;</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">&quot;https://pypi.doubanio.com/simple/&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Debug-Click-Command"><a href="#Debug-Click-Command" class="headerlink" title="Debug Click Command"></a>Debug Click Command</h2><p>测试代码，接收 count, name 参数并在终端输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(&#x27;--count&#x27;, default=1, help=&#x27;Number of greetings.&#x27;)</span></span><br><span class="line"><span class="meta">@click.option(&#x27;--name&#x27;, prompt=&#x27;Your name&#x27;,</span></span><br><span class="line">              help=<span class="string">&#x27;The person to greet.&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">count, name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simple program that greets NAME for a total of COUNT times.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(count):</span><br><span class="line">        click.echo(<span class="string">&#x27;Hello %s!&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    hello()</span><br></pre></td></tr></table></figure>

<p>配置 launch.json 运行文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;console&quot;</span>: <span class="string">&quot;integratedTerminal&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;--count&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;--name&quot;</span>, <span class="string">&quot;jaaack&quot;</span></span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击菜单栏的 debug 按钮，选择配置的 ‘click’ run config，点击这个配置<strong>左边</strong>的运行按钮，直接运行即可。需要注意的点：</p>
<ol>
<li>别点右上角那个，那个是直接运行当前文件的，不会接收配置的参数！！</li>
<li>当断点生效时，VSCode 还提供了一个 DEBUG CONSOLE 来给你操作运行时的变量，真是太酷了</li>
<li>如果你想要输入多行，使用 <code>Shift + Enter</code> 实现换行</li>
</ol>
<p>如果要调试带有 argumnet 注解的代码，比如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.argument(&#x27;input&#x27;, type=click.File(&#x27;rb&#x27;))</span></span><br><span class="line"><span class="meta">@click.argument(&#x27;output&#x27;, type=click.File(&#x27;wb&#x27;))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inout</span>(<span class="params">input, output</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Copy contents of INPUT to OUTPUT.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        chunk = input.read(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        output.write(chunk)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    inout([<span class="string">&quot;input_path&quot;</span>, <span class="string">&quot;output_path&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>只需要将 argument 直接写在最后的函数入口中就行了，这里有一个设定不是很理解，在最后一行，按理说我设置的参数列表应该是 <code>&quot;arg1&quot;, &quot;arg2&quot;</code> 才对，但是执行的时候会出问题，设置成 list type 的就没问题。。。</p>
<h2 id="集成-setup-py"><a href="#集成-setup-py" class="headerlink" title="集成 setup.py"></a>集成 setup.py</h2><p>以上的命令行运行时有一个限制，它必须在对应的文件夹下才能工作，pip 是支持将脚本安装到本地的。如何操作？步骤如下：</p>
<p>poetry 是没有 setup.py 文件的，运行 <code>poetry add dephell</code> 安装 dephell 来自动生成 setup.py 文件</p>
<p>toml 文件中添加生成 <code>setup.py</code> 的配置</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[tool.dephell.main]</span></span><br><span class="line"><span class="attr">from</span> = &#123;format = <span class="string">&quot;poetry&quot;</span>, path = <span class="string">&quot;pyproject.toml&quot;</span>&#125;</span><br><span class="line"><span class="attr">to</span> = &#123;format = <span class="string">&quot;setuppy&quot;</span>, path = <span class="string">&quot;setup.py&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>同时你还要修改 <code>[build-system]</code> 配置，在 requires 中添加 setuptools 的依赖 <code>requires = [&quot;setuptools&quot;, &quot;poetry&gt;=0.12&quot;]</code>，这是个 pip 的 bug 但是到 2020-1 为止还没有修复</p>
<p>运行 <code>dephell deps convert</code> 生成 setup.py 然后运行 <code>pip install -E .</code> 安装到本地。<code>cd</code> 到其他目录直接在终端输入 <code>greet</code> 测试通过，脚本正常工作，不需要什么 hack 的代码，棒棒哒 ╮(￣▽￣””)╭</p>
<h2 id="资料白嫖"><a href="#资料白嫖" class="headerlink" title="资料白嫖"></a>资料白嫖</h2><ul>
<li><a href="https://github.com/python-poetry/poetry/discussions/1135">setup.py 安装到本地报错 no module name ‘setuptools’</a></li>
<li><a href="https://dev.to/bowmanjd/build-a-command-line-interface-with-python-poetry-and-click-1f5k">poetry + click + UT guide</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>poetry</tag>
        <tag>vscode</tag>
        <tag>click</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中常用的代码段</title>
    <url>/hexo/2020/01/23/Python-code-snip-with-high-frequency/</url>
    <content><![CDATA[<p>记录一些我经常查找的 python 方法作为备忘</p>
<h2 id="Generate-random-int-list-or-just-a-requirement-of-loop-N-times"><a href="#Generate-random-int-list-or-just-a-requirement-of-loop-N-times" class="headerlink" title="Generate random int list, or just a requirement of loop N times"></a>Generate random int list, or just a requirement of loop N times</h2><p>it’s a common requirement and some guys achieve this goal by using Numpy lib, but it’s too heavy. you can do in this way:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">  print(random.randint(<span class="number">0</span>, <span class="number">100</span>))</span><br><span class="line">  </span><br><span class="line"><span class="comment"># the _ is from 0 - 9</span></span><br></pre></td></tr></table></figure>

<h2 id="Get-index-and-val-at-the-same-time"><a href="#Get-index-and-val-at-the-same-time" class="headerlink" title="Get index and val at the same time"></a>Get index and val at the same time</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> idx, val <span class="keyword">in</span> enumerate(a):</span><br><span class="line">   print(<span class="string">f&#x27;idx = <span class="subst">&#123;idx&#125;</span>, val = <span class="subst">&#123;val&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># idx = 0, val = a</span></span><br><span class="line"><span class="comment"># idx = 1, val = b</span></span><br><span class="line"><span class="comment"># idx = 2, val = c</span></span><br><span class="line"><span class="comment"># idx = 3, val = d</span></span><br></pre></td></tr></table></figure>

<p>if you want to specify the start index, you can add a second parameter to enumerate func</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># in this case, idx would start from 3</span></span><br><span class="line">a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> idx, val <span class="keyword">in</span> enumerate(a, <span class="number">3</span>):</span><br><span class="line">  print(<span class="string">f&#x27;idx = <span class="subst">&#123;idx&#125;</span>, val = <span class="subst">&#123;val&#125;</span>&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># idx = 3, val = a</span></span><br><span class="line"><span class="comment"># idx = 4, val = b</span></span><br><span class="line"><span class="comment"># idx = 5, val = c</span></span><br><span class="line"><span class="comment"># idx = 6, val = d</span></span><br></pre></td></tr></table></figure>

<h2 id="Ipython-交互界面重新引入修改后的包"><a href="#Ipython-交互界面重新引入修改后的包" class="headerlink" title="Ipython 交互界面重新引入修改后的包"></a>Ipython 交互界面重新引入修改后的包</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">importlib.reload(some_module)</span><br></pre></td></tr></table></figure>

<h2 id="for-loop-one-line-mode"><a href="#for-loop-one-line-mode" class="headerlink" title="for loop one line mode"></a>for loop one line mode</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_ids = [record[<span class="string">&#x27;login&#x27;</span>] <span class="keyword">for</span> record <span class="keyword">in</span> resp]</span><br><span class="line"></span><br><span class="line"><span class="comment"># if you need if condition</span></span><br><span class="line">list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">filter = [str(sub + <span class="string">&quot;tt&quot;</span>) <span class="keyword">for</span> sub <span class="keyword">in</span> list <span class="keyword">if</span> sub &gt;= <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<h2 id="repr-Vs-str"><a href="#repr-Vs-str" class="headerlink" title="repr Vs str"></a><strong>repr</strong> Vs <strong>str</strong></h2><ul>
<li>只重写 <strong>str</strong> 只定制在 print() 时的输出</li>
<li>只重写 <strong>repr</strong> print() 和 调用都输出定制内容</li>
<li>重写 <strong>str</strong> + <strong>repr</strong> print() 输出 str 定制内容，调用输出 repr 内容</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">N1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;N1: data=%s&#x27;</span> % self.data</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">N2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;N2: data=%s&#x27;</span> % self.data</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">N3</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;N3 repr: data=%s&#x27;</span> % self.data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;N3 str: data=%s&#x27;</span> % self.data</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;output</span></span><br><span class="line"><span class="string">n1 = N1(1)</span></span><br><span class="line"><span class="string"># In [30]: n1</span></span><br><span class="line"><span class="string"># Out[30]: &lt;BinaryTree.N1 at 0x10853fd30&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(n1)</span></span><br><span class="line"><span class="string"># N1: data=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n2 = N2(2)</span></span><br><span class="line"><span class="string"># In [33]: n2</span></span><br><span class="line"><span class="string"># Out[33]: N2: data=2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(n2)</span></span><br><span class="line"><span class="string"># N2: data=2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n3 = N3(3)</span></span><br><span class="line"><span class="string"># Out[36]: N3 repr: data=3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(n3)</span></span><br><span class="line"><span class="string"># N3 str: data=3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="How-to-print-in-string-formant"><a href="#How-to-print-in-string-formant" class="headerlink" title="How to print in string formant"></a>How to print in string formant</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;&#123; Test-&#123;&#125; &#125;&#125;&#x27;</span>.format(<span class="string">&#x27;output&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output: &#123; Test-output &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="遍历子目录"><a href="#遍历子目录" class="headerlink" title="遍历子目录"></a>遍历子目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">    <span class="keyword">for</span> sub <span class="keyword">in</span> files:</span><br><span class="line">        print(<span class="string">&#x27;name: %s&#x27;</span> %(os.path.join(root, sub)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者也可以使用 glob</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line">glob.glob(<span class="string">&#x27;./**/*.png&#x27;</span>, recursive=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 日期和时间</title>
    <url>/hexo/2020/06/18/Python-datetime/</url>
    <content><![CDATA[<p>对 python 中涉及到时间的类库做一个大致的了解并收集一些常用的 sample。类库包括：time, date, datetime, timezone 等</p>
<h2 id="datetime-日期时间"><a href="#datetime-日期时间" class="headerlink" title="datetime 日期时间"></a>datetime 日期时间</h2><p>时间类型分为感知型和简单型，感知型包含 timezone 信息，简单型则没有这种意义。</p>
<ul>
<li>date 都是简单型的</li>
<li>time 和 datetime 可以是简单型也可以是感知型，通过 d.tzinfo 不等于 None 或者 d.tzinfo.utcoffset(d) 部位 None 来确定</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间</span></span><br><span class="line">datetime.now()</span><br><span class="line"><span class="comment"># Out[18]: datetime.datetime(2020, 6, 18, 17, 2, 48, 14847)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 感知型 now</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timezone</span><br><span class="line">dt =datetime.now(timezone.utc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime 得到 s</span></span><br><span class="line">dt.timestamp()</span><br><span class="line"><span class="comment"># Out[41]: 1592472504.59345</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s 转 datetime, ms 的话把时间除1000.0即可 1592472504.59345/1000.0</span></span><br><span class="line">d = datetime.fromtimestamp(<span class="number">1592472504.59345</span>)</span><br><span class="line"><span class="comment"># Out[43]: datetime.datetime(2020, 6, 18, 17, 28, 24, 593450)</span></span><br></pre></td></tr></table></figure>

<p>date, time, datetime 都支持 strftime(), 只有 datetime 支持 strptime()。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># strftime: string from time, 即格式化输出时间, 对象方法</span></span><br><span class="line">now = datetime.now()</span><br><span class="line">now.strftime(<span class="string">&#x27;[%y%m%d]-[%H:%M:%S]&#x27;</span>)</span><br><span class="line"><span class="comment"># Out[22]: &#x27;[200618]-[17:12:46]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># strptime: string parse to time, 即将字符串转化为时间, 类方法</span></span><br><span class="line">dt = datetime.strptime(<span class="string">&#x27;[200618]-[17:12:46]&#x27;</span>, <span class="string">&#x27;[%y%m%d]-[%H:%M:%S]&#x27;</span>)</span><br><span class="line"><span class="comment"># Out[24]: datetime.datetime(2020, 6, 18, 17, 12, 46)</span></span><br></pre></td></tr></table></figure>

<h2 id="deltatime-时间间隔"><a href="#deltatime-时间间隔" class="headerlink" title="deltatime 时间间隔"></a>deltatime 时间间隔</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">delta = timedelta(days=<span class="number">50</span>, seconds=<span class="number">27</span>, microseconds=<span class="number">10</span>, milliseconds=<span class="number">29000</span>, minutes=<span class="number">5</span>, hours=<span class="number">8</span>, weeks=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># Out[16]: datetime.timedelta(days=64, seconds=29156, microseconds=10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过 datetime 做计算得到</span></span><br><span class="line">now - dt</span><br><span class="line"><span class="comment"># Out[26]: datetime.timedelta(seconds=329, microseconds=894908)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>date</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 脚本高频报错</title>
    <url>/hexo/2020/06/12/Python-exception-reminder/</url>
    <content><![CDATA[<h2 id="requests-lib-SSLError"><a href="#requests-lib-SSLError" class="headerlink" title="requests lib SSLError"></a>requests lib SSLError</h2><p>在使用 requests 发送 API 请求的时候，如果网站是 https 的，如果你没有对应的证书就会抛 SSLError, 示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers  = &#123;<span class="string">&#x27;Authorization&#x27;</span> : <span class="string">&#x27;token xxx&#x27;</span>&#125;</span><br><span class="line">url = <span class="string">&#x27;https://github.domain.com/api/v3/users/ixxx&#x27;</span></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; Error show as:</span></span><br><span class="line"><span class="string">SSLError: HTTPSConnectionPool(host=&#x27;github.wdf.sap.corp&#x27;, port=443): Max retries exceeded with url: /api/v3/users/i332399 (Caused by SSLError(SSLCertVerificationError(1, &#x27;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1076)&#x27;)))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [7]: resp = requests.get(url, headers=headers, verify=False)</span></span><br><span class="line"><span class="string">/Users/i306454/gitStore/mycommands/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py:851: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</span></span><br><span class="line"><span class="string">  InsecureRequestWarning)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>解决方案有两个</p>
<ol>
<li>跳过verify</li>
<li>指定证书</li>
</ol>
<blockquote>
<p>方案一</p>
</blockquote>
<p>requests.get(url, auth=(), verify=False)<br>但是，这种方式会在发完request之后抛warning，对于强迫症患者说简直不能忍。</p>
<blockquote>
<p>方案二</p>
</blockquote>
<p>在request中指定证书路径 <code>requests.get(url, auth=auth, verify=&#39;/Users/jack/Downloads/my.crt&#39;)</code></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中的 import 关键字</title>
    <url>/hexo/2020/01/23/Python-keyword-of-import/</url>
    <content><![CDATA[<p>看 you-get 源码时卡在了 import package 这个点，特此记录一下搜索资料的结果</p>
<h2 id="Import-Of-Python"><a href="#Import-Of-Python" class="headerlink" title="Import Of Python"></a>Import Of Python</h2><p>你在看 python 代码的时候经常会在文件头部发现一串代码，格式类似 <code>import xxx</code> 或者 <code>from xxx import xxx</code>。功能都是一样的，引入代码重复利用。分两种，一种是引入 module，另一种是映入 package。</p>
<ul>
<li>module 简单理解就是组织好的 python 文件</li>
<li>package 即使用文件夹形式组织 python 文件，在 package 的更目录下会有一个 <code>__init__.py</code> 文件作为 package 的入口</li>
</ul>
<h2 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h2><p>clone 了 rich 的源码通过 <code>python ./styled.py</code> 运行时报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(rich-2qeSub0j-py3.7)  i306454@C02TW719HTD5  ~/gitStore/rich/rich   master  python ./styled.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;./styled.py&quot;</span>, line 3, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from .measure import Measurement</span><br><span class="line">ImportError: attempted relative import with no known parent package</span><br></pre></td></tr></table></figure>

<p>这是因为对应的文件中采用了相对引用就是类似 <code>from .style import StyleType</code> 的语法，我们可以通过在上一级目录下输入 <code>python -m rich.styled</code> 运行。注意命令没有 <code>.py</code> 后缀</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/yan-lei/p/7828871.html">cnlogs - Python学习者</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>import</tag>
        <tag>module</tag>
        <tag>package</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 解析 csv 文件</title>
    <url>/hexo/2020/06/18/Python-parse-csv/</url>
    <content><![CDATA[<p>有一个 csv 文件，其中有个 column 名为 ‘_raw’ 包含我们需要的信息，写一段脚本解析之</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">_raw 中文本为</span><br><span class="line"></span><br><span class="line">08:42:50,222 INFO  [RESTCallbackSubscriber] [customerId,customerId,null,null,SFAPI,null,null] [IrisSubscriber Container[queue_seb.subscriber.pillar.deactivateuser]1]Postback for event com.company.hermes.core.SFEvent=&#123;meta:Meta=&#123;priority:0,proxyId:&quot;null&quot;,serverName:&quot;null&quot;,topic:&quot;com.company.platform.mobile.deactivateuser&quot;,ptpName:null,companyId:&quot;customerId&quot;,eventId:&quot;a3b43584-3ceb-4760-9c01-699d635f4461&quot;,type:&quot;null&quot;,sourceArea:&quot;null&quot;,effectiveStartDate:&quot;null&quot;,publishedAt:&quot;2020-05-31 08:42:39&quot;,publishBy:&quot;SFAPI&quot;,publishServer:&quot;serverip&quot;,externalAllowed:false,filterParameters:&#123;&#123;companyId=customerId, userId=SFAPI, type=null, sourceArea=null, effectiveStartDate=null, publishedAt=1590914553205, publishedBy=SFAPI, externalAllowed=false, publishServer=serverip, priority=0, proxyId=null, serverName=null, topic=com.company.platform.mobile.deactivateuser, ptpName=null&#125;&#125;&#125;,body:&#123;&quot;companyId&quot;: &quot;customerId&quot;, &quot;inactiveUserId&quot;: [&quot;E_UUU_21934&quot;,&quot;E_UUU_21935&quot;]&#125;&#125; sent to https://domain/api/deactivate, (HTTP/1.1 200 OK)</span><br><span class="line"></span><br><span class="line">提取目标：publishedAt, publishedAt of filterParameters, inactiveUserId</span><br></pre></td></tr></table></figure>

<h2 id="Impl"><a href="#Impl" class="headerlink" title="Impl"></a>Impl</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="comment"># 拿到 csv 的 _raw 列数据</span></span><br><span class="line">context = []</span><br><span class="line">rows = []</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;dump_csv.csv&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">   contexts = csv.reader(csvfile)</span><br><span class="line">   <span class="comment"># 使用 reader = csv.DictReader(csvfile) 的话可以使用 column name 取值</span></span><br><span class="line">   <span class="comment"># 例如: reader[&#x27;companyId&#x27;], 不过缺点是要在 with loop 中处理完数据</span></span><br><span class="line">   rows = [row[<span class="number">16</span>] <span class="keyword">for</span> row <span class="keyword">in</span> contexts]</span><br><span class="line">   rows = [<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析 _raw 数据特性，决定使用正则匹配数据</span></span><br><span class="line"><span class="comment"># publishedAt:&quot;(.*?)&quot; 加 ? 表示 非贪婪</span></span><br><span class="line"><span class="comment"># publishedAt=(\d+)</span></span><br><span class="line"><span class="comment"># inactiveUserId&quot;: (\[.*?\])</span></span><br><span class="line"><span class="comment"># 以上表达式取 group 1 数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># re.findAll</span></span><br><span class="line"><span class="comment"># re.match() 从开头开始匹配</span></span><br><span class="line"><span class="comment"># re.search(reg, src) 匹配任意位置</span></span><br><span class="line"></span><br><span class="line">reg1 = <span class="string">&#x27;publishedAt:&quot;(.*?)&quot;&#x27;</span></span><br><span class="line">reg2 = <span class="string">&#x27;publishedAt=(\d+)&#x27;</span></span><br><span class="line">reg3 = <span class="string">&#x27;inactiveUserId&quot;: (\[.*?\])&#x27;</span></span><br><span class="line"></span><br><span class="line">rowlist = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    infolist = []</span><br><span class="line">    timestr01 = re.search(reg1, row).group(<span class="number">1</span>)</span><br><span class="line">    d1 = datetime.strptime(timestr01, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    infolist.append(d1)</span><br><span class="line"></span><br><span class="line">    timestr2 = int(re.search(reg2, row).group(<span class="number">1</span>))</span><br><span class="line">    d2 = datetime.fromtimestamp(timestr2/<span class="number">1000.0</span>)</span><br><span class="line">    infolist.append(d2)</span><br><span class="line"></span><br><span class="line">    users = re.search(reg3, row).group(<span class="number">1</span>)</span><br><span class="line">    ulist = eval(users) <span class="comment"># string 转化为 list</span></span><br><span class="line">    infolist.append(ulist)</span><br><span class="line">    rowlist.append(infolist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把数据根据时间先后排序</span></span><br><span class="line">sortedList = sorted(rowlist, key=<span class="keyword">lambda</span> sub: sub[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printList</span>(<span class="params">line</span>):</span></span><br><span class="line">    formatStr01 = <span class="string">&#x27;%y-%m-%d %H:%M:%S&#x27;</span></span><br><span class="line">    print(line[<span class="number">0</span>].strftime(formatStr01), end=<span class="string">&#x27; | &#x27;</span>)</span><br><span class="line">    print(<span class="string">&quot;%15f&quot;</span> % (line[<span class="number">1</span>].timestamp()), end=<span class="string">&#x27; | &#x27;</span>)</span><br><span class="line">    arrStr = str(line[<span class="number">2</span>][:<span class="number">5</span>]) + <span class="string">&quot;...&quot;</span> + str(len(line[<span class="number">2</span>])) <span class="keyword">if</span> len(line[<span class="number">2</span>]) &gt; <span class="number">5</span> <span class="keyword">else</span> str(line[<span class="number">2</span>])</span><br><span class="line">    print(arrStr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sub <span class="keyword">in</span> sortedList:</span><br><span class="line">    printList(sub)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>csv</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 解析 PDF</title>
    <url>/hexo/2020/06/19/Python-parse-pdf/</url>
    <content><![CDATA[<p>使用 python 解析 PDF 文件，提取文件中表格的数据。随便在网上找了一个 PDF 文件做样本。使用 <code>filetype:pdf 价格表格</code> 的到样本文件。</p>
<p>稍微检索了一下，当下貌似名为 camelot 的 python lib 很火，就用这个做实验吧</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这一步还挺复杂，需要安装挺多依赖，具体参考官方文档，这里只记录我本地环境的安装步骤</p>
<p>MacOS:</p>
<ol>
<li><code>brew install tcl-tk ghostscript</code>, 然后终端输入 <code>gs -version</code>, 在 python 命令行中输入 <code>import tkinter</code> 验证依赖是否安装成功</li>
<li><code>pip3 install camelot-py[cv] --user</code> 安装报错，是 zsh 的锅，切换回 bash 安装即可</li>
</ol>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>运行了一下官方给的例子，成功。但是我自己下载的中文 pdf 有问题，查了下，是说 camelot 基于 PyPDF2，然后这个 lib 是不支持处理中文字符的，不过可以通过修改对应 lib 的源码实现支持，网上有教程。不过我暂时只处理英文文档，就不纠结了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> camelot</span><br><span class="line">tables = camelot.read_pdf(<span class="string">&#x27;foo.pdf&#x27;</span>)</span><br><span class="line">tables[<span class="number">0</span>].df</span><br><span class="line"><span class="comment"># 输出表格，foo.pdf 在官方教程中有给下载链接</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>Poetry 快速入门</title>
    <url>/hexo/2020/07/17/Python-poetry-quick-start/</url>
    <content><![CDATA[<p>Poetry 类 pipenv 工具，据说 lock 什么的速度更快，而且有集成发布功能，刚好 rich 这个项目有用这个，刚好在看源码的时候体验一把</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># powershell 输入</span></span><br><span class="line">(Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py -UseBasicParsing).Content | python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示 error, 原因是 DNS 污染</span></span><br><span class="line">Invoke-WebRequest : 未能解析此远程名称: <span class="string">&#x27;raw.githubusercontent.com&#x27;</span></span><br><span class="line">所在位置 行:1 字符: 2</span><br><span class="line">+ (Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poet ...</span><br><span class="line">+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest]，WebExce</span><br><span class="line">    ption</span><br><span class="line">    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决方案：修改 host 文件</span></span><br><span class="line"><span class="comment"># 目录：C:/Windows/System32/drivers/etc/</span></span><br><span class="line"><span class="comment"># 管理员模式打开，添加文本: 151.101.0.133 raw.githubusercontent.com</span></span><br><span class="line"><span class="comment"># 刷新DNS</span></span><br><span class="line">ipconfig /flushdns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接成功，但是报其他错误</span></span><br><span class="line">Invoke-WebRequest : 基础连接已经关闭: 发送时发生错误。</span><br><span class="line">所在位置 行:1 字符: 2</span><br><span class="line">+ (Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poet ...</span><br><span class="line">+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest]，WebExce</span><br><span class="line">    ption</span><br><span class="line">    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改完之后各种报错，烦躁。这个命令就是下载一个 get-poetry.py 的 raw 文件，然后使用 python get-poetry.py 安装。我直接下载这个文件然后安装了。。。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尼玛，被墙了安装超级慢 (╬▔皿▔)╯ 最后用小飞机开启全局代理， 再 CMD 窗口 python get-poetry.py 安装成功</span></span><br><span class="line"></span><br><span class="line">Retrieving Poetry metadata</span><br><span class="line"></span><br><span class="line">Before we start, please answer the following questions.</span><br><span class="line">You may simply press the Enter key to leave unchanged.</span><br><span class="line">Modify PATH variable? ([y]/n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Welcome to Poetry!</span></span><br><span class="line">This will download and install the latest version of Poetry,</span><br><span class="line">a dependency and package manager <span class="keyword">for</span> Python.</span><br><span class="line">It will add the `poetry` <span class="built_in">command</span> to Poetry<span class="string">&#x27;s bin directory, located at:</span></span><br><span class="line"><span class="string">%USERPROFILE%\.poetry\bin</span></span><br><span class="line"><span class="string">This path will then be added to your `PATH` environment variable by</span></span><br><span class="line"><span class="string">modifying the `HKEY_CURRENT_USER/Environment/PATH` registry key.</span></span><br><span class="line"><span class="string">You can uninstall at any time by executing this script with the --uninstall option,</span></span><br><span class="line"><span class="string">and these changes will be reverted.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Installing version: 1.0.10</span></span><br><span class="line"><span class="string">  - Downloading poetry-1.0.10-win32.tar.gz (11.96MB)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Poetry (1.0.10) is installed now. Great!</span></span><br><span class="line"><span class="string">To get started you need Poetry&#x27;</span>s bin directory (%USERPROFILE%\.poetry\bin) <span class="keyword">in</span> your `PATH`</span><br><span class="line">environment variable. Future applications will automatically have the</span><br><span class="line">correct environment, but you may need to restart your current shell.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启一下终端，输入命令检测安装</span></span><br><span class="line">poetry --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是在 vscode 的终端中还是不能识别，手动将 user\.poetry\bin 添加到系统 path 中重启 vscode, 识别成功</span></span><br></pre></td></tr></table></figure>

<p>PS: 国内安装各种软件有助于增长火气！！！</p>
<h2 id="常用-Command"><a href="#常用-Command" class="headerlink" title="常用 Command"></a>常用 Command</h2><h3 id="poetry-new-project-name"><a href="#poetry-new-project-name" class="headerlink" title="poetry new project-name"></a>poetry new project-name</h3><p>初始化项目, 创建必要文件。你可以在 git 上先建一个空的仓库然后，本地做完 poetry init 和 git init 之后 match 一下</p>
<p>初始化后目录为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">job-spider</span><br><span class="line">├── pyproject.toml</span><br><span class="line">├── README.rst</span><br><span class="line">├── job_spider</span><br><span class="line">│   └── __init__.py</span><br><span class="line">└── tests</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── test_job_spider.py</span><br></pre></td></tr></table></figure>

<p>通过配置 toml 文件指定国内源加速</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[[tool.poetry.source]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;douban&quot;</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">&quot;https://pypi.doubanio.com/simple/&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="poetry-config-–list"><a href="#poetry-config-–list" class="headerlink" title="poetry config –list"></a>poetry config –list</h3><p>查看配置，比如 virtualenv 会创建在哪里之类的。这个 cmd 还是很有帮助的，可以通过它知道你的虚拟环境创建在哪里，是不是要在 project 创建 venv 等</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ poetry config --list</span><br><span class="line">cache-dir = <span class="string">&quot;/Users/jack/Library/Caches/pypoetry&quot;</span></span><br><span class="line">virtualenvs.create = <span class="literal">true</span></span><br><span class="line">virtualenvs.in-project = <span class="literal">false</span></span><br><span class="line">virtualenvs.path = <span class="string">&quot;&#123;cache-dir&#125;/virtualenvs&quot;</span> <span class="comment"># /Users/jack/Library/Caches/pypoetry/virtualenvs</span></span><br></pre></td></tr></table></figure>

<p>通过指定 <code>poetry config virtualenvs.in-project true</code> 可以指定将虚拟环境创建到 project 目录下面，方便管理</p>
<h3 id="poetry-shell"><a href="#poetry-shell" class="headerlink" title="poetry shell"></a>poetry shell</h3><p>激活环境, 如果还没有创建过虚拟环境，他还会根据 toml 文件新建一个</p>
<h3 id="poetry-install"><a href="#poetry-install" class="headerlink" title="poetry install"></a>poetry install</h3><p>并不是安装依赖，而是根据 toml 文件安装项目依赖，对标 <code>pipenv sync</code></p>
<h3 id="poetry-add"><a href="#poetry-add" class="headerlink" title="poetry add"></a>poetry add</h3><p>对标 pipenv 中的 <code>pipenv install</code>, 使用 <code>add --dev/-D flask</code> 安装 dev 相关的包</p>
<h3 id="poetry-env-info"><a href="#poetry-env-info" class="headerlink" title="poetry env info"></a>poetry env info</h3><p><code>poetry env info</code>: 显示运行环境信息，包括本地 OS 和虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Virtualenv</span><br><span class="line">Python:         3.7.5</span><br><span class="line">Implementation: CPython</span><br><span class="line">Path:           /Users/jack/gitStore/mycommands/.venv</span><br><span class="line">Valid:          True</span><br><span class="line"></span><br><span class="line">System</span><br><span class="line">Platform: darwin</span><br><span class="line">OS:       posix</span><br><span class="line">Python:   /Library/Frameworks/Python.framework/Versions/3.7</span><br></pre></td></tr></table></figure>

<p><code>poetry env list</code>: 显示可用的 env 列表</p>
<p>官方推荐 poetry 结合 pyenv 管理各种版本的虚拟环境</p>
<h2 id="poetry-show"><a href="#poetry-show" class="headerlink" title="poetry show"></a>poetry show</h2><p>显示已安装的依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">poetry show</span><br><span class="line">atomicwrites       1.4.0  Atomic file writes.</span><br><span class="line">attrs              19.3.0 Classes Without Boilerplate</span><br><span class="line">click              7.1.2  Composable <span class="built_in">command</span> line interface toolkit</span><br><span class="line">flask              1.1.2  A simple framework <span class="keyword">for</span> building complex web applications.</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="Resolving-dependency-挺慢"><a href="#Resolving-dependency-挺慢" class="headerlink" title="Resolving dependency 挺慢"></a>Resolving dependency 挺慢</h3><p>在安装更新的时候 resolving dependency 挺慢的，等了好一会儿，一度认为进程死了。但是第二次就快多了，可能是有 cache</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\jack\gitStore\job-spider\job_spider&gt;poetry install --verbose</span><br><span class="line">Updating dependencies</span><br><span class="line">Resolving dependencies...</span><br></pre></td></tr></table></figure>

<h3 id="编译器识别有问题"><a href="#编译器识别有问题" class="headerlink" title="编译器识别有问题"></a>编译器识别有问题</h3><p>观察 VSCode 的左下角，python 编译器经常选择有问题，会找不到自己创建的虚拟环境路径。可以点击它，然后根据 poetry shell 的提示手动设置，路径如 <code>C:\Users\jack\AppData\Local\pypoetry\Cache\virtualenvs\job-spider-UlnXzhyt-py3.7</code> 做完后他会自动保存到 <code>.vscode</code> 的工程文件夹下。但是我默认这个文件是不 check in 的，所以然并卵 ┑(￣Д ￣)┍</p>
<h3 id="Win-启动-flask-失败"><a href="#Win-启动-flask-失败" class="headerlink" title="Win 启动 flask 失败"></a>Win 启动 flask 失败</h3><p>新建了一个 flask demo，启动的时候报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\jack\gitStore\job-spider&gt; poetry run .\job_spider\main.py</span><br><span class="line"></span><br><span class="line">[OSError]</span><br><span class="line">[WinError 193] %1 不是有效的 Win32 应用程序。</span><br></pre></td></tr></table></figure>

<p>据说是 windows 上安装了 64 位的 python， 调用了 32 位的 dll 会报这个错，换个 32 位的 python 就能解决。将原有的 64 位卸载，删除各种环境变量，重新安装 32 位 python，然并卵，要自闭了 (￣ε(#￣)</p>
<p>暂时没有什么其他更好的解决方案，打算用虚拟机或者在 MacOS 上完成开发以节省时间</p>
<p>今天在 Mac 上用 3.7.8 的版本也会抛同样的错误！！！难道是版本有问题？果断用 <code>3.6.6</code>, <code>3.7.3</code> 试试，可行。。。。回去再到 Windows 的机子上试试这个版本。</p>
<p>在 Win 上换 3.7.3 之后一切正常 ╰(艹皿艹 )</p>
<h3 id="MacOS-poetry-install-报错"><a href="#MacOS-poetry-install-报错" class="headerlink" title="MacOS poetry install 报错"></a>MacOS poetry install 报错</h3><p>切换到 3.6.5 之后 poetry install 报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[EnvCommandError]</span><br><span class="line">Command [<span class="string">&#x27;/Users/jack/gitStore/splunk-collector/.venv/bin/pip&#x27;</span>, <span class="string">&#x27;install&#x27;</span>, <span class="string">&#x27;--no-deps&#x27;</span>, <span class="string">&#x27;zipp==3.1.0&#x27;</span>] errored with the following <span class="built_in">return</span> code 1, and output:</span><br><span class="line">pip is configured with locations that require TLS/SSL, however the ssl module <span class="keyword">in</span> Python is not available.</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>是 OpenSSL 包缺失导致的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修复，第一行可以不运行，下载包经常卡住</span></span><br><span class="line">brew update &amp;&amp; brew upgrade</span><br><span class="line">brew uninstall --ignore-dependencies openssl; brew install https://github.com/tebelorg/Tump/releases/download/v1.0.0/openssl.rb</span><br><span class="line"></span><br><span class="line">brew reinstall python</span><br></pre></td></tr></table></figure>

<p>这之后还重新将 pyenv 管理的 python 重新卸载安装了一下，问题解决</p>
<h3 id="MacOS-poetry-run"><a href="#MacOS-poetry-run" class="headerlink" title="MacOS poetry run"></a>MacOS poetry run</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> poetry run splunk_collector/main.py</span><br><span class="line"></span><br><span class="line">[PermissionError]</span><br><span class="line">[Errno 13] Permission denied</span><br></pre></td></tr></table></figure>

<p>运行 flask demo, permission 报错。完全搞错了。。。。flask 并不是那样运行的。保存完文件之后, 通过如下方式运行，而不是直接用 poetry 或者 python 运行，我 凸^-^凸</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> FLASK_APP=hello.py</span><br><span class="line">$ flask run</span><br><span class="line"> * Running on http://127.0.0.1:5000/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>poetry</tag>
      </tags>
  </entry>
  <entry>
    <title>Python re 包中方法简介</title>
    <url>/hexo/2021/03/03/Python-re-lib-method-abstrct/</url>
    <content><![CDATA[<p>Python 的 re 包里面的 search 和 match 经常搞不清楚，特意整理记录下 re 包支持的方法</p>
<p><strong>re.search(pattern, string, flags=0)</strong> 字符串任意位置匹配</p>
<p>Scan through string looking for the first location where the regular expression pattern produces a match, and return a corresponding match object. Return None if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = re.search(<span class="string">r&#x27;[\d]+&#x27;</span>, <span class="string">&#x27;aaa123bbbb&#x27;</span>)</span><br><span class="line">ret.group(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;123&#x27;</span></span><br></pre></td></tr></table></figure>


<p><strong>re.match(pattern, string, flags=0)</strong> 从头开始匹配</p>
<p>If zero or more characters at the beginning of string match the regular expression pattern, return a corresponding match object. Return None if the string does not match the pattern; note that this is different from a zero-length match.</p>
<p>Note that even in MULTILINE mode, re.match() will only match at the beginning of the string and not at the beginning of each line.</p>
<p>If you want to locate a match anywhere in string, use search() instead (see also search() vs. match()).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.match(<span class="string">r&#x27;[\d]+&#x27;</span>, <span class="string">&#x27;aaa123aaa&#x27;</span>)</span><br><span class="line"><span class="comment"># null</span></span><br><span class="line"></span><br><span class="line">re.match(<span class="string">r&#x27;[\d]+&#x27;</span>, <span class="string">&#x27;123aaa&#x27;</span>) </span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">3</span>), match=<span class="string">&#x27;123&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 使用 json 序列化</title>
    <url>/hexo/2020/06/13/Python-serialization-data-to-json/</url>
    <content><![CDATA[<h2 id="dump-Vs-dumps"><a href="#dump-Vs-dumps" class="headerlink" title="dump Vs dumps"></a>dump Vs dumps</h2><p>这两个函数都可以用来做序列化，唯一的区别是 dump 需要指定一个 io，比如打开的文件作为输出的地方，而 dumps 默认是以 stdout 做为输出端的，也就是打印在终端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">a = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jack&#x27;</span>&#125;</span><br><span class="line">json.dump(a)</span><br><span class="line"><span class="comment"># Out[6]: &#x27;&#123;&quot;name&quot;: &quot;jack&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json.dump([a, a], file)</span><br><span class="line"><span class="comment"># 当前目录下会生产名为 data.json 的文件，内容为 [&#123;&quot;name&quot;: &quot;jack&quot;&#125;, &#123;&quot;name&quot;: &quot;jack&quot;&#125;]</span></span><br></pre></td></tr></table></figure>

<h2 id="load-Vs-loads"><a href="#load-Vs-loads" class="headerlink" title="load Vs loads"></a>load Vs loads</h2><p>有了前面的基础，理解 load 和 loads 也是一个套路，一个直接从你指定的 string 加载，一个从你指定的文件加载</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = json.loads(<span class="string">&#x27;&#123;&quot;name&quot;: &quot;jack&quot;&#125;&#x27;</span>)</span><br><span class="line">ret, type(ret)</span><br><span class="line"><span class="comment"># Out[11]: (&#123;&#x27;name&#x27;: &#x27;jack&#x27;&#125;, dict)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;data.json&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    ret = json.load(file)</span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># [&#123;&#x27;name&#x27;: &#x27;jack&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;jack&#x27;&#125;]</span></span><br></pre></td></tr></table></figure>

<h2 id="支持中文"><a href="#支持中文" class="headerlink" title="支持中文"></a>支持中文</h2><p>写入文件是指定 encoding 和 ensure_ascii 参数，读取时指定 encoding 就可以了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">me = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;我&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;dump3.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json.dump(me, file, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;dump3.json&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    ret = json.load(file)</span><br><span class="line">    print(ret)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;我&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="序列化-Object"><a href="#序列化-Object" class="headerlink" title="序列化 Object"></a>序列化 Object</h2><p>序列化对象时可以在 dump(s) 的方法中指定一个自己的序列化规则类, 一种是通过 cls 参数，一种是通过 default 参数。不过有一个需要注意的点是，使用时并不指代整个对象的序列化逻辑，而是对那些不知道怎么序列化的部分给出逻辑，这块挺绕的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该例子中，Person 是自定义的类，所以调用 dumps 时，如果直接传入，会抛 exception: TypeError: Object of type Person is not JSON serializable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过指定 default 参数，给出转化规则</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PersonConvert</span>(<span class="params">person</span>):</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(person, Person):</span><br><span class="line">        <span class="keyword">return</span> person.__dict__</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError</span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;jack&#x27;</span>,<span class="number">30</span>)</span><br><span class="line">json.dumps(p, default=PersonConvert)</span><br><span class="line"><span class="comment"># Out[28]: &#x27;&#123;&quot;name&quot;: &quot;jack&quot;, &quot;age&quot;: 30&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以通过指定 cls 参数，给出转化规则</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonEncoder</span>(<span class="params">json.JSONEncoder</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(obj, Person):</span><br><span class="line">            <span class="keyword">return</span> obj.__dict__</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> json.JSONEncoder.default(self, obj)</span><br><span class="line"></span><br><span class="line">json.dumps(p, cls=PersonEncoder)</span><br><span class="line"><span class="comment"># Out[30]: &#x27;&#123;&quot;name&quot;: &quot;jack&quot;, &quot;age&quot;: 30&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果此时我们对 Person 做一下升级，添加一个 datetime 属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.create_date = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 那么之前的函数就不够用了，我们除了要处理 Person 的逻辑，还要处理 datetime 的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PersonConvertV2</span>(<span class="params">obj</span>):</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(obj, Person):</span><br><span class="line">        <span class="keyword">return</span> obj.__dict__</span><br><span class="line">    <span class="keyword">elif</span> isinstance(obj, datetime):</span><br><span class="line">        <span class="keyword">return</span> obj.timestamp()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError</span><br><span class="line"></span><br><span class="line">p2 = Person(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">31</span>)</span><br><span class="line">json.dumps(p2, default=PersonConvertV2)</span><br><span class="line"><span class="comment"># Out[46]: &#x27;&#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 31, &quot;create_date&quot;: 1592802400.657711&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网上有给出比较多经典的转化方式，在转化过程中会携带 class, module 的信息，为反序列化做准备</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">obj_to_dict</span>(<span class="params">obj</span>):</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(obj, Person):</span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        d[<span class="string">&#x27;__class__&#x27;</span>] = obj.__class__.__name__</span><br><span class="line">        d[<span class="string">&#x27;__module__&#x27;</span>] = obj.__module__</span><br><span class="line">        d.update(obj.__dict__)</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">        <span class="keyword">elif</span> isinstance(obj, datetime):</span><br><span class="line">            <span class="keyword">return</span> obj.timestamp()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError</span><br><span class="line"></span><br><span class="line">json.dumps(p2, default=obj_to_dict)</span><br><span class="line"><span class="comment"># Out[54]: &#x27;&#123;&quot;__class__&quot;: &quot;Person&quot;, &quot;__module__&quot;: &quot;__main__&quot;, &quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 31, &quot;create_date&quot;: 1592802400.657711&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>理解了 encode 的逻辑，decode 也差不多。不过逻辑稍微有点区别，他是在遇到 dict 的时候去做判断的。而且从他的输出看，应该是由内而外的进行解析的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">dict_to_obj</span>(<span class="params">d</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;level01&quot;</span> <span class="keyword">in</span> d:</span><br><span class="line">        print(<span class="string">&quot;l1: %s&quot;</span> % d)</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;level02&quot;</span> <span class="keyword">in</span> d:</span><br><span class="line">        print(<span class="string">&quot;l2: %s&quot;</span> %d)</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError</span><br><span class="line"></span><br><span class="line">json.loads(jstr, object_hook=dict_to_obj)</span><br><span class="line"><span class="comment"># l2: &#123;&#x27;level02&#x27;: &#x27;true&#x27;, &#x27;age&#x27;: 30&#125;</span></span><br><span class="line"><span class="comment"># l1: &#123;&#x27;level01&#x27;: &#x27;true&#x27;, &#x27;name&#x27;: &#x27;jack&#x27;, &#x27;info&#x27;: &#123;&#x27;level02&#x27;: &#x27;true&#x27;, &#x27;age&#x27;: 30&#125;&#125;     </span></span><br><span class="line"><span class="comment"># Out[13]: &#123;&#x27;level01&#x27;: &#x27;true&#x27;, &#x27;name&#x27;: &#x27;jack&#x27;, &#x27;info&#x27;: &#123;&#x27;level02&#x27;: &#x27;true&#x27;, &#x27;age&#x27;: 30&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dict_to_obj</span>(<span class="params">our_dict</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Function that takes in a dict and returns a custom object associated with the dict.</span></span><br><span class="line"><span class="string">    This function makes use of the &quot;__module__&quot; and &quot;__class__&quot; metadata in the dictionary</span></span><br><span class="line"><span class="string">    to know which object type to create.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;__class__&quot;</span> <span class="keyword">in</span> our_dict:</span><br><span class="line">        <span class="comment"># Pop ensures we remove metadata from the dict to leave only the instance arguments</span></span><br><span class="line">        class_name = our_dict.pop(<span class="string">&quot;__class__&quot;</span>)</span><br><span class="line">        <span class="comment"># Get the module name from the dict and import it</span></span><br><span class="line">        module_name = our_dict.pop(<span class="string">&quot;__module__&quot;</span>)</span><br><span class="line">        <span class="comment"># We use the built in __import__ function since the module name is not yet known at runtime</span></span><br><span class="line">        module = __import__(module_name)</span><br><span class="line">        <span class="comment"># Get the class from the module</span></span><br><span class="line">        class_ = getattr(module,class_name)</span><br><span class="line">        <span class="comment"># Use dictionary unpacking to initialize the object</span></span><br><span class="line">        obj = class_.__new__(class_)</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> our_dict.items():</span><br><span class="line">            <span class="keyword">if</span> key == <span class="string">&#x27;create_date&#x27;</span>:</span><br><span class="line">                value = datetime.fromtimestamp(value)</span><br><span class="line">            setattr(obj, key, value)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        obj = our_dict</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">jstr = <span class="string">&#x27;&#123;&quot;__class__&quot;: &quot;Person&quot;, &quot;__module__&quot;: &quot;__main__&quot;, &quot;name&quot;: &quot;Jack&quot;, &quot;age&quot;: 30, &quot;create_date&quot;: 1592805275.55762&#125;&#x27;</span></span><br><span class="line">jstr = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;jack&quot;, &quot;info&quot;:&#123;&quot;level02&quot;: &quot;true&quot;, &quot;age&quot;:30&#125;&#125;&#x27;</span></span><br><span class="line">o = json.loads(jstr, object_hook=dict_to_obj)</span><br><span class="line">print(o.create_date)</span><br><span class="line">print(type(o.create_date))</span><br><span class="line"><span class="comment"># 2020-06-22 13:54:35.557620</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;datetime.datetime&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="其他的一些收获"><a href="#其他的一些收获" class="headerlink" title="其他的一些收获"></a>其他的一些收获</h2><ul>
<li>在 class 的方法中可以有一个 toJSON 的方法快速得到序列化的字符串</li>
<li>在 class 的构造函数里可以有一个 dict 参数用来快速构造对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person04</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name=<span class="string">&#x27;&#x27;</span>, age=<span class="number">-1</span>, pairs=None</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        <span class="keyword">if</span> pairs:</span><br><span class="line">            self.__dict__ = pairs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toJSON</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> json.dumps(self,</span><br><span class="line">                            default=<span class="keyword">lambda</span> o: o.__dict__,</span><br><span class="line">                            sort_keys=<span class="literal">True</span>,</span><br><span class="line">                            indent=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 优雅的换行</title>
    <url>/hexo/2020/07/08/Python-switch-line-pythnic/</url>
    <content><![CDATA[<p>记录一下查了无数遍的换行方法备用，总结一下就是使用 ‘’ + \ + ‘’ 类似的语法做链接，只可使用 ‘xxxx\xxx’ 的话会出现空格</p>
<h2 id="无缝连接"><a href="#无缝连接" class="headerlink" title="无缝连接"></a>无缝连接</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;1111111&#x27;</span>\</span><br><span class="line">    <span class="string">&#x27;2222222&#x27;</span>\</span><br><span class="line">    <span class="string">&#x27;3333333&#x27;</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># &#x27;111111122222223333333&#x27;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;aaaaaaaaa&#x27;</span></span><br><span class="line">    <span class="string">&#x27;bbbbbbbbb&#x27;</span></span><br><span class="line">    <span class="string">&#x27;ccccccccc&#x27;</span>)</span><br><span class="line"><span class="comment"># aaaaaaaaabbbbbbbbbccccccccc</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;aaaaaaaaa&#x27;</span>\</span><br><span class="line">        <span class="string">&#x27;bbbbbbbbb&#x27;</span>\</span><br><span class="line">        <span class="string">&#x27;ccccccccc&#x27;</span>)</span><br><span class="line"><span class="comment"># aaaaaaaaabbbbbbbbbccccccccc</span></span><br></pre></td></tr></table></figure>

<h2 id="有缝连接"><a href="#有缝连接" class="headerlink" title="有缝连接"></a>有缝连接</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;&#x27;&#x27;11111111</span></span><br><span class="line"><span class="string">       22222222</span></span><br><span class="line"><span class="string">       33333333&#x27;&#x27;&#x27;</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># &#x27;11111111\n       22222222\n       33333333&#x27;</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;11111111\</span></span><br><span class="line"><span class="string">     22222222\</span></span><br><span class="line"><span class="string">     33333333&#x27;</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># &#x27;11111111     22222222     33333333&#x27;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;&#x27;&#x27;55555555555</span></span><br><span class="line"><span class="string">        66666666666</span></span><br><span class="line"><span class="string">        77777777777&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 55555555555</span></span><br><span class="line"><span class="comment">#                66666666666</span></span><br><span class="line"><span class="comment">#                77777777777</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>换行</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 使用 pyenv 进行版本管理</title>
    <url>/hexo/2020/07/29/Python-version-control-with-pyenv/</url>
    <content><![CDATA[<p>poetry 推荐使用 pyenv 进行本地 python 的多版本管理，以前用过，但是也没什么特别的印象了，特此记录一下使用情况</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><a href="https://github.com/pyenv/pyenv">官方教程</a></li>
</ul>
<p>Win 平台不支持这个工具，残念。。。</p>
<p>通过 brew 安装, brew 加速的教程在另一篇教程里有提到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure>

<p>在 profile 中添加配置使能，我本地用的 zsh, 各版本的 shell 稍有区别，指定的文件不一样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval &quot;$(pyenv init -)&quot;\nfi&#x27;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>安装推荐的工具机，各种系统不一样</p>
<p>For MacOS, install Xcode Command Line Tools (xcode-select –install) and HomeBrew, then optional but best install</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install openssl readline sqlite3 xz zlib</span><br></pre></td></tr></table></figure>

<p>在系统中可以通过输入 <code>echo $(pyenv root)</code> 拿到目录地址</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>直接输入 <code>pyenv</code> 查看所有的 cmd 信息</p>
<h3 id="安装某个版本的-python"><a href="#安装某个版本的-python" class="headerlink" title="安装某个版本的 python"></a>安装某个版本的 python</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install 3.7.8</span><br></pre></td></tr></table></figure>

<p>如果没打全，他会给提示可用的版本，很人性化。安装的 python 版本会被放到 <code>~/.pyenv/versions/</code> 管理</p>
<h3 id="删除对应版本"><a href="#删除对应版本" class="headerlink" title="删除对应版本"></a>删除对应版本</h3><p><code>pyenv uninstall 3.7.8</code> 或直接去 versions 文件夹下删除</p>
<h3 id="显示可用版本"><a href="#显示可用版本" class="headerlink" title="显示可用版本"></a>显示可用版本</h3><p><code>pyenv versions</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv versions</span><br><span class="line">* system (<span class="built_in">set</span> by /Users/jack/.python-version)</span><br><span class="line">  3.6.5</span><br><span class="line">  3.7.8</span><br></pre></td></tr></table></figure>

<h3 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h3><p>多用 <code>pyenv version</code> 查看当前的环境版本信息</p>
<p>使用前的情况：系统自带 python 版本 2.7.16， pyenv 可用版本 3.6.5 和 3.7.8。此时 cmd 输入 <code>python -V</code> 给出版本 <code>2.7.16</code></p>
<p>全局切换版本 <code>pyenv gloabl 3.7.8</code>，他会将这个版本存放到 <code>.pyenv/version</code> 文件中，再打开终端查看版本，变为 <code>3.7.8</code>。</p>
<p><code>pyenv local 3.6.5</code> 可以指定 folder 下的 python 版本，他会将版本信息写入当前目录下的 <code>.python-version</code> 文件中</p>
<p>如果想要指定终端的 python 版本，可以用 <code>pyenv shell xxx</code>, 这个我没有需求，未亲测</p>
<p>作用范围和其编程语言一样，范围最精确的那个生效 <code>shell &gt; local &gt; gloabl</code></p>
<h3 id="查看-python-路径"><a href="#查看-python-路径" class="headerlink" title="查看 python 路径"></a>查看 python 路径</h3><p><code>pyenv which python</code></p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>每次新安装版本，记得跑一下 <code>pyenv rehash</code> 更新信息</p>
<h2 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h2><p>pyenv install 下载失败, 报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> Jack &gt; ~ &gt; pyenv install 3.7.3</span><br><span class="line">python-build: use openssl@1.1 from homebrew</span><br><span class="line">python-build: use readline from homebrew</span><br><span class="line">Downloading Python-3.7.3.tar.xz...</span><br><span class="line">-&gt; https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz</span><br><span class="line">error: failed to download Python-3.7.3.tar.xz</span><br><span class="line"></span><br><span class="line">BUILD FAILED (OS X 10.15.6 using python-build 20180424)</span><br></pre></td></tr></table></figure>

<p>可以自行下载对应的 tar.xz 文件然后放到 pyenv 的 cache 文件夹下，pyenv install 的时候会取对应的安装包进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -P $(pyenv root)/cache https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz</span><br></pre></td></tr></table></figure>


<h2 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h2><ul>
<li><a href="http://einverne.github.io/post/2017/04/pyenv.html">参考</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pyenv</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 会如何处理同名同路径的类</title>
    <url>/hexo/2020/08/07/Same-Name-Same-Path-In-Java/</url>
    <content><![CDATA[<p>问题记录：</p>
<p>项目由多个 repo 组成，当这些 repo 中存在相同路径，相同名称的类时，JVM 会怎么处理？</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索小技巧</title>
    <url>/hexo/2020/06/14/Search-Tips/</url>
    <content><![CDATA[<p>搜索引擎使用小技巧</p>
<ol>
<li><code>-</code> + 关键词：排除不想看到的关键词</li>
<li>“关键词加”：锁定关键词</li>
<li>site:域名 + 关键词， 在指定网站内搜索</li>
<li>filetype:文件格式 + 关键词</li>
<li>intitile: + 关键词，指定标题搜素</li>
<li>intext/allintext: + 关键词,两种指定范围搜索</li>
<li>以上技巧叠加使用</li>
</ol>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 shadowsocks client</title>
    <url>/hexo/2019/12/02/Shadowsocks-Client-Installation/</url>
    <content><![CDATA[<p>安装 shadowsocks 本地客户端记录</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>查看是否已经安装 python 和 pip, 这里用的是 python3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -v</span><br><span class="line">pip3 -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有安装运行</span></span><br><span class="line">sudo apt-get install python3</span><br><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure>

<p>配置 douban 源加速</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跳转到 $HOME 目录下</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line"><span class="comment"># 创建 .pip 目录</span></span><br><span class="line">mkdir .pip</span><br><span class="line"><span class="comment"># 创建 config 文件</span></span><br><span class="line">vim pip.conf</span><br><span class="line"><span class="comment"># 将如下内容写进 config 文件，保存退出</span></span><br><span class="line">[global]</span><br><span class="line">timeout = 60</span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br><span class="line">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure>

<p>安装 python shadowsocks 包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip3 install shadowsocks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果嫌 sudo 累赘，也可以用</span></span><br><span class="line">pip3 install --user shadowsocks</span><br></pre></td></tr></table></figure>

<p>安装完毕，配置本地 client 端，创建文件 <code>ssclient.json</code>（名字可以自选，不一定要这个），写入内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;server&quot;</span>:<span class="string">&quot;xxx.xxx.xxx.xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;server_port&quot;</span>:8989,</span><br><span class="line"><span class="string">&quot;local_address&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line"><span class="string">&quot;local_port&quot;</span>:1080,</span><br><span class="line"><span class="string">&quot;password&quot;</span>:<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;timeout&quot;</span>:300,</span><br><span class="line"><span class="string">&quot;method&quot;</span>:<span class="string">&quot;aes-256-cfb&quot;</span>,</span><br><span class="line"><span class="string">&quot;fast_open&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;workers&quot;</span>: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>端口信息根据实际情况修改，完毕后运行 <code>sslocal -c /path/to/ssclient.json</code>，报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jack@DESKTOP-9TGTFK1:~/ss$ sslocal  -c ssclient.json</span><br><span class="line">INFO: loading config from shadowsocks.json</span><br><span class="line">2019-12-02 21:02:09 INFO     loading libcrypto from libcrypto.so.1.1</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/usr/local/bin/sslocal&quot;</span>, line 11, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    load_entry_point(<span class="string">&#x27;shadowsocks==2.8.2&#x27;</span>, <span class="string">&#x27;console_scripts&#x27;</span>, <span class="string">&#x27;sslocal&#x27;</span>)()</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/local.py&quot;</span>, line 39, <span class="keyword">in</span> main</span><br><span class="line">    config = shell.get_config(True)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/shell.py&quot;</span>, line 262, <span class="keyword">in</span> get_config</span><br><span class="line">    check_config(config, is_local)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/shell.py&quot;</span>, line 124, <span class="keyword">in</span> check_config</span><br><span class="line">    encrypt.try_cipher(config[<span class="string">&#x27;password&#x27;</span>], config[<span class="string">&#x27;method&#x27;</span>])</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/encrypt.py&quot;</span>, line 44, <span class="keyword">in</span> try_cipher</span><br><span class="line">    Encryptor(key, method)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/encrypt.py&quot;</span>, line 83, <span class="keyword">in</span> __init__</span><br><span class="line">    random_string(self._method_info[1]))</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/encrypt.py&quot;</span>, line 109, <span class="keyword">in</span> get_cipher</span><br><span class="line">    <span class="built_in">return</span> m[2](method, key, iv, op)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/crypto/openssl.py&quot;</span>, line 76, <span class="keyword">in</span> __init__</span><br><span class="line">    load_openssl()</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/crypto/openssl.py&quot;</span>, line 52, <span class="keyword">in</span> load_openssl</span><br><span class="line">    libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,)</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3.6/ctypes/__init__.py&quot;</span>, line 361, <span class="keyword">in</span> __getattr__</span><br><span class="line">    func = self.__getitem__(name)</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3.6/ctypes/__init__.py&quot;</span>, line 366, <span class="keyword">in</span> __getitem__</span><br><span class="line">    func = self._FuncPtr((name_or_ordinal, self))</span><br><span class="line">AttributeError: /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1: undefined symbol: EVP_CIPHER_CTX_cleanup</span><br><span class="line">jack@DESKTOP-9TGTFK1:~/ss$</span><br></pre></td></tr></table></figure>

<p>这是因为在openssl 1.1.0中废弃了 EVP_CIPHER_CTX_cleanup() 函数而引入了 EVE_CIPHER_CTX_reset() 函数，具体可以查看<a href="https://www.openssl.org/docs/man1.1.0/man3/EVP_CIPHER_CTX_reset.html">官方文档</a>, 修复如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在错误日志中找到 openssl.py 文件路径, 通过 vim 修改</span></span><br><span class="line">sudo vim /usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/shadowsocks/crypto/openssl.py</span><br><span class="line"><span class="comment"># 替换关键自</span></span><br><span class="line">:%s/cleanup/reset/</span><br><span class="line"><span class="comment"># 保存推出</span></span><br><span class="line">:x</span><br></pre></td></tr></table></figure>

<p>再运行 sslocal，成功</p>
<ul>
<li>MacOS 升级到 10.15 Catalina 之后就跑不起来了</li>
</ul>
<p>据说是应为升级之后，一些包比如 openssl, dyid 什么的不兼容了导致的，重新安装一下就行了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update &amp;&amp; brew upgrade</span><br><span class="line"></span><br><span class="line">brew uninstall --ignore-dependencies openssl; brew install https://github.com/tebelorg/Tump/releases/download/v1.0.0/openssl.rb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 pip install 不好使了，可以试试重装一下</span></span><br><span class="line">brew reinstall python</span><br></pre></td></tr></table></figure>

<p>然后在 <code>.zshrc</code> 里面添加配置 <code>export DYLD_LIBRARY_PATH=/usr/local/opt/openssl/lib:$DYLD_LIBRARY_PATH</code></p>
<h3 id="终端-Git-下载加速"><a href="#终端-Git-下载加速" class="headerlink" title="终端 Git 下载加速"></a>终端 Git 下载加速</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># config your &#96;~&#x2F;.gitconfig&#96; file</span><br><span class="line">[http]</span><br><span class="line">proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">sslVerify &#x3D; false</span><br><span class="line"></span><br><span class="line">[https]</span><br><span class="line">proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">  </span><br><span class="line"># or you can config it by typing terminal</span><br><span class="line">git config --global http.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">git config --global http.sslVerify false</span><br><span class="line"></span><br><span class="line"># turn off proxy, 开启后 git commit 会受影响</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>

<p>慢的话肯定是vps不给力，之前用 Vultr 的时候也是龟速，用了 google cloud, 芜湖，起飞！！！</p>
<h2 id="MacOS-安装-SS-客户端"><a href="#MacOS-安装-SS-客户端" class="headerlink" title="MacOS 安装 SS 客户端"></a>MacOS 安装 SS 客户端</h2><p>Git 上有一个客户端，用了下还挺香的 <a href="https://github.com/shadowsocks/ShadowsocksX-NG">ShadowsocksX-NG</a>。README 上有下载地址，直接下载后，解压将安装文件拖至 Application 文件夹下就行了。</p>
<p>配置注意点：</p>
<ol>
<li>Servers -&gt; Server Preference 添加自己的 SS 节点</li>
<li>Preferences 里面可以看到 proxy 设置，需要注意的是它为 Socks5 和 HTTP 设置了不同端口，Sock5 是 1086，HTTP 是 1087</li>
<li>安装了这个应用之后貌似就不需要单独配置终端 proxy 了， 可以通用，或者使用 global mode</li>
</ol>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>Splunk 快速入门</title>
    <url>/hexo/2020/09/10/Splunk-Quick-Guide/</url>
    <content><![CDATA[<h2 id="常用-Query"><a href="#常用-Query" class="headerlink" title="常用 Query"></a>常用 Query</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- event 出现的次数</span></span><br><span class="line">search=index | stats sum(linecount) as Total</span><br><span class="line"><span class="comment">-- or</span></span><br><span class="line">search=index | stats count as Total</span><br></pre></td></tr></table></figure>

<h3 id="查询-event-的日均量"><a href="#查询-event-的日均量" class="headerlink" title="查询 event 的日均量"></a>查询 event 的日均量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eventtype=<span class="string">&quot;searchAccountLocked&quot;</span> | timechart span=1d count | stats avg(count)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在此基础上，计算 7 天的平均值</span></span><br><span class="line">eventtype=<span class="string">&quot;searchAccountLocked&quot;</span> | timechart span=1d count | stats avg(count) as avgc ｜ <span class="built_in">eval</span> n=exact(1 * avgc)</span><br></pre></td></tr></table></figure>

<h2 id="通过-Regex-匹配得到目标百分比"><a href="#通过-Regex-匹配得到目标百分比" class="headerlink" title="通过 Regex 匹配得到目标百分比"></a>通过 Regex 匹配得到目标百分比</h2><ul>
<li><a href="https://community.splunk.com/t5/Splunk-Search/Get-percentage-of-matchin-to-all-events/td-p/39113">社区类似问题</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索全部 event, 通过 regex 匹配到目标，计算百分比</span></span><br><span class="line">UserChangeEvent MessageBox | stats count(<span class="built_in">eval</span>(match(field1, <span class="string">&quot;.*updatedFields\&quot;:\[&#123;\&quot;fieldName\&quot;:\&quot;jobCode\&quot;.*&quot;</span>))) as JCEvent count as total | <span class="built_in">eval</span> JC_pct=JCEvent/total*100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级版，计算多个百分比情况</span></span><br><span class="line"><span class="comment"># EMP_PCT 内容是空的 event 在所有 jobcode event 中的占比，和 jobcode 在所有 event 中的占比</span></span><br><span class="line">UserChangeEvent MessageBox | stats count(<span class="built_in">eval</span>(match(field1, <span class="string">&quot;.*updatedFields\&quot;:\[&#123;\&quot;fieldName\&quot;:\&quot;jobCode\&quot;.*&quot;</span>))) as totalJCEvent count(<span class="built_in">eval</span>(match(field1, <span class="string">&quot;.*updatedFields\&quot;:\[&#123;\&quot;fieldName\&quot;:\&quot;jobCode\&quot;,\&quot;fieldType\&quot;:\&quot;java.lang.String\&quot;,\&quot;afterValue\&quot;:\&quot;\&quot;&#125;\].*&quot;</span>))) as emptyEvent count as total | <span class="built_in">eval</span> EMP_PCT=emptyEvent/totalJCEvent*100, JC_PCT=totalJCEvent/total*100</span><br></pre></td></tr></table></figure>

<h2 id="取两位小数"><a href="#取两位小数" class="headerlink" title="取两位小数"></a>取两位小数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">| 7xAVG=round((7*total/1), 2)</span><br></pre></td></tr></table></figure>

<h2 id="通过正则创建新-field"><a href="#通过正则创建新-field" class="headerlink" title="通过正则创建新 field"></a>通过正则创建新 field</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选出结果集，从输出信息中匹配 &#x27;Company: &#x27; 开头 &#x27;, total CommonField&#x27; 结尾的部分并命名为 cname 统计出现次数</span></span><br><span class="line"><span class="comment"># _raw 表示 record 内容</span></span><br><span class="line">search condition | rex field=_raw <span class="string">&quot;Company: (?&lt;cname&gt;.*), total CommonField&quot;</span> | stats count by cname</span><br></pre></td></tr></table></figure>

<h2 id="stats-和-eval-的区别"><a href="#stats-和-eval-的区别" class="headerlink" title="stats 和 eval 的区别"></a>stats 和 eval 的区别</h2><p>stats 是对已经有的 field 的删选，而 eval 是通过已有的 field 计算出新的 field 加到结果集中进行删选，等价于新增 field</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删选 event, 新建一个 field 名叫 is_prod, 当 host 匹配 pattern 时赋值 yes_prod</span></span><br><span class="line">search event | <span class="built_in">eval</span> is_prod=<span class="keyword">if</span>(like(host, <span class="string">&quot;pc%&quot;</span>), <span class="string">&quot;yes_prod&quot;</span>, <span class="string">&quot;not_prod&quot;</span>) | stats count by is_prod</span><br></pre></td></tr></table></figure>

<p>其中 eval 还支持多种删选条件，可塑性好高</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计各环境的 event 数量并统计比例</span></span><br><span class="line">search event | <span class="built_in">eval</span> env=<span class="keyword">case</span>(like(host, <span class="string">&quot;pc%&quot;</span>), <span class="string">&quot;prod&quot;</span>, like(host, <span class="string">&quot;sc%&quot;</span>), <span class="string">&quot;prov&quot;</span>, like(host, <span class="string">&quot;*&quot;</span>), <span class="string">&quot;others&quot;</span>) | stats count by env</span><br></pre></td></tr></table></figure>

<h2 id="Splunk-SDK"><a href="#Splunk-SDK" class="headerlink" title="Splunk SDK"></a>Splunk SDK</h2><p>尝试了 python 版本的 SDK，香！</p>
<p>参考 <a href="https://dev.splunk.com/enterprise/docs/python/sdk-python/examplespython/commandline">官方文档</a> 下载依赖，在本地配置 <code>.splunkrc</code> 文件写入连接信息方便调用。第一次用的时候密码配错了，还以为内网不可用，需要用 vlab，再测试的时候发现了这个问题。总的来说很可以。</p>
<p>Steps:</p>
<ol>
<li>clone git 开源项目 <a href="https://github.com/splunk/splunk-sdk-python">Splunk SDK Python</a></li>
<li>用户目录下创建 <code>.splunkrc</code> 文件</li>
<li>cd 到 <code>splunk-sdk-python/examples</code> folder 下，运行命令 <code>python search.py &quot;search * | head 10&quot; --earliest_time=&quot;2011-08-10T17:15:00.000-07:00&quot; --rf=&quot;desc&quot; --output_mode=json</code> 可以看到对应时间戳下的前 10 条记录</li>
</ol>
<p><code>.splunkrc</code> 文件模板</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Splunk host (default: localhost)</span><br><span class="line">host&#x3D;xxx.xxx.xxx</span><br><span class="line"># Splunk admin port (default: 8089)</span><br><span class="line">port&#x3D;8089</span><br><span class="line"># Splunk username</span><br><span class="line">username&#x3D;jack</span><br><span class="line"># Splunk password</span><br><span class="line">password&#x3D;mypwd</span><br><span class="line"># Access scheme (default: https)</span><br><span class="line">scheme&#x3D;https</span><br><span class="line"># Your version of Splunk (default: 5.0)</span><br><span class="line">version&#x3D;7.1.2</span><br></pre></td></tr></table></figure>

<h2 id="三个小例子快速入门"><a href="#三个小例子快速入门" class="headerlink" title="三个小例子快速入门"></a>三个小例子快速入门</h2><h3 id="搜索-event-并通过饼图展示"><a href="#搜索-event-并通过饼图展示" class="headerlink" title="搜索 event 并通过饼图展示"></a>搜索 event 并通过饼图展示</h3><ol>
<li>输入时间节点和关键词：<code>MessageBox topic=com.successfactors.usermanagement.event.UserChangeEvent | stats count by servername</code></li>
<li>选择可视化 tab</li>
<li>选择饼图</li>
</ol>
<p><img src="pie.png" alt="饼图"></p>
<h3 id="显示每天的-event-量"><a href="#显示每天的-event-量" class="headerlink" title="显示每天的 event 量"></a>显示每天的 event 量</h3><ol>
<li>选择时间</li>
<li>输入搜索条件: <code>MessageBox topic=com.successfactors.usermanagement.event.UserChangeEvent | timechart count span=1d</code></li>
<li>选择图形</li>
</ol>
<p><img src="bar.png" alt="柱状图"></p>
<h3 id="通过正则删选-event-并计算百分比"><a href="#通过正则删选-event-并计算百分比" class="headerlink" title="通过正则删选 event 并计算百分比"></a>通过正则删选 event 并计算百分比</h3><ol>
<li>选择时间</li>
<li>输入删选条件: <code>MessageBox topic=com.successfactors.usermanagement.event.UserChangeEvent | stats count as total count(eval(match(field1, &quot;companyId&quot;))) as containsCID | eval CID_PCT=round(containsCID/total*100, 2)</code></li>
</ol>
<p><img src="regex.png" alt="百分比表"></p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>splunk</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 怎么实现 server 启动之后立刻执行一个服务</title>
    <url>/hexo/2020/11/12/Spring-service-run-once-after-server-up/</url>
    <content><![CDATA[<p>最近遇到一个需求需要在 Spring web service 启动之后立即执行，类似一个初始化的工作，搜出来有好多实现方式，稍微记录一下他们的区别</p>
<h2 id="ApplicationListener"><a href="#ApplicationListener" class="headerlink" title="ApplicationListener"></a>ApplicationListener</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitTraceSourceEventListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationReadyEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationReadyEvent applicationReadyEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitTraceSourceEventListener triggered...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProjectConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = </span><br><span class="line">   LoggerFactory.getLogger(ProjectConfiguration.class);</span><br><span class="line"></span><br><span class="line">   <span class="meta">@EventListener(ApplicationReadyEvent.class)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomethingAfterStartup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;hello world, I have just started up&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SpringBootServletInitializer"><a href="#SpringBootServletInitializer" class="headerlink" title="SpringBootServletInitializer"></a>SpringBootServletInitializer</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(Application.class, args);</span><br><span class="line"></span><br><span class="line">        context.getBean(Table.class).fillWithTestdata(); // &lt;-- here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Monitor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> SomeService service</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// start your monitoring in here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ApplicationRunner"><a href="#ApplicationRunner" class="headerlink" title="ApplicationRunner"></a>ApplicationRunner</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments applicationArguments)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//code goes here</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="CommandLineRunner"><a href="#CommandLineRunner" class="headerlink" title="CommandLineRunner"></a>CommandLineRunner</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandLineAppStartupRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(CommandLineAppStartupRunner.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String...args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Application started with command-line arguments: &#123;&#125; . \n To kill this application, press Ctrl + C.&quot;</span>, Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="InitializingBean"><a href="#InitializingBean" class="headerlink" title="InitializingBean"></a>InitializingBean</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInitializingBean</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = ...;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;InitializingBean#afterPropertiesSet()&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>howto</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring5 视频笔记</title>
    <url>/hexo/2020/09/08/Spring5-note/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1WE411d7Dv">B 站狂神 Spring5 教程笔记</a></p>
<h2 id="Spring-基本概念"><a href="#Spring-基本概念" class="headerlink" title="Spring 基本概念"></a>Spring 基本概念</h2><p>七大组成</p>
<ol>
<li>AOP</li>
<li>ORM</li>
<li>Web</li>
<li>DAO</li>
<li>Context</li>
<li>Web MVC</li>
<li>Core</li>
</ol>
<ul>
<li>Spring Boot<ul>
<li>快速开发脚手架</li>
<li>快速开发单个微服务</li>
<li>约定大于配置</li>
</ul>
</li>
<li>Spring Cloud<ul>
<li>基于 SpringBoot 实现的</li>
</ul>
</li>
</ul>
<p>弊端：发展太久，违背原来的理念。配置繁琐，人称 ‘配置地狱’</p>
<p>Spring 和 SpringMVC 的区别：都是容器，spring 用来管理 dao 和 service，springmvc 用来管理 controller</p>
<h2 id="IoC-理论推导-（Inversion-of-Control）"><a href="#IoC-理论推导-（Inversion-of-Control）" class="headerlink" title="IoC 理论推导 （Inversion of Control）"></a>IoC 理论推导 （Inversion of Control）</h2><p>原来的实现</p>
<ol>
<li>UserDao 接口</li>
<li>UserDaoImpl 实现类</li>
<li>UserService 业务接口</li>
<li>UserServiceImpl 业务实现类</li>
</ol>
<p>用户的需求可能影响到原来的代码，我们需要根据用户需求修改源代码（修改 UserDaoImpl 中的 Dao 生成）</p>
<p>通过 set 方法注入后，实现被动接受对象，需求由外部决定。不在管理对象创建，专注于扩展业务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserServiceImpl 中对 UserDao 的引用</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 set 动态注入实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IoC-的本质"><a href="#IoC-的本质" class="headerlink" title="IoC 的本质"></a>IoC 的本质</h2><p>控制反转是一种<strong>设计思想</strong>，DI（Dependency Injection） 是 IoC 的一种实现方式，将对象的创建交给第三方，获取对象的方式的反转。</p>
<p>Spring 是一种实现控制反转的 IoC 容器，常见的有两种对象控制方式，XML 和 注解。XML 配置 Bean, 定义和实现是分离的。注解方式则把两者结合在了一起，从而达到零配置。</p>
<p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-metadata">Spring Framework 官方文档</a></p>
<h2 id="IoC创建对象的方式"><a href="#IoC创建对象的方式" class="headerlink" title="IoC创建对象的方式"></a>IoC创建对象的方式</h2><ol>
<li>默认使用无参构造创建对象</li>
<li>通过 constructor-arg 标签实现带参构造器功能</li>
</ol>
<p>在 xml 加载完后，配置的对象就已经被创建了</p>
<h2 id="Spring-配置说明"><a href="#Spring-配置说明" class="headerlink" title="Spring 配置说明"></a>Spring 配置说明</h2><ol>
<li>alias 别名，和 bean 的 name 属性重复，而且 name 更灵活</li>
<li>bean 对象生成配置</li>
<li>import 合并多个 xml 配置文件</li>
</ol>
<h2 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI - 依赖注入"></a>DI - 依赖注入</h2><ol>
<li>构造器注入</li>
<li>Set方式注入 - 即依赖注入</li>
<li>其他注入</li>
</ol>
<p>依赖： bean 对象的创建依赖容器<br>注入： bean 对象的所有属性由容器来注入</p>
<h2 id="P-C命名空间注入"><a href="#P-C命名空间注入" class="headerlink" title="P/C命名空间注入"></a>P/C命名空间注入</h2><p>在 xml 中导入约束即可使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line"> xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure>

<p>P 可以扩展属性注入，一个 tag 解决，不用嵌套xml了</p>
<p>C 可以扩展构造器</p>
<h2 id="Bean-的-作用域-scope"><a href="#Bean-的-作用域-scope" class="headerlink" title="Bean 的 作用域(scope)"></a>Bean 的 作用域(scope)</h2><ol>
<li>singleton - 默认域</li>
<li>prototype - 每次取 bean 都会产生新对象</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.something.DefaultAccountService&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.something.DefaultAccountService&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Bean-的自动装配"><a href="#Bean-的自动装配" class="headerlink" title="Bean 的自动装配"></a>Bean 的自动装配</h2><ul>
<li>自动装配是 Spring 满足 bean 依赖的一种方式</li>
<li>Spring 在上下文中自动寻找，并自动给 bean 装配属性</li>
</ul>
<p>Spring 三种装配方式：</p>
<ol>
<li>xml</li>
<li>注解</li>
<li>隐式的自动装配 bean</li>
</ol>
<h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><p>Spring4 之后，要使用注解需要保证 AOP 包已经导入。XML 也需要添加特殊的约束 <code>&lt;context:annotation-config/&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置扫描路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.jzheng.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>bean - @Component</li>
<li>属性 - @Value</li>
<li>衍生的注解 - @Repository - for dao/@Service - for service/@Controller - for controller 作用都是将对象注入到容器</li>
<li>自动装配<ol>
<li>@Autowired 通过类型，名字装配。如果不能自动装配属性，可以通过 @Qualifier(value=”xxx)</li>
<li>@Nullable，允许为空</li>
<li>@Resource，通过名字，类型装配</li>
</ol>
</li>
<li>作用域 - @Scope</li>
<li>小结: XML 更加万能，使用任何场合；注解只能在自己的class 里使用。</li>
</ol>
<p>推荐做法：XML 用来管理 Bean，注解只用来注入属性</p>
<h2 id="使用-Java-的方式配置-Spring"><a href="#使用-Java-的方式配置-Spring" class="headerlink" title="使用 Java 的方式配置 Spring"></a>使用 Java 的方式配置 Spring</h2><p>JavaConfig 是 Spring 一个子项目， Spring4 之后成为核心项目。通过 @Configuration 注解来实现，可以代替 xml。也有像 Import 这样的东西，可以包含其他配置类。</p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>Spring 必问题 - SpringAOP 和 SpringMVC</p>
<p>代理模式分类</p>
<ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>角色分析</p>
<ul>
<li>抽象角色：一般是接口或抽象类</li>
<li>真实角色：被代理的角色</li>
<li>代理角色：代理真实角色，代理后做一些操作</li>
<li>客户：访问代理对象的人</li>
</ul>
<p>优点：</p>
<ul>
<li>使真实对象操作更纯粹，不用去关注公共业务</li>
<li>公共业务交给代理，业务分工</li>
<li>公共业务扩展方便</li>
</ul>
<p>缺点： 一个真实角色产生一个代理角色，代码量翻倍</p>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><ul>
<li>动态代理和静态代理角色一样</li>
<li>动态代理的代理类使动态生成，不是直接写好的</li>
<li>动态代理分两大类：基于接口的动态代理/基于类的动态代理<ul>
<li>接口 - JDK动态代理</li>
<li>类 - cglib</li>
<li>java字节码 - javasist</li>
</ul>
</li>
</ul>
<p>两个类： Proxy / InvocationHandler</p>
<p>Proxy: 在 handler 中被调用，产生代理的实例</p>
<p>InvocationHandler: 自定义调用过程，返回执行结果</p>
<p>优点：静态的有点 + 一个动态代理类代理的使一个接口，一般对应一类业务</p>
<h2 id="AOP-横向扩展功能"><a href="#AOP-横向扩展功能" class="headerlink" title="AOP - 横向扩展功能"></a>AOP - 横向扩展功能</h2><h3 id="配置实现01"><a href="#配置实现01" class="headerlink" title="配置实现01"></a>配置实现01</h3><p>目标业务点：pointcut, 需要额外添加的附属动作：adviser(MethodBeforeAdvice/AfterReturningAdvice)</p>
<p>然后添加配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jzheng.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jzheng.log.Log&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jzheng.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--config AOP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- point cut --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.jzheng.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 执行环绕增强 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置实现02"><a href="#配置实现02" class="headerlink" title="配置实现02"></a>配置实现02</h3><p>也可以用自定义类，使用更简单，但是功能比之前的弱，不能操作 Method 之类的属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointCut</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------&gt; before method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&gt; after method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jzheng.diy.DiyPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义切面 ref 要引用的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切入点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.jzheng.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="注解实现"><a href="#注解实现" class="headerlink" title="注解实现"></a>注解实现</h3><p>类添加 Aspect 注解， 在方法上添加注解， 方法注解中可以指定切点。执行顺序：环绕前 -&gt; 方法前 -&gt; 方法 -&gt; 环绕后 -&gt; 方法后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointCut</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.jzheng.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&gt; before [Anno type]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.jzheng.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&gt; after [Anno type]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.jzheng.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&gt; around before [Anno type]&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Signature: &quot;</span> + proceedingJoinPoint.getSignature());</span><br><span class="line">        Object proceed = proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&gt; around after [Anno type]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式3， 注解方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jzheng.diy.AnnotationPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启注解支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="整合-Mybatis"><a href="#整合-Mybatis" class="headerlink" title="整合 Mybatis"></a>整合 Mybatis</h2><ol>
<li>导入包<ol>
<li>junit</li>
<li>mybatis</li>
<li>mysql数据库</li>
<li>spring相关的jar</li>
<li>aop织入</li>
<li>mybatis-spring [new]</li>
</ol>
</li>
<li>编写配置文件</li>
<li>测试</li>
</ol>
<h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><p>学到第 23 课，跳出去先把 Mybatis 看完再回来。。。。</p>
<ol>
<li>导包<ul>
<li>junit</li>
<li>mybatis</li>
<li>mysql</li>
<li>spring</li>
<li>aop织入</li>
<li>mybatis-spring</li>
</ul>
</li>
<li>配置文件</li>
<li>写测试</li>
</ol>
<h3 id="mybatis-回忆"><a href="#mybatis-回忆" class="headerlink" title="mybatis 回忆"></a>mybatis 回忆</h3><ol>
<li>编写实体类</li>
<li>编写核心配置文件</li>
<li>编写接口</li>
<li>编写 Mapper.xml</li>
<li>测试</li>
</ol>
<h3 id="mybatis-spring"><a href="#mybatis-spring" class="headerlink" title="mybatis-spring"></a>mybatis-spring</h3><ol>
<li>编写数据源配置</li>
<li>sqlSessionFactory</li>
<li>sqlSessionTemplate</li>
</ol>
<h2 id="事务回顾"><a href="#事务回顾" class="headerlink" title="事务回顾"></a>事务回顾</h2><ul>
<li>要么都成功，要么都失败</li>
<li>十分重要，涉及一致性，不能马虎</li>
<li>确保完整性和一致性</li>
</ul>
<p>事务 ACID 原则：</p>
<ul>
<li>原子性</li>
<li>一致性</li>
<li>隔离性，多个业务可能操作一个资源，防止数据损坏</li>
<li>持久性，十五一旦提交，无论系统发生什么问题，结果都不会被影响，被持久化的写到存储器中</li>
</ul>
<h3 id="spring-中的事务管理"><a href="#spring-中的事务管理" class="headerlink" title="spring 中的事务管理"></a>spring 中的事务管理</h3><ul>
<li>声明式事务 - AOP</li>
<li>编程式事务 - 需要在代码中进行事务管理，侵入性太强，不推荐</li>
</ul>
<p>为什么需要事务：</p>
<ol>
<li>不添加事务管理，可能存在事务提交不一致</li>
<li>如果不在 spring 中配置声明式事务，我们就需要在代码中手动配置事务</li>
<li>在项目的开发中十分重要，涉及到数据的一致性</li>
</ol>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>视频笔记</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC 视频笔记</title>
    <url>/hexo/2020/10/14/SpringMVC-quick-start/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1aE41167Tu?p=3">B 站狂神 SpringMVC 教程笔记</a></p>
<h2 id="01-Servlet-review"><a href="#01-Servlet-review" class="headerlink" title="01 Servlet review"></a>01 Servlet review</h2><h3 id="准备工作-提前本地安装-Tomcat"><a href="#准备工作-提前本地安装-Tomcat" class="headerlink" title="准备工作 提前本地安装 Tomcat"></a>准备工作 提前本地安装 Tomcat</h3><ol>
<li>访问<a href="https://tomcat.apache.org/download-90.cgi">官网</a>下载安装包</li>
<li>点击 Binary Distributions 下的 <code>32-bit/64-bit Windows Service Installer (pgp, sha512)</code> 下载 exe 可执行文件</li>
<li>点击，傻瓜式安装</li>
<li>点击提示框，启动 访问 <code>http://localhost:8080/</code> 看到页面则安装成功</li>
</ol>
<p>配置环境变量：通过上面的傻瓜式安装，Tomcat 默认安装在 <code>C:\Program Files\Apache Software Foundation\Tomcat 9.0</code> 这个路径下</p>
<p>我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 高级 -&gt; 环境变量, 在系统变量中添加：</p>
<table>
<thead>
<tr>
<th align="left">变量名</th>
<th align="left">值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">TOMCAT_HOME</td>
<td align="left">C:\Program Files\Apache Software Foundation\Tomcat 9.0</td>
</tr>
<tr>
<td align="left">CATALINA_HOME</td>
<td align="left">C:\Program Files\Apache Software Foundation\Tomcat 9.0</td>
</tr>
</tbody></table>
<p>修改变量Path, 在原来的值后面添加 <code>;%TOMCAT_HOME%\bin;%CATALINA_HOME%\lib</code></p>
<h3 id="子项目创建"><a href="#子项目创建" class="headerlink" title="子项目创建"></a>子项目创建</h3><p>正常步骤建项目，创建 maven 子 module，然后 module 上邮件选中 Add Framework Support -&gt; Web Application 来创建 web app 会比较省事。可以看到在目录中新增了名为 web 的文件夹</p>
<p>在 src 下新建一个测试用 servlet 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取前端参数</span></span><br><span class="line">        String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;add&quot;</span>)) &#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;execute Add...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;delete&quot;</span>)) &#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;execute Delete...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 调用业务层</span></span><br><span class="line">        <span class="comment">// 3. 试图转发或重定向</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>web -&gt; WEB-INF 下新建 jsp 文件夹，创建 test.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>修改 WEB-INF 下的 web.xml 配置路由</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.jzheng.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>工具栏 -&gt; edit configuration -&gt; 点击 + 号，选中 Tomcat 配置本地 tomcat， 点击 fix -&gt; 启动服务器。访问 <code>http://localhost:8080/springmvn_01_servlet_war_exploded/hello?method=add</code> 可以看 msg 显示在页面上。</p>
<p>PS：应该是哪里配置有问题，视频上面直接访问 <code>http://localhost:8080/hello?method=add</code> 即可，回头看一下前面的 JavaWeb 项目应该就知道了，暂时没什么关系，无伤大雅</p>
<h2 id="SpringMVC-start"><a href="#SpringMVC-start" class="headerlink" title="SpringMVC start"></a>SpringMVC start</h2><p>PS: 在官方文档页面，修改 current 为其他版本可以访问老版本的文档,例如 <code>https://docs.spring.io/spring-framework/docs/4.3.24.RELEASE/spring-framework-reference/</code></p>
<p>PPS: 这个可以在 Tomcat 配置页面的 Deployment tab 下，将 Application context 内容直接改为 <code>/</code> 即可</p>
<p>特点：</p>
<ol>
<li><p>轻量</p>
</li>
<li><p>基于响应</p>
</li>
<li><p>兼容 Spring</p>
</li>
<li><p>约定优于配置</p>
</li>
<li><p>功能强大</p>
</li>
<li><p>简介灵活</p>
</li>
<li><p>用的人多</p>
</li>
<li><p>创建子项目，配置为 web app</p>
</li>
<li><p>Porject Structure -&gt; Artifacts，选中项目 -&gt; WEB-INF 下新建 lib 包手动把包导进去（idea 的bug）-&gt; 点击 + 号 -&gt; Library files 全选</p>
</li>
<li><p>resource 下新建 xml 文件，选择 Spring config 类型，可以自带配置信息</p>
</li>
<li><p>配置 WEB-INF 下的 web.xml</p>
</li>
<li><p>创建 Controller 添加业务逻辑</p>
</li>
<li><p>配置启动 Tomcat，访问 URL 看结果</p>
</li>
</ol>
<p>这部分主要是为了讲解 SpringMVC 的原理，真实环境都用注解开发，会方便很多。</p>
<h2 id="SpringMVC-注解版"><a href="#SpringMVC-注解版" class="headerlink" title="SpringMVC 注解版"></a>SpringMVC 注解版</h2><ol>
<li>创建工程转化为 web app</li>
<li>在 web 创建 jsp 目录，配置 web.xml 配置内容和之前完全一样</li>
<li>配置 springmvc-config.xml, 指定注解扫描路径，handler 和视图解析器</li>
<li>创建 controller 添加注解</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫包，让指定包下的注解生效，IOC 容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.jzheng.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 让 spring MVC 不处理静态资源（.css .js .html...） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 代替 HandlerMapping 和 HandlerAdapter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器: 模板引擎 Thymeleaf, Freemaker 等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定 URL</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Hello, SpringMVC&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>; <span class="comment">// 被视图解析器处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="04-回顾"><a href="#04-回顾" class="headerlink" title="04 回顾"></a>04 回顾</h2><p>回顾了两种添加 Controller 的方法，还有 RequestMapping 添加在 class 和 method 上的区别</p>
<h3 id="Restful-风格"><a href="#Restful-风格" class="headerlink" title="Restful 风格"></a>Restful 风格</h3><ul>
<li>@PathVariable 配置变量</li>
<li>@RequestMapping(value = “/add/{a}/{b}”, method = RequestMethod.POST) 配置请求方式</li>
<li>@GetMapping(value = “/add/{a}/{b}”) 请求方式简写</li>
</ul>
<h3 id="专发和重定向"><a href="#专发和重定向" class="headerlink" title="专发和重定向"></a>专发和重定向</h3><p>forward，redirect</p>
<h3 id="接受前端参数"><a href="#接受前端参数" class="headerlink" title="接受前端参数"></a>接受前端参数</h3><p>简单类型传递</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>复杂类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// http://localhost:8080/t2?username=jack&amp;id=jjjj&amp;age=3</span></span><br><span class="line"><span class="comment">// 终端能打印出对象</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/t2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">complexType</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h3><p>web 文件夹下添加测试用的 jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;/e/t1&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>创建测试 controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/e/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(String name, Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;output: &quot;</span> + name);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 <code>localhost:8080/form.jsp</code> 输入中文，可以看到输出乱码。</p>
<p>解决方案：过滤器</p>
<h4 id="自建过滤器"><a href="#自建过滤器" class="headerlink" title="自建过滤器"></a>自建过滤器</h4><p>新建 filter 文件夹，添加过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>web.xml</code> 下配置过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.jzheng.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="框架自带过滤器"><a href="#框架自带过滤器" class="headerlink" title="框架自带过滤器"></a>框架自带过滤器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 框架自带的过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>build_in_encoding_filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>build_in_encoding_filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h3><p>简单介绍一下 js 对象和字符串的转化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> user = &#123;</span><br><span class="line">        name: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">        age: <span class="number">3</span>,</span><br><span class="line">        gender: <span class="string">&quot;男&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// js 对象转化为 json 对象</span></span><br><span class="line">    <span class="keyword">var</span> json  = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line">    <span class="built_in">console</span>.log(json);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// json 对象转化为 JavaScript 对象</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h3><ol>
<li>引入 jackson-databind 包</li>
<li>创建测试类 User</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserController</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/j1&quot;, produces=&quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span> <span class="comment">// 不走视图解析器，直接返回字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">// jackson - ObjectMapper</span></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;杰克&quot;</span>, <span class="number">1</span>, <span class="string">&quot;man&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String ret = objectMapper.writeValueAsString(user);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.toString() 返回 User(name=Jack01, age=1, gender=man)</span></span><br><span class="line"><span class="comment">// 访问 /j1 输出：&#123;&quot;name&quot;:&quot;Jack01&quot;,&quot;age&quot;:1,&quot;gender&quot;:&quot;man&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>结果中包含中文会乱码，这时可以配置 RequestMapping 注解也可以配置 springmvc 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    beans 头里面确认包含</span></span><br><span class="line"><span class="comment">    http://www.springframework.org/schema/mvc</span></span><br><span class="line"><span class="comment">    http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="line"><span class="comment">    不然会抛错：通配符的匹配很全面, 但无法找到元素 &#x27;mvc:annotation-driven&#x27; 的声明</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Jackson 乱码问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="SSM-整合"><a href="#SSM-整合" class="headerlink" title="SSM 整合"></a>SSM 整合</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> ssmbuild;</span><br><span class="line"><span class="keyword">USE</span> ssmbuild;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`books`</span>(</span><br><span class="line"><span class="string">`bookID`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;书id&#x27;</span>,</span><br><span class="line"><span class="string">`bookName`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;书名&#x27;</span>,</span><br><span class="line"><span class="string">`bookCounts`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line"><span class="string">`detail`</span> <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line"><span class="keyword">KEY</span> <span class="string">`bookID`</span>(<span class="string">`bookID`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`books`</span>(<span class="string">`bookID`</span>,<span class="string">`bookName`</span>,<span class="string">`bookCounts`</span>,<span class="string">`detail`</span>)<span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;从入门到放弃&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;MySQL&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;从删库到跑路&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;Linux&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;从进门到进牢&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h4><p>启动报错 <code>一个或多个筛选器启动失败。完整的详细信息将在相应的容器日志文件中找到</code>, 这个是适配 web support 的时候没有添加 lib 包导致的</p>
<p>Tomcat 下的 catalina.properties 修改了配置 ‘tomcat.util.scan.StandardJarScanFilter.jarsToSkip=*.jar’ 导致 jstl 解析出问题抛异常 <code>无法在web.xml或使用此应用程序部署的jar文件中解析绝对uri</code> 改回到默认配置，修复。花了2个小时排错，之前告诉我这个该法的人真想把它拖出去枪毙18遍！参考 <a href="https://www.cnblogs.com/tioxy/p/13291574.html">cnblog</a></p>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>拦截器之访问 controller 方法，不会拦截静态资源（js 等）</p>
<p>项目突然坏了，干！！！ 关了，最后三讲直接云上课看看完了</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>视频笔记</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot 通过本地方式添加依赖</title>
    <url>/hexo/2020/11/11/Springboot-add-local-jar-into-dependency/</url>
    <content><![CDATA[<p>Springboot 项目中怎么添加本地 jar 包记录</p>
<ol>
<li>在项目资源目录下创建一个文件夹，用来存放本地 jar 包</li>
<li>在 pom.xml 中添加 本地 jar 包的引用，引用目录为第一步创建的文件目录</li>
<li>在 pom.xml 的 plugins 中添加编译打包的目录，使本地jar包能打到项目中去</li>
</ol>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">resources</span><br><span class="line">├── application.properties</span><br><span class="line">├── lib</span><br><span class="line">│   └── tracesonar-0.1-SNAPSHOT.jar (本地包)</span><br><span class="line">├── static</span><br><span class="line">└── templates</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- add local lib reference --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.TraceSonar<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>TraceSonar<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources/lib/tracesonar-0.1-SNAPSHOT.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">extdirs</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources/lib<span class="tag">&lt;/<span class="name">extdirs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>jar</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot 视频笔记</title>
    <url>/hexo/2020/11/05/Springboot-note/</url>
    <content><![CDATA[<p>Springboot 学习笔记，核心<strong>自动配置</strong></p>
<p>社区版的 Idea 少了一些配置，从网上下下来的 initializr 直接倒入的还一些配置可能失效，可以看文件前缀判断</p>
<h2 id="HelloWorld-web-mode"><a href="#HelloWorld-web-mode" class="headerlink" title="HelloWorld web mode"></a>HelloWorld web mode</h2><ol>
<li>访问 <a href="https://start.spring.io/">Initializr</a> 定制项目， dependencies 选 Spring Web 即可</li>
<li>下载项目 jar 文件并解压，使用 Idea import，构建项目</li>
<li>Springboot 的项目结构和 Springmvc 基本一样，在 HelloWorldApplication 同级目录下创建 controller 包并添加 controller 类</li>
<li>Springboot 项目默认集成 tomcat，直接运行 application class 即可启动服务器</li>
<li>该 tomcat 应该是优化过的，启动速度飞起，访问 <code>http://localhost:8080/hello</code> 可以看到返回 hello 字符串</li>
<li>查看 idea 右边的 maven tab, 在 Lifecycle 下双击执行 package 打包项目 </li>
<li>可以看到打包好的项目 <code>Building jar: ...\helloworld\target\helloworld-0.0.1-SNAPSHOT.jar</code></li>
<li>到对应的路径下，cmd 窗口输入 <code>java -jar helloworld-0.0.1-SNAPSHOT.jar</code> 可以直接启动</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HelloWorld-idea-mode"><a href="#HelloWorld-idea-mode" class="headerlink" title="HelloWorld idea mode"></a>HelloWorld idea mode</h2><ol>
<li>Idea -&gt; file -&gt; new -&gt; project -&gt; Spring Initialzr</li>
<li>填入必要信息，可以修改 package 简化路径</li>
<li>其他步骤和上面的练习一样</li>
</ol>
<p>彩蛋：banner 替换，在 resources 下新建 banner.txt 文件，替换终端启动图标</p>
<h2 id="Autowired-替代方案"><a href="#Autowired-替代方案" class="headerlink" title="Autowired 替代方案"></a>Autowired 替代方案</h2><p>方案一 可以通过把注解放到对应的 setter 方法上绕过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InitBean initBean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInitBean</span><span class="params">(InitBean initBean)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.initBean = initBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方案二 放入构造函数中自动识别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitTraceSourceEventListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationReadyEvent</span>&gt; </span>&#123;</span><br><span class="line">    InitBean bean;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InitTraceSourceEventListener</span><span class="params">(InitBean bean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bean = bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方案三 用 <code>@Resource</code> 代替</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">InitBean bean;</span><br></pre></td></tr></table></figure>

<p>或者最粗暴的: Settings -&gt; Editor -&gt; Code Style -&gt; Inspections -&gt; Spring Core -&gt; Code -&gt; Field injection warning 选项 disable 掉</p>
<h2 id="自动配置原理初探"><a href="#自动配置原理初探" class="headerlink" title="自动配置原理初探"></a>自动配置原理初探</h2><ol>
<li>核心依赖都在父工程中</li>
<li>写入依赖时不需要指定版本，父类 pom 已经管理了</li>
</ol>
<p><strong>启动器</strong>, 即 Springboot 的启动场景</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>各种场景有对应的启动器，比如 <code>spring-boot-starter-web</code>, 开发时只需要找到对应的启动器即可</p>
<p><strong>主程序</strong></p>
<p>这部分需要 实操+完善 好几遍才行，流程有点长</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@SpringBootApplication 标注这个类是一个 springboot 应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello02Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 启动应用</span></span><br><span class="line">        SpringApplication.run(Hello02Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要注解关系</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication </span><br><span class="line">    @SpringBootConfiguration - springboot 配置</span><br><span class="line">        @Configuration - spring 配置类</span><br><span class="line">            @Component - 说明时一个 spring 组件</span><br><span class="line">    @EnableAutoConfiguration</span><br><span class="line">        @AutoConfigurationPackage</span><br><span class="line">            @Import(AutoConfigurationPackages.Registrar.class)</span><br></pre></td></tr></table></figure>

<p>结论：Springboot 所有自动配置都是在启动的时候扫描并加载(spring.factories). 所有的自动配置配都在里面，但不一定生效。要判断条件是否成立，只有导入了对应的启动器(starter), 才会生效。</p>
<p>spring-boot-autoconfiguration.jar 包含所有的配置</p>
<p>SpringApplication.run() 完了可以深入了解一下，不过，前面的自动装备更重要</p>
<h2 id="YAML-给属性赋值"><a href="#YAML-给属性赋值" class="headerlink" title="YAML 给属性赋值"></a>YAML 给属性赋值</h2><ul>
<li>yaml 和 properties 是可以共存的</li>
<li>共存时 properties 的优先级要高于 yaml</li>
<li>yaml 的后缀可以是 yaml 或 yml 都可以生效</li>
</ul>
<p>yaml 格式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<p>可以直接给对象赋值</p>
<h3 id="基本赋值用法"><a href="#基本赋值用法" class="headerlink" title="基本赋值用法"></a>基本赋值用法</h3><p>通过添加 @Value 实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;旺财&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;3&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(dog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: Dog(name=旺财, age=3)</span></span><br></pre></td></tr></table></figure>

<h3 id="yaml-配置属性"><a href="#yaml-配置属性" class="headerlink" title="yaml 配置属性"></a>yaml 配置属性</h3><p>配置 pom 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>类添加 <code>@ConfigurationProperties</code> 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isHappy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加 <code>application.yaml</code> 文件并设置属性</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jack</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">30</span></span><br><span class="line">  <span class="attr">isHappy:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2020</span><span class="string">/01/01</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>, <span class="attr">K2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">旺财</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: Person(name=jack, age=30, isHappy=false, birth=Wed Jan 01 00:00:00 CST 2020, maps=&#123;k1=v1, K2=v2&#125;, lists=[1, 2, 3], dog=Dog(name=旺财, age=2))</span></span><br></pre></td></tr></table></figure>

<p>PS: yaml 还支持各种随机占位符，一元表达式等，可扩展性要更强</p>
<h3 id="通过-properties-配置"><a href="#通过-properties-配置" class="headerlink" title="通过 properties 配置"></a>通过 properties 配置</h3><p>缺点：表示起来比较冗余</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@PropertySource(value=&quot;classpath:application.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isHappy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSR-303-校验"><a href="#JSR-303-校验" class="headerlink" title="JSR 303 校验"></a>JSR 303 校验</h2><p>spring 自带的验证注解，添加之后可以再给 bean 赋值的时候带上校验效果</p>
<p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>数据配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mailbox:</span></span><br><span class="line">  <span class="attr">email:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure>

<p>添加 <code>@Validated</code>, <code>@Email</code> 等注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mailbox&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailBox</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email(message = &quot;Email format is incorrect!!!&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailBoxTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MailBox box;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(box);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抛异常：org.springframework.boot.context.properties.bind.validation.BindValidationException</span></span><br></pre></td></tr></table></figure>

<h2 id="默认配置文件优先级"><a href="#默认配置文件优先级" class="headerlink" title="默认配置文件优先级"></a>默认配置文件优先级</h2><p>方式一：root/config &gt; root/. &gt; classpath:/config &gt; classpath:/.</p>
<p>方式二： 新建 <code>application-xx.properties</code>, 再 default 中的配置文件中通过 <code>spring.profile.active=xx</code> 指定激活的配置</p>
<p>方式三：yaml + —</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span></span><br><span class="line">        <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>

<h2 id="application-properties-中支持的属性源码中在哪里写的"><a href="#application-properties-中支持的属性源码中在哪里写的" class="headerlink" title="application.properties 中支持的属性源码中在哪里写的"></a>application.properties 中支持的属性源码中在哪里写的</h2><ol>
<li>SpringBoot 启动会加载大量的配置类</li>
<li>我们看需要的功能有没有在 SpringBoot 默认写好的自动配置类当中</li>
<li>再看这个配置类中到底配置了哪些组件</li>
<li>给容器中自动皮欸之类添加组件的时候，会从 properties 类中获取某些属性</li>
</ol>
<p>xxxAutoConfiguration: 自动配置类，给容器添加组件</p>
<p>xxxProperties：封装配置文件中相关属性</p>
<p>debug=true 可以查看配置详情</p>
<h2 id="静态资源加载原理"><a href="#静态资源加载原理" class="headerlink" title="静态资源加载原理"></a>静态资源加载原理</h2><p>分析一波 WebMvcAutoConfiuration.java<br>    -&gt; webjars， web 相关的包封装成 Java 模式，但是不建议这么做</p>
<p>优先级： resources &gt; script &gt; public</p>
<p>首页定制 getIndexHtml()</p>
<p>template 文件夹下的内容需要使用模板引擎，添加 dependency + 注解</p>
<h2 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h2><p>导入 starter</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在 template 下新建页面文件 test.html，新建 controller 文件夹并创建 controller</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello, springboot&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动服务，访问 localhost:8080/hello 可以看到新建的页面</p>
<h2 id="MVC-配置原理"><a href="#MVC-配置原理" class="headerlink" title="MVC 配置原理"></a>MVC 配置原理</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.1.6.RELEASE/reference/html/boot-features-developing-web-applications.html">https://docs.spring.io/spring-boot/docs/2.1.6.RELEASE/reference/html/boot-features-developing-web-applications.html</a></p>
<p>自定义视图解析器 @Configuration + implement WebMvcConfigurer 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定制功能只需要鞋各组件，然后交给 springboot，他会帮我们自动装配</span></span><br><span class="line"><span class="comment">// dispatchservlet</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ViewResolver 实现了视图解析器的接口类，我们可以把它看作是退解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 DispatcherServlet 的 doDispatch 方法打上断点，在 this 下的 viewResolver 变量中可以看到自定义的解析器</p>
<p>@Configuration 修饰的类可以帮你扩展功能</p>
<h2 id="员工管理模块案例"><a href="#员工管理模块案例" class="headerlink" title="员工管理模块案例"></a>员工管理模块案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config 下通过 WebMvcConfigurer 管理首页会更合适一点</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关闭 thymeleaf cache</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="i18n-国际化实现"><a href="#i18n-国际化实现" class="headerlink" title="i18n 国际化实现"></a>i18n 国际化实现</h3><ol>
<li>resource 下新建 i18n 文件夹，添加 properties（默认 login.properties + 语言支持版本 login_en_US.properties, login_zh_CN.properties）</li>
<li>自定义 LocaleResolver 做切换</li>
<li>自定义组件配置到 Spring 容器中 @Bean</li>
<li>用 #{} 替换模板</li>
</ol>
<p>源码中在 WebMvcAutoConfiguration 类中有配置 localeResolver 方法，通过这个引出自定义的类实现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义 resolver</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="comment">//解析请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得请求中的语言参数</span></span><br><span class="line">        String language = request.getParameter(<span class="string">&quot;l&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Locale locale = Locale.getDefault(); <span class="comment">//如果没有就使用默认的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果请求的连接携带了国际化的参数</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(language)) &#123;</span><br><span class="line">            <span class="comment">//zh_CN</span></span><br><span class="line">            String[] split = language.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            <span class="comment">//国家，地区</span></span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在自定义 config 类中通过 @Bean 注册</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过-session-拦截器实现强制登录"><a href="#通过-session-拦截器实现强制登录" class="headerlink" title="通过 session  + 拦截器实现强制登录"></a>通过 session  + 拦截器实现强制登录</h3><p>LoginController 在登录成功的时候 set 一下 session</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(...Model model, HttpSession session)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具體的業務：</span></span><br><span class="line">    <span class="keyword">if</span> ( !StringUtils.isEmpty(username) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(password)) &#123;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;loginUser&quot;</span>, username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/main.html&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定制拦截器实现 HandlerInterceptor 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object loginUser = request.getSession().getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (loginUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Please login first...&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/index.html&quot;</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 config 类中注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/index.html&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;/user/login&quot;</span>, <span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;/img/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="thymeleaf-标签修改方式"><a href="#thymeleaf-标签修改方式" class="headerlink" title="thymeleaf 标签修改方式"></a>thymeleaf 标签修改方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">原来： <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;asserts/js/jquery-3.2.1.slim.min.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">修改： <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/Chart.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/bootstrap.min.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>视频笔记</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 数组 Arrays</title>
    <url>/hexo/2021/01/20/TIJ4-arrays/</url>
    <content><![CDATA[<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>这个章节将深入讲解 Arrays 的使用</p>
<h2 id="Why-arrays-are-special"><a href="#Why-arrays-are-special" class="headerlink" title="Why arrays are special"></a>Why arrays are special</h2><p>array 持有对象的特点：高效，可指定类型，可以存储原始类型的数据</p>
<ul>
<li>数组是最高效的存储结构，代价是容量固定，不可变</li>
<li>ArrayList 可以自动扩容，但是每次扩容都需要重新拷贝引用</li>
<li>泛型没出来前，Array 有类型检查的优势</li>
<li>数组可以装载原始数据类型，容器则需要通过自动开箱，装箱实现</li>
</ul>
<p>以下示例对比数组和容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BerylliumSphere</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;Sphere &quot;</span> + id; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerComparison</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BerylliumSphere[] spheres = <span class="keyword">new</span> BerylliumSphere[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            spheres[i] = <span class="keyword">new</span> BerylliumSphere();</span><br><span class="line">        System.out.println(Arrays.toString(spheres));</span><br><span class="line">        System.out.println(spheres[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">        List&lt;BerylliumSphere&gt; sphereList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            sphereList.add(<span class="keyword">new</span> BerylliumSphere());</span><br><span class="line">        System.out.println(sphereList);</span><br><span class="line">        System.out.println(sphereList.get(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] integers = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(integers));</span><br><span class="line">        System.out.println(integers[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; intList = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">        intList.add(<span class="number">97</span>);</span><br><span class="line">        System.out.println(intList);</span><br><span class="line">        System.out.println(intList.get(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两种方式都会做类型检测，唯一的不同体现在，使用数组时我们通过 <code>[ ]</code> 访问元素，使用容器时我们通过 <code>add( )</code> 和 <code>get( )</code> 来访问。两者很类似是有意为之，为了减少两者之间 migration 的effort。</p>
<p>容器支持的功能更多，现在使用数组的唯一理由就是<strong>快</strong>。但是当你需要应付一些复杂的情况时，数组的这种严格限制就会制约你，你可能需要用容器来代替它。</p>
<h2 id="Arrays-are-first-class-objects"><a href="#Arrays-are-first-class-objects" class="headerlink" title="Arrays are first-class objects"></a>Arrays are first-class objects</h2><p>抛开数组的类型不说，数组修饰符是指向对内对象的引用。它存储了其他对象的引用，你可以通过数组初始化语句隐式创建它，也可以通过 new 的方式显示的创建。整个数组对象基本上只提供一个只读属性(length)给你使用，你还可以通过 <code>[ ]</code> 语法访问数组元素。</p>
<p>下面的例子展示了初始化数组的各种方式，和各种赋值方法。存储原始类型和对象类型的数据基本上一致的，唯一的不同是，如果存储的是对象，那么数组持有的是对象的引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BerylliumSphere</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Sphere &quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayOptions</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Arrays of objects:</span></span><br><span class="line">        BerylliumSphere[] a; <span class="comment">// Local uninitialized variable</span></span><br><span class="line">        BerylliumSphere[] b = <span class="keyword">new</span> BerylliumSphere[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">// The references inside the array are</span></span><br><span class="line">        <span class="comment">// automatically initialized to null:</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b: &quot;</span> + Arrays.toString(b));</span><br><span class="line">        BerylliumSphere[] c = <span class="keyword">new</span> BerylliumSphere[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (c[i] == <span class="keyword">null</span>) <span class="comment">// Can test for null reference</span></span><br><span class="line">                c[i] = <span class="keyword">new</span> BerylliumSphere();</span><br><span class="line">        <span class="comment">// Aggregate initialization:</span></span><br><span class="line">        BerylliumSphere[] d = &#123;<span class="keyword">new</span> BerylliumSphere(),</span><br><span class="line">                <span class="keyword">new</span> BerylliumSphere(), <span class="keyword">new</span> BerylliumSphere()</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// Dynamic aggregate initialization:</span></span><br><span class="line">        a = <span class="keyword">new</span> BerylliumSphere[]&#123;</span><br><span class="line">                <span class="keyword">new</span> BerylliumSphere(), <span class="keyword">new</span> BerylliumSphere(),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// (Trailing comma is optional in both cases)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a.length = &quot;</span> + a.length);</span><br><span class="line">        System.out.println(<span class="string">&quot;b.length = &quot;</span> + b.length);</span><br><span class="line">        System.out.println(<span class="string">&quot;c.length = &quot;</span> + c.length);</span><br><span class="line">        System.out.println(<span class="string">&quot;d.length = &quot;</span> + d.length);</span><br><span class="line">        a = d;</span><br><span class="line">        System.out.println(<span class="string">&quot;a.length = &quot;</span> + a.length);</span><br><span class="line">        <span class="comment">// Arrays of primitives:</span></span><br><span class="line">        <span class="keyword">int</span>[] e; <span class="comment">// Null reference</span></span><br><span class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">// The primitives inside the array are</span></span><br><span class="line">        <span class="comment">// automatically initialized to zero:</span></span><br><span class="line">        System.out.println(<span class="string">&quot;f: &quot;</span> + Arrays.toString(f));</span><br><span class="line">        <span class="keyword">int</span>[] g = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g.length; i++)</span><br><span class="line">            g[i] = i * i;</span><br><span class="line">        <span class="keyword">int</span>[] h = &#123;<span class="number">11</span>, <span class="number">47</span>, <span class="number">93</span>&#125;;</span><br><span class="line">        <span class="comment">// Compile error: variable e not initialized:</span></span><br><span class="line">        <span class="comment">//!System.out.println(&quot;e.length = &quot; + e.length);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;f.length = &quot;</span> + f.length);</span><br><span class="line">        System.out.println(<span class="string">&quot;g.length = &quot;</span> + g.length);</span><br><span class="line">        System.out.println(<span class="string">&quot;h.length = &quot;</span> + h.length);</span><br><span class="line">        e = h;</span><br><span class="line">        System.out.println(<span class="string">&quot;e.length = &quot;</span> + e.length);</span><br><span class="line">        e = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;e.length = &quot;</span> + e.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// b: [null, null, null, null, null]</span></span><br><span class="line"><span class="comment">// a.length = 2</span></span><br><span class="line"><span class="comment">// b.length = 5</span></span><br><span class="line"><span class="comment">// c.length = 4</span></span><br><span class="line"><span class="comment">// d.length = 3</span></span><br><span class="line"><span class="comment">// a.length = 3</span></span><br><span class="line"><span class="comment">// f: [0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="comment">// f.length = 5</span></span><br><span class="line"><span class="comment">// g.length = 4</span></span><br><span class="line"><span class="comment">// h.length = 3</span></span><br><span class="line"><span class="comment">// e.length = 3</span></span><br><span class="line"><span class="comment">// e.length = 2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>数组 a 未初始化，编译器在你赋值之前会阻止你做任何操作</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>arrays</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 容器深入研究 Container in Depth</title>
    <url>/hexo/2021/01/15/TIJ4-containers-in-depth/</url>
    <content><![CDATA[<p>[ ] 结合 Filling containers 章节复习 Adapter 设计模式</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本章需要些许 Generic 章节的知识，所以看之前最好过一遍前章。</p>
<h2 id="Full-container-taxonomy-分类学"><a href="#Full-container-taxonomy-分类学" class="headerlink" title="Full container taxonomy 分类学"></a>Full container taxonomy 分类学</h2><p>Java5 中新加的内容：</p>
<ul>
<li>Queue 接口以及对应的实现 PriorityQueue，BlockingQueue 将在 Concurrency 章节介绍</li>
<li>ConcurrentMap 以及对应实现 ConcurrentHashMap 也放到 Concurrency</li>
<li>CopyOnWriteArrayList， CopyOnWriteArraySet 同上</li>
<li>EnumSet and EnumMap, special implementations of Set and Map for use with enums, and shown in the Enumerated Types chapter.</li>
<li>Collectipns 中的一些单元方法</li>
</ul>
<p>你可以看到这个整个集合体系中有几个类是以 Abstract 开头的，这些用虚线框包裹的类表示抽象类。他们实现了对应接口的部分功能，比如当你想要实现一个 Set 接口的时候, 你不会想要实现 Set 接口并且实现里面的所有方法。一般来说，我们会通过继承 AbstractSet 类做一个最小实现。但是说实话现在集合类基本上能满足你的需求了，一般不需要自己做扩展。</p>
<h2 id="Filling-containers"><a href="#Filling-containers" class="headerlink" title="Filling containers"></a>Filling containers</h2><p>类似于 Arrays 这个 util 类，针对集合类，也有一个 util 类叫做 Collections。它里面有一个 fill() 方法可以将一个对象复制填充满整个容器，执行结果返回一个 List, 我们可以将整个 list 传给其他构造函数或者调用 addAll() 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringAddress</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringAddress</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString() + <span class="string">&quot; &quot;</span> + s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FillingLists</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;StringAddress&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(</span><br><span class="line">                Collections.nCopies(<span class="number">4</span>, <span class="keyword">new</span> StringAddress(<span class="string">&quot;Hello&quot;</span>)));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        Collections.fill(list, <span class="keyword">new</span> StringAddress(<span class="string">&quot;World!&quot;</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// [reading.container.StringAddress@7c53a9eb Hello, reading.container.StringAddress@7c53a9eb Hello, reading.container.StringAddress@7c53a9eb Hello, reading.container.StringAddress@7c53a9eb Hello]</span></span><br><span class="line"><span class="comment">// [reading.container.StringAddress@ed17bee World!, reading.container.StringAddress@ed17bee World!, reading.container.StringAddress@ed17bee World!, reading.container.StringAddress@ed17bee World!]</span></span><br></pre></td></tr></table></figure>

<p>如上例所示，给出了两种方法填充集合，一种是调用 Collections.nCopies() 另一种是调用 Collections.fill()，第一种扩展性更好。第二种方式只支持替换，不能扩容。</p>
<h2 id="A-Generator-solution"><a href="#A-Generator-solution" class="headerlink" title="A Generator solution"></a>A Generator solution</h2><p>Collection 子类都有一个接收其他 Collection 的构造器。为了实验方便，我们创建一个构造器，接收类型和数量做参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="function">T <span class="title">next</span><span class="params">()</span></span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionData</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CollectionData</span><span class="params">(Generator&lt;T&gt; gen, <span class="keyword">int</span> quantity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; quantity; i++)</span><br><span class="line">            add(gen.next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A generic convenience method:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">CollectionData&lt;T&gt; <span class="title">list</span><span class="params">(Generator&lt;T&gt; gen, <span class="keyword">int</span> quantity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CollectionData&lt;&gt;(gen, quantity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上面的代码我们可以构造一个任意容量的容器，创建的对象也可以作为参数传给任意 Collection 子类。同时结合自带的 addAll() 方法也可以用于填充容器。</p>
<p>CollectionData is an example of the Adapter design pattern;1 it adapts a Generator to the constructor for a Collection.</p>
<p>Here’s an example that initializes a LinkedHashSet: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Government</span> <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    String[] foundation = (<span class="string">&quot;strange women lying in ponds &quot;</span> +</span><br><span class="line">            <span class="string">&quot;distributing swords is no basis for a system of &quot;</span> +</span><br><span class="line">            <span class="string">&quot;government&quot;</span>).split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> foundation[index++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDataTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(</span><br><span class="line">                <span class="keyword">new</span> CollectionData&lt;&gt;(<span class="keyword">new</span> Government(), <span class="number">15</span>));</span><br><span class="line">        <span class="comment">// Using the convenience method:</span></span><br><span class="line">        set.addAll(CollectionData.list(<span class="keyword">new</span> Government(), <span class="number">15</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// [strange, women, lying, in, ponds, distributing, swords, is, no, basis, for, a, system, of, government]</span></span><br></pre></td></tr></table></figure>

<p>由于 LinkedHashSet 的关系，所以容器中元素的顺序不变。</p>
<p>TODO: 后面的例子需要 Arrays 章节的内容，没看过，直接继续感觉很不爽，我回头看看先。Arrays 只有 30+ pages 应该挺快的</p>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>collection</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 泛型</title>
    <url>/hexo/2020/12/17/TIJ4-generics/</url>
    <content><![CDATA[<p>项目重构的时候刚好遇到一些泛型相关的问题，发现这块掌握的确实有点浅薄，重新认真读一遍 Think in Java 4th 相关章节并做笔记，顺便一提，100 页的内容有点心虚。</p>
<ul>
<li><a href="#前述">前述</a></li>
<li><a href="#comparison-with-c">Comparison with C++</a></li>
<li><a href="#simple-generics">Simple generics</a><ul>
<li><a href="#a-tuple-library">A tuple library</a></li>
<li><a href="#a-stack-class">A stack class</a></li>
<li><a href="#randomlist">RandomList</a></li>
</ul>
</li>
<li><a href="#generic-interfaces">Generic interfaces</a></li>
<li><a href="#generic-methods">Generic methods</a></li>
</ul>
<p>想要解决的问题：</p>
<ul>
<li><input disabled="" type="checkbox"> 泛型的定义是什么</li>
<li><input disabled="" type="checkbox"> 为什么需要泛型</li>
<li><input disabled="" type="checkbox"> 集合类中使用泛型的注意点</li>
</ul>
<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>范型提供了一种比 interface 更高的通用性，它代表的语义是：对一批 unspecified type 的对象生效，而不单单是某一类 class 或者接口。</p>
<p>Java 的范型实现看作者的意思好像还不如 C++ 里实现的好。</p>
<h2 id="Comparison-with-C"><a href="#Comparison-with-C" class="headerlink" title="Comparison with C++"></a>Comparison with C++</h2><p>Java 灵感来源于 C++, 通过比较 C++ 的泛型(template)可以让你更清楚 Java 泛型的极限。</p>
<h2 id="Simple-generics"><a href="#Simple-generics" class="headerlink" title="Simple generics"></a>Simple generics</h2><p>generic 这个概念最初被提出来是为了创建容器 class，这是有别于 arrays 的一个概念，它会提供更高的扩展性，跟多信息要看 Holding your object 章节和后面的章节。(他这里提到的容器我估摸着就是 Collection 那一族类了)</p>
<p>下面是一个很常见的 class 持有 object 的例子, 里面有一个 Automobile 类，还有一个 Holder1 类通过构造函数持有它：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Automobile</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Automobile a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Holder1</span><span class="params">(Automobile a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Automobile <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这种做法限制了你能传入的类型，在 Java 5 之前，如果你想把它变得更通用，你只能将它的参数类型改为 Object.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Holder2</span><span class="params">(Object a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(Object a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Holder2 h2 = <span class="keyword">new</span> Holder2(<span class="keyword">new</span> Automobile());</span><br><span class="line">        Automobile a = (Automobile) h2.get();</span><br><span class="line">        h2.set(<span class="string">&quot;Not an Automobile&quot;</span>);</span><br><span class="line">        String s = (String) h2.get();</span><br><span class="line">        h2.set(<span class="number">1</span>); <span class="comment">// Autoboxes to Integer</span></span><br><span class="line">        Integer x = (Integer) h2.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>上例中 Holder2 持有了三种不同类型的数据，但是通常来说我们只希望容器持有一种特殊类型的数据就行了，指定之后，这种特殊性可以在编译期就被检测出来。这种语法就是范型，我们在 class 名字后面接一个 尖括号+字母 的形式表示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder3</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Holder3</span><span class="params">(T a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Holder3&lt;Automobile&gt; h3 = <span class="keyword">new</span> Holder3&lt;Automobile&gt;(<span class="keyword">new</span> Automobile());</span><br><span class="line">        Automobile a = h3.get(); <span class="comment">// No cast needed</span></span><br><span class="line">        <span class="comment">// h3.set(&quot;Not an Automobile&quot;); // Error</span></span><br><span class="line">        <span class="comment">// h3.set(1); // Error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>现在你在创建 Holder 的时候必须在尖括号中指定你想要的类型，当你从容器中取值的时候，jvm 会自动帮你完成类型转化。</p>
<h3 id="A-tuple-library"><a href="#A-tuple-library" class="headerlink" title="A tuple library"></a>A tuple library</h3><p>Java 语法限制一个 method 只能返回一个值，那么如果你想返回多个，怎么办？ 这种情况下我们可以定一个对象里面持有多个值，并且只读不能写。这种对象有个名字，叫做 Data Transfer Object/Message 也叫元组</p>
<p>元组长度可以是任意的，但是类型必须是确定的，这里我们可以用泛型绕过去，对于多个元素的问题，我们可以创建不同的元组来做兼容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoTuple</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> A first;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> B second;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TwoTuple</span><span class="params">(A a, B b)</span> </span>&#123;</span><br><span class="line">        first = a;</span><br><span class="line">        second = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + first + <span class="string">&quot;, &quot;</span> + second + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>精髓：通过 final 关键字 代替 getXXX method, 代码更简单明了，如果你想要一个三个变量的元组，你可以继承这个 class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeTuple</span>&lt;<span class="title">A</span>, <span class="title">B</span>, <span class="title">C</span>&gt; <span class="keyword">extends</span> <span class="title">TwoTuple</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> C third;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreeTuple</span><span class="params">(A a, B b, C c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(a, b);</span><br><span class="line">        third = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + first + <span class="string">&quot;, &quot;</span> + second + <span class="string">&quot;, &quot;</span> + third + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>更多变量的元组以此类推, 测试如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Amphibian</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TupleTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> TwoTuple&lt;String, Integer&gt; <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Autoboxing converts the int to Integer:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TwoTuple&lt;String, Integer&gt;(<span class="string">&quot;hi&quot;</span>, <span class="number">47</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ThreeTuple&lt;Amphibian, String, Integer&gt; <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreeTuple&lt;Amphibian, String, Integer&gt;(</span><br><span class="line">                <span class="keyword">new</span> Amphibian(), <span class="string">&quot;hi&quot;</span>, <span class="number">47</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TwoTuple&lt;String, Integer&gt; ttsi = f();</span><br><span class="line">        System.out.println(ttsi);</span><br><span class="line">        <span class="comment">// ttsi.first = &quot;there&quot;; // Compile error: final</span></span><br><span class="line">        System.out.println(g());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// (hi, 47)</span></span><br><span class="line"><span class="comment">// (generic.Amphibian@7c53a9eb, hi, 47)</span></span><br></pre></td></tr></table></figure>

<p>通过泛型我们可以很轻松的指定 tuple 中成员的类型，通过 new 来新建对象还是略显繁琐，后面有改进型。</p>
<h3 id="A-stack-class"><a href="#A-stack-class" class="headerlink" title="A stack class"></a>A stack class</h3><p>这里回顾了一下 Holding Your Objects 章节的 LinkedList 例子，然并卵我并没有看过 ╮(￣▽￣””)╭</p>
<p>下面是我们自己实现的带有 linked 存储机制的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">U</span>&gt; </span>&#123;</span><br><span class="line">        U item;</span><br><span class="line">        Node&lt;U&gt; next;</span><br><span class="line"></span><br><span class="line">        Node() &#123;</span><br><span class="line">            item = <span class="keyword">null</span>;</span><br><span class="line">            next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node(U item, Node&lt;U&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = item;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> item == <span class="keyword">null</span> &amp;&amp; next == <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; top = <span class="keyword">new</span> Node&lt;&gt;(); <span class="comment">// End sentinel</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T item)</span> </span>&#123;</span><br><span class="line">        top = <span class="keyword">new</span> Node&lt;&gt;(item, top);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T result = top.item;</span><br><span class="line">        <span class="keyword">if</span> (!top.end())</span><br><span class="line">            top = top.next;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedStack&lt;String&gt; lss = <span class="keyword">new</span> LinkedStack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : <span class="string">&quot;Phasers on stun!&quot;</span>.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">            lss.push(s);</span><br><span class="line">        String s;</span><br><span class="line">        <span class="keyword">while</span> ((s = lss.pop()) != <span class="keyword">null</span>)</span><br><span class="line">            System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// stun!</span></span><br><span class="line"><span class="comment">// on</span></span><br><span class="line"><span class="comment">// Phasers</span></span><br></pre></td></tr></table></figure>

<p>这里通过内部静态类创建了一个 Node class 代表一个节点。这个带泛型的 Node 节点是一种很经典的数据结构，将数据通过泛型封装，结构体现在 Node 中。</p>
<p>LinkedStack 初始化时会声明一个内容为空的节点，在后续的 pop 方法中，通过判断节点的这两个内容是不是空来断定容器是否为空。</p>
<h3 id="RandomList"><a href="#RandomList" class="headerlink" title="RandomList"></a>RandomList</h3><p>设计一个数据结构，每次调用 list 的 select 方法的时候会随机返回一个元素：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;T&gt; storage = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">    <span class="keyword">private</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T item)</span> </span>&#123;</span><br><span class="line">        storage.add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> storage.get(rand.nextInt(storage.size()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RandomList&lt;String&gt; rs = <span class="keyword">new</span> RandomList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : (<span class="string">&quot;The quick brown fox jumped over &quot;</span> +</span><br><span class="line">                <span class="string">&quot;the lazy brown dog&quot;</span>).split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">            rs.add(s);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">            System.out.print(rs.select() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// brown over fox quick quick dog brown The brown lazy brown</span></span><br></pre></td></tr></table></figure>

<p>数据结构很简单，随机性由 Random 对象提供 <code>random.nextInt(x)</code> 可以给出 0-x 返回内的整数。RandomList 里面新建一个 ArrayList 作为数据存储容器。</p>
<h2 id="Generic-interfaces"><a href="#Generic-interfaces" class="headerlink" title="Generic interfaces"></a>Generic interfaces</h2><p>接口也可以由泛型配置。Generator(生成器) 是一种特殊的工厂方法，他可以在不接受任何参数的情况下，创建你需要的对象。这里我们为产生对象的方法取名为 <code>next()</code>。</p>
<p>示例说明：</p>
<ol>
<li>声明一个 Generator 接口带有泛型参数，只有一个方法 next 返回类型为泛型</li>
<li>创建产品基类 Coffee 并创建对应的实体类</li>
<li>创建生成器实体类 CoffeeGenerator，他实现了 Generator 接口和 Iterable 接口，前者用于一次生成一个的模式，后者用于一次性生成多个的模式，有了 Iterable 就可以支持 foreach 语法了</li>
</ol>
<p>这里面唯一我想不到的是他通过 <code>Class.newInstance()</code> 直接生成对象的，就感觉很突然，很直球 (´Д` )</p>
<p>而且他在实现里使用 Iterable + 内部类实现 Iterator 的方式，我对这个也听陌生的，虽然知道有这种用法。。。感觉又可以开坑了 （；￣ェ￣）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123;<span class="function">T <span class="title">next</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName() + <span class="string">&quot; &quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Latte</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cappuccino</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Americano</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Breve</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeGenerator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">Coffee</span>&gt;, <span class="title">Iterable</span>&lt;<span class="title">Coffee</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Class[] types = &#123;Latte.class, Mocha.class, Cappuccino.class, Americano.class, Breve.class,&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CoffeeGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For iteration:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CoffeeGenerator</span><span class="params">(<span class="keyword">int</span> sz)</span> </span>&#123;</span><br><span class="line">        size = sz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Coffee)types[rand.nextInt(types.length)].newInstance();</span><br><span class="line">            <span class="comment">// Report programmer errors at run time:</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CoffeeIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Coffee</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = size;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Coffee <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            count--;</span><br><span class="line">            <span class="keyword">return</span> CoffeeGenerator.<span class="keyword">this</span>.next();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123; <span class="comment">// Not implemented</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Coffee&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CoffeeIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CoffeeGenerator gen = <span class="keyword">new</span> CoffeeGenerator();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            System.out.println(gen.next());</span><br><span class="line">        <span class="keyword">for</span> (Coffee c : <span class="keyword">new</span> CoffeeGenerator(<span class="number">5</span>))</span><br><span class="line">            System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Americano 0</span></span><br><span class="line"><span class="comment">// Latte 1</span></span><br><span class="line"><span class="comment">// Americano 2</span></span><br><span class="line"><span class="comment">// Mocha 3</span></span><br><span class="line"><span class="comment">// Mocha 4</span></span><br><span class="line"><span class="comment">// Breve 5</span></span><br><span class="line"><span class="comment">// Americano 6</span></span><br><span class="line"><span class="comment">// Latte 7</span></span><br><span class="line"><span class="comment">// Cappuccino 8</span></span><br><span class="line"><span class="comment">// Cappuccino 9</span></span><br></pre></td></tr></table></figure>

<p>下面是使用泛型接口实现斐波那契额的例子</p>
<p>算法这一块，不是我吹逼，我真的太弱了 （；￣ェ￣） 老是忘记</p>
<p>这里 class 内部持有一个 count 变量，每次调用 next() 方法，都会使得 count+1, 第 n 次调用就相当于打印 fib(n) 的值，fib 是一个基本的递归函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fib(count++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">2</span>) + fib(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fibonacci gen = <span class="keyword">new</span> Fibonacci();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++)</span><br><span class="line">            System.out.print(gen.next() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584</span></span><br></pre></td></tr></table></figure>

<p>泛型参数不支持基本数据类型，必须是包装型的。</p>
<p>下面我们用 Iterable 接口 + adapter 模式扩展一下上面的斐波那契数列，说实话，这个 adapter 模式和我印象中的不一样，又得复习一下对应的那块设计模式 code 了 （；￣ェ￣）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IterableFibonacci</span> <span class="keyword">extends</span> <span class="title">Fibonacci</span> <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IterableFibonacci</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        n = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Integer&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iterator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> n &gt; <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                n--;</span><br><span class="line">                <span class="keyword">return</span> IterableFibonacci.<span class="keyword">this</span>.next();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123; <span class="comment">// Not implemented</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : <span class="keyword">new</span> IterableFibonacci(<span class="number">18</span>))</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584</span></span><br></pre></td></tr></table></figure>

<h2 id="Generic-methods"><a href="#Generic-methods" class="headerlink" title="Generic methods"></a>Generic methods</h2><p>TBD…</p>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>泛型</tag>
        <tag>generic</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 持有对象</title>
    <url>/hexo/2020/12/22/TIJ4-holding-your-objects/</url>
    <content><![CDATA[<ul>
<li><a href="#前述">前述</a></li>
<li><a href="#generics-and-type-safe-containers">Generics and type-safe containers</a></li>
<li><a href="#basic-concepts">Basic concepts</a></li>
<li><a href="#adding-groups-of-elements">Adding groups of elements</a></li>
<li><a href="#printing-containers">Printing containers</a></li>
<li><a href="#list">List</a></li>
<li><a href="#iterator">Iterator</a></li>
</ul>
<p>遇到 Iterator 相关的问题，重新看一遍 Holding Your Objects 章节</p>
<p>想要解决的问题：</p>
<ul>
<li><input disabled="" type="checkbox"> 这个章节具体讲了什么东西</li>
<li><input disabled="" type="checkbox"> iterable/iterator/forEach 之前的关系和区别</li>
</ul>
<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>如果程序中只包含长度一定的，生命周期可知的对象，那这个程序确实足够简单了。</p>
<p>Array 是持有对象的最高效的方式，但是长度限制死了。</p>
<p>Java 中使用 ‘collection classes’ 来解决可变长容器的问题，因为 Collection 在 Java 中已经有对应的类了，所以这个概念又被叫做容器(Container)。</p>
<p>这章只是介绍基本用法，后面有一节 Containers in Depth 会深入介绍</p>
<h2 id="Generics-and-type-safe-containers"><a href="#Generics-and-type-safe-containers" class="headerlink" title="Generics and type-safe containers"></a>Generics and type-safe containers</h2><h2 id="Basic-concepts"><a href="#Basic-concepts" class="headerlink" title="Basic concepts"></a>Basic concepts</h2><h2 id="Adding-groups-of-elements"><a href="#Adding-groups-of-elements" class="headerlink" title="Adding groups of elements"></a>Adding groups of elements</h2><h2 id="Printing-containers"><a href="#Printing-containers" class="headerlink" title="Printing containers"></a>Printing containers</h2><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>有序的一个数据序列，在 Collection 的基础上添加了一些方法来达到在 list 中间插入，删除元素的效果。</p>
<ul>
<li>ArrayList: 注重随机读写，但是插入删除性能比较慢</li>
<li>LinkedList: 注重顺序读写，插入删除很快，随机读写很慢，功能上比 ArrayList 多</li>
</ul>
<h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><p>容器设计出来的主要作用：持有对象</p>
<p>Iteractor 是集合中的一个轻量级对象，可以很方便的在容器类之间做兼容，常见用法：</p>
<ol>
<li>用 Collection 对象调用 iterator() 方法拿到 Iterator 对象，它已经可以为你返回第一个对象了。</li>
<li>调用 next() 返回下一个对象</li>
<li>查看是否有跟多的对象过 hasNext()</li>
<li>调用 remove() 删除之前的使用的对象</li>
</ol>
<p>这个章节虽然简单，但是例子都是在 Type Information 里面的，得先看这个，不然看的没什么头绪。</p>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>collection</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 接口</title>
    <url>/hexo/2021/03/09/TIJ4-interfaces/</url>
    <content><![CDATA[<ul>
<li><a href="#intro">Intro</a></li>
<li><a href="#abstract-classes-and-methods">Abstract classes and methods</a></li>
<li><a href="#interfaces">Interfaces</a></li>
<li><a href="#complete-decoupling">Complete decoupling</a></li>
<li><a href="#multiple-inheritance-in-java">“Multiple inheritance” in Java</a></li>
<li><a href="#nesting-interfaces">Nesting interfaces</a></li>
</ul>
<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Interfaces and abstract classes provide more structured way to<br>separate interface from implementation.</p>
<h2 id="Abstract-classes-and-methods"><a href="#Abstract-classes-and-methods" class="headerlink" title="Abstract classes and methods"></a>Abstract classes and methods</h2><p>描述了前几章乐器的例子，其中使用 abstract class 会更符合题意</p>
<h2 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h2><p>interface 是 abstract 在抽象上的进一步体现，他允让你决定方法名，参数列表和返回值，并且你不用实现它，结果只做了规范，但不需要实现。</p>
<p>通过 interface 你仿佛在说：所有实现了这个接口的类都应该长这样。其他编程语言中也叫<strong>protocol</strong></p>
<p>除此之外，interface 变相的让你的类实现了多重继承，你的类可以转化为多个基类。</p>
<p>interface 可以用 public 修饰，也可以不写(包可见). 在 interface 中声明的 field 都是默认 static + final 的。interface 中声明的方法即使你没有显示的指定访问修饰符也是默认是 public 的。</p>
<p>// TODO，这里也给了例子，不过补上要等看了前面的章节再说了</p>
<h2 id="Complete-decoupling"><a href="#Complete-decoupling" class="headerlink" title="Complete decoupling"></a>Complete decoupling</h2><p>设想这么一种场景，我们创建一个处理器类，他有两个方法 name() 和 process()。process() 可以接收字符串并处理。我们再声明一个 Apply 类作为 client 端声明方法接收 Processor 类，调用 Processor 方法。这个没记错的话就是策略模式了。作者的行为中也这么指出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Object <span class="title">process</span><span class="params">(Object input)</span> </span>&#123; <span class="keyword">return</span> input; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upcase</span> <span class="keyword">extends</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123; <span class="comment">// Covariant return</span></span><br><span class="line">        <span class="keyword">return</span> ((String)input).toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Downcase</span> <span class="keyword">extends</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((String)input).toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Splitter</span> <span class="keyword">extends</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// The split() argument divides a String into pieces:</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(((String)input).split(<span class="string">&quot; &quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apply</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Processor p, Object s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Using Processor &quot;</span> + p.name());</span><br><span class="line">        System.out.println(p.process(s));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s =</span><br><span class="line">            <span class="string">&quot;Disagreement with beliefs is by definition incorrect&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        process(<span class="keyword">new</span> Upcase(), s);</span><br><span class="line">        process(<span class="keyword">new</span> Downcase(), s);</span><br><span class="line">        process(<span class="keyword">new</span> Splitter(), s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Processor Upcase</span></span><br><span class="line"><span class="comment">// DISAGREEMENT WITH BELIEFS IS BY DEFINITION INCORRECT</span></span><br><span class="line"><span class="comment">// Using Processor Downcase</span></span><br><span class="line"><span class="comment">// disagreement with beliefs is by definition incorrect</span></span><br><span class="line"><span class="comment">// Using Processor Splitter</span></span><br><span class="line"><span class="comment">// [Disagreement, with, beliefs, is, by, definition, incorrect]</span></span><br></pre></td></tr></table></figure>

<p>现在我们有另一批过滤器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waveform</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Waveform &quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Waveform <span class="title">process</span><span class="params">(Waveform input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowPass</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> cutoff;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LowPass</span><span class="params">(<span class="keyword">double</span> cutoff)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cutoff = cutoff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Waveform <span class="title">process</span><span class="params">(Waveform input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input; <span class="comment">// Dummy processing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighPass</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> cutoff;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HighPass</span><span class="params">(<span class="keyword">double</span> cutoff)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cutoff = cutoff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Waveform <span class="title">process</span><span class="params">(Waveform input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BandPass</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> lowCutoff, highCutoff;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BandPass</span><span class="params">(<span class="keyword">double</span> lowCut, <span class="keyword">double</span> highCut)</span> </span>&#123;</span><br><span class="line">        lowCutoff = lowCut;</span><br><span class="line">        highCutoff = highCut;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Waveform <span class="title">process</span><span class="params">(Waveform input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>他的行为模式和前面的 Processor 是很相似的，理论上来说我们可以将 Filter 看作是一个算法的集合，然后 Apply 中接收 Filter 这族算法，同时接收一个 Waveform 作为输入，process() 方法产生输出即可。但是由于 Apply 定义的方法指定了 Processor 为参数，导致兼容 Filter 失败了</p>
<p>这时我们改一下 Processor 的代码，将其定义为一个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">process</span><span class="params">(Object input)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apply</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Processor p, Object s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Using Processor &quot;</span> + p.name());</span><br><span class="line">        System.out.println(p.process(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时包装一个处理 String 的 Processor 基类，并实现各种具体的处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 虽然它这种 abstract 类中直接写具体调用的做法我总感觉很飘逸，但是理解不难</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StringProcessor</span> <span class="keyword">implements</span> <span class="title">Processor</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">process</span><span class="params">(Object input)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s = <span class="string">&quot;If she weighs the same as a duck, she’s made of wood&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Apply.process(<span class="keyword">new</span> Upcase(), s);</span><br><span class="line">        Apply.process(<span class="keyword">new</span> Downcase(), s);</span><br><span class="line">        Apply.process(<span class="keyword">new</span> Splitter(), s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upcase</span> <span class="keyword">extends</span> <span class="title">StringProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123; </span><br><span class="line">        <span class="comment">// Covariant return</span></span><br><span class="line">        <span class="keyword">return</span> ((String)input).toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Downcase</span> <span class="keyword">extends</span> <span class="title">StringProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((String)input).toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Splitter</span> <span class="keyword">extends</span> <span class="title">StringProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(((String)input).split(<span class="string">&quot; &quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Processor Upcase</span></span><br><span class="line"><span class="comment">// IF SHE WEIGHS THE SAME AS A DUCK, SHE’S MADE OF WOOD</span></span><br><span class="line"><span class="comment">// Using Processor Downcase</span></span><br><span class="line"><span class="comment">// if she weighs the same as a duck, she’s made of wood</span></span><br><span class="line"><span class="comment">// Using Processor Splitter</span></span><br><span class="line"><span class="comment">// [If, she, weighs, the, same, as, a, duck,, she’s, made, of, wood]</span></span><br></pre></td></tr></table></figure>

<p>现在轮到重构 Filter 部分了，和我原本料想的直接改代码不同，作者直接假定，这部分 Filter 类的代码就是第三方方法，你无权改动，这个时候怎么办？他又引入了 Adaptor 模式。好在这两个模式我都还挺熟悉，不过没记录过，明天花点时间写一下 ╮(￣▽￣””)╭</p>
<p>通过实现 Processor 实现一个 Filter 的包装类, 然后将 Filter 传给包装类，并把包装类作为 Apply.process() 的方式实现了曲线救国，秀啊，小老弟。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterAdapter</span> <span class="keyword">implements</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    Filter filter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FilterAdapter</span><span class="params">(Filter filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filter = filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filter.name();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Waveform <span class="title">process</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filter.process((Waveform) input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Waveform w = <span class="keyword">new</span> Waveform();</span><br><span class="line">        Apply.process(<span class="keyword">new</span> FilterAdapter(<span class="keyword">new</span> LowPass(<span class="number">1.0</span>)), w);</span><br><span class="line">        Apply.process(<span class="keyword">new</span> FilterAdapter(<span class="keyword">new</span> HighPass(<span class="number">2.0</span>)), w);</span><br><span class="line">        Apply.process(<span class="keyword">new</span> FilterAdapter(<span class="keyword">new</span> BandPass(<span class="number">3.0</span>, <span class="number">4.0</span>)), w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Processor LowPass</span></span><br><span class="line"><span class="comment">// Waveform 0</span></span><br><span class="line"><span class="comment">// Using Processor HighPass</span></span><br><span class="line"><span class="comment">// Waveform 0</span></span><br><span class="line"><span class="comment">// Using Processor BandPass</span></span><br><span class="line"><span class="comment">// Waveform 0</span></span><br></pre></td></tr></table></figure>

<h2 id="“Multiple-inheritance”-in-Java"><a href="#“Multiple-inheritance”-in-Java" class="headerlink" title="“Multiple inheritance” in Java"></a>“Multiple inheritance” in Java</h2><p>TBD</p>
<h2 id="Nesting-interfaces"><a href="#Nesting-interfaces" class="headerlink" title="Nesting interfaces"></a>Nesting interfaces</h2><p>Interfaces 可以内嵌到 class 或者其他 interface 内部，这种做法可以引入一些有趣的特性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BImp</span> <span class="keyword">implements</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BImp2</span> <span class="keyword">implements</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CImp</span> <span class="keyword">implements</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CImp2</span> <span class="keyword">implements</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DImp</span> <span class="keyword">implements</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DImp2</span> <span class="keyword">implements</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> D <span class="title">getD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DImp2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> D dRef;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveD</span><span class="params">(D d)</span> </span>&#123;</span><br><span class="line">        dRef = d;</span><br><span class="line">        dRef.f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">G</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Redundant &quot;public&quot;:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">H</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// Cannot be private within an interface:</span></span><br><span class="line">    <span class="comment">// ! private interface I &#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NestingInterfaces</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BImp</span> <span class="keyword">implements</span> <span class="title">A</span>.<span class="title">B</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CImp</span> <span class="keyword">implements</span> <span class="title">A</span>.<span class="title">C</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Cannot implement a private interface except</span></span><br><span class="line">    <span class="comment">// within that interface’s defining class:</span></span><br><span class="line">    <span class="comment">// ! class DImp implements A.D &#123;</span></span><br><span class="line">    <span class="comment">// ! public void f() &#123;&#125;</span></span><br><span class="line">    <span class="comment">// ! &#125;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EImp</span> <span class="keyword">implements</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EGImp</span> <span class="keyword">implements</span> <span class="title">E</span>.<span class="title">G</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EImp2</span> <span class="keyword">implements</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">EG</span> <span class="keyword">implements</span> <span class="title">E</span>.<span class="title">G</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        <span class="comment">// Can’t access A.D:</span></span><br><span class="line">        <span class="comment">// ! A.D ad = a.getD();</span></span><br><span class="line">        <span class="comment">// Doesn’t return anything but A.D:</span></span><br><span class="line">        <span class="comment">// ! A.DImp2 di2 = a.getD();</span></span><br><span class="line">        <span class="comment">// Cannot access a member of the interface:</span></span><br><span class="line">        <span class="comment">// ! a.getD().f();</span></span><br><span class="line">        <span class="comment">// Only another A can do anything with getD():</span></span><br><span class="line">        A a2 = <span class="keyword">new</span> A();</span><br><span class="line">        a2.receiveD(a.getD());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种嵌套 interface 的语法是合理的，和普通的 interface 一下，所有访问修饰符都用在嵌套接口上。</p>
<p>内嵌接口在使用上和 内部类并没有什么不同. 那么 private 的 interface 有什么价值呢？如果你以为 nested private interface 的实现只能是 private 的，那么你就错了。看看 DImp2 就可知，其实现可以是任意访问类型的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">! 后面的这段感觉翻译不过去，模模糊糊，看了中文版，貌似没有相关的章节。。。。汗</span><br><span class="line"></span><br><span class="line">but A.DImp2 shows that it can also be implemented as a public class. However,</span><br><span class="line">A.DImp2 can only be used as itself. You are not allowed to mention the fact that it</span><br><span class="line">implements the private interface D, so implementing a private interface is a way to force</span><br><span class="line">the definition of the methods in that interface without adding any type information (that is,</span><br><span class="line">without allowing any upcasting).</span><br><span class="line"></span><br><span class="line">个人理解为 private 接口将接口的实现和定义限制在了定义类里面。而且一般使用的时候都是会返回接口类，像上面的 D getD(), 而 D 又是 private 的，限制了他的使用，这应该就是原文中 &#39;A.DImp2 can only be used as itself&#39; 的意思吧</span><br></pre></td></tr></table></figure>

<p><code>getD()</code> 方法是 private 修饰的嵌套接口的更特殊的使用方式，在 <code>main()</code> 中，我们 comment 了很多对 D 接口的引用，但是这些用法都有编译错误。唯一的使用方式是新建一个 A 对象，调用以 D 为参数的方法。</p>
<p>Interface E 的例子想要说明的事，接口内部也能声明接口，但是秉承接口内部元素必须都是规则，内嵌的接口也<strong>必须只能</strong>是 public 的</p>
<p>Nestinglnterfaces 类中给出了嵌套接口更多的实现，当我们实现一个嵌套接口的外部接口(E)时，是不需要我们实现对应的嵌套接口的。</p>
<p>private interface 在外部是不能访问的，只能在声明他的类内部做实现</p>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>interface</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 复用类 Reusing Classes</title>
    <url>/hexo/2020/12/17/TIJ4-reusing-classes/</url>
    <content><![CDATA[<p>最近看 Code 经常看到有使用 final 参数的例子，但是对这点没有系统的认识，重新认真读一遍 Think in Java 4th 相关章节并做笔记。</p>
<p>想要解决的问题：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> local inner class 中如果用到方法中的参数，为什么要用 final 修饰？</li>
</ul>
<p>A1: java 编译器在实现 Q1 中描述的问题时，用的是值拷贝，而不是 reference 拷贝，为了防止内外值不一致，只能强制用 final 把它定为一个常量，不改变他的值</p>
<h2 id="The-final-keyword"><a href="#The-final-keyword" class="headerlink" title="The final keyword"></a>The final keyword</h2><p>Java 里面 final 这个关键字的含义会根据上下文不同而有所区别，但是大体上来说，他都会表达出一个 ‘不允许改变’ 的含义。你会出于两种目的阻止他改变，一种是设计上另一种是效率上。这两种目的很不一样，所以可能存在误用的情况。</p>
<p>接下来我们会例举三种 final 的使用场景：data, method, class</p>
<h3 id="final-data"><a href="#final-data" class="headerlink" title="final data"></a>final data</h3><p>在两种情况下你以将变量声明为常量：</p>
<ol>
<li>编译期常量，不能被改变</li>
<li>在运行时赋值并且不能被改变</li>
</ol>
<p>编译时常量有一个好处是在编译期间就将常量相关的运算做了，可以节省运行时的计算时间。这种情况下，对应的常量类型必须是 final 修饰的 primitive 类型，声明变量时就得赋值。</p>
<p>static + final 表明系统中只有一块内存空间存储相应的值。这种变量是有<strong>命名规范</strong>的，全部大些，中间用下划线分隔。</p>
<p>通过使用 final 修饰 class 表明这个类的 reference 是一个常量。</p>
<p>示例说明：</p>
<p>声明一个 Value class 用做演示 final 修饰对象情况的素材。</p>
<p>valueOne: 演示 final 修饰的基本数据类型不能改变值</p>
<p>VALUE_TWO/VALUE_THREE: 演示 static final 的常见用法和命名规范</p>
<p>i4/INT_5: final 修饰的变量可以通过表达式赋值，不一定需要直接赋值</p>
<p>v1/v2/VAL_3: final 修饰的对象 reference 不能改，但对应的对象可以改变</p>
<p>a: 数组也是一种对象，符合上一条行为规范</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Value</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// Package access</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Value</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FinalData</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can be compile-time constants:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> valueOne = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VALUE_TWO = <span class="number">99</span>;</span><br><span class="line">    <span class="comment">// Typical public constant:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VALUE_THREE = <span class="number">39</span>;</span><br><span class="line">    <span class="comment">// Cannot be compile-time constants:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> i4 = rand.nextInt(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INT_5 = rand.nextInt(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">private</span> Value v1 = <span class="keyword">new</span> Value(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Value v2 = <span class="keyword">new</span> Value(<span class="number">22</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Value VAL_3 = <span class="keyword">new</span> Value(<span class="number">33</span>);</span><br><span class="line">    <span class="comment">// Arrays:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id + <span class="string">&quot;: &quot;</span> + <span class="string">&quot;i4 = &quot;</span> + i4 + <span class="string">&quot;, INT_5 = &quot;</span> + INT_5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FinalData fd1 = <span class="keyword">new</span> FinalData(<span class="string">&quot;fd1&quot;</span>);</span><br><span class="line">        <span class="comment">//! fd1.valueOne++; // Error: can’t change value</span></span><br><span class="line">        fd1.v2.i++; <span class="comment">// Object isn’t constant!</span></span><br><span class="line">        fd1.v1 = <span class="keyword">new</span> Value(<span class="number">9</span>); <span class="comment">// OK -- not final</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fd1.a.length; i++)</span><br><span class="line">            fd1.a[i]++; <span class="comment">// Object isn’t constant!</span></span><br><span class="line">        <span class="comment">//! fd1.v2 = new Value(0); // Error: Can’t</span></span><br><span class="line">        <span class="comment">//! fd1.VAL_3 = new Value(1); // change reference</span></span><br><span class="line">        <span class="comment">//! fd1.a = new int[3];</span></span><br><span class="line">        System.out.println(fd1);</span><br><span class="line">        System.out.println(<span class="string">&quot;Creating new FinalData&quot;</span>);</span><br><span class="line">        FinalData fd2 = <span class="keyword">new</span> FinalData(<span class="string">&quot;fd2&quot;</span>);</span><br><span class="line">        System.out.println(fd1);</span><br><span class="line">        System.out.println(fd2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>public so they’re usable outside the package, static to emphasize that there’s only one, and final to say that it’s a constant.</p>
<p>public: 包外可访问；static：强调只有一份空间；final：常量</p>
<h3 id="Blank-finals"><a href="#Blank-finals" class="headerlink" title="Blank finals"></a>Blank finals</h3><p>变量声明为 final 类型但是没有给初始值的情况叫做 Blank finals。但是在这个变量使用前，它必须被初始化。</p>
<p>归结为两种情况为 final 变量赋值，一种就是声明时赋值，另一种是构造函数内赋值。不做的话会有编译错误。提供第二种赋值方式之后，对于同一个变量，每个类都可以有自己不同 final 变量值了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poppet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    Poppet(<span class="keyword">int</span> ii) &#123;</span><br><span class="line">        i = ii;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlankFinal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// Initialized final</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> j; <span class="comment">// Blank final</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Poppet p; <span class="comment">// Blank final reference</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Blank finals MUST be initialized in the constructor:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlankFinal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        j = <span class="number">1</span>; <span class="comment">// Initialize blank final</span></span><br><span class="line">        p = <span class="keyword">new</span> Poppet(<span class="number">1</span>); <span class="comment">// Initialize blank final reference</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlankFinal</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        j = x; <span class="comment">// Initialize blank final</span></span><br><span class="line">        p = <span class="keyword">new</span> Poppet(x); <span class="comment">// Initialize blank final reference</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> BlankFinal();</span><br><span class="line">        <span class="keyword">new</span> BlankFinal(<span class="number">47</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="final-arguments"><a href="#final-arguments" class="headerlink" title="final arguments"></a>final arguments</h3><p>你还可以在方法的参数列表中，将变量类型指定为 final，表示在方法体内你不能改变参数的 reference。</p>
<p>示例说明：</p>
<p>with/without: 表明 final 修饰的对象参数 reference 不能被改变</p>
<p>f()/g(): 表明 final 修饰的基本数据类型值不能被修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gizmo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">spin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalArguments</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">with</span><span class="params">(<span class="keyword">final</span> Gizmo g)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//! g = new Gizmo(); // Illegal -- g is final</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">without</span><span class="params">(Gizmo g)</span> </span>&#123;</span><br><span class="line">        g = <span class="keyword">new</span> Gizmo(); <span class="comment">// OK -- g not final</span></span><br><span class="line">        g.spin();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// void f(final int i) &#123; i++; &#125; // Can’t change</span></span><br><span class="line">    <span class="comment">// You can only read from a final primitive:</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FinalArguments bf = <span class="keyword">new</span> FinalArguments();</span><br><span class="line">        bf.without(<span class="keyword">null</span>);</span><br><span class="line">        bf.with(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="final-methods"><a href="#final-methods" class="headerlink" title="final methods"></a>final methods</h3><p>fianl 修饰 method 有两种作用，一种是表达了你不想被修饰的方法在子类中被重写而改变语义；另一种是提升执行效率。但是第二种功能在 Java 5/6 时已经包含在 JVM 优化中了，所以现在只推荐在第一种意图是使用该语法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFinal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFinalTest</span> <span class="keyword">extends</span> <span class="title">MyFinal</span></span>&#123;</span><br><span class="line">    <span class="comment">// ! public final void method01()&#123;&#125;; // compile error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="final-and-private"><a href="#final-and-private" class="headerlink" title="final and private"></a>final and private</h3><p>类中的所有 private 方法其实都是默认有 final 修饰的，只不过你显示的加了也没什么额外的作用。</p>
<p>这里说的默认在编译的字节码上并不会显示的表现出来，下面的示例中 testMethod02 和 testMethod03 意义上是一样的，但是编译的自己码还是不同的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessIdentifierTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod01</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testMethod02</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">testMethod03</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AccessIdentifierTest test = <span class="keyword">new</span> AccessIdentifierTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; access flags 0x2</span><br><span class="line">private testMethod02()V</span><br><span class="line">L0</span><br><span class="line">LINENUMBER 5 L0</span><br><span class="line">RETURN</span><br><span class="line">L1</span><br><span class="line">LOCALVARIABLE this Linnerclass&#x2F;AccessIdentifierTest; L0 L1 0</span><br><span class="line">MAXSTACK &#x3D; 0</span><br><span class="line">MAXLOCALS &#x3D; 1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; access flags 0x12</span><br><span class="line">private final testMethod03()V</span><br><span class="line">L0</span><br><span class="line">LINENUMBER 6 L0</span><br><span class="line">RETURN</span><br><span class="line">L1</span><br><span class="line">LOCALVARIABLE this Linnerclass&#x2F;AccessIdentifierTest; L0 L1 0</span><br><span class="line">MAXSTACK &#x3D; 0</span><br><span class="line">MAXLOCALS &#x3D; 1</span><br></pre></td></tr></table></figure>

<p>private 方法代表的意思不就是外部不能访问，当然也不能修改这个方法吗，没毛病。</p>
<p>示例说明：</p>
<p>下面的例子中，我们在基类中声明了两个方法 f()/g() 分别显示和隐示的加上 final 关键字。虽然你可以在它的子类中重写这个方法，但是只有在最末端的子类中可以调用，且调用的还是子类自己的实现。</p>
<p>如果你在子类的实现上加上 <code>Override</code> 标签，还会有编译错误，因为 private 方法自带 final, 表明的含义就是不能被重写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithFinals</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Identical to &quot;private&quot; alone:</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;WithFinals.f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Also automatically &quot;final&quot;:</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;WithFinals.g()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverridingPrivate</span> <span class="keyword">extends</span> <span class="title">WithFinals</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OverridingPrivate.f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OverridingPrivate.g()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverridingPrivate2</span> <span class="keyword">extends</span> <span class="title">OverridingPrivate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OverridingPrivate2.f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OverridingPrivate2.g()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalOverridingIllusion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OverridingPrivate2 op2 = <span class="keyword">new</span> OverridingPrivate2();</span><br><span class="line">        op2.f();</span><br><span class="line">        op2.g();</span><br><span class="line">        <span class="comment">// You can upcast:</span></span><br><span class="line">        OverridingPrivate op = op2;</span><br><span class="line">        <span class="comment">// But you can’t call the methods:</span></span><br><span class="line">        <span class="comment">//! op.f();</span></span><br><span class="line">        <span class="comment">//! op.g();</span></span><br><span class="line">        <span class="comment">// Same here:</span></span><br><span class="line">        WithFinals wf = op2;</span><br><span class="line">        <span class="comment">//! wf.f();</span></span><br><span class="line">        <span class="comment">//! wf.g();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// OverridingPrivate2.f()</span></span><br><span class="line"><span class="comment">// OverridingPrivate2.g()</span></span><br></pre></td></tr></table></figure>

<p>If a method is private, it isn’t part of the base-class interface. It is just some code that’s hidden away inside the class, and it just happens to have that name.</p>
<p>私有方法并不是基类的一部分，它是该类中的隐藏代码，只不过恰巧有了名字。</p>
<h3 id="final-class"><a href="#final-class" class="headerlink" title="final class"></a>final class</h3><p>final 修饰的 class 表明，不管出于什么目的，你不想你的这个 class 被继承。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmallBrain</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Dinosaur</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    SmallBrain x = <span class="keyword">new</span> SmallBrain();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! class Further extends Dinosaur &#123;&#125;</span></span><br><span class="line"><span class="comment">// error: Cannot extend final class ‘Dinosaur’</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jurassic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dinosaur n = <span class="keyword">new</span> Dinosaur();</span><br><span class="line">        n.f();</span><br><span class="line">        n.i = <span class="number">40</span>;</span><br><span class="line">        n.j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>final class 的 field 可以不是 final 的，但是 final class 里面的 method 都隐示为 final method。因为 final class 就是为了防止被继承，都不被继承了，对应的方法都不能重写也是合理的。</p>
<p>和前面的章节一样，这里的默认 final 也是语义上的，并不会在字节码中体现出来。</p>
<h3 id="final-caution"><a href="#final-caution" class="headerlink" title="final caution"></a>final caution</h3><p>例举了一些老的 Java lib 实现 Vector 和 Hashtable 说明，使用 final 修饰方法的时候要谨慎，你完全不知道其他人会怎样使用你的代码。</p>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>resuing</tag>
      </tags>
  </entry>
  <entry>
    <title>TestNG Jmockit 使用案例</title>
    <url>/hexo/2020/07/07/TestNG-Jmockit-Examples/</url>
    <content><![CDATA[<p>记录一下工作中常用到的 TestNG, Jmockit 使用案例</p>
<h2 id="DataProvider"><a href="#DataProvider" class="headerlink" title="DataProvider"></a>DataProvider</h2><h3 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DataProvider(name = &quot;singleParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object[][] singleParam() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">            &#123;<span class="string">&quot;Jerry&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;Tom&quot;</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test(dataProvider = &quot;singleParam&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">single_data</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Get username: &quot;</span> + username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DataProvider(name = &quot;multiParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object[][] multiParam() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">            &#123;<span class="string">&quot;Jerry&quot;</span>, <span class="number">12</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;Tom&quot;</span>, <span class="number">11</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test(dataProvider = &quot;multiParam&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">single_data</span><span class="params">(String username, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Get username: &quot;</span> + username + <span class="string">&quot;, age: &quot;</span> + age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mocked-作用域"><a href="#Mocked-作用域" class="headerlink" title="Mocked 作用域"></a>Mocked 作用域</h2><p>如果是 global 参数，那么所有 class 内的 case 都会有影响，如果是 method level 的那只有对应的 case 有影响</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> String name = <span class="string">&quot;unnamed&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mocked</span> Teacher teacher;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; System.out.println(teacher.name); &#125; <span class="comment">//output: null</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span> <span class="params">()</span> </span>&#123; System.out.println(<span class="keyword">new</span> Teacher(<span class="string">&quot;Jack&quot;</span>).name); &#125; <span class="comment">//output: null</span></span><br></pre></td></tr></table></figure>

<p>如果做 method level 的 mock, 只作用 case 本身</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="meta">@Mocked</span> Teacher teacher)</span> </span>&#123; System.out.println(teacher.name); &#125; <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span> <span class="params">()</span> </span>&#123; System.out.println(<span class="keyword">new</span> Teacher(<span class="string">&quot;Jack&quot;</span>).name); &#125; <span class="comment">// Jack</span></span><br></pre></td></tr></table></figure>

<h2 id="Jmockit-和-TestNG-兼容性问题"><a href="#Jmockit-和-TestNG-兼容性问题" class="headerlink" title="Jmockit 和 TestNG 兼容性问题"></a>Jmockit 和 TestNG 兼容性问题</h2><p>TestNG 6.9.11+ 和 Jmockit 有兼容性问题，将 @Mocked 通过参数方式传入会抛 Exception</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompatibleTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="meta">@Mocked</span> UserBean userBean)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">// org.testng.internal.reflect.MethodMatcherException:</span></span><br><span class="line"><span class="comment">// Data provider mismatch</span></span><br><span class="line"><span class="comment">// Method: test([Parameter&#123;index=0, type=com.objects.UserBean, declaredAnnotations=[@mockit.Mocked(stubOutClassInitialization=false)]&#125;])</span></span><br><span class="line"><span class="comment">// Arguments: []</span></span><br></pre></td></tr></table></figure>

<p>修复方法：将 @Mocked 部分提取改为 global 的变量即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompatibleTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Mocked</span> UserBean userBean;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我还想保留这种 case level 的使用，需要做点什么？这种 case level 的使用在作用域控制上更好</p>
<p>TODO</p>
<h2 id="Mock-不带默认构造函数的对象"><a href="#Mock-不带默认构造函数的对象" class="headerlink" title="Mock 不带默认构造函数的对象"></a>Mock 不带默认构造函数的对象</h2><p>构建一个测试对象时，如果他没有模式构造函数的话需要为参数声明 @Injectable</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompatibleTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Tested</span> Dog dog;</span><br><span class="line">  <span class="meta">@Injectable</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; dog.getName(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没加的话抛出异常</span></span><br><span class="line"><span class="comment">// java.lang.IllegalArgumentException: No constructor in tested class that can be satisfied by available injectables</span></span><br><span class="line"><span class="comment">//   public com.successfactors.legacy.service.provisioning.impl.Dog(String)</span></span><br><span class="line"><span class="comment">//     disregarded because no injectable was found for parameter &quot;name&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Mockup-工厂方法"><a href="#Mockup-工厂方法" class="headerlink" title="Mockup 工厂方法"></a>Mockup 工厂方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* new object + mockup, new object 发生在 mock 之后，所以 mock 生效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mock_factory_using_mockup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> MockUp&lt;NPCFactory&gt;() &#123;</span><br><span class="line">        <span class="meta">@Mock</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">getNPC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">&quot;mock&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ClassRoom classRoom = <span class="keyword">new</span> ClassRoom();</span><br><span class="line">    assertEquals(<span class="string">&quot;mock&quot;</span>, classRoom.getNPCName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassRoom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Person npc = NPCFactory.getNPC();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNPCName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> npc.getName(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用-Deencapsulation-设置私有变量，高版本已经-deprecated"><a href="#使用-Deencapsulation-设置私有变量，高版本已经-deprecated" class="headerlink" title="使用 Deencapsulation 设置私有变量，高版本已经 deprecated"></a>使用 Deencapsulation 设置私有变量，高版本已经 deprecated</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* new object + expectations, new object 发生在 mock 之后，所以 mock 生效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mock_factory_using_deencapsulation</span><span class="params">(<span class="meta">@Mocked</span> <span class="keyword">final</span> Person person)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Expectations() &#123;&#123;</span><br><span class="line">        person.getName();</span><br><span class="line">        result = <span class="string">&quot;deenMock&quot;</span>;</span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    Deencapsulation.setField(room, <span class="string">&quot;npc&quot;</span>, person);</span><br><span class="line">    assertEquals(<span class="string">&quot;deenMock&quot;</span>, room.getNPCName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="通过-Expectations-case-level-mock-静态方法"><a href="#通过-Expectations-case-level-mock-静态方法" class="headerlink" title="通过 Expectations case level mock 静态方法"></a>通过 Expectations case level mock 静态方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* new object + expectations, new object 发生在 mock 之后，所以 mock 生效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mock_factory_using_expectations</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Expectations(NPCFactory.class) &#123;&#123;</span><br><span class="line">    NPCFactory.getNPC();</span><br><span class="line">    result = <span class="keyword">new</span> Person(<span class="string">&quot;expMock&quot;</span>, <span class="number">2</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line">ClassRoom classRoom = <span class="keyword">new</span> ClassRoom();</span><br><span class="line">assertEquals(<span class="string">&quot;expMock&quot;</span>, classRoom.getNPCName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="部分-mock-PartialMock"><a href="#部分-mock-PartialMock" class="headerlink" title="部分 mock/PartialMock"></a>部分 mock/PartialMock</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Tested</span> Person person;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">person_name_jack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Expectations(person) &#123;&#123;</span><br><span class="line">        person.getName();</span><br><span class="line">        result = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="string">&quot;jack&quot;</span>, person.getName());</span><br><span class="line">    assertEquals(<span class="number">0</span>, person.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>partial 对非修饰类型有效吗？有效</p>
<p><code>new Expectations(ClassA.class)</code> 会对这个 class 的所有实例生效，<code>new Expectations(instance)</code> 则只会对当前这个 instance 起作用，范围更精确</p>
<h2 id="获取-Logger-引用做验证"><a href="#获取-Logger-引用做验证" class="headerlink" title="获取 Logger 引用做验证"></a>获取 Logger 引用做验证</h2><p>如果你在 UT 中想要验证某条 log 有没有打印出来，你可以使用 <code>@Capturing</code> annotation。</p>
<blockquote>
<p>相比于 @Mocked 而言，@Capturing 最大的特点是，他用于修饰 父类或者接口，那么他的所有实现类都会被 mocked 掉。对 log 的案例来说，我们为 Logger 这个 interface 加上这个注释之后，后续所有的实现都被 mock 掉，然后我们再做验证</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Tested Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySubscriber</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LogManager.getLogger(MySubscriber.class);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</span><br><span class="line">      LOGGER.info(<span class="string">&quot;Start Process MySubscriber...&quot;</span>);</span><br><span class="line">      LOGGER.info(<span class="string">&quot;End...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In UT</span></span><br><span class="line"><span class="meta">@Capturing</span></span><br><span class="line"><span class="keyword">private</span> Logger logger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_capturing_anno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Expectations(ReadAuditSwitchHelper.class) &#123;&#123;</span><br><span class="line">    logger.isInfoEnabled();</span><br><span class="line">    result = <span class="keyword">true</span>;</span><br><span class="line">  &#125;&#125;;</span><br><span class="line"></span><br><span class="line">  subscriber.onEvent(context, event);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Verifications() &#123;&#123;</span><br><span class="line">    logger.isInfoEnabled(); times=<span class="number">1</span>;</span><br><span class="line">    List&lt;String&gt; capturedInfos = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    logger.info(withCapture(capturedInfos));</span><br><span class="line"></span><br><span class="line">    capturedInfos.stream().forEach(System.out::println);</span><br><span class="line">  &#125;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取方法参数"><a href="#获取方法参数" class="headerlink" title="获取方法参数"></a>获取方法参数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果是单个参数</span></span><br><span class="line"><span class="keyword">new</span> Verifications() &#123;&#123;</span><br><span class="line">  <span class="keyword">double</span> d;</span><br><span class="line">  String s;</span><br><span class="line">  mock.doSomething(d = withCapture(), <span class="keyword">null</span>, s = withCapture());</span><br><span class="line"></span><br><span class="line">  assertTrue(d &gt; <span class="number">0.0</span>);</span><br><span class="line">  assertTrue(s.length() &gt; <span class="number">1</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是多个参数</span></span><br><span class="line"><span class="keyword">new</span> Verifications() &#123;&#123;</span><br><span class="line">  List&lt;DataObject&gt; dataObjects = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  mock.doSomething(withCapture(dataObjects));</span><br><span class="line"></span><br><span class="line">  assertEquals(<span class="number">2</span>, dataObjects.size());</span><br><span class="line">  DataObject data1 = dataObjects.get(<span class="number">0</span>);</span><br><span class="line">  DataObject data2 = dataObjects.get(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// Perform arbitrary assertions on data1 and data2.</span></span><br><span class="line">&#125;&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Mocked-导致-equals-方法失效"><a href="#Mocked-导致-equals-方法失效" class="headerlink" title="@Mocked 导致 equals 方法失效"></a>@Mocked 导致 equals 方法失效</h2><p>今天写 UT 的时候遇到一个问题，当我使用 @Mocked 修饰一个类时，这个累的所有引用都会被 mock 掉，虽然知道有这种特性，但是以前都没有碰到问题，忽视了，debug 花了好久。</p>
<p>示例如下：</p>
<p>准别两个简单的 MyBean 和 MyField, MyField 是 MyBean 的一个属性，并在声明时就做了初始化。</p>
<p>对应的 UT 可以 work，但当我对 MyField 添加 @Mocked 注解时，对应的 equals 方法会被抹去，UT 就挂了。</p>
<p>解决方案有两种：1. 不用 @Mocked; 2. 只做方法层面的 mock</p>
<p>对于第二种方法，testng 升级到 6.1 之后需要配合 @DataProvider 使用，变得麻烦了，也不知道后面的版本会不会修复这个问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyField field = <span class="keyword">new</span> MyField();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        MyBean myBean = (MyBean) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(field, myBean.field);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(field);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyField</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        MyField myField = (MyField) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(name, myField.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMockedAnno01</span> </span>&#123;</span><br><span class="line">  <span class="comment">// @Mocked MyField field;</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyBean bean1 = <span class="keyword">new</span> MyBean();</span><br><span class="line">    MyBean bean2 = <span class="keyword">new</span> MyBean();</span><br><span class="line"></span><br><span class="line">    Assert.assertEquals(bean1, bean2);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>testng</tag>
        <tag>jmockit</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 调用 Testlink API</title>
    <url>/hexo/2021/03/17/Testlink-api-with-python/</url>
    <content><![CDATA[<p>备忘一下 Testlink API 调用实现。Testlink 是有实现自己的 API 接口的，你可以通过它来操作 project， test plan 等对象。</p>
<h2 id="API-示例"><a href="#API-示例" class="headerlink" title="API 示例"></a>API 示例</h2><p>安装 pip lib: <code>pip install TestLink-API-Python-client</code>， project repo: <a href="https://github.com/lczub/TestLink-API-Python-client">Github, Testlink clint - Python</a></p>
<p>登陆 Testlink -&gt; My Settings -&gt; My personal access key 拿到 API 授权的 key, 尝试链接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> testlink</span><br><span class="line">url = <span class="string">&quot;https://&lt;hostname&gt;/lib/api/xmlrpc/v1/xmlrpc.php&quot;</span></span><br><span class="line"><span class="comment">#  for this key, you can get forom Testlink -&gt; click My Settings → my personal access key field</span></span><br><span class="line">key = <span class="string">&quot;api_auth_key&quot;</span> <span class="comment"># test link personal key</span></span><br><span class="line">tlk = testlink.TestLinkHelper(url, key).connect(testlink.TestlinkAPIClient)</span><br><span class="line">print(tlk.tlk.countProjects())</span><br><span class="line"><span class="comment"># 39</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get project info</span></span><br><span class="line">projects = tlk.getTestProjects()</span><br><span class="line"><span class="keyword">for</span> sub <span class="keyword">in</span> projects:</span><br><span class="line">    print(<span class="string">&quot;id: %s, prefix: %s, name: %s&quot;</span> % (sub[<span class="string">&#x27;id&#x27;</span>], sub[<span class="string">&#x27;prefix&#x27;</span>], sub[<span class="string">&#x27;name&#x27;</span>]))</span><br><span class="line"><span class="comment"># id: 5182, prefix: PLT#, name: Platform Foundations and Integrations</span></span><br></pre></td></tr></table></figure>

<p>其他的 API 都和差不多类似的，通过使用 Ipython + tab 基本都可以找到</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>python 提供的接口中有一个很有意思：<code>tlk.whatArgs(&#39;getTestProjects&#39;)</code> 他可以给出对应 API 的调用方式，参数列表的信息，很有用</p>
<p>client 项目的 <a href="https://github.com/lczub/TestLink-API-Python-client/blob/master/example/">example</a> 路径下，有几个示例，写的很清楚，基本上把所有支持的命令都写了，值得参考</p>
<p>PS：记得查看 Testlink 版本，就我自己的情况，公司内部用的还是 13 年的版本(1.9.7) 而最新的都已经是 1.9.20 了，好多 API 都不支持，可以 blame 以下 example，查看对应的例子是什么时候加进去的，看你想要的功能是否支持</p>
]]></content>
      <categories>
        <category>Third Part</category>
      </categories>
      <tags>
        <tag>Testlink</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>工作中的那些琐碎小事</title>
    <url>/hexo/2019/12/19/Tips-from-work/</url>
    <content><![CDATA[<p>该页面用于记录实际工作中遇到的 bug，以示警戒</p>
<h2 id="Exception-Handle-遗漏"><a href="#Exception-Handle-遗漏" class="headerlink" title="Exception Handle 遗漏"></a>Exception Handle 遗漏</h2><p>有同事打补丁时对 checked exception 和 RunTimeException 处理有遗漏导致客户使用出问题，反馈后 debug 发现，简化后场景如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 场景描述：</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 在处理 filterData() 时，作者只考虑到 checked exception, 没有考虑 runtime exception.</span></span><br><span class="line"><span class="comment">* 实际使用时，客户在某些情况下会抛出 NPE 这种 runtime exception, 导致返回 null, 显示出现错误</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">populateDatas</span><span class="params">(datas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (data : datas) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                filterData(data);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FilterException fe) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Err when filter &quot;</span> + data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Populate data failed.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java-中的异常分类"><a href="#Java-中的异常分类" class="headerlink" title="Java 中的异常分类"></a>Java 中的异常分类</h3><p><img src="relation.png" alt="Throwable关系图"></p>
<h3 id="常见的异常种类"><a href="#常见的异常种类" class="headerlink" title="常见的异常种类"></a>常见的异常种类</h3><p>RunTimeException:</p>
<ul>
<li>NPE</li>
<li>AuthmeticException</li>
<li>NumberFormatException</li>
<li>IndexOutOfBoundsException</li>
</ul>
<p>CheckedException:</p>
<ul>
<li>反射相关：NoSuchMethod,FieldException</li>
<li>NoSuchFileException</li>
</ul>
<p>Error:</p>
<ul>
<li>OutOfMemmoryError</li>
<li>ZipError</li>
</ul>
<h3 id="一点感悟"><a href="#一点感悟" class="headerlink" title="一点感悟"></a>一点感悟</h3><p>以后处理这样的问题还是要多留心 log, 从这个点出发的话估计这个问题发现只需要一个小时就够了。这次应为有很多干扰的 exception 跑出来，没有仔细查看导致绕了好大一个圈，要不是刚好本地有一个可以重现的样本就爆炸了╭(°A°`)╮ 谨记谨记</p>
<h2 id="Event-数据量撑爆了产品环境"><a href="#Event-数据量撑爆了产品环境" class="headerlink" title="Event 数据量撑爆了产品环境"></a>Event 数据量撑爆了产品环境</h2><p>开发完 event 相关的 feature 之后没有对测试环境进行跟踪，功能没有问题，但是产生了很多冗余数据，比如包含了很多将 field 从 null 跟新到 “” 空字串的 event。很多 data center 因为业务过重，单这个 event 每天产生 500w 数据，Kafka 就危了。。。引以为戒。</p>
<h2 id="JDBC-空字串存为-NULL"><a href="#JDBC-空字串存为-NULL" class="headerlink" title="JDBC 空字串存为 NULL"></a>JDBC 空字串存为 NULL</h2><p>通过 JDBC 存储空字串时，他会自动将它存为 NULL</p>
<h2 id="记录一个-jar-升级导致的问题"><a href="#记录一个-jar-升级导致的问题" class="headerlink" title="记录一个 jar 升级导致的问题"></a>记录一个 jar 升级导致的问题</h2><p>在原先的 code 中，我们有个 UT 需要 xstream 的 Mapper 类，就在 UT 里面直接实现了类接口。某天， xstream 突然被人升级到 1.4.9+ 了，原来的 UT 就挂了，在这个版本里新添加了一个方法 <code>isReferenceable</code> 原来的 case 是没有实现的</p>
<h2 id="Cache-处理的一些小技巧"><a href="#Cache-处理的一些小技巧" class="headerlink" title="Cache 处理的一些小技巧"></a>Cache 处理的一些小技巧</h2><p>在产品中发现处理 cache 的逻辑是，更新数据时删掉对应的 cache, 然后在取数据时再重新将 cache 存储起来。以前没注意，现在再看看发现挺有意思。</p>
<h2 id="NonNull-标签"><a href="#NonNull-标签" class="headerlink" title="@NonNull 标签"></a>@NonNull 标签</h2><p>Java 方法的参数列表中加入 @NonNull 并不会在写 code 的时候为你提供 NPE check, 更多的是结合其他框架, 比如 Spring 使用, 本身只起到提示作用。</p>
<h2 id="Bug-track-2021-04-07"><a href="#Bug-track-2021-04-07" class="headerlink" title="Bug track 2021-04-07"></a>Bug track 2021-04-07</h2><p>今天遇到一个很诡异的问题，在 provisioning 中有一些 saveFeature 的 log 表明有时候 save 的时候会由于缺少 param 信息导致 GetSysConfig 的时候抛异常，而且频率很高。但是当我 manual 去重现这些功能时一切正常。通过查异常的上下文，发现这些有问题的 company 多是用于自动化测试的 instance。然后又仔细对比了手动正常工作时的 log 和出问题的 log 发现当异常产生时，save 的一系列动作都是在一个 transaction 中的，manual 操作是这一系列动作应该时分布在几个 transaction 中的。再结合以前的 auto 经验，这个东西大概率就是有一些 auto case 在调用了自己写的 script 操作 save feature 的时候出了问题，导致了一系列问题。这个问题如果不是对公司现有的技术手段都有所涉及，还真是不好找呢。。。</p>
<h2 id="一个判断条件的优化"><a href="#一个判断条件的优化" class="headerlink" title="一个判断条件的优化"></a>一个判断条件的优化</h2><p>在 code review 的时候，有一个 if 需要判断 Boolean 对象为为空或者 false 才执行我就写了如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Objects.nonNull(obj) || !obj) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后 Yi 就给了建议</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ojb != Boolean.True) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>建议的修改更简单明了，哈哈</p>
<h2 id="命令行查找目标文件夹-ls"><a href="#命令行查找目标文件夹-ls" class="headerlink" title="命令行查找目标文件夹(ls)"></a>命令行查找目标文件夹(ls)</h2><p>想要使用 ls 查找当前目录下的某个特定前缀的文件夹，但是 <code>ls prefix*</code> 会将对应的文件夹下面的自文件也列出来，不方便查看。可以加 <code>ls -d prefix*</code>。</p>
<p>通过 <code>man ls</code> 可以看到这个 flag 的作用: -d      Directories are listed as plain files (not searched recursively).</p>
<p>SF 上也给出了其他的解，可以用 <code>echo prefix*</code> 达到同样的效果</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>exception</tag>
        <tag>issues</tag>
      </tags>
  </entry>
  <entry>
    <title>UML 常见关系表示</title>
    <url>/hexo/2020/10/13/UML-object-relationship/</url>
    <content><![CDATA[<p>例举 UML 图中常见的关系及其表示方式</p>
<h2 id="泛化-Generalization"><a href="#泛化-Generalization" class="headerlink" title="泛化 Generalization"></a>泛化 Generalization</h2><p>对应 Java 中的继承，实线 + 实心三角指向父类</p>
<img src="/hexo/2020/10/13/UML-object-relationship/Generalization.png" class="" title="Generalization 关系图">

<h2 id="实现-Realization"><a href="#实现-Realization" class="headerlink" title="实现 Realization"></a>实现 Realization</h2><p>对应 Java 中的实现，虚线 + 空心三角指向接口</p>
<img src="/hexo/2020/10/13/UML-object-relationship/Realization.png" class="" title="Realization 关系图">

<h2 id="关联-Association"><a href="#关联-Association" class="headerlink" title="关联 Association"></a>关联 Association</h2><p>对应 Java 中的成员变量，拥有关系，使一个类知道另一个类的属性和方法，可单向可双向。实心线 + 普通箭头指向被拥有者</p>
<img src="/hexo/2020/10/13/UML-object-relationship/Association.png" class="" title="Association 关系图">

<h2 id="聚合-Aggregation"><a href="#聚合-Aggregation" class="headerlink" title="聚合 Aggregation"></a>聚合 Aggregation</h2><p>整体与部分的关系，比如车和轮胎。他是一种强关联关系。空心菱形指向整体 + 实线 + 普通箭头指向部分</p>
<img src="/hexo/2020/10/13/UML-object-relationship/Aggregation.png" class="" title="Aggregation 关系图">

<h2 id="组合-Composition"><a href="#组合-Composition" class="headerlink" title="组合 Composition"></a>组合 Composition</h2><p>整体与部分的关系，程度比聚合还要强的关联关系。实心菱形指向整体 + 实线 + 普通箭头指向部分</p>
<img src="/hexo/2020/10/13/UML-object-relationship/Composition.png" class="" title="Composition 关系图">

<h2 id="依赖-Dependency"><a href="#依赖-Dependency" class="headerlink" title="依赖 Dependency"></a>依赖 Dependency</h2><p>对应 Java 中的局部变量，方法参数和静态方法调用，是一种使用的关系,所以要尽量不使用双向的互相依赖。虚线 + 普通箭头指向被使用者</p>
<img src="/hexo/2020/10/13/UML-object-relationship/Dependency.png" class="" title="Dependency 关系图">

<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://blog.csdn.net/tianhai110/article/details/6339565">CSDN</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode setup python 环境</title>
    <url>/hexo/2020/06/12/VSCode-setup-python-env/</url>
    <content><![CDATA[<p>VSCode setup python 独立运行环境</p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ol>
<li>安装 pipenv <code>pip install pipenv --user</code></li>
<li>创建独立环境 <code>pipenv shell</code>, 还可以通过 <code>pipenv --three/two</code> 指定 python 版本</li>
<li>修改 pipfile, 使用国内源加速</li>
<li>安装依赖 <code>pipenv install pdfminer.six</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[source]]</span><br><span class="line">name &#x3D; &quot;pypi&quot;</span><br><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&quot;</span><br><span class="line">verify_ssl &#x3D; true</span><br></pre></td></tr></table></figure>

<p>查看 VSCode 左下角的运行环境是不是你新建的那个，不是的话 <code>pipenv --venv</code> 查看新建 venv 路径， <code>Ctrl + Shift + p</code> 搜索 <code>python: select interpreter</code> 选择你新建的那个 env</p>
<h2 id="reload-module-after-update"><a href="#reload-module-after-update" class="headerlink" title="reload module after update"></a>reload module after update</h2><p>如果某些方法正在进行中，可能频繁修改，在 ipython 中调试的时候可以用 reload 来重新加载，也可以指定 ipython 到自动重加载模式 <a href="https://ipython.org/ipython-doc/stable/config/extensions/autoreload.html">autoreload mode</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">importlib.reload(PDFParser)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 小贴士</title>
    <url>/hexo/2019/12/14/VSCode-tips/</url>
    <content><![CDATA[<p>记录一些 VSCode 常用快捷键和使用技巧，提高工作效率 (´▽｀)</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li>跳转到定义：CMD + 键盘单击</li>
<li>从定义返回：Ctr + _ 或者  Option + CMD + 方向键</li>
<li>快速到顶部/底部：CMD + 上方向/下方向</li>
</ul>
<h2 id="很酷的操作"><a href="#很酷的操作" class="headerlink" title="很酷的操作"></a>很酷的操作</h2><blockquote>
<p>批量修改字符串，比如第 1，3，5 行 ‘est’ 关键字前添加 ‘T’, 即多光标操作</p>
</blockquote>
<ol>
<li><code>option + 鼠标左键</code> 自定义操作锚点</li>
<li><code>cmd + d</code> 向下选中相同的部分</li>
<li>选中行 <code>shift + option + i</code> 统一相对为止操作</li>
</ol>
<ul>
<li><a href="https://geek-docs.com/vscode/vscode-tutorials/vs-code-multi-cursor.html">很棒的 VSCode 文档</a></li>
</ul>
<blockquote>
<p>在 VSCode 中复制代码并黏贴到 Outlook 等客户端时，会把背景颜色也黏贴过去，可以通过如下设置避免</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Preference -&gt; settings, 搜索关键字 editor.copyWithSyntaxHighlighting 然后 disable 就行了</span><br></pre></td></tr></table></figure>

<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul>
<li>Ascii Tree Generator: 快速生产 Ascii 类型的目录树，在写文档的时候很游泳，喜欢 (´▽｀)</li>
<li>Markdown All in One: 他的 format 功能简直太赞了！</li>
<li>VSCode Icons: 为目录树上中的文件添加类型图标</li>
<li>Bracket Pair Colorizer: 括号色彩标识</li>
<li>rainbow csv: CSV 文件色彩标识</li>
</ul>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>插件</tag>
        <tag>快捷键</tag>
        <tag>vscode</tag>
        <tag>小知识</tag>
      </tags>
  </entry>
  <entry>
    <title>当你打印 Hello World 的时候到底发生了什么？</title>
    <url>/hexo/2020/08/24/What-Happend-When-You-Print-Hello-World/</url>
    <content><![CDATA[<p>一个最简单的例子，当我们在 IDE 中写入 Hello World 代码，并右键运行后，控制台会打印出来 <code>Hello World!</code> 的字符串，那么这中间到底发生了什么？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    String name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hello test = <span class="keyword">new</span> Hello();</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello &quot;</span> + test.name);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写入 IDE 里的代码都是存到 <code>.java</code> 文件中的，在保存后 IDE 会将它编译为 <code>.class</code> 文件。这个文件也叫字节码文件，有自己的一套规则。之后当我们运行这个字节码文件时，一个 JVM 虚拟机被启动，解析这个文件，将文件中的各种变量，方法分配到虚拟机的各功能区。运行代码中的打印逻辑，并输出到终端。</p>
<h2 id="java-gt-class"><a href="#java-gt-class" class="headerlink" title="java -&gt; class"></a>java -&gt; class</h2><p>从 java 文件到 class 的功能可以简单概括为 javac 命令的功能。其中主要涉及到编译器的相关只是，可以参考 编译原理 加深了解。简单概括步骤有：词法分析 -&gt; 语法分析 -&gt; 语义分析 -&gt; 字节码生成</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>运行主要涉及到 JVM 启动，类加载，逻辑执行，可以通过看 深入理解JVM虚拟机 加深了解</p>
<h3 id="jmap-查看堆中对象分布"><a href="#jmap-查看堆中对象分布" class="headerlink" title="jmap 查看堆中对象分布"></a>jmap 查看堆中对象分布</h3><p>运行示例代码，通过 <code>ps -ef | grep Hello</code> 拿到线程 pid. 然后使用 <code>jmap -heap &lt;pid&gt;</code> 查看对象情况。结果失败。。。</p>
<p>PS: jps 可以很方便的查看 java 程序 pid</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Jack &gt; ~ &gt; jmap -heap 68202</span><br><span class="line">Attaching to process ID 68202, please <span class="built_in">wait</span>...</span><br><span class="line">ERROR: attach: task_for_pid(68202) failed: <span class="string">&#x27;(os/kern) failure&#x27;</span> (5)</span><br><span class="line">Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can<span class="string">&#x27;t attach to the process. Could be caused by an incorrect pid or lack of privileges.</span></span><br><span class="line"><span class="string">sun.jvm.hotspot.debugger.DebuggerException: sun.jvm.hotspot.debugger.DebuggerException: Can&#x27;</span>t attach to the process. Could be caused by an incorrect pid or lack of privileges.</span><br></pre></td></tr></table></figure>

<p>操作系统为 MacOS, java1.8。一开始说是权限问题，但是用了 root 也不顶用，然后说是 1.8 以前不支持。本地安装 j14 然后按照之前的步骤运行 cmd 还是一样的错误。在 14 版本中，命令变了，j9 之后需要使用 <code>jhsdb jmap --heap --pid  68633</code> 做查询。难道是 MacOS 需要什么特殊设置 (´Д` ) 容我找太其他系统的机子试试水先。。。</p>
<p>可能就是系统问题把，或者公司的机子有什么限制？用家里的 Windows 试了下是可以 work 的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\jack&gt; jhsdb jmap --heap --pid 10648</span><br><span class="line">Attaching to process ID 10648, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 11.0.6+8-LTS</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Garbage-First (G1) GC with 4 thread(s)</span><br><span class="line"></span><br><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         = 40</span><br><span class="line">   MaxHeapFreeRatio         = 70</span><br><span class="line">   MaxHeapSize              = 2118123520 (2020.0MB)</span><br><span class="line">   NewSize                  = 1363144 (1.2999954223632812MB)</span><br><span class="line">   MaxNewSize               = 1270874112 (1212.0MB)</span><br><span class="line">   OldSize                  = 5452592 (5.1999969482421875MB)</span><br><span class="line">   NewRatio                 = 2</span><br><span class="line">   SurvivorRatio            = 8</span><br><span class="line">   MetaspaceSize            = 21807104 (20.796875MB)</span><br><span class="line">   CompressedClassSpaceSize = 1073741824 (1024.0MB)</span><br><span class="line">   MaxMetaspaceSize         = 17592186044415 MB</span><br><span class="line">   G1HeapRegionSize         = 1048576 (1.0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line">G1 Heap:</span><br><span class="line">   regions  = 2020</span><br><span class="line">   capacity = 2118123520 (2020.0MB)</span><br><span class="line">   used     = 1048576 (1.0MB)</span><br><span class="line">   free     = 2117074944 (2019.0MB)</span><br><span class="line">   0.04950495049504951% used</span><br><span class="line">G1 Young Generation:</span><br><span class="line">Eden Space:</span><br><span class="line">   regions  = 1</span><br><span class="line">   capacity = 15728640 (15.0MB)</span><br><span class="line">   used     = 1048576 (1.0MB)</span><br><span class="line">   free     = 14680064 (14.0MB)</span><br><span class="line">   6.666666666666667% used</span><br><span class="line">Survivor Space:</span><br><span class="line">   regions  = 0</span><br><span class="line">   capacity = 0 (0.0MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 0 (0.0MB)</span><br><span class="line">   0.0% used</span><br><span class="line">G1 Old Generation:</span><br><span class="line">   regions  = 0</span><br><span class="line">   capacity = 118489088 (113.0MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 118489088 (113.0MB)</span><br><span class="line">   0.0% used</span><br></pre></td></tr></table></figure>

<p>使用 histo 参数查看对象大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\jack&gt; jhsdb jmap --histo --pid 10648</span><br><span class="line">Attaching to process ID 10648, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 11.0.6+8-LTS</span><br><span class="line">Iterating over heap. This may take a <span class="keyword">while</span>...</span><br><span class="line">Object Histogram:</span><br><span class="line"></span><br><span class="line">num       <span class="comment">#instances    #bytes  Class description</span></span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line">1:              551     357184  char[]</span><br><span class="line">2:              3641    258616  byte[]</span><br><span class="line">3:              1629    98808   java.lang.Object[]</span><br><span class="line">...</span><br><span class="line">304:            1       16      <span class="built_in">float</span>[]</span><br><span class="line">305:            1       16      boolean[]</span><br><span class="line">306:            1       16      Hello</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么我们要在打印 log 之前进行 isInfoEnabled 判断？</title>
    <url>/hexo/2020/12/08/Why-we-should-call-isInfoEnabled-before-print-log/</url>
    <content><![CDATA[<p>平时我们在代码中打印 log 基本都是直接调用 <code>logger.info()</code> 方法，官方推荐在外面再包一层 <code>if (logger.isInfoEnabled())</code> 判断，Why?</p>
<p>以 log4j 为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(ExampleBeanWithSetter.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;Hello world...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有加外层的 <code>isInfoEnabled</code> 判断，那个将会直接执行 <code>logger.info(String)</code> 方法， 相对于有判断的形式，多了一步拼接字符串的步骤。换句话说，最大的区别有两点：</p>
<ol>
<li>拼接字符串耗时</li>
<li>这些字符串也会消耗内存空间</li>
</ol>
<p>对一般的小系统当然是没什么影响，如果是高并发或者 log 很多的系统，可以作为一个优化的方向。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>logger</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 安装 WSL 并集成 VSCode</title>
    <url>/hexo/2019/12/02/Win10%20%E5%AE%89%E8%A3%85%20WSL%20%E5%B9%B6%E9%9B%86%E6%88%90%20VSCode/</url>
    <content><![CDATA[<p>在 Win10 下用 VSCode + WSL 开发，体验还是不错的，一开始看了下官方文档，好长，好复杂。但是实际操作下来，其实很简单，赶紧搞起来，甚香( •̀ ω •́ )✧</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>首次使用 WSL 需要做一下系统设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">win快捷搜索-&gt; 启用或关闭Windows功能-&gt; 勾选 适用于Linux的Windows子系统</span><br></pre></td></tr></table></figure>

<p><img src="enable_wsl.png" alt="开启子系统选项"></p>
<p>到微软商城，搜所 wsl, 可以看到可用的 linux 版本，比如 kail, Ubuntu 等, 点击安装</p>
<p><img src="win_wsl_search.png" alt="搜索界面"></p>
<p>安装完毕后使用敲击 win 键卡开快捷搜索，输入 wsl 回车，快速打开，第一次打开时需要配置一下子系统用户名密码信息</p>
<p>安装 VSCode + Remote-WSL 插件</p>
<p><img src="remote_wsl_plugin.png" alt="VSCode插件"></p>
<p>启动 WSL 子系统，默认会到 <code>jack@DESKTOP-9TGTFK1:/mnt/c/Windows/system32$</code> 路径下，选一个你喜欢的路径，我这里新建了目录 vscode_dir 用来测试, 然后输入 <code>code .</code> 第一次输入时 WSL 会安装一些包，然后打开 VSCode。到这里基本就安装完了</p>
<p><img src="wsl_vscode_lib.png" alt="WSL安装VSCode包"></p>
<p>新打开的 remote VSCode 界面，注意左下角，如果显示的时下载的 Linux 版本就表明链接成功了</p>
<p><img src="vscode_connection.png" alt="VSCode-WSL连接"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://code.visualstudio.com/docs/remote/wsl">官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>Window 关闭防火墙</title>
    <url>/hexo/2020/09/11/Window-Disable-Defender/</url>
    <content><![CDATA[<p>下载一些破解软件的时候，windows 会自动将他们查杀可以通过：</p>
<p>开始 -&gt; 搜索’病毒和威胁防护’ -&gt; 点击 ‘病毒和威胁防护’设置下的 管理设置 -&gt; 关闭 实时防护 </p>
<p>将保护暂时关掉，等你破解完后，再开启</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>function 包简介</title>
    <url>/hexo/2020/06/03/function-%E5%8C%85%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>对 java 的 lang 包下的 function 包做一下简要的总结， 写本篇文章时参考的 java 11 的源代码。是实话，我中觉得函数接口的定义，语义上很奇葩，不怎么读的懂，比如源码中 Predicate 的 isEquals 方法是这样定义的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">isEqual</span><span class="params">(Object targetRef)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">null</span> == targetRef)</span><br><span class="line">            ? Objects::isNull</span><br><span class="line">            : object -&gt; targetRef.equals(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简直是看的我一脸的黑人问好啊 ？？？ 这 TM 什么鬼，有空再研究一下怎么自定义函数接口。</p>
<h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>function 包是函数接口的集合，包路径为： <code>java.util.function.*</code>， 接口可以大致分为 5 类</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>作用</th>
<th>个数</th>
</tr>
</thead>
<tbody><tr>
<td>Consumer</td>
<td>接收参数做计算，无返回</td>
<td>8</td>
</tr>
<tr>
<td>Supplier</td>
<td>生成数据，对象</td>
<td>5</td>
</tr>
<tr>
<td>Predicate</td>
<td>根据参数做返回 Boolean 值的计算</td>
<td>5</td>
</tr>
<tr>
<td>Function</td>
<td>接受参数，返会计算值</td>
<td>17</td>
</tr>
<tr>
<td>Operator</td>
<td>接受数据并返回计算值</td>
<td>8</td>
</tr>
</tbody></table>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>拿到参数， 运算， 无返回值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>它有一些变种，比如 BiConsumer, Bi 是 Binary 的缩写，表示复数， 两个的意思。这里表示 Consumer 接收两个参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BiConsumer&lt;String, String&gt; biConsumer = (name, action) -&gt; &#123;</span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;Name: %s is %s ing...&quot;</span>, name, action));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">biConsumer.accept(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;run&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>其他变种，比如 DoubleConsumer, 只接受 Double 做参数， 类似的还有 LongConsumer, IntConsumer 等，限制一样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DoubleConsumer consumer = (val) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Val: &quot;</span> + val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">consumer.accept(<span class="number">1.0</span>); <span class="comment">// output: Val: 1.0</span></span><br><span class="line"><span class="comment">// consumer.accept(&quot;test&quot;); - 编译报错</span></span><br><span class="line"><span class="comment">// consumer.accept(1.0L); - 编译报错</span></span><br></pre></td></tr></table></figure>

<p>还有一类变种，比如 ObjDoubleConsumer, ObjIntConsumer 和 ObjLongConsumer， 表示接收两个参数，但是其中一个是对象类型的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设计一个 lambda， 接受 person 对象和 int 值，并用 int 对 person 的年龄 field 赋值</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 省略 getter/setter/toString 方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ObjIntConsumer&lt;Person&gt; consumer = Person::setAge;</span><br><span class="line">Person p = <span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">consumer.accept(p, <span class="number">30</span>);</span><br><span class="line">System.out.println(p);</span><br><span class="line"><span class="comment">// output: Person&#123;name=&#x27;Jack&#x27;, age=30&#125;</span></span><br></pre></td></tr></table></figure>

<p>大多数 *Consumer 接口看书中还有另外一个方法，叫 <code>andThen()</code> 可以达到组合拳的效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义两个 lambda, 一个做大写转化，一个做小写转化。 就是他的这个级联的语法总有一种很奇葩的感觉，要先写 andThan 再写 accept 才合法</span></span><br><span class="line">Consumer&lt;String&gt; consumer01 = (val) -&gt; &#123;</span><br><span class="line">    String toUp = val.toUpperCase();</span><br><span class="line">    System.out.print(toUp);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Consumer&lt;String&gt; consumer02 = (val) -&gt; &#123;</span><br><span class="line">    String toUp = val.toLowerCase();</span><br><span class="line">    System.out.println(toUp);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;B&quot;</span>).forEach(consumer01.andThen(consumer02).accept);</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Aa</span></span><br><span class="line"><span class="comment">// Bb</span></span><br></pre></td></tr></table></figure>

<h3 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h3><p>生成数据并返回，和工厂方法很像</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Supplier supplier = Math::random;</span><br><span class="line">System.out.println(supplier.get());</span><br><span class="line">System.out.println(supplier.get());</span><br><span class="line"><span class="comment">// output: 0.21716622238340733</span></span><br><span class="line"><span class="comment">// output: 0.06868488591912514</span></span><br></pre></td></tr></table></figure>

<p>和 Consumer 一样，他也有指定返回类型的 type, 像 BooleanSupplier, DoubleSupplier, IntSupplier 和 LongSupplier</p>
<h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p>接受参数，然后再 lambda 中计算，得出一个 Boolean 的结果值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对准备的 3 个 string 做过滤，输出空字串的个数</span></span><br><span class="line"><span class="keyword">long</span> count = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;  &quot;</span>, <span class="string">&quot;B&quot;</span>).filter(String::isBlank).count();</span><br><span class="line">System.out.println(count);</span><br><span class="line"><span class="comment">// output: 1</span></span><br></pre></td></tr></table></figure>

<p>filter 中接受的就是 Predicate 类型的表达式，如果计算结果为 true，则保留参数对象，否则过滤掉。</p>
<p>对应的它也有多个变种形式，变种的处理方式和前面的雷同： BiPredicate, DoublePredicate, IntPredicate 和 LongPredicate。</p>
<p>除此之外，大多数的 *Predicate 接口中除了 test() 外还有 and(), negate()， or() 和 isEqual() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Predicate&lt;String&gt; checkLength = val -&gt; val.length() &gt; <span class="number">5</span>;</span><br><span class="line">Predicate&lt;String&gt; startWith = val -&gt; val.startsWith(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">List&lt;String&gt; ret = Stream.of(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;BBC&quot;</span>).filter(checkLength.and(startWith)).collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">&quot;-------------- Test AND result--------------&quot;</span>);</span><br><span class="line">ret.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">ret = Stream.of(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;BBC&quot;</span>).filter(checkLength.or(startWith)).collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">&quot;-------------- Test OR result--------------&quot;</span>);</span><br><span class="line">ret.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">ret = Stream.of(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;BBC&quot;</span>).filter(checkLength.negate()).collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">&quot;-------------- Test NEGATE result--------------&quot;</span>);</span><br><span class="line">ret.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">ret = Stream.of(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;BBC&quot;</span>).filter(Predicate.not(checkLength)).collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">&quot;-------------- Test NOT result--------------&quot;</span>);</span><br><span class="line">ret.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-------------- Test EQUALS result--------------&quot;</span>);</span><br><span class="line">System.out.println(Predicate.isEqual(<span class="string">&quot;abc&quot;</span>).test(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line">-------------- Test AND result--------------</span><br><span class="line">Banana</span><br><span class="line">-------------- Test OR result--------------</span><br><span class="line">Banana</span><br><span class="line">BBC</span><br><span class="line">-------------- Test NEGATE result--------------</span><br><span class="line">Apple</span><br><span class="line">BBC</span><br><span class="line">-------------- Test NOT result--------------</span><br><span class="line">Apple</span><br><span class="line">BBC</span><br><span class="line">-------------- Test EQUALS result--------------</span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>接受参数，计算并返回所得的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收一个字符串并将其转化成 integer 类型</span></span><br><span class="line">Function&lt;String, Integer&gt; func = Integer::valueOf;</span><br><span class="line"><span class="keyword">int</span> ret = func.apply(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">System.out.println(ret);</span><br><span class="line"><span class="comment">// output: 100</span></span><br></pre></td></tr></table></figure>

<p>同样，他也有变种，而且特别多</p>
<table>
<thead>
<tr>
<th>name</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>BiFunction</td>
<td>接收两个参数, 返回值类型自定</td>
</tr>
<tr>
<td>DoubleFunction</td>
<td>接收 Double 参数，返回值自定</td>
</tr>
<tr>
<td>IntFunction</td>
<td>接收 Int 参数，返回值自定</td>
</tr>
<tr>
<td>LongFunction</td>
<td>接收 Long 参数，返回值自定</td>
</tr>
<tr>
<td>DoubleToIntFunction</td>
<td>接收 Double 返回 Int</td>
</tr>
<tr>
<td>DoubleToLongFunction</td>
<td>接收 Double 返回 Long</td>
</tr>
<tr>
<td>IntToDoubleFunction</td>
<td>接收 Int 返回 Double</td>
</tr>
<tr>
<td>IntToLongFunction</td>
<td>接收 Int 返回 Long</td>
</tr>
<tr>
<td>LongToDoubleFunction</td>
<td>接收 Long 返回 Double</td>
</tr>
<tr>
<td>LongToIntFunction</td>
<td>接收 Long 返回 Int</td>
</tr>
<tr>
<td>ToDoubleFunction</td>
<td>接收参数类型自定，返回 Double</td>
</tr>
<tr>
<td>ToIntFunction</td>
<td>接收参数类型自定，返回 Int</td>
</tr>
<tr>
<td>ToLongFunction</td>
<td>接收参数类型自定，返回 Long</td>
</tr>
<tr>
<td>ToIntBiFunction</td>
<td>接收两个参数, 返回 Int</td>
</tr>
<tr>
<td>ToLongBiFunction</td>
<td>接收两个参数, 返回 Long</td>
</tr>
<tr>
<td>ToDoubleBiFunction</td>
<td>接收两个参数, 返回 Double</td>
</tr>
</tbody></table>
<p>相比其他的几个 *Function 接口， BiFunction 和 Function 要更特殊一点，他们除了最基本的 apply() 之外还有一些额外的方法。</p>
<p>Function 和 BiFunction 还有一个相同的 <code>andThen()</code> 方法，他会再前一个返回值的基础上再做计算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对 Stream 中的数进行 x 100 -10 操作</span></span><br><span class="line">Function&lt;Integer, Integer&gt; funcx100 = val -&gt; val * <span class="number">100</span>;</span><br><span class="line">Function&lt;Integer, Integer&gt; funcMinus10 = val -&gt; val - <span class="number">10</span>;</span><br><span class="line">List&lt;Integer&gt; ret = Stream.of(<span class="number">1</span>, <span class="number">2</span>).map(funcx100.andThen(funcMinus10)).collect(Collectors.toList());</span><br><span class="line">ret.forEach(System.out::println);</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// 90</span></span><br><span class="line"><span class="comment">// 190</span></span><br></pre></td></tr></table></figure>

<p>初此之外 Function 还有几个特殊的方法， compose() 他是再 apply() 之前执行的，注意泛型返回值的承接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设计两个 lambda 函数，将测试字符串中的数字部分抽出来，并格式化</span></span><br><span class="line">Function&lt;String, Integer&gt; funcComp = val -&gt; &#123;String intVal = val.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> Integer.valueOf(intVal);&#125;;</span><br><span class="line">Function&lt;Integer, String&gt; func = val -&gt; <span class="string">&quot;[&quot;</span> + val + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">List&lt;String&gt; ret = Stream.of(<span class="string">&quot;Jack:30&quot;</span>, <span class="string">&quot;Jerry:18&quot;</span>).map(func.compose(funcComp)).collect(Collectors.toList());</span><br><span class="line">ret.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>Function 还有一个 identity() 方法，传入什么返回什么，完全不能领会它有什么用，到是网上一些例子中，可以用来快速生成 map 的用法让人挺印象深刻的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; map = Stream.of(<span class="string">&quot;i&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>).collect(Collectors.toMap(Function.identity(), String::length));</span><br><span class="line">System.out.println(map);</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// &#123;love=4, i=1, you=3&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h3><p>一个计算表达式，最基本的类型为 UnaryOperator， 翻译为 <code>一元表达式</code>, 它是 Function 的一个子类, 可以看成是定制版/特殊形式的 Function，只用于计算，看网上的例子貌似是这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UnaryOperator&lt;Integer&gt; operator = val -&gt; val ^ <span class="number">2</span>;</span><br><span class="line">System.out.println(operator.apply(<span class="number">4</span>));</span><br><span class="line"><span class="comment">// output: 6</span></span><br></pre></td></tr></table></figure>
<p>与之类似的还有 LongUnaryOperator 表示 long 类型的一元运算， 同理推至 IntUnaryOperator， DoubleUnaryOperator。</p>
<p>DoubleBinaryOperator 两个 Double 类型数据的运算，同理推至 IntBinaryOperator 和 LongBinaryOperator。</p>
<p>再 *Operator 一族中，比较特殊的是 BinaryOperator, 再他的方法中有两个计算最值的方法 <code>minBy()</code> 和 <code>maxBy()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BinaryOperator&lt;Integer&gt; max = BinaryOperator.maxBy(Comparator.naturalOrder());</span><br><span class="line">System.out.println(max.apply(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">BinaryOperator&lt;Integer&gt; min = BinaryOperator.minBy(Comparator.naturalOrder());</span><br><span class="line">System.out.println(min.apply(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">//output: 2 1</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>jenv 快速上手</title>
    <url>/hexo/2020/08/25/jenv-quick-start/</url>
    <content><![CDATA[<p>jenv 是和 pyenv 一个类型的工具，应对多版本 java 的需求进行管理。简单记录一下 jenv 安装使用方法。<a href="https://www.jenv.be/">官方教程</a>。需要注意的是在配置文件里添加完设置之后需要重起终端，不然文件夹什么还没有创建出来。</p>
<h2 id="CMDs"><a href="#CMDs" class="headerlink" title="CMDs"></a>CMDs</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install jenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># bashrc/zshrc 中添加配置</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$HOME</span>/.jenv/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(jenv init -)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># local 已经安装的版本检测</span></span><br><span class="line"><span class="built_in">which</span> java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 brew 安装的 Java 路径</span></span><br><span class="line">brew list java </span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到安装的路径是 /usr/local/Cellar/openjdk/XXX</span></span><br><span class="line"><span class="comment"># 默认就是从 openjdk repo 下载的</span></span><br><span class="line"><span class="comment"># 如果想安装其他版本可以 special 一下 version: brew list openjdk@11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># jenv 添加 home 路径</span></span><br><span class="line">jenv add /usr/<span class="built_in">local</span>/Cellar/openjdk@11/11.0.9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看可用版本</span></span><br><span class="line">jenv versions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想要只在某个路径下面指定 java 版本，可以 cd 到目标目录下，使用</span></span><br><span class="line">jenv <span class="built_in">local</span> 14</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除某个版本</span></span><br><span class="line">jenv remove 14</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>弹射起步</category>
      </categories>
      <tags>
        <tag>jenv</tag>
      </tags>
  </entry>
  <entry>
    <title>you-get 终端下载工具</title>
    <url>/hexo/2019/11/27/you-get%20%E7%BB%88%E7%AB%AF%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>作为一个新世纪的社会主义接班人，怎么能不关注国家大事呢，于是我开始有意识的培养看新闻联播的习惯。但是问题来了，新闻联播要三十分钟，而且不能倍速播放。都 9012 年了啊，官网用的还是 flash, 也是醉了。合计了一下，打算使用工具将视频下载下来后本地用 Potplayer 加速播放。一开始找了 IDM，总的来说，用起来还不错，但是有些时候新闻联播官网抓到的 ts 文件，还得自己合并，不开心 (｡ ́︿ ̀｡)</p>
<p>最后在 Gayhub 上找到了 you-get 很赞 ↖(^ω^)↗ 而且他还支持很多网站的下载 b站，youku 什么的都不在话下，而且有人维护，贡献很积极呦</p>
<ul>
<li><a href="https://github.com/soimort/you-get">Github you-get</a></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Win10 OS</p>
<p>准备工作：安装 python 3.2+, FFmpeg。前者用来下载后者用来合并视频，如果 FFmpeg 没有安装的还，下载还能成功，但是合并就不行了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install you-get</span><br></pre></td></tr></table></figure>

<p>安装 FFmpeg, 前往<a href="https://ffmpeg.org/">官网</a>下载压缩包，解压后将 bin 文件加到系统配置的 path 中，path 选系统 level 的，user level 的可能会出问题，视屏不能合并，别问我为什么知道的 ┑(￣Д ￣)┍</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示可用的下载选项，然后根据提示操作就行了</span></span><br><span class="line">you-get -i [URL]</span><br></pre></td></tr></table></figure>

<p>官方文档写的很详细，不懂就看 you-get 官方文档好了，有<a href="https://github.com/soimort/you-get/wiki/%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E">中文版</a>呦</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>终端</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title>创建 Date 对象</title>
    <url>/hexo/2020/01/03/%E5%88%9B%E5%BB%BA%20Date%20%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>简单记录一下 java 中 Date 类的使用</p>
<h3 id="通过-Date-创建"><a href="#通过-Date-创建" class="headerlink" title="通过 Date 创建"></a>通过 Date 创建</h3><p>默认构造函数会创建当前时间点的 Date 对象, 另外还可以通过 <code>Date(long milliseconds)</code> 的构造器创建指定时间的日期对象</p>
<p>主要方法：</p>
<ul>
<li>getTime() - return milliseconds</li>
<li>before(Date) - if date is before target date</li>
<li>after(Date)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="comment">// The default date fromat is: &quot;EEE MMM dd HH:mm:ss zzz yyyy&quot;;</span></span><br><span class="line">    System.out.println(date);</span><br><span class="line">    System.out.println(date.getTime());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Fri Jan 03 17:47:16 CST 2020</span></span><br><span class="line"><span class="comment">// 1578045256817</span></span><br></pre></td></tr></table></figure>

<h3 id="通过-SimpleDateFormat-创建"><a href="#通过-SimpleDateFormat-创建" class="headerlink" title="通过 SimpleDateFormat 创建"></a>通过 SimpleDateFormat 创建</h3><p>相比于上一种方式，这种更易懂一点，而且可以指定输出格式呦(´▽｀)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">    Date simpleDate = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>).parse(<span class="string">&quot;2020-01-03&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(simpleDate);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;MM-dd-yyyy&quot;</span>).format(simpleDate));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Fri Jan 03 00:00:00 CST 2020</span></span><br><span class="line"><span class="comment">// 01-03-2020</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>date</tag>
      </tags>
  </entry>
  <entry>
    <title>原码，反码和补码</title>
    <url>/hexo/2019/12/07/%E5%8E%9F%E7%A0%81%EF%BC%8C%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81/</url>
    <content><![CDATA[<p>本篇简要介绍一下计算机存储中原码，反码，补码的一些基本知识，给出一些我自己的概括，不严谨，想了解更多参考我给的链接</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>二进制数表示带符号值时，最高位位符号位，0表示正数，1表示负数，以四位二进制数来说明</p>
<p>原码：人能直接读出来的数，比如 1 二进制表示为 0001，-1 二进制 1001<br>反码：正数反码等于原码，负数反码符号为不变，其他各位取反 -1 反码 1110<br>补码：正数补码等于原码，负数补码等于反码 +1， -1 补码 1111</p>
<p>这样设计的原因是为了简化计算机计算，计算机这个东西，他虽然快，但是论复杂逻辑思考，真的弱得一匹 ┑(￣Д ￣)┍</p>
<h2 id="尝试复述一下设计原理"><a href="#尝试复述一下设计原理" class="headerlink" title="尝试复述一下设计原理"></a>尝试复述一下设计原理</h2><p>人的思路：1 - 1 = 1 + (-1) = 0，但是这个套路机器不懂啊，从它开来 1 + (-1) = 0001 + 1001 = -2。 为了弥补这个 gap, 人们就搞出了反码这个东西，这样机器计算的时候 1 + (-1) = 0001 + 1110 = 1111[反] = 1000[原] = -0。计算结果为题解决了，但随之带来了新的问题，出现了 0 和 -0 两个重复的数。所以人们又做了一次改进，搞出了补码这个东西，从此机器码中 1 + (-1) = 0001[补] + 1111[补] = 1,0000 = 0000, 因为是四位计算，最高位溢出不计算了，完美解决问题 ↖(^ω^)↗</p>
<p>原来多出来 -0 用来表示四位最大的负数 -64。这个数是没有原码和反码的。</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul>
<li>反码和取反是两个东西</li>
<li>取反和非很像，但是有区别，取反是0/1计算，非是逻辑运算</li>
<li>最大的那个负数没有原码和反码</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html">CSDN-原码, 反码, 补码 详解</a></li>
</ul>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
      <tags>
        <tag>原码</tag>
        <tag>反码</tag>
        <tag>补码</tag>
      </tags>
  </entry>
  <entry>
    <title>各种常用小工具</title>
    <url>/hexo/2020/05/16/%E5%90%84%E7%A7%8D%E5%B8%B8%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>常用小工具记录</p>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p>想要截取一下某堂公开课的课件，但是他是嵌入在页面的 scroller bar 组件当中的，截取很不方便，试了一些像 FireShot 之类的 Chrome 扩展，也不能很好的完成任务。最后通过 FastStone Capture 解决了问题</p>
<ul>
<li>FastStone Capture：一个 Windows 平台下的截图工具，功能还挺多，也挺全，不过应该有点年头了，界面很复古。应该是之支持 Win 平台的，20$ 不过送了 30 天的体验，还是很良心的，滚动截图简直优秀</li>
<li>如果光是 Chrome 的话，根本不需要安装插件，<code>Ctrl + Shift + I</code> 调出调试界面， <code>Ctrl + Shift + P</code> 调出 Chrome 终端界面，然后输入关键字 <code>screen</code> 选择 <code>Capture all screen</code> 就可以截取全部网页了。 在选中节点的情况下，也可以通过选择 <code>Capture node screen</code> 截取单个元素的图片，很方便，但是我那种情况并不好使。。。</li>
</ul>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>是不是还在为迅雷的各种广告，各种资源不能下载而烦恼，试试 Motrix 这个开源项目，还不错。已经有官方支持了，不需要什么操作直接下载安装就行，还多平台支持，溜的一批。</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>common</tag>
      </tags>
  </entry>
  <entry>
    <title>数字进制转化</title>
    <url>/hexo/2019/12/04/%E6%95%B0%E5%AD%97%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8C%96/</url>
    <content><![CDATA[<p>罗列常用语言中的数字转化方法</p>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>Python 中已经集成了很多用来做这个事情的内部方法，都不需要引入额外的包，很方便。主要集中在 str.format() 和其他一些内置函数比如 int(), hex () 等</p>
<p>str.format 转化格式如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">format_spec     ::=  [[fill]align][sign][<span class="comment">#][0][width][grouping_option][.precision][type]</span></span><br><span class="line">fill            ::=  &lt;any character&gt;</span><br><span class="line">align           ::=  <span class="string">&quot;&lt;&quot;</span> | <span class="string">&quot;&gt;&quot;</span> | <span class="string">&quot;=&quot;</span> | <span class="string">&quot;^&quot;</span></span><br><span class="line">sign            ::=  <span class="string">&quot;+&quot;</span> | <span class="string">&quot;-&quot;</span> | <span class="string">&quot; &quot;</span></span><br><span class="line">width           ::=  digit+</span><br><span class="line">grouping_option ::=  <span class="string">&quot;_&quot;</span> | <span class="string">&quot;,&quot;</span></span><br><span class="line">precision       ::=  digit+</span><br><span class="line"><span class="built_in">type</span>            ::=  <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span> | <span class="string">&quot;d&quot;</span> | <span class="string">&quot;e&quot;</span> | <span class="string">&quot;E&quot;</span> | <span class="string">&quot;f&quot;</span> | <span class="string">&quot;F&quot;</span> | <span class="string">&quot;g&quot;</span> | <span class="string">&quot;G&quot;</span> | <span class="string">&quot;n&quot;</span> | <span class="string">&quot;o&quot;</span> | <span class="string">&quot;s&quot;</span> | <span class="string">&quot;x&quot;</span> | <span class="string">&quot;X&quot;</span> | <span class="string">&quot;%&quot;</span></span><br></pre></td></tr></table></figure>

<p>一些例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 十进制 8 转化成二进制，8位宽，左对齐，空位补 -, format 里面的只能是十进制的数</span></span><br><span class="line"><span class="string">&#x27;&#123;:-&lt;8b&#125;&#x27;</span>.format(<span class="number">8</span>)</span><br><span class="line"><span class="comment"># &#x27;1000----&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0xff 转化成二进制，可以先把十六进制转成十进制，再转成二进制, 0x 可以省略</span></span><br><span class="line"><span class="string">&#x27;&#123;:b&#125;&#x27;</span>.format(int(<span class="string">&#x27;0xff&#x27;</span>, <span class="number">16</span>))</span><br><span class="line"><span class="comment"># &#x27;11111111&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bin 函数也可以用来做二进制转化，基数是10</span></span><br><span class="line">bin(<span class="number">8</span>)</span><br><span class="line"><span class="comment"># &#x27;0b1000&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str.format 加上 # 可以变成和 bin 一样的效果</span></span><br><span class="line"><span class="string">&#x27;&#123;:#b&#125;&#x27;</span>.format(int(<span class="string">&#x27;0xff&#x27;</span>, <span class="number">16</span>))</span><br><span class="line"><span class="comment"># &#x27;0b11111111&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内置函数 format 也可以实现和 str.format 一样的功能</span></span><br><span class="line">format(<span class="number">255</span>, <span class="string">&#x27;#b&#x27;</span>)</span><br><span class="line"><span class="comment"># &#x27;0b11111111&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再介绍一种 format 的简写形式</span></span><br><span class="line">f&#x27;&#123;255:#b&#125;&#x27;</span><br><span class="line"><span class="comment"># &#x27;0b11111111&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.python.org/3/library/string.html#grammar-token-precision">Python 官方文档</a></li>
<li><a href="https://stackoverflow.com/questions/1425493/convert-hex-to-binary/7373476">StackOverflow, convert hexo to binary</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>func</tag>
        <tag>hex</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派搭建 FastDFS 服务</title>
    <url>/hexo/2020/03/08/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BA%20FastDFS%20%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>树莓派搭建 FastDFS 服务记录</p>
<p>小结写在最前面：此方案可行，稍微有点坑，但是踩踩还是可以过的</p>
<h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><p>FastDFS 分布式文件存储系统，阿里系程序员<strong>余庆</strong>开发完成</p>
<p>FastDFS 只负责存储，不提供web支持，所以一般要搭配 nginx 使用</p>
<p>工作模式： client -&gt; (tracker server + storage server), tracker 信息负责管理， storage 负责存储</p>
<p>树莓派的默认账号： pi | raspberry</p>
<p>可以通过终端输入: ssh pi@host 链接</p>
<h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><ul>
<li><a href="https://github.com/happyfish100/fastdfs/wiki">官方文档</a></li>
<li><a href="https://www.youtube.com/watch?v=6Y2NihvPijQ">视频教程，不过要翻墙</a></li>
</ul>
<p>依赖关系：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── FastDFS-nginx-module</span><br><span class="line">├── fastdfs(tracker + storage)</span><br><span class="line">│   ├── GCC</span><br><span class="line">│   ├── libevent</span><br><span class="line">│   └── perl</span><br><span class="line">├── libfastcommon</span><br><span class="line">└── nginx</span><br><span class="line">    ├── pcre-devel</span><br><span class="line">    └── zlib-devel</span><br></pre></td></tr></table></figure>

<h3 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h3><p>一些包的名字在 RedHat 和 Debain 下的名字不一样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install git gcc make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel wget vim</span><br><span class="line"></span><br><span class="line">E: Unable to locate package gcc-c++</span><br><span class="line">E: Unable to locate package pcre</span><br><span class="line">E: Unable to locate package pcre-devel</span><br><span class="line">E: Unable to locate package zlib</span><br><span class="line">E: Unable to locate package zlib-devel</span><br><span class="line">E: Unable to locate package openssl-devel</span><br><span class="line"></span><br><span class="line">gcc-c++ 可以用 g++ 代替，不过好像 gcc 安装之后自动就装好了</span><br><span class="line"></span><br><span class="line">pcre，pcre-devel 用 libpcre3 libpcre3-dev 代替</span><br><span class="line"></span><br><span class="line">zlib： zlib1g</span><br><span class="line">openssl-devel: libssl-dev</span><br></pre></td></tr></table></figure>

<p>按照教程走，输入 ./make.sh &amp;&amp; ./make.sh install 还是报错，说 permission denied. 试试 <code>sudo -i</code></p>
<blockquote>
<p>启动 nginx:</p>
</blockquote>
<ol>
<li>cd 到 root@raspberrypi:/usr/local/nginx/sbin# 路径下运行 ./nginx</li>
<li>如果是重启就 ./nginx -s reload</li>
</ol>
<blockquote>
<p>wget 下载文件并重命名:</p>
</blockquote>
<p>wget -c ‘url’ -O ‘rename’</p>
<blockquote>
<p>查看已经上传的图片  </p>
</blockquote>
<p>根据 storage 配置找到路径，各种 cd 进去可以看到你已经上传的文件，我本地测试的时候是在这里 <code>/home/dfs/data/00/00</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  00 ls -al</span><br><span class="line">total 1072</span><br><span class="line">drwxr-xr-x   2 root root    4096 Mar 14 15:10 .</span><br><span class="line">drwxr-xr-x 258 root root    4096 Mar  8 11:38 ..</span><br><span class="line">-rw-r--r--   1 root root 1024694 Mar  8 11:44 wKgBal5k2qGAQv4CAA-itrfn0m4.tar.gz</span><br><span class="line">-rw-r--r--   1 root root   20002 Mar  8 12:52 wKgBal5k6pmAa4jlAABOIgA5mas34.jpeg</span><br><span class="line">-rw-r--r--   1 root root   20002 Mar  8 15:41 wKgBal5lEiyAfaT6AABOIgA5mas88.jpeg</span><br><span class="line">-rw-r--r--   1 root root   20002 Mar 14 15:10 wKgBal5s8_eAYY_fAABOIgA5mas81.jpeg</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试图片访问可以在 nginx 启动之后访问 host:8888/group1/M00/00/00/wKgBal5s8_eAYY_fAABOIgA5mas81.jpeg 这样的路径查看</p>
</blockquote>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>pi</tag>
        <tag>FastDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>生活小常识</title>
    <url>/hexo/2020/06/07/%E7%94%9F%E6%B4%BB%E5%B0%8F%E5%B8%B8%E8%AF%86/</url>
    <content><![CDATA[<p>别用 iPhone 来购买会员之类的虚拟产品!</p>
<blockquote>
<p>iPhone 在购买虚拟产品，比如网易云音乐之类的会员时，要比安卓，或者PC直接购买要贵，比例还挺高 20-30% 之间，这是 IOS 平台的雁过拔毛策略。。。直接在费 IOS 平台就可以</p>
</blockquote>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>小常识</tag>
      </tags>
  </entry>
  <entry>
    <title>词条</title>
    <url>/hexo/2020/05/28/%E8%AF%8D%E6%9D%A1/</url>
    <content><![CDATA[<blockquote>
<p>Q: 什么是反向代理</p>
</blockquote>
<p>反向代理是相对正向代理来说的。正向代理隐藏了客户端，反向代理隐藏了服务器端。比如我们搭建 VPS 服务器翻墙就是一个正向代理的例子。我们可以通过代理服务器对 Google 发起请求拿到信息。相对的，<a href="http://www.google.cn">www.google.cn</a> 就是一个反向代理，这个域名的背后有很多服务器，但我们不 care，他代表谷歌，这就足够了。</p>
<blockquote>
<p>Q: 为什么 BiFunction 可以表示为两个参数的函数接口</p>
</blockquote>
<p>这个命名还是很贴切的，在英语中 bi 前缀有两个的意思，来源于拉丁语。类似的单词还有 bifocal(河流分叉)，bifurcate(双面显微镜)等。</p>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
      <tags>
        <tag>解释</tag>
      </tags>
  </entry>
  <entry>
    <title>ASM 快速入门</title>
    <url>/hexo/2020/09/07/ASM-quick-guide/</url>
    <content><![CDATA[<p>通过本次实验对 ASM 这个字节码框架有一个基本的了解。实验必须是简单明了，方便重现的。引用一段话很好的概括了 ASM 的功能</p>
<blockquote>
<p>可以负责任的告诉大家，ASM只不过是通过 “Visitor” 模式将 “.class” 类文件的内容从头到尾扫描一遍。因此如果你抱着任何更苛刻的要求最后都将失望而归。</p>
</blockquote>
<p>实验平台信息：<br>    MacOS + IDEA + ASM Bytecode Outline 插件</p>
<h2 id="输出-Class-方法"><a href="#输出-Class-方法" class="headerlink" title="输出 Class 方法"></a>输出 Class 方法</h2><p>准备测试用 class，通过 ASM 输出 class 中的方法名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface01</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface02</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHello</span> <span class="keyword">implements</span> <span class="title">MyInterface01</span>, <span class="title">MyInterface02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>右键准备的测试文件，选中 ‘Show bytecode outline’ 选项，点击 Bytecode tab, 查看内容可以看到字节码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; class version 52.0 (52)</span><br><span class="line">&#x2F;&#x2F; access flags 0x21</span><br><span class="line">public class sorra&#x2F;tracesonar&#x2F;mytest&#x2F;SayHello implements sorra&#x2F;tracesonar&#x2F;mytest&#x2F;MyInterface01 sorra&#x2F;tracesonar&#x2F;mytest&#x2F;MyInterface02  &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; compiled from: SayHello.java</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; access flags 0x1</span><br><span class="line">  public &lt;init&gt;()V</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 3 L0</span><br><span class="line">    ALOAD 0</span><br><span class="line">    INVOKESPECIAL java&#x2F;lang&#x2F;Object.&lt;init&gt; ()V</span><br><span class="line">    RETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE this Lsorra&#x2F;tracesonar&#x2F;mytest&#x2F;SayHello; L0 L1 0</span><br><span class="line">    MAXSTACK &#x3D; 1</span><br><span class="line">    MAXLOCALS &#x3D; 1</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; access flags 0x1</span><br><span class="line">  public say()V</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 5 L0</span><br><span class="line">    LDC &quot;Jack&quot;</span><br><span class="line">    ASTORE 1</span><br><span class="line">   L1</span><br><span class="line">    LINENUMBER 6 L1</span><br><span class="line">    GETSTATIC java&#x2F;lang&#x2F;System.out : Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">    NEW java&#x2F;lang&#x2F;StringBuilder</span><br><span class="line">    DUP</span><br><span class="line">    INVOKESPECIAL java&#x2F;lang&#x2F;StringBuilder.&lt;init&gt; ()V</span><br><span class="line">    LDC &quot;Hello&quot;</span><br><span class="line">    INVOKEVIRTUAL java&#x2F;lang&#x2F;StringBuilder.append (Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">    ALOAD 1</span><br><span class="line">    INVOKEVIRTUAL java&#x2F;lang&#x2F;StringBuilder.append (Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">    INVOKEVIRTUAL java&#x2F;lang&#x2F;StringBuilder.toString ()Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">    INVOKEVIRTUAL java&#x2F;io&#x2F;PrintStream.println (Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">   L2</span><br><span class="line">    LINENUMBER 7 L2</span><br><span class="line">    RETURN</span><br><span class="line">   L3</span><br><span class="line">    LOCALVARIABLE this Lsorra&#x2F;tracesonar&#x2F;mytest&#x2F;SayHello; L0 L3 0</span><br><span class="line">    LOCALVARIABLE name Ljava&#x2F;lang&#x2F;String; L1 L3 1</span><br><span class="line">    MAXSTACK &#x3D; 3</span><br><span class="line">    MAXLOCALS &#x3D; 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ASMTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--- START ---&quot;</span>);</span><br><span class="line">        ClassReader cr = <span class="keyword">new</span> ClassReader(SayHello.class.getName());</span><br><span class="line">        cr.accept(<span class="keyword">new</span> DemoClassVisitor(), <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--- END ---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoClassVisitor</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoClassVisitor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Opcodes.ASM5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called when access file header, so it will called only once for each class</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * access: 方法的 modifier, 就是 public/private 的那些修饰词</span></span><br><span class="line"><span class="comment">    * name: class name</span></span><br><span class="line"><span class="comment">    * signature: 不是很确定，但是好像不重要</span></span><br><span class="line"><span class="comment">    * superName: 父类的名字，该例子中是 object</span></span><br><span class="line"><span class="comment">    * interfaces: 实现的接口</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span> version, <span class="keyword">int</span> access, String name, String signature, String superName, String[] interfaces)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.visit(version, access, name, signature, superName, interfaces);</span><br><span class="line">        System.out.println(<span class="string">&quot;invoke visit method, params: &quot;</span> + version + <span class="string">&quot;, &quot;</span> + access + <span class="string">&quot;, &quot;</span> + name + <span class="string">&quot;, &quot;</span> + signature + <span class="string">&quot;, &quot;</span> + superName + <span class="string">&quot;, &quot;</span> + Arrays.toString(interfaces));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called when access method</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String desc, String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;at Method &quot;</span> + name);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        MethodVisitor superMV = <span class="keyword">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DemoMethodVisitor(superMV, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoMethodVisitor</span> <span class="keyword">extends</span> <span class="title">MethodVisitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoMethodVisitor</span><span class="params">(MethodVisitor mv, String methodName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Opcodes.ASM5, mv);</span><br><span class="line">        <span class="keyword">this</span>.methodName = methodName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;at Method ‘&quot;</span> + methodName + <span class="string">&quot;’ Begin...&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.visitCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitLocalVariable</span><span class="params">(String name, String desc, String signature, Label start, Label end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.visitLocalVariable(name, desc, signature, start, end, index);</span><br><span class="line">        System.out.println(<span class="string">&quot;Params in visitLocalVariable: &quot;</span> + name + <span class="string">&quot;, &quot;</span> + desc + <span class="string">&quot;, &quot;</span> + signature + <span class="string">&quot;, &quot;</span> + start + <span class="string">&quot;, &quot;</span> + end + <span class="string">&quot;, &quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;at Method ‘&quot;</span> + methodName + <span class="string">&quot;’End.&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.visitEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>终端输出</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">--- START ---</span><br><span class="line">invoke visit method, params: 52, 33, sorra/tracesonar/mytest/SayHello, null, java/lang/Object, [sorra/tracesonar/mytest/MyInterface01, sorra/tracesonar/mytest/MyInterface02]</span><br><span class="line">at Method &lt;init&gt;</span><br><span class="line">at Method ‘&lt;init&gt;’ Begin...</span><br><span class="line">Params in visitLocalVariable: this, Lsorra/tracesonar/mytest/SayHello;, null, L662441761, L1618212626, 0</span><br><span class="line">at Method ‘&lt;init&gt;’End.</span><br><span class="line">at Method say</span><br><span class="line">at Method ‘say’ Begin...</span><br><span class="line">Params in visitLocalVariable: this, Lsorra/tracesonar/mytest/SayHello;, null, L1129670968, L1023714065, 0</span><br><span class="line">Params in visitLocalVariable: name, Ljava/lang/String;, null, L2051450519, L1023714065, 1</span><br><span class="line">at Method ‘say’End.</span><br><span class="line">--- END ---</span><br></pre></td></tr></table></figure>

<p>想要理解 ASM 运行方式，需要结合前面的 bytecode 内容。比如 <code>visitLocalVariable</code> 方法其实就是将 bytecode 里面对应的 LOCALVARIABLE 信息打印出来。</p>
<h2 id="MethodVisitor-的-visitMethodInsn-方法简单例子"><a href="#MethodVisitor-的-visitMethodInsn-方法简单例子" class="headerlink" title="MethodVisitor 的 visitMethodInsn 方法简单例子"></a>MethodVisitor 的 visitMethodInsn 方法简单例子</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>根据查到的资料，该方法可以知道当前的方法调用了其他类的什么方法，设计用例如下: Class A 有 method a, Class B 有 method b, a 中包含对 b 的调用，使用 visitMethodInsn 解析 a 方法是应该可以拿到这层关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</span><br><span class="line">    ClassB b = <span class="keyword">new</span> ClassB();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        b.methodB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Method B called...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>class A 的 bytecode 显示如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; class version 52.0 (52)</span><br><span class="line">&#x2F;&#x2F; access flags 0x21</span><br><span class="line">public class com&#x2F;jzheng&#x2F;asmtest&#x2F;ClassA &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; compiled from: ClassA.java</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; access flags 0x0</span><br><span class="line">  Lcom&#x2F;jzheng&#x2F;asmtest&#x2F;ClassB; b</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; access flags 0x1</span><br><span class="line">  public &lt;init&gt;()V</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 3 L0</span><br><span class="line">    ALOAD 0</span><br><span class="line">    INVOKESPECIAL java&#x2F;lang&#x2F;Object.&lt;init&gt; ()V</span><br><span class="line">   L1</span><br><span class="line">    LINENUMBER 4 L1</span><br><span class="line">    ALOAD 0</span><br><span class="line">    NEW com&#x2F;jzheng&#x2F;asmtest&#x2F;ClassB</span><br><span class="line">    DUP</span><br><span class="line">    INVOKESPECIAL com&#x2F;jzheng&#x2F;asmtest&#x2F;ClassB.&lt;init&gt; ()V</span><br><span class="line">    PUTFIELD com&#x2F;jzheng&#x2F;asmtest&#x2F;ClassA.b : Lcom&#x2F;jzheng&#x2F;asmtest&#x2F;ClassB;</span><br><span class="line">    RETURN</span><br><span class="line">   L2</span><br><span class="line">    LOCALVARIABLE this Lcom&#x2F;jzheng&#x2F;asmtest&#x2F;ClassA; L0 L2 0</span><br><span class="line">    MAXSTACK &#x3D; 3</span><br><span class="line">    MAXLOCALS &#x3D; 1</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; access flags 0x1</span><br><span class="line">  public methodA()V</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 7 L0</span><br><span class="line">    ALOAD 0</span><br><span class="line">    GETFIELD com&#x2F;jzheng&#x2F;asmtest&#x2F;ClassA.b : Lcom&#x2F;jzheng&#x2F;asmtest&#x2F;ClassB;</span><br><span class="line">    INVOKEVIRTUAL com&#x2F;jzheng&#x2F;asmtest&#x2F;ClassB.methodB ()V</span><br><span class="line">   L1</span><br><span class="line">    LINENUMBER 8 L1</span><br><span class="line">    RETURN</span><br><span class="line">   L2</span><br><span class="line">    LOCALVARIABLE this Lcom&#x2F;jzheng&#x2F;asmtest&#x2F;ClassA; L0 L2 0</span><br><span class="line">    MAXSTACK &#x3D; 1</span><br><span class="line">    MAXLOCALS &#x3D; 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到在 <code>methodA()V</code> block 里有对 ClassB 的方法调用说明 <code>INVOKEVIRTUAL com/jzheng/asmtest/ClassB.methodB ()V</code>，通过它我们可以知道当前方法对其他类方法的调用</p>
<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ASMTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--- START ---&quot;</span>);</span><br><span class="line">        ClassReader cr = <span class="keyword">new</span> ClassReader(ClassA.class.getName());</span><br><span class="line">        cr.accept(<span class="keyword">new</span> DemoClassVisitor(), <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--- END ---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoClassVisitor</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoClassVisitor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Opcodes.ASM5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called when access method</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String desc, String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;at Method &quot;</span> + name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MethodVisitor(Opcodes.ASM5) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitMethodInsn</span><span class="params">(<span class="keyword">int</span> opcode, String owner, String name, String desc, <span class="keyword">boolean</span> itf)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.visitMethodInsn(opcode, owner, name, desc, itf);</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;opcode: %s, owner: %s, name: %s, desc: %s, itf: %s&quot;</span>, opcode, owner, name, desc, itf));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// --- START ---</span></span><br><span class="line"><span class="comment">// at Method &lt;init&gt;</span></span><br><span class="line"><span class="comment">// opcode: 183, owner: java/lang/Object, name: &lt;init&gt;, desc: ()V, itf: false</span></span><br><span class="line"><span class="comment">// opcode: 183, owner: com/jzheng/asmtest/ClassB, name: &lt;init&gt;, desc: ()V, itf: false</span></span><br><span class="line"><span class="comment">// at Method methodA</span></span><br><span class="line"><span class="comment">// opcode: 182, owner: com/jzheng/asmtest/ClassB, name: methodB, desc: ()V, itf: false</span></span><br><span class="line"><span class="comment">// --- END ---</span></span><br></pre></td></tr></table></figure>

<h2 id="测试-itf-参数"><a href="#测试-itf-参数" class="headerlink" title="测试 itf 参数"></a>测试 itf 参数</h2><p>visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf)</p>
<ul>
<li>desc: 方法参数和返回值类型，<code>()</code> 内为参数，外面是返回值</li>
<li>itf 方法是否来自接口，如下面所示的例子，当子类实现接口，通过子类调用方法时，值为 false，当强转为接口时值为 true。 值的注意的是，继承的方法也是 false。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassReader;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Opcodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Scenario:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.objectweb.asm.MethodVisitor#visitMethodInsn(int, String, String, String, boolean)&#125;, 测试方法是继承自父类或者接口时该接口中的参数表现形式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVisitMethodInsn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--- START ---&quot;</span>);</span><br><span class="line">        ClassReader cr = <span class="keyword">new</span> ClassReader(Client.class.getName());</span><br><span class="line">        cr.accept(<span class="keyword">new</span> DemoClassVisitor(), <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--- END ---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    Sub sub = <span class="keyword">new</span> Sub();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sub.methodOfSuper();</span><br><span class="line">        sub.methodOfInterface();</span><br><span class="line">        ((Super)sub).methodOfSuper();</span><br><span class="line">        ((MyInterface)sub).methodOfInterface();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodOfSuper</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">methodOfInterface</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodOfSuper</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">methodOfInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoClassVisitor</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoClassVisitor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Opcodes.ASM5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called when access method</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String desc, String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;In Method &quot;</span> + name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MethodVisitor(Opcodes.ASM5) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitMethodInsn</span><span class="params">(<span class="keyword">int</span> opcode, String owner, String name, String desc, <span class="keyword">boolean</span> itf)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.visitMethodInsn(opcode, owner, name, desc, itf);</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;opcode: %s, owner: %s, name: %s, desc: %s, itf: %s&quot;</span>, opcode, owner, name, desc, itf));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="visitInvokeDynamicInsn-用以检测-lambda-表达式"><a href="#visitInvokeDynamicInsn-用以检测-lambda-表达式" class="headerlink" title="visitInvokeDynamicInsn 用以检测 lambda 表达式"></a>visitInvokeDynamicInsn 用以检测 lambda 表达式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Scenario:</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.objectweb.asm.MethodVisitor#visitInvokeDynamicInsn(String, String, Handle, Object...)&#125;, 这个方法可以用来检测动态生成的方法，比如 lambada 表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVisitInvokeDynamicInsn</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestVisitInvokeDynamicInsn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Opcodes.ASM5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String desc, String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Parse Method: &quot;</span> + name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MethodVisitor(Opcodes.ASM5) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitInvokeDynamicInsn</span><span class="params">(String name, String desc, Handle bsm, Object... bsmArgs)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (Object sub : bsmArgs) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sub <span class="keyword">instanceof</span> Handle) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;Handle info: &quot;</span> + sub);</span><br><span class="line">                        System.out.printf(<span class="string">&quot;name: %s, desc: %s, owner: %s, tag: %s%n&quot;</span>, ((Handle) sub).getName(), ((Handle) sub).getDesc(), ((Handle) sub).getOwner(), ((Handle) sub).getTag() );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">super</span>.visitInvokeDynamicInsn(name, desc, bsm, bsmArgs);</span><br><span class="line">                System.out.printf(<span class="string">&quot;Output from [visitInvokeDynamicInsn]%nname: %s%n desc: %s%n bsm: %s%n bsmArgs: %s%n&quot;</span>, name, desc, bsm, Arrays.asList(bsmArgs));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--- START ---&quot;</span>);</span><br><span class="line">        ClassReader cr = <span class="keyword">new</span> ClassReader(Client02.class.getName());</span><br><span class="line">        cr.accept(<span class="keyword">new</span> TestVisitInvokeDynamicInsn(), <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--- END ---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] names = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>&#125;;</span><br><span class="line">        Arrays.stream(names).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        BinaryOperator&lt;Long&gt; addLongs = Long::sum;</span><br><span class="line">        addLongs.apply(<span class="number">1L</span>,<span class="number">2L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// --- START ---</span></span><br><span class="line"><span class="comment">// Parse Method: &lt;init&gt;</span></span><br><span class="line"><span class="comment">// Parse Method: test</span></span><br><span class="line"><span class="comment">// Handle info: java/io/PrintStream.println(Ljava/lang/String;)V (5)</span></span><br><span class="line"><span class="comment">// name: println, desc: (Ljava/lang/String;)V, owner: java/io/PrintStream, tag: 5</span></span><br><span class="line"><span class="comment">// Output from [visitInvokeDynamicInsn]</span></span><br><span class="line"><span class="comment">// name: accept</span></span><br><span class="line"><span class="comment">//  desc: (Ljava/io/PrintStream;)Ljava/util/function/Consumer;</span></span><br><span class="line"><span class="comment">//  bsm: java/lang/invoke/LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; (6)</span></span><br><span class="line"><span class="comment">//  bsmArgs: [(Ljava/lang/Object;)V, java/io/PrintStream.println(Ljava/lang/String;)V (5), (Ljava/lang/String;)V]</span></span><br><span class="line"><span class="comment">// Handle info: java/lang/Long.sum(JJ)J (6)</span></span><br><span class="line"><span class="comment">// name: sum, desc: (JJ)J, owner: java/lang/Long, tag: 6</span></span><br><span class="line"><span class="comment">// Output from [visitInvokeDynamicInsn]</span></span><br><span class="line"><span class="comment">// name: apply</span></span><br><span class="line"><span class="comment">//  desc: ()Ljava/util/function/BinaryOperator;</span></span><br><span class="line"><span class="comment">//  bsm: java/lang/invoke/LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; (6)</span></span><br><span class="line"><span class="comment">//  bsmArgs: [(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;, java/lang/Long.sum(JJ)J (6), (Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;]</span></span><br><span class="line"><span class="comment">// --- END ---</span></span><br></pre></td></tr></table></figure>

<p>注意参数列表中的 bsmArgs, 其中的 Handle 可能是你想要的， 列表中的 bsm 是一个固定值，看着像是 lambda 的指代</p>
<h2 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h2><p>实验内容：准备一个 HelloWorld.class 可以打印出 ‘Hello World’ 字样。通过 ASM 框架使他在打印之前和之后都输出一些 debug 信息，调用时可以使用反射简化实验。</p>
<p>测试用 class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例，通过反射拿到测试方法并调用查看输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class cls = Class.forName(<span class="string">&quot;sorra.tracesonar.main.aopsample.HelloWorld&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Method sayHello = cls.getDeclaredMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">        sayHello.invoke(cls.newInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// run and get output:</span></span><br><span class="line"><span class="comment">// Hello World...</span></span><br></pre></td></tr></table></figure>

<p>预期目标：通过 ASM 修改目标 class 使得输出为 ‘Test start \n Hello World… \n Test end’，对应的 java code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Expected</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test start&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Test end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>选中 java 文件，右键 -&gt; Show Bytecode Outline 选中 ASMifield tab 可以看到转化后的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> asm.sorra.tracesonar.main.aopsample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpectedDump</span> <span class="keyword">implements</span> <span class="title">Opcodes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] dump() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        ClassWriter cw = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">        FieldVisitor fv;</span><br><span class="line">        MethodVisitor mv;</span><br><span class="line">        AnnotationVisitor av0;</span><br><span class="line"></span><br><span class="line">        cw.visit(<span class="number">52</span>, ACC_PUBLIC + ACC_SUPER, <span class="string">&quot;sorra/tracesonar/main/aopsample/Expected&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        cw.visitSource(<span class="string">&quot;Expected.java&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            mv = cw.visitMethod(ACC_PUBLIC, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            mv.visitCode();</span><br><span class="line">            Label l0 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l0);</span><br><span class="line">            mv.visitLineNumber(<span class="number">3</span>, l0);</span><br><span class="line">            mv.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            mv.visitInsn(RETURN);</span><br><span class="line">            Label l1 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l1);</span><br><span class="line">            mv.visitLocalVariable(<span class="string">&quot;this&quot;</span>, <span class="string">&quot;Lsorra/tracesonar/main/aopsample/Expected;&quot;</span>, <span class="keyword">null</span>, l0, l1, <span class="number">0</span>);</span><br><span class="line">            mv.visitMaxs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            mv.visitEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            mv = cw.visitMethod(ACC_PUBLIC, <span class="string">&quot;sayHello&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            mv.visitCode();</span><br><span class="line">            Label l0 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l0);</span><br><span class="line">            mv.visitLineNumber(<span class="number">5</span>, l0);</span><br><span class="line">            mv.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>);</span><br><span class="line">            mv.visitLdcInsn(<span class="string">&quot;Test start&quot;</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            Label l1 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l1);</span><br><span class="line">            mv.visitLineNumber(<span class="number">6</span>, l1);</span><br><span class="line">            mv.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>);</span><br><span class="line">            mv.visitLdcInsn(<span class="string">&quot;Hello World...&quot;</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            Label l2 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l2);</span><br><span class="line">            mv.visitLineNumber(<span class="number">7</span>, l2);</span><br><span class="line">            mv.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>);</span><br><span class="line">            mv.visitLdcInsn(<span class="string">&quot;Test end&quot;</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            Label l3 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l3);</span><br><span class="line">            mv.visitLineNumber(<span class="number">8</span>, l3);</span><br><span class="line">            mv.visitInsn(RETURN);</span><br><span class="line">            Label l4 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l4);</span><br><span class="line">            mv.visitLocalVariable(<span class="string">&quot;this&quot;</span>, <span class="string">&quot;Lsorra/tracesonar/main/aopsample/Expected;&quot;</span>, <span class="keyword">null</span>, l0, l4, <span class="number">0</span>);</span><br><span class="line">            mv.visitMaxs(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">            mv.visitEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        cw.visitEnd();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cw.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中类似如下的代码使一些行号和变量的处理，可以删掉不要，不影响结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Label l0 = <span class="keyword">new</span> Label();</span><br><span class="line">mv.visitLabel(l0);</span><br><span class="line">mv.visitLineNumber(<span class="number">3</span>, l0);</span><br><span class="line">...</span><br><span class="line">Label l4 = <span class="keyword">new</span> Label();</span><br><span class="line">mv.visitLabel(l4);</span><br><span class="line">mv.visitLocalVariable(<span class="string">&quot;this&quot;</span>, <span class="string">&quot;Lsorra/tracesonar/main/aopsample/Expected;&quot;</span>, <span class="keyword">null</span>, l0, l4, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>将自动生成的文件里的冗余语句删掉，加一个 main 方法，生成文件并存放到根目录下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpectedDump</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] dump() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> cw.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] updated = dump();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;Expected.class&quot;</span>)) &#123;</span><br><span class="line">            fos.write(updated);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Write success...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行该 Java 文件，可以看到 project 的根目录下有生成一个名为 ‘Expected.class’ 的文件，在 IDEA 里面浏览它，编辑器会自动给出反编译结果，可以发现，在目标语句前后已经加上了我们要的 ‘Test Start/End’ 的 debug 语句了。</p>
]]></content>
      <categories>
        <category>弹射起步</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>asm</tag>
      </tags>
  </entry>
  <entry>
    <title>组合模式</title>
    <url>/hexo/2021/04/19/Design-pattern-composite/</url>
    <content><![CDATA[<blockquote>
<p><strong>The Composite Pattern</strong> allows you to compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.<br>组合模式让我们可以将数据组合成树状结构。他可以让我们以统一的模式对待单个节点或整个组合体</p>
</blockquote>
<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>书接上一个 Iterator 章节，现在 DinerMenu 业务扩展了，我们想要在 DinerMenu 的基础上再增加一个子目录来打印一个点心子菜单。现在已有的代码结构并不能完成我们的需求，我们将使用 组合模式 重构我们的代码。</p>
<p>更具上面这个需求我们可以将需要展示的结构抽象为如下结构</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">                                                     +------------+                                                                                  </span><br><span class="line">                                                     | All Menus  |                                                                                  </span><br><span class="line">                                                     +------------+                                                                                  </span><br><span class="line">                                                        ^                                                                                            </span><br><span class="line">                     -----------------------------------|-------------------------------                                                             </span><br><span class="line">                    |                                   |                              |                                                             </span><br><span class="line">                    |                                   |                              |                                                             </span><br><span class="line">           +--------------------+            +------------+                     +------------+                                                       </span><br><span class="line">           | Pancake House Menu |            | Diner Menu |                     | Cafe Menu  |                                                       </span><br><span class="line">           +--------------------+            +------------+                     +------------+                                                       </span><br><span class="line">                    ^                           ^                                  ^                                                                 </span><br><span class="line">     ---------------|----------                 |-------------                     |-----------                                                      </span><br><span class="line">    |               |         |                 |            |                     |          |                                                      </span><br><span class="line">    |               |         |                 |            |                     |          |                                                      </span><br><span class="line">+----------+  +----------+             +----------+   +-------------+    +----------+    +----------+                                                </span><br><span class="line">| MenuItem |  | MenuItem |   ...       | MenuItem |   |Dessert Menu |    | MenuItem |    | MenuItem |                                                </span><br><span class="line">+----------+  +----------+             +----------+   +-------------+    +----------+    +----------+                                                </span><br><span class="line">                                                                ^                                                                                    </span><br><span class="line">                                                  ------------- |--------------                                                                      </span><br><span class="line">                                                 |              |             |                                                                      </span><br><span class="line">                                                 |              |             |                                                                      </span><br><span class="line">                                            +----------+    +----------+      |                                                                      </span><br><span class="line">                                            | MenuItem |    | MenuItem |     ...                                                                     </span><br><span class="line">                                            +----------+    +----------+                                                                             </span><br></pre></td></tr></table></figure>

<p>我们要实现用统一的接口访问 Menu 和 MenuItem，所以不难想到，我们需要在这两个概念外面包装一个统一的对外接口。</p>
<p>代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们抽象一个组合节点和叶子结点公用的超集节点，叫做 MenuComponent, 他包含了这两种节点都要用到的方法，虽然这样做会有点冗余</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MenuComponent <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 叶子结点实现，只需要重写叶子结点支持的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuItem</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String description;</span><br><span class="line">    <span class="keyword">boolean</span> vegetarian;</span><br><span class="line">    <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">        <span class="keyword">this</span>.vegetarian = vegetarian;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vegetarian;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;  &quot;</span> + getName());</span><br><span class="line">        <span class="keyword">if</span> (isVegetarian()) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot; (v)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;, &quot;</span> + getPrice());</span><br><span class="line">        System.out.println(<span class="string">&quot;-- &quot;</span> + getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合节点的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Menu</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    ArrayList menuComponents = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    String name;</span><br><span class="line">    String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Menu</span><span class="params">(String name, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        menuComponents.add(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        menuComponents.remove(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MenuComponent <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (MenuComponent) menuComponents.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;\n&quot;</span> + getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;, &quot;</span> + getDesc());</span><br><span class="line">        System.out.print(<span class="string">&quot;---------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印完自己的信息后，还需要循环答应子节点信息</span></span><br><span class="line">        Iterator iterator = menuComponents.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            MenuComponent menuComponent = (MenuComponent) iterator.next();</span><br><span class="line">            menuComponent.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试的客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MenuComponent pancakeHouseMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;PANCAKE HOUSE MENU&quot;</span>, <span class="string">&quot;Breakfast&quot;</span>);</span><br><span class="line">        MenuComponent dinerMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;DINER MENU&quot;</span>, <span class="string">&quot;Lunch&quot;</span>);</span><br><span class="line">        MenuComponent cafeMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;CAFE MENU&quot;</span>, <span class="string">&quot;Dinner&quot;</span>);</span><br><span class="line">        MenuComponent dessertMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;DESSERT MENU&quot;</span>, <span class="string">&quot;Dessert of course !&quot;</span>);</span><br><span class="line"></span><br><span class="line">        MenuComponent allMenus = <span class="keyword">new</span> Menu(<span class="string">&quot;ALL MENUS&quot;</span>, <span class="string">&quot;All menus combined&quot;</span>);</span><br><span class="line">        allMenus.add(pancakeHouseMenu);</span><br><span class="line">        allMenus.add(dinerMenu);</span><br><span class="line">        allMenus.add(cafeMenu);</span><br><span class="line"></span><br><span class="line">        pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;K &amp; B’s Pancake Breakfast&quot;</span>, <span class="string">&quot;Pancakes with scrambled eggs, and toast&quot;</span>, <span class="keyword">true</span>, <span class="number">2.99</span>));</span><br><span class="line">        pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Regular Pancake Breakfast&quot;</span>, <span class="string">&quot;Pancakes with fried eggs, sausage&quot;</span>, <span class="keyword">false</span>, <span class="number">2.99</span>));</span><br><span class="line">        pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Blueberry Pancakes&quot;</span>, <span class="string">&quot;Pancakes made with fresh blueberries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.49</span>));</span><br><span class="line">        pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Waffles&quot;</span>, <span class="string">&quot;Waffles, with your choice of blueberries or strawberries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.59</span>));</span><br><span class="line"></span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Pasta&quot;</span>, <span class="string">&quot;Spaghetti with Marinara Sauce, and a slice of sourdough bread&quot;</span>, <span class="keyword">true</span>, <span class="number">3.89</span>));</span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Vegetarian BLT&quot;</span>, <span class="string">&quot; (Fakin’)Bacon with lettuce &amp; tomato on whole wheat&quot;</span>, <span class="keyword">true</span>, <span class="number">2.99</span>));</span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;BLT&quot;</span>, <span class="string">&quot;Bacon with lettuce &amp; tomato on whole wheat&quot;</span>, <span class="keyword">false</span>, <span class="number">2.99</span>));</span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Soup of the day&quot;</span>, <span class="string">&quot;Soup of the day, with a side of potato salad&quot;</span>, <span class="keyword">false</span>, <span class="number">3.29</span>));</span><br><span class="line"></span><br><span class="line">        dinerMenu.add(dessertMenu);</span><br><span class="line">        dessertMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Apple Pie&quot;</span>, <span class="string">&quot;Apple pie with a flakey crust, topped with vanilla icecream&quot;</span>, <span class="keyword">true</span>, <span class="number">1.59</span>));</span><br><span class="line"></span><br><span class="line">        cafeMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Veggie Burger and Air Fries&quot;</span>, <span class="string">&quot;Veggie burger on a whole wheat bun, lettuce, tomato, and fries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.99</span>));</span><br><span class="line">        cafeMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Soup of the day&quot;</span>, <span class="string">&quot;A cup of the soup of the day, with a side salad&quot;</span>, <span class="keyword">false</span>, <span class="number">3.69</span>));</span><br><span class="line">        cafeMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Burrito&quot;</span>, <span class="string">&quot;A large burrito, with whole pinto beans, salsa, guacamole&quot;</span>, <span class="keyword">true</span>, <span class="number">4.29</span>));</span><br><span class="line">        allMenus.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ALL MENUS, All menus combined</span></span><br><span class="line"><span class="comment">// ---------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PANCAKE HOUSE MENU, Breakfast</span></span><br><span class="line"><span class="comment">// ---------------------</span></span><br><span class="line"><span class="comment">//   K &amp; B’s Pancake Breakfast, desc:&#x27;Pancakes with scrambled eggs, and toast&#x27; (v) , price:2.99</span></span><br><span class="line"><span class="comment">//   Regular Pancake Breakfast, desc:&#x27;Pancakes with fried eggs, sausage&#x27; , price:2.99</span></span><br><span class="line"><span class="comment">//   Blueberry Pancakes, desc:&#x27;Pancakes made with fresh blueberries&#x27; (v) , price:3.49</span></span><br><span class="line"><span class="comment">//   Waffles, desc:&#x27;Waffles, with your choice of blueberries or strawberries&#x27; (v) , price:3.59</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DINER MENU, Lunch</span></span><br><span class="line"><span class="comment">// ---------------------</span></span><br><span class="line"><span class="comment">//   Pasta, desc:&#x27;Spaghetti with Marinara Sauce, and a slice of sourdough bread&#x27; (v) , price:3.89</span></span><br><span class="line"><span class="comment">//   Vegetarian BLT, desc:&#x27; (Fakin’)Bacon with lettuce &amp; tomato on whole wheat&#x27; (v) , price:2.99</span></span><br><span class="line"><span class="comment">//   BLT, desc:&#x27;Bacon with lettuce &amp; tomato on whole wheat&#x27; , price:2.99</span></span><br><span class="line"><span class="comment">//   Soup of the day, desc:&#x27;Soup of the day, with a side of potato salad&#x27; , price:3.29</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DESSERT MENU, Dessert of course !</span></span><br><span class="line"><span class="comment">// ---------------------</span></span><br><span class="line"><span class="comment">//   Apple Pie, desc:&#x27;Apple pie with a flakey crust, topped with vanilla icecream&#x27; (v) , price:1.59</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAFE MENU, Dinner</span></span><br><span class="line"><span class="comment">// ---------------------</span></span><br><span class="line"><span class="comment">//   Veggie Burger and Air Fries, desc:&#x27;Veggie burger on a whole wheat bun, lettuce, tomato, and fries&#x27; (v) , price:3.99</span></span><br><span class="line"><span class="comment">//   Soup of the day, desc:&#x27;A cup of the soup of the day, with a side salad&#x27; , price:3.69</span></span><br><span class="line"><span class="comment">//   Burrito, desc:&#x27;A large burrito, with whole pinto beans, salsa, guacamole&#x27; (v) , price:4.29</span></span><br></pre></td></tr></table></figure>

<p>上面这种 print 用了内部 Iterator 的方法，简单了很多， 那么如何实现一个外部的 Iterator 呢</p>
<p>我们先为基类添加 createIterator 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;</span><br><span class="line">    <span class="comment">// dup...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后声明一个 Composite 的 Iterator 的具体实现类, 并让 Composite 实现类返回它</p>
<p>CompositeIterator 说明：</p>
<p>这个 Iterator 说实话不是很容易看懂。我们最好结合下面的 printVegetarianMenu() 方法的使用情况一起来看。由下面的方法调用，我们可以反推出这个 Iterator 实现类的作用。</p>
<p>每次调用 hasNext() 时，CompositeIterator 会返回一个 MenuCompoment 类型的对象。有可能是 Menu, 也有可能是 MenuItem。</p>
<p>而且就算返回的是 Menu, 他之后还是会把这个 Menu 的 MenuItem 在下一次返回。由此我们可以推测出，在 next() 反 Menu 之后，还有一个隐式的将 Menu 子节点 push 到 stack 中的动作。</p>
<p>PS: 这段代码的关键点是，stack 中存储的是 Iterator 对象。当这个对象里面没有值的时候，需要做 pop 操作弹出 it, 这里有点绕</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">MenuComponent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Iterator&lt;MenuComponent&gt;&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CompositeIterator</span><span class="params">(Iterator&lt;MenuComponent&gt; it)</span> </span>&#123;</span><br><span class="line">        stack.push(it);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack.empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Iterator&lt;MenuComponent&gt; it = stack.peek();</span><br><span class="line">            <span class="keyword">if</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="keyword">return</span> hasNext();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MenuComponent <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hasNext()) &#123;</span><br><span class="line">            Iterator&lt;MenuComponent&gt; it = stack.peek();</span><br><span class="line">            MenuComponent component = it.next();</span><br><span class="line">            <span class="keyword">if</span> (component <span class="keyword">instanceof</span> Menu) &#123;</span><br><span class="line">                stack.push(component.createIterator());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> component;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Menu</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">// dup...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;MenuComponent&gt; <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CompositeIterator(nodes.iterator());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于叶子节点是不需要迭代的，我们返回一个空的 iterator， 每次调用 hasNext() 都返回 false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NullIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuItem</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">// dup...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NullIterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MenuComponent pancakeHouseMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;PANCAKE HOUSE MENU&quot;</span>, <span class="string">&quot;Breakfast&quot;</span>);</span><br><span class="line">        MenuComponent dinerMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;DINER MENU&quot;</span>, <span class="string">&quot;Lunch&quot;</span>);</span><br><span class="line">        MenuComponent cafeMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;CAFE MENU&quot;</span>, <span class="string">&quot;Dinner&quot;</span>);</span><br><span class="line">        MenuComponent dessertMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;DESSERT MENU&quot;</span>, <span class="string">&quot;Dessert of course !&quot;</span>);</span><br><span class="line"></span><br><span class="line">        MenuComponent allMenus = <span class="keyword">new</span> Menu(<span class="string">&quot;ALL MENUS&quot;</span>, <span class="string">&quot;All menus combined&quot;</span>);</span><br><span class="line">        allMenus.add(pancakeHouseMenu);</span><br><span class="line">        allMenus.add(dinerMenu);</span><br><span class="line">        allMenus.add(cafeMenu);</span><br><span class="line"></span><br><span class="line">        pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;K &amp; B’s Pancake Breakfast&quot;</span>, <span class="string">&quot;Pancakes with scrambled eggs, and toast&quot;</span>, <span class="keyword">true</span>, <span class="number">2.99</span>));</span><br><span class="line">        pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Regular Pancake Breakfast&quot;</span>, <span class="string">&quot;Pancakes with fried eggs, sausage&quot;</span>, <span class="keyword">false</span>, <span class="number">2.99</span>));</span><br><span class="line">        pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Blueberry Pancakes&quot;</span>, <span class="string">&quot;Pancakes made with fresh blueberries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.49</span>));</span><br><span class="line">        pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Waffles&quot;</span>, <span class="string">&quot;Waffles, with your choice of blueberries or strawberries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.59</span>));</span><br><span class="line"></span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Pasta&quot;</span>, <span class="string">&quot;Spaghetti with Marinara Sauce, and a slice of sourdough bread&quot;</span>, <span class="keyword">true</span>, <span class="number">3.89</span>));</span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Vegetarian BLT&quot;</span>, <span class="string">&quot; (Fakin’)Bacon with lettuce &amp; tomato on whole wheat&quot;</span>, <span class="keyword">true</span>, <span class="number">2.99</span>));</span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;BLT&quot;</span>, <span class="string">&quot;Bacon with lettuce &amp; tomato on whole wheat&quot;</span>, <span class="keyword">false</span>, <span class="number">2.99</span>));</span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Soup of the day&quot;</span>, <span class="string">&quot;Soup of the day, with a side of potato salad&quot;</span>, <span class="keyword">false</span>, <span class="number">3.29</span>));</span><br><span class="line"></span><br><span class="line">        dinerMenu.add(dessertMenu);</span><br><span class="line">        dessertMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Apple Pie&quot;</span>, <span class="string">&quot;Apple pie with a flakey crust, topped with vanilla icecream&quot;</span>, <span class="keyword">true</span>, <span class="number">1.59</span>));</span><br><span class="line"></span><br><span class="line">        cafeMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Veggie Burger and Air Fries&quot;</span>, <span class="string">&quot;Veggie burger on a whole wheat bun, lettuce, tomato, and fries&quot;</span>, <span class="keyword">true</span>, <span class="number">3.99</span>));</span><br><span class="line">        cafeMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Soup of the day&quot;</span>, <span class="string">&quot;A cup of the soup of the day, with a side salad&quot;</span>, <span class="keyword">false</span>, <span class="number">3.69</span>));</span><br><span class="line">        cafeMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">&quot;Burrito&quot;</span>, <span class="string">&quot;A large burrito, with whole pinto beans, salsa, guacamole&quot;</span>, <span class="keyword">true</span>, <span class="number">4.29</span>));</span><br><span class="line"></span><br><span class="line">        Iterator&lt;MenuComponent&gt; it = allMenus.createIterator();</span><br><span class="line">        printVegetarianMenu(it);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printVegetarianMenu</span><span class="params">(Iterator&lt;MenuComponent&gt; it)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Vegetarian Menu\n----------&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            MenuComponent menuComponent = it.next();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (menuComponent.isVegetarian()) &#123;</span><br><span class="line">                    menuComponent.print();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedOperationException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Vegetarian Menu</span></span><br><span class="line"><span class="comment">// ----------</span></span><br><span class="line"><span class="comment">//   K &amp; B’s Pancake Breakfast, desc:&#x27;Pancakes with scrambled eggs, and toast&#x27; (v) , price:2.99</span></span><br><span class="line"><span class="comment">//   Blueberry Pancakes, desc:&#x27;Pancakes made with fresh blueberries&#x27; (v) , price:3.49</span></span><br><span class="line"><span class="comment">//   Waffles, desc:&#x27;Waffles, with your choice of blueberries or strawberries&#x27; (v) , price:3.59</span></span><br><span class="line"><span class="comment">//   Pasta, desc:&#x27;Spaghetti with Marinara Sauce, and a slice of sourdough bread&#x27; (v) , price:3.89</span></span><br><span class="line"><span class="comment">//   Vegetarian BLT, desc:&#x27; (Fakin’)Bacon with lettuce &amp; tomato on whole wheat&#x27; (v) , price:2.99</span></span><br><span class="line"><span class="comment">//   Apple Pie, desc:&#x27;Apple pie with a flakey crust, topped with vanilla icecream&#x27; (v) , price:1.59</span></span><br><span class="line"><span class="comment">//   Apple Pie, desc:&#x27;Apple pie with a flakey crust, topped with vanilla icecream&#x27; (v) , price:1.59</span></span><br><span class="line"><span class="comment">//   Veggie Burger and Air Fries, desc:&#x27;Veggie burger on a whole wheat bun, lettuce, tomato, and fries&#x27; (v) , price:3.99</span></span><br><span class="line"><span class="comment">//   Burrito, desc:&#x27;A large burrito, with whole pinto beans, salsa, guacamole&#x27; (v) , price:4.29</span></span><br></pre></td></tr></table></figure>

<p>上面用的是外部 Iterator 的方式，需要自己控制当前节点位置，所以实现上比内部的那种要复杂很多。</p>
<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p>图示说明：</p>
<ul>
<li>client 到 Component 为 实线 + 普通箭头，表示含有</li>
<li>leaf, composite 到 Component 为 实线 + 空心箭头，表示实现接口</li>
<li>Composite 到 Component 为 实线 + 普通箭头，表示 1 对 n 的对应关系</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">                           +----------------+                                                                                                       </span><br><span class="line">+---------+                |   Component    | 1..n                                                                                                  </span><br><span class="line">| Client  |--------------&gt; |----------------|&lt;--------                                                                                              </span><br><span class="line">+---------+                | + operation()  |        |                                                                                              </span><br><span class="line">                           | + add(child)   |        |                                                                                              </span><br><span class="line">                           | + remve(child) |        |                                                                                              </span><br><span class="line">                           | + getChild()   |        |                                                                                              </span><br><span class="line">                           +----------------+        |                                                                                              </span><br><span class="line">                                    ^                |                                                                                              </span><br><span class="line">             ---------------------- |                |                                                                                              </span><br><span class="line">            |                       |                |                                                                                              </span><br><span class="line">            |                       |                |                                                                                              </span><br><span class="line">    +---------------+       +----------------+       |                                                                                              </span><br><span class="line">    |   Leaf        |       |   Composite    |       |                                                                                              </span><br><span class="line">    |---------------|       |----------------|&lt;&gt;-----|                                                                                              </span><br><span class="line">    | +operation()  |       | + operation()  |                                                                                                      </span><br><span class="line">    +---------------+       | + add(child)   |                                                                                                      </span><br><span class="line">                            | + remve(child) |                                                                                                      </span><br><span class="line">                            | + getChild()   |                                                                                                      </span><br><span class="line">                            +----------------+                                                                                                                                                               </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HFDP</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>composite pattern</tag>
        <tag>组合模式</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/hexo/2021/04/09/Design-pattern-strategy/</url>
    <content><![CDATA[<p>Design Principle: </p>
<ul>
<li>Identify the aspects of your application that vary and separate them from what stays the same - 将频繁改变的部分从系统中抽离出来</li>
<li>Program to an interface, not an implementation - 面向接口编程而非实现</li>
<li>Favor composition over inheritance - 组合优于继承</li>
</ul>
<blockquote>
<p>The <strong>Strategy Pattern</strong> defines a family of algorithms, encapsulates each one, and makes them interchangeable.  Strategy lets the algorithm vary independently from clients that use it.  </p>
<p>完成共一个任务往往有多种不同的方法，每一种方法我们称之为策略，我们可以通过不同的条件选择不同的算法完成任务</p>
</blockquote>
<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">+-----------------+                                                                                                                               </span><br><span class="line">|  Context        |                                                                                                                               </span><br><span class="line">|---------------- |               +-------------------+                                                                                           </span><br><span class="line">| - strategy      |&lt;&gt;------------ | &lt;&lt;Interface&gt;&gt;     |                                                                                           </span><br><span class="line">|---------------- |               |   Strategy        |                                                                                           </span><br><span class="line">| + setStrategy(s)|               |------------------ |                                                                                           </span><br><span class="line">| + perfStratecy()|               | algorithm()       |                                                                                           </span><br><span class="line">|                 |               +-------------------+                                                                                           </span><br><span class="line">|                 |                 ^                                                                                                             </span><br><span class="line">|                 |                 |----------------------------------                                                                           </span><br><span class="line">+-----------------+                 |                |                |                                                                           </span><br><span class="line">                                    |                |                |                                                                           </span><br><span class="line">                   +-------------------+   +-------------------+      |                                                                           </span><br><span class="line">                   |ConcreateStrategyA |   |ConcreateStrategyB |      |                                                                           </span><br><span class="line">                   |------------------ |   |------------------ |     ...                                                                          </span><br><span class="line">                   | algorithm()       |   | algorithm()       |                                                                                  </span><br><span class="line">                   +-------------------+   +-------------------+                                                                                  </span><br></pre></td></tr></table></figure>

<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>已有一段鸭子模拟器代码，所有鸭子都有一个基类，基类中定义了一些常用方法，并给了实现。只有 display() 是需要每个类定制的，声明成了 abstract 并在子类中各自实现</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">            +--------------------+                                                                                                                  </span><br><span class="line">            |  Duck              |                                                                                                                  </span><br><span class="line">            |--------------------|                                                                                                                  </span><br><span class="line">            | swim()             |                                                                                                                  </span><br><span class="line">            | display()          |                                                                                                                  </span><br><span class="line">            | quack()            |                                                                                                                  </span><br><span class="line">            | //other methods    |                                                                                                                  </span><br><span class="line">            +--------------------+                                                                                                                  </span><br><span class="line">               ^                                                                                                                                    </span><br><span class="line">               |                                                                                                                                    </span><br><span class="line">               |---------------                                                                                                                     </span><br><span class="line">               |              |                                                                                                                     </span><br><span class="line">               |              |                                                                                                                     </span><br><span class="line">+----------------+     +----------------+                                                                                                           </span><br><span class="line">|  MallardDuck   |     |  RedHeadDuck   |                                                                                                           </span><br><span class="line">|--------------- |     |--------------- |                                                                                                           </span><br><span class="line">|display()       |     |display()       |                                                                                                           </span><br><span class="line">|                |     |                |                                                                                                           </span><br><span class="line">|                |     |                |                                                                                                           </span><br><span class="line">+----------------+     +----------------+                                                                                                           </span><br></pre></td></tr></table></figure>

<p>某个 release，客户突然想要看到鸭子能飞。。。小码农一拍脑袋：嗨，这还不简单。就直接在基类里添加了 fly() 的实现。然后转头就去写其他功能了。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">            +--------------------+                                                                                                                  </span><br><span class="line">            |  Duck              |                                                                                                                  </span><br><span class="line">            |--------------------|                                                                                                                  </span><br><span class="line">            | swim()             |                                                                                                                  </span><br><span class="line">            | display()          |                                                                                                                  </span><br><span class="line">            | quack()            |                                                                                                                  </span><br><span class="line">            | fly()              |                                                                                                                  </span><br><span class="line">            | //other methods    |                                                                                                                  </span><br><span class="line">            +--------------------+                                                                                                                  </span><br><span class="line">               ^                                                                                                                                    </span><br><span class="line">               |                                                                                                                                    </span><br><span class="line">               |---------------                                                                                                                     </span><br><span class="line">               |              |                                                                                                                     </span><br><span class="line">               |              |                                                                                                                     </span><br><span class="line">+----------------+     +----------------+                                                                                                           </span><br><span class="line">|  MallardDuck   |     |  RedHeadDuck   |                                                                                                           </span><br><span class="line">|--------------- |     |--------------- |                                                                                                           </span><br><span class="line">|display()       |     |display()       |                                                                                                           </span><br><span class="line">|                |     |                |                                                                                                           </span><br><span class="line">|                |     |                |                                                                                                           </span><br><span class="line">+----------------+     +----------------+                                                                                                           </span><br></pre></td></tr></table></figure>

<p>三天后，Sales 一个夺命连环 call 打到小码农这儿，说自己给客户演示功能的时候，突然发现，程序里的橡皮鸭子起飞了！！！这还了得，小码农打开了 IDE 看了橡皮鸭子的代码</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">            +--------------------+                                                                                                                  </span><br><span class="line">            |  Duck              |                                                                                                                  </span><br><span class="line">            |--------------------|                                                                                                                  </span><br><span class="line">            | swim()             |                                                                                                                  </span><br><span class="line">            | display()          |                                                                                                                  </span><br><span class="line">            | quack()            |                                                                                                                  </span><br><span class="line">            | fly()              |                                                                                                                  </span><br><span class="line">            | //other methods    |                                                                                                                  </span><br><span class="line">            +--------------------+                                                                                                                  </span><br><span class="line">               ^                                                                                                                                    </span><br><span class="line">               |                                                                                                                                    </span><br><span class="line">               |----------------------------------------                                                                                            </span><br><span class="line">               |              |                        |                                                                                            </span><br><span class="line">               |              |                        |                                                                                            </span><br><span class="line">+----------------+     +----------------+     +----------------+                                                                                    </span><br><span class="line">|  MallardDuck   |     |  RedHeadDuck   |     |  RubberDuck    |                                                                                    </span><br><span class="line">|--------------- |     |--------------- |     |--------------- |                                                                                    </span><br><span class="line">|display()       |     |display()       |     |display()       |                                                                                    </span><br><span class="line">|                |     |                |     |quack()&#123;        |                                                                                    </span><br><span class="line">|                |     |                |     |override quack  |                                                                                    </span><br><span class="line">+----------------+     +----------------+     |&#125;               |                                                                                    </span><br><span class="line">                                              |                |                                                                                    </span><br><span class="line">                                              +----------------+                                                                                    </span><br></pre></td></tr></table></figure>

<p>好嘛，原来基类加完 fly() 方法之后忘了重写橡皮鸭子这个子类了，还能咋整，要不重写一下 fly() 呗</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+-------------------------+                                                                                                                           </span><br><span class="line">|    RubberDuck           |                                                                                                                           </span><br><span class="line">| ----------------------  |                                                                                                                           </span><br><span class="line">|                         |                                                                                                                           </span><br><span class="line">| display()               |                                                                                                                           </span><br><span class="line">| quack()&#123;// rubber quck &#125;|                                                                                                                           </span><br><span class="line">| fly()&#123; // do nothing &#125;  |                                                                                                                           </span><br><span class="line">|                         |                                                                                                                           </span><br><span class="line">+-------------------------+ </span><br></pre></td></tr></table></figure>

<p>不过转念一下，这也不是办法啊，不然哪天要新加一个什么木头鸭子，不是还得和相比鸭子一样再来一遍？于是小码农就寻思着，把 quack 和 fly 整成接口？</p>
<p>把这个想法和同事小美一说，小美立马就不乐意了，这个那个产品老几十个类，把这两个玩意儿整成接口，你不得在这几十个类里面都改一遍，你改啊？！</p>
<p>小码农想也是，但是没什么法子，就去问自己的师傅大能耐了。小码农把情况和大能耐说了一遍。</p>
<p>‘耐哥，就上面的情况，听说你精通设计模式，这种情况，有法儿吗’</p>
<p>‘咱先不说设计模式的事儿，写代码最起码得掌握一个原则：先把频繁变动的代码和不变的拆分开了后我们再说事儿’</p>
<p>按照耐哥的思路，小码农把 quack 和 fly 从鸭子类里面单独拿出来写成接口，并为他们做了各种实现</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">                 +-------------------------+                                                                                                       </span><br><span class="line">                 |    &lt;&lt;Interface&gt;&gt;        |                                                                                                       </span><br><span class="line">                 |    FlyBehavior          |                                                                                                       </span><br><span class="line">                 | ----------------------  |                                                                                                       </span><br><span class="line">                 | fly()                   |                                                                                                       </span><br><span class="line">                 |                         |                                                                                                       </span><br><span class="line">                 +-------------------------+                                                                                                       </span><br><span class="line">                       ^                                                                                                                           </span><br><span class="line">                       |---------------------                                                                                                      </span><br><span class="line">                       |                    |                                                                                                      </span><br><span class="line">                       |                    |                                                                                                      </span><br><span class="line">+-------------------------+   +-------------------------+                                                                                          </span><br><span class="line">|    FlyWithWings         |   |    FlyNoWay             |                                                                                          </span><br><span class="line">| ----------------------  |   | ----------------------  |                                                                                          </span><br><span class="line">| fly()&#123; // duck flying &#125; |   | fly()&#123; // can&#x27;t fly &#125;   |                                                                                          </span><br><span class="line">|                         |   |                         |                                                                                          </span><br><span class="line">+-------------------------+   +-------------------------+ </span><br></pre></td></tr></table></figure>

<p>既然将这两个属性从基类中抽出来了，那原来的基类中我们再用这两个新的接口代替，并新建方法调用接口实现 fly 和 quack 的功能</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+--------------------+                                                                                                                             </span><br><span class="line">|  Duck              |                                                                                                                             </span><br><span class="line">|--------------------|                                                                                                                             </span><br><span class="line">| FlyBehavior fb     |                                                                                                                             </span><br><span class="line">| QuackBehavior qb   |                                                                                                                             </span><br><span class="line">|                    |                                                                                                                             </span><br><span class="line">|--------------------|                                                                                                                             </span><br><span class="line">| swim()             |                                                                                                                             </span><br><span class="line">| display()          |                                                                                                                             </span><br><span class="line">| perormQuack()  &lt;----------- qb.quack();                                                                                                          </span><br><span class="line">| performFly()   &lt;----------- fb.fly();                                                                                                            </span><br><span class="line">| //other methods    |                                                                                                                             </span><br><span class="line">|                    |                                                                                                                             </span><br><span class="line">+--------------------+                     </span><br></pre></td></tr></table></figure>

<p>按照这个逻辑，小码农重构了以后的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fly 接口及其实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;I can&#x27;t fly...&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;I can fly...&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quack 接口及其实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;Quack...Quack...&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Squack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;Squack...&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;&lt;&lt; Silence &gt;&gt;&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Duck 抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    QuackBehavior quackBehavior;</span><br><span class="line">    FlyBehavior flyBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span> </span>&#123; quackBehavior.quack(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span> </span>&#123; flyBehavior.fly(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;All ducks float, even decoys!&quot;</span>); &#125;</span><br><span class="line">    <span class="comment">// other shared methods</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体种类的鸭子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MallardDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flyBehavior = <span class="keyword">new</span> FlyWithWings();</span><br><span class="line">        <span class="keyword">this</span>.quackBehavior = <span class="keyword">new</span> Quack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m a Mallard duck...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiniDuckSimulator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MallardDuck mallardDuck = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">        mallardDuck.performQuack();</span><br><span class="line">        mallardDuck.performFly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quack...Quack...</span></span><br><span class="line"><span class="comment">// I can fly...</span></span><br></pre></td></tr></table></figure>

<p>大功告成，小码农拿着自己的成果找了大能耐 review 代码</p>
<p>‘不错不错，不过你有没有想过你的代码还可以更灵活，只要在 Duck 里面添加一个 set 方法，你就可以动态的改变鸭子的行为了哟’</p>
<p>小码农一想，立马知道了其中的关键，修改了代码</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+--------------------+                                                                                                                             </span><br><span class="line">|  Duck              |                                                                                                                             </span><br><span class="line">|--------------------|                                                                                                                             </span><br><span class="line">| FlyBehavior fb     |                                                                                                                             </span><br><span class="line">| QuackBehavior qb   |                                                                                                                             </span><br><span class="line">|                    |                                                                                                                             </span><br><span class="line">|--------------------|                                                                                                                             </span><br><span class="line">| swim()             |                                                                                                                             </span><br><span class="line">| display()          |                                                                                                                             </span><br><span class="line">| perormQuack()  &lt;----------- qb.quack();                                                                                                          </span><br><span class="line">| performFly()   &lt;----------- fb.fly();                                                                                                            </span><br><span class="line">| //other methods    |                                                                                                                             </span><br><span class="line">| setFlyBehavior()   |                                                                                                                             </span><br><span class="line">| setQuackBehavior() |                                                                                                                             </span><br><span class="line">|                    |                                                                                                                             </span><br><span class="line">+--------------------+                     </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    QuackBehavior quackBehavior;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuackBehavior</span><span class="params">(QuackBehavior quackBehavior)</span> </span>&#123; <span class="keyword">this</span>.quackBehavior = quackBehavior; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlyBehavior</span><span class="params">(FlyBehavior flyBehavior)</span> </span>&#123; <span class="keyword">this</span>.flyBehavior = flyBehavior; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正巧项目组想要一个新的鸭子模型，能够动态的改变飞行模式，在氪金以前是不能飞的，但是氪金以后能弹射起步。。。正好赶巧了，小码农三下五除二就实现了功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocketFly</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;  System.out.println(<span class="string">&quot;Fly in rocket speed...&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiniDuckSimulator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ModelDuck modelDuck = <span class="keyword">new</span> ModelDuck();</span><br><span class="line">        modelDuck.performFly();</span><br><span class="line"></span><br><span class="line">        modelDuck.setFlyBehavior(<span class="keyword">new</span> RocketFly());</span><br><span class="line">        modelDuck.performFly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// I can&#x27;t fly...</span></span><br><span class="line"><span class="comment">// Fly in rocket speed...</span></span><br></pre></td></tr></table></figure>

<p>小码农哼着小曲儿锁了屏，转头跑到走廊上掏出手机开启了王者农药。。。</p>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>HFDP</category>
      </categories>
      <tags>
        <tag>strategy pattern</tag>
        <tag>策略模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 弹射起步</title>
    <url>/hexo/2021/04/15/Docker-quick-start/</url>
    <content><![CDATA[<h2 id="虚拟机-Vs-容器"><a href="#虚拟机-Vs-容器" class="headerlink" title="虚拟机 Vs 容器"></a>虚拟机 Vs 容器</h2><ul>
<li>虚拟机运行整个系统，在系统上安装运行软件</li>
<li>容器内的应用直接运行在宿主机内，容器没有自己的内核，也没有虚拟硬件</li>
<li>每个容器互相隔离，都有属于自己的文件系统，互不影响</li>
</ul>
<h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><p>应用更快速的交付和部署</p>
<p>传统：一堆帮助文件，安装程序<br>Docker: 打包镜像发布测试，一键运行</p>
<p>更便捷的升级扩容</p>
<p>更简单的系统运维</p>
<p>更高效的计算资源利用：docker 是内核级别的虚拟化，可以在一个乌力吉上运行多个实例，性能压榨到极致</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h2 id="当你输入-docker-run-hello-word-时发生了什么"><a href="#当你输入-docker-run-hello-word-时发生了什么" class="headerlink" title="当你输入 docker run hello-word 时发生了什么"></a>当你输入 docker run hello-word 时发生了什么</h2><p>拉镜像的 flow</p>
<h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p>client 和 server 交互模型</p>
<h2 id="Docker-为什么比-VM-快"><a href="#Docker-为什么比-VM-快" class="headerlink" title="Docker 为什么比 VM 快"></a>Docker 为什么比 VM 快</h2><ol>
<li>Docker 有比虚拟机更少的抽象出</li>
<li>Docker 利用的是宿主机内核，VM 需要自己加载操作系统</li>
</ol>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docker 相关</span></span><br><span class="line">docker version <span class="comment"># 版本信息</span></span><br><span class="line">docker info <span class="comment"># 系统信息，container 数量，操纵系统等</span></span><br><span class="line">docker --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像相关</span></span><br><span class="line"><span class="comment"># docker pull image_name[:tag]</span></span><br><span class="line">Host&gt; docker pull mysql   <span class="comment"># 没有指定 tag 就默认下载 latest 版本</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">f7ec5a41d630: Already exists </span><br><span class="line">9444bb562699: Pull complete  <span class="comment"># 分层下载， docker image 的核心，联合文件系统</span></span><br><span class="line">6a4207b96940: Pull complete </span><br><span class="line">181cefd361ce: Pull complete </span><br><span class="line">8a2090759d8a: Pull complete </span><br><span class="line">15f235e0d7ee: Pull complete </span><br><span class="line">d870539cd9db: Pull complete </span><br><span class="line">493aaa84617a: Pull complete </span><br><span class="line">bfc0e534fc78: Pull complete </span><br><span class="line">fae20d253f9d: Pull complete </span><br><span class="line">9350664305b3: Pull complete </span><br><span class="line">e47da95a5aab: Pull complete </span><br><span class="line">Digest: sha256:04ee7141256e83797ea4a84a4d31b1f1bc10111c8d1bc1879d52729ccd19e20a <span class="comment"># 签名</span></span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:latest</span><br><span class="line">docker.io/library/mysql:latest <span class="comment"># 真实地址，等价 docker pull docker.io/library/mysql:latest</span></span><br><span class="line"></span><br><span class="line">docker rmi -f img_id <span class="comment"># 删除镜像</span></span><br><span class="line">docker rmi -f $(docker images -aq) <span class="comment"># 删除全部镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器相关</span></span><br><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line">--name=<span class="string">&quot;my_name&quot;</span> 指定容器名字</span><br><span class="line">-d 后台运行</span><br><span class="line">-it 交互方式运行，进去容器查看</span><br><span class="line">-p 指定端口</span><br><span class="line">    -p ip:主机端口:容器端口</span><br><span class="line">    -p 主机端口:容器端口</span><br><span class="line">    -p 容器端口</span><br><span class="line">    容器端口</span><br><span class="line">-P 随机指定端口</span><br><span class="line"></span><br><span class="line">docker run -it centos /bin/bash <span class="comment"># 启动并进入容器</span></span><br><span class="line">docker ps <span class="comment"># 运行中的容器</span></span><br><span class="line">docker ps -a <span class="comment"># 所有容器</span></span><br><span class="line">docker ps -n=2 <span class="comment"># 最近创建的2个容器</span></span><br><span class="line"></span><br><span class="line">ctrl + p + q <span class="comment"># 交互模式下推出容器并后台运行。mac 也是这个命令</span></span><br><span class="line"></span><br><span class="line">docker rm container_id <span class="comment"># 删除容器，不能删除正在运行的容器，除非加 -f</span></span><br><span class="line">docker rm -f $(docker ps -qa) <span class="comment"># 删除所有</span></span><br><span class="line">docker ps -aq | xargs docker rm <span class="comment"># 删除所有</span></span><br><span class="line"></span><br><span class="line">docker start container_id</span><br><span class="line">docker restart container_id</span><br><span class="line">docker stop container_id</span><br><span class="line">docker <span class="built_in">kill</span> container_id <span class="comment"># stop 报错了可以用这个强制杀进程</span></span><br><span class="line"></span><br><span class="line">docker run -d centos <span class="comment"># 后台运行</span></span><br><span class="line"><span class="comment"># 常见坑：docker 容器使用后台运行，必须要给一个前台进程，dock儿 发现没有应用就会自动停止</span></span><br><span class="line"><span class="comment"># nginx 容器启动后发现自己没有提供服务，就会立刻停止，ps 就看不见了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除某个 image 的 containers, 这里有个小技巧，可以先通过 docker ps 输出一下，避免误删</span></span><br><span class="line">docker ps -aq --filter ancestor=nginx</span><br><span class="line">docker rm -f $(docker ps -aq --filter ancestor=nginx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成临时 log</span></span><br><span class="line">docker run -d centos /bin/sh -c <span class="string">&quot;while true;do echo testlog;sleep 1;done&quot;</span></span><br><span class="line"><span class="comment"># -t 时间戳</span></span><br><span class="line"><span class="comment"># -f 一直打印</span></span><br><span class="line"><span class="comment"># --tail num 输出n条</span></span><br><span class="line">docker logs -tf --tail 10 contains_id</span><br><span class="line"></span><br><span class="line">docker top comtainer_id <span class="comment"># 显示容器中的进程</span></span><br><span class="line"></span><br><span class="line">docker inspect contains_id <span class="comment"># 显示容器底层信息</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;247d2a88573fdb2893a90a3d35275bfaa2889f7fa450d875456646ed684643d4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2021-04-20T13:06:45.2632089Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Path&quot;</span>: <span class="string">&quot;/bin/sh&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Args&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;-c&quot;</span>,</span><br><span class="line">            <span class="string">&quot;while true;do echo testlog;sleep 1;done&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;State&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Status&quot;</span>: <span class="string">&quot;running&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Running&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;Paused&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Restarting&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OOMKilled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Dead&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Pid&quot;</span>: 72857,</span><br><span class="line">            <span class="string">&quot;ExitCode&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;Error&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StartedAt&quot;</span>: <span class="string">&quot;2021-04-20T13:06:45.5636259Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;FinishedAt&quot;</span>: <span class="string">&quot;0001-01-01T00:00:00Z&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ResolvConfPath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/247d2a88573fdb2893a90a3d35275bfaa2889f7fa450d875456646ed684643d4/resolv.conf&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HostnamePath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/247d2a88573fdb2893a90a3d35275bfaa2889f7fa450d875456646ed684643d4/hostname&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HostsPath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/247d2a88573fdb2893a90a3d35275bfaa2889f7fa450d875456646ed684643d4/hosts&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LogPath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/247d2a88573fdb2893a90a3d35275bfaa2889f7fa450d875456646ed684643d4/247d2a88573fdb2893a90a3d35275bfaa2889f7fa450d875456646ed684643d4-json.log&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;/elastic_newton&quot;</span>,</span><br><span class="line">        <span class="string">&quot;RestartCount&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Platform&quot;</span>: <span class="string">&quot;linux&quot;</span>,</span><br><span class="line">        <span class="string">&quot;MountLabel&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ProcessLabel&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;AppArmorProfile&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ExecIDs&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;HostConfig&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Binds&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;ContainerIDFile&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LogConfig&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Config&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;NetworkMode&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PortBindings&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;RestartPolicy&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;no&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MaximumRetryCount&quot;</span>: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;AutoRemove&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;VolumeDriver&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;VolumesFrom&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CapAdd&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CapDrop&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CgroupnsMode&quot;</span>: <span class="string">&quot;host&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Dns&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;DnsOptions&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;DnsSearch&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;ExtraHosts&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;GroupAdd&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;IpcMode&quot;</span>: <span class="string">&quot;private&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Cgroup&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;OomScoreAdj&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;PidMode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Privileged&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;PublishAllPorts&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;ReadonlyRootfs&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;SecurityOpt&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;UTSMode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UsernsMode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ShmSize&quot;</span>: 67108864,</span><br><span class="line">            <span class="string">&quot;Runtime&quot;</span>: <span class="string">&quot;runc&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ConsoleSize&quot;</span>: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Isolation&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CpuShares&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;Memory&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;NanoCpus&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CgroupParent&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BlkioWeight&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;BlkioWeightDevice&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;BlkioDeviceReadBps&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;BlkioDeviceWriteBps&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;BlkioDeviceReadIOps&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;BlkioDeviceWriteIOps&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CpuPeriod&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpuQuota&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpuRealtimePeriod&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpuRealtimeRuntime&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpusetCpus&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CpusetMems&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Devices&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;DeviceCgroupRules&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;DeviceRequests&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;KernelMemory&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;KernelMemoryTCP&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;MemoryReservation&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;MemorySwap&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;MemorySwappiness&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;OomKillDisable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;PidsLimit&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Ulimits&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CpuCount&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpuPercent&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;IOMaximumIOps&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;IOMaximumBandwidth&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;MaskedPaths&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/proc/asound&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/acpi&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/kcore&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/keys&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/latency_stats&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/timer_list&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/timer_stats&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/sched_debug&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/scsi&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/sys/firmware&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;ReadonlyPaths&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/proc/bus&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/fs&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/irq&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/sys&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/sysrq-trigger&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;GraphDriver&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Data&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;LowerDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/80783254f01fcdde559ac63ff7503d2dc317929d0328fb1c66846f9e519d98df-init/diff:/var/lib/docker/overlay2/548d80e0e272a3497edbc439f2a231886f5e890933f8f804c28080c2ecd64172/diff&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MergedDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/80783254f01fcdde559ac63ff7503d2dc317929d0328fb1c66846f9e519d98df/merged&quot;</span>,</span><br><span class="line">                <span class="string">&quot;UpperDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/80783254f01fcdde559ac63ff7503d2dc317929d0328fb1c66846f9e519d98df/diff&quot;</span>,</span><br><span class="line">                <span class="string">&quot;WorkDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/80783254f01fcdde559ac63ff7503d2dc317929d0328fb1c66846f9e519d98df/work&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Mounts&quot;</span>: [],</span><br><span class="line">        <span class="string">&quot;Config&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;247d2a88573f&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Domainname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;User&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdout&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStderr&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Tty&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OpenStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;StdinOnce&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Env&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Cmd&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/bin/sh&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-c&quot;</span>,</span><br><span class="line">                <span class="string">&quot;while true;do echo testlog;sleep 1;done&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;centos&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Volumes&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;WorkingDir&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Entrypoint&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;OnBuild&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Labels&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;org.label-schema.build-date&quot;</span>: <span class="string">&quot;20201204&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.license&quot;</span>: <span class="string">&quot;GPLv2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.name&quot;</span>: <span class="string">&quot;CentOS Base Image&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.schema-version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.vendor&quot;</span>: <span class="string">&quot;CentOS&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;NetworkSettings&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Bridge&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SandboxID&quot;</span>: <span class="string">&quot;39c3e27c519197bb099217f5f767fd806ccc7705d4afca44e044df7def928c1b&quot;</span>,</span><br><span class="line">            <span class="string">&quot;HairpinMode&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;LinkLocalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LinkLocalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;Ports&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;SandboxKey&quot;</span>: <span class="string">&quot;/var/run/docker/netns/39c3e27c5191&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SecondaryIPAddresses&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;SecondaryIPv6Addresses&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;aa43be83ff078d4c2dbdff62a2e69217ef2e17c0585edfecdcda030dca3aef0f&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">            <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;bridge&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;2fbb6bb1ed5e760a8350664377ea726ffbf35fab4794d45926ab9f9f9bd28d8a&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;aa43be83ff078d4c2dbdff62a2e69217ef2e17c0585edfecdcda030dca3aef0f&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it contain_id /bin/bash <span class="comment"># 进入容器，开启一个新的终端</span></span><br><span class="line">docker attach contain_id <span class="comment"># 进去容器，为当前正在执行的终端</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝文件到主机</span></span><br><span class="line">docker cp container_id:path 目的主机路径 <span class="comment"># sample: docker cp 247d2a88573f:/test.java .</span></span><br></pre></td></tr></table></figure>

<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search nginx <span class="comment"># 搜索镜像</span></span><br><span class="line">docker pull nginx <span class="comment"># 下载镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -d : 后台运行</span></span><br><span class="line"><span class="comment"># --name: 自定义容器名称</span></span><br><span class="line"><span class="comment"># -p: 指定端口号</span></span><br><span class="line">docker run -d --name nginx01 -p 3344:80 nginx </span><br><span class="line">curl localhost:3344 </span><br><span class="line"><span class="comment"># 访问 nginx 测试是否成功启动, 返回页面如下</span></span><br><span class="line"><span class="comment"># &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment"># &lt;html&gt;</span></span><br><span class="line"><span class="comment"># &lt;head&gt;</span></span><br><span class="line"><span class="comment"># &lt;title&gt;Welcome to nginx!&lt;/title&gt;</span></span><br><span class="line"><span class="comment"># &lt;style&gt;</span></span><br><span class="line"><span class="comment">#     body &#123;</span></span><br><span class="line"><span class="comment">#         width: 35em;</span></span><br><span class="line"><span class="comment">#         margin: 0 auto;</span></span><br><span class="line"><span class="comment">#         font-family: Tahoma, Verdana, Arial, sans-serif;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># &lt;/style&gt;</span></span><br><span class="line"><span class="comment"># &lt;/head&gt;</span></span><br><span class="line"><span class="comment"># &lt;body&gt;</span></span><br><span class="line"><span class="comment"># &lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span></span><br><span class="line"><span class="comment"># &lt;p&gt;If you see this page, the nginx web server is successfully installed and</span></span><br><span class="line"><span class="comment"># working. Further configuration is required.&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;p&gt;For online documentation and support please refer to</span></span><br><span class="line"><span class="comment"># &lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span></span><br><span class="line"><span class="comment"># Commercial support is available at</span></span><br><span class="line"><span class="comment"># &lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"># &lt;/body&gt;</span></span><br><span class="line"><span class="comment"># &lt;/html&gt;</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it nginx01 /bin/bash <span class="comment"># 进入容器</span></span><br><span class="line">whereis nginx <span class="comment"># 查看配置</span></span><br></pre></td></tr></table></figure>

<h2 id="Tomcat-练习"><a href="#Tomcat-练习" class="headerlink" title="Tomcat 练习"></a>Tomcat 练习</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --rm: 一般用于测试，用完即删除</span></span><br><span class="line">docker run -it --rm tomcat:9.0</span><br><span class="line"></span><br><span class="line">docker run -d -p 3355:8080 --name tomcat01 tomcat</span><br><span class="line">curl localhost:3355</span><br><span class="line"><span class="comment"># 访问失败</span></span><br><span class="line"><span class="comment"># &lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 – Not Found&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt;body &#123;font-family:Tahoma,Arial,sans-serif;&#125; h1, h2, h3, b &#123;color:white;background-color:#525D76;&#125; h1 &#123;font-size:22px;&#125; h2 &#123;font-size:16px;&#125; h3 &#123;font-size:14px;&#125; p &#123;font-size:12px;&#125; a &#123;color:black;&#125; .line &#123;height:1px;background-color:#525D76;border:none;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 404 – Not Found&lt;/h1&gt;&lt;hr class=&quot;line&quot; /&gt;&lt;p&gt;&lt;b&gt;Type&lt;/b&gt; Status Report&lt;/p&gt;&lt;p&gt;&lt;b&gt;Description&lt;/b&gt; The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;/p&gt;&lt;hr class=&quot;line&quot; /&gt;&lt;h3&gt;Apache Tomcat/9.0.45&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器查看原因</span></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat01 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># ls 发现 webapps 目录下没有文件，官方打镜像的时候把对应的文件放到 webapps.dist 下了。拷贝一下，问题解决</span></span><br><span class="line">cp -r webapps.dist/* webapps</span><br></pre></td></tr></table></figure>

<h2 id="部署-EC-kibana"><a href="#部署-EC-kibana" class="headerlink" title="部署 EC + kibana"></a>部署 EC + kibana</h2><ul>
<li>ES 暴露的接口多</li>
<li>ES 十分耗内存</li>
<li>ES 数据需要备份</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:tag</span></span><br><span class="line"><span class="comment"># --net somenetwork?</span></span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> elasticsearch:7.6.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">docker stats</span><br><span class="line"><span class="comment"># CONTAINER ID   NAME                          CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O         PIDS</span></span><br><span class="line"><span class="comment"># 4d87cd0d4ff6   elasticsearch                 0.78%     1.26GiB / 15.64GiB    8.06%     936B / 0B         0B / 729kB        45</span></span><br><span class="line"><span class="comment"># d3119daeed2c   bizx-docker-dev_kafka_1       1.36%     437.9MiB / 1.562GiB   27.37%    1.43MB / 2.08MB   1.25MB / 32.8kB   80</span></span><br><span class="line"><span class="comment"># 24fe744a20ea   bizx-docker-dev_zookeeper_1   0.31%     101.8MiB / 768MiB     13.26%    2.92MB / 2MB      50.5MB / 0B       50</span></span><br><span class="line"><span class="comment"># f9b12d209a07   hana2_hana2_1                 4.27%     3.714GiB / 15.64GiB   23.75%    823MB / 3.53GB    1.69GB / 1.08GB   291</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送请求测试, 成功</span></span><br><span class="line">curl localhost:9200</span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#   &quot;name&quot; : &quot;4d87cd0d4ff6&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;cluster_name&quot; : &quot;docker-cluster&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;cluster_uuid&quot; : &quot;ojWX85pITJyL7WkVnoKZcA&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;version&quot; : &#123;</span></span><br><span class="line"><span class="comment">#     &quot;number&quot; : &quot;7.6.2&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;build_flavor&quot; : &quot;default&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;build_type&quot; : &quot;docker&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;build_snapshot&quot; : false,</span></span><br><span class="line"><span class="comment">#     &quot;lucene_version&quot; : &quot;8.4.0&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span></span><br><span class="line"><span class="comment">#   &#125;,</span></span><br><span class="line"><span class="comment">#   &quot;tagline&quot; : &quot;You Know, for Search&quot;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 停止服务，修改内存配置 -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; 修改内存配置</span></span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> -e ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx512m&quot;</span> elasticsearch:7.6.2</span><br></pre></td></tr></table></figure>

<h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><ul>
<li>Portainer - 图形化管理工具</li>
<li>Rancher - CI/CD</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 访问 localhost:9000 可见页面</span></span><br><span class="line">docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce</span><br></pre></td></tr></table></figure>

<h2 id="Docker-镜像加载原理"><a href="#Docker-镜像加载原理" class="headerlink" title="Docker 镜像加载原理"></a>Docker 镜像加载原理</h2><p>UnionFS 联合文件系统，分层，轻量级且高性能。</p>
<h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -a: 作者</span></span><br><span class="line"><span class="comment"># -m: commit 信息</span></span><br><span class="line"><span class="comment"># 630bab3ed5c2：container sha</span></span><br><span class="line"><span class="comment"># tomcat02:1.0：镜像名称 + 版本号</span></span><br><span class="line">docker commit -a=<span class="string">&#x27;jzheng&#x27;</span> -m=<span class="string">&#x27;add webapps&#x27;</span> 630bab3ed5c2 tomcat02:1.0</span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># REPOSITORY                                          TAG            IMAGE ID       CREATED         SIZE</span></span><br><span class="line"><span class="comment"># tomcat02                                            1.0            67be5e0517c6   7 seconds ago   672MB</span></span><br><span class="line"><span class="comment"># mysql                                               latest         0627ec6901db   42 hours ago    556MB</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>弹射起步</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Html 快速上路指南</title>
    <url>/hexo/2020/12/05/Html-quick-guide/</url>
    <content><![CDATA[<p>HTML + CSS + JS = 骨 + 肉 + 灵</p>
<p><a href="https://www.bilibili.com/video/BV14J4114768">Pink 前端视频教程</a> 学习笔记</p>
<h2 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h2><p>在 html 文件中 <code>! + tab</code> 自动生成网页骨架</p>
<p>插件：</p>
<ul>
<li>open in browser</li>
<li>auto rename tag</li>
<li>JS-CSS-HTML Formatter</li>
<li>CSS Peek</li>
</ul>
<h2 id="Html-常用标签-p12-60"><a href="#Html-常用标签-p12-60" class="headerlink" title="Html 常用标签 p12-60"></a>Html 常用标签 p12-60</h2><p><code>&lt;!DOCTYPE html&gt;</code> 文档类型声明标签，表明时 html5 格式。</p>
<p><code>&lt;html lang=&quot;en&quot;&gt;</code> 显示语言，只起提示作用，浏览器遇到不同语言会给你翻译提示</p>
<p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code> 字符集</p>
<p><code>&lt;hn&gt;</code> n=1-6 总共支持 6 级标签</p>
<p><code>&lt;p&gt;</code> 段落</p>
<p><code>&lt;br/&gt;</code> 换行，单标签</p>
<p>文本效果：</p>
<ul>
<li><code>&lt;strong&gt;</code>, <code>&lt;b&gt;</code> 加粗</li>
<li><code>&lt;em&gt;</code>, <code>&lt;i&gt;</code> 倾斜</li>
<li><code>del</code>, <code>s</code> 删除线</li>
<li><code>&lt;ins&gt;</code>, <code>&lt;u&gt;</code> 下划线</li>
</ul>
<p><code>&lt;div&gt;</code> 盒子标签，没有语义，div 分割，分区，占一整行</p>
<p> <code>&lt;span&gt;</code> 盒子标签，跨度，跨距</p>
<p> <code>&lt;img src=&#39;&#39; alt=&#39;&#39; title=&#39;&#39; width=&#39;&#39; height=&#39;&#39; border=&#39;边框，一般通过 css 改&#39;/&gt;</code> 图像</p>
<p> <a href='' target='_self/_blank'> 超链接， _blank 新标签页打开</p>
<p> 锚点链接: <a href='#someid'></a> + <link id='someid'></p>
<p> 注释 <!-- something --></p>
<p> 特殊字符：</p>
<table>
<thead>
<tr>
<th align="left">name</th>
<th align="left">value</th>
</tr>
</thead>
<tbody><tr>
<td align="left">空格</td>
<td align="left">&nbsp;</td>
</tr>
<tr>
<td align="left">小于</td>
<td align="left">&lt;</td>
</tr>
<tr>
<td align="left">大于</td>
<td align="left">&gt;</td>
</tr>
</tbody></table>
<p><strong>表格</strong></p>
<p>作用：显示，展示数据，table-&gt;tr-&gt;th/td</p>
<p>属性：align(left/center/right) 对齐；border 边框；cellpadding 单元格和内容之间的距离；cellspacing 单元格之间的距离；width 表宽；</p>
<p>table 可以分成 theader + tbody, theader 包含 tr + th，tbody 包含 tr + td 内容。</p>
<p>合并单元格：rowspan=”合并单元格数” 跨列合并，左侧的为目标单元格， colspan=”合并单元格数” 跨行合并 上面的为目标单元格</p>
<p><strong>列表</strong></p>
<p>作用：布局</p>
<p>分类：无序列表，有序列表，自定义列表</p>
<p>无序：ul + li, ul 下第一级只能包含 li，li 下可以包含任何标签</p>
<p>有序：ol + li</p>
<p>自定义：dl + dt + dd，dl 下只能包含 dt 和 dd, 适用于小标题加说明的情况</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>关注我们<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>微信<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>表单</strong></p>
<p>作用：收集用户信息</p>
<p>组成</p>
<ul>
<li>表单域：<form> 将域范围内的内容提交到后台</li>
<li>提示信息</li>
<li>表单控件(元素)：input/select/textarea</li>
</ul>
<p><code>&lt;input type=&#39;类型&#39;/&gt;</code>, 类型有很多种，text, boolean, button, radio， reset, file, image 等, 还有 name, value, checked 和 maxlength 四个属性</p>
<p>label 标签：绑定页面元素，点击 label 光标会自动聚焦到绑定元素，增加用户体验 – 这个之前一直没注意(～￣▽￣)～ </p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过 label 里面的 for 属性生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;text&quot;</span>&gt;</span> 用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>下拉列表：多选一</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>文本域 textarea: cols, rows</p>
<h2 id="CSS-P60"><a href="#CSS-P60" class="headerlink" title="CSS P60-"></a>CSS P60-</h2><p>css=选择器 + 一条或多条声明, 放在 head 下的 <code>&lt;style/&gt;</code> 下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    p &#123;</span><br><span class="line">        color: red;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>选择器分为 基础选择器 和 复合选择器</p>
<p>基础选择器：由单个选择器组成，包括：标签选择器，类型选择器， id 选择器 和通配符选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/* 标签选择器 */</span></span></span><br><span class="line"><span class="css"><span class="comment">/* 标签名做选择标的 */</span></span></span><br><span class="line">    p &#123;</span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    div &#123;</span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/* 类型选择器, 样式(class)做选择标的 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.red</span> &#123;</span></span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/* id选择器, id 做选择标的 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-id">#pink</span> &#123;</span></span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/* 通配符选择器, 通配符做选择标的 */</span></span></span><br><span class="line">    * &#123;</span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><ul>
<li>font-family: “Microsoft YaHei”;</li>
<li>font-size: 20px;</li>
<li>font-weight: blod; 文字效果，加粗，也可以用数字 blod=700 normal=400, 范围 100-900</li>
<li>font-style: normal/italic; 斜体</li>
</ul>
<p>字体的复合属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line"><span class="css">        <span class="comment">/* font: font-style font-weight font-size/font-height font-family; */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* font-size 和 font-family 必须有，其他可以省略，不然不起作用 */</span></span></span><br><span class="line">        font: italic 700 16px &#x27;Microsoft YaHei&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文本属性-P72-83"><a href="#文本属性-P72-83" class="headerlink" title="文本属性 P72-83"></a>文本属性 P72-83</h3><ul>
<li>color, 表示方式，blue，16进制(#)或者 RGB(RGB(X,X,X))</li>
<li>text-align, 对齐， left, right, center</li>
<li>text-decoration 文本装饰，下划线之类的效果 none(取消超链接的下划线效果), underline, overline, line-through</li>
<li>text-indent: 2em; 段落首行缩进</li>
<li>line-height：26px 行间距, 行间距=上间距+文字高度+下间距</li>
</ul>
<p>测量行高小工具 FSCapture.exe</p>
<h3 id="CSS-引入方式"><a href="#CSS-引入方式" class="headerlink" title="CSS 引入方式"></a>CSS 引入方式</h3><ol>
<li>内部样式表</li>
<li>外部样式表</li>
<li>行内样式表</li>
</ol>
<p>内部样式：放到 header 下的 style tag 下</p>
<p>行内样式： <code>&lt;p style=&quot;color: pink;&quot;&gt;fense&lt;/p&gt;</code></p>
<p>外部样式：</p>
<ol>
<li>新建 .css 文件</li>
<li>使用 <link> 标签引入到 thml <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css_file_path&quot;&gt;</code></li>
</ol>
<h3 id="Emment-语法"><a href="#Emment-语法" class="headerlink" title="Emment 语法"></a>Emment 语法</h3><p>前身时 Zen coding， 使用缩写提高 html/css 编写速度，VSCode 已经内置了</p>
<ol>
<li>标签 + tab 自动生成</li>
<li>tag*n + tab 生成多个</li>
<li>ul&gt;li 生成父子级关系 tag</li>
<li>div+p 兄弟级 tag</li>
<li>p.one 生成 <code>&lt;p class=&quot;one&quot;&gt;</code>, <code>#</code> 生成 id</li>
<li><code>.demo$*5</code> 带序号的 div</li>
<li><code>div&#123;123&#125;</code> -&gt; <code>&lt;div&gt;123&lt;/div&gt;</code></li>
</ol>
<h3 id="CSS-复合选择器"><a href="#CSS-复合选择器" class="headerlink" title="CSS 复合选择器"></a>CSS 复合选择器</h3><p>即基础选择器的组合形式，有后代选择器，子类选择器，并集选择器，伪类选择器等。。。</p>
<p>后代选择器影响所有后代</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*父子级中间加空格*/</span></span></span><br><span class="line">    ol li &#123;</span><br><span class="line"><span class="css">        <span class="comment">/* 后代选择器 */</span></span></span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 后代选择器 */</span></span></span><br><span class="line">        color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子选择器，只对亲儿子起作用(第一层)，其他不起作用, 父子间不用空格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*父子级中间加空格*/</span></span></span><br><span class="line">    ol &gt; li &#123;</span><br><span class="line"><span class="css">        <span class="comment">/* 后代选择器 */</span></span></span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并集选择器，使用都好分割, 用于删选多组数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*父子级中间加空格*/</span></span></span><br><span class="line">    div,</span><br><span class="line">    p &#123;</span><br><span class="line"><span class="css">        <span class="comment">/* 后代选择器 */</span></span></span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>伪类选择器，冒号(:), 比如 :hover, :first-child</p>
<p>链接伪类选择器：</p>
<ol>
<li>a:link 选择所有未被访问的链接</li>
<li>a:visited 选择所有已被访问过的链接</li>
<li>a:hover 选择鼠标指针位于其上的链接</li>
<li>a:active 选择活动链接，鼠标按下未弹起</li>
</ol>
<p>注意点:</p>
<ol>
<li>一定要按照 LVHA 顺序写，不然会胡问题 (Love Hate / LV 包包 hao)</li>
<li>a 需要单独指定样式，直接指定 body 没用</li>
<li>实际使用一般指定 a + a:hover 即可</li>
</ol>
<p>:focus 伪类选择器，选择表单中光标作用的元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*父子级中间加空格*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 后代选择器 */</span></span></span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS-的元素显示模式"><a href="#CSS-的元素显示模式" class="headerlink" title="CSS 的元素显示模式"></a>CSS 的元素显示模式</h3><p>HTML 一般分为块元素, 占一行(比如 div)和行内元素(比如 span)，一行多个</p>
<h4 id="常见块元素"><a href="#常见块元素" class="headerlink" title="常见块元素"></a>常见块元素</h4><p>h1~h6, p, div, ul, ol, li 等</p>
<p>特点：</p>
<ol>
<li>霸道，独占一行</li>
<li>高，宽，外边距以及内边距都可控</li>
<li>宽度默认时容器(父级宽度)的 100%</li>
<li>是一个容器及盒子，里面可以放行内或者块级元素</li>
</ol>
<p>PS: 文字类元素，比如 h, p 种不能再放块级元素</p>
<h4 id="常见行内-内联元素"><a href="#常见行内-内联元素" class="headerlink" title="常见行内/内联元素"></a>常见行内/内联元素</h4><p>a, strong, b, em, i, s, u, span</p>
<p>特点：</p>
<ol>
<li>相邻元素在一行上，一行可以显示多个</li>
<li>高宽直接设置是无效的</li>
<li>默认宽度是它本身内容的宽度</li>
<li>行内元素只能容纳文本或其他行内元素</li>
</ol>
<p>PS: 链接里面不能套链接；特殊情况下链接里面可以放块级元素，但是给 a 转换一下块级模式最安全</p>
<h4 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4><p>img, input, td</p>
<p>特点：</p>
<ol>
<li>一行可以多个 (行内元素特点)</li>
<li>默认宽度是它本身内容的宽度 (行内元素特点)</li>
<li>高度，行高，外边距以及内边距都可以控制 (块级元素特点)</li>
</ol>
<h3 id="元素显示模式转换"><a href="#元素显示模式转换" class="headerlink" title="元素显示模式转换"></a>元素显示模式转换</h3><p>特殊情况下，需要元素模式转换，即一个模式元素需要另一种模式的特性，比如想要增加 <a> 的触发范围。</p>
<p>做法在样式种加入 display:block, 或 display:inline, display: inline-block</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    a &#123;</span><br><span class="line">        width: 150px;</span><br><span class="line">        height: 50px;</span><br><span class="line">        background-color: pink;</span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    div &#123;</span><br><span class="line">        background-color: blue;</span><br><span class="line">        display: inline;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    span &#123;</span><br><span class="line">        width: 150px;</span><br><span class="line">        height: 50px;</span><br><span class="line">        background-color: yellow;</span><br><span class="line">        display: inline-block;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小工具介绍-Snipaste"><a href="#小工具介绍-Snipaste" class="headerlink" title="小工具介绍 Snipaste"></a>小工具介绍 Snipaste</h3><p>微软商城可以直接下载，貌似免费，mac 上类似的是 snappy</p>
<ol>
<li>F1 截图，同时测量大侠，设置箭头，文字等功能</li>
<li>F3 桌面置顶</li>
<li>点击图片 alt 拾取颜色</li>
<li>esc 取消图片显示</li>
<li>alt + c 直接复制拾取的颜色</li>
</ol>
<h3 id="单行文字垂直居中"><a href="#单行文字垂直居中" class="headerlink" title="单行文字垂直居中"></a>单行文字垂直居中</h3><p>行高=上间隙 + 字高 + 下间隙，设置 行高=盒子高度 <code>line-height: 行高</code> 实现居中</p>
<p>行高 &lt; 盒子高度， 偏上<br>行高 &gt; 盒子高度， 偏下</p>
<h3 id="CSS-的背景-P115-126"><a href="#CSS-的背景-P115-126" class="headerlink" title="CSS 的背景 P115-126"></a>CSS 的背景 P115-126</h3><p>背景属性可以给页面元素添加背景样式，比如背景颜色，背景图片，背景平铺，背景图片为止，背景图片固定等。</p>
<p>background-color: transparent | color</p>
<p>background-image: none | url(), 适用于 logo, 装饰性小图片，超大背景图片，优点是便于控制位置</p>
<p>background-repeat: repeat | no-repeat | repeat-x | repeat-y</p>
<p>background-position: x y; <strong>重点</strong>，x, y 可以是像素值，也可以是方位名词(left, center, right)</p>
<p>background-attachment: scroll | fixed 背景图片固定/附着，是否更正页面滚动变化，视差滚动效果</p>
<p>复合写法，直接在 background: 属性1， 属性2 … 没有顺序要求</p>
<h4 id="CSS3-半透明效果"><a href="#CSS3-半透明效果" class="headerlink" title="CSS3 半透明效果"></a>CSS3 半透明效果</h4><p><code>background: rgba(x, x, x, 0.3)</code> 最后一位就是透明度， <code>0.3</code> 可以直接写 <code>.3</code></p>
<h3 id="CSS-的三大特性"><a href="#CSS-的三大特性" class="headerlink" title="CSS 的三大特性"></a>CSS 的三大特性</h3><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><ol>
<li>样式冲突，遵循就近原则，执行离的近的那个</li>
<li>样式不冲突，不层叠</li>
</ol>
<h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>子标签会继承父标签的某些样式，比如文字颜色和字号等</p>
<ul>
<li>恰当的使用继承合一简化代码，降低 CSS 复杂性</li>
<li>子元素可以继承父元素的样式 (text-, font-, line- 和 color)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line"><span class="css">        <span class="comment">/*文字大小/行高 行高可以指定像素，也可以是字号的倍数，这里是 1.5 倍*/</span></span></span><br><span class="line">        font: 12px/1.5 &#x27;Microsoft YaHei&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ol>
<li>选择器相同，则执行层叠性</li>
<li>不同，则根据权重来</li>
</ol>
<p>权重排行：</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">权重</th>
</tr>
</thead>
<tbody><tr>
<td align="left">继承或者 *</td>
<td align="left">0,0,0,0</td>
</tr>
<tr>
<td align="left">元素选择器</td>
<td align="left">0,0,0,1</td>
</tr>
<tr>
<td align="left">类选择器，伪类选择器</td>
<td align="left">0,0,1,0</td>
</tr>
<tr>
<td align="left">id 选择器</td>
<td align="left">0,1,0,0</td>
</tr>
<tr>
<td align="left">行内样式 style=””</td>
<td align="left">1,0,0,0</td>
</tr>
<tr>
<td align="left">!important 重要的</td>
<td align="left">无穷大</td>
</tr>
</tbody></table>
<p>复合选择器会有权重叠加 <code>.nav li</code> = 0010 + 0001 = 0011</p>
<h2 id="盒子模型-P136"><a href="#盒子模型-P136" class="headerlink" title="盒子模型 P136"></a>盒子模型 P136</h2><p>网页布局本质</p>
<ol>
<li>准备好页面元素，基本都是盒子</li>
<li>CSS 设置盒子样式，摆放到相应位置</li>
<li>往盒子里装内容</li>
</ol>
<p>组成：</p>
<ol>
<li>边框 border</li>
<li>内容 content</li>
<li>内边距 padding</li>
<li>外边距 margin</li>
</ol>
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><p>三部分：边框粗细，样式 和颜色</p>
<p>border-width, border-style, border-color 可以写成复合形式： <code>border: 5px solid red;</code></p>
<p>单条边框设置：border-top/bottom/left/right</p>
<p>border-collapse: collapse; 表格边框线合并</p>
<p>边框会影响盒子实际大小</p>
<h3 id="内边距-padding"><a href="#内边距-padding" class="headerlink" title="内边距 padding"></a>内边距 padding</h3><p>padding-left/top/right/bottom</p>
<p>复合写法：</p>
<table>
<thead>
<tr>
<th align="left">写法</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">padding: 5px</td>
<td align="left">上下左右都是 5px</td>
</tr>
<tr>
<td align="left">padding: 5px 10px</td>
<td align="left">上下 5px, 左右 10 px</td>
</tr>
<tr>
<td align="left">padding: 5px 10px 20px</td>
<td align="left">上，左右，下</td>
</tr>
<tr>
<td align="left">padding: 5px 10px 20px 30px</td>
<td align="left">上，右，下，左 顺时针</td>
</tr>
</tbody></table>
<p>padding 也撑大盒子</p>
<h3 id="外边距-margin"><a href="#外边距-margin" class="headerlink" title="外边距 margin"></a>外边距 margin</h3><p>控制盒子与盒子之间的距离</p>
<p>margin-left/top/right/bottom</p>
<p><strong>块级</strong>盒子实现水平居中：</p>
<ol>
<li>盒子必须有宽度</li>
<li><code>margin: 0 auto;</code></li>
</ol>
<p><strong>行内</strong>元素实现水平居中：给父级元素添加 <code>text-align: center;</code></p>
<p>外边距合并-嵌套快元素塌陷，解决方案：</p>
<ol>
<li>可以为父元素定义上边框</li>
<li>可以为父元素定义上边距</li>
<li>可以为父元素添加 overflow: hidden 属性</li>
</ol>
<p>不同的网页元素默认都会带有不同的 内外边距，而且不同 browser 值不同，清除如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/*一般都会先写这一句*/</span></span></span><br><span class="line">    * &#123;</span><br><span class="line">       margin: 0;</span><br><span class="line">       padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>行内元素尽量只设置左右的内外边距</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><code>li &#123; list-style: none;&#125;</code> 去掉 list 的原点</p>
<h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><p>border-radius: npx 或 百分比;</p>
<h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><p>box-shadow: h-shadow v-shadow blur spread color inset; rgba(0,0,0,.3)</p>
<h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><p>text-shadow: h-shadow v-shadow blur color;</p>
<h2 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动 float"></a>浮动 float</h2><p>传统三种布局方式</p>
<ol>
<li>标准流 - 默认方式</li>
<li>浮动</li>
<li>定位</li>
</ol>
<p>浮动可以改变元素的默认排列方式</p>
<p>网页布局第一准则：多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</p>
<p><strong>float</strong>属性用于创建浮动框，将其移动到一边，知道左边缘或右边缘触及包含块或另一个浮动框的边缘。</p>
<h3 id="浮动的特性"><a href="#浮动的特性" class="headerlink" title="浮动的特性"></a>浮动的特性</h3><p>设置浮动的元素最重要的特性：</p>
<ol>
<li>脱离标准普通流的控制，移动到指定位置，俗称 脱标</li>
<li>浮动的盒子不在保留原先的位置</li>
</ol>
<p>多个盒子设置浮动，则它们会按照属性值一行内显示并且顶端对齐排列</p>
<p>PS: 浮动元素相互没有间隙，父级宽度装不下，另起一行对齐</p>
<p>浮动元素有行内块特性</p>
<p>一浮全浮，如果一个父元素下有一个加了浮动，一般其他所有多要加浮动属性</p>
<p>浮动指挥影响浮动盒子<strong>后面</strong>的标准流，前面的不会受影响</p>
<h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>为什么要清除浮动：</p>
<p>父盒子在很多情况下不方便给高度，但是盒子浮动之后就不占有位置，最后父级盒子高度为 0 时就会影响像下面的标准流盒子。</p>
<p>本质：清除元素浮动造成的影响</p>
<p>选择器 {clear: 属性值(left/right/both);} , 实际种都用 both</p>
<p>策略：闭合浮动，只让浮动在父盒子内部影响，不影响父盒子外部的其他盒子</p>
<p>方法：</p>
<ol>
<li>额外标签法，也称为隔墙法，W3C 推荐做法</li>
<li>父级添加 overflow 属性</li>
<li>父级添加 after 伪属性</li>
<li>腹肌添加双伪属性</li>
</ol>
<p>额外标签法：</p>
<p>在最后一个浮动子元素后面添加一个额外标签，添加清除浮动样式，实际工作可能会遇到但是不常用</p>
<ul>
<li>优点：通俗易懂，书写方便</li>
<li>缺点：添加许多无意义的标签，结构差</li>
</ul>
<p>示例: <code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code></p>
<p>PS: 最后的这个元素必须是块级元素，行内元素不行</p>
<p>父元素 overflow:</p>
<p><code>.body &#123;overflow: hidden;&#125;</code></p>
<p>属性可选项： hidden, auto 和 scroll</p>
<ul>
<li>优点： 代码简洁</li>
<li>缺点：无法显示溢出部分</li>
</ul>
<p>:after 伪元素</p>
<p>声明属性并在父盒子内添加，原理和隔墙法一致，只不过使用 CSS 实现的</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="comment">/* 内容为“.”就是一个英文的句号而已。也可以不写 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    <span class="comment">/* 加入的这个元素转换为块级元素 */</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="comment">/* 清除左右两边浮动 */</span></span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="comment">/* -可见度设为隐藏。注意它和display:none;是有区别的。仍然占据空间，只是看不到而已 */</span></span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    <span class="comment">/* 兼容 IE 6， 7 */</span></span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>优点：没有增加标签，结构接单</li>
<li>缺点：代码多</li>
</ul>
<p>双伪元素清除浮动</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 声明清除浮动的样式 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ie6 7 专门清除浮动的样式*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">*zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PS-切图"><a href="#PS-切图" class="headerlink" title="PS 切图"></a>PS 切图</h2><ul>
<li>jpg: 色彩信息保留较好，高清，颜色多。产品类图片经常用 jpg 格式</li>
<li>gif： 256 色，动态</li>
<li>png 可以保存透明背景，切透明背景图片</li>
<li>PSD，PS 的图片格式</li>
</ul>
<p>cutterman 切图神器</p>
<h3 id="CSS-书写规范"><a href="#CSS-书写规范" class="headerlink" title="CSS 书写规范"></a>CSS 书写规范</h3><ol>
<li>布局定位属性： display/position/float/clear/visibliity/overflow, display 第一个写，关系到模式</li>
<li>自身属性：width/height/margin/padding/border/background</li>
<li>文本属性： color/font/text-decoration/text-align/vertical-align/white-space/break-word</li>
<li>其他属性(CSS3)： context/cursor/border-radius/box-shadow/text-shadow/background:linear-gradient…</li>
</ol>
<h3 id="布局思路"><a href="#布局思路" class="headerlink" title="布局思路"></a>布局思路</h3><ol>
<li>必须确定版面的版心(可视区)，我们测量可得知</li>
<li>分析页面中的行模块，以及每个行模块种的列模块</li>
<li>一行中的列模块经常浮动布局，先确定每个列的大小之后，确定列的位置，页面布局第二准则</li>
<li>制作 html, 我们还是遵循，先有结构，后又样式的原则。结构永远最重要。</li>
</ol>
<p>实际开发中，我们不会直接用链接 a 而是用 li 包含链接(li+a)的做法。主要是针对 SEO 搜索的优化。</p>
<p>练习先跳过了，后面要用在看</p>
<h2 id="定位-P221"><a href="#定位-P221" class="headerlink" title="定位 P221"></a>定位 P221</h2><p>自由的定位，标准流和浮动做不出这种效果</p>
<p>定位 = 定位模式(position) + 边偏移</p>
<p>position = static/relative/absolute/fixed</p>
<p>边偏移 = top/bottom/left/right</p>
<p>静态定位，即默认形式，了解即可 <code>选择器 &#123;position: static;&#125;</code></p>
<p>相对定位：</p>
<ul>
<li>自恋型，移动时参照原来的位置</li>
<li>相对于浮动，原来的位置继续保留，不脱标</li>
<li><code>选择器 &#123;position: relative;&#125;</code></li>
</ul>
<p>绝对定位 absolute：</p>
<p>相对与祖先元素来说的，拼爹型 <code>选择器 &#123;position: absolute;&#125;</code></p>
<ol>
<li>如果没有祖先元素或祖先元素没有定位，则以 document 为标准</li>
<li>如果祖先有定位(相对，绝对，固定定位)，则以最近一级有定位祖先元素为参考点移动位置</li>
<li>绝对定位会脱标，不占有原来位置</li>
</ol>
<p>子绝父相</p>
<p>固定定位 fixed：</p>
<p>元素可以停在浏览器的可视区域的固定位置，滚动不影响  <code>选择器 &#123;position: fixed;&#125;</code>, 不占用原先的位置</p>
<p>固定定位小技巧：固定在版心右侧位置</p>
<ol>
<li>让固定定位的盒子 left: 50% 走到可视区域的一般位置</li>
<li>让固定定位盒子 margin-left: 版心宽度一般距离</li>
</ol>
<p>就可以实现该效果</p>
<p>粘性定位 sticky:</p>
<ol>
<li>以可是窗口为参照点移动元素</li>
<li>占有原先位置</li>
<li>必须设置 top, bottom, left, right 其中一个才会生效</li>
</ol>
<p>IE 不支持</p>
<h3 id="定位叠放次序-z-index"><a href="#定位叠放次序-z-index" class="headerlink" title="定位叠放次序 z-index"></a>定位叠放次序 z-index</h3><p><code>选择器 &#123;z-index: 1;&#125;</code></p>
<p>数值可以是正整数，负整数或0，默认是 auto, 数值越大，盒子越靠上</p>
<p>只有定位的盒子才有 z-index 属性</p>
<h3 id="绝对定位居中"><a href="#绝对定位居中" class="headerlink" title="绝对定位居中"></a>绝对定位居中</h3><p>left: 50% + margin-left: -盒子本身宽度px;</p>
<h3 id="定位拓展"><a href="#定位拓展" class="headerlink" title="定位拓展"></a>定位拓展</h3><p>绝对定位和固定定位也和浮动类似</p>
<ol>
<li>行内元素添加绝对定位或者固定定位，可以直接设置宽度和高度</li>
<li>块级元素添加绝对或者固定定位，如果不给宽度或高度，默认大小是内容大小</li>
</ol>
<p>脱标的元素不会触发外边距合并</p>
<p>浮动元素只会压住标准流的盒子，不会压住文字，定位会压住文字。</p>
<p>浮动最初产生的动机时用来做环绕效果得，所以不会压住文字</p>
]]></content>
      <categories>
        <category>弹射起步</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis 快速上路笔记</title>
    <url>/hexo/2020/09/16/Mybatis-Quick-Start/</url>
    <content><![CDATA[<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
<p>解释成白话：这是一个操作数据库的框架，就是把操作简化了，你之前用 JDBC 时的那些配置什么还是少不了只不过用起来更好使罢了。比如使用数据库你得配联接吧，得配驱动把，得写 SQL 把，mybatis 也需要你做这个，只不过人家帮你把这些事情总结出了一个套路，你用这个套路就可以少很多冗余代码，但是也增加了你自己学习这个框架的成本，少了自由度。当然就大部分人的编程水平，肯定是收益大于损失的 ╮(￣▽￣””)╭</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1NE411Q7Nx">视频教程</a></li>
<li><a href="https://github.com/jack-zheng/mybatis-note">练习项目地址</a></li>
<li>练习版本：mybatis 3.5.5</li>
</ul>
<h2 id="原型-JDBC-操作数据库"><a href="#原型-JDBC-操作数据库" class="headerlink" title="原型 JDBC 操作数据库"></a>原型 JDBC 操作数据库</h2><ol>
<li>导入 mysql 包</li>
<li>编写实体类</li>
<li>编写驱动类</li>
<li>编写 Dao 类</li>
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">&quot;12345678&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection conn = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//1.加载驱动程序</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获得数据库的连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DriverManager.getConnection(URL, NAME, PASSWORD);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//3.通过数据库的连接操作数据库，实现增删改查</span></span><br><span class="line">        Statement stmt = conn.createStatement();</span><br><span class="line">        ResultSet rs = stmt.executeQuery(<span class="string">&quot;select id, name, pwd from user&quot;</span>);<span class="comment">//选择import java.sql.ResultSet;</span></span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;<span class="comment">//如果对象中有数据，就会循环打印出来</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Result: [&quot;</span> + rs.getInt(<span class="string">&quot;id&quot;</span>) + <span class="string">&quot;, &quot;</span> + rs.getString(<span class="string">&quot;name&quot;</span>) + <span class="string">&quot;, &quot;</span> + rs.getString(<span class="string">&quot;pwd&quot;</span>) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Connection connection = DBUtils.getConnection();</span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        ResultSet rs = statement.executeQuery(<span class="string">&quot;select id, name, pwd from user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            User tmp = <span class="keyword">new</span> User();</span><br><span class="line">            tmp.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            tmp.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            tmp.setPwd(rs.getString(<span class="string">&quot;pwd&quot;</span>));</span><br><span class="line">            users.add(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        UserDao dao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        List&lt;User&gt; users = dao.getUsers();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mybatis 为我们做的只不过是把上面的这些步骤简化了，通过配置文件管理连接信息，通过 factory， SqlSession 等来管理 SQL 执行等。按照这样的思路去理解记忆应该会更加有效率。</p>
<h2 id="搭建环境-mybatis-01-setup"><a href="#搭建环境-mybatis-01-setup" class="headerlink" title="搭建环境 mybatis-01-setup"></a>搭建环境 mybatis-01-setup</h2><p>对照官方文档的入门篇</p>
<p>创建测试表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建测试数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mybatis;</span><br><span class="line"><span class="keyword">USE</span> mybatis;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建测试表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">pwd <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (<span class="keyword">id</span>, <span class="keyword">name</span>, pwd) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;123&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;jack02&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="最简项目树"><a href="#最简项目树" class="headerlink" title="最简项目树"></a>最简项目树</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── java</span><br><span class="line">│   └── com</span><br><span class="line">│       └── jzheng</span><br><span class="line">│           ├── dao</span><br><span class="line">│           │   ├── UserMapper.java</span><br><span class="line">│           │   └── UserMapper.xml</span><br><span class="line">│           └── pojo</span><br><span class="line">│               └── User.java</span><br><span class="line">└── resources</span><br><span class="line">    └── mybatis-config.xml</span><br></pre></td></tr></table></figure>

<h3 id="新建测试项目"><a href="#新建测试项目" class="headerlink" title="新建测试项目"></a>新建测试项目</h3><ol>
<li>新建 maven 项目</li>
<li>删除 src 目录，通过 module 的方式管理，条理更清楚</li>
<li>配置依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jzheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-note<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mybatis-01-setup<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- java 8 compiler 配置，和下面的 build plugin 配合使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mybatis 基础包，包括 DB 驱动，连接，测试的 jar 包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在 build 的时候将工程中的配置文件也一并 copy 到编译文件中，即 target 文件夹下 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置 idea 链接本地 mysql 报错 <code>Server returns invalid timezone. Go to &#39;Advanced&#39; tab and set &#39;serverTimezone&#39; property manually.</code></p>
<p>时区错误，MySQL默认的时区是UTC时区，比北京时间晚8个小时。在mysql的命令模式下，输入 <code>set global time_zone=&#39;+8:00&#39;;</code> 即可</p>
<p>连接后点击扳手图标可以拿到 url 信息</p>
<p>mybatis 核心配置文件，这个文件中配置 DB 连接，驱动等信息，算是 mybatis 的入口配置文件了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTime=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/jzheng/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成实体类 pojo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 省略构造函数和 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义 Dao 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// CURD user</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// First sample</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置 Mapper xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.jzheng.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.jzheng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">        delete from mybatis.user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.jzheng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update mybatis.user set name=#&#123;name&#125;, pwd=#&#123;pwd&#125; where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.jzheng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询所有用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.jzheng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_official_sample</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.getUsers();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_util</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        List&lt;User&gt; users = sqlSession.getMapper(UserMapper.class).getUsers();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">5</span>, <span class="string">&quot;t0928&quot;</span>, <span class="string">&quot;pwd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ret = sqlSession.getMapper(UserMapper.class).addUser(user);</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ret = sqlSession.getMapper(UserMapper.class).deleteUser(<span class="number">5</span>);</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;change&quot;</span>, <span class="string">&quot;pwdchange&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> ret = sqlSession.getMapper(UserMapper.class).updateUser(user);</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_getUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        User ret = sqlSession.getMapper(UserMapper.class).getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常见错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Type interface com.jzheng.dao.UserDao is not known to the MapperRegistry.</span><br><span class="line"></span><br><span class="line">-- 核心配置文件没有配置 mapper 路径</span><br><span class="line"></span><br><span class="line">Caused by: java.io.IOException: Could not find resource com/jzheng/dao/UserMapper.xml</span><br><span class="line">    at org.apache.ibatis.io.Resources.getResourceAsStream(Resources.java:114)</span><br><span class="line">    at org.apache.ibatis.io.Resources.getResourceAsStream(Resources.java:100)</span><br><span class="line">    at org.apache.ibatis.builder.xml.XMLConfigBuilder.mapperElement(XMLConfigBuilder.java:372)</span><br><span class="line">    at org.apache.ibatis.builder.xml.XMLConfigBuilder.parseConfiguration(XMLConfigBuilder.java:119)</span><br><span class="line">    ... 27 more</span><br><span class="line"></span><br><span class="line">-- maven 约定大于配置，默认指挥将 resources 下面的 xml 导出到 target, 如果需要将 java 下的配置文件到处需要再 pom.xml 下的 build tag 里加点配置</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">            &lt;/includes&gt;</span><br><span class="line">        &lt;/resource&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">            &lt;/includes&gt;</span><br><span class="line">            &lt;filtering&gt;<span class="literal">true</span>&lt;/filtering&gt;</span><br><span class="line">        &lt;/resource&gt;</span><br><span class="line">    &lt;/resources&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line">java.security.cert.CertPathValidatorException: Path does not chain with any of the trust anchors</span><br><span class="line"></span><br><span class="line">-- 链接配置问题，可以把 useSSL 改为 <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>[Attention]:</strong></p>
<ol>
<li>当进行增删改操作时需调用 commit 方法将修改提交才能生效</li>
<li>namespace 中的包名要和 Dao/mapper 保持一致</li>
</ol>
<h3 id="万能-map"><a href="#万能-map" class="headerlink" title="万能 map"></a>万能 map</h3><p>如果实体类的属性过多，可以考虑使用 map 传递参数, 这是一种可定制性很高的用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Mapper interface</span></span><br><span class="line"><span class="function">User <span class="title">getUserByMap</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过 map 查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.jzheng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_getUserByMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    User ret = sqlSession.getMapper(UserMapper.class).getUserByMap(map);</span><br><span class="line">    System.out.println(ret);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分页功能-limit"><a href="#分页功能-limit" class="headerlink" title="分页功能 limit"></a>分页功能 limit</h3><p>通过 map 来实现分页功能</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">limit</span> startIndex, <span class="keyword">size</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Limit query</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsersWithLimit</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsersWithLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.jzheng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user limit #&#123;startIndex&#125;, #&#123;pageSize&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="常用变量的作用域"><a href="#常用变量的作用域" class="headerlink" title="常用变量的作用域"></a>常用变量的作用域</h3><p><strong>SqlSessionFactoryBuilder:</strong> 一用完就可以丢了，局部变量</p>
<p><strong>SqlSessionFactory:</strong> 应用起了就要应该存在，所以应用作用域(Application)最合适。而且只需要一份，使用单列或者静态单列模式</p>
<p><strong>SqlSession:</strong> 线程不安全，不能共享。最佳作用域是请求或方法层。响应结束后，一定要关闭，所以最佳时间是把它放到 finally 代码块中，或者用自动关闭资源的 try block。</p>
<h3 id="疑问记录"><a href="#疑问记录" class="headerlink" title="疑问记录"></a>疑问记录</h3><ol>
<li>项目中我即使把 pojo 的构造函数和 getter/setter 都注视掉了，值还是被塞进去了，和 spring 不一样，他是怎么实现的？</li>
<li>核心配置文件中的 mapper setting，resource tag 不支持匹配符？类似 <code>com/jzheng/mapper/*.xml</code> 并不能生效</li>
<li>mapper.xml 中 resultType 怎么简写，每次都全路径很费事</li>
<li>mybatis 中是不支持方法重载的</li>
</ol>
<h3 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h3><ol>
<li>mybatis 会通过 DefaultResultSetHandler 处理结果集，applyAutomaticMappings 就是进行映射的地方，这个方法下面会通过反射对 field 进行赋值，并没有调用 set 方法，别和 spring 搞混了。</li>
<li>TBD</li>
<li>参见 配置 -&gt; typeAlias</li>
</ol>
<h2 id="Lombok-偷懒神器"><a href="#Lombok-偷懒神器" class="headerlink" title="Lombok 偷懒神器"></a>Lombok 偷懒神器</h2><p>Lombok 可以省去你很多冗余代码，在测试项目的时候很好用。是否使用看个人，但是就个人小项目来说我还是很愿意使用的。</p>
<ol>
<li>Idea 安装 lombok 插件</li>
<li>安装依赖的 jar 包</li>
<li>在 pojo 类中添加注解使用</li>
</ol>
<p>调试技巧：在 pojo 上添加注解后，你可以在 idea 的 Structure tab 里看到新生产的方法</p>
<h2 id="配置解析-mybatis-02-configuration"><a href="#配置解析-mybatis-02-configuration" class="headerlink" title="配置解析 mybatis-02-configuration"></a>配置解析 mybatis-02-configuration</h2><p>对应 配置 章节</p>
<p>核心配置文件：mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure>

<h3 id="environments-环境变量"><a href="#environments-环境变量" class="headerlink" title="environments 环境变量"></a>environments 环境变量</h3><p>尽管可以配置多个环境，但每个 SqlSessionFactory 实例<strong>只能选择一种</strong>环境。如果想连接两个数据库就需要创建两个 SqlSessionFactory 实例。</p>
<p><strong>事务管理器(transactionManager)</strong>有 JDBC 和 MANAGED 两种，默认使用 JDBC，另一种几乎很少用，权作了解。</p>
<p><strong>数据源(dataSource)</strong>用来配置数据库连接对象的资源，有 [UNPOOLED|POOLED|JNDI] 三种。JNDI 是为了支持 EJB 应用，现在应该已经过时了。</p>
<p>DB Pool 的常见实现方式：jdbc，c3p0, dbcp</p>
<h3 id="properties-属性"><a href="#properties-属性" class="headerlink" title="properties 属性"></a>properties 属性</h3><p>引用配置文件，可以和 <code>.properties</code> 文件交互</p>
<p>文件目录如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">resources</span><br><span class="line">├── db.properties</span><br><span class="line">└── mybatis-config.xml</span><br></pre></td></tr></table></figure>

<p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTime=UTC</span></span><br></pre></td></tr></table></figure>

<p>mybatis-config 配置如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- priority rank: parameter &gt; properties file &gt; property tab --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tmp_url&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;uname&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12345678&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/jzheng/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>xml 中的 properties tag + resource 属性可以将配置文件加载进来。另外还有一种属性配置方式是直接在构建 session factory 或者 factory builder 的时候通过参数的形式传入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sqlSessionFactoryBuilder.build(reader, props);</span><br><span class="line"><span class="comment">// ... or ...</span></span><br><span class="line"><span class="keyword">new</span> SqlSessionFactoryBuilder.build(reader, environment, props);</span><br></pre></td></tr></table></figure>

<p>三种属性添加方式优先级：parameter &gt; properties 文件 &gt; property 标签</p>
<h3 id="typeAlias-类型别名"><a href="#typeAlias-类型别名" class="headerlink" title="typeAlias 类型别名"></a>typeAlias 类型别名</h3><p>设置短的名字，减少类完全限定名的冗余</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.jzheng.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.jzheng.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以在实体类上添加 Alias 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>三种添加别名的方式 typeAliases+typeAlias, typeAliases+package 和 类名+@Alias。想要使用缩写必须在配置文件中加上 typeAliases 的 tag 直接在类上使用注解是不会生效的。</p>
<p>typeAliases 使用时，是忽略大小写的，官方提倡使用首字母小写的命名方式。一旦类傻上加了注解，则<strong>严格</strong>匹配类注解</p>
<h3 id="setting-设置"><a href="#setting-设置" class="headerlink" title="setting 设置"></a>setting 设置</h3><p>比较常用的设置为：</p>
<ul>
<li>cacheEnabled：开启缓存配置</li>
<li>logImpl：开启日志配置</li>
</ul>
<h3 id="mapper-映射器"><a href="#mapper-映射器" class="headerlink" title="mapper 映射器"></a>mapper 映射器</h3><p>映射器用来告诉 mybatis 到哪里去找到映射文件</p>
<p>方式一：资源文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/jzheng/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式二：使用 class 绑定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.jzheng.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>限制：</p>
<ol>
<li>接口和 mapper 必须重名</li>
<li>接口和 mapper 必须要同意路径下</li>
</ol>
<p>方式三：包扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.jzheng.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>缺陷也是要在同一路径下</p>
<img src="/hexo/2020/09/16/Mybatis-Quick-Start/SessionFactory_Session.PNG" class="" title="Factory_Session 关系图">

<p>每个 Mapper 代表一个具体的业务，比如 UserMapper。</p>
<h3 id="解决属性名和字段名字不一样的问题"><a href="#解决属性名和字段名字不一样的问题" class="headerlink" title="解决属性名和字段名字不一样的问题"></a>解决属性名和字段名字不一样的问题</h3><p>将 User 的 pwd 改为 password, 和 DB 产生歧义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决方案01, 在 Sql 中使用 as 关键字重新指定 column name 为 property name(pwd as password)。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select id, name, pwd as password from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解决方案02, 使用 resultMap 映射结果集</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column: db 字段， property: 实体类属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ResultMap 的设计思想是，对于简单的语句根本不需要配置显示的结果集映射，对于复杂的语句只需要描述他们的关系就行了。</p>
<p>上面的方案还可以将 id, name 的描述简化掉，框架会帮你处理，只保留不一致的即可</p>
<h3 id="疑问记录-1"><a href="#疑问记录-1" class="headerlink" title="疑问记录"></a>疑问记录</h3><ol>
<li>在测试属性和数据库名字不一样的案例的时候发现，就算不一样，但是如果有构造函数的话，还是会被赋值，但是顺序会被强制指定，如果我构造为 User(id,password) 则 User 的 name 会被赋值成 pwd, 应该和底层实现有关系</li>
</ol>
<h2 id="日志-mybatis-03-logging"><a href="#日志-mybatis-03-logging" class="headerlink" title="日志 mybatis-03-logging"></a>日志 mybatis-03-logging</h2><p>支持的 log framework 类型</p>
<ul>
<li>SLF4J [Y]</li>
<li>LOG4J </li>
<li>LOG4J2 [Y]</li>
<li>JDK_LOGGING</li>
<li>COMMONS_LOGGING</li>
<li>STDOUT_LOGGING [Y]</li>
<li>NO_LOGGING</li>
</ul>
<p>STDOUT_LOGGING 是自带的 log 包，直接 enable 就能使用，使能后可以在 log 中看到运行的 SQL。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 477376212.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@1c742ed4]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id = ?; </span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, jack, 123</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">User&#123;id=1, name=&#x27;jack&#x27;, password=&#x27;123&#x27;&#125;</span><br><span class="line">Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@1c742ed4]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@1c742ed4]</span><br><span class="line">Returned connection 477376212 to pool.</span><br></pre></td></tr></table></figure>

<h3 id="开启-log4j-支持"><a href="#开启-log4j-支持" class="headerlink" title="开启 log4j 支持"></a>开启 log4j 支持</h3><p>log4j 是一个比较常用的日志框架，有很多功能，比如定制格式，指定存到文件等</p>
<ol>
<li>导包</li>
<li>添加 log4j.properties</li>
<li>添加配置到核心配置文件</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局日志配置</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/mybatis-03-logging.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>

<p>使能配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="基于注解开发"><a href="#基于注解开发" class="headerlink" title="基于注解开发"></a>基于注解开发</h2><p>基于注解开发，在应对简单的需求时还是很高效的，但是不能处理复杂的 SQL。</p>
<p>面向接口编程：</p>
<ul>
<li>接口定义和实现分离</li>
<li>反映出设计人员对系统的抽象理解</li>
</ul>
<p>接口有两类：一类是对一个个体的抽象，可以对应为一个抽象个体，另一类是对一个个体的某一方面抽象，即形成一个抽象面</p>
<p>个体可能有多个抽象面，抽象提与抽象面是有区别的</p>
<ol>
<li>在接口方法上添加注解</li>
<li>在核心配置文件中添加配置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.jzheng.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PS: 注解和 xml 中对同一个接口只能有一种实现，如果重复实现，会抛异常</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Caused by: java.lang.IllegalArgumentException: Mapped Statements collection already contains value <span class="keyword">for</span> com.jzheng.mapper.UserMapper.getUserById. please check com/jzheng/mapper/UserMapper.xml and com/jzheng/mapper/UserMapper.java (best guess)</span><br></pre></td></tr></table></figure>

<p>注解模式的实现<strong>机制</strong>：反射 + 动态代理</p>
<p>注解和配置文件是可以共存的，只要命名相同，并且实现方法没有冲突就行。</p>
<h3 id="注解版-CRUD"><a href="#注解版-CRUD" class="headerlink" title="注解版 CRUD"></a>注解版 CRUD</h3><p>工具类自动提交事务可以通过 Utils 类中，指定参数实现。注解版的 CRUD 基本上和 xml 版本的一样，只不过在注解版中，他的参数类型通过 @Param 指定。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法存在多个参数，所有参数前面必须加上 @Param</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当参数是对象时，直接传入即可，保证属性名一致</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user (id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set name=#&#123;name&#125;, pwd=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于 @Param 注解</p>
<ul>
<li>基本类型 + String 类型需要加</li>
<li>引用类型不需要</li>
<li>如果只有一个基本类型，可以不加，但还是建议加上</li>
<li>Sql 中引用的属性名和 Param 中的名字保持一致</li>
</ul>
<p>‘#’ 前缀可以防注入，’$’ 不行</p>
<h2 id="Mybatis-执行流程解析"><a href="#Mybatis-执行流程解析" class="headerlink" title="Mybatis 执行流程解析"></a>Mybatis 执行流程解析</h2><ol>
<li>Resources 获取加载全局配置文件</li>
<li>实例化 SqlSessionFactoryBuilder 构造器</li>
<li>解析配置文件流 XMLConfigBulder</li>
<li>Configuration 所有的配置信息</li>
<li>SqlSessionFactory 实例化</li>
<li>Transaction 事务管理器</li>
<li>创建 executor 执行器</li>
<li>创建 SQLSession</li>
<li>实现 CRUD</li>
<li>查看是否成功</li>
</ol>
<h2 id="高级结果映射"><a href="#高级结果映射" class="headerlink" title="高级结果映射"></a>高级结果映射</h2><p>多对一 - 关联 - association</p>
<p>一对多 - 集合 - collection</p>
<p>创建测试表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`teacher`</span> (</span><br><span class="line">                           <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">                           <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">                           PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(<span class="string">`id`</span>, <span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;秦老师&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">                           <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">                           <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">                           <span class="string">`tid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">                           PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">                           <span class="keyword">KEY</span> <span class="string">`fktid`</span> (<span class="string">`tid`</span>),</span><br><span class="line">                           <span class="keyword">CONSTRAINT</span> <span class="string">`fktid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`tid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`teacher`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;小张&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;小李&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;小王&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>测试环境搭建</p>
<ol>
<li>新建表，准备测试数据</li>
<li>新建 teacher/student 实体类</li>
<li>创建 mapper 接口</li>
<li>创建 mapper xml 文件</li>
<li>核心配置类注册接口或 xml</li>
<li>测试查询</li>
</ol>
<h3 id="多对一-mybatis-05-resultmap"><a href="#多对一-mybatis-05-resultmap" class="headerlink" title="多对一 mybatis-05-resultmap"></a>多对一 mybatis-05-resultmap</h3><p>在这里采用多个学生对应一个老师的情况作为案例，为了更好的面向对象 Student pojo 需要做一些修改，我们把 teach id 用对象来代替</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们想要实现的效果其实就是子查询 <code>SELECT st.id, st.name, te.name as tname from student st, teacher te where st.tid = te.id;</code></p>
<p>关键点：使用 <strong>association</strong> tag 作为连接键</p>
<h4 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h4><ol>
<li>直接写查询所有学生信息的语句，结果集自定义</li>
<li>根据自定义的结果集，将 teacher 对象和 tid 绑定</li>
<li>定义根据 tid 查询 teacher 的语句</li>
<li>Mybatis 会自动将查询到的 teacher 对象整合到学生的查询结果中</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    select * from student;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- obj use association, collection use collection --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h4><p>这种方法的查询更加直接，和上面给出的 SQL 基本一致，就是 association 部分的匹配看着有点懵，大概是 mybatis 底层都会根据 column name 做匹配的，但是这里查询的时候 teacher 的 name 字段重命名为 tname 了所以要显示的重新匹配一下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname from student s, teacher t</span><br><span class="line">    where s.tid = tid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应 SQL 的子查询和联表查询</p>
<h3 id="一对多-mybatis-05-resultmap02"><a href="#一对多-mybatis-05-resultmap02" class="headerlink" title="一对多  mybatis-05-resultmap02"></a>一对多  mybatis-05-resultmap02</h3><p>一个老师对应多个学生为案例, 代码和思路和上面的多对一其实没什么区别，就是关键字变了一下。。。</p>
<p>关键字：<strong>collection</strong> tag</p>
<p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按照结果嵌套处理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname, t.id tid from student s, teacher t</span><br><span class="line">    where s.tid = t.id and t.id=#&#123;tid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>按照查询嵌套处理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeachers&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.teacher;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudents&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.student where tid=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ul>
<li>关联 - 一对多 - associate</li>
<li>集合 - 多对一 - collection</li>
<li>javaType &amp; ofType<ul>
<li>javaType 指定实体类中的属性</li>
<li>ofType 指定映射到集合中的 pojo 类型，泛型中的约束类型</li>
</ul>
</li>
</ul>
<p>注意点：</p>
<ul>
<li>保证SQL可读性，尽量通俗易懂</li>
<li>注意一对多和多对一属性名和字段的问题</li>
<li>排错时善用 log</li>
</ul>
<p>面试高频</p>
<ul>
<li>Mysql 引擎</li>
<li>InnoDB 底层原理</li>
<li>索引</li>
<li>索引优化</li>
</ul>
<h2 id="动态-SQL-mybatis-06-dynamic-sql"><a href="#动态-SQL-mybatis-06-dynamic-sql" class="headerlink" title="动态 SQL mybatis-06-dynamic-sql"></a>动态 SQL mybatis-06-dynamic-sql</h2><p>根据不同的条件生成不同的 SQL 语句</p>
<ul>
<li>if</li>
<li>choose (when, otherwise)</li>
<li>trim (where, set)</li>
<li>foreach</li>
</ul>
<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`blog`</span>(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line"><span class="string">`title`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line"><span class="string">`author`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line"><span class="string">`create_time`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line"><span class="string">`views`</span> <span class="built_in">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>

<ol>
<li>导包</li>
<li>编写配置</li>
<li>编写实体类</li>
<li>编写 mapper + 测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        and title=#&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author=#&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="choose-when-otherwise-这种判断语句更贴近-java-中的-switch-case，在-if-中，所有符合-test-判断的条件都会被添加进去，但是在-choose-中，他只会从众多条件中选择一种"><a href="#choose-when-otherwise-这种判断语句更贴近-java-中的-switch-case，在-if-中，所有符合-test-判断的条件都会被添加进去，但是在-choose-中，他只会从众多条件中选择一种" class="headerlink" title="choose (when, otherwise), 这种判断语句更贴近 java 中的 switch-case，在 if 中，所有符合 test 判断的条件都会被添加进去，但是在 choose 中，他只会从众多条件中选择一种"></a>choose (when, otherwise), 这种判断语句更贴近 java 中的 switch-case，在 if 中，所有符合 test 判断的条件都会被添加进去，但是在 choose 中，他只会从众多条件中选择一种</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>trim (where, set), where 可以对 xml 中定义的 and + where 冗余情况进行判断，只在需要的时候才添加这个关键字，同理 set 会处理 set + ，的情况</p>
<p>PS: 添加 set 标签的时候 <code>,</code> 是一定要加的，多余的 <code>,</code> 框架会帮你去掉，少了可不行。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            and title=#&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            and author=#&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        update  mybatis.blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                title=#&#123;title&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">                author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="foreach-可以用来处理类似-SELECT-from-blog-where-id-in-quot-1-quot-quot-2-quot-quot-3-quot-的-SQL"><a href="#foreach-可以用来处理类似-SELECT-from-blog-where-id-in-quot-1-quot-quot-2-quot-quot-3-quot-的-SQL" class="headerlink" title="foreach 可以用来处理类似 SELECT * from blog where id in (&quot;1&quot;, &quot;2&quot;, &quot;3&quot;); 的 SQL"></a>foreach 可以用来处理类似 <code>SELECT * from blog where id in (&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);</code> 的 SQL</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogs&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所谓的动态 SQL，本质还是 SQL 语句，只是我们可以在 SQL 层面去执行一个逻辑代码</p>
<h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><ol>
<li>将公共部分抽取出来</li>
<li>通过 include 标签引用</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        and title=#&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author=#&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>最好基于单表来定义 SQL 片段</li>
<li>不要存在 where 标签</li>
</ul>
<h2 id="Cache-缓存-mybatis-07-cache"><a href="#Cache-缓存-mybatis-07-cache" class="headerlink" title="Cache 缓存 - mybatis-07-cache"></a>Cache 缓存 - mybatis-07-cache</h2><p>在 DB 操作中连接数据库是非常消耗资源的，所以有了缓存机制来减少重复的查询操作消耗</p>
<p>缓存：一次查询的结果，给他暂存在内存中，再次查询的时候直接走取结果</p>
<h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>一级缓存默认开启，且不能关闭，只在一次 SqlSession 中有用</p>
<ol>
<li>开启日志</li>
<li>测试一次 session 中查询两次相同结果</li>
<li>查看日志输出</li>
</ol>
<p>缓存失效的几种情况：</p>
<ol>
<li>查询不同的东西</li>
<li>增删改可能会改变原来的数据，所以必定要刷新缓存</li>
<li>查询不同的 mapper.xml</li>
<li>手动清理缓存</li>
</ol>
<h4 id="测试-p1"><a href="#测试-p1" class="headerlink" title="测试 p1"></a>测试 p1</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSqlSession();</span><br><span class="line">    System.out.println(<span class="string">&quot;-----&gt; query user1 the first time &lt;-----&quot;</span>);</span><br><span class="line">    session.getMapper(UserMapper.class).getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;-----&gt; query user1 the second time &lt;-----&quot;</span>);</span><br><span class="line">    session.getMapper(UserMapper.class).getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;-----&gt; query user2 the second time &lt;-----&quot;</span>);</span><br><span class="line">    session.getMapper(UserMapper.class).getUserById(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出 log</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">-----&gt; query user1 the first time &lt;-----</span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 1866875501.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@6f46426d]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id=?; </span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, jack, 123</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">-----&gt; query user1 the second time &lt;-----</span><br><span class="line">-----&gt; query user2 the second time &lt;-----</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id=?; </span><br><span class="line">==&gt; Parameters: 2(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 2, change, pwdchange</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@6f46426d]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@6f46426d]</span><br><span class="line">Returned connection 1866875501 to pool.</span><br></pre></td></tr></table></figure>

<p>user1 在第一次 query 的时候有访问 DB，第二次则直接从内存拿，在同一个 session 中访问 user2 也会从 DB 拿</p>
<h4 id="测试-p4"><a href="#测试-p4" class="headerlink" title="测试 p4"></a>测试 p4</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSqlSession();</span><br><span class="line">    System.out.println(<span class="string">&quot;-----&gt; query user1 the first time &lt;-----&quot;</span>);</span><br><span class="line">    session.getMapper(UserMapper.class).getUserById(<span class="number">1</span>);</span><br><span class="line">    session.clearCache(); <span class="comment">// 手动清 cache !!!</span></span><br><span class="line">    System.out.println(<span class="string">&quot;-----&gt; query user1 the second time &lt;-----&quot;</span>);</span><br><span class="line">    session.getMapper(UserMapper.class).getUserById(<span class="number">1</span>);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出 log</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">-----&gt; query user1 the first time &lt;-----</span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 1936722816.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@73700b80]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id=?; </span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, jack, 123</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">-----&gt; query user1 the second time &lt;-----</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id=?; </span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, jack, 123</span><br><span class="line">&lt;==      Total: 1</span><br></pre></td></tr></table></figure>
<p>添加了清理 cache 的语句后，第二次访问同一个 user 也会从 DB 拿</p>
<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ol>
<li>开启全局缓存 cacheEnabled -&gt; true</li>
<li>在 mapper.xml 中加入 <cache/> 标签</li>
</ol>
<p>为了支持 <cache/> 标签需要 pojo 类实现序列化接口不然会报错 <code>Cause: java.io.NotSerializableException: com.jzheng.pojo.User</code></p>
<ul>
<li>一级缓存作用域太低了，所以诞生了二级缓存</li>
<li>基于 namespace 级别的缓存，一个命名空间对应一个二级缓存</li>
<li>工作机制<ul>
<li>一个会话查询一条数据，数据被存放在一级缓存中</li>
<li>当前会话关闭，对应的一级缓存就没了，一级缓存中的数据会被保存到二级缓存中</li>
<li>新会话查询信息，会从二级缓存中获取内容</li>
<li>不同 mapper 查出的数据会放在自己对应的缓存中</li>
</ul>
</li>
</ul>
<h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUsers_diff_session</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session1 = MybatisUtils.getSqlSession();</span><br><span class="line">    System.out.println(<span class="string">&quot;-----&gt; query user1 the first time &lt;-----&quot;</span>);</span><br><span class="line">    session1.getMapper(UserMapper.class).getUserById(<span class="number">1</span>);</span><br><span class="line">    session1.close();</span><br><span class="line"></span><br><span class="line">    SqlSession session2 = MybatisUtils.getSqlSession();</span><br><span class="line">    System.out.println(<span class="string">&quot;-----&gt; query user1 the second time &lt;-----&quot;</span>);</span><br><span class="line">    session2.getMapper(UserMapper.class).getUserById(<span class="number">1</span>);</span><br><span class="line">    session2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 mapper 中没有添加 <cache/> 标签时，输出如下，两个 session 查询同一个 user 的时候都进行了 DB 访问</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">-----&gt; query user1 the first time &lt;-----</span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 1936722816.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@73700b80]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id=?; </span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, jack, 123</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@73700b80]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@73700b80]</span><br><span class="line">Returned connection 1936722816 to pool.</span><br><span class="line">-----&gt; query user1 the second time &lt;-----</span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Checked out connection 1936722816 from pool.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@73700b80]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id=?; </span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, jack, 123</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@73700b80]</span><br></pre></td></tr></table></figure>

<p>当 mapper 中添加 <cache/> 标签时，输出如下，第二次查询 user 时是从 cache 中查找的</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">-----&gt; query user1 the first time &lt;-----</span><br><span class="line">Cache Hit Ratio [com.jzheng.mapper.UserMapper]: 0.0</span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 379645464.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@16a0ee18]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id=?; </span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, jack, 123</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@16a0ee18]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@16a0ee18]</span><br><span class="line">Returned connection 379645464 to pool.</span><br><span class="line">-----&gt; query user1 the second time &lt;-----</span><br><span class="line">Cache Hit Ratio [com.jzheng.mapper.UserMapper]: 0.5</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ul>
<li>只要开启二级缓存，在同一个 Mapper 下就有效</li>
<li>所有的数据都会先放在一级缓存中</li>
<li>只有当会话提交或者关闭，才会提交到二级缓存中</li>
</ul>
<h2 id="缓存原理"><a href="#缓存原理" class="headerlink" title="缓存原理"></a>缓存原理</h2><ol>
<li>先看二级缓存中有没有</li>
<li>再看一级缓存中有没有</li>
<li>最后才查DB</li>
</ol>
<h2 id="自定义缓存-ehcache"><a href="#自定义缓存-ehcache" class="headerlink" title="自定义缓存 ehcache"></a>自定义缓存 ehcache</h2><p>一种广泛使用的开源 Java 分布式缓存，主要面向通用缓存</p>
<p>使用：</p>
<ol>
<li>导包</li>
<li>config 中配置 type</li>
</ol>
<p>不过这样的功能现在都用类似 redis 的工具代替了，应该不是主流用法了</p>
]]></content>
      <categories>
        <category>弹射起步</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 内部类</title>
    <url>/hexo/2020/12/09/TIJ4-inner-class/</url>
    <content><![CDATA[<ul>
<li><a href="#intro">Intro</a></li>
<li><a href="#creating-inner-classes">Creating inner classes</a></li>
<li><a href="#the-link-to-the-outer-class">The link to the outer class</a></li>
<li><a href="#using-this-and-new">Using .this and .new</a></li>
<li><a href="#inner-classes-and-upcasting">Inner classes and upcasting</a></li>
<li><a href="#inner-classes-in-methods-and-scopes">Inner classes in methods and scopes</a></li>
<li><a href="#anonymous-inner-classes">Anonymous inner classes</a><ul>
<li><a href="#factory-method-revisited">Factory Method revisited</a></li>
</ul>
</li>
<li><a href="#nested-classes">Nested classes</a><ul>
<li><a href="#classes-inside-interfaces">Classes inside interfaces</a></li>
<li><a href="#reaching-outward-from-a-multiply-nested-class">Reaching outward from a multiply nested class</a></li>
</ul>
</li>
<li><a href="#why-inner-classes">Why inner classes?</a><ul>
<li><a href="#closures--callbacks">Closures &amp; callbacks</a></li>
<li><a href="#inner-classes--control-frameworks">Inner classes &amp; control frameworks</a></li>
</ul>
</li>
<li><a href="#inheriting-from-inner-classes">Inheriting from inner classes</a></li>
<li><a href="#can-inner-classes-be-overridden">Can inner classes be overridden?</a></li>
<li><a href="#local-inner-classes">Local inner classes</a></li>
<li><a href="#inner-class-identifiers">Inner-class identifiers</a></li>
<li><a href="#summary">Summary</a></li>
</ul>
<p>最近在看 Spring Core 文档的以后,刚好遇到一个 Inner Class 相关的问题,回忆以下突然发现对他基本没有什么很深入的理解,特此重新阅读一下 Think in Java 4th 相关章节看看能不能有什么特别的收获. </p>
<p>想要解决的问题:</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 什么是内部类 - 将 class 定义嵌入另一个 class 的一种语法</li>
<li><input checked="" disabled="" type="checkbox"> 静态/非静态内部类有什么区别 - 前者可以单独使用, 或者需要 enclosing class 的实例才能使用</li>
<li><input checked="" disabled="" type="checkbox"> 内部类有什么用 - 更好的闭包</li>
<li><input checked="" disabled="" type="checkbox"> 字节码层面是怎么表现的 - class 分别编译, 外侧会持有内层的 class reference</li>
</ul>
<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Java 语法是支持在一个 class 内部再放入另一个 class 的定义的, 这种做法叫做 内部类(Inner Class). </p>
<p>Inner class 是一个很有价值的功能, 他让你可以把两个逻辑上共存的 class 放到一起, 并让他们之间有了一层可见性控制的功能. </p>
<h2 id="Creating-inner-classes"><a href="#Creating-inner-classes" class="headerlink" title="Creating inner classes"></a>Creating inner classes</h2><p>创建内部类的做法只需要直接将内部类定义放到外部类里面就行了, 很直接了当. 外部类一般会有一些方法用来返回内部类引用, 比如下面例子中的 <code>to()</code> 和 <code>contents()</code> 方法. 如果是 <code>非静态</code> 内部类, 你需要先新建外部类,然后才能创建内部类. 如果是 <strong>静态</strong> 内部类, 则你可以直接通过 class 引用创建内部类对象. </p>
<p>注意内部类创建的声明方式举例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态内部类的情况</span></span><br><span class="line">Surrounding.Inner inner = surrounddingInstance.method();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非静态内部类的情况</span></span><br><span class="line">Surrounding surrounding = <span class="keyword">new</span> Surrounding();</span><br><span class="line">Surrounding.Inner inner = surrounding.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者合二为一</span></span><br><span class="line">Surrounding.Inner inner = <span class="keyword">new</span> Surrounding().new Inner();</span><br></pre></td></tr></table></figure>

<p>官方示例说明:</p>
<p>parcel: 包裹</p>
<p>该示例以包裹运输为场景, 用包裹数量, 目的地等属性展示了内部类的应用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel2</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Contents</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Destination</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">        Destination(String whereTo) &#123;</span><br><span class="line">            label = whereTo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> label;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">to</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Destination(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Contents();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ship</span><span class="params">(String dest)</span> </span>&#123;</span><br><span class="line">        Contents c = contents();</span><br><span class="line">        Destination d = to(dest);</span><br><span class="line">        System.out.println(d.readLabel());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel2 p = <span class="keyword">new</span> Parcel2();</span><br><span class="line">        p.ship(<span class="string">&quot;Tasmania&quot;</span>);</span><br><span class="line">        Parcel2 q = <span class="keyword">new</span> Parcel2();</span><br><span class="line">        <span class="comment">// Defining references to inner classes:</span></span><br><span class="line">        Parcel2.Contents c = q.contents();</span><br><span class="line">        Parcel2.Destination d = q.to(<span class="string">&quot;Borneo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: Tasmania</span></span><br></pre></td></tr></table></figure>

<p>官方给的例子有点不太好记忆, 本人更倾向于简单的直接 Outer/Inner 这中名字来命名 class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">getInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Inner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer.Inner inner = <span class="keyword">new</span> Outer().getInner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="The-link-to-the-outer-class"><a href="#The-link-to-the-outer-class" class="headerlink" title="The link to the outer class"></a>The link to the outer class</h2><p>内部类最显著的特点: Inner class 创建的时候会持有一个外部类的引用, 概念上类似指针, 这使得他能没有限制的访问外部类成员变量和方法. </p>
<p>示例说明:</p>
<p>我们声明了一个接口 Selector, 它定义了三个方法, 表示类似游标的能力, 这个接口可以让我们</p>
<ol>
<li>得到当前量</li>
<li>判断是不是已经是最后一个元素了</li>
<li>移动到下一个元素</li>
</ol>
<p>Sequence(次序) 是一个可变长的数组容器, 只实现了构造函数和 add() 方法.  通过构造函数我们可以指定他的容量, 通过 add() 方法可以向容器中添加元素. </p>
<p>Sequence 中我们声明了一个内部类 SequenceSelector 实现了 Selector 接口. 通过这种组合方式, 我们把删选能力和容器分隔开, 避免了直接用 Sequence 直接实现 Selector 这种做法在语义上的累赘. </p>
<p>重点:SequenceSelector <strong>可以访问</strong> Sequence 的<strong>私有</strong>变量而不受限制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Selector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">current</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> next = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sequence</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        items = <span class="keyword">new</span> Object[size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (next &lt; items.length) items[next++] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceSelector</span> <span class="keyword">implements</span> <span class="title">Selector</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i == items.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">current</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> items[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; items.length) i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Selector <span class="title">selector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SequenceSelector();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sequence sequence = <span class="keyword">new</span> Sequence(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) sequence.add(Integer.toString(i));</span><br><span class="line">        Selector selector = sequence.selector();</span><br><span class="line">        <span class="keyword">while</span> (!selector.end()) &#123;</span><br><span class="line">            System.out.print(selector.current() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            selector.next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每次我们调用 selector() 方法时都会产生一个内部类的实体, 而且各个实体之间是相互独立的, 很赞. </p>
<p>自己写的内部类持有外部引用的例子, 光这个点的话, 官方的例子有点累赘, 不过这种设计思路很喜欢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;outer&quot;</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getOuterName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Outer.<span class="keyword">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">getInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Inner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer.Inner inner = <span class="keyword">new</span> Outer().getInner();</span><br><span class="line">        System.out.println(inner.getOuterName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: outer</span></span><br></pre></td></tr></table></figure>

<h2 id="Using-this-and-new"><a href="#Using-this-and-new" class="headerlink" title="Using .this and .new"></a>Using .this and .new</h2><p>内部类中,你可以使用 <code>外部类.this</code> 的方式得到外部类的引用. 下面的例子中, inner class 的 <code>outer()</code> 通过 <code>DotThis.this</code> 返回了外部类的引用,并调用 <code>f()</code> 打印结果. </p>
<p>这个例子中的调用链有点别扭, 但是主旨是为了说明我们可以通过 <code>outer.this</code> 这个关键字拿到外部类的引用, 仅此而已. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DotThis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DotThis.f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> DotThis <span class="title">outer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> DotThis.<span class="keyword">this</span>;</span><br><span class="line">            <span class="comment">// A plain &quot;this&quot; would be Inner’s &quot;this&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">inner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Inner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DotThis dt = <span class="keyword">new</span> DotThis();</span><br><span class="line">        DotThis.Inner dti = dt.inner();</span><br><span class="line">        dti.outer().f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: DotThis.f()</span></span><br></pre></td></tr></table></figure>

<p>如果你想创建内部类,那么你可以通过 <code>外部类实例.new</code> 的形式创建. </p>
<p>创建时你不需要为 <code>Inner()</code> 指定前缀 class,这个挺方便的. 本来还以为需要用 <code>dn.new DotNew.Inner();</code> 的语法,后来试过发现编译会报错. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DotNew</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DotNew dn = <span class="keyword">new</span> DotNew();</span><br><span class="line">        DotNew.Inner dni = dn.new Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS: [Attention] 书上将非静态内部类叫做 inner class,静态内部类叫做 nested class 或 static inner class, 有点意思</p>
<p>想要创建内部类你必须要先创建外部类, 这是因为<strong>创建内部类需要外部类的引用</strong>, 这更像是一个先决条件. 如果想脱钩, 可以使用 nested class(静态内部类). </p>
<h2 id="Inner-classes-and-upcasting"><a href="#Inner-classes-and-upcasting" class="headerlink" title="Inner classes and upcasting"></a>Inner classes and upcasting</h2><p>标题可以理解为 内部类和强转. Inner class 和接口结合, 可以达到隐藏自己实现的目的, 这个特性很厉害. </p>
<p>示例说明:</p>
<p>下面的例子里 Parcel4 声明了两个内部类, 分别实现 Destination 和 Contents 接口, 而且类修饰符为 private 和 protect 限制的包外的访问. </p>
<p>然后按照常用套路, 为这两个内部类创建了方法(destination(str) 和 contents())返回对应的实现. 但是由于方法返回的是接口类型的, 所以包外压根就不知道他的实现细节. 这就很 imba, 起到了很强的隔离效果 （；￣ェ￣）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestParcel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel4 p = <span class="keyword">new</span> Parcel4();</span><br><span class="line">        Contents c = p.contents();</span><br><span class="line">        Destination d = p.destination(<span class="string">&quot;Tasmania&quot;</span>);</span><br><span class="line">        <span class="comment">// Illegal -- can’t access private class:</span></span><br><span class="line">        <span class="comment">// ! Parcel4.PContents pc = p.new PContents();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Destination</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">readLabel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Contents</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parcel4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PContents</span> <span class="keyword">implements</span> <span class="title">Contents</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">PDestination</span> <span class="keyword">implements</span> <span class="title">Destination</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">PDestination</span><span class="params">(String whereTo)</span> </span>&#123;</span><br><span class="line">            label = whereTo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> label;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">destination</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PDestination(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PContents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Exc8: 确认下外部类是否能访问内部类变量? Determine whether an outer class has access to the private elements of its inner class.<br>看调用方式, 如果是外部类方法直接调用内部类成员变量, 不能, 外部类实例化后, 内部类可能压根就没有实例化, 访问个毛线<br>如果是实例化了, 就可以调用, 习题答案如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer8</span> </span>&#123;    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> ii1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> ii2 = <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showIi2</span><span class="params">()</span> </span>&#123; System.out.println(ii2); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;Inner hi&quot;</span>); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// Need to create objects to access private elements of Inner:</span></span><br><span class="line">    <span class="keyword">int</span> oi = <span class="keyword">new</span> Inner().ii1;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showOi</span><span class="params">()</span> </span>&#123; System.out.println(oi); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showIi2</span><span class="params">()</span> </span>&#123; <span class="keyword">new</span> Inner().showIi2(); &#125; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">outerHi</span><span class="params">()</span> </span>&#123; <span class="keyword">new</span> Inner().hi(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer8 out = <span class="keyword">new</span> Outer8();</span><br><span class="line">        out.showOi();</span><br><span class="line">        out.showIi2();</span><br><span class="line">        out.outerHi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Inner-classes-in-methods-and-scopes"><a href="#Inner-classes-in-methods-and-scopes" class="headerlink" title="Inner classes in methods and scopes"></a>Inner classes in methods and scopes</h2><p>前面那些例子都很直白易懂,但是 Inner class 还有一些变种, 格式很放飞自我, 该变种适用如下情况</p>
<ol>
<li>你只是想要实现某个接口, 并返回这个接口引用</li>
<li>你在解决某个复杂问题时, 临时需要创建一个 class 以解决问题, 但是不想暴露它的实现</li>
</ol>
<p>下面我们会将前面的 Parcel 例子转化为以下几种方式:</p>
<p>1.A class defined within a method - 在方法体内定义类<br>2.A class defined within a scope inside a method - 在方法的某个更小的 scope 中声明类, 比如方法的 if 条件语句中<br>3.An anonymous class implementing an interface - 匿名内部类实现接口<br>4.An anonymous class extending a class that has a non-default constructor - 匿名内部类继承抽象类 + 自定义构造函数<br>5.An anonymous class that performs field initialization  - 匿名内部类 + field 初始化<br>6.An anonymous class that performs construction using instance initialization (anonymous inner classes cannot have constructors) - 匿名内部类 + 构造代码块</p>
<p>对应 item1: A class defined within a method, 我们将 class 创建在方法体内部, 这种做法也叫 本地内部类(local inner class):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">destination</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">PDestination</span> <span class="keyword">implements</span> <span class="title">Destination</span> </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">private</span> <span class="title">PDestination</span><span class="params">(String whereTo)</span> </span>&#123;</span><br><span class="line">                label = whereTo;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> label;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PDestination(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel5 p = <span class="keyword">new</span> Parcel5();</span><br><span class="line">        Destination d = p.destination(<span class="string">&quot;Tasmania&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PDestination 在 destination() 方法内而不在 Parcels 内,所以 PDestination 只在方法体 destination() 内可见. 这种用法还允许你在这个类的其他方法中创建<strong>同名</strong>的内部类而没有冲突. </p>
<p>对应 item2: A class defined within a scope inside a method, 在方法内更小的 scope 中创建内部类:  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">internalTracking</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">TrackingSlip</span> </span>&#123;</span><br><span class="line">                <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">                TrackingSlip(String s) &#123;</span><br><span class="line">                    id = s;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function">String <span class="title">getSlip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> id;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            TrackingSlip ts = <span class="keyword">new</span> TrackingSlip(<span class="string">&quot;slip&quot;</span>);</span><br><span class="line">            String s = ts.getSlip();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Can’t use it here! Out of scope:</span></span><br><span class="line">        <span class="comment">// ! TrackingSlip ts = new TrackingSlip(&quot;x&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">track</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        internalTracking(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel6 p = <span class="keyword">new</span> Parcel6();</span><br><span class="line">        p.track();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TrackingSlip 嵌在 <code>if</code> 语句中, 只在 <code>if</code> 里生效, 出了这个范围就失效了, 除此之外和其他内部类没什么区别. </p>
<h2 id="Anonymous-inner-classes"><a href="#Anonymous-inner-classes" class="headerlink" title="Anonymous inner classes"></a>Anonymous inner classes</h2><p>对应 item3: An anonymous class implementing an interface 定义匿名内部类 和 item4: An anonymous class extending a class that has a non-default constructor 使用默认构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Contents</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Contents() &#123;</span><br><span class="line">            <span class="comment">// Insert a class definition</span></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;<span class="comment">// Semicolon required in this case</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel7 p = <span class="keyword">new</span> Parcel7();</span><br><span class="line">        Contents c = p.contents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>contents()</code> 将类定义和 return 结合在了一起. 除此之外,该类还是匿名的, 返回时该类自动转换为基类类型. 上面的实现和下面的是等价的, 不过上面的更简洁. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel7b</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyContents</span> <span class="keyword">implements</span> <span class="title">Contents</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyContents();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel7b p = <span class="keyword">new</span> Parcel7b();</span><br><span class="line">        Contents c = p.contents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看文章顺序这个应该是对应 item4: An anonymous class extending a class that has a non-default constructor 的但是总感觉他这种说法不贴切, 可能是我笔记有问题, 按理说, 下面的 instance initialization 更贴切才对. </p>
<p>上面例子中,内部类使用默认构造函数实例化,如果你需要一个特殊的构造函数,你可以参考下面的例子. Wrapping 是一个普通的类, 我们在 Parcel8 中的 wrapping 方法中调用了 Wrapping 的带参构造函数, 并且返回时重写了其中的 value 方法. 和之前的那些返回内部类的方式异曲同工. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel8</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Wrapping <span class="title">wrapping</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Base constructor call:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Wrapping(x) &#123; </span><br><span class="line">            <span class="comment">// Pass constructor argument.</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.value() * <span class="number">47</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;; <span class="comment">// Semicolon required</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel8 p = <span class="keyword">new</span> Parcel8();</span><br><span class="line">        Wrapping w = p.wrapping(<span class="number">10</span>);</span><br><span class="line">        System.out.println(wrapping.value());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapping</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wrapping</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        i = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: 470</span></span><br></pre></td></tr></table></figure>

<p>对应 item5: An anonymous class that performs field initialization 你可以在内部类中定义, 使用 field, field 如果是作为参数传入,必须是 final 类型的:</p>
<blockquote>
<p>再看一遍才发现,他的特殊之处是内部类有一个 field 声明, 对应的值是直接从方法参数里面拿的！！这种用法以前没注意到过 （；￣ェ￣）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel9</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Argument must be final to use inside</span></span><br><span class="line">    <span class="comment">// anonymous inner class:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">destination</span><span class="params">(<span class="keyword">final</span> String dest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Destination() &#123;</span><br><span class="line">            <span class="keyword">private</span> String label = dest;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> label;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel9 p = <span class="keyword">new</span> Parcel9();</span><br><span class="line">        Destination d = p.destination(<span class="string">&quot;Tasmania&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If you’re defining an anonymous inner class and want to use an object that’s defined outside the anonymous inner class, the compiler requires that the argument reference be <strong>final</strong>, as you see in the argument to destination(). If you forget, you’ll get a compile-time error message. </p>
<p>内部匿名类会调用基类的构造器,但是如果你在实例里需要定制一些行为,但是由于你没有名字,没有自己的构造器,那该怎么办？</p>
<p>对应 item6: An anonymous class that performs construction using instance initialization, 这种情况下,你可以使用 构造代码块(instance initializaiton) 实现通用的功能. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Base constructor, i = &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Base <span class="title">getBase</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Base(i) &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Inside instance initializer&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;In anonymous f()&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Base base = getBase(<span class="number">47</span>);</span><br><span class="line">        base.f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Base constructor, i = 47</span></span><br><span class="line"><span class="comment">// Inside instance initializer</span></span><br><span class="line"><span class="comment">// In anonymous f()</span></span><br></pre></td></tr></table></figure>

<p>上例中 i 作为构造器参数传入, 但是并没有在内部类中被直接使用, 使用他的是基类的构造函数. 所以不用像前面的 local inner class 那样,使用 final 修饰. </p>
<p>Note that the arguments to destination() must be final since they are used within the anonymous class:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">destination</span><span class="params">(<span class="keyword">final</span> String dest, <span class="keyword">final</span> <span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Destination() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> cost;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Instance initialization for each object:      </span></span><br><span class="line">            &#123;</span><br><span class="line">                cost = Math.round(price);</span><br><span class="line">                <span class="keyword">if</span> (cost &gt; <span class="number">100</span>) System.out.println(<span class="string">&quot;Over budget!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> String label = dest;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> label;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel10 p = <span class="keyword">new</span> Parcel10();</span><br><span class="line">        Destination d = p.destination(<span class="string">&quot;Tasmania&quot;</span>, <span class="number">101.395F</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: Over budget!</span></span><br></pre></td></tr></table></figure>

<p>在内部类的使用中, 代码块可以看作是内部类的构造函数</p>
<p>和其他普通的类相比, 你可以使用匿名内部类来扩展类或接口,但只能选其一,而且数量只能是一个. </p>
<h3 id="Factory-Method-revisited"><a href="#Factory-Method-revisited" class="headerlink" title="Factory Method revisited"></a>Factory Method revisited</h3><blockquote>
<p>这部分是使用 inner class 重构之前 factory/interface 相关的代码,有机会回头再瞅一眼</p>
</blockquote>
<p>Look at how much nicer the interfaces/Factories.java example comes out when you use anonymous inner classes:</p>
<p>示例说明:</p>
<p>通过内部类实现工厂方法, 并且在示例中将 outer 类的构造函数设置成 private, 将新建的动作限制到只能通过 factory 实现, 6 的飞起. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ServiceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Service <span class="title">getService</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Implementation1</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Implementation1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Implementation1 method1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Implementation1 method2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ServiceFactory factory = <span class="keyword">new</span> ServiceFactory() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Service <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Implementation1();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Implementation2</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Implementation2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Implementation2 method1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Implementation2 method2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ServiceFactory factory = <span class="keyword">new</span> ServiceFactory() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Service <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Implementation2();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factories</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serviceConsumer</span><span class="params">(ServiceFactory fact)</span> </span>&#123;</span><br><span class="line">        Service s = fact.getService();</span><br><span class="line">        s.method1();</span><br><span class="line">        s.method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        serviceConsumer(Implementation1.factory);</span><br><span class="line">        <span class="comment">// Implementations are completely interchangeable:</span></span><br><span class="line">        serviceConsumer(Implementation2.factory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Implementation1 method1</span></span><br><span class="line"><span class="comment">// Implementation1 method2</span></span><br><span class="line"><span class="comment">// Implementation2 method1</span></span><br><span class="line"><span class="comment">// Implementation2 method2</span></span><br></pre></td></tr></table></figure>

<p>通过为 Factory 提供 inner class 的实现,我们可以将上例中的 Implementation1 和 Implementation2 的构造函数设置成私有, 缩小了 Service 实现的作用域. 同时不需要为工厂类提供单独的实现. 从语法上这样的解决方案更合理. </p>
<p>interfaces/Games.java 的例子也可以使用 inner class 做类似的优化:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Game <span class="title">getGame</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Checkers</span> <span class="keyword">implements</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Checkers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> moves = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVES = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Checkers move &quot;</span> + moves);</span><br><span class="line">        <span class="keyword">return</span> ++moves != MOVES;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GameFactory factory = <span class="keyword">new</span> GameFactory() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Game <span class="title">getGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Checkers();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chess</span> <span class="keyword">implements</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Chess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> moves = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVES = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Chess move &quot;</span> + moves);</span><br><span class="line">        <span class="keyword">return</span> ++moves != MOVES;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GameFactory factory = <span class="keyword">new</span> GameFactory() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Game <span class="title">getGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Chess();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Games</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(GameFactory factory)</span> </span>&#123;</span><br><span class="line">        Game s = factory.getGame();</span><br><span class="line">        <span class="keyword">while</span> (s.move()) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        playGame(Checkers.factory);</span><br><span class="line">        playGame(Chess.factory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Remember the advice given at the end of the last chapter: Prefer classes to interfaces. If your design demands an interface, you’ll know it. Otherwise, don’t put it in until you are forced to. </p>
<blockquote>
<p>这个建议是从上一章节 Interface 那边出来了, 具体得完那一章才知道. 建议就是先用 class, 等你完全定下来再 refactor 成 interface, 现在 interface 一般都是被滥用的. </p>
</blockquote>
<h2 id="Nested-classes"><a href="#Nested-classes" class="headerlink" title="Nested classes"></a>Nested classes</h2><p>如果你不想要内部类和外部类的关系, 你可以把内部类静态化, 这种做法叫 nested class(静态内部类). 普通的内部类会持有一个外部类的引用, 静态内部类则不会. 静态内部类有如下特点:</p>
<ol>
<li>You don’t need an outer-class object in order to create an object of a nested class. 独立于外部类实例存在</li>
<li>You can’t access a non-static outer-class object from an object of a nested class. 不能通过它访问非静态的外部类</li>
</ol>
<p>除此之外的区别还有,普通内部类还不能持有静态变量, 方法. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel11</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ParcelContents</span> <span class="keyword">implements</span> <span class="title">Contents</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ParcelDestination</span> <span class="keyword">implements</span> <span class="title">Destination</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">ParcelDestination</span><span class="params">(String whereTo)</span> </span>&#123;</span><br><span class="line">            label = whereTo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> label;</span><br><span class="line">        &#125;        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Nested classes can contain other static elements:</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherLevel</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Destination <span class="title">destination</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ParcelDestination(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ParcelContents();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Contents c = contents();</span><br><span class="line">        Destination d = destination(<span class="string">&quot;Tasmania&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于使用了静态的内部类, 外部类也可以使用静态方法返回内部类实例. 在 main() 中调用时就可以直接 call 方法而不用外部类实例了. </p>
<h3 id="Classes-inside-interfaces"><a href="#Classes-inside-interfaces" class="headerlink" title="Classes inside interfaces"></a>Classes inside interfaces</h3><p>一般来说, 在 interface 里放 class 是不允许的, 但是 nested class 是个例外. 任何放到 interface 里的 code 都会有 public 和 static 的属性, 所以下面代码中声明的 class <code>class Test implements ClassInInterface</code> 其实就是一个静态内部类. You can even implement the surrounding interface in the inner class, like this: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClassInInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">howdy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">ClassInInterface</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">howdy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Howdy!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">new</span> Test().howdy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output Howdy!</span></span><br></pre></td></tr></table></figure>

<p>通过这种方式我们可以很方便的在接口使用方分享一些公用代码. </p>
<p>在这本书的前面几章, 有建议说在每个 class 里面加一个 main() 方法来存放测试代码, 但是这会增加需要编译的代码量. 这里我们可以将测试放到 nested class 中:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBed</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Tester</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            TestBed t = <span class="keyword">new</span> TestBed();</span><br><span class="line">            t.f();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output f()</span></span><br></pre></td></tr></table></figure>

<p>编译之后测试会放到单独的 class <code>TestBed$Tester</code> 中, 它可以用来测试, 当要部署到产品环境时, 可以把这部分代码 exclude 掉. </p>
<blockquote>
<p>现在应该不用了, 我们都是通过在测试 folder 下新建测试 UT 来完成这部分功能的</p>
</blockquote>
<h3 id="Reaching-outward-from-a-multiply-nested-class"><a href="#Reaching-outward-from-a-multiply-nested-class" class="headerlink" title="Reaching outward from a multiply nested class"></a>Reaching outward from a multiply nested class</h3><p>不管 inner class 嵌套的有多深,内部类都可以不受限制的访问外部类,如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MNA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                g();</span><br><span class="line">                f();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiNestingAccess</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MNA mna = <span class="keyword">new</span> MNA();</span><br><span class="line">        MNA.A mnaa = mna.new A();</span><br><span class="line">        MNA.A.B mnaab = mnaa.new B();</span><br><span class="line">        mnaab.h();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>上例中MNAAB 可以访问外部的私有方法 g(), f(). 同时也演示了,在 main() 中你如果要新建内部类,需要先实例化他的外部类. </p>
<h2 id="Why-inner-classes"><a href="#Why-inner-classes" class="headerlink" title="Why inner classes?"></a>Why inner classes?</h2><p>为什么 Java 要支持 inner class 这种语法？</p>
<p>从典型的使用方式上看, 内部类会继承 class 或者 实现接口, 然后操作外部类的属性. 所以我们可以说<strong>内部类提供了一个外部类的访问窗口</strong>. </p>
<p>Inner class 存在的最合理的解释:</p>
<blockquote>
<p>内部类都可以独立的实现一个继承. 即不管外部类是否已经继承了一个实现这对 inner class 毫无影响. </p>
</blockquote>
<p>换个角度看, inner class 可以看作是<strong>多重继承</strong>的一种解决方案. 在这方面, interface 可以解决一部分问题, 但是 inner class 效率更高. </p>
<p>就上面的问题, 下面我们举例子来说明, 比如我们想要在一个类里实现两个接口, 你有两种选择, 一个 class + 2<em>interface 或者 class + inner class + 1</em>interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> <span class="keyword">implements</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function">B <span class="title">makeB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Anonymous inner class:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> B() &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiInterfaces</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">takesA</span><span class="params">(A a)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">takesB</span><span class="params">(B b)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        X x = <span class="keyword">new</span> X();</span><br><span class="line">        Y y = <span class="keyword">new</span> Y();</span><br><span class="line">        takesA(x);</span><br><span class="line">        takesA(y);</span><br><span class="line">        takesB(x);</span><br><span class="line">        takesB(y.makeB());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例中我们有 A, B 两个接口, X 实现两个接口, Y 实现一个接口 + 一个 inner class. X,Y 虽然实现方式不太一样, 但是目的都达到了, 两个接口都实现了. </p>
<p>但是, 如果是抽象类或者实体类, 多重继承就会受到限制. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Z</span> <span class="keyword">extends</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="function">E <span class="title">makeE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> E() &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiImplementation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">takesD</span><span class="params">(D d)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">takesE</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Z z = <span class="keyword">new</span> Z();</span><br><span class="line">        takesD(z);</span><br><span class="line">        takesE(z.makeE());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>作者这里的继承说的是具有基类的某种能力, 而不是限制在继承类的语法表现, 这个对我理解继承还是有点启发的. 通过<strong>内部类</strong>我可以得到<strong>基类</strong>的实例, 说我继承了它, 也说的过去. </p>
</blockquote>
<p>通过 inner class,你可以具备以下附加功能:</p>
<ol>
<li>内部类可以有多个实例, 并且相互独立, 和外部类也相互独立</li>
<li>In a single outer class you can have several inner classes, each of which implements the same interface or inherits from the same class in a different way. An example of this will be shown shortly.</li>
<li>The point of creation of the inner-class object is not tied to the creation of the outer-class object.  </li>
<li>There is no potentially confusing “is-a” relationship with the inner class; it’s a separate entity. </li>
</ol>
<p>就第四点,可以那前面的 <code>Sequence.java</code> 为例. Sequence 语义上来说是一个容器, 而 Selector 接口代表了选择这种能力. 我们通过内部创建一个 SequenceSelector 实现这中能力, 在语义上会更合理. </p>
<h3 id="Closures-amp-callbacks"><a href="#Closures-amp-callbacks" class="headerlink" title="Closures &amp; callbacks"></a>Closures &amp; callbacks</h3><p>Closure(闭包) 即一个可调用对象, 保留了创建它的作用域的信息. Inner class 就是 OO 概念上的一个闭包, 他持有外部类的引用, 访问不受限. </p>
<p>Java 支持部分指针机制, 其中之一就是 callback(回调). 在回调中, 一些对象给出自身的一部分信息(引用), 通过这部分信息, 其他对象可以操作这个对象. </p>
<p>inner class 的闭包特性比之与指针, 扩展性更强, 更安全. </p>
<p>示例说明:</p>
<p>下面这个例子只为了一个目的, 就是凸显出内部类可以拿到外部类的引用(Callee2.this), 并且没有任何访问限制. </p>
<p>我们声明一个 Incremnentable 接口, 其中有一个方法 <code>increment()</code>, Callee1 实现了 Incrementable. </p>
<p>再声明 MyIncrement 基类, 也有一个 <code>increment()</code> 方法, 然后声明 Callee2 继承了 MyIncrement 那么相应的他就自带了 increment() 方法, 无法再实现 Incrementable 接口, 这里通过内部类 Closure 实现接口, 在通过 getCallbackReference() 拿到引用, 变相的达到了多重继承的效果. 在主函数中, Caller 通过构造函数统一对 Incrementable 做操作. </p>
<p>PS:个人感觉这个例子中 MyIncrement 这个类对说明 callback 这个特性反而起了误导的作用, 让整个示例反觉更繁琐了. 整个例子只需要保留 Callee2 + Caller 部分即. 我们可以通过 caller 的 go() 方法调用 Callee2 中的方法, 改变内部变量值. </p>
<p>PPS: 这个例子确实多余, 这里表现出来的特性不就是 <code>Outer.this</code> 这个属性吗, 绕了一大圈. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Incrementable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Very simple to just implement the interface:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Callee1</span> <span class="keyword">implements</span> <span class="title">Incrementable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIncrement</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Other operation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(MyIncrement mi)</span> </span>&#123;</span><br><span class="line">        mi.increment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If your class must implement increment() in</span></span><br><span class="line"><span class="comment">// some other way, you must use an inner class:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Callee2</span> <span class="keyword">extends</span> <span class="title">MyIncrement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.increment();</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Closure</span> <span class="keyword">implements</span> <span class="title">Incrementable</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Specify outer-class method, otherwise</span></span><br><span class="line">            <span class="comment">// you’d get an infinite recursion:</span></span><br><span class="line">            Callee2.<span class="keyword">this</span>.increment();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Incrementable <span class="title">getCallbackReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Closure();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caller</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Incrementable callbackReference;</span><br><span class="line"></span><br><span class="line">    Caller(Incrementable cbh) &#123;</span><br><span class="line">        callbackReference = cbh;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        callbackReference.increment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Callbacks</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Callee1 c1 = <span class="keyword">new</span> Callee1();</span><br><span class="line">        Callee2 c2 = <span class="keyword">new</span> Callee2();</span><br><span class="line">        MyIncrement.f(c2);</span><br><span class="line">        Caller caller1 = <span class="keyword">new</span> Caller(c1);</span><br><span class="line">        Caller caller2 = <span class="keyword">new</span> Caller(c2.getCallbackReference());</span><br><span class="line">        caller1.go();</span><br><span class="line">        caller1.go();</span><br><span class="line">        caller2.go();</span><br><span class="line">        caller2.go();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Other operation</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// Other operation</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// Other operation</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h3 id="Inner-classes-amp-control-frameworks"><a href="#Inner-classes-amp-control-frameworks" class="headerlink" title="Inner classes &amp; control frameworks"></a>Inner classes &amp; control frameworks</h3><blockquote>
<p>List<Event> (pronounced “List of Event”) 原来带类型的 collection 这么发音的吗, 学到了同时感觉很合理</p>
</blockquote>
<blockquote>
<p>本章主要例子中用到了 Command pattern 不过我已经忘了那是个什么东西了, 又要复习了 （；￣ェ￣）</p>
</blockquote>
<p>control framework 是一种用于处理 event 的应用框架. 下面是书中 GreenHouse 的例子. 我们先创建一个 abstract 的类代表我们要处理的 event</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> eventTime;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">long</span> delayTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delayTime = delayTime;</span><br><span class="line">        start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123; <span class="comment">// Allows restarting</span></span><br><span class="line">        eventTime = System.nanoTime() + delayTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">ready</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.nanoTime() &gt;= eventTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>start()</code> 单独抽离, 方便以后实现 restart 功能, <code>ready()</code> 即判断是否已经可以执行事件, <code>action()</code> 是我们要执行事件的内容. </p>
<p>以下是 Controller 代码, Controller 实体持有事件列表, 然后通过 while 遍历 event 并执行. 处理时将变量 list 备份以防止动态改变 list 的值. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="comment">// A class from java.util to hold Event objects:</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Event&gt; eventList = <span class="keyword">new</span> ArrayList&lt;Event&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEvent</span><span class="params">(Event c)</span> </span>&#123;</span><br><span class="line">        eventList.add(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (eventList.size() &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// Make a copy so you’re not modifying the list</span></span><br><span class="line">            <span class="comment">// while you’re selecting the elements in it:</span></span><br><span class="line">            <span class="keyword">for</span> (Event e : <span class="keyword">new</span> ArrayList&lt;Event&gt;(eventList))</span><br><span class="line">                <span class="keyword">if</span> (e.ready()) &#123;</span><br><span class="line">                    System.out.println(e);</span><br><span class="line">                    e.action();</span><br><span class="line">                    eventList.remove(e);</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在遍历 event 时, 我们并不知道 event 具体是什么, 这正是框架的目的, 我们并不关心某个具体的对象. 而这恰恰是 inner class 擅长的地方. 通过使用它我们可以在两方面优化上面的代码. </p>
<ol>
<li>我们可以把 event 和 controller 合二为一, 将各个 event 特有的 action() 封装在内部类中</li>
<li>内部类让你的实现对外不可见</li>
</ol>
<p>使用<strong>内部类</strong>实现代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenhouseControls</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> light = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOn</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LightOn</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Put hardware control code here to</span></span><br><span class="line">            <span class="comment">// physically turn on the light.</span></span><br><span class="line">            light = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Light is on&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOff</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LightOff</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Put hardware control code here to</span></span><br><span class="line">            <span class="comment">// physically turn off the light.</span></span><br><span class="line">            light = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Light is off&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> water = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaterOn</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WaterOn</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Put hardware control code here.</span></span><br><span class="line">            water = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Greenhouse water is on&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaterOff</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WaterOff</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Put hardware control code here.</span></span><br><span class="line">            water = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Greenhouse water is off&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String thermostat = <span class="string">&quot;Day&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThermostatNight</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ThermostatNight</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Put hardware control code here.</span></span><br><span class="line">            thermostat = <span class="string">&quot;Night&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Thermostat on night setting&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThermostatDay</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ThermostatDay</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Put hardware control code here.</span></span><br><span class="line">            thermostat = <span class="string">&quot;Day&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Thermostat on day setting&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// An example of an action() that inserts a</span></span><br><span class="line">    <span class="comment">// new one of itself into the event list:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bell</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Bell</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            addEvent(<span class="keyword">new</span> Bell(delayTime));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Bing!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Restart</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Event[] eventList;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Restart</span><span class="params">(<span class="keyword">long</span> delayTime, Event[] eventList)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">            <span class="keyword">this</span>.eventList = eventList;</span><br><span class="line">            <span class="keyword">for</span> (Event e : eventList)</span><br><span class="line">                addEvent(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (Event e : eventList) &#123;</span><br><span class="line">                e.start(); <span class="comment">// Rerun each event</span></span><br><span class="line">                addEvent(e);</span><br><span class="line">            &#125;</span><br><span class="line">            start(); <span class="comment">// Rerun this Event</span></span><br><span class="line">            addEvent(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Restarting system&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Terminate</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Terminate</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delayTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Terminating&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码结构很简单,分别声明了一些事件类型 lightOn/Off, waterOn/Off 等, 内部类继承 Event, 实现个则的抽象方法即可. </p>
<p>Bell 和 Restart 有别于其他的 event 内部类, 它还会调用 Outer class 的其他方法. </p>
<p>以下是 GreenhouseController 执行函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenhouseController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GreenhouseControls gc = <span class="keyword">new</span> GreenhouseControls();</span><br><span class="line">        <span class="comment">// Instead of hard-wiring, you could parse</span></span><br><span class="line">        <span class="comment">// configuration information from a text file here:</span></span><br><span class="line">        gc.addEvent(gc.new Bell(<span class="number">900</span>));</span><br><span class="line">        Event[] eventList = &#123;</span><br><span class="line">                gc.new ThermostatNight(<span class="number">0</span>),</span><br><span class="line">                gc.new LightOn(<span class="number">200</span>),</span><br><span class="line">                gc.new LightOff(<span class="number">400</span>),</span><br><span class="line">                gc.new WaterOn(<span class="number">600</span>),</span><br><span class="line">                gc.new WaterOff(<span class="number">800</span>),</span><br><span class="line">                gc.new ThermostatDay(<span class="number">1400</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        gc.addEvent(gc.new Restart(<span class="number">2000</span>, eventList));</span><br><span class="line">        gc.addEvent(<span class="keyword">new</span> GreenhouseControls.Terminate(<span class="keyword">new</span> Integer(<span class="number">5000</span>)));</span><br><span class="line">        gc.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Bing!</span></span><br><span class="line"><span class="comment">// Thermostat on night setting</span></span><br><span class="line"><span class="comment">// Light is on</span></span><br><span class="line"><span class="comment">// Light is off</span></span><br><span class="line"><span class="comment">// Greenhouse water is on</span></span><br><span class="line"><span class="comment">// Greenhouse water is off</span></span><br><span class="line"><span class="comment">// Thermostat on day setting</span></span><br><span class="line"><span class="comment">// Restarting system</span></span><br><span class="line"><span class="comment">// Terminating</span></span><br></pre></td></tr></table></figure>

<h2 id="Inheriting-from-inner-classes"><a href="#Inheriting-from-inner-classes" class="headerlink" title="Inheriting from inner classes"></a>Inheriting from inner classes</h2><p>如果想要继承一个内部类, 语法稍微有点特殊, 由于内部类需要借助外部类才能实例化, 所以构造函数中需要调用 <code>outer.super()</code> 实例如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithInner</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritInner</span> <span class="keyword">extends</span> <span class="title">WithInner</span>.<span class="title">Inner</span> </span>&#123;</span><br><span class="line">    <span class="comment">//! InheritInner() &#123;&#125; // Won’t compile</span></span><br><span class="line">    InheritInner(WithInner wi) &#123;</span><br><span class="line">        wi.<span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WithInner wi = <span class="keyword">new</span> WithInner();</span><br><span class="line">        InheritInner ii = <span class="keyword">new</span> InheritInner(wi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>InheritInner 继承自内部类,在构造函数中需要外部类实体做参数. 内部类是以外部类为基础的, 所以这样做也挺合理.</p>
<h2 id="Can-inner-classes-be-overridden"><a href="#Can-inner-classes-be-overridden" class="headerlink" title="Can inner classes be overridden?"></a>Can inner classes be overridden?</h2><p>内部类并不能像方法那样被重写. 我们准备一个 class Egg, 里面声明一个内部类 Yolk 并在构造函数中调用它. 我们再新建一个类 GigEgg 继承 Egg, 在里面声明一个同名的内部类,试图用类似方法重写的方式覆盖他. 示例如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Yolk y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">Yolk</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Yolk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Egg.Yolk()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Egg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;New Egg()&quot;</span>);</span><br><span class="line">        y = <span class="keyword">new</span> Yolk();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigEgg</span> <span class="keyword">extends</span> <span class="title">Egg</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yolk</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Yolk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;BigEgg.Yolk()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> BigEgg();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// New Egg()</span></span><br><span class="line"><span class="comment">// Egg.Yolk()</span></span><br></pre></td></tr></table></figure>

<p>默认的构造函数会在编译时指定调用基类中的 Yolk 对象. 这个例子表明 JVM 在处理内部类时并没有做什么特殊的操作, 基类和子类中的内部函数时完全隔离的. </p>
<p>This example shows that there isn’t any extra inner-class magic going on when you inherit<br>from the outer class. The two inner classes are completely separate entities, each in its own<br>namespace. However, it’s still possible to explicitly inherit from the inner class: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">Yolk</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Yolk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Egg2.Yolk()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Egg2.Yolk.f()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Yolk y = <span class="keyword">new</span> Yolk();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Egg2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;New Egg2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertYolk</span><span class="params">(Yolk yy)</span> </span>&#123;</span><br><span class="line">        y = yy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        y.f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigEgg2</span> <span class="keyword">extends</span> <span class="title">Egg2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yolk</span> <span class="keyword">extends</span> <span class="title">Egg2</span>.<span class="title">Yolk</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Yolk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;BigEgg2.Yolk()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;BigEgg2.Yolk.f()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BigEgg2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        insertYolk(<span class="keyword">new</span> Yolk());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Egg2 e2 = <span class="keyword">new</span> BigEgg2();</span><br><span class="line">        e2.g();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Egg2.Yolk() &lt;- 初始化子类时调用基类构造,先初始化基类中的 field</span></span><br><span class="line"><span class="comment">// New Egg2() &lt;- 基类构造</span></span><br><span class="line"><span class="comment">// Egg2.Yolk() &lt;- 子类 new Yolk() 先调用 基类 中的 Yolk 构造</span></span><br><span class="line"><span class="comment">// BigEgg2.Yolk() &lt;- 子类构造调用</span></span><br><span class="line"><span class="comment">// BigEgg2.Yolk.f() &lt;- 子类调用 g 方法</span></span><br></pre></td></tr></table></figure>

<p>在上面的例子里面, 我们显示的指定 BigEgg2 中的 Yolk 继承自 Egg2 中的 Yolk, 然后基类中还提供了一个 <code>insertYolk()</code> 来修改基类中内部类的引用. </p>
<h2 id="Local-inner-classes"><a href="#Local-inner-classes" class="headerlink" title="Local inner classes"></a>Local inner classes</h2><p>内部类可以创建在代码块中, 一般常见的是创建在方法里面. 我们无法访问方法体里面的内部类, 因为他并不是 outer class 的一部分. 但是这个内部类还是可以毫无限制的访问外部类的各种信息. </p>
<p>下面是 local inner class 和匿名内部类的对比例子:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalInnerClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Counter <span class="title">getCounter</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// A local inner class:</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">LocalCounter</span> <span class="keyword">implements</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">LocalCounter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Local inner class can have a constructor</span></span><br><span class="line">                System.out.println(<span class="string">&quot;LocalCounter()&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.print(name); <span class="comment">// Access local final</span></span><br><span class="line">                <span class="keyword">return</span> count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LocalCounter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The same thing with an anonymous inner class:</span></span><br><span class="line">    <span class="function">Counter <span class="title">getCounter2</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Counter() &#123;</span><br><span class="line">            <span class="comment">// Anonymous inner class cannot have a named</span></span><br><span class="line">            <span class="comment">// constructor, only an instance initializer:</span></span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Counter()&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.print(name); <span class="comment">// Access local final</span></span><br><span class="line">                <span class="keyword">return</span> count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalInnerClass lic = <span class="keyword">new</span> LocalInnerClass();</span><br><span class="line">        Counter</span><br><span class="line">                c1 = lic.getCounter(<span class="string">&quot;Local inner &quot;</span>),</span><br><span class="line">                c2 = lic.getCounter2(<span class="string">&quot;Anonymous inner &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            System.out.println(c1.next());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            System.out.println(c2.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// LocalCounter()</span></span><br><span class="line"><span class="comment">// Counter()</span></span><br><span class="line"><span class="comment">// Local inner 0</span></span><br><span class="line"><span class="comment">// Local inner 1</span></span><br><span class="line"><span class="comment">// Local inner 2</span></span><br><span class="line"><span class="comment">// Local inner 3</span></span><br><span class="line"><span class="comment">// Local inner 4</span></span><br><span class="line"><span class="comment">// Anonymous inner 5</span></span><br><span class="line"><span class="comment">// Anonymous inner 6</span></span><br><span class="line"><span class="comment">// Anonymous inner 7</span></span><br><span class="line"><span class="comment">// Anonymous inner 8</span></span><br><span class="line"><span class="comment">// Anonymous inner 9</span></span><br></pre></td></tr></table></figure>

<p>上面的例子中, Counter 接口会依次返回 count 值. local inner class 和 匿名内部类都实现了这个接口. 两个内部类逻辑和功能也都一样, 唯一区别是, 匿名内部类他是没有构造函数的, 需要用代码块代替. </p>
<p>如果你需要创建多个实例的话, 你也要使用 local inner class, 你用 anonymous 是建不出来多个实例的. </p>
<h2 id="Inner-class-identifiers"><a href="#Inner-class-identifiers" class="headerlink" title="Inner-class identifiers"></a>Inner-class identifiers</h2><p>每个类在编译后都会生成一个 <code>.class</code> 文件保存对应的类信息. 内部类也一样,格式为 <code>外部类$内部类</code> 下面是 LocalInnerClass.java 编译后的文件:</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Counter.class</span><br><span class="line">LocalInnerClass$l.class</span><br><span class="line">LocallnnerClassSlLocalCounter.class</span><br><span class="line">LocallnnerClass.class</span><br></pre></td></tr></table></figure>

<p>如果是内部匿名类, 类名由数字代替. 如果是多层嵌套的内部类, 类名间链接多个 <code>$</code> 符号. </p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>接口和内部类是 Java 特有的, 你在 C++ 中找不到类似的概念, 他们帮助我们实现多重继承的问题而且实现上要比 C++ 的优雅. </p>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>inner class</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 - Type Information 类型信息</title>
    <url>/hexo/2020/12/22/TIJ4-type-information/</url>
    <content><![CDATA[<ul>
<li><a href="#前述">前述</a></li>
<li><a href="#the-need-for-rtti">The need for RTTI</a></li>
<li><a href="#the-class-object">The Class object</a><ul>
<li><a href="#class-literals字面量">Class literals(字面量)</a></li>
<li><a href="#generic-class-references">Generic class references</a></li>
<li><a href="#new-cast-syntax">New cast syntax</a></li>
</ul>
</li>
<li><a href="#checking-before-a-cast">Checking before a cast</a><ul>
<li><a href="#using-class-literals">Using class literals</a></li>
<li><a href="#a-dynamic-instanceof">A dynamic instanceof</a></li>
<li><a href="#counting-recursively">Counting recursively</a></li>
</ul>
</li>
<li><a href="#registered-factories">Registered factories</a></li>
<li><a href="#instanceof-vs-class-equivalence">instanceof vs. Class equivalence</a></li>
</ul>
<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>Runtime type information(RTTI) allows you to discover and use type information while a program is running.</p>
<p>两种使用方式：</p>
<ol>
<li>传统模式，假定你在编译期就知道所有用到的类型</li>
<li>反射模式，你只在运行时才知道类信息</li>
</ol>
<h2 id="The-need-for-RTTI"><a href="#The-need-for-RTTI" class="headerlink" title="The need for RTTI"></a>The need for RTTI</h2><p>简单的继承关系示例：</p>
<p>基类：Shape 包含方法 draw()， 子类：Circle, Square, Triangle</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">&quot;.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Square&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Triangle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shapes</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Shape&gt; shapeList = Arrays.asList(<span class="keyword">new</span> Circle(), <span class="keyword">new</span> Square(), <span class="keyword">new</span> Triangle());</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : shapeList) shape.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Circle.draw()</span></span><br><span class="line"><span class="comment">// Square.draw()</span></span><br><span class="line"><span class="comment">// Triangle.draw()</span></span><br></pre></td></tr></table></figure>

<p>在上面的例子中，我本将子类结合 List 强转成父类，然后统一做操作，这种做法更易读，容易维护。这也是面向对象的目标之一，但是如果我想在运行时得知这个对象的具体类型，应该怎么做？</p>
<h2 id="The-Class-object"><a href="#The-Class-object" class="headerlink" title="The Class object"></a>The Class object</h2><p>在 Java 中有一个神奇的类他叫 Class 类，所有创建类实例的行为都和他有关。 Java 的 RTTI 特性也是通过它来实现的。当你编译一个类的时候，JVM 会通过 class 创建一个对应的 Class 类来存储对应的信息。</p>
<p>类加载器由一组 class loaders 组成，但是已有一个 primordial class loader，他是 JVM 的一部分，他会加载所有的 trusted classes，这写 trusted class 包括 Java API classes, 比如本地磁盘上的 classes。通常你不需要自己新加 class loader 但是如果有特殊需要，想加也是可以的。</p>
<p>只有当第一次使用的时候，JVM 才会加载对应的 class。这个行为发生在类第一次关联到 static 实体， 构造函数也是一个特殊的 static method，换句话说，当我们 new 一个对象的时候，加载器就会加载对应的 class。</p>
<p>Java 中只允许 Class 加载一次，加载完成之后，以后所有这个 class 对应的实体都是通过它来创建的。</p>
<p>PS：这里翻译很生硬，缺少很多类加载的相关知识，可以看过 JVM 那本书之后，再来完善一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Candy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Loading Candy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gum</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Loading Gum&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cookie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Loading Cookie&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SweetShop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;inside main&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Candy();</span><br><span class="line">        System.out.println(<span class="string">&quot;After creating Candy&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;Gum&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Couldn’t find Gum&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;After Class.forName(\&quot;Gum\&quot;)&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Cookie();</span><br><span class="line">        System.out.println(<span class="string">&quot;After creating Cookie&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// inside main</span></span><br><span class="line"><span class="comment">// Loading Candy</span></span><br><span class="line"><span class="comment">// After creating Candy</span></span><br><span class="line"><span class="comment">// Couldn’t find Gum</span></span><br><span class="line"><span class="comment">// After Class.forName(&quot;Gum&quot;)</span></span><br><span class="line"><span class="comment">// Loading Cookie</span></span><br><span class="line"><span class="comment">// After creating Cookie</span></span><br></pre></td></tr></table></figure>

<p>当各个类在第一次调用时对应的静态代码块就会被调用，输出我们定制的信息。上例有一个比较特殊的语法 <code>forName()</code> 我们可以通过这个方法拿到对应的 Class 引用，当然如果找不到会抛 <code>ClassNotFoundExcepiton</code>。如果实体类已经创建了，你也可以通过 Object.getClass() 来拿到对应的类应用。</p>
<p>上例中通过 forName 调用 Gum 类的代码段，按理说是不会报错的，可能是例子中没有给全路径的关系。示例中应该写成连续调用两次，但是 log 只打印一次这样的形式可能更好。</p>
<p>下面这个示例展示了部分 Class 中的常用方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> samples;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">HasBatteries</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Waterproof</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shoots</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toy</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Comment out the following default constructor</span></span><br><span class="line">    <span class="comment">// to see NoSuchMethodError from (*1*)</span></span><br><span class="line">    Toy() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Toy(<span class="keyword">int</span> i) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FancyToy</span> <span class="keyword">extends</span> <span class="title">Toy</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">HasBatteries</span>, <span class="title">Waterproof</span>, <span class="title">Shoots</span> </span>&#123;</span><br><span class="line">    FancyToy() &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printlnInfo</span><span class="params">(Class cc)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Class name: &quot;</span> + cc.getName() +</span><br><span class="line">                <span class="string">&quot; is interface? [&quot;</span> + cc.isInterface() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Simple name: &quot;</span> + cc.getSimpleName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Canonical name : &quot;</span> + cc.getCanonicalName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Class.forName(<span class="string">&quot;samples.FancyToy&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Can’t find FancyToy&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        printlnInfo(c);</span><br><span class="line">        <span class="keyword">for</span> (Class face : c.getInterfaces())</span><br><span class="line">            printlnInfo(face);</span><br><span class="line">        Class up = c.getSuperclass();</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Requires default constructor:</span></span><br><span class="line">            obj = up.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Cannot instantiate&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Cannot access&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        printlnInfo(obj.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Class name: samples.FancyToy is interface? [false]</span></span><br><span class="line"><span class="comment">// Simple name: FancyToy</span></span><br><span class="line"><span class="comment">// Canonical name : samples.FancyToy</span></span><br><span class="line"><span class="comment">// Class name: samples.HasBatteries is interface? [true]</span></span><br><span class="line"><span class="comment">// Simple name: HasBatteries</span></span><br><span class="line"><span class="comment">// Canonical name : samples.HasBatteries</span></span><br><span class="line"><span class="comment">// Class name: samples.Waterproof is interface? [true]</span></span><br><span class="line"><span class="comment">// Simple name: Waterproof</span></span><br><span class="line"><span class="comment">// Canonical name : samples.Waterproof</span></span><br><span class="line"><span class="comment">// Class name: samples.Shoots is interface? [true]</span></span><br><span class="line"><span class="comment">// Simple name: Shoots</span></span><br><span class="line"><span class="comment">// Canonical name : samples.Shoots</span></span><br><span class="line"><span class="comment">// Class name: samples.Toy is interface? [false]</span></span><br><span class="line"><span class="comment">// Simple name: Toy</span></span><br><span class="line"><span class="comment">// Canonical name : samples.Toy</span></span><br></pre></td></tr></table></figure>

<ul>
<li>getSimpleName(): 输出类名</li>
<li>getCanonicalName(): 输出全路径名</li>
<li>islnterface(): 是否是接口</li>
<li>getlnterfaces(): 拿到类实现的接口</li>
<li>getSuperclass(): 拿到父类 Class 引用</li>
<li>newlnstance(): 创建实例，但是这个方法要求对应的类必须有<strong>默认构造函数</strong></li>
</ul>
<h3 id="Class-literals-字面量"><a href="#Class-literals-字面量" class="headerlink" title="Class literals(字面量)"></a>Class literals(字面量)</h3><p>除了上面的方法，你还可以通过使用类的字面量来拿到 Class 引用，相比与 forName() 的形式，它更简单，安全，不需要 try-catch 块，效率也更高。</p>
<p>普通类，接口，数组和基本数据类型都可以使用这个语法，对于包装类，它内部有一个 TYPE field 可以指向对应的 Class。</p>
<table>
<thead>
<tr>
<th align="left">primitive</th>
<th align="left">wrapper</th>
</tr>
</thead>
<tbody><tr>
<td align="left">boolean.class</td>
<td align="left">Boolean.TYPE</td>
</tr>
<tr>
<td align="left">char.class</td>
<td align="left">Char.TYPE</td>
</tr>
<tr>
<td align="left">byte.class</td>
<td align="left">Byte.TYPE</td>
</tr>
<tr>
<td align="left">short.class</td>
<td align="left">Short.TYPE</td>
</tr>
<tr>
<td align="left">int.class</td>
<td align="left">Integer.TYPE</td>
</tr>
<tr>
<td align="left">long.class</td>
<td align="left">Long.TYPE</td>
</tr>
<tr>
<td align="left">float.class</td>
<td align="left">Float.TYPE</td>
</tr>
<tr>
<td align="left">double.class</td>
<td align="left">Double.TYPE</td>
</tr>
<tr>
<td align="left">void.class</td>
<td align="left">Void.TYPE</td>
</tr>
</tbody></table>
<p>通常建议使用 ‘.class’ 的这种语法，它和我们平时的使用方式更统一。调用 ‘.class’ 的时候并不会自动初始化一个 Class 对象。在初始化 Class 时有三个步骤：</p>
<ol>
<li>Loading, which is performed by the class loader. 找到生成 Class 对应的字节码</li>
<li>Linking. 验证字节码，为静态变量分配空间，解决依赖问题</li>
<li>Initialization. 如果还有父类，父类会先初始化，然后执行静态构造器和代码块</li>
</ol>
<p>初始化会延期，直到确定第一个静态方法(构造函数是一个隐式的静态方法)或非常量的静态 field 引用：</p>
<p>示例说明：</p>
<p>我们声明了三个 Initabl 类做测试，每个类都包含一个 static 代码段答应测试 log 来显示类初始化是否被执行。</p>
<ul>
<li>Initable 包含两个常量，第一个静态常量，第二个是计算后才能得到的值。通过 class 调用变量一时，类不会被初始化。调用第二个变量时，会调用到静态方法，类初始化被触发</li>
<li>在调用 Initable2.staticNonFinal 时，由于他是一个静态非常量，所以初始化被触发</li>
<li>Initable3 测试时，通过 forName 调用，初始化必定被触发</li>
</ul>
<p>final 即 常量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> review;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Initable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> staticFinal = <span class="number">47</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> staticFinal2 =</span><br><span class="line">            ClassInitialization.rand.nextInt(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Initializing Initable&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Initable2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> staticNonFinal = <span class="number">147</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Initializing Initable2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Initable3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> staticNonFinal = <span class="number">74</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Initializing Initable3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassInitialization</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class initable = Initable.class;</span><br><span class="line">        System.out.println(<span class="string">&quot;After creating Initable ref&quot;</span>);</span><br><span class="line">        <span class="comment">// Does not trigger initialization:</span></span><br><span class="line">        System.out.println(Initable.staticFinal);</span><br><span class="line">        <span class="comment">// Does trigger initialization:</span></span><br><span class="line">        System.out.println(Initable.staticFinal2);</span><br><span class="line">        <span class="comment">// Does trigger initialization:</span></span><br><span class="line">        System.out.println(Initable2.staticNonFinal);</span><br><span class="line">        Class initable3 = Class.forName(<span class="string">&quot;review.Initable3&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;After creating Initable3 ref&quot;</span>);</span><br><span class="line">        System.out.println(Initable3.staticNonFinal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// After creating Initable ref</span></span><br><span class="line"><span class="comment">// 47</span></span><br><span class="line"><span class="comment">// Initializing Initable</span></span><br><span class="line"><span class="comment">// 258</span></span><br><span class="line"><span class="comment">// Initializing Initable2</span></span><br><span class="line"><span class="comment">// 147</span></span><br><span class="line"><span class="comment">// Initializing Initable3</span></span><br><span class="line"><span class="comment">// After creating Initable3 ref</span></span><br><span class="line"><span class="comment">// 74</span></span><br></pre></td></tr></table></figure>

<p>实际上，初始化会尽可能晚的执行。从 initable 的例子可以看出，调用 ‘.class’ 语法并不会导致一个 Class 的初始化，但是从 initable3 可以看出 Class.forName() 会直接导致初始化。</p>
<p>如果调用的是 static final 这种编译期常量，如 Initable.staticFinal 所示，那么该值也可以在类为初始化时就可用。</p>
<p>如果变量不是 final 类型的，那么在访问之前就需要进行 link 和 initialization 动作，如 Initable2.staticNonFinal 所示。</p>
<h3 id="Generic-class-references"><a href="#Generic-class-references" class="headerlink" title="Generic class references"></a>Generic class references</h3><p>具体的 Class 对象包含了静态变量，方法等创建一个对象所需要的所有必要元素。但是在 Java 5 之前这种 reference 都是 object 类型的，但是 Java 5 之后，通过引入泛型，我们可以用一种更特殊的方式指代它。</p>
<p>实例说明：</p>
<p>同样是持有 int 的 class reference，如果没有采用泛型，reference 之间可以随便关联，如果带有泛型则会进行类型检测。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClassReferences</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class intClass = <span class="keyword">int</span>.class;</span><br><span class="line">        Class&lt;Integer&gt; genericIntClass = <span class="keyword">int</span>.class;</span><br><span class="line">        genericIntClass = Integer.class; // Same thing</span><br><span class="line">        intClass = <span class="keyword">double</span>.class;</span><br><span class="line">        <span class="comment">// genericIntClass = double.class; // Illegal</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你想要更宽松的类型检测，可以使用类似 <code>Class&lt;? extends Number&gt; genericNumberClass = int.class;</code> 的语法。</p>
<p>在 Java 5 中 Class&lt;?&gt; 效果上和 Class 等价，但是前者没有 warning, 因语义上他更清晰的表明，这个 Class 不是一个 non-specific 的类。</p>
<p>Class 声明中加入泛型语法的唯一作用就是在编译期进行类型检测。</p>
<p>实例说明：</p>
<p>简单的泛型使用案例，就是没什么逻辑，只是使用，看起来感觉没什么目的，比较难记忆。CountedInteger 的 counter 属性是一个静态变量，充当实例的 id 的角色。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountedInteger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Long.toString(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilledList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FilledList</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">create</span><span class="params">(<span class="keyword">int</span> nElements)</span> </span>&#123;</span><br><span class="line">        List&lt;T&gt; result = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nElements; i++)</span><br><span class="line">                result.add(type.newInstance());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FilledList&lt;CountedInteger&gt; fl =</span><br><span class="line">                <span class="keyword">new</span> FilledList&lt;CountedInteger&gt;(CountedInteger.class);</span><br><span class="line">        System.out.println(fl.create(<span class="number">15</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]</span></span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ol>
<li>CountedInteger 必须有默认的无参构造函数，不然嗲用 nweInstance 会抛错</li>
<li>如果带有泛型，newInstance 直接返回对应的对象，而不是 Object 对象</li>
</ol>
<p>对应下面的例子，up 在指定类型的时候用的是 <code>&lt;? super FancyToy&gt;</code> (FancyToy 的超类)，并不能表示为直接父类，所以下面的 newInstanc() 对应的类型为 Object。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericToyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;FancyToy&gt; ftClass = FancyToy.class;</span><br><span class="line">        <span class="comment">// Produces exact type:</span></span><br><span class="line">        FancyToy fancyToy = ftClass.newInstance();</span><br><span class="line">        Class&lt;? <span class="keyword">super</span> FancyToy&gt; up = ftClass.getSuperclass();</span><br><span class="line">        <span class="comment">// This won’t compile:</span></span><br><span class="line">        <span class="comment">// Class&lt;Toy&gt; up2 = ftClass.getSuperclass();</span></span><br><span class="line">        <span class="comment">// Only produces Object:</span></span><br><span class="line">        Object obj = up.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="New-cast-syntax"><a href="#New-cast-syntax" class="headerlink" title="New cast syntax"></a>New cast syntax</h3><p>Java 5 中还为 Class 添加了 cast(object) 方法用于将参数强转为 Class 对应的类实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span> <span class="keyword">extends</span> <span class="title">Building</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassCasts</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Building b = <span class="keyword">new</span> House();</span><br><span class="line">        Class&lt;House&gt; houseType = House.class;</span><br><span class="line">        House h = houseType.cast(b);</span><br><span class="line">        h = (House) b; <span class="comment">// ... or just do this.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用括号的那种强转方式要比调用方法的方便很多，需要注意的是，一开始 new 的时候对应的实现是 House 才能在后面进行 b 强转成 a 的，如果你一开始声明为 new Building() 而且两边的方法有出入，运行时会抛异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span> <span class="keyword">extends</span> <span class="title">Building</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m1...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassCasts</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Building b = <span class="keyword">new</span> Building();</span><br><span class="line">        ((House)b).method01();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Exception in thread &quot;main&quot; java.lang.ClassCastException</span></span><br><span class="line"><span class="comment">// at review.ClassCasts.main(ClassCasts.java:15)</span></span><br></pre></td></tr></table></figure>

<h2 id="Checking-before-a-cast"><a href="#Checking-before-a-cast" class="headerlink" title="Checking before a cast"></a>Checking before a cast</h2><p>父类强转到子类的过程叫做 downcast, java 中如果没有显示的 check 的话，这种强转是不允许的。这里就要提到 RTTI 的第三种模式 instanceof 语法。<code>if (x instanceof Dog) ((Dog)x).bark();</code></p>
<p>实例说明：</p>
<ol>
<li>Individual 具体 code 在 Containers in Depth 那一个章节，只需要知道它里面有一个 id() 方法可以给每个继承这个累的对象一个唯一的值做 id, 构造函数的参数则是自定义的 name, 可以重复的</li>
<li>定义了一大串有继承关系的类，继承关系如下</li>
<li>定义一个抽象构造器 PetCreator 创建声明的这些类</li>
<li>实现这个抽象构造器 ForNameCreator，其实就是将声明的类通过 Class.forName 拿到引用再塞到 type() 方法的返回值中</li>
<li>便携测试程序 PetCount, 创建一个内部类 PetCounter 统计 pet 的出现次数，有一个静态方法 countPets 传入 PetCreater 用来随机创建 Pet 对象</li>
</ol>
<p>individual -&gt; person<br>        |-&gt; pet -&gt; dog - mutt(串串)<br>            ｜      ｜-&gt; pug(哈巴狗)<br>            ｜-&gt; cat -&gt; EgyptianMau (埃及猫)<br>            ｜    ｜-&gt; Manx(曼岛猫) -&gt; Cymric(威尔士猫)<br>            ｜-&gt; Rodent 啮齿动物 -&gt; Rat 鼠 -&gt; Mouse 小鼠<br>                    |-&gt; Hamster 仓鼠</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Individual</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Individual</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Individual</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ‘name’ is optional:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Individual</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName() +</span><br><span class="line">                (name == <span class="keyword">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot; &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o <span class="keyword">instanceof</span> Individual &amp;&amp;</span><br><span class="line">                id == ((Individual) o).id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">17</span>;</span><br><span class="line">        <span class="keyword">if</span> (name != <span class="keyword">null</span>)</span><br><span class="line">            result = <span class="number">37</span> * result + name.hashCode();</span><br><span class="line">        result = <span class="number">37</span> * result + (<span class="keyword">int</span>) id;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Individual arg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Compare by class name first:</span></span><br><span class="line">        String first = getClass().getSimpleName();</span><br><span class="line">        String argFirst = arg.getClass().getSimpleName();</span><br><span class="line">        <span class="keyword">int</span> firstCompare = first.compareTo(argFirst);</span><br><span class="line">        <span class="keyword">if</span> (firstCompare != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> firstCompare;</span><br><span class="line">        <span class="keyword">if</span> (name != <span class="keyword">null</span> &amp;&amp; arg.name != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> secondCompare = name.compareTo(arg.name);</span><br><span class="line">            <span class="keyword">if</span> (secondCompare != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> secondCompare;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (arg.id &lt; id ? -<span class="number">1</span> : (arg.id == id ? <span class="number">0</span> : <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Individual</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> <span class="keyword">extends</span> <span class="title">Individual</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pet</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mutt</span> <span class="keyword">extends</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mutt</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mutt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pug</span> <span class="keyword">extends</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pug</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EgyptianMau</span> <span class="keyword">extends</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EgyptianMau</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EgyptianMau</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manx</span> <span class="keyword">extends</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manx</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cymric</span> <span class="keyword">extends</span> <span class="title">Manx</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cymric</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cymric</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rodent</span> <span class="keyword">extends</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rodent</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rodent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rat</span> <span class="keyword">extends</span> <span class="title">Rodent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rat</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">Rodent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mouse</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hamster</span> <span class="keyword">extends</span> <span class="title">Rodent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hamster</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hamster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PetCreator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模版方法 模式</span></span><br><span class="line">    <span class="comment">// The List of the different types of Pet to create:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;Class&lt;? extends Pet&gt;&gt; types();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">randomPet</span><span class="params">()</span> </span>&#123; <span class="comment">// Create one random Pet</span></span><br><span class="line">        <span class="keyword">int</span> n = rand.nextInt(types().size());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> types().get(n).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Pet[] createArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">        Pet[] result = <span class="keyword">new</span> Pet[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            result[i] = randomPet();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Pet&gt; <span class="title">arrayList</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Pet&gt; result = <span class="keyword">new</span> ArrayList&lt;Pet&gt;();</span><br><span class="line">        Collections.addAll(result, createArray(size));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForNameCreator</span> <span class="keyword">extends</span> <span class="title">PetCreator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Class&lt;? extends Pet&gt;&gt; types =</span><br><span class="line">            <span class="keyword">new</span> ArrayList&lt;Class&lt;? extends Pet&gt;&gt;();</span><br><span class="line">    <span class="comment">// Types that you want to be randomly created:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] typeNames = &#123;</span><br><span class="line">            <span class="string">&quot;review.Mutt&quot;</span>,</span><br><span class="line">            <span class="string">&quot;review.Pug&quot;</span>,</span><br><span class="line">            <span class="string">&quot;review.EgyptianMau&quot;</span>,</span><br><span class="line">            <span class="string">&quot;review.Manx&quot;</span>,</span><br><span class="line">            <span class="string">&quot;review.Cymric&quot;</span>,</span><br><span class="line">            <span class="string">&quot;review.Rat&quot;</span>,</span><br><span class="line">            <span class="string">&quot;review.Mouse&quot;</span>,</span><br><span class="line">            <span class="string">&quot;review.Hamster&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (String name : typeNames)</span><br><span class="line">                types.add((Class&lt;? extends Pet&gt;) Class.forName(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        loader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Class&lt;? extends Pet&gt;&gt; types() &#123;</span><br><span class="line">        <span class="keyword">return</span> types;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetCount</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PetCounter</span> <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">String</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">            Integer quantity = get(type);</span><br><span class="line">            <span class="keyword">if</span>(quantity == <span class="keyword">null</span>)</span><br><span class="line">                put(type, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                put(type, quantity + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">countPets</span><span class="params">(PetCreator creator)</span> </span>&#123;</span><br><span class="line">        PetCounter counter= <span class="keyword">new</span> PetCounter();</span><br><span class="line">        <span class="keyword">for</span>(Pet pet : creator.createArray(<span class="number">20</span>)) &#123;</span><br><span class="line">            <span class="comment">// List each individual pet:</span></span><br><span class="line">            System.out.println(pet.getClass().getSimpleName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Pet)</span><br><span class="line">                counter.count(<span class="string">&quot;Pet&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Dog)</span><br><span class="line">                counter.count(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Mutt)</span><br><span class="line">                counter.count(<span class="string">&quot;Mutt&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Pug)</span><br><span class="line">                counter.count(<span class="string">&quot;Pug&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Cat)</span><br><span class="line">                counter.count(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Manx)</span><br><span class="line">                counter.count(<span class="string">&quot;EgyptianMau&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Manx)</span><br><span class="line">                counter.count(<span class="string">&quot;Manx&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Manx)</span><br><span class="line">                counter.count(<span class="string">&quot;Cymric&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Rodent)</span><br><span class="line">                counter.count(<span class="string">&quot;Rodent&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Rat)</span><br><span class="line">                counter.count(<span class="string">&quot;Rat&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Mouse)</span><br><span class="line">                counter.count(<span class="string">&quot;Mouse&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Hamster)</span><br><span class="line">                counter.count(<span class="string">&quot;Hamster&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Show the counts:</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(counter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        countPets(<span class="keyword">new</span> ForNameCreator());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Rat </span></span><br><span class="line"><span class="comment">// Manx </span></span><br><span class="line"><span class="comment">// Cymric </span></span><br><span class="line"><span class="comment">// Mutt </span></span><br><span class="line"><span class="comment">// Pug </span></span><br><span class="line"><span class="comment">// Cymric </span></span><br><span class="line"><span class="comment">// Pug </span></span><br><span class="line"><span class="comment">// Manx </span></span><br><span class="line"><span class="comment">// Cymric </span></span><br><span class="line"><span class="comment">// Rat </span></span><br><span class="line"><span class="comment">// EgyptianMau </span></span><br><span class="line"><span class="comment">// Hamster </span></span><br><span class="line"><span class="comment">// EgyptianMau </span></span><br><span class="line"><span class="comment">// Mutt </span></span><br><span class="line"><span class="comment">// Mutt </span></span><br><span class="line"><span class="comment">// Cymric </span></span><br><span class="line"><span class="comment">// Mouse </span></span><br><span class="line"><span class="comment">// Pug </span></span><br><span class="line"><span class="comment">// Mouse </span></span><br><span class="line"><span class="comment">// Cymric </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;EgyptianMau=7, Pug=3, Rat=2, Cymric=7, Mouse=2, Cat=9, Manx=7, Rodent=5, Mutt=3, Dog=6, Pet=20, Hamster=1&#125;</span></span><br></pre></td></tr></table></figure>

<p>提示：当你的程序中充满了大量的 instanceof 判断，那么你的成程序很可能有缺陷</p>
<h3 id="Using-class-literals"><a href="#Using-class-literals" class="headerlink" title="Using class literals"></a>Using class literals</h3><p>如果我们使用 PetCreator 的类字面量(.class)来重构它的实现，省去了 try-catch block, 而且表达的语义更清晰, 程序会更明了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiteralPetCreator</span> <span class="keyword">extends</span> <span class="title">PetCreator</span> </span>&#123;</span><br><span class="line">    <span class="comment">// No try block needed.</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Class&lt;? extends Pet&gt;&gt; allTypes =</span><br><span class="line">            Collections.unmodifiableList(Arrays.asList(</span><br><span class="line">                    Pet.class, Dog.class, Cat.class, Rodent.class,</span><br><span class="line">                    Mutt.class, Pug.class, EgyptianMau.class, Manx.class,</span><br><span class="line">                    Cymric.class, Rat.class, Mouse.class, Hamster.class));</span><br><span class="line">    <span class="comment">// Types for random creation:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Class&lt;? extends Pet&gt;&gt; types =</span><br><span class="line">            allTypes.subList(allTypes.indexOf(Mutt.class), allTypes.size());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Class&lt;? extends Pet&gt;&gt; types() &#123;</span><br><span class="line">        <span class="keyword">return</span> types;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(types);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// [class review.Mutt, class review.Pug, class review.EgyptianMau, class review.Manx, class review.Cymric, class review.Rat, class review.Mouse, class review.Hamster]</span></span><br></pre></td></tr></table></figure>

<p>新建一个 Pets 工具类用来创建创建 pet, 书上管这种方式叫做 Facade 模式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pets</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> PetCreator creator =</span><br><span class="line">            <span class="keyword">new</span> LiteralPetCreator();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pet <span class="title">randomPet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> creator.randomPet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Pet[] createArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">        <span class="keyword">return</span> creator.createArray(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Pet&gt; <span class="title">arrayList</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> creator.arrayList(size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This also provides indirection to randomPet( ), createArray( ) and arrayList( ).<br>Because PetCount.countPets( ) takes a PetCreator argument, we can easily test the<br>LiteralPetCreator (via the above Facade): </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetCount2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PetCount.countPets(Pets.creator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="A-dynamic-instanceof"><a href="#A-dynamic-instanceof" class="headerlink" title="A dynamic instanceof"></a>A dynamic instanceof</h3><p>新建一个 PetCount 继承自 LinedHashMap, 这种从现成的 Map 对象继承的做法我以前到是没怎么见过，也没怎么用过，长见识了，而且用起来挺方便的。</p>
<p><code>Class.isInstance()</code> 效果上和 <code>instanceof</code> 等价，继承 map 之后通过调用 entrySet() 拿到所有的 entry, 然后通过范型遍历，节省了很多代码，和之前那一串 forName 相比干净了很多。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetCount3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PetCounter</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">Class</span>&lt;? <span class="keyword">extends</span> <span class="title">Pet</span>&gt;,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PetCounter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(LiteralPetCreator.allTypes.stream().collect(Collectors.toMap(Function.identity(), x-&gt;<span class="number">0</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(Pet pet)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Class.isInstance() eliminates instanceof:</span></span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;Class&lt;? extends Pet&gt;, Integer&gt; pair : entrySet())</span><br><span class="line">                <span class="keyword">if</span>(pair.getKey().isInstance(pet))</span><br><span class="line">                    put(pair.getKey(), pair.getValue() + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            StringBuilder result = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;Class&lt;? extends Pet&gt;,Integer&gt; pair</span><br><span class="line">                    : entrySet()) &#123;</span><br><span class="line">                result.append(pair.getKey().getSimpleName());</span><br><span class="line">                result.append(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">                result.append(pair.getValue());</span><br><span class="line">                result.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            result.delete(result.length()-<span class="number">2</span>, result.length());</span><br><span class="line">            result.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PetCounter petCount = <span class="keyword">new</span> PetCounter();</span><br><span class="line">        <span class="keyword">for</span>(Pet pet : Pets.createArray(<span class="number">20</span>)) &#123;</span><br><span class="line">            System.out.println(pet.getClass().getSimpleName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            petCount.count(pet);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(petCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Counting-recursively"><a href="#Counting-recursively" class="headerlink" title="Counting recursively"></a>Counting recursively</h3><p>除了 Class.isInstance() 还可以使用 isAssignFrom 来做类型判断，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeCounter</span> <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">Class</span>&lt;?&gt;,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; baseType;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TypeCounter</span><span class="params">(Class&lt;?&gt; baseType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.baseType = baseType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; type = obj.getClass();</span><br><span class="line">        <span class="keyword">if</span>(!baseType.isAssignableFrom(type))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(obj + <span class="string">&quot; incorrect type: &quot;</span></span><br><span class="line">                    + type + <span class="string">&quot;, should be type or subtype of &quot;</span></span><br><span class="line">                    + baseType);</span><br><span class="line">        countClass(type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">countClass</span><span class="params">(Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line">        Integer quantity = get(type);</span><br><span class="line">        put(type, quantity == <span class="keyword">null</span> ? <span class="number">1</span> : quantity + <span class="number">1</span>);</span><br><span class="line">        Class&lt;?&gt; superClass = type.getSuperclass();</span><br><span class="line">        <span class="keyword">if</span>(superClass != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                baseType.isAssignableFrom(superClass))</span><br><span class="line">            countClass(superClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Class&lt;?&gt;,Integer&gt; pair : entrySet()) &#123;</span><br><span class="line">            result.append(pair.getKey().getSimpleName());</span><br><span class="line">            result.append(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            result.append(pair.getValue());</span><br><span class="line">            result.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result.delete(result.length()-<span class="number">2</span>, result.length());</span><br><span class="line">        result.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetCount4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TypeCounter counter = <span class="keyword">new</span> TypeCounter(Pet.class);</span><br><span class="line">        <span class="keyword">for</span>(Pet pet : Pets.createArray(<span class="number">20</span>)) &#123;</span><br><span class="line">            System.out.println(pet.getClass().getSimpleName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            counter.count(pet);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(counter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这几个示例其实就说明了一个点，使用 isInstance() 和 isAssignFrom() 可以绕开 forName 使得代码整洁，好看很多。整洁好看也就意味着更少的维护成本。</p>
<h2 id="Registered-factories"><a href="#Registered-factories" class="headerlink" title="Registered factories"></a>Registered factories</h2><p>上面的例子有一个问题，就是每次你新建一个 Pets 的子类，你必须去 LiteralPetCreator 中将这个新建的 Class 手动添加进去，未免有点累赘。这里有两种解决方案，一种就是新写一个工具类遍历代码，找到 Pets 的子类统一处理，另一种方案就是将所有的类放到一个地方统一管理，基类就是很好的一个地方，示例如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="function">T <span class="title">create</span><span class="params">()</span></span>; &#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> List&lt;Factory&lt;? extends Part&gt;&gt; partFactories =</span><br><span class="line">            <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// Collections.addAll() gives an &quot;unchecked generic</span></span><br><span class="line">        <span class="comment">// array creation ... for varargs parameter&quot; warning.</span></span><br><span class="line">        partFactories.add(<span class="keyword">new</span> FuelFilter.Factory());</span><br><span class="line">        partFactories.add(<span class="keyword">new</span> AirFilter.Factory());</span><br><span class="line">        partFactories.add(<span class="keyword">new</span> CabinAirFilter.Factory());</span><br><span class="line">        partFactories.add(<span class="keyword">new</span> OilFilter.Factory());</span><br><span class="line">        partFactories.add(<span class="keyword">new</span> FanBelt.Factory());</span><br><span class="line">        partFactories.add(<span class="keyword">new</span> PowerSteeringBelt.Factory());</span><br><span class="line">        partFactories.add(<span class="keyword">new</span> GeneratorBelt.Factory());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Part <span class="title">createRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = rand.nextInt(partFactories.size());</span><br><span class="line">        <span class="keyword">return</span> partFactories.get(n).create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Filter</span> <span class="keyword">extends</span> <span class="title">Part</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FuelFilter</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Create a Class Factory for each specific type:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">review</span>.<span class="title">Factory</span>&lt;<span class="title">FuelFilter</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> FuelFilter <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FuelFilter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirFilter</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">review</span>.<span class="title">Factory</span>&lt;<span class="title">AirFilter</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> AirFilter <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AirFilter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CabinAirFilter</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">review</span>.<span class="title">Factory</span>&lt;<span class="title">CabinAirFilter</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> CabinAirFilter <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CabinAirFilter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OilFilter</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">review</span>.<span class="title">Factory</span>&lt;<span class="title">OilFilter</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> OilFilter <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> OilFilter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Belt</span> <span class="keyword">extends</span> <span class="title">Part</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FanBelt</span> <span class="keyword">extends</span> <span class="title">Belt</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">review</span>.<span class="title">Factory</span>&lt;<span class="title">FanBelt</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> FanBelt <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FanBelt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneratorBelt</span> <span class="keyword">extends</span> <span class="title">Belt</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">review</span>.<span class="title">Factory</span>&lt;<span class="title">GeneratorBelt</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> GeneratorBelt <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> GeneratorBelt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PowerSteeringBelt</span> <span class="keyword">extends</span> <span class="title">Belt</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">review</span>.<span class="title">Factory</span>&lt;<span class="title">PowerSteeringBelt</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> PowerSteeringBelt <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PowerSteeringBelt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisteredFactories</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            System.out.println(Part.createRandom());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// GeneratorBelt</span></span><br><span class="line"><span class="comment">// CabinAirFilter</span></span><br><span class="line"><span class="comment">// GeneratorBelt</span></span><br><span class="line"><span class="comment">// AirFilter</span></span><br><span class="line"><span class="comment">// PowerSteeringBelt</span></span><br><span class="line"><span class="comment">// CabinAirFilter</span></span><br><span class="line"><span class="comment">// FuelFilter</span></span><br><span class="line"><span class="comment">// PowerSteeringBelt</span></span><br><span class="line"><span class="comment">// PowerSteeringBelt</span></span><br><span class="line"><span class="comment">// FuelFilter</span></span><br></pre></td></tr></table></figure>

<h2 id="instanceof-vs-Class-equivalence"><a href="#instanceof-vs-Class-equivalence" class="headerlink" title="instanceof vs. Class equivalence"></a>instanceof vs. Class equivalence</h2>]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>type</tag>
      </tags>
  </entry>
  <entry>
    <title>Java class 文件架构摘要</title>
    <url>/hexo/2020/11/19/Java-class-file-structure/</url>
    <content><![CDATA[<p>目标：通过阅读 深入理解 JVM 虚拟机 第三版 的第 6 章，结合 ASM 里的 Reader 和 Visitor 对 class 文件有个一比较深入的了解。</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV12y4y1B7pn?p=12">bilibili 参考视频</a>，很棒，白嫖</li>
</ul>
<h2 id="6-2-无关性的基石"><a href="#6-2-无关性的基石" class="headerlink" title="6.2 无关性的基石"></a>6.2 无关性的基石</h2><p>Java 虚拟机不与包括 Java 语言在内的任何语言绑定，它只与 Class 文件这种特定的二进制文件格式所关联，Class 文件中包含了 Java 虚拟机指令集，符号表以及若干其他辅助信息。</p>
<h2 id="6-3-Class-类文件的结构"><a href="#6-3-Class-类文件的结构" class="headerlink" title="6.3 Class 类文件的结构"></a>6.3 Class 类文件的结构</h2><blockquote>
<p>Idea 安装 BinEd 插件可以查看 Class 文件在各种进制下的值</p>
</blockquote>
<p>Class 文件是一组以 8 个字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑排列在文件之中，中间没有添加任何分隔符，这使得整个 Class 文件中存储的内容几乎全部是程序运行的必要数据，没有空隙存在。</p>
<p>Class 文件结构中只有两种数据类型：无符号数 + 表</p>
<ul>
<li>无符号数：是基本数据类，以 u1, u2, u4, u8 分别表示 1，2，4，8 个字节的无符号数。无符号数可以用来描述数字，索引引用，数量值或者按照 UTF-8 编码构成的字符串值</li>
<li>表：n 个无符号数 + 其他表构成的复合数据类型，命名习惯性的以 _info 结尾。表用于描述有层次关系的复合结构数据，整个 Class 可以看作一张表。</li>
</ul>
<p>Class 文件格式表：</p>
<table>
<thead>
<tr>
<th align="left">Type</th>
<th align="left">Name</th>
<th align="left">Count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u4</td>
<td align="left">magic</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">minor_version</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">major_version</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">constant_pool_count</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">cp_info</td>
<td align="left">constant_pool</td>
<td align="left">constant_pool_count-1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">access_flags</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">this_class</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">super_class</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">interfaces_count</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">interfaces</td>
<td align="left">interfaces_count</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">fields_count</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">field_info</td>
<td align="left">fields</td>
<td align="left">fields_count</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">methods_count</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">method_info</td>
<td align="left">methods</td>
<td align="left">methods_count</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">attributes_count</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">attribute_info</td>
<td align="left">attributes</td>
<td align="left">attributes_count</td>
</tr>
</tbody></table>
<h3 id="6-3-1-魔数与-Class-文件的版本"><a href="#6-3-1-魔数与-Class-文件的版本" class="headerlink" title="6.3.1 魔数与 Class 文件的版本"></a>6.3.1 魔数与 Class 文件的版本</h3><p>Class 文件前 4 个字节被称为魔数，值为 0xCAFEBABE，用来表明文件类型。紧接着 4 个字节为主次版本号。</p>
<p>Java 虚拟机规范在 Class 文件校验部分明确要求，即使文件格式并未发生任何变化，虚拟机也必须<strong>拒绝执行</strong>超过其版本号的 Class 文件。</p>
<table>
<thead>
<tr>
<th align="left">JDK version</th>
<th align="left">version number</th>
</tr>
</thead>
<tbody><tr>
<td align="left">JDK 13</td>
<td align="left">57</td>
</tr>
<tr>
<td align="left">JDK 12</td>
<td align="left">56</td>
</tr>
<tr>
<td align="left">JDK 11</td>
<td align="left">55</td>
</tr>
<tr>
<td align="left">JDK 10</td>
<td align="left">54</td>
</tr>
<tr>
<td align="left">JDK 9</td>
<td align="left">53</td>
</tr>
<tr>
<td align="left">JDK 8</td>
<td align="left">52</td>
</tr>
<tr>
<td align="left">JDK 7</td>
<td align="left">51</td>
</tr>
<tr>
<td align="left">JDK 6.0</td>
<td align="left">50</td>
</tr>
<tr>
<td align="left">JDK 5.0</td>
<td align="left">49</td>
</tr>
<tr>
<td align="left">JDK 1.4</td>
<td align="left">48</td>
</tr>
<tr>
<td align="left">JDK 1.3</td>
<td align="left">47</td>
</tr>
<tr>
<td align="left">JDK 1.2</td>
<td align="left">46</td>
</tr>
<tr>
<td align="left">JDK 1.1</td>
<td align="left">45</td>
</tr>
</tbody></table>
<p>仿照参考书写下测试代码, 不知道是不是编译器版本不一样，结果从常量池开始有些许偏差，不过无伤大雅，学习路径，方法还是一样的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> c631;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Class 文件 16 进制表达式</p>
<table>
<thead>
<tr>
<th align="center">line</th>
<th align="left">00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f</th>
<th align="left">hex value</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0000000000</td>
<td align="left">ca fe ba be 00 00 00 32 00 16 0a 00 04 00 12 09</td>
<td align="left">…….2……..</td>
</tr>
<tr>
<td align="center">0000000010</td>
<td align="left">00 03 00 13 07 00 14 07 00 15 01 00 01 6d 01 00</td>
<td align="left">………….m..</td>
</tr>
<tr>
<td align="center">0000000020</td>
<td align="left">01 49 01 00 06 3c 69 6e 69 74 3e 01 00 03 28 29</td>
<td align="left">.I…<init>…()</td>
</tr>
<tr>
<td align="center">0000000030</td>
<td align="left">56 01 00 04 43 6f 64 65 01 00 0f 4c 69 6e 65 4e</td>
<td align="left">V…Code…LineN</td>
</tr>
<tr>
<td align="center">0000000040</td>
<td align="left">75 6d 62 65 72 54 61 62 6c 65 01 00 12 4c 6f 63</td>
<td align="left">umberTable…Loc</td>
</tr>
<tr>
<td align="center">0000000050</td>
<td align="left">61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65 01</td>
<td align="left">alVariableTable.</td>
</tr>
<tr>
<td align="center">0000000060</td>
<td align="left">00 04 74 68 69 73 01 00 10 4c 63 36 33 31 2f 54</td>
<td align="left">..this…Lc631/T</td>
</tr>
<tr>
<td align="center">0000000070</td>
<td align="left">65 73 74 43 6c 61 73 73 3b 01 00 03 69 6e 63 01</td>
<td align="left">estClass;…inc.</td>
</tr>
<tr>
<td align="center">0000000080</td>
<td align="left">00 03 28 29 49 01 00 0a 53 6f 75 72 63 65 46 69</td>
<td align="left">..()I…SourceFi</td>
</tr>
<tr>
<td align="center">0000000090</td>
<td align="left">6c 65 01 00 0e 54 65 73 74 43 6c 61 73 73 2e 6a</td>
<td align="left">le…TestClass.j</td>
</tr>
<tr>
<td align="center">00000000a0</td>
<td align="left">61 76 61 0c 00 07 00 08 0c 00 05 00 06 01 00 0e</td>
<td align="left">ava………….</td>
</tr>
<tr>
<td align="center">00000000b0</td>
<td align="left">63 36 33 31 2f 54 65 73 74 43 6c 61 73 73 01 00</td>
<td align="left">c631/TestClass..</td>
</tr>
<tr>
<td align="center">00000000c0</td>
<td align="left">10 6a 61 76 61 2f 6c 61 6e 67 2f 4f 62 6a 65 63</td>
<td align="left">.java/lang/Objec</td>
</tr>
<tr>
<td align="center">00000000d0</td>
<td align="left">74 00 21 00 03 00 04 00 00 00 01 00 02 00 05 00</td>
<td align="left">t.!………….</td>
</tr>
<tr>
<td align="center">00000000e0</td>
<td align="left">06 00 00 00 02 00 01 00 07 00 08 00 01 00 09 00</td>
<td align="left">…………….</td>
</tr>
<tr>
<td align="center">00000000f0</td>
<td align="left">00 00 2f 00 01 00 01 00 00 00 05 2a b7 00 01 b1</td>
<td align="left">../……..*….</td>
</tr>
<tr>
<td align="center">0000000100</td>
<td align="left">00 00 00 02 00 0a 00 00 00 06 00 01 00 00 00 03</td>
<td align="left">…………….</td>
</tr>
<tr>
<td align="center">0000000110</td>
<td align="left">00 0b 00 00 00 0c 00 01 00 00 00 05 00 0c 00 0d</td>
<td align="left">…………….</td>
</tr>
<tr>
<td align="center">0000000120</td>
<td align="left">00 00 00 01 00 0e 00 0f 00 01 00 09 00 00 00 31</td>
<td align="left">……………1</td>
</tr>
<tr>
<td align="center">0000000130</td>
<td align="left">00 02 00 01 00 00 00 07 2a b4 00 02 04 60 ac 00</td>
<td align="left">……..*….`..</td>
</tr>
<tr>
<td align="center">0000000140</td>
<td align="left">00 00 02 00 0a 00 00 00 06 00 01 00 00 00 07 00</td>
<td align="left">…………….</td>
</tr>
<tr>
<td align="center">0000000150</td>
<td align="left">0b 00 00 00 0c 00 01 00 00 00 07 00 0c 00 0d 00</td>
<td align="left">…………….</td>
</tr>
<tr>
<td align="center">0000000160</td>
<td align="left">00 00 01 00 10 00 00 00 02 00 11</td>
<td align="left">………..</td>
</tr>
</tbody></table>
<p>魔数值 cafe, 版本号 <code>00 00 00 32</code> 转化后位 50 和我在 pom 指定的 1.6 版本 JDK 编译一致</p>
<h3 id="6-3-2-常量池"><a href="#6-3-2-常量池" class="headerlink" title="6.3.2 常量池"></a>6.3.2 常量池</h3><p>第 9-8 个字节表示常量池。常量池是从 1 开始的。示例中对应的值位 <code>00 16 - 22</code> 表明常量池总共有 21 个值。</p>
<p>PS: 常量池的 0 位空余，是为了考虑特殊情况。当指向常量池的数据需要表达 <code>不引用任何常量池中的项目</code> 这样的意思时，可以将索引值设置位 0 表示。</p>
<p>常量池主要存放两大类的常量：字面量 Literal + 符号引用 Symbolic References。字面量接近于 Java 语言层面的常量概念，符号引用则属于编译原理的概念主要包括下面几类常量：</p>
<ol>
<li>被模块导出或者开放的包 package</li>
<li>类和接口的全名限定 Fully Qualified Name</li>
<li>字段名称和描述符 Desciptor</li>
<li>方法名称和描述符</li>
<li>方法句柄和方法类型 Method Handle, Mehtod Type, Invoke Dynamic</li>
<li>动态调用点和动态常量 Dynamically-Computed Call Site, Dynamically-Computed Constant</li>
</ol>
<p>Class 文件中没有类似 C 语言中的链接，只有当 Class 文件在虚拟机中加载后才能确定内存分布。</p>
<p>常量池中每一项都是一个表，到 JDK13 为止有 17 种表结构</p>
<table>
<thead>
<tr>
<th align="left">Type</th>
<th align="left">Flag</th>
<th align="left">Desc</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CONSTANT_Utf8_info</td>
<td align="left">1</td>
<td align="left">UTF-8 编码的字符串</td>
</tr>
<tr>
<td align="left">CONSTANT_Integer_info</td>
<td align="left">3</td>
<td align="left">整型字面量</td>
</tr>
<tr>
<td align="left">CONSTANT_Float_info</td>
<td align="left">4</td>
<td align="left">浮点型字面量</td>
</tr>
<tr>
<td align="left">CONSTANT_Long_info</td>
<td align="left">5</td>
<td align="left">长整型型字面量</td>
</tr>
<tr>
<td align="left">CONSTANT_Class_info</td>
<td align="left">7</td>
<td align="left">类或接口的符号引用</td>
</tr>
<tr>
<td align="left">CONSTANT_String_info</td>
<td align="left">8</td>
<td align="left">字符串类型字面量</td>
</tr>
<tr>
<td align="left">CONSTANT_Fieldref_info</td>
<td align="left">9</td>
<td align="left">字段的符号引用</td>
</tr>
<tr>
<td align="left">CONSTANT_Methodref_info</td>
<td align="left">10</td>
<td align="left">类中方法的符号引用</td>
</tr>
<tr>
<td align="left">CONSTANT_InterfaceMethodref_info</td>
<td align="left">11</td>
<td align="left">接口中方法的符号引用</td>
</tr>
<tr>
<td align="left">CONSTANT_NameAndType_info</td>
<td align="left">12</td>
<td align="left">字段或方法的部分符号引用</td>
</tr>
<tr>
<td align="left">CONSTANT_MethodHandle_info</td>
<td align="left">15</td>
<td align="left">表示方法句柄</td>
</tr>
<tr>
<td align="left">CONSTANT_MethodType_info</td>
<td align="left">16</td>
<td align="left">表示方法类型</td>
</tr>
<tr>
<td align="left">CONSTANT_Dynamic_info</td>
<td align="left">17</td>
<td align="left">表示一个动态计算常量</td>
</tr>
<tr>
<td align="left">CONSTANT_InvokeDynamic_info</td>
<td align="left">18</td>
<td align="left">表示一个动态方法调用点</td>
</tr>
<tr>
<td align="left">CONSTANT_Module_info</td>
<td align="left">19</td>
<td align="left">表示一个模块</td>
</tr>
<tr>
<td align="left">CONSTANT_Package_info</td>
<td align="left">20</td>
<td align="left">表示一个模块中开放或者导出的包</td>
</tr>
</tbody></table>
<p>常量池第一项以 <code>0a - 10</code> 开头，查看上表得知为 CONSTANT_Methodref_info 类型的表，查询可知对应的表结构为</p>
<table>
<thead>
<tr>
<th align="left">Const Name</th>
<th align="left">Item</th>
<th align="left">Length</th>
<th align="left">desc</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CONSTANT_Methodref_info</td>
<td align="left">tag</td>
<td align="left">u1</td>
<td align="left">值为 10</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">index</td>
<td align="left">u2</td>
<td align="left">指向声明方法的类描述符 CONSTANT_Class_info 的索引项</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">index</td>
<td align="left">u2</td>
<td align="left">指向名称及类型描述符 CONSTANT_NameAndType 的索引项</td>
</tr>
</tbody></table>
<p>所以第一个常量值总共 5 个字节组成 <code>0a 00 04 00 12</code>，表示的是方法引用，类引用地址为 4，方法名称和类型地址为 18。</p>
<p>为了反向验证这样分析是否正确可以通过反编译命令 <code>javap -verbose TestClass</code> 查看 class 文件。</p>
<p>第一个常量值内容为 <code>#1 = Methodref          #4.#18         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</code> 和分析结果一致</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">C:\Users\jack\Downloads\helloworld\understanding-the-jvm\c6-file-structure\target\classes\c631&gt;javap -verbose TestClass</span><br><span class="line">警告: 文件 .\TestClass.class 不包含类 TestClass</span><br><span class="line">Classfile /C:/Users/jack/Downloads/helloworld/understanding-the-jvm/c6-file-structure/target/classes/c631/TestClass.class</span><br><span class="line">  Last modified 2020年11月19日; size 363 bytes</span><br><span class="line">  MD5 checksum 16826804824a30e99e96960a47c3a47a</span><br><span class="line">  Compiled from &quot;TestClass.java&quot;</span><br><span class="line">public class c631.TestClass</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 50</span><br><span class="line">  flags: (0x0021) ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  this_class: #3                          // c631/TestClass</span><br><span class="line">  super_class: #4                         // java/lang/Object</span><br><span class="line">  interfaces: 0, fields: 1, methods: 2, attributes: 1</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #4.#18         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = Fieldref           #3.#19         // c631/TestClass.m:I</span><br><span class="line">   #3 = Class              #20            // c631/TestClass</span><br><span class="line">   #4 = Class              #21            // java/lang/Object</span><br><span class="line">   #5 = Utf8               m</span><br><span class="line">   #6 = Utf8               I</span><br><span class="line">   #7 = Utf8               &lt;init&gt;</span><br><span class="line">   #8 = Utf8               ()V</span><br><span class="line">   #9 = Utf8               Code</span><br><span class="line">  #10 = Utf8               LineNumberTable</span><br><span class="line">  #11 = Utf8               LocalVariableTable</span><br><span class="line">  #12 = Utf8               this</span><br><span class="line">  #13 = Utf8               Lc631/TestClass;</span><br><span class="line">  #14 = Utf8               inc</span><br><span class="line">  #15 = Utf8               ()I</span><br><span class="line">  #16 = Utf8               SourceFile</span><br><span class="line">  #17 = Utf8               TestClass.java</span><br><span class="line">  #18 = NameAndType        #7:#8          // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #19 = NameAndType        #5:#6          // m:I</span><br><span class="line">  #20 = Utf8               c631/TestClass</span><br><span class="line">  #21 = Utf8               java/lang/Object</span><br><span class="line">&#123;</span><br><span class="line">  public c631.TestClass();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 3: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       5     0  this   Lc631/TestClass;</span><br><span class="line"></span><br><span class="line">  public int inc();</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: getfield      #2                  // Field m:I</span><br><span class="line">         4: iconst_1</span><br><span class="line">         5: iadd</span><br><span class="line">         6: ireturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 7: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       7     0  this   Lc631/TestClass;</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;TestClass.java&quot;</span><br></pre></td></tr></table></figure>

<p>第二个常量为 09 开头，查表可知为 field 的引用</p>
<table>
<thead>
<tr>
<th align="left">Const Name</th>
<th align="left">Item</th>
<th align="left">Length</th>
<th align="left">desc</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CONSTANT_Fieldref_info</td>
<td align="left">tag</td>
<td align="left">u1</td>
<td align="left">值为 9</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">index</td>
<td align="left">u2</td>
<td align="left">指向声明字段的类或接口类描述符 CONSTANT_Class_info 的索引项</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">index</td>
<td align="left">u2</td>
<td align="left">指向字段描述符 CONSTANT_NameAndType 的索引项</td>
</tr>
</tbody></table>
<p>值为 <code>09 00 03 00 13</code> 对应 <code>#2 = Fieldref           #3.#19         // c631/TestClass.m:I</code></p>
<p>第三个常量为 07 开头，为 Class 常量表</p>
<table>
<thead>
<tr>
<th align="left">Const Name</th>
<th align="left">Item</th>
<th align="left">Length</th>
<th align="left">desc</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CONSTANT_Class_info</td>
<td align="left">tag</td>
<td align="left">u1</td>
<td align="left">值为 7</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">index</td>
<td align="left">u2</td>
<td align="left">指向全限定名常量的索引项</td>
</tr>
</tbody></table>
<p><code>07 00 14</code> 对应 <code>#3 = Class              #20            // c631/TestClass</code></p>
<p>第四个也是 07 开头</p>
<p><code>07 00 15</code> - <code>#4 = Class              #21            // java/lang/Object</code></p>
<p>第五个为 01 开头, 表示 Utf8 类型的常量</p>
<table>
<thead>
<tr>
<th align="left">Const Name</th>
<th align="left">Item</th>
<th align="left">Type</th>
<th align="left">desc</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CONSTANT_Utf8_info</td>
<td align="left">tag</td>
<td align="left">u1</td>
<td align="left">值为 1</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">index</td>
<td align="left">u2</td>
<td align="left">UTF-8 编码的字符串占用的字节数</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">bytes</td>
<td align="left">u1</td>
<td align="left">长度为 length 的 UTF-8 编码字符串</td>
</tr>
</tbody></table>
<p><code>01 00 01 6d</code>, 占用字节数 1，内容为 6d 的 UTF 内容 <code>m</code>，对应关系可以通过各种在线工具查看，很常用 <code>#5 = Utf8               m</code></p>
<p>第六个常量 <code>01 00 01 49</code> - <code>#6 = Utf8               I</code></p>
<p>第七个常量 <code>01 00 06 3c 69 6e 69 74 3e</code> 占用字节数 6 个 - <code>#7 = Utf8               &lt;init&gt;</code></p>
<p>第八个 <code>01 00 03 28 29 56</code> - <code>#8 = Utf8               ()V</code></p>
<p>第九个 <code>01 00 04 43 6f 64 65</code> - <code>#9 = Utf8               Code</code> </p>
<p>第十个 <code>01 00 0f 4c 69 6e 65 4e 75 6d 62 65 72 54 61 62 6c 65</code> - <code>#10 = Utf8               LineNumberTable</code></p>
<p>第十一个 <code>01 00 12 4c 6f 63 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65</code> - <code>#11 = Utf8               LocalVariableTable</code></p>
<p>第十二个 <code>01 00 04 74 68 69 73</code> - <code>#12 = Utf8               this</code></p>
<p>第十三个 <code>01 00 10 4c 63 36 33 31 2f 54 65 73 74 43 6c 61 73 73 3b</code> - <code>#13 = Utf8               Lc631/TestClass;</code></p>
<p>第十四个 <code>01 00 03 69 6e 63</code> - <code>#14 = Utf8               inc</code></p>
<p>第十五个 <code>01 00 03 28 29 49</code> - <code>#15 = Utf8               ()I</code></p>
<p>第十六个 <code>01 00 0a 53 6f 75 72 63 65 46 69 6c 65</code> - <code>#16 = Utf8               SourceFile</code></p>
<p>第十七个 <code>01 00 0e 54 65 73 74 43 6c 61 73 73 2e 6a 61 76 61</code> - <code>#17 = Utf8               TestClass.java</code></p>
<p>第十八个 <code>0c</code> 开头，为 NameAndType 类型</p>
<table>
<thead>
<tr>
<th align="left">Const Name</th>
<th align="left">Item</th>
<th align="left">Length</th>
<th align="left">desc</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CONSTANT_NameAndType_info</td>
<td align="left">tag</td>
<td align="left">u1</td>
<td align="left">值为 12</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">index</td>
<td align="left">u2</td>
<td align="left">指向该字段或方法<strong>名称</strong>常量项的索引项</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">index</td>
<td align="left">u2</td>
<td align="left">指向该字段或方法<strong>描述符</strong>常量项的索引项</td>
</tr>
</tbody></table>
<p><code>0c 00 07 00 08</code> - <code>#18 = NameAndType        #7:#8          // &quot;&lt;init&gt;&quot;:()V</code></p>
<p>第十九 <code>0c 00 05 00 06</code> - <code>#19 = NameAndType        #5:#6          // m:I</code></p>
<p>第二十 <code>01 00 0e 63 36 33 31 2f 54 65 73 74 43 6c 61 73 73</code> - <code>#20 = Utf8               c631/TestClass</code></p>
<p>第二十一 <code>01 00 10 6a 61 76 61 2f 6c 61 6e 67 2f 4f 62 6a 65 63 74</code> - <code>#21 = Utf8               java/lang/Object</code></p>
<p>到此为止，常量池分析完毕</p>
<h3 id="6-3-3-访问标志"><a href="#6-3-3-访问标志" class="headerlink" title="6.3.3 访问标志"></a>6.3.3 访问标志</h3><p>紧跟在常量池之后，由两个字节组成，有 16 个标志位，当前只定义了 9 种。</p>
<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">flag value</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ACC_PUBLIC</td>
<td align="left">0x0001</td>
<td align="left">是否为 public 类型</td>
</tr>
<tr>
<td align="left">ACC_FINAL</td>
<td align="left">0x0010</td>
<td align="left">是否为 final 类型, 只有类可设置</td>
</tr>
<tr>
<td align="left">ACC_SUPER</td>
<td align="left">0x0020</td>
<td align="left">是否允许使用 invokespecial 字节码指定的新语义，<BR>invokespecial 语义在 JDK 1.0.2 发生过改变，<br>为了区别这条指令使用哪种语义， <BR>JDK 1.0.2 之后编译出来的类这个标志必须为真</td>
</tr>
<tr>
<td align="left">ACC_INTERFACE</td>
<td align="left">0x0200</td>
<td align="left">是否是一个接口</td>
</tr>
<tr>
<td align="left">ACC_ABSTRACT</td>
<td align="left">0x0400</td>
<td align="left">是否为 abstract 类型，对于接口或者抽象类来说，此标志必须为真，其他类型为假</td>
</tr>
<tr>
<td align="left">ACC_SYNTHETIC</td>
<td align="left">0x1000</td>
<td align="left">表示这个类并非由用户代码产生</td>
</tr>
<tr>
<td align="left">ACC_ANNOTATION</td>
<td align="left">0x2000</td>
<td align="left">标识这是一个注解</td>
</tr>
<tr>
<td align="left">ACC_ENUM</td>
<td align="left">0x4000</td>
<td align="left">标识这是一个枚举</td>
</tr>
<tr>
<td align="left">ACC_MODULE</td>
<td align="left">0x8000</td>
<td align="left">标识这是一个模块</td>
</tr>
</tbody></table>
<p>示例种值为 <code>00 21</code> 即 0020 &amp; 0001 所以是 public + super 类型</p>
<h3 id="6-3-4-类索引，父索引和接口索引集合"><a href="#6-3-4-类索引，父索引和接口索引集合" class="headerlink" title="6.3.4 类索引，父索引和接口索引集合"></a>6.3.4 类索引，父索引和接口索引集合</h3><ul>
<li>类索引（this_class） - u2 类型数据</li>
<li>父索引（super_class） - u2 类型数据</li>
<li>接口索引集合（super_class） - u2 类型数据</li>
</ul>
<p>这些所以确定类的继承关系，实例中数据 <code>00 03 00 04 00 00</code> 表示 类所以指向常量池第三个常量，父索引指向第四个常量，接口集合数量为 0 </p>
<p><code>#3 = Class              #20            // c631/TestClass</code></p>
<p><code>#4 = Class              #21            // java/lang/Object</code></p>
<h3 id="6-3-5-字段表集合"><a href="#6-3-5-字段表集合" class="headerlink" title="6.3.5 字段表集合"></a>6.3.5 字段表集合</h3><p>用来描述接口或类中声明的变量。这里的变量只包括<strong>类级</strong>变量以及<strong>实例级</strong>变量，不包含局部变量。</p>
<p>字段表结构</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">名称</th>
<th align="left">数量</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">access_flags</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">descriptor_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">attribute_count</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">attribute_info</td>
<td align="left">attributes</td>
<td align="left">attribute_count</td>
</tr>
</tbody></table>
<p>字段修饰符 access_flags 和类的访问修饰符很想都由一个 u2 的数据类型表示</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">标志值</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ACC_PUBLIC</td>
<td align="left">0x0001</td>
<td align="left">字段是否 public</td>
</tr>
<tr>
<td align="left">ACC_PRIVATE</td>
<td align="left">0x0002</td>
<td align="left">字段是否 private</td>
</tr>
<tr>
<td align="left">ACC_PROTECTED</td>
<td align="left">0x0004</td>
<td align="left">字段是否 protected</td>
</tr>
<tr>
<td align="left">ACC_STATIC</td>
<td align="left">0x0008</td>
<td align="left">字段是否 static</td>
</tr>
<tr>
<td align="left">ACC_FINAL</td>
<td align="left">0x0010</td>
<td align="left">字段是否 final</td>
</tr>
<tr>
<td align="left">ACC_VOLATILE</td>
<td align="left">0x0040</td>
<td align="left">字段是否 volatile</td>
</tr>
<tr>
<td align="left">ACC_TRANSIENT</td>
<td align="left">0x0080</td>
<td align="left">字段是否 transient</td>
</tr>
<tr>
<td align="left">ACC_SYNTHTIC</td>
<td align="left">0x0100</td>
<td align="left">字段是否由编译器产生</td>
</tr>
<tr>
<td align="left">ACC_ENUM</td>
<td align="left">0x0400</td>
<td align="left">字段是否 enum</td>
</tr>
</tbody></table>
<ul>
<li>作用域修饰符： public/private/protected</li>
<li>是否是类级字段：static</li>
<li>是否可变：final</li>
<li>是否强制主从内存读写：volatile</li>
<li>是否可序列化：transient</li>
</ul>
<p>name_index 和 descriptor_index 都指向常量池引用，表示字段简单名称以及字段和方法描述符。</p>
<ul>
<li>全名限定：用斜线分割的 路径+类名</li>
<li>简单名称：只有名字，没有路径信息</li>
<li>方法和字段描述符：参数列表+返回值类型，例如 ()V, (Lcom/lang/Object;)V</li>
</ul>
<p>基本数据类型含义表</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">B</td>
<td align="left">byte</td>
</tr>
<tr>
<td align="left">C</td>
<td align="left">char</td>
</tr>
<tr>
<td align="left">D</td>
<td align="left">double</td>
</tr>
<tr>
<td align="left">F</td>
<td align="left">float</td>
</tr>
<tr>
<td align="left">I</td>
<td align="left">int</td>
</tr>
<tr>
<td align="left">J</td>
<td align="left">long</td>
</tr>
<tr>
<td align="left">S</td>
<td align="left">short</td>
</tr>
<tr>
<td align="left">Z</td>
<td align="left">boolean</td>
</tr>
<tr>
<td align="left">V</td>
<td align="left">void</td>
</tr>
<tr>
<td align="left">L</td>
<td align="left">对象类型</td>
</tr>
</tbody></table>
<p>表示数组类型时，每一维度将使用一个前置的 <code>[</code> 字符描述，比如 String[][] 表示为 <code>[[Ljava/lang/String;</code>, 整形数组 int[] 表示为 <code>[I</code>。</p>
<p>实例中对应的字段表集合内容为 <code>00 01 00 02 00 05 00 06 00 00</code>， interface 之后紧接着为 fields_count 的表示位， <code>00 01</code>， 表示只有一个 field。</p>
<p><code>00 02</code> 表示方位权限 private，<code>00 05</code> 表示名字指向常量池第五个常量 <code>m</code>, <code>00 06</code> 表示描述符指向第六个常量 <code>I</code>，<code>00 00</code> 属性表个数位 0 个。</p>
<h3 id="6-3-6-方法表集合"><a href="#6-3-6-方法表集合" class="headerlink" title="6.3.6 方法表集合"></a>6.3.6 方法表集合</h3><p>方法表和之前的属性表，class 表是一个套路的, 方法表结构如下</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">名称</th>
<th align="left">数量</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">access_flags</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">descriptor_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">attribute_count</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">attribute_info</td>
<td align="left">attributes</td>
<td align="left">attribute_count</td>
</tr>
</tbody></table>
<p>方法表的 access_flag 相对 field 少了 volatile 和 trasient, 多了 synchronized, native, strictfp 和 abstract</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">标志值</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ACC_PUBLIC</td>
<td align="left">0x0001</td>
<td align="left">方法是否 public</td>
</tr>
<tr>
<td align="left">ACC_PRIVATE</td>
<td align="left">0x0002</td>
<td align="left">方法是否 private</td>
</tr>
<tr>
<td align="left">ACC_PROTECTED</td>
<td align="left">0x0004</td>
<td align="left">方法是否 protected</td>
</tr>
<tr>
<td align="left">ACC_STATIC</td>
<td align="left">0x0008</td>
<td align="left">方法是否 static</td>
</tr>
<tr>
<td align="left">ACC_FINAL</td>
<td align="left">0x0010</td>
<td align="left">方法是否 final</td>
</tr>
<tr>
<td align="left">ACC_SYNCHRONIZED</td>
<td align="left">0x0020</td>
<td align="left">方法是否 synchronized</td>
</tr>
<tr>
<td align="left">ACC_BRIDGE</td>
<td align="left">0x0040</td>
<td align="left">方法是否是由编译器产生的桥接方法</td>
</tr>
<tr>
<td align="left">ACC_VARARGS</td>
<td align="left">0x0080</td>
<td align="left">方法是否接收不定长参数</td>
</tr>
<tr>
<td align="left">ACC_NATIVE</td>
<td align="left">0x0100</td>
<td align="left">方法是否为 native</td>
</tr>
<tr>
<td align="left">ACC_ABSTRACT</td>
<td align="left">0x0400</td>
<td align="left">字段是否 abstract</td>
</tr>
<tr>
<td align="left">ACC_STRICT</td>
<td align="left">0x0800</td>
<td align="left">字段是否 strictfp</td>
</tr>
<tr>
<td align="left">ACC_SYNTHETIC</td>
<td align="left">0x1000</td>
<td align="left">字段是否由编译器自动产生</td>
</tr>
</tbody></table>
<p>方法中的具体实现经过 javac 编译成字节码指令后存在属性表集合中一个名为 Code 的属性里面。</p>
<p>实例内容 <code>00 02 00 01 00 07 00 08 00 01 00 09</code></p>
<ul>
<li>00 02 - 有两个方法</li>
<li>00 01 - public 类型的方法</li>
<li>00 07 - name 指向常量池7 - <init></li>
<li>00 08 - 描述符指向8 - ()V</li>
<li>00 01 - 属性数量 1</li>
<li>00 09 - 属性表索引 9，指向 Code</li>
</ul>
<p>方法签名：Java 语法中的方法签名可以从重载(Overload)理解。Java 中重载要求方法名一致，参数列表及参数类型不同。返回值并不在比较范围内。方法除了返回值不同的重载是会编译错误的。但是在字节码的语义中，只有返回值不同的重载是合法的。</p>
<h3 id="6-3-7-属性表集合"><a href="#6-3-7-属性表集合" class="headerlink" title="6.3.7 属性表集合"></a>6.3.7 属性表集合</h3><p>属性表集合的限制比前面那些结构要宽松一些，对虚拟机不认识的属性，会自动跳过。到 java 12 一共有 29 种预定义的属性</p>
<table>
<thead>
<tr>
<th align="left">属性名称</th>
<th align="left">使用位置</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Code</td>
<td align="left">方法表</td>
<td align="left">Java代码编译成的自己吗指令</td>
</tr>
<tr>
<td align="left">ConstantValue</td>
<td align="left">字段表</td>
<td align="left">由 final 关键字定义的常量值</td>
</tr>
<tr>
<td align="left">Deprecated</td>
<td align="left">类，方法，字段表</td>
<td align="left">被声明为 deprecated 的方法和字段</td>
</tr>
<tr>
<td align="left">Exceptions</td>
<td align="left">方法表</td>
<td align="left">方法抛出的异常列表</td>
</tr>
<tr>
<td align="left">EnclosingMethod</td>
<td align="left">类文件</td>
<td align="left">仅当一个类为局部类或匿名类是才拥有这个属性，用于标识这个类所在的外围方法</td>
</tr>
<tr>
<td align="left">InnerClasses</td>
<td align="left">类文件</td>
<td align="left">内部类列表</td>
</tr>
<tr>
<td align="left">LineNumberTable</td>
<td align="left">Code属性</td>
<td align="left">Java 源码的行号与字节码指令的对应关系</td>
</tr>
<tr>
<td align="left">LocalVariableTable</td>
<td align="left">Code属性</td>
<td align="left">方法的局部变量描述</td>
</tr>
<tr>
<td align="left">StackMapTable</td>
<td align="left">Code属性</td>
<td align="left">JDK6 新增，供新的类型检查验证器检查和处理目标方法的局部变量和操作数栈所需的类型是否匹配</td>
</tr>
<tr>
<td align="left">Signature</td>
<td align="left">类，方法表和字段表</td>
<td align="left">JDK5新增，用于支持泛型情况下的方法签名</td>
</tr>
<tr>
<td align="left">SourceFile</td>
<td align="left">类文件</td>
<td align="left">记录源文件名称</td>
</tr>
<tr>
<td align="left">SourceDebugExtension</td>
<td align="left">类文件</td>
<td align="left">JDK5新增，存储额外的调试信息</td>
</tr>
<tr>
<td align="left">Synthetic</td>
<td align="left">类，方法表，字段表</td>
<td align="left">标识是否由编译器产生</td>
</tr>
<tr>
<td align="left">LocalVariableTypeTable</td>
<td align="left">类</td>
<td align="left">JDK5新增，使用特征签名代替描述符，为了支持泛型</td>
</tr>
<tr>
<td align="left">RuntimeVisibleAnnotations</td>
<td align="left">类，方法表，字段表</td>
<td align="left">JDK5新增，为动态注解提供支持</td>
</tr>
<tr>
<td align="left">RuntimeInVisibleAnnotations</td>
<td align="left">类，方法表，字段表</td>
<td align="left">JDK5新增，为动态注解提供支持,标识不可见</td>
</tr>
<tr>
<td align="left">RuntimeVisibleParameterAnnotations</td>
<td align="left">方法表</td>
<td align="left">JDK5新增，作用对象为方法参数</td>
</tr>
<tr>
<td align="left">RuntimeInvisibleParameterAnnotations</td>
<td align="left">方法表</td>
<td align="left">JDK5新增，作用对象为方法参数</td>
</tr>
<tr>
<td align="left">AnnotationDefault</td>
<td align="left">方法表</td>
<td align="left">JDK5新增，注解类元素默认值</td>
</tr>
<tr>
<td align="left">BootstrapMethods</td>
<td align="left">类文件</td>
<td align="left">JDK7新增，保存 invokedynamic 指令引用的引导犯法限定符</td>
</tr>
<tr>
<td align="left">RuntimeVisibleTypeAnnotations</td>
<td align="left">类，方法表，字段表, Code属性</td>
<td align="left">JDK8新增</td>
</tr>
<tr>
<td align="left">RuntimeInvisibleTypeAnnotations</td>
<td align="left">类，方法表，字段表, Code属性</td>
<td align="left">JDK8新增</td>
</tr>
<tr>
<td align="left">MethodParameters</td>
<td align="left">方法表</td>
<td align="left">JDK8新增</td>
</tr>
<tr>
<td align="left">Module</td>
<td align="left">类</td>
<td align="left">JDK9新增</td>
</tr>
<tr>
<td align="left">ModulePackages</td>
<td align="left">类</td>
<td align="left">JDK9新增</td>
</tr>
<tr>
<td align="left">ModuleMainClass</td>
<td align="left">类</td>
<td align="left">JDK9新增</td>
</tr>
<tr>
<td align="left">NestHost</td>
<td align="left">类</td>
<td align="left">JDK11新增</td>
</tr>
<tr>
<td align="left">NestMembers</td>
<td align="left">类</td>
<td align="left">JDK11新增</td>
</tr>
</tbody></table>
<p>属性表结构</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">名称</th>
<th align="left">数量</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u1</td>
<td align="left">info</td>
<td align="left">attribute_length</td>
</tr>
</tbody></table>
<p>attribute_name_index 指向常量池中的一个引用，属性值结构完全自定义，attribute_length 说明属性值所占的位数。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p>Java 方法体种的代码经过 javac 编译器处理之后都会转化为字节码指令存储在 Code 属性内。Code 属性出现在方法表的属性集合中，但并非所有方法表都必须存在这个属性，比如抽象方法或接口中就可以不存在 Code 属性。</p>
<p>Code 属性表的结构</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">名称</th>
<th align="left">数量</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
<td align="left">指向 CONSTANT_Utf8_info 常量的索引，为固定值 Code</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
<td align="left">属性值长度</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">max_stack</td>
<td align="left">1</td>
<td align="left">操作数栈深度的最大值</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">max_locals</td>
<td align="left">1</td>
<td align="left">局部变量表存储空间，单位-变量槽(Slot)</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">code_length</td>
<td align="left">1</td>
<td align="left">编译后字节码指令个数</td>
</tr>
<tr>
<td align="left">u1</td>
<td align="left">code</td>
<td align="left">code_length</td>
<td align="left">编译后字节码指令</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">exception_table_length</td>
<td align="left">1</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">exception_info</td>
<td align="left">exception_table</td>
<td align="left">exception_table_length</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">attribute_count</td>
<td align="left">1</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">attribute_info</td>
<td align="left">attributes</td>
<td align="left">attribute_count</td>
<td align="left">-</td>
</tr>
</tbody></table>
<p>对于 byte, char, float, int, short, boolean 和 returnAddress 等长度不超过 32 byte 的数据类型，每个局部变量占用一个变量槽，double, long 这两个 64 位的占两个槽。</p>
<p>同时生存的最大局部变量和类型计算出 max_locals</p>
<p>字节码指令长度 u1。u1 可以最多表达 255 个指令，现在大约已经定义了 200 条。</p>
<p>测试案例中 init 方法对应的 code 代码块为 <code>00 09 00 00 00 2f 00 01 00 01 00 00 00 05 2a b7 00 01 b1 00 00 00 02</code></p>
<p><code>00 09</code> 前面已经说过，指向固定的 Code 字符地址</p>
<p><code>00 00 00 31</code> 属性表长度 3*16 + 1 = 49</p>
<p><code>00 01</code> 栈深 1</p>
<p><code>00 01</code> 本地变量表大小 1</p>
<p><code>00 00 00 05</code> code 长度 5</p>
<p><code>2a b7 00 01 b1</code> code 内容</p>
<ul>
<li><code>2a</code>: aload_0 将第一个变量推送至栈顶</li>
<li><code>b7</code> invokespecial, 后面接一个 u2 类型引用数据，执行构造方法或 private 方法，或它的父类方法</li>
<li><code>00 01</code> 方法引用，指向 init</li>
<li><code>b1</code> return 指令</li>
</ul>
<p>对应的 javap 代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public c631.TestClass();</span><br><span class="line">  descriptor: ()V</span><br><span class="line">  flags: (0x0001) ACC_PUBLIC</span><br><span class="line">  Code:</span><br><span class="line">    stack&#x3D;1, locals&#x3D;1, args_size&#x3D;1</span><br><span class="line">        0: aload_0</span><br><span class="line">        1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">        4: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 3: 0</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0       5     0  this   Lc631&#x2F;TestClass;</span><br></pre></td></tr></table></figure>

<p><code>args_size=1</code> 方法虽然没有参数，但是 Java 编译时会把 this 作为第一个默认参数塞入 code 代码块中。</p>
<p><code>00 00 00 02</code> 异常表长度 0， 属性表长度 2</p>
<p>异常表结构</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">名称</th>
<th align="left">数量</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">start_pc</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">end_pc</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">handler_pc</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">catch_type</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>异常代码案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> x;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          x = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">return</span> x;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          x = <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">return</span> x;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          x = <span class="number">3</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>对应的 javap 代码</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">public int inc();</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=5, args_size=1</span><br><span class="line">         0: iconst_1</span><br><span class="line">         1: istore_1</span><br><span class="line">         2: iload_1</span><br><span class="line">         3: istore_2</span><br><span class="line">         4: iconst_3</span><br><span class="line">         5: istore_1</span><br><span class="line">         6: iload_2</span><br><span class="line">         7: ireturn</span><br><span class="line">         8: astore_2</span><br><span class="line">         9: iconst_2</span><br><span class="line">        10: istore_1</span><br><span class="line">        11: iload_1</span><br><span class="line">        12: istore_3</span><br><span class="line">        13: iconst_3</span><br><span class="line">        14: istore_1</span><br><span class="line">        15: iload_3</span><br><span class="line">        16: ireturn</span><br><span class="line">        17: astore        4</span><br><span class="line">        19: iconst_3</span><br><span class="line">        20: istore_1</span><br><span class="line">        21: aload         4</span><br><span class="line">        23: athrow</span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             0     4     8   Class java/lang/Exception</span><br><span class="line">             0     4    17   any</span><br><span class="line">             8    13    17   any</span><br><span class="line">            17    19    17   any</span><br></pre></td></tr></table></figure>

<p>和书上的结果略有差别，但基本一致</p>
<h4 id="Exceptions-属性"><a href="#Exceptions-属性" class="headerlink" title="Exceptions 属性"></a>Exceptions 属性</h4><p>和 Code 平级的概念，并不是上一章节里 Code 下面的 exception 表。这里表示的是方法可能抛出的异常，就是 throws 后面的那些东西。属性结构如下:</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">number_of_exceptions</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">exception_index_table</td>
<td align="left">number_of_exceptions</td>
</tr>
</tbody></table>
<p>number_of_exceptions: 可能抛出的受检测的异常类型<br>exception_index_table: 指向常量池中的 CONSTANT_Class_info 索引</p>
<h4 id="LineNumberTable-属性"><a href="#LineNumberTable-属性" class="headerlink" title="LineNumberTable 属性"></a>LineNumberTable 属性</h4><p>描述 Java 源码行号和字节码行号之间的对应关系。可以在编译时指定不生成行号，但是会影响异常信息显示和 debug, 表结构如下:</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">line_number_table_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">line_number_info</td>
<td align="left">line_number_table</td>
<td align="left">line_number_table_length</td>
</tr>
</tbody></table>
<p>line_number_info: 包含 start_pc 和 line_number 两个 u2 类型的数据项，前者是字节码行号，后者是 Java 源码行号。</p>
<h4 id="LocalVarableTable-及-LocalVarableTypeTable-属性"><a href="#LocalVarableTable-及-LocalVarableTypeTable-属性" class="headerlink" title="LocalVarableTable 及 LocalVarableTypeTable 属性"></a>LocalVarableTable 及 LocalVarableTypeTable 属性</h4><p>LocalVarableTable 描述局部变量表的变量与 Java 源码中定义的变量之间的关系。非必须，可以指定 javac 参数去除且不影响运行。但是去除后方法参数名称会变为类似 arg0, arg1 的表示，不方便，表结构如下：</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">local_variable_table_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">local_variable_info</td>
<td align="left">local_variable_table</td>
<td align="left">local_variable_table_length</td>
</tr>
</tbody></table>
<p>local_variable_info 代表栈帧与源码中局部变量的关联，结构如下：</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">start_pc</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">descriptor_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">index</td>
<td align="left">1</td>
</tr>
</tbody></table>
<ul>
<li>start_pc + length: 限定了局部变量的作用范围，即作用域</li>
<li>name_index + descriptor_index: 指向常量池中 CONSTANT_Utf8_info 类型索引</li>
<li>index: 栈帧局部变量槽位置，当数据类型为 64 位则占用 index 和 index+1 两个</li>
</ul>
<p>LocalVarableTypeTable 是 JDK5 时为了支持泛型而引入的，基本功能和 LocalVarableTable 一样。</p>
<h4 id="SourceFile-及-SourceDebugExtension-属性"><a href="#SourceFile-及-SourceDebugExtension-属性" class="headerlink" title="SourceFile 及 SourceDebugExtension 属性"></a>SourceFile 及 SourceDebugExtension 属性</h4><p>SourceFile 记录生成 Class 文件的源码文件名称，可选，通常与类名同，特殊情况除外(如内部类)。表结构如下:</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">sourcefile_index</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>sourcefile_index: 指向常量池中 CONSTANT_Utf8_info 型常量的索引，值问文件名。</p>
<p>SourceDebugExtension 是 JDK5 中加入的新特性，存储额外调试信息，支持类似 JSP 这种使用 Java 编译器但是语法不同的语言，类中最多只允许一个该属性。表结构如下：</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">debug_extension[attribute_length]</td>
<td align="left">1</td>
</tr>
</tbody></table>
<h4 id="ConstantValue-属性"><a href="#ConstantValue-属性" class="headerlink" title="ConstantValue 属性"></a>ConstantValue 属性</h4><p>ConstantValue 通知虚拟机自动为静态变量赋值。只有被 static 修饰的变量才能使用这个属性。虚拟机中对非 static 变量在 <init>() 方法总进行，对于静态变量则有两种方式，一种是构造器 <clinit>() 另一种是 ConstantValue。Oracle 的 javac 中的实现方式为：static + final + 基本类型/String 在 ConstantValue 中赋值， 没有 final 或者是其他数据类型则在 <clinit>() 中赋值。表结构如下：</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">constantvalue_index</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>constantvalue_index: 指向常量池中一个引用，可选类型有 CONSTANT_Long_info, CONSTANT_Float_info, CONSTANT_Double_info, CONSTANT_Integer_info 和 CONSTANT_String_info。</p>
<h4 id="InnerClasses-属性"><a href="#InnerClasses-属性" class="headerlink" title="InnerClasses 属性"></a>InnerClasses 属性</h4><p>InnerClasses 记录内部类与宿主类之间的关联。结构如下：</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">number_of_classes</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">inner_classes_info</td>
<td align="left">inner_classes</td>
<td align="left">number_of_classes</td>
</tr>
</tbody></table>
<p>number_of_classes: 内部类个数</p>
<p>inner_classes_info 结构如下</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">inner_class_info_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">outer_class_info_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">inner_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">inner_class_access_flags</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>inner_class_info_index, outer_class_info_index：指向常量池中 CONSTANT_Class_info 常量索引，分别代表内部类和宿主类</p>
<p>inner_name_index：指向常量池 CONSTANT_Utf8_info 引用，代表内部类名称，如果是匿名内部类，值为 0</p>
<p>inner_class_access_flags：和 class 定义相似，类的访问标示符，取值范围如下</p>
<table>
<thead>
<tr>
<th align="left">标志名称</th>
<th align="left">标志值</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ACC_PUBLIC</td>
<td align="left">0x0001</td>
<td align="left">内部类是否为 public</td>
</tr>
<tr>
<td align="left">ACC_PRIVATE</td>
<td align="left">0x0002</td>
<td align="left">内部类是否为 private</td>
</tr>
<tr>
<td align="left">ACC_PROTECTED</td>
<td align="left">0x0004</td>
<td align="left">内部类是否为 protected</td>
</tr>
<tr>
<td align="left">ACC_STATIC</td>
<td align="left">0x0008</td>
<td align="left">内部类是否为 static</td>
</tr>
<tr>
<td align="left">ACC_FINAL</td>
<td align="left">0x0010</td>
<td align="left">内部类是否为 final</td>
</tr>
<tr>
<td align="left">ACC_INTERFACE</td>
<td align="left">0x0020</td>
<td align="left">内部类是否为 接口</td>
</tr>
<tr>
<td align="left">ACC_ABSTRACT</td>
<td align="left">0x0400</td>
<td align="left">内部类是否为 abstract</td>
</tr>
<tr>
<td align="left">ACC_SYNTHETIC</td>
<td align="left">0x1000</td>
<td align="left">内部类是否并非由用户代码产生</td>
</tr>
<tr>
<td align="left">ACC_ANNOTATION</td>
<td align="left">0x2000</td>
<td align="left">内部类是否为一个注解</td>
</tr>
<tr>
<td align="left">ACC_ENUM</td>
<td align="left">0x4000</td>
<td align="left">内部类是否为一个枚举</td>
</tr>
</tbody></table>
<h4 id="Deprecated-及-Synthetic-属性"><a href="#Deprecated-及-Synthetic-属性" class="headerlink" title="Deprecated 及 Synthetic 属性"></a>Deprecated 及 Synthetic 属性</h4><p>都是标志符类型的布尔属性，只有存在有和没有的区别，没有属性概念。Deprecated 对应 @deprecated 注解，表示不推荐使用。</p>
<p>Synthetic 标示字段或方法由编译器产生，JDK5之后同样的功能可以通过设置 ACC_SYNTHETIC 标志位达到。通过这种方式甚至可以越权访问或绕开语言限制功能。典型例子是枚举类中自动生成枚举元素数组和嵌套类的桥接方法(Bridge Method)。</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>attribute_length 必须为 0x00000000，因为诶呦任何属性需要设置。</p>
<h4 id="StackMapTable-属性"><a href="#StackMapTable-属性" class="headerlink" title="StackMapTable 属性"></a>StackMapTable 属性</h4><p>JDK6 增加到 Class 文件规范，一个相当复杂的变长属性，位于 Code 属性表中，用来代替原来的类型检查验证器，提升性能。实现很复杂，Java SE7 新增 120 页篇幅讲解描述。</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">number_of_entries</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">stack_map_frame</td>
<td align="left">stack_map_frame entries</td>
<td align="left">number_of_entries</td>
</tr>
</tbody></table>
<p>SE7 之后规定，版本号 &gt;= 50.0 的 class 文件都必须带有 StackMapTable 属性。一个 Code 属性最多只能有一个 StackMapTable 不然抛错 ClassFormatError。</p>
<h4 id="Signature-属性"><a href="#Signature-属性" class="headerlink" title="Signature 属性"></a>Signature 属性</h4><p>在 JDK5 中和泛型一起加入的，记录泛型签名信息。Java 中的泛型是伪泛型。</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">signature_index</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>signature_index 指向常量池的一个 CONSTANT_Utf8_info 索引。</p>
<h4 id="BootstrapMethods-属性"><a href="#BootstrapMethods-属性" class="headerlink" title="BootstrapMethods 属性"></a>BootstrapMethods 属性</h4><p>JDK7 时新增，JDK8 中通过 lambda 发扬光大。位于类文件属性表中，用于保存 invokeDynamic 指令引用的引导方法限定符。类文件常量池中出现过 CONSTANT_InvokeDynamic_info 类型的常量，那么属性表中必有 BootstrapMethods 属性，一个类文件中至多只能有一个 BootstrapMethods 属性。</p>
<p>BootstrapMethods 属性结构</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">num_bootstrap_methods</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">bootstrap_method</td>
<td align="left">bootstrap_methods</td>
<td align="left">num_bootstrap_methods</td>
</tr>
</tbody></table>
<p>bootstrap_methods[]: 每个成员包含一个指向常量池 CONSTANT_MethodHandle 结构的索引，代表一个引导方法。</p>
<p>bootstrap_method 属性结构</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">bootstrap_method_ref</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">num_bootstrap_arguments</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">bootstrap_arguments</td>
<td align="left">num_bootstrap_arguments</td>
</tr>
</tbody></table>
<ul>
<li>bootstrap_method_ref：对常量池的一个有效索引，索引处必须是一个 CONSTNAT_MethodHandle_info 结构</li>
<li>num_bootstrap_arguments：arg 数量</li>
<li>bootstrap_arguments：每个成员必须是对常量池的有效引用，指向的结构必须是：CONSTANT_String_info，CONSTANT_Class_info, CONSTANT_Integer_info, CONSTANT_Long_info, CONSTANT_Float_info, CONSTANT_Double_info, CONSTANT_MethodHandle_info 或 CONSTANT_MethodType_info 之一</li>
</ul>
<h4 id="MethodParameters-属性"><a href="#MethodParameters-属性" class="headerlink" title="MethodParameters 属性"></a>MethodParameters 属性</h4><p>JDK8 时加入，之前没有这个属性， jar 包反编译时缺少参数信息，不方便理解，影响传播。之前还有个替代方案，通过 ‘-g:var’ 存入 LocalVariableTable, 但是他时 Code 的字表，在接口方法这类没有具体实现的方法时不生效。</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u1</td>
<td align="left">parameters_count</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">parameter</td>
<td align="left">parameters</td>
<td align="left">parameters_count</td>
</tr>
</tbody></table>
<p>parameter 属性</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">access_flags</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>name_index 指向常量池 CONTANT_Utf8_info 的索引值，代表名称</p>
<p>access_flags 有三种 0x0001-ACC_FINAL, 0x1000-ACC_SYNTHETIC, 0x8000-ACC_MANDATED(原文件中隐式定义，典型用法 this)</p>
<h4 id="模块化相关属性"><a href="#模块化相关属性" class="headerlink" title="模块化相关属性"></a>模块化相关属性</h4><p>TBD 怎是没用到就不记了，以后用到再看看</p>
<h4 id="运行时注解相关属性"><a href="#运行时注解相关属性" class="headerlink" title="运行时注解相关属性"></a>运行时注解相关属性</h4><p>JDK5 时加入了注解相关信息到 Class 文件，他们是 RuntimeVisibleAnnotations, RuntimeInvisibleAnnotations, RuntimeVisibleParameterAnnotations 和 RuntimeInvisibleParameterAnnotations。JDK8 时新家了 RuntimeVisibleTypeAnnotations, RuntimeInvisibleTypeAnnotations。这些属性功能和结构都很雷同。</p>
<p>RuntimeVisibleAnnotations 属性结构</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">attribute_name_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u4</td>
<td align="left">attribute_length</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">num_annotations</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">annotation</td>
<td align="left">annotations</td>
<td align="left">num_annotations</td>
</tr>
</tbody></table>
<p>annotations 属性结构</p>
<table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">name</th>
<th align="left">count</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u2</td>
<td align="left">type_index</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">u2</td>
<td align="left">num_element_value_pairs</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">element_value_pair</td>
<td align="left">element_value_pairs</td>
<td align="left">num_element_value_pairs</td>
</tr>
</tbody></table>
<p>type_index 指向常量池 CONSTANT_Utf8_info 常量的索引， num_element_value_pairs 数组计数器，element_value_pair 为键值对</p>
<h2 id="6-4-字节码指令简介"><a href="#6-4-字节码指令简介" class="headerlink" title="6.4 字节码指令简介"></a>6.4 字节码指令简介</h2><p>虚拟机指令 = 操作码(opcode) + 操作数(oprand)</p>
<p>操作码为一个字节长度，操作数为 0 至 n 个，虚拟机执行模型</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">  自动计算 PC 寄存器的值加 1；</span><br><span class="line">  根据 PC 寄存器指示的位置，从字节码流中取出操作码；</span><br><span class="line">  if (字节码存在操作数) 从字节码流中取出操作数；</span><br><span class="line">  执行操作吗所定义的操作；</span><br><span class="line">&#125; while (字节码流长度 &gt; 0)</span><br></pre></td></tr></table></figure>

<h3 id="6-4-1-字节码与数据类型"><a href="#6-4-1-字节码与数据类型" class="headerlink" title="6.4.1 字节码与数据类型"></a>6.4.1 字节码与数据类型</h3><p>大多数操作码都包含对应操作数类型信息，比如 iload。</p>
<ul>
<li>i - int</li>
<li>l - long</li>
<li>s - short</li>
<li>b - byte</li>
<li>c - char</li>
<li>f - float</li>
<li>d - double</li>
<li>a - reference</li>
</ul>
<p>boolean, byte, short, char 在编译时会被扩展成 int 类型再处理。</p>
<h3 id="6-4-2-加载和存储指令"><a href="#6-4-2-加载和存储指令" class="headerlink" title="6.4.2 加载和存储指令"></a>6.4.2 加载和存储指令</h3><p>用于将数据在栈帧中的局部变量表和操作数栈之间来回传输</p>
<p>将局部变量加载到操作栈：(i/l/f/d/a)load, (i/l/f/d/a)load_<n></p>
<p>将一个数值从操作数栈存储到局部变量表：(i/l/f/d/a)store, (i/l/f/d/a)store_<n></p>
<p>将一个常量加载到操作数栈：bipush, sipush, ldc, ldc_w, ldc2_w, aconst_null, iconst_m1, icont_<i>, lconst_<l>, fconst_<f>, dconst_<d></p>
<p>扩充局部变量表的访问索引指令： wide</p>
<p>iload_<n> 代表了 iload_1, iload_2, iload_3</p>
<h3 id="6-4-3-运算指令"><a href="#6-4-3-运算指令" class="headerlink" title="6.4.3 运算指令"></a>6.4.3 运算指令</h3><p>算术指令用于对 操作数栈 上的两个值进行某种特定运算，并把 结果 重新存入操作栈 顶。byte, short, char 和 Boolean 会转化为 int 计算</p>
<ul>
<li>加法指令： (i, l, f, d)add</li>
<li>减法指令： (i, l, f, d)sub</li>
<li>乘法指令： (i, l, f, d)mul</li>
<li>除法指令： (i, l, f, d)div</li>
<li>求余指令： (i, l, f, d)rem</li>
<li>取反指令： (i, l, f, d)neg</li>
<li>位移指令： ishl, ishr, iushr, lshl, lshr, lushr</li>
<li>按位或指令： ior, lor</li>
<li>按位与指令： iand, land</li>
<li>按位异或指令： ixor, lxor</li>
<li>局部变量自增指令： iinc</li>
<li>比较指令： dcmpg, dcmpl, fcmpg, fcmpl, lcmp</li>
</ul>
<h3 id="6-4-4-类型转换指令"><a href="#6-4-4-类型转换指令" class="headerlink" title="6.4.4 类型转换指令"></a>6.4.4 类型转换指令</h3><p>该指令可以将两种不同数值类型的数据互相转化，这些转化操作一般用于用户代码中的显示类型转化，或者前面提到的字节码指令集中数据类型相关指令无法与数据类型一一对应的问题。</p>
<p>虚拟机直接支持宽化类型转化，及小范围向大范围转换</p>
<ol>
<li>int 类型到 long, float, double</li>
<li>long 到 float， double</li>
<li>float 到 double</li>
</ol>
<p>窄化转化指令： i2b, i2c, i2s, l2i, f2i, f2l, d2i, d2l, d2f。</p>
<p>窄化转化可能发生上限溢出，下限溢出 或精度丢失，但是这些问题都不会抛出运行时异常。</p>
<h3 id="6-4-5-对象创建与访问指令"><a href="#6-4-5-对象创建与访问指令" class="headerlink" title="6.4.5 对象创建与访问指令"></a>6.4.5 对象创建与访问指令</h3><ul>
<li>创建类实例 new</li>
<li>创建数组 newarray, anewarray, multianewarray</li>
<li>访问类字段和实例字段的指令：getfield, putfield, getstatic, putstatic</li>
<li>把一个数组元素加载到操作数栈中的指令：baload, caload, saload, iaload, laload, faload, daload, aaload</li>
<li>将一个操作数栈的值存储到数组元素中：bastore, castore, sastore, iastore, fastore, dastore, aastore</li>
<li>取数组长度的指令：arraylength</li>
<li>检查类实例类型的指令：instanceof, checkcast</li>
</ul>
<h3 id="6-4-6-操作数栈管理指令"><a href="#6-4-6-操作数栈管理指令" class="headerlink" title="6.4.6 操作数栈管理指令"></a>6.4.6 操作数栈管理指令</h3><ul>
<li>将操作数栈栈顶的一个或两个元素出栈：pop, pop2</li>
<li>复制栈顶的一个或两个数值并将复制或双份复制值重新压入栈顶：dup, dup2, dup_x1, dup2_x1, dup_x2, dup2_x2</li>
</ul>
<h3 id="6-4-7-控制转移指令"><a href="#6-4-7-控制转移指令" class="headerlink" title="6.4.7 控制转移指令"></a>6.4.7 控制转移指令</h3><p>可以让 Java 虚拟机有条件或五天见的从指定位置指令的吓一跳指令继续执行程序。</p>
<ul>
<li>条件分支： ifeq, iflt, ifle, ifne, ifgt, ifge, ifnull, ifnonnull, if_icmpeq, if_icmpne, if_icmplt, if_icompgt, if_icomple, if_icompge, if_acmpeq, if_acmpne</li>
<li>复合条件分支：tableswitch, lookupswitch</li>
<li>无条件分支：goto, goto_w, jsr, jsr_w, ret</li>
</ul>
<h3 id="6-4-8-方法调用和返回指令"><a href="#6-4-8-方法调用和返回指令" class="headerlink" title="6.4.8 方法调用和返回指令"></a>6.4.8 方法调用和返回指令</h3><ul>
<li>invokevirtual: 调用对象的实例方法，根据对象的世纪类型进行分派，Java 中最常见的分派方式</li>
<li>invokeinterface: 调用接口方法，运行时搜索一个实现了该接口方法的对象，找出适合的方法进行调用</li>
<li>invokespecial: 调用一些需要特殊处理的实例方法，包括实例初始化方法，私有方法和父类方法</li>
<li>invokestatic: 调用静态方法</li>
<li>invokedynamic: 运行时动态解析出调用点限定符所应用的方法，并执行该方法。</li>
</ul>
<p>返回指令：当返回值是 boolean, byte, char, short, int 时使用 ireturn, 其他还有 lreturn, freturn, dreturn 和 areturn。还有为 void 准备的 return。</p>
<h3 id="6-4-9-异常处理指令"><a href="#6-4-9-异常处理指令" class="headerlink" title="6.4.9 异常处理指令"></a>6.4.9 异常处理指令</h3><p>Java 中显示的排除异常操作由 athrow 指令实现，虚拟机中异常处理不是由字节码指令实现，而是通过 异常表</p>
<h3 id="6-4-10-同步指令"><a href="#6-4-10-同步指令" class="headerlink" title="6.4.10 同步指令"></a>6.4.10 同步指令</h3><p>虚拟机支持方法级别的同步和方法内部一段指令序列的同步，这两种同步结构都是用管程，也叫锁。方法级别的管程是隐示的无需通过字节码指令控制。他的实现在方法调用和返回之间。虚拟机可以重常量池方法表结构中的 ACC_SYNCHRONIZED 得知是否被声明为同步方法。如果执行时出现异常，同步方法所持有的锁会在异常抛到同步方法边界之外时自动释放。对应的指令为 monitorenter 和 monitorexit。</p>
<p>虚拟机必须保证每条 monitorenter 指令都有一条 monitorexit 指令与之对应。</p>
<h2 id="6-5-公有设计，私有实现"><a href="#6-5-公有设计，私有实现" class="headerlink" title="6.5 公有设计，私有实现"></a>6.5 公有设计，私有实现</h2><p>Class 文件格式和字节码集是完全独立于操作系统和虚拟机实现的，任何一款虚拟机实现都必须能够读取 Class 文件并精确实现包含在其中的 Java 虚拟机代码的语义。虚拟机规范鼓励在满足约束的条件下修改和优化实现。虚拟机实现方式主要有两种：</p>
<ol>
<li>将输入的 Java 虚拟机代码在加载或执行时翻译成另一种虚拟机代码</li>
<li>将输入的 Java 虚拟机代码在加载或执行时翻译成宿主机本地指令集，即 即时编译器代码生成技术</li>
</ol>
<h2 id="6-6-Class-文件结构的发展"><a href="#6-6-Class-文件结构的发展" class="headerlink" title="6.6 Class 文件结构的发展"></a>6.6 Class 文件结构的发展</h2><p>相对与 Java 技术体系的变化，Class 文件结构可谓是相当的稳定了。。。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>asm</tag>
        <tag>jvm</tag>
        <tag>todo</tag>
      </tags>
  </entry>
  <entry>
    <title>TIJ4 异常错误 error handing with exceptions</title>
    <url>/hexo/2021/01/21/TIJ4-error-handing-with-exceptions/</url>
    <content><![CDATA[<p>刚好这几天要修一个异常处理的问题，回顾以下异常相关的知识点</p>
<p>想要解决的问题：</p>
<p>[x] runtime 异常和其他的异常有什么区别<br>[x] 异常处理的最佳实践是什么<br>[x] catch 里加一个 return，final 还会执行吗</p>
<p>Answers:</p>
<ol>
<li>RuntimeException 可以不用写 try-catch 处理，而 checked exception 你必须添加 try-catch block</li>
<li>本章的后半截有介绍，首先是根据当前节点是否有能力处理对应的异常，倒数第二章还有介绍一些规则。</li>
<li>final 还是会执行</li>
</ol>
<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>最理想的异常捕捉点是编译期，即代码运行之前。但是并不是所有的 errors 都能在编译器就被捕捉到。剩下的这些问题，我们需要在运行时让异常产生者将错误信息提交给接受者做适当的处理。</p>
<p>提升异常处理是增加代码健壮性的重要方式。异常恢复是每个码农都需要考虑的问题，对于 Java 这种旨在为他人提供接口的语言来说，这点尤为重要。通过提供 error-reporting 错误处理模式，Java 允许组件代码将异常传给客户端代码处理。</p>
<p>Java 中的异常处理机制旨在以尽量少的代码完成经可能多的功能的同时让你的程序覆盖尽可能多的异常情况。异常机制不难学，并且学会了他能马上对你的项目产生益处，他是唯一官方指定的处理异常的方式并且编译器强制检查的。</p>
<p>本章将介绍一些必须要用到异常的代码以及遇到异常时的处理方案。</p>
<h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><p>C 和其他一些早期语言经常会有多中处理异常的方式，这些方式基本都是便宜形式，并且不是语言的一部分。典型的案例就是放回一个特殊的值或者设置一个特殊的 flag，接收方根据这个返回值来进行相应的处理。但是渐渐的码农们突然意识到，自己定义的异常情况可能是不充分的，并且为了覆盖这些没有覆盖到的情况，代码会变得越来越难以维护。</p>
<p>解决方案是将异常处理正规化，这种思路的出现是一个很长过的过程，可以追溯到 1960 年。</p>
<p>exception 表示：我处理这个异常是为了。。。当异常发生时，你可能并不清楚你需要做什么，但是你知道，你不能在正常的执行下去了，你应该做点什么。你就可以将这个异常提交给上层处理，那里可能具备足够的知识处理它。</p>
<p>异常处理机制的另一个明显的好处是，它可以简化你的异常处理代码。如果没有他你必须在多个地方编写检测代码。有了它之后，就不必这么做了，exception 会保证，有人在合适的地方做检查。你只需要在一个地方处理即可。这种机制简化了你的代码，代码被分为两个分之，正常的分支和异常分支，同时你阅读，书写，调试代码也会变的更方便。</p>
<h2 id="Basic-exceptions"><a href="#Basic-exceptions" class="headerlink" title="Basic exceptions"></a>Basic exceptions</h2><p>发生异常的条件下，程序会停止执行当前方法。当代码发生异常时，程序由于缺少某些信息，已经不能继续执行程序了，他能做的就是跳出当前的上下文并且将执行权交给上层。</p>
<p><code>1\0</code> 就是这么一种情况，当代码中出现了除 0 的情况，就需要检查一下了。可能你知道为什么要除 0，可能是你业务逻辑的需要，你知道在这种情况下需要做什么。但是如果这是一个意外情况，你必须停止当前方法并且抛出一个异常。</p>
<p>当你跑出一个异常时，有几件事情会发生。首先一个异常对象会在堆上通过 new 的方式被创建出来。然后当前的执行路径被阻断，异常对象被当前上下文弹出。exception-handling 处理机制开始接收这个异常，并试图妥善的处理它。</p>
<p>Exception handler 就是处理异常的地方，他会判断是否继续执行或者寻求其他解决路径。</p>
<p>想象一个简单的场景，比如你有一个对象引用叫做 <code>t</code>，他可能没有被初始化过，所以你想在使用前检查一下。你可以将检查的错误通过一个对象包裹起来并 thorwing 出去，这种做法就叫做抛出异常，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(t == <span class="keyword">null</span>)</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br></pre></td></tr></table></figure>

<p>这种做法可以让你为以后做打算，他会在之后的什么地方被处理，你很快能看到。</p>
<p>Exceptions 让你能够以 事务(transaction) 为单位处理问题， 你也可以将它想象成一个 undo 系统，你可以设置多个恢复点，当你的程序抛出异常时，他可以将程序恢复到某个稳定的节点。</p>
<p>Exceptions 最重要的一个点就是，当异常发生时，他阻止程序继续执行下去。C 语言在这方面就很糟糕，C 语言中是没有打断机制的，这发生异常时，你都不能预期它会执行到什么状态。</p>
<h2 id="Exception-arguments"><a href="#Exception-arguments" class="headerlink" title="Exception arguments"></a>Exception arguments</h2><p>和其他 Java 中的对象一样，你可以通过 new 关键字创建一个 exception 对象，它有两种构造函数，一种是无参的，另一种是带字符串的，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;t = null&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>当然这个信息字符串也可以在之后通过调用 <code>set</code> 方法设置，之后有该种示例。</p>
<p><code>throw</code> 这个关键词可以产生几种很有趣的结果。当你使用 new 创建一个 exception 的时候，你指定了 throw 的对象。虽然这个对象和你方法的返回值类型不一样，但是它还是会被这个方法返回。由此，你可以将异常处理看作一种特殊的 return 机制。返回的同时，方法和 scope 将会弹出(出栈)。</p>
<p>和普通方法的共同点到此为止了，接下来的处理方式将迥异于普通方法。异常将会在 exception handler 中被处理。</p>
<p>虽然你可以在处理异常时抛出任何 Throwable 的子类，但是一般来说，我们本会更具 error 的具体类型来指定它。error 的信息可以从他的名字和内容体现出来，但是通常来说异常只包含类名而没有其他什么内容。</p>
<h2 id="Catching-an-exception"><a href="#Catching-an-exception" class="headerlink" title="Catching an exception"></a>Catching an exception</h2><p>在理解异常捕捉之前，你先得理解<strong>守护区域</strong>的概念，就是被 try 包裹的部分。它代表了一段可能抛出异常的代码段，这段代码之后会紧接着一段异常处理代码。</p>
<h3 id="The-try-block"><a href="#The-try-block" class="headerlink" title="The try block"></a>The try block</h3><p>如果你在方法体中抛出一个异常(或者方法体中调用的其他方法抛出异常)，那么这个方法体在执行完 throwing 之后就结束了。如果你不想就这个结束，你可以在这些代码外面加一个 try block</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">// Code that might generate exceptions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在不提供异常处理机制的语言中，如果你写代码很仔细的话，你可能需要为每一个方法添加异常处理，但是通过 try block 你只需要将他们全部包裹起来即可。这样你的代码会更容易阅读。</p>
<h3 id="Exception-handlers"><a href="#Exception-handlers" class="headerlink" title="Exception handlers"></a>Exception handlers</h3><p>当然，被抛出的异常都需要有一个地方来处理，这个地方就是 exception handler。它紧跟着 try block 通过关键字 catch 引出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">// Code that might generate exceptions</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(Type1 id1)|&#123;</span><br><span class="line"> <span class="comment">// Handle exceptions of Type1</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(Type2 id2) &#123;</span><br><span class="line"> <span class="comment">// Handle exceptions of Type2</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(Type3 id3) &#123;</span><br><span class="line"> <span class="comment">// Handle exceptions of Type3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// etc...</span></span><br></pre></td></tr></table></figure>

<p>每一个 catch 就是一个小的方法体，只接收一个参数。有时你甚至不需要这个参数，仅仅根据异常的名字就可以写完处理逻辑。</p>
<p>如果异常被抛出，exception-handling 机制会搜寻第一个匹配的 catch 分支并进入，当 catch 分支走完后，异常处理被视为结束。不像 switch，catch 分支<strong>不需要 break 关键字</strong>，执行完直接返回。</p>
<h2 id="Termination-vs-resumption-中断还是继续"><a href="#Termination-vs-resumption-中断还是继续" class="headerlink" title="Termination vs. resumption (中断还是继续?)"></a>Termination vs. resumption (中断还是继续?)</h2><p>异常处理有两种模型，Java 采用的是中断，他认为当异常发生后，你不能在回到异常发生的节点。</p>
<p>另一种是 resumption(继续)，他表示异常发生后，我们可以做一些补救措施，并且尝试重新执行失败的方法。采用这个方式意味着你在异常产生后依旧希望继续执行程序。</p>
<p>如果你想要 resumption 的处理方法，你不能在 error 发生的地方抛异常，或者你可以把你抛异常的代码放到一个循环中，多次运行，知道结果符合你预期。</p>
<p>历史上，码农们有尝试过使用 resumption 机制的操作系统，但最终回归到了 termination 机制。虽然 resumption 机制乍一听上去很美，但是并不是这么实用。可能是因为这种机制下你写的代码不能很通用，难以维护，特别是在写一些大型项目的时候，最后没有保留下来。</p>
<h2 id="Creating-your-own-exceptions"><a href="#Creating-your-own-exceptions" class="headerlink" title="Creating your own exceptions"></a>Creating your own exceptions</h2><p>Java 允许你自己定制异常，你需要做的只是继承一个已有的异常类即可。当然继承的时候如果可能的话，选一个最贴近你异常类的，那是极好的。创建时只需要用它的默认构造函数即可，代码很简单：</p>
<p>自定义个一个异常 SimpleException 继承自 Exception，其他什么都没有。这是很常见的定义异常的方式，它调用默认的无参构造函数。定义异常时，取一个见名知意的名字显得尤为重要。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritingExceptions</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> SimpleException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Throw SimpleException from f()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SimpleException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InheritingExceptions sed = <span class="keyword">new</span> InheritingExceptions();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sed.f();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SimpleException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught it!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Throw SimpleException from f()</span></span><br><span class="line"><span class="comment">// Caught it!</span></span><br></pre></td></tr></table></figure>

<p>下面是调用带参构造的例子，只需要少量的新加 code 就能实现带参构造，声明的时候用上 <code>super</code> 关键字即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FullConstructors</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Throwing MyException from f()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Throwing MyException from g()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;Originated in g()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            g();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Throwing MyException from f()</span></span><br><span class="line"><span class="comment">// reading.container.MyException</span></span><br><span class="line"><span class="comment">//     at reading.container.FullConstructors.f(FullConstructors.java:15)</span></span><br><span class="line"><span class="comment">//     at reading.container.FullConstructors.main(FullConstructors.java:25)</span></span><br><span class="line"><span class="comment">// Throwing MyException from g()</span></span><br><span class="line"><span class="comment">// reading.container.MyException: Originated in g()</span></span><br><span class="line"><span class="comment">//     at reading.container.FullConstructors.g(FullConstructors.java:20)</span></span><br><span class="line"><span class="comment">//     at reading.container.FullConstructors.main(FullConstructors.java:30)</span></span><br></pre></td></tr></table></figure>

<p>在 exception handler 中你可以看到一个方法调用叫做 <code>e.printStackTrace(System.out)</code>。他可以将异常信息输出。</p>
<h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h2><p>Exercise 1: (2) Create a class with a main( ) that throws an object of class Exception<br>inside a try block. Give the constructor for Exception a String argument. Catch the<br>exception inside a catch clause and print the String argument. Add a finally clause and<br>print a message to prove you were there.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exe1Exception</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    Exe1Exception(String msg) &#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exe1Exception(<span class="string">&quot;my exception msg...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exe1Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Into final cluster...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// my exception msg...</span></span><br><span class="line"><span class="comment">// Into final cluster...</span></span><br></pre></td></tr></table></figure>

<p>Exercise 2: (1) Define an object reference and initialize it to null. Try to call a method<br>through this reference. Now wrap the code in a try-catch clause to catch the exception.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String str = <span class="keyword">null</span>;</span><br><span class="line">            System.out.println(str.isEmpty());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Invoked object is null...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Invoked object is null...</span></span><br></pre></td></tr></table></figure>

<p>Exercise 3: (1) Write code to generate and catch an<br>ArraylndexOutOfBoundsException.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] strArr = <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line">            strArr[<span class="number">0</span>] = <span class="string">&quot;str&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ArrayIndexOutOfBoundsException caught...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Exercise 4: (2) Create your own exception class using the extends keyword. Write a<br>constructor for this class that takes a String argument and stores it inside the object with a<br>String reference. Write a method that displays the stored String. Create a try-catch clause<br>to exercise your new exception.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExeException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    ExeException(String msg) &#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getExeExceptionMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExeException(<span class="string">&quot;exe exception...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExeException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught ExeException, msg: &quot;</span> + e.getExeExceptionMsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Caught ExeException, msg: exe exception...</span></span><br></pre></td></tr></table></figure>

<p>Exercise 5: (3) Create your own resumption-like behavior using a while loop that<br>repeats until an exception is no longer thrown. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExeException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(index / <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Arithmetic exception when index is &quot;</span> + index);</span><br><span class="line">                index ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;end program...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Arithmetic exception when index is 0</span></span><br><span class="line"><span class="comment">// Arithmetic exception when index is 1</span></span><br><span class="line"><span class="comment">// Arithmetic exception when index is 2</span></span><br><span class="line"><span class="comment">// end program...</span></span><br></pre></td></tr></table></figure>

<h2 id="Exceptions-and-logging"><a href="#Exceptions-and-logging" class="headerlink" title="Exceptions and logging"></a>Exceptions and logging</h2><p>使用 logging 工具类记录信息，<code>Logger.getLogger()</code> 接收一个字符串作为参数创建 Logger 对象，如果没有其他设置，他回把对应的信息输出到 <code>System.err</code> 中去。<code>printStackTrace()</code> 接收一个 PrintWriter 作为参数，再通过调用 <code>logger.severe()</code> 将信息输出。</p>
<p>上面这种处理方式将所有的 logging 相关动作封装在了异常中，所以很简便，但是更常见的处理方式是将你要处理的 log 在 exception handler 中进行封装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.logging.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(<span class="string">&quot;LoggingException&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoggingException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringWriter trace = <span class="keyword">new</span> StringWriter();</span><br><span class="line">        printStackTrace(<span class="keyword">new</span> PrintWriter(trace));</span><br><span class="line">        logger.severe(trace.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingExceptions</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LoggingException();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LoggingException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Caught &quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LoggingException();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LoggingException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Caught &quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Jan 25, 2021 10:57:56 AM reading.container.LoggingException &lt;init&gt;</span></span><br><span class="line"><span class="comment">// SEVERE: reading.container.LoggingException</span></span><br><span class="line"><span class="comment">//     at reading.container.LoggingExceptions.main(LoggingExceptions.java:20)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Caught reading.container.LoggingException</span></span><br><span class="line"><span class="comment">// Jan 25, 2021 10:57:56 AM reading.container.LoggingException &lt;init&gt;</span></span><br><span class="line"><span class="comment">// SEVERE: reading.container.LoggingException</span></span><br><span class="line"><span class="comment">//     at reading.container.LoggingExceptions.main(LoggingExceptions.java:25)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Caught reading.container.LoggingException</span></span><br></pre></td></tr></table></figure>

<p>下面是在 catch 中 log 异常信息的例子。自定义一个异常 MyException2，重写三种构造函数，分别是默认，带一个字符串，带字符串和数字三种形式。三种方式会分别在异常对象中多设置一个属性。</p>
<p>ExtraFeatures 中声明三个方法，调用三种异初始化函数，并抛出。主函数中，捕获异常并处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException2</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException2</span><span class="params">(String msg)</span> </span>&#123; <span class="keyword">super</span>(msg); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException2</span><span class="params">(String msg, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">val</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Detail Message: &quot;</span> + x + <span class="string">&quot; &quot;</span> + <span class="keyword">super</span>.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtraFeatures</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> MyException2 </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Throwing MyException2 from f()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">throws</span> MyException2 </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Throwing MyException2 from g()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException2(<span class="string">&quot;Originated in g()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> <span class="keyword">throws</span> MyException2 </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Throwing MyException2 from h()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException2(<span class="string">&quot;Originated in h()&quot;</span>, <span class="number">47</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(MyException2 e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            g();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(MyException2 e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            h();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(MyException2 e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">            System.out.println(<span class="string">&quot;e.val() = &quot;</span> + e.val());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Throwing MyException2 from f()</span></span><br><span class="line"><span class="comment">// reading.container.MyException2: Detail Message: 0 null</span></span><br><span class="line"><span class="comment">//     at reading.container.ExtraFeatures.f(ExtraFeatures.java:20)</span></span><br><span class="line"><span class="comment">//     at reading.container.ExtraFeatures.main(ExtraFeatures.java:32)</span></span><br><span class="line"><span class="comment">// Throwing MyException2 from g()</span></span><br><span class="line"><span class="comment">// reading.container.MyException2: Detail Message: 0 Originated in g()</span></span><br><span class="line"><span class="comment">//     at reading.container.ExtraFeatures.g(ExtraFeatures.java:24)</span></span><br><span class="line"><span class="comment">//     at reading.container.ExtraFeatures.main(ExtraFeatures.java:37)</span></span><br><span class="line"><span class="comment">// Throwing MyException2 from h()</span></span><br><span class="line"><span class="comment">// reading.container.MyException2: Detail Message: 47 Originated in h()</span></span><br><span class="line"><span class="comment">//     at reading.container.ExtraFeatures.h(ExtraFeatures.java:28)</span></span><br><span class="line"><span class="comment">//     at reading.container.ExtraFeatures.main(ExtraFeatures.java:42)</span></span><br><span class="line"><span class="comment">// e.val() = 47</span></span><br></pre></td></tr></table></figure>

<p>exception 也是一个 Java 对象，你可以继续扩展这个类，但是值得注意的是，你的包装可能被其他人忽略，因为他们在使用的时候可能只想找一个贴切的异常并丢出去。</p>
<h2 id="The-exception-specification"><a href="#The-exception-specification" class="headerlink" title="The exception specification"></a>The exception specification</h2><p>在 Java 中，你需要告知调用者你的方法可能会抛出什么异常，而且这是强制的。这种语法使用 throw 作为关键字，后面接需要 catch 的异常 <code>void f() throws TooBig, TooSmall, DivZero &#123; //...</code></p>
<p>如果方法声明只是简单的 <code>void f() &#123; //...</code> 这表示没有异常从这个方法中抛出。 <code>&#123;except</code> 表示异常继承自 <code>RuntimeException</code>，这个异常可以在任何地方抛出。在异常声明中，你不能作弊。如果你方法中有抛出异常，但是你没有处理的话，编译器就会监测到并给你提示你要么抛出它要么在方法签名上给出提示。通过自顶向下的约束异常声明，Java 保证了在编译期的异常检测。</p>
<p>有一个特别的地方是，你可以在没有对应实现的情况下抛出异常。这种处理方式可以看作是一个预先打桩，为你将来的实现做准备，而且省去了以后改应用代码的麻烦。</p>
<p>在编译期强制做检测的这种异常叫做 Checked Exception(受检异常)。</p>
<h2 id="Catching-any-exception"><a href="#Catching-any-exception" class="headerlink" title="Catching any exception"></a>Catching any exception</h2><p>在异常处理中，声明一个 catch 来捕获 Exception 以达到捕获几乎所有异常的基类的目的，这样做是可行的而且很常见。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;Caught an exception&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>他会处理几乎所有的受检异常，所以确保将它放到你的 catch 列表的末位。由于他是一个基类，所以你一般不能得到什么很特殊的信息，但是你还是可以调用那些基于 Throwable 的方法，比如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">getMessage</span><span class="params">( )</span>  </span></span><br><span class="line"><span class="function">String <span class="title">getLocalizedMessage</span><span class="params">( )</span>  </span></span><br></pre></td></tr></table></figure>

<p>获取 message，或者是基于本地化的 message。</p>
<p><code>String toString( )</code> 返回一个简短的关于 Throwable 类的描述，如果这个类有详细信息的话，也会包含在其中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">( )</span>  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">(PrintStream)</span>  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">(java.io.PrintWriter)</span>  </span></span><br></pre></td></tr></table></figure>

<p>打印 Throwable 以及对应的调用栈信息。栈信息会告诉你异常发生的点。第一种方式会将异常输出到 standard error, 第二和三种方式会输出到对应的流。</p>
<p>Throwable 还有很多其他的方法可以调用，比如 <code>getClass()</code>， 它能返回一个异常对象，<code>getName()</code> 返回类信息，包含路径名，<code>getSimpleName()</code> 只含有类名。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionMethods</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;My Exception&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught Exception&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;getMessage():&quot;</span> + e.getMessage());</span><br><span class="line">            System.out.println(<span class="string">&quot;getLocalizedMessage():&quot;</span> +</span><br><span class="line">                    e.getLocalizedMessage());</span><br><span class="line">            System.out.println(<span class="string">&quot;toString():&quot;</span> + e);</span><br><span class="line">            System.out.println(<span class="string">&quot;System.out.printlnStackTrace():&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Caught Exception</span></span><br><span class="line"><span class="comment">// getMessage():My Exception</span></span><br><span class="line"><span class="comment">// getLocalizedMessage():My Exception</span></span><br><span class="line"><span class="comment">// toString():java.lang.Exception: My Exception</span></span><br><span class="line"><span class="comment">// System.out.printlnStackTrace():</span></span><br><span class="line"><span class="comment">// java.lang.Exception: My Exception</span></span><br><span class="line"><span class="comment">//     at reading.container.ExceptionMethods.main(ExceptionMethods.java:6)</span></span><br></pre></td></tr></table></figure>

<h3 id="The-stack-trace"><a href="#The-stack-trace" class="headerlink" title="The stack trace"></a>The stack trace</h3><p><code>printStackTrace( )</code> 中的信息也可以通过 <code>getStackTrace( )</code> 得到，他会返回一个信息栈。下面是一个示例，可以看到，root cause 是在第一行打印的，最外层的异常点在最后打印。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhoCalled</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Generate an exception to fill in the stack trace</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">for</span> (StackTraceElement ste : e.getStackTrace())</span><br><span class="line">                System.out.println(ste.getMethodName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        f();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        g();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        f();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">        g();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">        h();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// f</span></span><br><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="comment">// --------------------------------</span></span><br><span class="line"><span class="comment">// f</span></span><br><span class="line"><span class="comment">// g</span></span><br><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="comment">// --------------------------------</span></span><br><span class="line"><span class="comment">// f</span></span><br><span class="line"><span class="comment">// g</span></span><br><span class="line"><span class="comment">// h</span></span><br><span class="line"><span class="comment">// main</span></span><br></pre></td></tr></table></figure>

<h3 id="Rethrowing-an-exception"><a href="#Rethrowing-an-exception" class="headerlink" title="Rethrowing an exception"></a>Rethrowing an exception</h3><p>有时你在捕捉到异常之后会想要再一次 throw 它，比如之前提到的，通过 Exception 捕捉到异常的情况。这时你只需要在 handler 里面再 throw 即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;An exception was thrown&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Rethrowing 会将异常交由更高的 context 处理，这个过程中，异常对象的所有信息都会被保存下来，如果你想要创建一个新的异常对象，你可以使用 <code>fillInStackTrace( )</code> 方法，示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rethrowing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;originating the exception in f()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;thrown from f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Inside g(),e.printStackTrace()&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Inside h(),e.printStackTrace()&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">            <span class="keyword">throw</span> (Exception) e.fillInStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            g();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main: printStackTrace()&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            h();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main: printStackTrace()&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// originating the exception in f()</span></span><br><span class="line"><span class="comment">// Inside g(),e.printStackTrace()</span></span><br><span class="line"><span class="comment">// java.lang.Exception: thrown from f()</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.f(Rethrowing.java:6)</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.g(Rethrowing.java:11)</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.main(Rethrowing.java:31)</span></span><br><span class="line"><span class="comment">// main: printStackTrace()</span></span><br><span class="line"><span class="comment">// java.lang.Exception: thrown from f()</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.f(Rethrowing.java:6)</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.g(Rethrowing.java:11)</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.main(Rethrowing.java:31)</span></span><br><span class="line"><span class="comment">// /--------------------- Dash --------------------/</span></span><br><span class="line"><span class="comment">// originating the exception in f()</span></span><br><span class="line"><span class="comment">// Inside h(),e.printStackTrace()</span></span><br><span class="line"><span class="comment">// java.lang.Exception: thrown from f()</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.f(Rethrowing.java:6)</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.h(Rethrowing.java:21)</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.main(Rethrowing.java:38)</span></span><br><span class="line"><span class="comment">// main: printStackTrace()</span></span><br><span class="line"><span class="comment">// java.lang.Exception: thrown from f()</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.h(Rethrowing.java:25)</span></span><br><span class="line"><span class="comment">//     at reading.container.Rethrowing.main(Rethrowing.java:38)</span></span><br></pre></td></tr></table></figure>

<p><code>f()</code> 中通过 <code>fillInStackTrace( )</code> 改变了异常原点，相比于之前的调用 <code>g()</code> 的方法信息没有了。当然你也可以用 throw 新的 Exception 来实现和 <code>fillInStackTrace()</code> 同样的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OneException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OneException</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TwoException</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RethrowNew</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> OneException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;originating the exception in f()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OneException(<span class="string">&quot;thrown from f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                f();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (OneException e) &#123;</span><br><span class="line">                System.out.println(</span><br><span class="line">                        <span class="string">&quot;Caught in inner try, e.printStackTrace()&quot;</span>);</span><br><span class="line">                e.printStackTrace(System.out);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TwoException(<span class="string">&quot;from inner try&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TwoException e) &#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">                    <span class="string">&quot;Caught in outer try, e.printStackTrace()&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// originating the exception in f()</span></span><br><span class="line"><span class="comment">// Caught in inner try, e.printStackTrace()</span></span><br><span class="line"><span class="comment">// reading.container.OneException: thrown from f()</span></span><br><span class="line"><span class="comment">//     at reading.container.RethrowNew.f(RethrowNew.java:18)</span></span><br><span class="line"><span class="comment">//     at reading.container.RethrowNew.main(RethrowNew.java:24)</span></span><br><span class="line"><span class="comment">// Caught in outer try, e.printStackTrace()</span></span><br><span class="line"><span class="comment">// reading.container.TwoException: from inner try</span></span><br><span class="line"><span class="comment">//     at reading.container.RethrowNew.main(RethrowNew.java:29)</span></span><br></pre></td></tr></table></figure>

<p>最后的 exception handler 只知道异常来源于 inner try block 而不知道任何关于 f() 的信息。你完全不用关心异常的清理问题，他们都是基于堆创建的对象，垃圾回收机制会负责清理他们。</p>
<h3 id="Exception-chaining"><a href="#Exception-chaining" class="headerlink" title="Exception chaining"></a>Exception chaining</h3><p>通常来说，当你抛出自己的异常时，你都会希望这个异常带有原始异常的信息。在 Java 1.4 以前，码农们需要自己处理这个问题，但是之后的版本中，你可以通过在构造函数中传入异常类来实现这个功能。</p>
<p>Throwable 的子类中只有三个提供这个功能，分别是 Error(用于记录 JVM 异常)，Exception 和 RuntimeException。如果其他类型的异常，你也想串联起来的话，你可以调用 <code>initCause()</code> 方法.</p>
<p>示例说明：</p>
<ul>
<li>自定义一个异常 DynamicFieldsException</li>
<li>DynamicFields 为测试类，包含一个需要处理的 field 叫做 fields，他是一个二维数组</li>
<li>fields 初始化时可以给定长度，宽度为固定值 2, 也就是 n*2 的矩阵</li>
<li>fields 的子单元值为对象，不能填充原始类型的值</li>
<li>自定义 toString 方法可以打印矩阵值</li>
<li>setField 可以设置一行的值，如果超出容量，自动 copy + append, 设置的值不能为 null，否则报错</li>
<li>getField 返回对应行的值，如果没有抛异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicFieldsException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicFields</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[][] fields;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicFields</span><span class="params">(<span class="keyword">int</span> initialSize)</span> </span>&#123;</span><br><span class="line">        fields = <span class="keyword">new</span> Object[initialSize][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; initialSize; i++)</span><br><span class="line">            fields[i] = <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">null</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (Object[] obj : fields) &#123;</span><br><span class="line">            result.append(obj[<span class="number">0</span>]);</span><br><span class="line">            result.append(<span class="string">&quot;: &quot;</span>);</span><br><span class="line">            result.append(obj[<span class="number">1</span>]);</span><br><span class="line">            result.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hasField</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (id.equals(fields[i][<span class="number">0</span>]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span></span><br><span class="line">    getFieldNumber(String id) <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">        <span class="keyword">int</span> fieldNum = hasField(id);</span><br><span class="line">        <span class="keyword">if</span> (fieldNum == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchFieldException();</span><br><span class="line">        <span class="keyword">return</span> fieldNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">makeField</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (fields[i][<span class="number">0</span>] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fields[i][<span class="number">0</span>] = id;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">// No empty fields. Add one:</span></span><br><span class="line">        Object[][] tmp = <span class="keyword">new</span> Object[fields.length + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++)</span><br><span class="line">            tmp[i] = fields[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = fields.length; i &lt; tmp.length; i++)</span><br><span class="line">            tmp[i] = <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">null</span>&#125;;</span><br><span class="line">        fields = tmp;</span><br><span class="line">        <span class="comment">// Recursive call with expanded fields:</span></span><br><span class="line">        <span class="keyword">return</span> makeField(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getField</span><span class="params">(String id)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fields[getFieldNumber(id)][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">setField</span><span class="params">(String id, Object value)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> DynamicFieldsException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Most exceptions don’t have a &quot;cause&quot; constructor.</span></span><br><span class="line">            <span class="comment">// In these cases you must use initCause(),</span></span><br><span class="line">            <span class="comment">// available in all Throwable subclasses.</span></span><br><span class="line">            DynamicFieldsException dfe = <span class="keyword">new</span> DynamicFieldsException();</span><br><span class="line">            dfe.initCause(<span class="keyword">new</span> NullPointerException());</span><br><span class="line">            <span class="keyword">throw</span> dfe;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> fieldNumber = hasField(id);</span><br><span class="line">        <span class="keyword">if</span> (fieldNumber == -<span class="number">1</span>)</span><br><span class="line">            fieldNumber = makeField(id);</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = getField(id); <span class="comment">// Get old value</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="comment">// Use constructor that takes &quot;cause&quot;:</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        fields[fieldNumber][<span class="number">1</span>] = value;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DynamicFields df = <span class="keyword">new</span> DynamicFields(<span class="number">3</span>);</span><br><span class="line">        System.out.println(df);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            df.setField(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;A value for d&quot;</span>);</span><br><span class="line">            df.setField(<span class="string">&quot;number&quot;</span>, <span class="number">47</span>);</span><br><span class="line">            df.setField(<span class="string">&quot;number2&quot;</span>, <span class="number">48</span>);</span><br><span class="line">            System.out.println(df);</span><br><span class="line">            df.setField(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;A new value for d&quot;</span>);</span><br><span class="line">            df.setField(<span class="string">&quot;number3&quot;</span>, <span class="number">11</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;df: &quot;</span> + df);</span><br><span class="line">            System.out.println(<span class="string">&quot;df.getField(\&quot;d\&quot;) : &quot;</span> + df.getField(<span class="string">&quot;d&quot;</span>));</span><br><span class="line">            Object field = df.setField(<span class="string">&quot;d&quot;</span>, <span class="keyword">null</span>); <span class="comment">// Exception</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DynamicFieldsException e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// null: null</span></span><br><span class="line"><span class="comment">// null: null</span></span><br><span class="line"><span class="comment">// null: null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// d: A value for d</span></span><br><span class="line"><span class="comment">// number: 47</span></span><br><span class="line"><span class="comment">// number2: 48</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// df: d: A new value for d</span></span><br><span class="line"><span class="comment">// number: 47</span></span><br><span class="line"><span class="comment">// number2: 48</span></span><br><span class="line"><span class="comment">// number3: 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// df.getField(&quot;d&quot;) : A new value for d</span></span><br><span class="line"><span class="comment">// reading.container.DynamicFieldsException</span></span><br><span class="line"><span class="comment">//     at reading.container.DynamicFields.setField(DynamicFields.java:68)</span></span><br><span class="line"><span class="comment">//     at reading.container.DynamicFields.main(DynamicFields.java:98)</span></span><br><span class="line"><span class="comment">// Caused by: java.lang.NullPointerException</span></span><br><span class="line"><span class="comment">//     at reading.container.DynamicFields.setField(DynamicFields.java:69)</span></span><br><span class="line"><span class="comment">//     ... 1 more</span></span><br></pre></td></tr></table></figure>

<p>在 <code>setField()</code> 方法中，我们我们为 DynamicFieldsException 通过调用 initCause 设置了 NPE 为 root</p>
<h2 id="Standard-Java-exceptions"><a href="#Standard-Java-exceptions" class="headerlink" title="Standard Java exceptions"></a>Standard Java exceptions</h2><p>Java 的 Throwable 类代表了所有可 throw 类，有两个常用子类 Error 和 Exception。Error 表示 compile-time 和系统错误，这些是你不需要关心的。另一类是 Exception，这些是码农需要关心的。</p>
<p>想要对 Exception 有一个概览，最好就去看一下 JDK 文档，这可以给你找找感觉，但是当你看了之后，你会发现，这些异常，除了名字不同外，其他基本都是一样的。如果你是用第三方包，那么很大概率会遇到他们自定义的异常。所以最重要的事是了解他的定义，还有就是知道当你遇到它时你需要做什么。</p>
<p>异常的名字就代表了它处理的场景，异常的命名要求贴切明了。异常并不是全都定义在 java.lang 下，其他一些包，比如 util, net 和 io 也都有自己的异常类。你可以通过查看他们的包路径知道这些信息。比如所有的 I/O 异常都是继承于 java.io.IOException。</p>
<h3 id="Special-case-RuntimeException"><a href="#Special-case-RuntimeException" class="headerlink" title="Special case: RuntimeException"></a>Special case: RuntimeException</h3><p>下面是第一个示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果代码中每个可能有 null 引用的地方都需要做 NPE 检测，那想象就很刺激。所幸，这个检测 Java 会替你完成，所以上述的代码中的 NPE 检查是多余的。</p>
<p>JDK 中有一族异常处理类似的问题，Java 代码中会自动抛出，自动处理这些异常签名。他们有一个基类叫做 <code>RuntimeException</code>, 由它派生出来的异常都不需要在声明中特别指出来。他们也被叫做 unchecked exceptions(非受检异常)。虽然你不需要检测 RuntimeException, 但是你在写代码的过程中可能会想要抛出这个异常。</p>
<p>下面是一个没有捕获 RuntimeException 的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NeverCaught</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;From f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        f();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        g();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Exception in thread &quot;main&quot; java.lang.RuntimeException: From f()</span></span><br><span class="line"><span class="comment">//     at reading.container.NeverCaught.f(NeverCaught.java:5)</span></span><br><span class="line"><span class="comment">//     at reading.container.NeverCaught.g(NeverCaught.java:9)</span></span><br><span class="line"><span class="comment">//     at reading.container.NeverCaught.main(NeverCaught.java:13)</span></span><br></pre></td></tr></table></figure>

<p>你可以看到，即使你在 f() 中 throw 了这个异常，但是你在调用它的位置也不需要用异常签名标识它。</p>
<p>时刻牢记，只有 运行时异常 可以这么处理， checked exception 不行，因为 Java 语法中，将运行时异常当作系统错误处理，系统错误的定义：</p>
<ol>
<li>那些你不能预料的异常，比如 null reference</li>
<li>那种作为作者，你在程序中应该检查的错误，比如 ArraylndexOutOfBoundsException</li>
</ol>
<h2 id="Performing-cleanup-with-finally"><a href="#Performing-cleanup-with-finally" class="headerlink" title="Performing cleanup with finally"></a>Performing cleanup with finally</h2><p>在你的代码中总有一些动作是你无论如何都要做的，不管是否有异常发生， 为了应对这些问题，我们在 catch 结束后引入了 <code>finally</code> 这个关键字。表现形式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">// The guarded region: Dangerous activities</span></span><br><span class="line"> <span class="comment">// that might throw A, B, or C</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(A a1) &#123;</span><br><span class="line"> <span class="comment">// Handler for situation A</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(B b1) &#123;</span><br><span class="line"> <span class="comment">// Handler for situation B</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(C c1) &#123;</span><br><span class="line"> <span class="comment">// Handler for situation C</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"> <span class="comment">// Activities that happen every time</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>为了表明 final 是一个必定执行的分支，我们创建了一下示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreeException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyWorks</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Post-increment is zero first time:</span></span><br><span class="line">                <span class="keyword">if</span> (count++ == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ThreeException();</span><br><span class="line">                System.out.println(<span class="string">&quot;No exception&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ThreeException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ThreeException&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;In finally clause&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">2</span>) <span class="keyword">break</span>; <span class="comment">// out of &quot;while&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// ThreeException</span></span><br><span class="line"><span class="comment">// In finally clause</span></span><br><span class="line"><span class="comment">// No exception</span></span><br><span class="line"><span class="comment">// In finally clause</span></span><br></pre></td></tr></table></figure>

<p>从输出的 log 我们可以看到，无论是否有异常抛出，finally 里面的内容都会被执行。</p>
<p>这个代码段同时也提示我们，Java 是不允许我们回到异常点的，如果你将你的 try block 放到一个循环中，你可以设定条件来重复执行他。</p>
<h3 id="What’s-finally-for"><a href="#What’s-finally-for" class="headerlink" title="What’s finally for?"></a>What’s finally for?</h3><p>在一个没有垃圾回收和和自动解构的语言中，finally 是很重要的，但是 Java 语言体系中已经默认给你提供了这些功能，那么 fianlly 又是用来做什么的呢？</p>
<p>finally 可以用于重制除内存以外的对象，比如关闭文件，或者网络链接之类的东西。</p>
<p>示例说明：</p>
<p>下面这个例子，我们想要达到的效果是无论如何要在程序结束时将开关关闭。</p>
<p>我们声明了两个异常 OnOffException1， OnOffException2，但是如果要将关闭的动作放到 catch 中，会出现很多重复的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnOffException1</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnOffException2</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Switch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> state = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state ? <span class="string">&quot;on&quot;</span> : <span class="string">&quot;off&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnOffSwitch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Switch sw = <span class="keyword">new</span> Switch();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> OnOffException1, OnOffException2 </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sw.on();</span><br><span class="line">            <span class="comment">// Code that can throw exceptions...</span></span><br><span class="line">            f();</span><br><span class="line">            sw.off();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OnOffException1 e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;OnOffException1&quot;</span>);</span><br><span class="line">            sw.off();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OnOffException2 e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;OnOffException2&quot;</span>);</span><br><span class="line">            sw.off();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// on</span></span><br><span class="line"><span class="comment">// off</span></span><br></pre></td></tr></table></figure>

<p>我们可以加一个 finally 来统一处理，去除重复代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WithFinally</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Switch sw = <span class="keyword">new</span> Switch();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sw.on();</span><br><span class="line">            <span class="comment">// Code that can throw exceptions...</span></span><br><span class="line">            OnOffSwitch.f();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OnOffException1 e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;OnOffException1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OnOffException2 e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;OnOffException2&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sw.off();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// on</span></span><br><span class="line"><span class="comment">// off</span></span><br></pre></td></tr></table></figure>

<p>现在无论异常是否抛出，switch 都会被 turn off。</p>
<p>下面是一个更加深入的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FourException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlwaysFinally</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Entering first try block&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Entering second try block&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FourException();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;finally in 2nd try block&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FourException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught FourException in 1st try block&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally in 1st try block&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Entering first try block</span></span><br><span class="line"><span class="comment">// Entering second try block</span></span><br><span class="line"><span class="comment">// finally in 2nd try block</span></span><br><span class="line"><span class="comment">// Caught FourException in 1st try block</span></span><br><span class="line"><span class="comment">// finally in 1st try block</span></span><br></pre></td></tr></table></figure>

<p>即使有 break 或者 continue 关键字，finally 还是会被执行，它的出现结束了 goto 关键字的使用。</p>
<h3 id="Using-finally-during-return"><a href="#Using-finally-during-return" class="headerlink" title="Using finally during return"></a>Using finally during return</h3><p>由于 finally 是保证会被执行的，这就使得一段程序中有两个返回点变为可能，而且一些重要的 cleanup 必定会被执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipleReturns</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Initialization that requires cleanup&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Point 1&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;Point 2&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;Point 3&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;End&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Performing cleanup&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">            f(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialization that requires cleanup</span></span><br><span class="line"><span class="comment">// Point 1</span></span><br><span class="line"><span class="comment">// Performing cleanup</span></span><br><span class="line"><span class="comment">// Initialization that requires cleanup</span></span><br><span class="line"><span class="comment">// Point 1</span></span><br><span class="line"><span class="comment">// Point 2</span></span><br><span class="line"><span class="comment">// Performing cleanup</span></span><br><span class="line"><span class="comment">// Initialization that requires cleanup</span></span><br><span class="line"><span class="comment">// Point 1</span></span><br><span class="line"><span class="comment">// Point 2</span></span><br><span class="line"><span class="comment">// Point 3</span></span><br><span class="line"><span class="comment">// Performing cleanup</span></span><br><span class="line"><span class="comment">// Initialization that requires cleanup</span></span><br><span class="line"><span class="comment">// Point 1</span></span><br><span class="line"><span class="comment">// Point 2</span></span><br><span class="line"><span class="comment">// Point 3</span></span><br><span class="line"><span class="comment">// End</span></span><br><span class="line"><span class="comment">// Performing cleanup</span></span><br></pre></td></tr></table></figure>

<p>我们可以看到，不管 return 在哪里，finally 都会被执行到。</p>
<h3 id="Pitfall-the-lost-exception"><a href="#Pitfall-the-lost-exception" class="headerlink" title="Pitfall: the lost exception"></a>Pitfall: the lost exception</h3><p>Java 异常处理终有一个缺陷可能导致我们漏掉异常。这种情况和 finally 有关，示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VeryImportantException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A very important exception!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HoHumException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A trivial exception&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LostMessage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> VeryImportantException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> VeryImportantException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> <span class="keyword">throws</span> HoHumException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HoHumException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            LostMessage lm = <span class="keyword">new</span> LostMessage();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lm.f();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lm.dispose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A trivial exception</span></span><br></pre></td></tr></table></figure>

<p>我们可以看到在上面的例子中 VerylmportantException 被吞了，只有 HoHumException 被捕获了。这种缺陷很严重，异常被完全抹去了，而且很难找到 root cause。</p>
<p>下面是一个更直接的例子, 如果我们在 final 中加了一个 return，那么所有的 try 中的异常都会被 skip 掉。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionSilencer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Using ‘return’ inside the finally block</span></span><br><span class="line">            <span class="comment">// will silence any thrown exception.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Exception-restrictions"><a href="#Exception-restrictions" class="headerlink" title="Exception restrictions"></a>Exception restrictions</h2><p>当你 重写 一个方法的时候，你只能抛出基类方法中规定的异常，这个限制很有用，通过这样的限制，就能使重写的方法可以在原方法出现的地方生效。下面的方法展示了异常在继承体系中的限制情况</p>
<p>示例说明：</p>
<p>Inning 为基类， Storm 为接口， StormyInning 为测试类，继承 Inning 并且实现 Storm 接口。接口和基类中抛出的异常不同，并且接口和异常中有一个方法是同名的。总结规则如下</p>
<ol>
<li>构造函数和一般方法相比，比较特别，它要求必须抛出和基类构造函数一致的异常的同时，可以新增异常</li>
<li>方法只在一个超类(接口或者基类)中出现，那么子类中的异常 &lt;= 超类，甚至可以不抛出异常</li>
<li>如果方法在接口和基类中都出现，则一基类为准</li>
<li>从 main 方法中可以看出，程序会根据你的类信息来处理对应的异常。StormyInning 时处理一类，转化为 Inning 时需要处理的异常就改变了。</li>
</ol>
<p>子类不能抛出基类没有定义的异常的理由：比如在框架层级的代码中，你写了一个 flow, 将所有的一族类统一到一个流程中，如果允许子类可以抛出基类没有的异常，那么就有可能 flow 中没有子类的异常处理逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseballException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foul</span> <span class="keyword">extends</span> <span class="title">BaseballException</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Strike</span> <span class="keyword">extends</span> <span class="title">BaseballException</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Inning</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Inning</span><span class="params">()</span> <span class="keyword">throws</span> BaseballException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">event</span><span class="params">()</span> <span class="keyword">throws</span> BaseballException </span>&#123;</span><br><span class="line">        <span class="comment">// Doesn’t actually have to throw anything</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">atBat</span><span class="params">()</span> <span class="keyword">throws</span> Strike, Foul</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// Throws no checked exceptions</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StormException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RainedOut</span> <span class="keyword">extends</span> <span class="title">StormException</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PopFoul</span> <span class="keyword">extends</span> <span class="title">Foul</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Storm</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">event</span><span class="params">()</span> <span class="keyword">throws</span> RainedOut</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rainHard</span><span class="params">()</span> <span class="keyword">throws</span> RainedOut</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StormyInning</span> <span class="keyword">extends</span> <span class="title">Inning</span> <span class="keyword">implements</span> <span class="title">Storm</span> </span>&#123;</span><br><span class="line">    <span class="comment">// OK to add new exceptions for constructors, but you</span></span><br><span class="line">    <span class="comment">// must deal with the base constructor exceptions:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StormyInning</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> RainedOut, BaseballException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StormyInning</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Foul, BaseballException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Regular methods must conform to base class:</span></span><br><span class="line">    <span class="comment">// !public void walk() throws PopFoul &#123;&#125; //Compile error</span></span><br><span class="line">    <span class="comment">// Interface CANNOT add exceptions to existing</span></span><br><span class="line">    <span class="comment">// methods from the base class:</span></span><br><span class="line">    <span class="comment">// !public void event() throws RainedOut &#123;&#125;</span></span><br><span class="line">    <span class="comment">// If the method doesn’t already exist in the</span></span><br><span class="line">    <span class="comment">// base class, the exception is OK:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rainHard</span><span class="params">()</span> <span class="keyword">throws</span> RainedOut </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// You can choose to not throw any exceptions,</span></span><br><span class="line">    <span class="comment">// even if the base version does:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">event</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Overridden methods can throw inherited exceptions:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">atBat</span><span class="params">()</span> <span class="keyword">throws</span> PopFoul </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            StormyInning si = <span class="keyword">new</span> StormyInning();</span><br><span class="line">            si.atBat();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PopFoul e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Pop foul&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RainedOut e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Rained out&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BaseballException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Generic baseball exception&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Strike not thrown in derived version.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// What happens if you upcast?</span></span><br><span class="line">            Inning i = <span class="keyword">new</span> StormyInning();</span><br><span class="line">            i.atBat();</span><br><span class="line">            <span class="comment">// You must catch the exceptions from the</span></span><br><span class="line">            <span class="comment">// base-class version of the method:</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Strike e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Strike&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Foul e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Foul&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RainedOut e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Rained out&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BaseballException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Generic baseball exception&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然异常签名会在继承时对你做一些语法上的要求，但是它并不是方法的一部分。方法签名只和 方法名，方法参数有关。所以你在重写方法的时候是不能基于异常类型的。</p>
<h2 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h2><p>时常问自己一句，“如果有异常发生，是不是所有的东西都会被清理干净” 是很重要的。大部分情况下你是安全的，但是在构造函数中，这就是个问题了。构造函数中，对象一开始是安全的，但是随着程序的进行，比如打开了一个文件。但是只有在完成读写后他才会关闭这个流。如果在构造函数中抛出异常，那么这个清理工作可能不能顺利完成。这就意味着，在处理构造函数的时候，你必须格外小心。</p>
<p>你可能会想，我们可以用 finally 来处理这种情况，但是情况可能并没有这么简单，因为 finally 是每次都会执行的。如果构造函数中途挂了，一些对象可能没有被正确的创建出来，那么对应的 finally 执行也可能出问题。</p>
<p>下面的例子中，我们用一个 I/O 的例子做示范：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader in;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InputFile</span><span class="params">(String fname)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(fname));</span><br><span class="line">            <span class="comment">// Other code that might throw exceptions</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Could not open &quot;</span> + fname);</span><br><span class="line">            <span class="comment">// Wasn’t open, so don’t close it</span></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// All other exceptions must close it</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e2) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;in.close() unsuccessful&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e; <span class="comment">// Rethrow</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Don’t close it here!!!</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s = in.readLine();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;readLine() failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in.close();</span><br><span class="line">            System.out.println(<span class="string">&quot;dispose() successful&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;in.close() failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造函数里，InputFile 用 String 表示文件名，并在一个 try block 创建一个 FileReader。InputFile 并没有什么特别的地方，它最大的作用是将 FileReader 和 BufferedReader 结合在了一起。</p>
<p>如果 FileReader 的构造失败了，就会抛出 FileNotFoundException。这种情况下，IO 流并没有被正常的开启，我们在异常处理时不需要关闭这个流。除这个异常外的其他异常，则要求我们关闭文件流。因为如果是其他的异常，则当时文件流已经被打开了，我们就需要在处理异常后关闭文件流。close() 方法也会抛出异常，对应的，我们在 catch 中也添加一个 try-catch 处理。处理完这些异常后我们再将这个异常抛出去。</p>
<p>上面的示例中，由于 finally 是每次比执行的，所以不是一个处理 close() 的好地方。</p>
<p>getLine() 会返回下一行内容。底层是调用了 readLine() 方法，它会抛出一个异常，但是这个异常被捕获并转化为 RuntimeException了，所以方法签名中不需要处理该异常。</p>
<p>当 InputFile 对象使用完毕后，调用 dispose() 方法释放资源。你可能想要将这个动作放到 finalize() 方法中，但是 Java 语言体系是不支持这种操作的，算是 Java 的缺陷之一。</p>
<p>像这种例子，最安全的做法应该是在原来的 try block 中再嵌套一个 try block。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cleanup</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputFile in = <span class="keyword">new</span> InputFile(<span class="string">&quot;Cleanup.java&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String s;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> ((s = in.getLine()) != <span class="keyword">null</span>)</span><br><span class="line">                    ; <span class="comment">// Perform line-by-line processing here...</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Caught Exception in main&quot;</span>);</span><br><span class="line">                e.printStackTrace(System.out);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                in.dispose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;InputFile construction failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// dispose() successful</span></span><br></pre></td></tr></table></figure>

<p>上例中，我们有通过两个 try block 进行嵌套，一个处理文件流的构造，一个处理文件流读写。构造方法失败无需调用 dispose()，读写失败则需要调用读写。</p>
<p>这种通用的 cleanup 即使是那些不会抛异常的构造函数，也可以适用。基本规则是：当你创建了需要 cleanup 的对象，你就可以开始适用 try-finally 了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeedsCleanup</span> </span>&#123; <span class="comment">// Construction can’t fail</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;NeedsCleanup &quot;</span> + id + <span class="string">&quot; disposed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConstructionException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeedsCleanup2</span> <span class="keyword">extends</span> <span class="title">NeedsCleanup</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Construction can fail:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NeedsCleanup2</span><span class="params">()</span> <span class="keyword">throws</span> ConstructionException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CleanupIdiom</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Section 1:</span></span><br><span class="line">        NeedsCleanup nc1 = <span class="keyword">new</span> NeedsCleanup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            nc1.dispose();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Section 2:</span></span><br><span class="line">        <span class="comment">// If construction cannot fail you can group objects:</span></span><br><span class="line">        NeedsCleanup nc2 = <span class="keyword">new</span> NeedsCleanup();</span><br><span class="line">        NeedsCleanup nc3 = <span class="keyword">new</span> NeedsCleanup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            nc3.dispose(); <span class="comment">// Reverse order of construction</span></span><br><span class="line">            nc2.dispose();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Section 3:</span></span><br><span class="line">        <span class="comment">// If construction can fail you must guard each one:</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            NeedsCleanup2 nc4 = <span class="keyword">new</span> NeedsCleanup2();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                NeedsCleanup2 nc5 = <span class="keyword">new</span> NeedsCleanup2();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// ...</span></span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    nc5.dispose();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ConstructionException e) &#123; <span class="comment">// nc5 constructor</span></span><br><span class="line">                System.out.println(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                nc4.dispose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ConstructionException e) &#123; <span class="comment">// nc4 constructor</span></span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// NeedsCleanup 1 disposed</span></span><br><span class="line"><span class="comment">// NeedsCleanup 3 disposed</span></span><br><span class="line"><span class="comment">// NeedsCleanup 2 disposed</span></span><br><span class="line"><span class="comment">// NeedsCleanup 5 disposed</span></span><br><span class="line"><span class="comment">// NeedsCleanup 4 disposed</span></span><br></pre></td></tr></table></figure>

<p>在 main() 函数中， section 1 的内容很直截了当，如果构造失败，就不需要 try-finally 了。</p>
<p>section 2 中，如果构造成功，我们可以在一个 try-finally 中同时关闭两个对象。</p>
<p>section 3 中，由于构造函数本身会跑出异常，所以每执行一个对象的初始化，你就需要有一个 try-finally 处理它，对应的代码会变得混乱。在这种情况下，强烈建议你将初始化的代码段也纳入 try 中，虽然有点容于，但是更好维护。</p>
<p>如果 dispose() 也会抛出异常，你需要额外的 try 来处理它，总之你必须处理所有可能出现的情况。</p>
<h2 id="Exception-matching"><a href="#Exception-matching" class="headerlink" title="Exception matching"></a>Exception matching</h2><p>当抛出异常时，异常处理系统会查找最近的处理器。如果找到一个匹配的，那么就视作异常已经被处理，不会找下一个了。</p>
<p>搜索异常是并不会精确匹配，子类异常可以匹配到基类异常处理器。</p>
<p>在下面的例子中，第一个 try block 中 <code>Sneeze</code> 异常被第一个 catch block 捕获，这个合理。但是当我们将第一个 catch 移除时，异常也可以被 Annoyance 这个基类异常捕获。</p>
<p>如果你将第一个示例中的 Annoyance 提前，会有<strong>编译错误</strong>指出 Sneeze 已经被捕获，不需要再处理了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Annoyance</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sneeze</span> <span class="keyword">extends</span> <span class="title">Annoyance</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Catch the exact type:</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Sneeze();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Sneeze s) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught Sneeze&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Annoyance a) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught Annoyance&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Catch the base type:</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Sneeze();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Annoyance a) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught Annoyance&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Caught Sneeze</span></span><br><span class="line"><span class="comment">// Caught Annoyance</span></span><br></pre></td></tr></table></figure>

<h2 id="Alternative-approaches"><a href="#Alternative-approaches" class="headerlink" title="Alternative approaches"></a>Alternative approaches</h2><p>异常处理系统提供了一个在程序异常时的分支。异常状态表示当前程序不能被处理，异常系统开发的初衷是为了给程序员处理异常情况提供便利性。</p>
<p>异常处理的准则之一：不要捕获那些你不知道怎么处理的异常。其实，异常处理的主要目标之一是将异常处理代码从当前节点移除。这样你就可以将你的主要逻辑集中到一个地方，而在不远处的 catch 中集中处理异常代码。这样代码更容易理解和维护。</p>
<p>一个 handler 可以处理多种异常，减少了处理代码的量</p>
<p>Checked exception 会强制你写 catch block 这个有违于 ‘harmful if swallowed’ 原则。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// ... to do something useful</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(ObligatoryException e) &#123;&#125; <span class="comment">// Gulp! </span></span><br></pre></td></tr></table></figure>

<p>码农们仅仅做了捕获，并不处理。但是编译器视这种做法合理，所以除非你重新回顾这段代码，不然这个异常就丢失了。当异常发生时，它被吞了。这是最简单但也可能是最糟糕的一种处理方式了。</p>
<p>第二版中，做了一些改进，我们在处理异常时打印了对应的 log。但是我们在那个时间点还是不知道应该怎么处理它。这个章节我们将提供几个处理异常时的可选项。</p>
<h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><p>各种语言的异常发展历史，pass</p>
<h3 id="Perspectives"><a href="#Perspectives" class="headerlink" title="Perspectives"></a>Perspectives</h3><p>各种语言的异常发展历史，pass</p>
<h3 id="Passing-exceptions-to-the-console"><a href="#Passing-exceptions-to-the-console" class="headerlink" title="Passing exceptions to the console"></a>Passing exceptions to the console</h3><p>在简单的代码段中，最简单的异常处理可能就是将异常抛出不处理。比如我们要打开/关闭一个文件，我们就会需要处理一些 IO Exception。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainException</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Pass all exceptions to the console:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// Open the file:</span></span><br><span class="line">        FileInputStream file = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;MainException.java&quot;</span>);</span><br><span class="line">        <span class="comment">// Use the file ...</span></span><br><span class="line">        <span class="comment">// Close the file:</span></span><br><span class="line">        file.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main() 也是一个可以携带异常签名的方法，上面的例子中，它带有一个异常 Exception，是所有受检异常的基类。通过把它在方法签名中抛出我们就不用在代码段中写 try-catch 了。</p>
<h3 id="Converting-checked-to-unchecked-exceptions"><a href="#Converting-checked-to-unchecked-exceptions" class="headerlink" title="Converting checked to unchecked exceptions"></a>Converting checked to unchecked exceptions</h3><p>从 main() 中抛出异常很方面，但是不实用。很多时候，你在调用其他方法的时候，你会想，我不知道怎么处理该异常，但是我又不想只是打印一条信息。这时我们可以简单的在这个异常外面套一个壳变成 Runtimexception。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">// ... to do something useful</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(IDontKnowWhatToDoWithThisCheckedException e) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>这中处理方式看上去很美好，他可以让你从 checked exception 中解放出来，你没有吞掉它。并且你通过异常链串起来，起初的异常也没有丢失。</p>
<p>虽然不用再写 try-catch 了，但是你还是可以通过 getCause() 处理。</p>
<p>下例中，WrapCheckedException.throwRuntimeException() 可以抛出不同的异常。他们被包裹在 RuntimeException 异常中的 cause 中。TurnOffChecking 中你在调用 throwRuntimeException 时可以不处理 try。</p>
<p>但是如果你想要处理，你也可以在方法调用外面包裹 try 并通过 getCause() 得到原始异常并处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WrapCheckedException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">throwRuntimeException</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException();</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Where am I?&quot;</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123; <span class="comment">// Adapt to unchecked:</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeOtherException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurnOffChecking</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WrapCheckedException wce = <span class="keyword">new</span> WrapCheckedException();</span><br><span class="line">        <span class="comment">// You can call throwRuntimeException() without a try</span></span><br><span class="line">        <span class="comment">// block, and let RuntimeExceptions leave the method:</span></span><br><span class="line">        wce.throwRuntimeException(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// Or you can choose to catch exceptions:</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">3</span>)</span><br><span class="line">                    wce.throwRuntimeException(i);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SomeOtherException();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SomeOtherException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;SomeOtherException: &quot;</span> + e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException re) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> re.getCause();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;FileNotFoundException: &quot;</span> + e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;IOException: &quot;</span> + e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Throwable: &quot;</span> + e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// FileNotFoundException: java.io.FileNotFoundException</span></span><br><span class="line"><span class="comment">// IOException: java.io.IOException</span></span><br><span class="line"><span class="comment">// Throwable: java.lang.RuntimeException: Where am I?</span></span><br><span class="line"><span class="comment">// SomeOtherException: reading.container.SomeOtherException</span></span><br></pre></td></tr></table></figure>

<p>当然你也可以包装一个 RuntimeException 的子类，并用它包装你捕获的受检异常。</p>
<h2 id="Exception-guidelines"><a href="#Exception-guidelines" class="headerlink" title="Exception guidelines"></a>Exception guidelines</h2><ol>
<li>在恰当的地方处理异常(Avoid catching exceptions unless you know what to do with them.)</li>
<li>Fix the problem and call the method that caused the exception again.</li>
<li>修复问题，不要用 retry</li>
<li>Calculate some alternative result instead of what the method was supposed to produce.</li>
<li>Do whatever you can in the current context and rethrow the same exception to a higher context.</li>
<li>Do whatever you can in the current context and throw a different exception to a higher context.</li>
<li>Terminate the program.</li>
<li>Simplify. (If your exception scheme makes things more complicated, then it is painful and annoying to use.)</li>
<li>Make your library and program safer. (This is a short-term investment for debugging, and a long-term investment for application robustness.) </li>
</ol>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Exception 是 Java 的一部分，如果你不了解他，那么你能做的事情就非常有限了。</p>
<p>异常处理的一大好处是，你可以将你的业务逻辑和异常处理代码分开。已经异常处理涵盖两部分，报告异常和修复程序，但是从遗忘的经验中来看，修复这个功能貌似都是难以实现的，或者压根不可能实现。</p>
<p>不管怎么说，我始终相信，报告异常才是异常处理的主要职责。通过异常机制，你可以将更多的精力集中到更有趣，有挑战的部分。</p>
]]></content>
      <categories>
        <category>TIJ4</category>
      </categories>
      <tags>
        <tag>exception</tag>
      </tags>
  </entry>
</search>

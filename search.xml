<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ASM quick guide</title>
    <url>/hexo/2020/09/07/ASM-quick-guide/</url>
    <content><![CDATA[<p>通过本次实验对 ASM 这个字节码框架有一个基本的了解。实验必须是简单明了的，便于重复的。引用一段话很好的概括了 ASM 的功能</p>
<blockquote>
<p>可以负责任的告诉大家，ASM只不过是通过 “Visitor” 模式将 “.class” 类文件的内容从头到尾扫描一遍。因此如果你抱着任何更苛刻的要求最后都将失望而归。</p>
</blockquote>
<p>实验平台信息：<br>    MacOS + IDEA + ASM Bytecode Outline 插件</p>
<h2 id="输出-Class-方法"><a href="#输出-Class-方法" class="headerlink" title="输出 Class 方法"></a>输出 Class 方法</h2><p>准备测试用 class，通过 ASM 输出 class 中的方法名称</p>
<h2 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h2><p>实验内容：准备一个 HelloWorld.class 可以打印出 ‘Hello World’ 字样。通过 ASM 框架使他在答应之前，之后都输出一些 debug 信息，调用时可以使用反射简化实验。</p>
<p>HelloWorld.java 文件内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例，通过反射拿到测试方法并调用查看输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class cls = Class.forName(<span class="string">&quot;sorra.tracesonar.main.aopsample.HelloWorld&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Method sayHello = cls.getDeclaredMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">        sayHello.invoke(cls.newInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// run and get output:</span></span><br><span class="line"><span class="comment">// Hello World...</span></span><br></pre></td></tr></table></figure>

<p>我们想通过 ASM 修改拿到的样板输出为 ‘Test start \n Hello World… \n Test end’，对应的 java code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Expected</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test start&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Test end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>选中文件，右键 -&gt; Show Bytecode Outline 选中 ASMifield tab 可以看到转化后的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> asm.sorra.tracesonar.main.aopsample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpectedDump</span> <span class="keyword">implements</span> <span class="title">Opcodes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] dump() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        ClassWriter cw = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">        FieldVisitor fv;</span><br><span class="line">        MethodVisitor mv;</span><br><span class="line">        AnnotationVisitor av0;</span><br><span class="line"></span><br><span class="line">        cw.visit(<span class="number">52</span>, ACC_PUBLIC + ACC_SUPER, <span class="string">&quot;sorra/tracesonar/main/aopsample/Expected&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        cw.visitSource(<span class="string">&quot;Expected.java&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            mv = cw.visitMethod(ACC_PUBLIC, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            mv.visitCode();</span><br><span class="line">            Label l0 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l0);</span><br><span class="line">            mv.visitLineNumber(<span class="number">3</span>, l0);</span><br><span class="line">            mv.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            mv.visitInsn(RETURN);</span><br><span class="line">            Label l1 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l1);</span><br><span class="line">            mv.visitLocalVariable(<span class="string">&quot;this&quot;</span>, <span class="string">&quot;Lsorra/tracesonar/main/aopsample/Expected;&quot;</span>, <span class="keyword">null</span>, l0, l1, <span class="number">0</span>);</span><br><span class="line">            mv.visitMaxs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            mv.visitEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            mv = cw.visitMethod(ACC_PUBLIC, <span class="string">&quot;sayHello&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            mv.visitCode();</span><br><span class="line">            Label l0 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l0);</span><br><span class="line">            mv.visitLineNumber(<span class="number">5</span>, l0);</span><br><span class="line">            mv.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>);</span><br><span class="line">            mv.visitLdcInsn(<span class="string">&quot;Test start&quot;</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            Label l1 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l1);</span><br><span class="line">            mv.visitLineNumber(<span class="number">6</span>, l1);</span><br><span class="line">            mv.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>);</span><br><span class="line">            mv.visitLdcInsn(<span class="string">&quot;Hello World...&quot;</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            Label l2 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l2);</span><br><span class="line">            mv.visitLineNumber(<span class="number">7</span>, l2);</span><br><span class="line">            mv.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>);</span><br><span class="line">            mv.visitLdcInsn(<span class="string">&quot;Test end&quot;</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            Label l3 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l3);</span><br><span class="line">            mv.visitLineNumber(<span class="number">8</span>, l3);</span><br><span class="line">            mv.visitInsn(RETURN);</span><br><span class="line">            Label l4 = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitLabel(l4);</span><br><span class="line">            mv.visitLocalVariable(<span class="string">&quot;this&quot;</span>, <span class="string">&quot;Lsorra/tracesonar/main/aopsample/Expected;&quot;</span>, <span class="keyword">null</span>, l0, l4, <span class="number">0</span>);</span><br><span class="line">            mv.visitMaxs(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">            mv.visitEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        cw.visitEnd();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cw.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中类似如下的代码使一些行号和变量的处理，可以删掉不要，不影响就过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Label l0 = <span class="keyword">new</span> Label();</span><br><span class="line">mv.visitLabel(l0);</span><br><span class="line">mv.visitLineNumber(<span class="number">3</span>, l0);</span><br><span class="line">...</span><br><span class="line">Label l4 = <span class="keyword">new</span> Label();</span><br><span class="line">mv.visitLabel(l4);</span><br><span class="line">mv.visitLocalVariable(<span class="string">&quot;this&quot;</span>, <span class="string">&quot;Lsorra/tracesonar/main/aopsample/Expected;&quot;</span>, <span class="keyword">null</span>, l0, l4, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>将自动生成的文件里的冗余语句删掉，加一个 main 方法，生成文件并存放到根目录下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpectedDump</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] dump() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> cw.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] updated = dump();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;Expected.class&quot;</span>)) &#123;</span><br><span class="line">            fos.write(updated);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Write success...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后找到目标文件，在 IDEA 里面浏览一个，编辑器会自动给出反编译结果，可以发现，在目标语句前后已经加上了我们要的 ‘Test Start/End’ 的 debug 语句了。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>asm</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache, Tomcat 和 Nginx 之间的关系</title>
    <url>/hexo/2020/07/03/Apache-Tomcat-%E5%92%8C-Nginx-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<p>想要解决的问题：</p>
<ol>
<li>Apache, Tomcat 和 Nginx 的定义/区别</li>
<li>Server 搭配拓扑图</li>
</ol>
<h2 id="Apache-Tomcat-和-Nginx-的定义-区别"><a href="#Apache-Tomcat-和-Nginx-的定义-区别" class="headerlink" title="Apache, Tomcat 和 Nginx 的定义/区别"></a>Apache, Tomcat 和 Nginx 的定义/区别</h2><p>名词解释：</p>
<ul>
<li>静态服务器，就是每次访问同一个地址只能返回同样的内容，不会改变</li>
</ul>
<p>Apache</p>
<blockquote>
<p>这里说的 Apache 指的是 Apache Http Server。静态服务器的一种，老牌(始于1995)，曾经的王者，近年来市场占有率下降。<br>模块多，性能稳定，rewrite 性能搞，配置相对复杂</p>
</blockquote>
<p>Nginx</p>
<blockquote>
<p>毛子出品，2004年首发，声势迅猛。如今是三巨头之一(另两个是Microsoft, Apache)，和 Apache 是同类产品。<br>支持反向代理，轻量级，非阻塞，高并发，社区活跃，bug 多</p>
</blockquote>
<p>Tomcat</p>
<blockquote>
<p>全名是 Apache Tomcat，Application Server 的一种，用来提供动态支持，和前面的不是一种类型。</p>
</blockquote>
<h2 id="Server-搭配拓扑图"><a href="#Server-搭配拓扑图" class="headerlink" title="Server 搭配拓扑图"></a>Server 搭配拓扑图</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">                                                       +-----------+</span><br><span class="line">                                              --------&gt;|  Tomcat01 |</span><br><span class="line">                                              |        |           |</span><br><span class="line">+--------------+          +------------+      |        +-----------+</span><br><span class="line">| Client       |          |Apache/Nginx|      |</span><br><span class="line">|              |--------&gt; |            |------|</span><br><span class="line">|              |          |            |      |</span><br><span class="line">+--------------+          +------------+      |</span><br><span class="line">                                              |        +-----------+</span><br><span class="line">                                              --------&gt;| Tomcat02  |</span><br><span class="line">                                                       |           |</span><br><span class="line">                                                       +-----------+</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
      <tags>
        <tag>解释</tag>
      </tags>
  </entry>
  <entry>
    <title>Bug 记录</title>
    <url>/hexo/2019/12/19/Bug%20%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>该页面用于记录实际工作中遇到的 bug，以示警戒</p>
<h2 id="Exception-Handle-遗漏"><a href="#Exception-Handle-遗漏" class="headerlink" title="Exception Handle 遗漏"></a>Exception Handle 遗漏</h2><p>有同事打补丁时对 checked exception 和 RunTimeException 处理有遗漏导致客户使用出问题，反馈后 debug 发现，简化后场景如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 场景描述：</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 在处理 filterData() 时，作者只考虑到 checked exception, 没有考虑 runtime exception.</span></span><br><span class="line"><span class="comment">* 实际使用时，客户在某些情况下会抛出 NPE 这种 runtime exception, 导致返回 null, 显示出现错误</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">populateDatas</span><span class="params">(datas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (data : datas) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                filterData(data);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FilterException fe) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Err when filter &quot;</span> + data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Populate data failed.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java-中的异常分类"><a href="#Java-中的异常分类" class="headerlink" title="Java 中的异常分类"></a>Java 中的异常分类</h3><p><img src="relation.png" alt="Throwable关系图"></p>
<h3 id="常见的异常种类"><a href="#常见的异常种类" class="headerlink" title="常见的异常种类"></a>常见的异常种类</h3><p>RunTimeException:</p>
<ul>
<li>NPE</li>
<li>AuthmeticException</li>
<li>NumberFormatException</li>
<li>IndexOutOfBoundsException</li>
</ul>
<p>CheckedException:</p>
<ul>
<li>反射相关：NoSuchMethod,FieldException</li>
<li>NoSuchFileException</li>
</ul>
<p>Error:</p>
<ul>
<li>OutOfMemmoryError</li>
<li>ZipError</li>
</ul>
<h3 id="一点感悟"><a href="#一点感悟" class="headerlink" title="一点感悟"></a>一点感悟</h3><p>以后处理这样的问题还是要多留心 log, 从这个点出发的话估计这个问题发现只需要一个小时就够了。这次应为有很多干扰的 exception 跑出来，没有仔细查看导致绕了好大一个圈，要不是刚好本地有一个可以重现的样本就爆炸了╭(°A°`)╮ 谨记谨记</p>
<h2 id="Event-数据量撑爆了产品环境"><a href="#Event-数据量撑爆了产品环境" class="headerlink" title="Event 数据量撑爆了产品环境"></a>Event 数据量撑爆了产品环境</h2><p>开发完 event 相关的 feature 之后没有对测试环境进行跟踪，功能没有问题，但是产生了很多冗余数据，比如包含了很多将 field 从 null 跟新到 “” 空字串的 event。很多 data center 因为业务过重，单这个 event 每天产生 500w 数据，Kafka 就危了。。。引以为戒。</p>
<h2 id="JDBC-空字串存为-NULL"><a href="#JDBC-空字串存为-NULL" class="headerlink" title="JDBC 空字串存为 NULL"></a>JDBC 空字串存为 NULL</h2><p>通过 JDBC 存储空字串时，他会自动将它存为 NULL</p>
<h2 id="记录一个-jar-升级导致的问题"><a href="#记录一个-jar-升级导致的问题" class="headerlink" title="记录一个 jar 升级导致的问题"></a>记录一个 jar 升级导致的问题</h2><p>在原先的 code 中，我们有个 UT 需要 xstream 的 Mapper 类，就在 UT 里面直接实现了类接口。某天， xstream 突然被人升级到 1.4.9+ 了，原来的 UT 就挂了，在这个版本里新添加了一个方法 <code>isReferenceable</code> 原来的 case 是没有实现的</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>exception</tag>
        <tag>issues</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 中 C 语言风格的参数声明</title>
    <url>/hexo/2020/08/13/C-Style-Declaration-in-Java/</url>
    <content><![CDATA[<p>最近在调查一个 build issue 的时候发现有一段函数声明大致如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ParameterTest parameterTest = <span class="keyword">new</span> ParameterTest();</span><br><span class="line">        parameterTest.test(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;Jack&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String list[])</span> </span>&#123;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是就感觉很好奇，<code>test(String list[])</code> 这样的声明竟然能通过编译检测。查了下资料，这中做法是合法的，是 C 语言中数组的声明方式，大概是早起为了让 C 程序员能更好的迁移过来做的兼容把，表达的语意和 <code>test(String[] list)</code> 是完全一样的。</p>
<p>果然一个老项目里面什么情况都能遇到 ╮(￣▽￣””)╭</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 插件记事</title>
    <url>/hexo/2020/07/22/Chrome-%E6%8F%92%E4%BB%B6%E8%AE%B0%E4%BA%8B/</url>
    <content><![CDATA[<p>公司日常维护过程中，同事自己写的一个 Chrome 小插件很精巧，符合我小而美的审美，很适合处理某些需求，特此记录一下 Chrome 插件的小知识和一个阅读源码的收获</p>
<h2 id="插件目录结构"><a href="#插件目录结构" class="headerlink" title="插件目录结构"></a>插件目录结构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Root</span><br><span class="line">├── README.md</span><br><span class="line">├── background.js &lt;- 定义一些 js 脚本</span><br><span class="line">├── content.js</span><br><span class="line">├── doc</span><br><span class="line">│   └── images</span><br><span class="line">│       ├── extend_all.png</span><br><span class="line">│       ├── extend_status.png</span><br><span class="line">│       ├── extension_icon.png</span><br><span class="line">│       ├── extension_loaded.png</span><br><span class="line">│       └── load_unpacked_extension.png</span><br><span class="line">├── icon.png &lt;- icon 定义</span><br><span class="line">├── images</span><br><span class="line">│   ├── icon128.png</span><br><span class="line">│   ├── icon16.png</span><br><span class="line">│   └── icon48.png</span><br><span class="line">├── jquery-3.0.0.min.js</span><br><span class="line">├── manifest.json &lt;- 定义了 extension 的基本信息，权限等，可以概览整个应用</span><br><span class="line">├── options.html &lt;- 为客户提供可选项</span><br><span class="line">├── options.js</span><br><span class="line">├── popup.html &lt;- 点击弹出页面，用于交互</span><br><span class="line">├── popup.js</span><br><span class="line">├── style.css</span><br><span class="line">└── test.js</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://developer.chrome.com/extensions/getstarted">Chrome Extension Official</a> 官方文档好又多</li>
</ul>
<h2 id="JS-的一些知识点"><a href="#JS-的一些知识点" class="headerlink" title="JS 的一些知识点"></a>JS 的一些知识点</h2><ul>
<li>.aspx 页面，是基于微软 .Net 开发的站点</li>
<li>html 页面中可以直接在 onclick 里面写 logic，简直是随心所欲</li>
<li>通过 ajax 可以实现表单提交</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- click 中设置 confirm 内容 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ctl00$ContentPlaceHolder$GridViewLive$ctl02$Deletion&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Delete&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;if (!confirm(<span class="symbol">&amp;#39;</span>Are you sure you want to delete the company?<span class="symbol">&amp;#39;</span>)) return false; console.log(&#x27;Click Confirmed&#x27;)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  url: url,</span><br><span class="line">  data: data,</span><br><span class="line">  success: success,</span><br><span class="line">  dataType: dataType</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写形式</span></span><br><span class="line">$.post( <span class="string">&quot;ajax/test.html&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> data </span>) </span>&#123;</span><br><span class="line">  $( <span class="string">&quot;.result&quot;</span> ).html( data );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// form.serialize() 可以方便的实现数据提取</span></span><br><span class="line">$.post( <span class="string">&quot;test.php&quot;</span>, $( <span class="string">&quot;#testform&quot;</span> ).serialize() );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想要成功提示，还可以</span></span><br><span class="line">$.post(url, $(<span class="string">&quot;#ctl00&quot;</span>).serialize()).done(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"> data </span>) </span>&#123;</span><br><span class="line">    alert( <span class="string">&quot;extends success&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="调试脚本"><a href="#调试脚本" class="headerlink" title="调试脚本"></a>调试脚本</h2><p>由于这次只是查看代码，而且验证一些函数的功能，调试还是挺顺利的，直接通过 Chrome console 就完成了，各种变量自动装载完成，美滋滋儿。</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>编译好的 Java 类可以绕过类型检测？</title>
    <url>/hexo/2020/08/07/Compiled-Java-Class-Can-Bypass-Type-Check/</url>
    <content><![CDATA[<p>问题记录：</p>
<p>在做项目重构的时候遇到如下问题，repo1 下有 class A, 重构时我们在 repo1 中抽象出一个 interface FA 实现 A 的所有的方法，然后修改外部引用使 A 解偶。其中发现一个很有趣的现象，原先 repo2 使用 A 编译出来的 jar, 不做任何修改还是可以和 FA 源码进行编译，但是使用 repo2 的源码和 FA 源码进行编译会抛 mismatch 的 exception。猜测和 Java 编译规则有关系，难道是编译后的文件其实是一样的，所以原来的 jar 可以通用，但是源码的话和编译规则有冲突会挂。</p>
<p>本地试了下，并不能重现，不清楚是重现的不对还是公司的项目有什么特殊的处理方式，有机会再看看把 ╮(￣▽￣””)╭</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>编译器</tag>
      </tags>
  </entry>
  <entry>
    <title>DBeaver 设置国内 Maven 源</title>
    <url>/hexo/2020/08/18/DBeaver-Set-Maven-Resource/</url>
    <content><![CDATA[<p>打开 DBeaver -&gt; Preferences -&gt; 搜索 Maven -&gt; Add, 填入信息 <code>http://maven.aliyun.com/nexus/content/groups/public/</code>，调整一下顺序，放到第一位。打完收工～</p>
<p>PS: 设置只有在新建 connection 时生效，所以已经创建的，删了重建即可</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>DBeaver</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Item 34 能用枚举就别用 int 常量</title>
    <url>/hexo/2020/06/05/Effective-Java-Item-34-%E8%83%BD%E7%94%A8%E6%9E%9A%E4%B8%BE%E5%B0%B1%E5%88%AB%E7%94%A8-int-%E5%B8%B8%E9%87%8F/</url>
    <content><![CDATA[<p>本节要点：</p>
<ul>
<li>使用 enum 代替 整型/字符型枚举模式</li>
<li>enum 是 final，单例的安全</li>
<li>在 enum 内部使用 abstract 方法使得实例和方法绑定</li>
<li>用 values() 遍历，用 valueOf() 反向索取</li>
<li>使用策略枚举来封装算法</li>
</ul>
<p>在枚举类加入到 java 大家族之前，为了表达达到枚举的效果，我们使用整形常量来表示，这种表达方式被叫做： int 枚举模式(int enum pattern), 例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> APPLE_FUJI = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> APPLE_PIPPIN = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> APPLE_GRANNY_SMITH = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORANGE_NAVEL = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORANGE_TEMPLE = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORANGE_BLOOD = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>缺点： 类型不安全 + 描述性不好， 与之类似的还有 String 枚举模式(String enum pattern)。就是用 String 来代替上例中的 int, 这种做法更糟糕，就算拼写错误也能编译通过，很容易引入 bug。</p>
<p>枚举中每个实例都是单例的，是 public static final 的 field。 枚举没有可访问的构造器，所以不能被继承，是真正的 final 类型的 class。enum 提供了一个命名空间，所以不同 enum 中重名是允许的。示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Apple &#123; FUJI, PIPPIN, GRANNY_SMITH &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Orange &#123; NAVEL, TEMPLE, BLOOD &#125;</span><br></pre></td></tr></table></figure>

<p>太阳系八大行星枚举示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Planet &#123;</span><br><span class="line">    MERCURY(<span class="number">3.302e+23</span>, <span class="number">2.439e6</span>),</span><br><span class="line">    VENUS(<span class="number">4.869e+24</span>, <span class="number">6.052e6</span>),</span><br><span class="line">    EARTH(<span class="number">5.975e+24</span>, <span class="number">6.378e6</span>), </span><br><span class="line">    MARS(<span class="number">6.419e+23</span>, <span class="number">3.393e6</span>),</span><br><span class="line">    JUPITER(<span class="number">1.899e+27</span>, <span class="number">7.149e7</span>), </span><br><span class="line">    SATURN(<span class="number">5.685e+26</span>, <span class="number">6.027e7</span>),</span><br><span class="line">    URANUS(<span class="number">8.683e+25</span>, <span class="number">2.556e7</span>), </span><br><span class="line">    NEPTUNE(<span class="number">1.024e+26</span>, <span class="number">2.477e7</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> mass;           <span class="comment">// In kilograms</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> radius;         <span class="comment">// In meters</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> surfaceGravity; <span class="comment">// In m / s^2</span></span><br><span class="line">    <span class="comment">// Universal gravitational constant in m^3 / kg s^2</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> G = <span class="number">6.67300E-11</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    Planet(<span class="keyword">double</span> mass, <span class="keyword">double</span> radius) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mass = mass;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">        surfaceGravity = G * mass / (radius * radius);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">radius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">surfaceGravity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> surfaceGravity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">surfaceWeight</span><span class="params">(<span class="keyword">double</span> mass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mass * surfaceGravity;  <span class="comment">// F = ma&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>枚举中所有的 field 都应该是 final 的。枚举都有 values() 静态方法， 按照声明顺序返回枚举值。</p>
<p>根据枚举类的适用范围制定他的访问权限，如果是普适的，就把他定义成顶层类，比如 math 中控制舍入模式的 RoundingMode 类。</p>
<p>枚举绑定行为的最佳实践：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通表示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Operation &#123;</span><br><span class="line">    PLUS, MINUS, TIMES, DIVIDE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> PLUS:</span><br><span class="line">                <span class="keyword">return</span> x + y;</span><br><span class="line">            <span class="keyword">case</span> MINUS:</span><br><span class="line">                <span class="keyword">return</span> x - y;</span><br><span class="line">            <span class="keyword">case</span> TIMES:</span><br><span class="line">                <span class="keyword">return</span> x * y;</span><br><span class="line">            <span class="keyword">case</span> DIVIDE:</span><br><span class="line">                <span class="keyword">return</span> x / y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">&quot;Unknown op: &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺点：</p>
<ul>
<li>没有 throw exception 会编译失败</li>
<li>代码脆弱，在添加新操作，如果没有添加 switch 分支的话，新操作不能生效</li>
</ul>
<p>改进版：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Operation &#123;</span><br><span class="line">    PLUS(<span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, MINUS(<span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x - y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, TIMES(<span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x * y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, DIVIDE(<span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x / y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line"></span><br><span class="line">    Operation(String symbol) &#123;</span><br><span class="line">        <span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过将 apply 方法声明为 abstrct 类型迫使枚举类的每个 field 都必须实现自己的 apply 方法达到绑定的效果，这种做法称为：constant-specific method implementation。</p>
<p>通过使用 values() 方法，可以很方便的实现迭代</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">2.0</span>;</span><br><span class="line"><span class="keyword">double</span> y = <span class="number">4.0</span>;</span><br><span class="line"><span class="keyword">for</span> (Operation op : Operation.values()) &#123;</span><br><span class="line">    System.out.printf(<span class="string">&quot;%f %s %f = %f%n&quot;</span>, x, op , y, op.apply(x, y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果 enum 的 toString 方法被重写了，可以订制 fromString() 方法实现字符到枚举的转化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将枚举的名称和枚举类型配对，存到 map 中</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Operation&gt; stringToEnum = Stream.of(Operation.values()).collect(Collectors.toMap(Object::toString, e-&gt; e));</span><br><span class="line"><span class="comment">// 新增 fromString 方法根据 toString 的值到 map 中取数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;Operation&gt; <span class="title">fromString</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(stringToEnum.get(symbol));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(fromString(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">System.out.println(fromString(<span class="string">&quot;-&quot;</span>));</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Optional.empty</span></span><br><span class="line"><span class="comment">// Optional[-]</span></span><br></pre></td></tr></table></figure>

<p>通过 switch 来控制 enum 中的条件选择的例子, 该例用于计算薪资，根据工作日和休息日采取不同的薪资计算。在这个例子中周末工资的理解很有意思，它等于<strong>基本工资 + 从一开始就累加的加班工资</strong>，这样想的话这个例子理解起来会容易一点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> PayrollDay &#123;</span><br><span class="line">    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINS_PER_SHIFT = <span class="number">8</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> minutesWorked, <span class="keyword">int</span> payRate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> basePay = minutesWorked * payRate;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> overtimePay;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// weekends</span></span><br><span class="line">            <span class="keyword">case</span> SATURDAY:</span><br><span class="line">            <span class="keyword">case</span> SUNDAY:</span><br><span class="line">                overtimePay = basePay / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// work day</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                overtimePay = minutesWorked &lt;= MINS_PER_SHIFT ? <span class="number">0</span> : (minutesWorked - MINS_PER_SHIFT) * payRate / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> basePay + overtimePay;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 enum 中使用 switch 有一个弊端， 新添加的类型，比如我想加一个国亲节加班的薪资计算，如果忘了在 switch 中添加相应的分支， 虽然编译能过，然是薪资计算的规则已经出错了。我们通过在该 enum 中添加一个策略枚举来改善它</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> PayrollDay &#123;</span><br><span class="line">    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY,</span><br><span class="line">    SATURDAY(PayType.WEEKEND), SUNDAY(PayType.WEEKEND);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PayType payType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINS_PER_SHIFT = <span class="number">8</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    PayrollDay(PayType payType) &#123;</span><br><span class="line">        <span class="keyword">this</span>.payType = payType;</span><br><span class="line">    &#125; <span class="comment">// constructor for weekend</span></span><br><span class="line"></span><br><span class="line">    PayrollDay() &#123;</span><br><span class="line">        <span class="keyword">this</span>(PayType.WEEKDAY);</span><br><span class="line">    &#125; <span class="comment">// constructor for weekday</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> minutesWorked, <span class="keyword">int</span> payRate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> payType.pay(minutesWorked, payRate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> PayType &#123;</span><br><span class="line">        WEEKDAY &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">overtimePay</span><span class="params">(<span class="keyword">int</span> minsWorked, <span class="keyword">int</span> payRate)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> minsWorked &lt;= MINS_PER_SHIFT ? <span class="number">0</span> : (minsWorked - MINS_PER_SHIFT) * payRate / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        WEEKEND &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">overtimePay</span><span class="params">(<span class="keyword">int</span> minsWorked, <span class="keyword">int</span> payRate)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> minsWorked * payRate / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">overtimePay</span><span class="params">(<span class="keyword">int</span> minsWorked, <span class="keyword">int</span> payRate)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINS_PER_SHIFT = <span class="number">8</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> minsWorked, <span class="keyword">int</span> payRate)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> basePay = minsWorked * payRate;</span><br><span class="line">            <span class="keyword">return</span> basePay + overtimePay(minsWorked, payRate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以总结起来就是在枚举内部别用 switch， 在外部鼓励使用。枚举在性能上与 int 相当，但是由于包装成对象形肯定要略差的，但是使用上感觉不出来。所以<strong>每当需要一组固定常量，并且在编译时就知道其成员的时候，就应该使用枚举</strong></p>
<p>多个枚举共享行为是可以用<strong>策略枚举</strong>的形式</p>
<p>枚举中的常量集并不一定要始终保持不变(?不是很清楚怎么理解，没碰到过这种情况)</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effective java</tag>
        <tag>枚举和注解</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Item 42 Lambda 优先于匿名类</title>
    <url>/hexo/2020/06/04/Effective-Java-Item-42-Lambda-%E4%BC%98%E5%85%88%E4%BA%8E%E5%8C%BF%E5%90%8D%E7%B1%BB/</url>
    <content><![CDATA[<p>本节要点：</p>
<ul>
<li>使用 lambda 代替匿名函数</li>
<li>不要指定 lambda 中的数据类型，除非报错</li>
<li>主要长度，最多三行</li>
</ul>
<p>名词对照表</p>
<table>
<thead>
<tr>
<th>EN</th>
<th>CN</th>
</tr>
</thead>
<tbody><tr>
<td>function type</td>
<td>函数类型</td>
</tr>
<tr>
<td>function object</td>
<td>函数对象</td>
</tr>
<tr>
<td>function interface</td>
<td>函数接口</td>
</tr>
<tr>
<td>type inference</td>
<td>类型推导</td>
</tr>
<tr>
<td>raw type</td>
<td>原生类型</td>
</tr>
</tbody></table>
<p>自从 java 1.1 发布依赖，如果我们想要创建一个方法对象那么就需要使用到匿名函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;jerry&quot;</span>, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(o1.length(), o2.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// tom</span></span><br><span class="line"><span class="comment">// jerry</span></span><br></pre></td></tr></table></figure>

<p>这种表述方式可以实现我们的需求，但是实现繁琐并且语义表达不顺畅， 在 java 8 中，我们可以使用 lambda 来代替匿名函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;jerry&quot;</span>, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">Collections.sort(list, (s1, s2) -&gt; Integer.compare(s1.length(), s2.length()));</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 甚至可以简写为</span></span><br><span class="line">Collections.sort(list, Comparator.comparingInt(String::length));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者更甚</span></span><br><span class="line">list.sort(Comparator.comparingInt(String::length));</span><br></pre></td></tr></table></figure>

<p>再使用 lambda 的时候有一条原则<strong>去掉 lambda 中的所有参数类型，除非它能使你的表达更清楚</strong>。默认情况下，程序会根据上下文推断出类型，实在不行它会报错的，那个时候你再自己修不迟。</p>
<p>Operator 枚举类优化，可以将参数使用 DoubleBinaryOperator 这个方法接口做优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原始代码</span></span><br><span class="line"><span class="keyword">enum</span> Operation &#123;</span><br><span class="line">    PLUS(<span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    MINUS(<span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x - y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    TIMES(<span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x * y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    DIVIDE(<span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line"></span><br><span class="line">    Operation(String symbol) &#123; <span class="keyword">this</span>.symbol = symbol; &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> symbol; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过将上面的 apply() 方法抽象，这个 Operation 的枚举中的行为可以看作是传入两个数，进行计算， 我们将计算抽象，得到如下的简化形式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Operation &#123;</span><br><span class="line">    PLUS(<span class="string">&quot;+&quot;</span>, (x, y) -&gt; x + y),</span><br><span class="line">    MINUS(<span class="string">&quot;-&quot;</span>, (x, y) -&gt; x - y),</span><br><span class="line">    TIMES(<span class="string">&quot;*&quot;</span>, (x, y) -&gt; x * y),</span><br><span class="line">    DIVIDE(<span class="string">&quot;/&quot;</span>, (x, y) -&gt; x / y);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DoubleBinaryOperator operator;</span><br><span class="line"></span><br><span class="line">    Operation(String symbol, DoubleBinaryOperator operator) &#123;</span><br><span class="line">        <span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">        <span class="keyword">this</span>.operator = operator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> symbol; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> operator.applyAsDouble(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺点：lambda 没有名字和文档，如果一段算法不能自我描述，或者超出了几行，就别把他放到一个 lambda 函数中。 </p>
<p>lambda 注意点：</p>
<ul>
<li>一个 lambda 一行是最理想的，最多不能超过三行！</li>
<li>绝大多视情况下，使用 lambda 代替匿名函数，但是如果是对抽象类的实现，还是得依靠匿名函数， lambda 并不能完成这样的功能。</li>
<li>lambda 不能获取自身引用， 在 lambda 中 this 指代的是外围示例，匿名类中 this 指自己</li>
<li>可能的话，别去序列化 lambda 和 匿名函数</li>
<li>lambda 是小函数的最佳表现方式，除非万不得已，不然就别用匿名类实现函数接口</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effective java</tag>
        <tag>Lambda和Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Item 55 谨慎返回 Optional</title>
    <url>/hexo/2020/06/08/Effective-Java-Item-55-%E8%B0%A8%E6%85%8E%E8%BF%94%E5%9B%9E-Optional/</url>
    <content><![CDATA[<p>在 Java 8 中，引入了 Optional class 给我们在处理无法返回任何值的情况下，有了第三种选择。</p>
<h2 id="Optional-概览，基于-Java-1"><a href="#Optional-概览，基于-Java-1" class="headerlink" title="Optional 概览，基于 Java 1"></a>Optional 概览，基于 Java 1</h2><p>他是一个 final 类， 方法列表如下</p>
<table>
<thead>
<tr>
<th>name</th>
<th>返回值</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>empty()</td>
<td>Optional<T></td>
<td>返回一个空的实例</td>
</tr>
<tr>
<td>filter(Predicate&lt;? super T&gt; predicate)</td>
<td>Optional<T></td>
<td>过滤</td>
</tr>
<tr>
<td>flatMap(Function&lt;? super T, ? extends Optional&lt;? extends U&gt;&gt; mapper)</td>
<td>Optional<U></td>
<td>扁平化操作</td>
</tr>
<tr>
<td>get()</td>
<td>T</td>
<td>取值</td>
</tr>
<tr>
<td>ifPresent(Consumer&lt;? super T&gt; action)</td>
<td>void</td>
<td>如果值存在，执行给定的操作</td>
</tr>
<tr>
<td>ifPresentOrElse(Consumer&lt;? super T&gt; action, Runnable emptyAction)</td>
<td>void</td>
<td>如果存在，执行给定操作，否则运行 empty-base action</td>
</tr>
<tr>
<td>isEmpty()</td>
<td>boolean</td>
<td>是否为空</td>
</tr>
<tr>
<td>isPresent()</td>
<td>boolean</td>
<td>是否有值</td>
</tr>
<tr>
<td>map(Function&lt;? super T, ? extends U&gt; mapper)</td>
<td>Optional<U></td>
<td>对每个元素操作</td>
</tr>
<tr>
<td>of(T value)</td>
<td>Optional<T></td>
<td>生成对象</td>
</tr>
<tr>
<td>ofNullable(T value)</td>
<td>Optional<T></td>
<td>生成 empty 或 有值的 optional 对象</td>
</tr>
<tr>
<td>or(Supplier&lt;? extends Optional&lt;? extends T&gt;&gt; supplier)</td>
<td>Optional<T></td>
<td>present 返回自己，否则返回 supplier 生成的对象</td>
</tr>
<tr>
<td>orElse(T other)</td>
<td>T</td>
<td>present 返回自己，否则返回 else 中指定的值</td>
</tr>
<tr>
<td>orElseGet(Supplier&lt;? extends T&gt; supplier)</td>
<td>T</td>
<td>present 返回自己，否则返回 else 中指定的 spplier 生成的对象</td>
</tr>
<tr>
<td>orElseThrow()</td>
<td>T</td>
<td>存在值，返回，否则抛 NoSuchElementException</td>
</tr>
<tr>
<td>stream()</td>
<td>Stream<T></td>
<td>产生流</td>
</tr>
<tr>
<td>toString()</td>
<td>String</td>
<td>/</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; op = Optional.of(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">System.out.println(op.isEmpty()); <span class="comment">// false</span></span><br><span class="line">System.out.println(op.isPresent()); <span class="comment">// true</span></span><br><span class="line">Optional&lt;String&gt; op2 = Optional.empty();</span><br><span class="line">op2.get(); <span class="comment">// Exception in thread &quot;main&quot; java.util.NoSuchElementException</span></span><br><span class="line">String ret = op2.orElse(<span class="string">&quot;backup&quot;</span>); <span class="comment">// backup</span></span><br></pre></td></tr></table></figure>

<p>or vs orElseGet: 返回值不同，前者返回 Optional 对象，后者返回的泛型指定的值</p>
<h2 id="item-55"><a href="#item-55" class="headerlink" title="item 55"></a>item 55</h2><p>本节要点：</p>
<ul>
<li>Optional 强制客户端对返回值做校验</li>
<li>如果不能从 Optional 中 get 值，会抛 NoSuchElementException</li>
<li>永远不要通过返回 Optional 的方法返回 null, 这违背了设计的本意</li>
<li>Optional 本质上与受检测异常相似</li>
<li>容器类，比如 map, stream, 数组和 optional 都不应该装载在 optional 中，你可以返回空的容器，比如空的数组</li>
<li>不要返回基本包装类型的 Option， 有其他的替代品比如 OptionalInt</li>
<li>Optional 不要作为map， set 中的键元素，数组也不行</li>
<li>Optional 相对而言还是比较消耗资源的，性能要求高的场景谨慎使用</li>
</ul>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">E <span class="title">max</span><span class="params">(Collection&lt;E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Empty collection&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (E e : c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span> || e.compareTo(result) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result =  Objects.requireNonNull(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 Optional 优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">Optional&lt;E&gt; <span class="title">max</span><span class="params">(Collection&lt;E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (E e : c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span> || e.compareTo(result) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result =  Objects.requireNonNull(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Optional.of(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 Stream 优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">Optional&lt;E&gt; <span class="title">max</span><span class="params">(Collection&lt;E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c.stream().max(Comparator.naturalOrder());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果没有返回备选</span></span><br><span class="line">max(words).orElse(<span class="string">&quot;other words...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有，抛出异常</span></span><br><span class="line">max(toys).orElseThrow(TmperTantrumException::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">ph.parent().map(h -&gt; String.valueIf(h.pid())).orElse(<span class="string">&quot;N/A&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤非空的 Optional 集合</span></span><br><span class="line">List&lt;Optional&lt;String&gt;&gt; listOfOptionals = Arrays.asList(Optional.empty(), Optional.of(<span class="string">&quot;foo&quot;</span>), Optional.empty(), Optional.of(<span class="string">&quot;bar&quot;</span>));</span><br><span class="line"><span class="comment">// Java 8 </span></span><br><span class="line">List&lt;String&gt; filteredList = listOfOptionals.stream()</span><br><span class="line">  .filter(Optional::isPresent)</span><br><span class="line">  .map(Optional::get)</span><br><span class="line">  .collect(Collectors.toList());</span><br><span class="line"><span class="comment">// Java9 中可以简化为</span></span><br><span class="line">List&lt;String&gt; filteredList = listOfOptionals.stream()</span><br><span class="line">  .flatMap(Optional::stream)</span><br><span class="line">  .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effective java</tag>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>Equals in python</title>
    <url>/hexo/2020/06/12/Equals-in-python/</url>
    <content><![CDATA[<ul>
<li><code>==</code> 和 <code>is</code> 的区别</li>
<li>怎么使得 Object 使用 <code>==</code> 比较相等</li>
<li>Set 集合中判断相等</li>
</ul>
<h2 id="Vs-is"><a href="#Vs-is" class="headerlink" title="== Vs is"></a>== Vs is</h2><p><code>==</code> 用来判断值相等，<code>is</code> 用来判断引用相等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line"></span><br><span class="line">a == b <span class="comment"># true</span></span><br><span class="line">a <span class="keyword">is</span> b <span class="comment"># true</span></span><br><span class="line"></span><br><span class="line">b = a[:]</span><br><span class="line">a == b <span class="comment"># true</span></span><br><span class="line">a <span class="keyword">is</span> b <span class="comment"># false</span></span><br></pre></td></tr></table></figure>

<h2 id="怎么使得-Object-使用-比较相等"><a href="#怎么使得-Object-使用-比较相等" class="headerlink" title="怎么使得 Object 使用 == 比较相等"></a>怎么使得 Object 使用 <code>==</code> 比较相等</h2><p>你需要重写 class 的 <strong>eq</strong> 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, id, name</span>):</span></span><br><span class="line">        self.id = id</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(other, Person):</span><br><span class="line">            <span class="comment"># don&#x27;t attempt to compare against unrelated types</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line">        <span class="keyword">return</span> self.id == other.id</span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">p2 = Person(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">p3 = Person(<span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p1 == p2 <span class="comment"># false</span></span><br><span class="line">p1 == p3 <span class="comment"># true</span></span><br></pre></td></tr></table></figure>

<p>Note: 重写 <strong>eq</strong> 将会使对象变为 unhashable，在存到 Set， Map 等集合中会有影响，你可以重写 <strong>hash</strong> 来定制</p>
<h2 id="Set-集合中判断相等"><a href="#Set-集合中判断相等" class="headerlink" title="Set 集合中判断相等"></a>Set 集合中判断相等</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, id, name</span>):</span></span><br><span class="line">        self.id = id</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(other, Person):</span><br><span class="line">            <span class="comment"># don&#x27;t attempt to compare against unrelated types</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line">        <span class="keyword">return</span> self.id == other.id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># necessary for instances to behave sanely in dicts and sets.</span></span><br><span class="line">        <span class="keyword">return</span> hash(self.id)</span><br><span class="line"></span><br><span class="line">set([p1, p2, p3]) <span class="comment"># only  p1, p2 will be stored</span></span><br></pre></td></tr></table></figure>

<p>set 中并没有使用新的 object 代替旧的的方法，所以如果想要更新的话只能 remove + add 了</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Get Know About Java Annotation</title>
    <url>/hexo/2020/08/05/Get-Know-About-Java-Annotation/</url>
    <content><![CDATA[<p>记录一下 Java 注解的学习过程</p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>设计一个测试案例，创建一个名为 Marked 的注解类，该注解可以添加在 method 上用来表示方法是否被标记过。在测试用力中遍历被标记的类并打印信息</p>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSelected;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter/Setter methods</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Marked</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Marked(value = true)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自己创建的注解类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Marked &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_print_by_anno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Method[] methods = Person.class.getDeclaredMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">        Marked myAnno = m.getAnnotation(Marked.class);</span><br><span class="line">        <span class="keyword">if</span> (myAnno != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Method: &quot;</span> + m.getName() + <span class="string">&quot; has marked annotation.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Marked value: &quot;</span> + myAnno.value());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Method: &quot;</span> + m.getName() + <span class="string">&quot; don&#x27;t has marked annotation.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>终端打印：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Method: getName has marked annotation.</span><br><span class="line">Marked value: false</span><br><span class="line">Method: setName don&#x27;t has marked annotation.</span><br><span class="line">Method: getAge has marked annotation.</span><br><span class="line">Marked value: true</span><br><span class="line">Method: setAge don&#x27;t has marked annotation.</span><br><span class="line">Method: isSelected don&#x27;t has marked annotation.</span><br><span class="line">Method: setSelected don&#x27;t has marked annotation.</span><br></pre></td></tr></table></figure>

<p>从这个例子可以看出来，Annotation 都是处理 class level 的问题的，和类延伸出来的实例基本没关系了</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>annotation</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 泛型知识整理</title>
    <url>/hexo/2020/08/07/Get-Know-About-Java-Generic/</url>
    <content><![CDATA[<p>记录一下泛型的定义，历史，使用案例等。素材只要来源于 On Java 8, Thinking in Java 和 Effective Java。</p>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>1.5 版本引入，主要动机是支持 Collection 类</p>
<h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>把这一块放到最前面时为了避免理解上的误区，泛型方法和泛型类，泛型接口没有从属关系，就算时普通的 Utils 方法也可以声明泛型方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">printParam</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    GenericUtils.printParam(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    GenericUtils.printParam(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Jack</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>即在声明类时添加类型声明，最常见的如 Collection 系列下的 ArrayList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>泛型接口只是在接口定义的时候在接口名称后接上类型声明而已。使用 lang 包中自带的 <code>Supplier</code> 接口为例，接口在声明时指定类型，并在 get() 方法中指定返回类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.8 中引入的接口，充当工厂方法的角色</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="function">T <span class="title">get</span><span class="params">()</span></span>; &#125;</span><br><span class="line"></span><br><span class="line">Supplier&lt;Integer&gt; integerSupplier = () -&gt; (<span class="keyword">new</span> Random()).nextInt();</span><br><span class="line">System.out.println(integerSupplier.get());</span><br></pre></td></tr></table></figure>

<h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><p>记录一下工作生活中遇到的具体使用案例</p>
<h3 id="指定泛型返回值为某个类的子类"><a href="#指定泛型返回值为某个类的子类" class="headerlink" title="指定泛型返回值为某个类的子类"></a>指定泛型返回值为某个类的子类</h3><p>可以使用泛型方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> &lt;T extends Sup&gt;  <span class="function">T <span class="title">getSometing</span><span class="params">()</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="返回-Map-类型的泛型方法？"><a href="#返回-Map-类型的泛型方法？" class="headerlink" title="返回 Map 类型的泛型方法？"></a>返回 Map 类型的泛型方法？</h2><p>这种用法称为 multi-level wildcards，参考 <a href="http://www.angelikalanger.com/GenericsFAQ/FAQSections/TypeArguments.html#FAQ101">这篇</a> 文章中的定义</p>
<p>子类现有方法为 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Sub&gt;&gt; getResult() &#123;</span><br><span class="line">    <span class="keyword">new</span> HashMap&lt;String, List&lt;Sub&gt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>想要给他一个抽 interface 类似 <code>Map&lt;String, List&lt;? extends Sup&gt;&gt; getResult();</code> 但是会编译错误，需要怎么写？</p>
<ul>
<li><a href="https://stackoverflow.com/questions/22806202/java-nested-generic-type">Stack Overflow 精彩解答</a></li>
</ul>
<p>先说答案，可以使用 <code>Map&lt;String, ? extends List&lt;? extends Sup&gt;&gt; getResult();</code> 这样的语法来适配上面说的这种场景</p>
<p>关于这个问题的几个点：</p>
<ol>
<li>List&lt;Sub&gt; 并不是 List&lt;Sup&gt; 的子类，想要表达子类的概念，Java 使用的是 <code>List&lt;? extends Sup&gt;</code> 这样的语法</li>
<li><code>List&lt;List&lt;?&gt;&gt;</code> 适配所有的参数类型的 list</li>
<li><code>List&lt;? extends List&lt;String&gt;&gt;</code> 适配任何 List 及其子类</li>
<li>两者结合一下 <code>List&lt;? extends List&lt;?&gt;&gt;</code> 适配任何 list 及其子类，并且适配所有参数类型</li>
</ol>
<p>Code sample:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sup</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Sup</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Father</span> </span>&#123; </span><br><span class="line">    Map&lt;String, ? extends List &lt;? extends Sup&gt;&gt; getNestMap(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">implements</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, List&lt;Sub&gt;&gt; getNestMap() &#123;</span><br><span class="line">        Map&lt;String, List&lt;Sub&gt;&gt; map =  <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        List&lt;Sub&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Sub());</span><br><span class="line">        map.put(<span class="string">&quot;Jack&quot;</span>, list);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS: List 前的 <code>? extends</code> 是不可少的，不然 Override 方法会编译错误，应为实现中是用 ArrayList 这个子类实现的，所以接口定义时语意上要有这个声明</p>
<h2 id="工作中遇到的问题"><a href="#工作中遇到的问题" class="headerlink" title="工作中遇到的问题"></a>工作中遇到的问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面两个方法有没有区别？</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WildCardTest</span> </span>&#123;</span><br><span class="line">    &lt;T extends Sup&gt; <span class="function">List&lt;T&gt; <span class="title">getList01</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    List&lt;? extends Sup&gt; getList02();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有。。。看了一下这两个方法编译出来的字节码是完全一样的，除了行号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; access flags 0x401</span><br><span class="line">&#x2F;&#x2F; signature &lt;T::Lcom&#x2F;playground&#x2F;genericsample&#x2F;Sup;&gt;()Ljava&#x2F;util&#x2F;List&lt;TT;&gt;;</span><br><span class="line">&#x2F;&#x2F; declaration: java.util.List&lt;T&gt; getList01&lt;T extends com.playground.genericsample.Sup&gt;()</span><br><span class="line">public abstract getList01()Ljava&#x2F;util&#x2F;List;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; access flags 0x401</span><br><span class="line">&#x2F;&#x2F; signature ()Ljava&#x2F;util&#x2F;List&lt;+Lcom&#x2F;playground&#x2F;genericsample&#x2F;Sup;&gt;;</span><br><span class="line">&#x2F;&#x2F; declaration: java.util.List&lt;? extends com.playground.genericsample.Sup&gt; getList02()</span><br><span class="line">public abstract getList02()Ljava&#x2F;util&#x2F;List;</span><br></pre></td></tr></table></figure>

<p>但是这两种表达方式在实现的时候还是有区别的，用界限符(?)的这种，要求在集合类型前面也加上界限符。。。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>初识 Java 反射</title>
    <url>/hexo/2020/07/31/Get-Know-About-Java-Reflection/</url>
    <content><![CDATA[<p>记录一些 Java 反射基础知识</p>
<h2 id="准备测试-Bean"><a href="#准备测试-Bean" class="headerlink" title="准备测试 Bean"></a>准备测试 Bean</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflectiontest.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUser</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">public</span>  String gender;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Getter and Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="getFields-VS-getDeclaredFields"><a href="#getFields-VS-getDeclaredFields" class="headerlink" title="getFields VS getDeclaredFields"></a>getFields VS getDeclaredFields</h2><p>getFields 只会返回 public 类型的 fields, getDeclaredFields 会返回所有类型的 fieds</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_class_field</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Field[] fields = TestUser.class.getFields();</span><br><span class="line">System.out.println(<span class="string">&quot;Output of getFields...&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">Field[] declareFields = TestUser.class.getDeclaredFields();</span><br><span class="line">System.out.println(<span class="string">&quot;Output of getDeclaredFields...&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Field f : declareFields) &#123;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output of getFields...</span></span><br><span class="line"><span class="comment">// public java.lang.String reflectiontest.bean.TestUser.gender</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Output of getDeclaredFields...</span></span><br><span class="line"><span class="comment">// private java.lang.String reflectiontest.bean.TestUser.name</span></span><br><span class="line"><span class="comment">// private int reflectiontest.bean.TestUser.age</span></span><br><span class="line"><span class="comment">// public java.lang.String reflectiontest.bean.TestUser.gender</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>反射</tag>
        <tag>reflection</tag>
      </tags>
  </entry>
  <entry>
    <title>Stream 类概览</title>
    <url>/hexo/2020/06/07/Get-Know-About-Java-Stream/</url>
    <content><![CDATA[<p>概要：</p>
<ul>
<li>Stream 不是数据结构，更像是算法的集合</li>
<li>在流操作过程中不会修改元数据</li>
<li>以 lambda 表达式为参数</li>
<li>惰性</li>
<li>免费提供并行计算能力</li>
<li>元数据可以无限大</li>
<li>类型确定时使用 IntStream 之类的 class 可以提高效率</li>
</ul>
<h2 id="API-简介"><a href="#API-简介" class="headerlink" title="API 简介"></a>API 简介</h2><p>在 Java 8 的 API 中， Stream 内置了 39 个方法。</p>
<p>匹配，检测 source 中是否有符合条件的元素</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>allMatch(Predicate&lt;? super T&gt; predicate)</td>
<td>boolean</td>
<td>全部匹配返回 true</td>
</tr>
<tr>
<td>anyMatch(Predicate&lt;? super T&gt; predicate)</td>
<td>boolean</td>
<td>只要有一个匹配 true</td>
</tr>
<tr>
<td>noneMatch(Predicate&lt;? super T&gt; predicate)</td>
<td>boolean</td>
<td>全部匹配返回 true</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测Stream 中是否有数能被 2 整除</span></span><br><span class="line"><span class="keyword">boolean</span> ret = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).anyMatch(x -&gt; x % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">System.out.println(ret);</span><br><span class="line"><span class="comment">// output: true</span></span><br></pre></td></tr></table></figure>

<p>用于产生流对象的方法</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>builder()</td>
<td>static <T> Stream.Builder<T></td>
<td>返回一个流的构造器</td>
</tr>
<tr>
<td>concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</td>
<td>static <T> Stream<T></td>
<td>拼接多个流并一起操作</td>
</tr>
<tr>
<td>empty()</td>
<td>static <T> Stream<T></td>
<td>创建一个空的流对象</td>
</tr>
<tr>
<td>generate(Supplier<T> s)</td>
<td>static <T> Stream<T></td>
<td>传入一个 Supplier 构造器，返回构造器指定的对象</td>
</tr>
<tr>
<td>iterate(T seed, UnaryOperator<T> f)</td>
<td>static <T> Stream<T></td>
<td>seed 为初始值，UnaryOperator 为算法</td>
</tr>
<tr>
<td>limit(long maxSize)</td>
<td>Stream<T></td>
<td>配合其他生成方法指定生成个数</td>
</tr>
<tr>
<td>skip(long n)</td>
<td>Stream<T></td>
<td>跳过几个元素，可以结合 iterate, generate 使用</td>
</tr>
<tr>
<td>of(T… values)</td>
<td>static <T> Stream<T></td>
<td>生成一个流</td>
</tr>
<tr>
<td>of(T t)</td>
<td>static <T> Stream<T></td>
<td>/</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.Builder&lt;String&gt; builder = Stream.builder();</span><br><span class="line">Stream&lt;String&gt; stream = builder.add(<span class="string">&quot;Jerry&quot;</span>).add(<span class="string">&quot;Tom&quot;</span>).build();</span><br><span class="line">stream.forEach(System.out::println);</span><br><span class="line"><span class="comment">// output: Jerry Tom</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// concat sample, concat 中为需要拼接的流对象</span></span><br><span class="line">Stream.concat(Stream.of(<span class="string">&quot;Jerry&quot;</span>), Stream.of(<span class="string">&quot;Tom&quot;</span>)).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机产生 3 个整形</span></span><br><span class="line">Stream&lt;Integer&gt; ret = Stream.generate(<span class="keyword">new</span> Random()::nextInt).limit(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// iterate sample, 0 作为初始值，每次返回值 +1， 返回 3 次</span></span><br><span class="line">Stream.iterate(<span class="number">0</span>, x -&gt; x+<span class="number">1</span>).limit(<span class="number">3</span>).forEach(System.out::print);</span><br><span class="line"><span class="comment">// output: 012</span></span><br></pre></td></tr></table></figure>

<p>常用的查找函数 max/min/distinct</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>distinct()</td>
<td>Stream<T></td>
<td>去重</td>
</tr>
<tr>
<td>max(Comparator&lt;? super T&gt; comparator)</td>
<td>Optional<T></td>
<td>查找最大值</td>
</tr>
<tr>
<td>min(Comparator&lt;? super T&gt; comparator)</td>
<td>Optional<T></td>
<td>查找最小值</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// distinct sample</span></span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).distinct().forEach(System.out::print);</span><br><span class="line"><span class="comment">// output: 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果传入的时对象，那个会更具 equals, hashCode 来判断是不是重复</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// Constructor, getter and setter</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(age, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> + <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stream.of(<span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>, <span class="number">30</span>), <span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>, <span class="number">30</span>), <span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>, <span class="number">20</span>)).distinct().forEach(System.out::print);</span><br><span class="line"><span class="comment">// output: Person&#123;name=&#x27;Jack&#x27;, age=30&#125; Person&#123;name=&#x27;Jack&#x27;, age=20&#125;</span></span><br></pre></td></tr></table></figure>

<p>生成指定类型的 Stream 对象</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>map(Function&lt;? super T,? extends R&gt; mapper)</td>
<td>Stream<T></td>
<td>返回指定类型的 Stream</td>
</tr>
<tr>
<td>mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper)</td>
<td>DoubleStream</td>
<td>返回 Double 类型的 Stream</td>
</tr>
<tr>
<td>mapToInt(ToIntFunction&lt;? super T&gt; mapper)</td>
<td>IntStream</td>
<td>返回 Int 类型的 Stream</td>
</tr>
<tr>
<td>mapToLong(ToLongFunction&lt;? super T&gt; mapper)</td>
<td>LongStream</td>
<td>返回 Long 类型的 Stream</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>).map(x -&gt; <span class="string">&quot;Name: &quot;</span> + x).forEach(System.out::println);</span><br><span class="line"><span class="comment">// output: Name: Jack Name: Tom</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他几个类似，只不过把返回类型指定了</span></span><br></pre></td></tr></table></figure>

<p>将流中的处理结果整合输出到集合中</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>collect(Collector&lt;? super T,A,R&gt; collector)</td>
<td>&lt;R,A&gt; R</td>
<td>/</td>
</tr>
<tr>
<td>collect(Supplier<R> supplier, BiConsumer&lt;R,? super T&gt; accumulator, BiConsumer&lt;R,R&gt; combiner)</td>
<td><R> R</td>
<td>/</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将流中的值连接起来</span></span><br><span class="line">Stream.of(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>).collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串组成 string, length 的键值对</span></span><br><span class="line">Map&lt;String, Integer&gt; ret = Stream.of(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>).collect(Collectors.toMap(Function.identity(), String::length));</span><br></pre></td></tr></table></figure>

<p>map 及类似的操作</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>map(Function&lt;? super T,? extends R&gt; mapper)</td>
<td><R> Stream<R></td>
<td>对流中的元素逐个操作</td>
</tr>
<tr>
<td>mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper)</td>
<td>DoubleStream</td>
<td>/</td>
</tr>
<tr>
<td>mapToInt(ToIntFunction&lt;? super T&gt; mapper)</td>
<td>IntStream</td>
<td>/</td>
</tr>
<tr>
<td>mapToLong(ToLongFunction&lt;? super T&gt; mapper)</td>
<td>LongStream</td>
<td>/</td>
</tr>
<tr>
<td>flatMap(Function&lt;? super T,? extends Stream&lt;? extends R&gt;&gt; mapper)</td>
<td><R> Stream<R></td>
<td>和 map 主要的区别时<strong>扁平化</strong></td>
</tr>
<tr>
<td>flatMapToDouble(Function&lt;? super T,? extends DoubleStream&gt; mapper)</td>
<td>DoubleStream</td>
<td>/</td>
</tr>
<tr>
<td>flatMapToInt(Function&lt;? super T,? extends IntStream&gt; mapper)</td>
<td>IntStream</td>
<td>/</td>
</tr>
<tr>
<td>flatMapToLong(Function&lt;? super T,? extends LongStream&gt; mapper)</td>
<td>LongStream</td>
<td>/</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扁平化就是将集合中的集合拆散成基本元素，下例中将 list 中的最基本的元素做平方操作</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; listOfList = Arrays.asList(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>), Arrays.asList(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">listOfList.stream().flatMap(Collection::stream).map(x -&gt; x*x).forEach(System.out::println);</span><br><span class="line"><span class="comment">// output: 1, 4, 9 ,16</span></span><br></pre></td></tr></table></figure>

<p>过滤</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>filter(Predicate&lt;? super T&gt; predicate)</td>
<td>Stream<T></td>
<td>根据 predicate 过滤</td>
</tr>
<tr>
<td>reduce(BinaryOperator<T> accumulator)</td>
<td>Optional<T></td>
<td>从多个元素中产生一个结果</td>
</tr>
<tr>
<td>reduce(T identity, BinaryOperator<T> accumulator)</td>
<td>T</td>
<td>identity - 初始值</td>
</tr>
<tr>
<td>reduce(U identity, BiFunction&lt;U,? super T,U&gt; accumulator, BinaryOperator<U> combiner)</td>
<td><U> U</td>
<td>combiner 是并行运算时需要指定的值</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; ret = Stream.of(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>).reduce(String::concat);</span><br><span class="line">System.out.println(ret.get());</span><br><span class="line"><span class="comment">// output: JackTom</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 identity 作为初始值</span></span><br><span class="line">Optional&lt;String&gt; ret = Optional.ofNullable(Stream.of(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>).reduce(<span class="string">&quot;Name Ret:&quot;</span>, String::concat));</span><br><span class="line">System.out.println(ret.get());</span><br><span class="line"><span class="comment">// output: Name Ret:JackTom</span></span><br></pre></td></tr></table></figure>

<p>Find*</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>findAny()</td>
<td>Optional<T></td>
<td>随机返回一个值，并不关心值的内容，在单线程中一般返回第一个，但是不保证</td>
</tr>
<tr>
<td>findFirst()</td>
<td>Optional<T></td>
<td>返回第一个</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).findFirst().get());</span><br></pre></td></tr></table></figure>

<p>forEach*</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>forEach(Consumer&lt;? super T&gt; action)</td>
<td>void</td>
<td>遍历不保证顺序(多线程下可能会顺序不定)</td>
</tr>
<tr>
<td>forEachOrdered(Consumer&lt;? super T&gt; action)</td>
<td>void</td>
<td>遍历保证顺序</td>
</tr>
</tbody></table>
<p>count</p>
<table>
<thead>
<tr>
<th>name</th>
<th>return</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>count()</td>
<td>long</td>
<td>输出元素个数</td>
</tr>
<tr>
<td>peek(Consumer&lt;? super T&gt; action)</td>
<td>Stream<T></td>
<td>得到流对象，可用于调试</td>
</tr>
<tr>
<td>sorted()</td>
<td>Stream<T></td>
<td>使用自然排序</td>
</tr>
<tr>
<td>sorted(Comparator&lt;? super T&gt; comparator)</td>
<td>Stream<T></td>
<td>定制排序</td>
</tr>
<tr>
<td>toArray()</td>
<td>Object[]</td>
<td>生成数组</td>
</tr>
<tr>
<td>toArray(IntFunction&lt;A[]&gt; generator)</td>
<td><A> A[]</td>
<td>/</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// steam 转化为 array</span></span><br><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">String[] stringArray = stringStream.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">Arrays.stream(stringArray).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h2><p>创建实例或者调用方法时可以使用 <code>::</code> 两个冒号的形式调用</p>
<h2 id="Supplier-使用举例"><a href="#Supplier-使用举例" class="headerlink" title="Supplier 使用举例"></a>Supplier 使用举例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">Supplier&lt;LocalDateTime&gt; s = LocalDateTime::now;</span><br><span class="line">System.out.println(s.get());</span><br><span class="line"></span><br><span class="line">Supplier&lt;String&gt; s1 = () -&gt; dtf.format(LocalDateTime.now());</span><br><span class="line">System.out.println(s1.get());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effective java</tag>
        <tag>枚举和注解</tag>
        <tag>stream</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 小贴士</title>
    <url>/hexo/2019/11/15/Git-Tips/</url>
    <content><![CDATA[<h2 id="怎么添加-commited-file-到-gitignore-中"><a href="#怎么添加-commited-file-到-gitignore-中" class="headerlink" title="怎么添加 commited file 到 .gitignore 中"></a>怎么添加 commited file 到 <code>.gitignore</code> 中</h2><blockquote>
<p><a href="https://stackoverflow.com/questions/7527982/applying-gitignore-to-committed-files/7528016">StackOverflow: applying-gitignore-to-committed-files</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm --cached path/to/file</span><br></pre></td></tr></table></figure>

<h2 id="怎么把local-master-branch-还原成和-remote-端一致"><a href="#怎么把local-master-branch-还原成和-remote-端一致" class="headerlink" title="怎么把local master branch 还原成和 remote 端一致"></a>怎么把local master branch 还原成和 remote 端一致</h2><blockquote>
<p><a href="https://stackoverflow.com/questions/1628088/reset-local-repository-branch-to-be-just-like-remote-repository-head">StackOverflow: reset-local-repository-branch-to-be-just-like-remote-repository-head</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure>

<h2 id="移除本地的-commit"><a href="#移除本地的-commit" class="headerlink" title="移除本地的 commit"></a>移除本地的 commit</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD~1</span><br></pre></td></tr></table></figure>

<h2 id="将本地的单个文件还原成-master-版本"><a href="#将本地的单个文件还原成-master-版本" class="headerlink" title="将本地的单个文件还原成 master 版本"></a>将本地的单个文件还原成 master 版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout origin/master -- /path/to/file</span><br></pre></td></tr></table></figure>

<h2 id="将-git-add-commit-合并到一个命令中"><a href="#将-git-add-commit-合并到一个命令中" class="headerlink" title="将 git add, commit 合并到一个命令中"></a>将 git add, commit 合并到一个命令中</h2><blockquote>
<p><a href="https://stackoverflow.com/questions/4298960/git-add-and-commit-in-one-command">StackOverflow: git-add-and-commit-in-one-command</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># config git alias</span></span><br><span class="line">git config --global alias.add-commit <span class="string">&#x27;!git add -A &amp;&amp; git commit&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># and use it with</span></span><br><span class="line">git add-commit -m <span class="string">&#x27;My commit message&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Rename-local-repo"><a href="#Rename-local-repo" class="headerlink" title="Rename local repo"></a>Rename local repo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout &lt;repo need to re-name&gt;</span><br><span class="line">git branch -m &lt;new name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># or make sure you are not at renamed repo</span></span><br><span class="line">git branch -m &lt;old repo name&gt; &lt;new repo name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="移除-merge-内容"><a href="#移除-merge-内容" class="headerlink" title="移除 merge 内容"></a>移除 merge 内容</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">git merge --abort</span><br></pre></td></tr></table></figure>

<h2 id="国内-git-clone-有时会卡住-有没有-debug-的选项"><a href="#国内-git-clone-有时会卡住-有没有-debug-的选项" class="headerlink" title="国内 git clone 有时会卡住, 有没有 debug 的选项"></a>国内 git clone 有时会卡住, 有没有 debug 的选项</h2><blockquote>
<p><a href="https://stackoverflow.com/questions/6178401/how-can-i-debug-git-git-shell-related-problems">StackOverflow: how-can-i-debug-git-git-shell-related-problems</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIT_CURL_VERBOSE&#x3D;1 GIT_TRACE&#x3D;1 git pull origin master</span><br></pre></td></tr></table></figure>

<h2 id="已创建-repo-添加证书"><a href="#已创建-repo-添加证书" class="headerlink" title="已创建 repo 添加证书"></a>已创建 repo 添加证书</h2><blockquote>
<p>跳转到项目页面，添加文件 ‘create a new file’ -&gt; 输入 ‘license’ 会给出提示</p>
</blockquote>
<h2 id="查看某人的-commit-记录"><a href="#查看某人的-commit-记录" class="headerlink" title="查看某人的 commit 记录"></a>查看某人的 commit 记录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --author=<span class="string">&#x27;jack&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="查看-log-反序"><a href="#查看-log-反序" class="headerlink" title="查看 log 反序"></a>查看 log 反序</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --reverse</span><br></pre></td></tr></table></figure>

<h2 id="对比文件"><a href="#对比文件" class="headerlink" title="对比文件"></a>对比文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff &lt;base-commit&gt; &lt;changed-commit&gt; -- &lt;file-path&gt;</span><br></pre></td></tr></table></figure>

<p>比如我像比较 8ab244e3b2de31ca 相对于 f31762ada1764 有什么改动可以使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff f31762ada1764 8ab244e3b2de31ca -- &lt;file-path&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是相对于 header 的改动，可以省略第一个 commit 内容</span></span><br></pre></td></tr></table></figure>

<h2 id="查看被删除文件的历史记录"><a href="#查看被删除文件的历史记录" class="headerlink" title="查看被删除文件的历史记录"></a>查看被删除文件的历史记录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -- &lt;file path&gt;</span><br></pre></td></tr></table></figure>

<h2 id="查看文件某一行删除记录"><a href="#查看文件某一行删除记录" class="headerlink" title="查看文件某一行删除记录"></a>查看文件某一行删除记录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -G 直接支持正则，-S 需要添加其他参数来支持正则</span></span><br><span class="line">git <span class="built_in">log</span> -S/G<span class="string">&#x27;key&#x27;</span> /path/to/file</span><br></pre></td></tr></table></figure>

<h2 id="已经-check-in-的文件夹加入-gitignore"><a href="#已经-check-in-的文件夹加入-gitignore" class="headerlink" title="已经 check in 的文件夹加入 .gitignore"></a>已经 check in 的文件夹加入 .gitignore</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 处理文件夹</span></span><br><span class="line">git rm -r --cached /folder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理文件</span></span><br><span class="line">git rm --cached /path/to/file</span><br></pre></td></tr></table></figure>

<h2 id="显示-repo-关联的远端地址"><a href="#显示-repo-关联的远端地址" class="headerlink" title="显示 repo 关联的远端地址"></a>显示 repo 关联的远端地址</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure>

<h2 id="cherry-pick-提取某一个-commit-和并到目标分支"><a href="#cherry-pick-提取某一个-commit-和并到目标分支" class="headerlink" title="cherry pick 提取某一个 commit 和并到目标分支"></a>cherry pick 提取某一个 commit 和并到目标分支</h2><p>情景描述：</p>
<p>我自己又一个分之 A， 同时创建了另一个分之 B 并在上面做了改动，commit 为 c1。我对他的这个 commit 有依赖，又不想自己 CV 代码或者以后有 conflict 什么的，这时可以 checkout 到我自己的分支，然后 <code>git cherry pick c1</code> 来合并代码。他的代码 merge 之后我也不用解决冲突，美滋滋儿。</p>
<h2 id="使用-rebase-来合并自己分支的-commit-记录，强迫症福音"><a href="#使用-rebase-来合并自己分支的-commit-记录，强迫症福音" class="headerlink" title="使用 rebase 来合并自己分支的 commit 记录，强迫症福音"></a>使用 rebase 来合并自己分支的 commit 记录，强迫症福音</h2><p>check out 一个测试 branch，修改 readme</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;a&#x27;</span> &gt;&gt; README.md</span><br><span class="line">git add-commit -m <span class="string">&#x27;edit01&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;b&#x27;</span> &gt;&gt; README.md</span><br><span class="line">git add-commit -m <span class="string">&#x27;edit01&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;c&#x27;</span> &gt;&gt; README.md</span><br><span class="line">git add-commit -m <span class="string">&#x27;edit01&#x27;</span></span><br></pre></td></tr></table></figure>

<p>git log –oneline 查看 commit 记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dc0a087 (HEAD -&gt; testrebase2) edit03</span><br><span class="line">c6feb2a edit02</span><br><span class="line">0436650 edit01</span><br><span class="line">0dcdaac init porject</span><br></pre></td></tr></table></figure>

<p>现在通过 rebase 将 edit01-03 合并为一个 commit。这里有一个地方要注意的是如果指定 commit id，start point 是你想要合并的 ID 的前一个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~3 或者 git rebase -i 0dcdaac</span><br></pre></td></tr></table></figure>

<p>terminal 给出提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pick 0436650 edit01</span><br><span class="line">pick c6feb2a edit02</span><br><span class="line">pick dc0a087 edit03</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 0dcdaac..dc0a087 onto 0dcdaac (3 commands)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick &lt;commit&gt; = use commit</span></span><br><span class="line"><span class="comment"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span><br><span class="line"><span class="comment"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment"># f, fixup &lt;commit&gt; = like &quot;squash&quot;, but discard this commit&#x27;s log message</span></span><br><span class="line"><span class="comment"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment"># b, break = stop here (continue rebase later with &#x27;git rebase --continue&#x27;)</span></span><br><span class="line"><span class="comment"># d, drop &lt;commit&gt; = remove commit</span></span><br><span class="line"><span class="comment"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br><span class="line"><span class="comment"># t, reset &lt;label&gt; = reset HEAD to a label</span></span><br><span class="line"><span class="comment"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span></span><br><span class="line"><span class="comment"># .       create a merge commit using the original merge commit&#x27;s</span></span><br></pre></td></tr></table></figure>

<p>将 edit02, 03 的前缀改成 s，然后 :wq 进入下一个界面需改 commit message</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pick 0436650 edit01</span><br><span class="line">s c6feb2a edit02</span><br><span class="line">s dc0a087 edit03</span><br></pre></td></tr></table></figure>

<p>提示信息如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is a combination of 3 commits.</span></span><br><span class="line"><span class="comment"># This is the 1st commit message:</span></span><br><span class="line"></span><br><span class="line">edit01</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #2:</span></span><br><span class="line"></span><br><span class="line">edit02</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #3:</span></span><br><span class="line"></span><br><span class="line">edit03</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Date:      Wed Jul 8 17:10:52 2020 +0800</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># interactive rebase in progress; onto 0dcdaac</span></span><br><span class="line"><span class="comment"># Last commands done (3 commands done):</span></span><br></pre></td></tr></table></figure>

<p>带 # 号的行不会显示，只需要修改之前我们自己添加的那些行就行了，这里修改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">merge commit edit01-03</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Date:      Wed Jul 8 17:10:52 2020 +0800</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># interactive rebase in progress; onto 0dcdaac</span></span><br><span class="line"><span class="comment"># Last commands done (3 commands done):</span></span><br><span class="line"><span class="comment">#    squash c6feb2a edit02</span></span><br><span class="line"><span class="comment">#    squash dc0a087 edit03</span></span><br><span class="line"><span class="comment"># No commands remaining.</span></span><br><span class="line"><span class="comment"># You are currently rebasing branch &#x27;testrebase2&#x27; on &#x27;0dcdaac&#x27;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#   modified:   README.md</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>esc + :wq 退出，终端会给出修改成功的提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[detached HEAD 6c42812] merge commit edit01-03</span><br><span class="line"> Date: Wed Jul 8 17:10:52 2020 +0800</span><br><span class="line"> 1 file changed, 3 insertions(+)</span><br><span class="line">Successfully rebased and updated refs/heads/testrebase2.</span><br></pre></td></tr></table></figure>

<p>这是再使用 git log –oneline 查看，可以发现目标 commit 已经合并成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">6c42812 (HEAD -&gt; testrebase2) merge commit edit01-03</span><br><span class="line">0dcdaac init porject</span><br></pre></td></tr></table></figure>

<h2 id="怎么避免-branch-上出现很多-merge-的-commit-强迫症福音-2-0"><a href="#怎么避免-branch-上出现很多-merge-的-commit-强迫症福音-2-0" class="headerlink" title="怎么避免 branch 上出现很多 merge 的 commit, 强迫症福音 2.0"></a>怎么避免 branch 上出现很多 merge 的 commit, 强迫症福音 2.0</h2><p>TODO</p>
<h2 id="Git-SS-加速"><a href="#Git-SS-加速" class="headerlink" title="Git SS 加速"></a>Git SS 加速</h2><p>修改 .gitconfig 文件，添加配置如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># config your &#96;~&#x2F;.gitconfig&#96; file</span><br><span class="line">[http]</span><br><span class="line">proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">sslVerify &#x3D; false</span><br><span class="line"></span><br><span class="line">[https]</span><br><span class="line">proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>或者在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># or you can config it by typing terminal</span></span><br><span class="line">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global http.sslVerify <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># turn off proxy, 开启后 git commit 会受影响</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客添加 sitemap</title>
    <url>/hexo/2019/11/22/Hexo%20%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%20sitemap/</url>
    <content><![CDATA[<p>为博客添加 sitemap 并将博客添加至搜索引擎</p>
<h2 id="Google-Search-Console"><a href="#Google-Search-Console" class="headerlink" title="Google Search Console"></a>Google Search Console</h2><p>到博客根目录下运行 command 安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>

<p>在根目录下的 _config.yml 中添加 sitemap 配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Config sitemap to enable SEO</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure>

<p>重新生成文件，启动 server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>访问 url/sitemap.xml 可以看到新生成的 sitemap xml 文件</p>
<p>访问 <a href="https://search.google.com/search-console/about">Google Search Console</a> 注册你的页面。<br>如果你的博客挂在 github 上，选右边的那个，输入你的 github 博客地址，比如我的是 <code>https://jack-zheng.github.io/hexo</code><br><img src="seo01.jpg" alt="资源类型"></p>
<p>结下来是验证所有权, 选择 HTML 标记会简单一点。点击他，你会得到一串码。复制它然后到 themes/next/_config.yml 中，找到 <code>google_site_verification:</code> 将值写在后面</p>
<p><img src="seo02.png" alt="所有权验证"></p>
<p>添加完后，将你的博客部署，在次访问是查看页面源码，你会发现头部多了一段 meta 数据</p>
<p><img src="seo_meta.png" alt="文件头"></p>
<p>然后点击 Verify 按钮，验证成功</p>
<p>![所有权验证]](seo03.png)</p>
<p>点击 <code>站点地图</code> 在 1 处填写你的 sitemap 地址。添加完成后，他会显示在 2 处</p>
<p><img src="seo04.png" alt="添加站点"></p>
<p>等一段时间后，google 就会将你的博客抓去出来了， 通过在搜索框中输入 <code>site:https://jack-zheng.github.io/</code> 可以看到结果，我是在第二天看的，不是很清楚精确需要等多久</p>
<p><img src="seo05.png" alt="Google Search 结果"></p>
<h2 id="博客添加图片引用"><a href="#博客添加图片引用" class="headerlink" title="博客添加图片引用"></a>博客添加图片引用</h2><ul>
<li><a href="https://hexo.io/zh-cn/docs/asset-folders.html">官方文档</a></li>
</ul>
<p>由于我的博客是挂载在 subdirectory 下面的，在 source 下面创建 images 的方案不生效，也没有找到对应的解决办法，我还以为可以在 _config.yml 里面配置来着，残念 ┑(￣Д ￣)┍</p>
<p>最后采用了 post_asset_folder 的配置，这个配置默认就有的，默认关闭，把他设置成 true 打开，之后每次创建新 post 的时候，会在 _posts 下面新建文件夹，将你要上传的图片放在里面，在 post 正文中使用 <code>![Google Search 结果](seo05.png)</code> 引用即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># folder structure sample</span></span><br><span class="line"><span class="built_in">source</span></span><br><span class="line">├── _posts</span><br><span class="line">│   ├── git-commands.md</span><br><span class="line">│   ├── hexo-comments.md</span><br><span class="line">│   ├── hexo-search-seo</span><br><span class="line">│   │   ├── seo01.jpg</span><br><span class="line">│   │   ├── ...</span><br><span class="line">│   │   └── seo05.png</span><br><span class="line">│   ├── hexo-search-seo.md</span><br><span class="line">│   ├── ...</span><br><span class="line">│   └── setup-hexo-tag-category.md</span><br><span class="line">├── categories</span><br><span class="line">│   └── index.md</span><br><span class="line">└── tags</span><br><span class="line">    └── index.md</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 换皮肤</title>
    <url>/hexo/2019/11/15/Hexo%20%E6%8D%A2%E7%9A%AE%E8%82%A4/</url>
    <content><![CDATA[<p>今天决定尝试一下给 blog 换皮肤。就拿时下最流行的 Next 主题好了，用的人多，文档齐全，熟悉了之后有需求再发挥。</p>
<h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>安装很简单，官方地址 <a href="https://github.com/theme-next/hexo-theme-next">hexo-theme-next</a>。</p>
<ol>
<li><code>cd hexo</code></li>
<li><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></li>
<li>到 <code>themes/next</code> 目录下把 repo 的 .git, .github 删掉</li>
<li>起 server 验证，打完收工</li>
</ol>
<p>其他一些比较个人的配置去 next 目录下的 <code>_config.yml</code> 里面配置，像什么头像啦，github 三角标什么的都要有的。</p>
<h3 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h3><p>如果你只是将 next clone 下来没有删掉 .git 就 add 的话会有 warning 给出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .gitignore _config.yml themes&#x2F;warning: adding embedded git repository: themes&#x2F;nexthint: You&#39;ve added another git repository inside your current repository.</span><br><span class="line">hint: Clones of the outer repository will not contain the contents of</span><br><span class="line">hint: the embedded repository and will not know how to obtain it.</span><br><span class="line">hint: If you meant to add a submodule, use:</span><br><span class="line">hint:</span><br><span class="line">hint:   git submodule add &lt;url&gt; themes&#x2F;next</span><br><span class="line">hint:</span><br><span class="line">hint: If you added this path by mistake, you can remove it from the</span><br><span class="line">hint: index with:</span><br><span class="line">hint:</span><br><span class="line">hint:   git rm --cached themes&#x2F;next</span><br><span class="line">hint:</span><br><span class="line">hint: See &quot;git help submodule&quot; for more information.</span><br></pre></td></tr></table></figure>

<p>这是应为 git 是不支持嵌套 repo 管理的，你可以通过 submodules 来管理，不过使用上会有点冲突，按 submodules 的定义来说，它是为那些需要使用子模块但是那些模块不需要更新，或者只需要跟着官方的 branch 走就行了。就 hexo 这种情况，你可以自己 fork 一个，然后作为子模块管理，但是这样你 fork 的 repo 就不能跟进官方的 repo 了 ┑(￣Д ￣)┍， 反正就我的情况来说，用最简单的删 .git 就行了，真有需求以后在研究。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 添加字数显示，更改语言</title>
    <url>/hexo/2019/11/19/Hexo%20%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E6%98%BE%E7%A4%BA%EF%BC%8C%E6%9B%B4%E6%94%B9%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<p>本篇包含两个配置</p>
<ol>
<li>文章字数，阅读时间显示</li>
<li>语言设置，显示中文</li>
</ol>
<h2 id="配置字数"><a href="#配置字数" class="headerlink" title="配置字数"></a>配置字数</h2><p>参靠 repo: <a href="https://github.com/theme-next/hexo-symbols-count-time">hexo-symbols-count-time</a></p>
<ol>
<li>到根目录下执行 <code>npm install hexo-symbols-count-time</code> 安装插件</li>
<li>到根目录下的 _config.yml 中添加配置</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br></pre></td></tr></table></figure>

<h2 id="配置中文显示"><a href="#配置中文显示" class="headerlink" title="配置中文显示"></a>配置中文显示</h2><p>查看 Next 主题下面的 language 文件夹，找到其中的中文显示文件名，把根目录下的 _config.yml 里的 language 改为这个名字就行了。我这边文件名为 <code>zh-CN.yml</code>，将 yml 中 language 改为 <code>zh-CN</code></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 设置 tags 和 Categories 分类</title>
    <url>/hexo/2019/11/15/Hexo%20%E8%AE%BE%E7%BD%AE%20tags%20%E5%92%8C%20Categories%20%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p>默认设置下 Hexo Next 主题是关闭 <code>tag</code> 和 <code>categories</code> 的，你可以通过一下步骤打开它。</p>
<ol>
<li>去到 next folder 下，打开 <code>_config.yml</code>, 去掉 menu 下的 tags 和 categories 的注释。此时刷新页面，主页上会在 Archive 旁边多两个icon.</li>
<li>repo 目录下 run command: <code>hexo new page categories</code>, 并向该文件中添加新行 <code>type: &quot;categories&quot;</code>。新文件目录 <code>path/to/blog/source/categories/index.md</code></li>
<li>repo 目录下 run command: <code>hexo new page tags</code>, 并向该文件中添加新行 <code>type: &quot;tags&quot;</code>。新文件目录 <code>path/to/blog/source/tags/index.md</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># categories index.md</span><br><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2019-11-15 16:42:15</span><br><span class="line">type: &quot;categories&quot;  &lt;--- 新行</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tags index.md</span><br><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-11-15 16:29:40</span><br><span class="line">type: &quot;tags&quot;  &lt;--- 新行</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>顺便还可以去 <code>path/to/blog/scaffolds/post.md</code>，在 post.md 中添加新行 <code>categories:</code>， 这样每次 new post 的时候都会自动带上这个标签了 ♪(´ε｀ )</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/">linlif-Hexo</a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 设置阅读数，文章授权</title>
    <url>/hexo/2019/11/20/Hexo%20%E8%AE%BE%E7%BD%AE%E9%98%85%E8%AF%BB%E6%95%B0%EF%BC%8C%E6%96%87%E7%AB%A0%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<p>本篇将介绍如何设置统计文章阅读量和文章授权。</p>
<h2 id="阅读量统计"><a href="#阅读量统计" class="headerlink" title="阅读量统计"></a>阅读量统计</h2><p>Hexo 默认使用’不蒜子’做阅读量统计，而且已经配置好了，如果想要开启它只需要到 <code>next/_config.yml</code> 下将 <code>busuanzi_count:</code> 下的 <code>enable:</code> 设置为 true 即可。重启后访问也看可以看到文章标题下多处一只眼睛标志，旁边就是总阅读量。</p>
<p><a href="http://ibruce.info/2015/04/04/busuanzi/">不蒜子</a>, 貌似是某程序员建的站，托管在七牛上的，赞！</p>
<h2 id="文章授权"><a href="#文章授权" class="headerlink" title="文章授权"></a>文章授权</h2><p>Hexo 默认授权是关闭的，可以在 <code>next/_config.yml</code> 的 <code>creative_commons</code> 模块做设置。默认是 <code>by-nc-sa</code> 授权。</p>
<p><a href="https://zh.wikipedia.org/wiki/%E7%9F%A5%E8%AF%86%E5%85%B1%E4%BA%AB%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE">常见授权方式Wiki</a></p>
<table>
<thead>
<tr>
<th>许可协议</th>
<th align="center">简称</th>
</tr>
</thead>
<tbody><tr>
<td>创作共享 署名</td>
<td align="center">CC BY</td>
</tr>
<tr>
<td>创作共享 署名-相同方式共享</td>
<td align="center">CC BY-SA</td>
</tr>
<tr>
<td>创作共享 署名-非商业性</td>
<td align="center">CC BY-NC</td>
</tr>
<tr>
<td>创作共享 署名-禁止演绎</td>
<td align="center">CC BY-ND</td>
</tr>
<tr>
<td>创作共享 署名-非商业性-禁止演绎</td>
<td align="center">CC BY-NC-ND</td>
</tr>
<tr>
<td>创作共享 署名-非商业性-相同方式共享</td>
<td align="center">CC BY-NC-SA</td>
</tr>
<tr>
<td>创作共享 相同方式共享</td>
<td align="center">CC SA</td>
</tr>
<tr>
<td>创作共享 非商业性</td>
<td align="center">CC NC</td>
</tr>
<tr>
<td>创作共享 禁止演绎</td>
<td align="center">CC ND</td>
</tr>
<tr>
<td>创作共享 非商业性-相同方式共享</td>
<td align="center">CC NC-SA</td>
</tr>
<tr>
<td>创作共享 非商业性-禁止演绎</td>
<td align="center">CC NC-ND</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 评论功能</title>
    <url>/hexo/2019/11/18/Hexo%20%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>为博客增加评论功能，参考 next 的配置文件，截止 2019-11-18 号为止，next 已经默认支持了 changyan | disqus | disqusjs | gitalk | livere | valine 这些评论系统。这里出于兼容性和可靠性的原则，选择 gitalk 作为评论系统。</p>
<p>Steps:</p>
<ol>
<li>github 创建一个新的 repo 用于存放 comments，比如叫做 hexo-comments</li>
<li>去到 github 账号的配置页面新建一个 Oauth 授权，<a href="https://github.com/settings/applications/new">点这里快速跳转</a></li>
<li>填写授权信息 Homepage URL 和 Authorization callback URL 都写自己的博客地址就行了</li>
<li>确认后跳转到授权信息页面，记下他的 app id 和 secret</li>
<li>配置 next 的 _config.yml 如下</li>
<li>提交代码测试</li>
</ol>
<p>测试评论，成功。新添加的评论会出现在 hexo-comments 的 issues tab 下面，按这样的操作的话，我觉的可能都不需要自建创建 comments repo 了，直接放在一个 repo 下面就完事了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id: jack-zheng # GitHub repo owner</span><br><span class="line">  repo: hexo-comments # 新建的用于存放评论的repo</span><br><span class="line">  client_id: d44xxxxxxe3a # GitHub Application Client ID</span><br><span class="line">  client_secret: 9b3c4xxxxxb708ef # GitHub Application Client Secret</span><br><span class="line">  admin_user: jack-zheng # GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line">  # Gitalk&#39;s display language depends on user&#39;s browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure>

<p>PS: 用这种方案的话，默认只有 github 的用户才能评论，不过看这种文章的应该都是github用户，所以问题不大<br>PPS: 网上很多文章都会要你去配置 swig 文件，最新版的 next 已经不需要这个步骤了</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://github.com/gitalk/gitalk">gitalk</a></li>
<li><a href="https://www.jianshu.com/p/b5f509f25872">简书-Jonzzs</a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 搜索</title>
    <url>/hexo/2020/05/28/Hexo-Search-Plugin/</url>
    <content><![CDATA[<p>Hexo 提供全区搜索功能很方便，在两个 <code>_config.yml</code> 文件下添加配置就行了，一个在 hexo 下，一个在 next 皮肤下。</p>
<p>root -&gt; _config.yml 添加配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Config for search service</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">    <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>root -&gt; themes -&gt; next -&gt; _config.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h2><p>某一天突然发现部分 Post 不能被 search 出来了，排查了好久，发现是 Splunk 之后一个都失效了。继续排查，是这片文章中有个 ‘Steps:’ 的节点，在编辑器里面查看是没什么问题的，但是贴到其他工具，比如 idea 或者 browser 里面时，他会带一个 [BS] 的前缀。太神奇了。。。所以之前一直没发现。</p>
<p>在 VSCode 里面看结构还是 <code>&lt;p&gt;Steps&lt;/p&gt;</code> 但是用 linux cat 时就变成 <code>&lt;pSteps:&lt;/p&gt;</code> 所以后面的 search 解析就出问题了。查了下 BS 代表的是退格键 0x008, 也解释了为什么 xml p 标签会少一个尖括号了 ╮(￣▽￣””)╭</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客 Setup</title>
    <url>/hexo/2019/11/12/Hexo-blog-setup/</url>
    <content><![CDATA[<p>Hexo setup 笔记。网上有好多 setup 的教程，这里就不赘述了。记录一下我 setup 时候用到的命令，作为备忘。</p>
<p>这里使用的 Next 版本 <strong>V7.5.0</strong></p>
<h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><ol>
<li>安装 node/npm, <code>brew install node</code>, type <code>node -v</code>, <code>npm -v</code> to check if install successfully.</li>
<li>run command: <code>npm install -g hexo-cli</code>, 安装 hexo 工具, 安装完成，type <code>hexo</code> to check</li>
<li>Setup 博客基础架构 <code>hexo init &lt;folder&gt;</code>, cd &lt;folder&gt;, run command: <code>hexo server</code> 就可以得到一个本地可访问的 hello world 博客模版</li>
<li><code>hexo new post_name</code>, 在 source 文件夹下面会创建一个新的 post_name.md 文件作为新博客的载体</li>
<li>为你的博客新建一个git repo, repo name 必须是<strong>你的Git用户名.github.io</strong>, 如果已经创建了, rename 一下</li>
<li>编辑 &lt;folder&gt;_config.yml 关联 git repo</li>
<li><code>npm install hexo-deployer-git --save</code> 安装 git 集成工具</li>
<li><code>hexo g</code> 生成工程目录及相关文件</li>
<li><code>hexo s</code> 启动本地 server 验证</li>
<li><code>hexo d</code> 部署发布到 github, 等一两分钟访问 <code>https://&lt;你的Git用户名&gt;.github.io</code> 就可以看到你的作品了 (^з^)-☆</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;&lt;username&gt;.github.io.git</span><br><span class="line">  # SSH 格式的也OK, 简单理解就是去 github repo 页面, 把你的 repo 地址复制一下</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h3 id="异地环境-setup"><a href="#异地环境-setup" class="headerlink" title="异地环境 setup"></a>异地环境 setup</h3><h4 id="Win10"><a href="#Win10" class="headerlink" title="Win10"></a>Win10</h4><p>在其他机子上面重新 setup 环境只需要安装 git 和 nodejs, 把项目 clone 到本地之后 cd 到博客根目录下运行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>就行了，在 Windows 下使用 VS Code 的默认命令行时还遇到另外一个问题，hexo 命令不能执行，抛出 Exception:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\lanmo\gitStore\hexo&gt; hexo</span><br><span class="line">hexo : 无法加载文件 C:\Users\lanmo\AppData\Roaming\npm\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft</span><br><span class="line">.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ hexo</span><br><span class="line">+ ~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure>

<p>这是由于 powershell 的默认脚本执行策略把这个 command 阻塞了，可以执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许本地脚本执行</span></span><br><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br></pre></td></tr></table></figure>

<p>来开放权限，其他可用命令还有</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看可用策略</span></span><br><span class="line">Get-ExecutionPolicy -List</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前策略</span></span><br><span class="line">Get-ExecutionPolicy</span><br></pre></td></tr></table></figure>

<p>更多可以参考官方文档 <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-6">About Execution Policies</a></p>
<h4 id="Win10-WSL"><a href="#Win10-WSL" class="headerlink" title="Win10 WSL"></a>Win10 WSL</h4><p>WSL 默认已经安装了 git, 所以只需要额外安装 nodejs 就行了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果速度慢可以使用 taobao 源加速</span></span><br><span class="line">npm --registry https://registry.npm.taobao.org install nodejs</span><br><span class="line"><span class="comment"># 配置永久源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>安装完后运行 <code>node -v</code> 和 <code>npm -v</code> 查看是否安装成功。我本地安装完后，node 可以正常调用，但是 npm 不行，报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jack@DESKTOP-9TGTFK1:~$ npm -v</span><br><span class="line">: not foundram Files/nodejs/npm: 3: /mnt/c/Program Files/nodejs/npm:</span><br><span class="line">: not foundram Files/nodejs/npm: 5: /mnt/c/Program Files/nodejs/npm:</span><br><span class="line">/mnt/c/Program Files/nodejs/npm: 6: /mnt/c/Program Files/nodejs/npm: Syntax error: word unexpected (expecting <span class="string">&quot;in&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 which npm 查看路径</span></span><br><span class="line">jack@DESKTOP-9TGTFK1:~$ <span class="built_in">which</span> npm</span><br><span class="line">/usr/bin/npm</span><br></pre></td></tr></table></figure>

<p>是应为路径有问题，修改 WSL 下的 <code>~/.profile</code> 文件，添加 npm 执行路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PATH=<span class="string">&quot;<span class="variable">$HOME</span>/bin:<span class="variable">$HOME</span>/.local/bin:/usr/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后 <code>source ~/.profile</code> 在运行 <code>npm -v</code>, 成功。</p>
<p>该问题可以参考 <a href="https://github.com/microsoft/WSL/issues/1512">VSCode Git Issue</a></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://hexo.io/docs/github-pages">Hexo 官方文档</a></li>
<li><a href="https://juejin.im/post/5bebfe51e51d45332a456de0">Juejin-最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26625249">Zhihu-GitHub+Hexo 搭建个人网站详细教程</a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 保存博客源码</title>
    <url>/hexo/2019/11/13/Hexo-use-travis-to-auto-publish/</url>
    <content><![CDATA[<p>按照之前的教程，虽然 github page 上顺利发布了，但是 blog 的 source code 并没有一起同步过去，还在本地。Hexo 工具只是把你翻译之后的 web 信息同步过去了。search 了一下，想要同步 source 有大概三种路子：</p>
<ol>
<li>hexo 插件: hexo-git-backup</li>
<li>在原来的 blog repo 里面新建分支存储</li>
<li>官方方法，集成 Travis CI，每次 push 自动帮你部署</li>
</ol>
<p>本文只描述怎么集成 Travis CI, 其他的方案有机会再补，网上教程很多，随便找找就有了。</p>
<blockquote>
<p>采用 Travis CI 的方案之后，原来的 repo name 需要改变，不然 blog 访问不了, 针对这种情况，其实还有另一种解决方案，将 master 用来存放编译好的 blog, 源码用新的 branch 存放，和前面的那些原理都一样</p>
</blockquote>
<h3 id="Travis-CI-集成"><a href="#Travis-CI-集成" class="headerlink" title="Travis CI 集成"></a>Travis CI 集成</h3><ol>
<li>新建一个 repo, 这里我用 hexo 作为 repo name</li>
<li>clone 到本地，将之前的 blog source copy 进去，添加 <code>.gitignore</code> 文件，把 <code>public\</code> 添加进 list</li>
<li>注册 Travis 账号，用 github 授权就行，授权 repo, 添加 token. 官方文档都有链接，很方便</li>
<li>update <code>_config.yml</code> 里的 url 和 root 值</li>
<li>添加 <code>.travis.yml</code> 做 CI 集成管理</li>
<li>commit + push 这些改动，Travis 自动 build 就会被触发了</li>
<li>build 完成后，repo 会有一个新的 branch 叫 gh-pages. 访问 <code>https://jack-zheng.github.io/hexo</code> 查看改动结果</li>
</ol>
<p>国内，第一次访问会比较慢，cache 了文件之后后面访问会快一点</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml setting</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://jack-zheng.github.io/hexo</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/hexo/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#.gitignore</span><br><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br><span class="line">.vscode</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .travis.yml</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10</span> <span class="comment"># use nodejs v10 LTS</span></span><br><span class="line"><span class="attr">cache:</span> <span class="string">npm</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span> <span class="comment"># build master branch only</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="comment"># generate static files</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip-cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github-token:</span> <span class="string">$GH_TOKEN</span></span><br><span class="line">  <span class="attr">keep-history:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">local-dir:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure>

<h3 id="Issue-Trace"><a href="#Issue-Trace" class="headerlink" title="Issue Trace"></a>Issue Trace</h3><p>在按照官方教程走完流程后，repo 的 setting page 会有如下 Warning, 删了 <code>themes/landscape/README.md</code> 这个文件再 build 一下就行了</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Your site is having problems building: The tag fancybox on line 77 in themes/landscape/README.md is not a recognized Liquid tag. For more information, see https://help.github.com/en/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#unknown-tag-error.</span><br></pre></td></tr></table></figure>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://hexo.io/docs/github-pages">Travis CI 集成 - 官方</a></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea 破解</title>
    <url>/hexo/2019/12/26/Idea%20%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<p>简单记录一下怎么破解 idea, 主要是记录下破解的文章引用，方便以后查找，引用的文章 po 主说会持续跟新的 (～￣▽￣)～</p>
<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><blockquote>
<p>PS: 预算充足的一定要支持正版啊啊啊啊 (●’◡’●)</p>
</blockquote>
<ol>
<li>去官网下载最新的 Pro 版</li>
<li>下载 JetbrainsCrack.jar 破解包，放到 idea 安装路径的 bin 文件夹下</li>
<li>打开安装好的 idea，选择试用 30 天。 进入界面之后 Help -&gt; Edit Custom VM Options, 如果提示是否创建文件，选择 Yes</li>
<li>拿到刚刚的 jar 文件的绝对路径，添加到末尾，比如我这里是：<code>-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2019.2.4\bin\JetbrainsCrack.jar</code></li>
<li>重启 idea, 再到 Help -&gt; Register, 选择 License server 方式，idea 会自动填入 <code>http://jetbrains-license-server</code>，确定</li>
<li>在重启一波，根据提示信息可以看到破解完成</li>
</ol>
<h2 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h2><ul>
<li><a href="https://www.algerfan.cn/articles/2019/03/06/1551868940012.html">感谢给出资源和解决方案的 - AlgerFan</a></li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>破解</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea 常用配置</title>
    <url>/hexo/2019/12/26/Idea-configuration/</url>
    <content><![CDATA[<p>Idea 中关于 Maven 的一些配置</p>
<h2 id="Configurations"><a href="#Configurations" class="headerlink" title="Configurations"></a>Configurations</h2><h3 id="避免-import"><a href="#避免-import" class="headerlink" title="避免 import *"></a>避免 import *</h3><p>默认设置下，同一个包下 import 数量超过 5 个就会用 * 来代替，可以去 Setting -&gt; editor -&gt; code style -&gt; java, 然后右边选择 Imports tab, 修改 ‘Class count to use import *’ 的值即可</p>
<h3 id="Maven-下载仓库配"><a href="#Maven-下载仓库配" class="headerlink" title="Maven 下载仓库配"></a>Maven 下载仓库配</h3><ol>
<li>Shift + Ctrl + A -&gt; 搜索 <code>Settings.xml</code>, Open/Create 这个文件 -&gt; 添加仓库地址  </li>
<li>localRepository 这个变量的地址应该是对应到本地的 <code>.m</code> folder 下的 repository 文件夹  </li>
<li>Settings.xml 路径可以在 ‘Build, Excutations, Deployment’ 下的 maven tag 下查看</li>
</ol>
<h3 id="设置-Maven-自动下载包源码"><a href="#设置-Maven-自动下载包源码" class="headerlink" title="设置 Maven 自动下载包源码"></a>设置 Maven 自动下载包源码</h3><ol>
<li>Build, Excutations, Deployment -&gt; Maven -&gt; Importing -&gt; Automatically download: source, documentation 打勾  </li>
<li>回到主界面，在侧边栏的 Maven 里面会出现 ‘Download source and/or documentation’ 的按钮</li>
</ol>
<h3 id="Win10-下-Idea-NVIDIA-快捷键冲突"><a href="#Win10-下-Idea-NVIDIA-快捷键冲突" class="headerlink" title="Win10 下 Idea/NVIDIA 快捷键冲突"></a>Win10 下 Idea/NVIDIA 快捷键冲突</h3><ol>
<li>NVIDIA Graphic 开启的时候 Ctrl + Alt + 方向键会变成调整显示方向的设置，和 Idea 的代码跳转冲突</li>
<li>右键桌面 -&gt; 图形属性 -&gt; 选项和支持 -&gt; 禁用快捷键</li>
</ol>
<h3 id="Idea-查看-JDK-源码"><a href="#Idea-查看-JDK-源码" class="headerlink" title="Idea 查看 JDK 源码"></a>Idea 查看 JDK 源码</h3><p>File -&gt; project setting -&gt; SDKs -&gt; 右边有个 Sourcepath -&gt; 导航到 JDK 文件目录下找到 src.zip 就行了</p>
<h3 id="设置条件断点"><a href="#设置条件断点" class="headerlink" title="设置条件断点"></a>设置条件断点</h3><p>添加断点之后，在断点上右键输入你想要的条件，比如： a==10</p>
<h3 id="复制代码段的时候，取消格式复制"><a href="#复制代码段的时候，取消格式复制" class="headerlink" title="复制代码段的时候，取消格式复制"></a>复制代码段的时候，取消格式复制</h3><p>cmd+shift+A 打开搜索框，输入关键字 ‘copy as rich text by default’, 关闭对应的开关</p>
<h3 id="IDEA中显示空格"><a href="#IDEA中显示空格" class="headerlink" title="IDEA中显示空格"></a>IDEA中显示空格</h3><p>cmd+shift+A 打开搜索框，输入关键字 ‘show withspace’, 操作对应的开关</p>
<h3 id="快速实现-tab-lt-gt-space-转化"><a href="#快速实现-tab-lt-gt-space-转化" class="headerlink" title="快速实现 tab &lt;-&gt; space 转化"></a>快速实现 tab &lt;-&gt; space 转化</h3><ol>
<li>cmd+shift+A 打开搜索框，输入关键字 ‘convert indents’, 选择 ‘To Spaces’</li>
<li>或者在输入关键字的时候直接选择 ‘To Spaces’</li>
</ol>
<h3 id="查看类继承关系"><a href="#查看类继承关系" class="headerlink" title="查看类继承关系"></a>查看类继承关系</h3><p>Navigate -&gt; Type Hierarchy 或者 Ctrl + H</p>
<h3 id="关闭-Idea-自动更新提示"><a href="#关闭-Idea-自动更新提示" class="headerlink" title="关闭 Idea 自动更新提示"></a>关闭 Idea 自动更新提示</h3><p>快捷搜索 <code>Automatically check update for</code> 然后将更新选项去掉</p>
<h3 id="Class-生成-Enter就会提示自动创建serialVersionUID"><a href="#Class-生成-Enter就会提示自动创建serialVersionUID" class="headerlink" title="Class 生成 Enter就会提示自动创建serialVersionUID"></a>Class 生成 Enter就会提示自动创建serialVersionUID</h3><ol>
<li>Setting-&gt;Inspections-&gt;Serialization issues-&gt;Serializable class without ’serialVersionUID’ </li>
<li>选上以后，在你的class中：Alt+Enter就会提示自动创建serialVersionUID了。</li>
</ol>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul>
<li>查看字节码：安装 jclasslib，重启。选中文件，选择导航栏上的 view -&gt; Show byte code with jclasslib 选项即可</li>
</ul>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table>
<thead>
<tr>
<th align="left">功能</th>
<th align="center">Mac</th>
<th align="center">Win</th>
</tr>
</thead>
<tbody><tr>
<td align="left">万能快捷键</td>
<td align="center">CMD + Shift + A</td>
<td align="center">TODO</td>
</tr>
<tr>
<td align="left">查找类</td>
<td align="center">CMD+ O</td>
<td align="center">TODO</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>maven</tag>
        <tag>配置</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Code Snipt</title>
    <url>/hexo/2020/08/10/Java-Code-Snipt/</url>
    <content><![CDATA[<p>记录平时遇到的一些精巧的小代码段</p>
<h2 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h2><p>摘自 On Java 8 泛型章节。元组的定义：用户只能取值而不能设置值，所以这里没有使用 getter/setter 的封装形式，而是使用 public + final 关键字实现了该功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tuple2</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> A a1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> B a2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tuple2</span><span class="params">(A a, B b)</span> </span>&#123; a1 = a; a2 = b; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">rep</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> a1 + <span class="string">&quot;, &quot;</span> + a2; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + rep() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>代码段</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 多态测试</title>
    <url>/hexo/2020/08/07/Java-Polymophism-Test/</url>
    <content><![CDATA[<p>记录一下平时遇到的 Java 多态问题并记录实验结果</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多态</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 函数式编程</title>
    <url>/hexo/2020/05/28/Java-lambda/</url>
    <content><![CDATA[<p>Java 8 函数式编程读书笔记</p>
<h2 id="第一章-简介"><a href="#第一章-简介" class="headerlink" title="第一章 简介"></a>第一章 简介</h2><ul>
<li>Java 8 增加 Lambda 表达式来支持对大型数据的并发操作 - 核实一下</li>
<li>面向对象式对数据进行抽象，函数式编程时对行为进行抽象</li>
</ul>
<h2 id="第二章-Lambda-表达式"><a href="#第二章-Lambda-表达式" class="headerlink" title="第二章 Lambda 表达式"></a>第二章 Lambda 表达式</h2><p>以 Swing 为例，传统做法中监听事件需要如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">button.addActionListener(</span><br><span class="line">    <span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent event)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;button clicked&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>当我们使用 lambda 表达式时可以简写为 <code>button.addActionListener(event -&gt; System.out.println(&quot;button clicked&quot;));</code></p>
<p>Lambda 表达式中的类型都是由编译器推断出来的，但你也可以显示的声明参数类型。</p>
<p>Lambda 表达式引用的是值，而不是变量。</p>
<table>
<thead>
<tr>
<th>接口</th>
<th>参数</th>
<th>返回类型</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>Predicate&lt;T&gt;</td>
<td>T</td>
<td>boolean</td>
<td>唱片是否发行</td>
</tr>
<tr>
<td>Consumer&lt;T&gt;</td>
<td>T</td>
<td>void</td>
<td>输出一个值</td>
</tr>
<tr>
<td>Function&lt;T, R&gt;</td>
<td>T</td>
<td>R</td>
<td>获取Artist 对象的名字</td>
</tr>
<tr>
<td>Supplier&lt;T&gt;</td>
<td>None</td>
<td>T</td>
<td>工厂方法</td>
</tr>
<tr>
<td>UnaryOperator&lt;T&gt;</td>
<td>T</td>
<td>T</td>
<td>逻辑非(!)</td>
</tr>
<tr>
<td>BinaryOperator&lt;T&gt;</td>
<td>(T, T)</td>
<td>T</td>
<td>求连个数的乘积(*)</td>
</tr>
</tbody></table>
<p>在复杂的情况下需要指定泛型类型才能使编译通过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果省略掉 &lt;Long&gt; 编译报错：Operator&#x27;&amp;#x002B;&#x27;cannotbeappliedtojava.lang.Object,java.lang.Object.</span></span><br><span class="line">BinaryOperator&lt;Long&gt; addLongs = (x, y) -&gt; x + y;</span><br></pre></td></tr></table></figure>

<p>Predicate 可用于检测对象是否符合要求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测字符串是否以 J 开头</span></span><br><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Jerry&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">List&lt;String&gt; ret = names.stream().filter(name -&gt; name.charAt(<span class="number">0</span>) == <span class="string">&#x27;J&#x27;</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter 中的部分就是 Predicate 表达式，也可以分开定义写成如下形式</span></span><br><span class="line">Predicate&lt;String&gt; filterTom = input -&gt; input.equals(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">ret = names.stream().filter(filterTom).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<p>Consumer 对传入的参数做操作，没有返回值，例如可以用它实现打印，断言等操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ret.forEach(System.out::print);</span><br><span class="line">names.forEach(name -&gt; Assert.assertEquals(name, <span class="string">&quot;Jerry&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>Function 对传入的对象操作并放回结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; ret = names.stream().map(String::toUpperCase).collect(Collectors.toList());</span><br><span class="line">ret.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>Supplier 可以帮你生产数据, 但是只能使用应用于无参的 constructor，不支持传入参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Supplier&lt;User&gt; userSupplier = User::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure>

<h2 id="第三章-流"><a href="#第三章-流" class="headerlink" title="第三章 流"></a>第三章 流</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for 处理集合模板</span></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Artist artist : allArtists) &#123;</span><br><span class="line">    <span class="keyword">if</span> (artist.isFrom(<span class="string">&quot;London&quot;</span>)) &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">外部迭代方式： 通过拿到 iterator， 然后通过 hasNext(), next() 方法完成迭代</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">Iterator&lt;Artist&gt; iterator = allArtists.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Artistartist = iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (artist.isFrom(<span class="string">&quot;London&quot;</span>)) &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部迭代：通过 Steam 对集合类进行复杂操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// filter：只保留通过某项测试的对象，整个过程被分为两步，过滤和计算</span></span><br><span class="line"><span class="keyword">long</span> count = allArtists.stream().filter(artist -&gt; artist.isFrom(<span class="string">&quot;London&quot;</span>)).count();</span><br></pre></td></tr></table></figure>

<p>filter 中的表达式是惰性求值方法，count 是及早求职方法，惰性求值并不会真正执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此实例中并不会在控制台打印文字</span></span><br><span class="line">allArtists.stream().filter(artist -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;print artist&#x27;s location: &quot;</span> + artist.location);</span><br><span class="line">            <span class="keyword">return</span> artist.isFrom(<span class="string">&quot;London&quot;</span>);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p>如果返回值是 Stream 则为 惰性求值；如果返回值是另一个值或为空则是 及早求值。使用这些操作的理想方式就是形成一个惰性求值的链，最后用一个及早求值的操作返回想要的结果，这正是它的合理之处。</p>
<h3 id="常用的流操作"><a href="#常用的流操作" class="headerlink" title="常用的流操作"></a>常用的流操作</h3><table>
<thead>
<tr>
<th>操作</th>
<th>用途</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>collect</td>
<td>生成集合</td>
<td>Stream.of(“a”, “b”, “c”).collect(Collectors.toList());</td>
</tr>
<tr>
<td>map</td>
<td>类型转换</td>
<td>Stream.of(“a”).map(string -&gt; string.toUpperCase()).collect(Collectors.toList());</td>
</tr>
<tr>
<td>filter</td>
<td>检查过滤</td>
<td>Stream.of(“a”, “12b”).filter(val -&gt; isDigit(val.charAt(0))).(Collectors.toList());</td>
</tr>
<tr>
<td>flatMap</td>
<td>拼接多个 Stream</td>
<td>Stream.of(asList(1, 2), asList(3, 4)).flatMap(numbers -&gt; numbers.stream()).collect(toList());</td>
</tr>
<tr>
<td>max/min</td>
<td>最值</td>
<td>tracks.stream().min(Comparator.comparing(track -&gt; track.getLength())).get();</td>
</tr>
<tr>
<td>reduce</td>
<td>提供计算功能</td>
<td>Stream.of(1,2,3).reduce(0, (acc, ele) - &gt; acc + ele);</td>
</tr>
</tbody></table>
<h2 id="第四章-类库"><a href="#第四章-类库" class="headerlink" title="第四章 类库"></a>第四章 类库</h2><p>日志优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger = <span class="keyword">new</span> Logger();</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">    logger.debug(<span class="string">&quot;Look at this:&quot;</span> + expensiveOperation());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 Lambda 优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger = <span class="keyword">new</span> Logger();</span><br><span class="line">logger.debug(() -&gt; <span class="string">&quot;Look at this:&quot;</span> + expensiveOperation());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Logger 类中添加方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(Supplier&lt;String&gt; message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isDebugEnabled()) &#123;</span><br><span class="line">        debug(message.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Supplier -&gt; get(), Predicate -&gt; test, Function -&gt; apply.</p>
<p>如果可以的话，在流中尽量使用对基本类型的操作，而不是封装类型。 mapToInt 之类的操作还提供了很多简便操作得到最值和平均值。</p>
<p><strong>Optional</strong>是一个新设计的数据类新来替换 null 值。 使用它有两个目的：</p>
<ul>
<li>Optional 对象鼓励程序员适时检测变量是否为空，以避免代码缺陷</li>
<li>将一个类的 API 中可能为空的值文档化，这比阅读实现代码要简单的很多</li>
</ul>
<h2 id="第五章-高级集合类和收集器"><a href="#第五章-高级集合类和收集器" class="headerlink" title="第五章 高级集合类和收集器"></a>第五章 高级集合类和收集器</h2><p><code>方法引用</code>语法， artist -&gt; artist.getName() 等价于 Artist::getName, 标准语法为 Classname::methodName. 由此，新建 Artist 对象的代码可以由 （name, nationality） -&gt; new Artist(name, nationality) 简化为 Artist::new, 类似的可以通过 String[]::new 创建新的数组。</p>
<p><code>stream.collect()</code> 可以生成你想要的集合形式。例如：<code>stream.collect(toCollection(TreeSet::new));</code></p>
<p><code>partitioningBy</code> 收集器可用于分流, 与之类似的还有 <code>groupingBy</code> 关键字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;Boolean, List&lt;Artist&gt;&gt; bandsAndSolo(Stream&lt;Artist&gt; artists) &#123;</span><br><span class="line">    <span class="keyword">return</span> artist.collect(partitioningBy(artist -&gt; artist.isSolo())); <span class="comment">// artist -&gt; artist.isSolo() 可替换为 Artist::isSolo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>字符串流操作示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String ret = artists.steam().map(Artist::getName).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>查询并加入 map 的简化操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Artist <span class="title">getArtist</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    Artist artist = artistCache.get(name);</span><br><span class="line">    <span class="keyword">if</span> (artist == <span class="keyword">null</span>) &#123;</span><br><span class="line">        artist = readArtistFromDB(name);</span><br><span class="line">        artistCache.put(name, artist);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> artist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// after</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Artist <span class="title">getArtist</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> artistCache.computeIfAbsent(name, <span class="keyword">this</span>::readArtistFromDB);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 forEach 简化 map 的统计操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line">Map&lt;Artist, Integer&gt; countOfAlbums = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Artist, List&lt;Album&gt;&gt; entry : albumsByArtist.entrySet()) &#123;</span><br><span class="line">    Artist artist = entry.getKey();</span><br><span class="line">    List&lt;Album&gt; albums = entry.getValue();</span><br><span class="line">    countOfAlbums.put(artist, albums.size());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// after</span></span><br><span class="line">Map&lt;Artist, Integer&gt; countOfAlbums = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">albumsByArtist.forEach((artist, albums) -&gt; &#123;</span><br><span class="line">    countOfAlbums.put(artist, albums.size());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="第六章-数据并行化"><a href="#第六章-数据并行化" class="headerlink" title="第六章 数据并行化"></a>第六章 数据并行化</h2><p>并行化：同一任务拆分，多核执行<br>并发化：单核多任务</p>
<p>实现上只需要在调用方法时将 <code>.stream()</code> 改为 <code>.parallelStream()</code> 就行了。但是并不是并行了就快，取决于处理量等其他因素。</p>
<p>影响因素：数据大小， 源数据结构， 装箱， 核的数量， 单元处理开销， 底层还是使用了 fork/join 的模式。</p>
<p>数据结构并行性能：ArrayList, 数组， IntStream.range &gt; HashSet, Treeset &gt; LinkedList, Streams.iterate, BufferedReader.lines</p>
<p>为 array 赋初值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">Arrays.setAll(a, i-&gt;i);</span><br><span class="line"><span class="comment">// 输出：0，1，3.。。99</span></span><br></pre></td></tr></table></figure>

<h2 id="第七章-测试，调试和重构"><a href="#第七章-测试，调试和重构" class="headerlink" title="第七章 测试，调试和重构"></a>第七章 测试，调试和重构</h2><p>ThreadLocal 优化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line">ThreadLocal&lt;album&gt; thisAlbum = <span class="keyword">new</span> ThreadLocal&lt;Album&gt; () &#123;</span><br><span class="line">    <span class="meta">@Overrride</span> <span class="function"><span class="keyword">protected</span> Album <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> database.lookupCurrentAlbum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// after</span></span><br><span class="line">ThreadLocal&lt;Album&gt; thisAlbum = ThreadLocal.withInitial(() -&gt; database.lookupCurrentAlbum());</span><br></pre></td></tr></table></figure>

<p>可以使用 peek 进行流的调试</p>
<h2 id="第八章-设计和架构的原则"><a href="#第八章-设计和架构的原则" class="headerlink" title="第八章 设计和架构的原则"></a>第八章 设计和架构的原则</h2><p>列举了 Lambda 和 设计模式， DSL 的结合的例子，和我看这本书的初衷有点远了，先跳过。</p>
<h2 id="第九章-使用-Lambda-表达式编写并发程序"><a href="#第九章-使用-Lambda-表达式编写并发程序" class="headerlink" title="第九章 使用 Lambda 表达式编写并发程序"></a>第九章 使用 Lambda 表达式编写并发程序</h2><p>使用 Vertx 框架结合 Lambda 的知识点，实现一个聊天室，跳过。但是它的这个框架我倒是感觉很有意思，灵感是从 NodeJS 那边来的，支持并发。</p>
<h2 id="工作中遇到的一些例子"><a href="#工作中遇到的一些例子" class="headerlink" title="工作中遇到的一些例子"></a>工作中遇到的一些例子</h2><h3 id="Map-gt-Map-转化"><a href="#Map-gt-Map-转化" class="headerlink" title="Map -&gt; Map 转化"></a>Map -&gt; Map 转化</h3><p>Map&lt;String, List&lt;Obj&gt;&gt; 对 list 中的值进行修改，案例简化为 Map&lt;String, List&lt;String&gt;&gt; 将 list 中的 String 转化为大写</p>
<p>第一步先熟悉 list -&gt; list 转化方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; test = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">List&lt;String&gt; answer = test.stream().map(String::toUpperCase).collect(Collectors.toList());</span><br><span class="line">System.out.println(answer);</span><br><span class="line"><span class="comment">//output: [A, C]</span></span><br></pre></td></tr></table></figure>

<p>熟悉 map 转化方式并结合 list 转化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, List&lt;String&gt;&gt; origin = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">origin.put(<span class="string">&quot;a&quot;</span>, Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;n&quot;</span>));</span><br><span class="line">origin.put(<span class="string">&quot;b&quot;</span>, Arrays.asList(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">origin.put(<span class="string">&quot;c&quot;</span>, Arrays.asList(<span class="string">&quot;c&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(origin);</span><br><span class="line"></span><br><span class="line">Map&lt;String, List&lt;String&gt;&gt; after = origin.entrySet().stream().</span><br><span class="line">        collect(Collectors.toMap(</span><br><span class="line">                Map.Entry::getKey, (entry) -&gt; entry.getValue().stream().map(String::toUpperCase).collect(Collectors.toList()))</span><br><span class="line">        );</span><br><span class="line">System.out.println(after);</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// &#123;a=[a, n], b=[b], c=[c]&#125;</span></span><br><span class="line"><span class="comment">// &#123;a=[A, N], b=[B], c=[C]&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>函数式</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>lang 包类简介</title>
    <url>/hexo/2020/01/08/Lang%20%E5%8C%85%E7%B1%BB%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>用人话解释我用过的 Class 类中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 食用方法：classA.isAssignableFrom(classB)</span></span><br><span class="line"><span class="comment">* 表达的意思：classB 是不是 classA 的子类/接口 或 本身</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isAssignableFrom</span><span class="params">(Class&lt;?&gt; cls)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Samples, all tests passed.</span></span><br><span class="line"><span class="keyword">import</span> org.testng.Assert;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIsAssignableFrom</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_isAssignableFrom</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 对自己使用，返回 true</span></span><br><span class="line">        Assert.assertTrue(ClassA.class.isAssignableFrom(ClassA.class));</span><br><span class="line">        <span class="comment">// 父类对子类使用，返回 true</span></span><br><span class="line">        Assert.assertTrue(ClassA.class.isAssignableFrom(ClassB.class));</span><br><span class="line">        <span class="comment">// 子类对父类使用，返回 false</span></span><br><span class="line">        Assert.assertFalse(ClassB.class.isAssignableFrom(ClassA.class));</span><br><span class="line">        <span class="comment">// 父接口对自接口使用，返回 true</span></span><br><span class="line">        Assert.assertTrue(InterfaceC.class.isAssignableFrom(InterfaceD.class));</span><br><span class="line">        <span class="comment">// 子接口对父接口使用，返回 false</span></span><br><span class="line">        Assert.assertFalse(InterfaceD.class.isAssignableFrom(InterfaceC.class));</span><br><span class="line">        <span class="comment">// 接口对实现了自己的类使用，返回 true</span></span><br><span class="line">        Assert.assertTrue(InterfaceC.class.isAssignableFrom(ClassB.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> <span class="keyword">extends</span> <span class="title">ClassA</span> <span class="keyword">implements</span> <span class="title">InterfaceC</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterfaceC</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterfaceD</span> <span class="keyword">extends</span> <span class="title">InterfaceC</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>lang</tag>
        <tag>class</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 换源</title>
    <url>/hexo/2019/12/02/Linux%20%E6%8D%A2%E6%BA%90/</url>
    <content><![CDATA[<p>Linux 配置国内源加速，以 Ubuntu 为例子</p>
<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><p>运行 command</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换 sources.list 中的源信息</span></span><br><span class="line">sudo sed -i <span class="string">&#x27;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新索引</span></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>如果配置不生效，查看 sources.list 文件中的源信息，可能不是 <code>archive.ubuntu.com</code> 所以更新失败，比如我的 WSL环境中，原始的源就 <code>security.ubuntu.com</code> 需要把上面的命令改为, 使之生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/security.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://mirrors.ustc.edu.cn/help/ubuntu.html">Ubuntu 源使用帮助</a></li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>换源</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux cmd 小贴士</title>
    <url>/hexo/2020/07/08/Linux-cmd-tips/</url>
    <content><![CDATA[<p>常用 Linux command 备忘录</p>
<h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>终端获取资源，Sample: <code>curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python</code></p>
<p>-s: 静默模式，去掉显示进度等信息<br>-S: 显示错误信息<br>-L: 自动站点跳转</p>
<p>将 query 结果存到本地文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl url &gt;&gt; ret.json</span><br></pre></td></tr></table></figure>

<h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p><code>ping</code> 命令不需要带 protocal，如果要指定端口可以加 <code>-p</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping -p 8089 cloudsearch-dc8.cld.ondemand.com</span><br></pre></td></tr></table></figure>

<h2 id="容量查询"><a href="#容量查询" class="headerlink" title="容量查询"></a>容量查询</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示系统容量</span></span><br><span class="line">df -hl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前目录下个文件夹大小</span></span><br><span class="line">du -sh *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示文件大小并倒序排列</span></span><br><span class="line">du -sh * | sort -hr</span><br></pre></td></tr></table></figure>

<h2 id="ps-命令保留表头"><a href="#ps-命令保留表头" class="headerlink" title="ps 命令保留表头"></a>ps 命令保留表头</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个命令不是很好，比较繁琐，效率也不高。</span></span><br><span class="line"><span class="comment"># 实现方式是先 ps 一下拿到 head 打印出来，再 ps 一次拿到我们想要的结果</span></span><br><span class="line">ps | head -1; ps | grep java</span><br></pre></td></tr></table></figure>
<h2 id="查看文件-夹大小"><a href="#查看文件-夹大小" class="headerlink" title="查看文件/夹大小"></a>查看文件/夹大小</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># du: disk usage</span></span><br><span class="line">du -sh *</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>新系统初始化设置</title>
    <url>/hexo/2020/08/03/New-OS-Setup/</url>
    <content><![CDATA[<p>记录一下新系统常用配置和软件安装</p>
<h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><p>外网限制，安装 Chrome 扩展极度不便。所有的第一步是安装 SwithyOmega 的扩展来翻墙。</p>
<ol>
<li>去 <a href="https://github.com/FelisCatus/SwitchyOmega">SwitchyOmega</a> 官网下载 crx 文件。</li>
<li>重命名，将后缀改为 zip，然后直接拖到浏览器</li>
</ol>
<p>PS: 直接将 crx 文件拖进去会报错 <code>CRX_HEADER_INVALID</code></p>
<h2 id="MacOS-显示隐藏文件"><a href="#MacOS-显示隐藏文件" class="headerlink" title="MacOS 显示隐藏文件"></a>MacOS 显示隐藏文件</h2><p><code>cmd + shift + .</code></p>
<h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>官网推荐的通过 curl raw 文件安装，本地没有 proxy 的话 pass，基本不动。可以直接通过 <code>git clone https://github.com/Homebrew/install</code> 这个 repo 然后 <code>cd</code> 到 install 文件夹下执行 <code>/bin/bash -c ./install.sh</code> 来触发任务</p>
<h3 id="速度测试"><a href="#速度测试" class="headerlink" title="速度测试"></a>速度测试</h3><p>运行如下命令，查看是哪个步骤速度比较慢</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update --verbose</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jack@PC /usr/<span class="built_in">local</span>/Homebrew/stable brew update --verbose</span><br><span class="line">Checking <span class="keyword">if</span> we need to fetch /usr/<span class="built_in">local</span>/Homebrew...</span><br><span class="line">Checking <span class="keyword">if</span> we need to fetch /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-cask...</span><br><span class="line">Fetching /usr/<span class="built_in">local</span>/Homebrew...</span><br><span class="line">Checking <span class="keyword">if</span> we need to fetch /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core...</span><br><span class="line">Checking <span class="keyword">if</span> we need to fetch /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-services...</span><br><span class="line">Fetching /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core...</span><br><span class="line">Fetching /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-cask...</span><br><span class="line">remote: Counting objects: 5806, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (2626/2626), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 5806 (delta 4179), reused 4564 (delta 3087)</span><br><span class="line">Receiving objects: 100% (5806/5806), 1.30 MiB | 203.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (4179/4179), completed with 375 <span class="built_in">local</span> objects.</span><br><span class="line">From https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew</span><br><span class="line">   7b67ac5e3..a4d7bb64a  master     -&gt; origin/master</span><br><span class="line"> * [new tag]             2.1.10     -&gt; 2.1.10</span><br><span class="line"> * [new tag]             2.1.11     -&gt; 2.1.11</span><br><span class="line"> * [new tag]             2.1.12     -&gt; 2.1.12</span><br><span class="line"> * [new tag]             2.1.13     -&gt; 2.1.13</span><br><span class="line"> * [new tag]             2.1.14     -&gt; 2.1.14</span><br><span class="line"> * [new tag]             2.1.15     -&gt; 2.1.15</span><br><span class="line"> * [new tag]             2.1.16     -&gt; 2.1.16</span><br><span class="line"> * [new tag]             2.1.3      -&gt; 2.1.3</span><br><span class="line"> * [new tag]             2.1.4      -&gt; 2.1.4</span><br><span class="line"> * [new tag]             2.1.5      -&gt; 2.1.5</span><br><span class="line"> * [new tag]             2.1.6      -&gt; 2.1.6</span><br><span class="line"> * [new tag]             2.1.7      -&gt; 2.1.7</span><br><span class="line"> * [new tag]             2.1.8      -&gt; 2.1.8</span><br><span class="line"> * [new tag]             2.1.9      -&gt; 2.1.9</span><br><span class="line">remote: Counting objects: 71830, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (27226/27226), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 71830 (delta 53303), reused 62922 (delta 44592)</span><br><span class="line">Receiving objects: 100% (71830/71830), 21.95 MiB | 11.70 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (53303/53303), completed with 4020 <span class="built_in">local</span> objects.</span><br><span class="line">From https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core</span><br><span class="line">   ea056b500e..6ec9c907ea master     -&gt; origin/master</span><br><span class="line">remote: Enumerating objects: 235987, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (215906/215906), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (58941/58941), <span class="keyword">done</span>.</span><br><span class="line">Receiving objects:  45% (92674/205138), 23.64 MiB | 345.00 KiB/s</span><br></pre></td></tr></table></figure>

<h3 id="更新-Brew-配置"><a href="#更新-Brew-配置" class="headerlink" title="更新 Brew 配置"></a>更新 Brew 配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换brew.git:</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换homebrew-core.git:</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换homebrew-cask.git:</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span>/Library/Taps/homebrew/homebrew-cask</span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 homebrew bottles 源, zsh 用户:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 homebrew bottles 源, bash 用户:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>如果这个源挂了可以试试清华的</p>
<h2 id="update-warning"><a href="#update-warning" class="headerlink" title="update warning"></a>update warning</h2><p>brew update 抛 warning</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Updating /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core...</span><br><span class="line">fatal: It seems that there is already a rebase-apply directory, and</span><br><span class="line">I wonder <span class="keyword">if</span> you are <span class="keyword">in</span> the middle of another rebase.  If that is the</span><br><span class="line"><span class="keyword">case</span>, please try</span><br><span class="line">    git rebase (--<span class="built_in">continue</span> | --abort | --skip)</span><br><span class="line">If that is not the <span class="keyword">case</span>, please</span><br><span class="line">    rm -fr <span class="string">&quot;.git/rebase-apply&quot;</span></span><br><span class="line">and run me again.  I am stopping <span class="keyword">in</span> <span class="keyword">case</span> you still have something</span><br><span class="line">valuable there.</span><br></pre></td></tr></table></figure>

<p>存在 <code>/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/.git/rebase-apply</code> 这样的备份文件，通过 <code>rm -rf rebase-apply</code> 删掉就好了</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://www.raydbg.com/2019/Homebrew-Update-Slow/">RayDBG</a></li>
<li><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git">USTC Guide</a></li>
</ul>
<h2 id="Iterm2"><a href="#Iterm2" class="headerlink" title="Iterm2"></a>Iterm2</h2><p>可以通过下载 <a href="https://www.iterm2.com/downloads.html">官方 zip</a> 包离线安装，也可以通过 brew 安装 <code>brew cask install iterm2</code>。brew 会比较慢</p>
<p>修改提示符 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">prompt_context</span></span> () &#123;</span><br><span class="line">    prompt_segment black default <span class="string">&quot;Jack&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置-solarized-配色方案"><a href="#配置-solarized-配色方案" class="headerlink" title="配置 solarized 配色方案"></a>配置 solarized 配色方案</h3><p>最新版的系统已经默认支持这个配色方案了，打开 iterm2 终端，<code>cmd + ,</code> 打开配置窗口。 Preferences -&gt; Profiles -&gt; Colors -&gt; Color Presets -&gt; Solarized Dark</p>
<h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><p>官方 <a href="https://github.com/ohmyzsh/ohmyzsh">git</a> 地址， 应为网络原因选择 clone repo 安装: <code>git clone https://github.com/ohmyzsh/ohmyzsh.git</code> + <code>sh -c &#39;./install.sh</code></p>
<p>重启后终端抛出 warning</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Last login: Mon Aug  3 18:08:08 on ttys000</span><br><span class="line">[oh-my-zsh] Insecure completion-dependent directories detected:</span><br><span class="line">drwxrwxr-x  3 jack  admin   96 Aug  3 13:18 /usr/<span class="built_in">local</span>/share/zsh</span><br><span class="line">drwxrwxr-x  4 jack  admin  128 Aug  3 13:22 /usr/<span class="built_in">local</span>/share/zsh/site-functions</span><br><span class="line"></span><br><span class="line">[oh-my-zsh] For safety, we will not load completions from these directories until</span><br><span class="line">[oh-my-zsh] you fix their permissions and ownership and restart zsh.</span><br><span class="line">[oh-my-zsh] See the above list <span class="keyword">for</span> directories with group or other writability.</span><br><span class="line"></span><br><span class="line">[oh-my-zsh] To fix your permissions you can <span class="keyword">do</span> so by disabling</span><br><span class="line">[oh-my-zsh] the write permission of <span class="string">&quot;group&quot;</span> and <span class="string">&quot;others&quot;</span> and making sure that the</span><br><span class="line">[oh-my-zsh] owner of these directories is either root or your current user.</span><br><span class="line">[oh-my-zsh] The following <span class="built_in">command</span> may <span class="built_in">help</span>:</span><br><span class="line">[oh-my-zsh]     compaudit | xargs chmod g-w,o-w</span><br><span class="line"></span><br><span class="line">[oh-my-zsh] If the above didn<span class="string">&#x27;t help or you want to skip the verification of</span></span><br><span class="line"><span class="string">[oh-my-zsh] insecure directories you can set the variable ZSH_DISABLE_COMPFIX to</span></span><br><span class="line"><span class="string">[oh-my-zsh] &quot;true&quot; before oh-my-zsh is sourced in your zshrc file.</span></span><br></pre></td></tr></table></figure>

<p>运行如下 cmd 修复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 755 /usr/<span class="built_in">local</span>/share/zsh</span><br><span class="line">chmod 755 /usr/<span class="built_in">local</span>/share/zsh/site-functions</span><br></pre></td></tr></table></figure>

<p>配置命令高亮: <code>brew install zsh-syntax-highlighting</code> 并在 .zshrc 中添加配置行 <code>source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</code></p>
<p>配置命令自动补全提示: <code>git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</code> 添加 .zshrc 配置 <code>plugins=(zsh-autosuggestions)</code></p>
<p>为提示插件绑定快捷键: 在 zshrc 文件中添加配置 <code>bindkey &#39;^ &#39; autosuggest-accept</code>, MacOS 下这个快捷键和系统默认的输入法切换冲突，在 System Preferences -&gt; keyboard -&gt; shortcuts -&gt; input sources 下将 select the previous input source 和 selet the next input soure menue 的勾选去掉就行了</p>
<p>PS: 这个快捷键在 VSCode 的 terminal 上不能 work, 试着把 vscode 自带的 <code>ctrl + space</code> 都改掉还是没效果(´Д`) 先凑合着用把，干</p>
<p>PPS: 想要重新绑定 <code>shift + space</code> 为补全，不过找不到对应的 zsh code， 擦擦擦。在 linux 下有款终端工具叫 showkey 的貌似可以解决这个问题， 也可以试试终端输入 cat 回车，按键他就会打印出来键符，不过 shift 貌似没给提示。。。</p>
<p>solarized dark 配色和 zsh-autosuggestion 自动提示配色有冲突，会看不到，参考 <a href="https://github.com/zsh-users/zsh-autosuggestions/issues/416#issuecomment-486516333">issue</a>。我本地直接把配色改成系统自带的 Tango Dark 了</p>
<h3 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h3><p>使用 <code>agnoster</code> 主题时需要加载一个字体，不然很多箭头之类的表示符会显示乱码。下载字体：<code>git clone https://github.com/powerline/fonts.git</code>, 找到 <code>fonts/Meslo Slashed/Meslo LG M Regular for Powerline.ttf</code> 双击安装。 然后打开 iTerm2，按 <code>Command + ,</code> 键，打开 Preferences 配置界面，然后Profiles -&gt; Text -&gt; Font -&gt; Chanage Font，选择 Meslo LG M Regular for Powerline 字体。</p>
<h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><p>打开 VSCode, <code>CMD + SHIFT + P</code>, 选择 <code>Shell Command: Install &#39;code&#39; command in PATH</code> 命令，应用会自动安装好，在终端输入 <code>code</code> 测试</p>
<p>配置完 zsh 之后，VSCode 的终端会显示乱码，<code>cmd + shift + p</code> 搜索 ‘Preferences: Open Settings(JSON)’ 添加配置 <code>&#123; &quot;terminal.integrated.fontFamily&quot;: &quot;Meslo LG M for Powerline&quot; &#125;</code> 即可修复，保存后可以看到效果。</p>
<p>VSCode 在终端安装 code 命令之后每次重启都会失效，应该是因为我只是把它放在 Document, Download 文件夹下面了。把它放到 Application 下再安装一下 shell 继承命令就可以了。顺带着之前 <code>zsh-autosuggestion</code> 不能补全也是这个原因！！！</p>
<h3 id="安装-VirtualBox"><a href="#安装-VirtualBox" class="headerlink" title="安装 VirtualBox"></a>安装 VirtualBox</h3><p>MacOS 10.15.6 Catalina 安装 VirtualBox 的时候报错，安装失败，是应为 MacOS 默认设置是禁止安装 Oracle 公司产品的，你可以去 System Preference -&gt; Security &amp; Privacy 页面点一下左下方的小锁，允许安装 Oracle 相关软件。再重新安装一下，就行了。</p>
<h2 id="使用-IDEA-的快捷键时跳出窗口"><a href="#使用-IDEA-的快捷键时跳出窗口" class="headerlink" title="使用 IDEA 的快捷键时跳出窗口"></a>使用 IDEA 的快捷键时跳出窗口</h2><p>窗口内容： “No manual entry for <command>“， Refer to <a href="https://intellij-support.jetbrains.com/hc/en-us/articles/360005137400-Cmd-Shift-A-hotkey-opens-Terminal-with-apropos-search-instead-of-the-Find-Action-dialog">Official IDEA Support</a></p>
<p>MacOS since 10.14, 官方定义了这个快捷键，和 IDEA 冲突了，Keyboard -&gt; shortcut -&gt; service -&gt; search man page index in terminal 把这个选项 disable 掉，或者替换掉</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>NoClassDefFoundError 记录</title>
    <url>/hexo/2020/01/06/NoClassDefFoundError%20%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>写 UT 的时候遇到一个 NoClassDefFoundError, 以前没碰到过，记一笔</p>
<h3 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h3><p>编译时能找到 class 但是运行时对应的类找不到了，听上去可能不点矛盾</p>
<h3 id="与-ClassNotFoundException-的区别"><a href="#与-ClassNotFoundException-的区别" class="headerlink" title="与 ClassNotFoundException 的区别"></a>与 ClassNotFoundException 的区别</h3><p>ClassNotFoundException 的场景更多的是我们给出 class name, 然后 JVM 根据名字去 load 的时候找不到就会跑抛出这个异常</p>
<p>NoClassDefFoundError 则是在编译期，JVM 是能找到对应的类的，但是等运行期时找不到了</p>
<h3 id="怎么修复"><a href="#怎么修复" class="headerlink" title="怎么修复"></a>怎么修复</h3><ol>
<li>检测 Classpath 是不是缺少你需要的 jar 包，缺少就加一下。我本地就是这个问题，测试的 dependency 中没有类的引用，挂了</li>
<li>检查 error exception stack, 看看是不是类初始化时 static 部分出错了</li>
</ol>
<h3 id="打印-Classpath-调试"><a href="#打印-Classpath-调试" class="headerlink" title="打印 Classpath 调试"></a>打印 Classpath 调试</h3><p>通过打印 classpath 输出当前运行环境是否缺少需要的 jar 包。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintClassPath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassLoader cl = ClassLoader.getSystemClassLoader();</span><br><span class="line"></span><br><span class="line">        URL[] urls = ((URLClassLoader)cl).getURLs();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(URL url: urls)&#123;</span><br><span class="line">            System.out.println(url.getFile());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/charsets.jar</span></span><br><span class="line"><span class="comment">// /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/deploy.jar</span></span><br><span class="line"><span class="comment">// /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/cldrdata.jar</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h3 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h3><p><a href="https://javarevisited.blogspot.com/2011/06/noclassdeffounderror-exception-in.html">很全面的一个 NoClassDefFoundError 异常分析博文</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>exception</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas 快速入门</title>
    <url>/hexo/2020/06/29/Pandas-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>记录 Pandas 常用方法作为快速入门导航</p>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path = <span class="string">&#x27;/Users/i306454/Downloads/dump.json&#x27;</span></span><br><span class="line">dump = pandas.read_json(path)</span><br><span class="line"><span class="comment"># 输出一个二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示每一列的基本信息，包括类型，是否空等</span></span><br><span class="line">dump.info()</span><br><span class="line"><span class="comment"># &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"><span class="comment"># RangeIndex: 18846 entries, 0 to 18845</span></span><br><span class="line"><span class="comment"># Data columns (total 6 columns):</span></span><br><span class="line"><span class="comment">#  #   Column        Non-Null Count  Dtype</span></span><br><span class="line"><span class="comment"># ---  ------        --------------  -----</span></span><br><span class="line"><span class="comment">#  0   subject       18846 non-null  object</span></span><br><span class="line"><span class="comment">#  1   receive_from  18846 non-null  object</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示可计算列的统计信息，最值，方差，分布等</span></span><br><span class="line">dump.describe()</span><br><span class="line"><span class="comment">#                size</span></span><br><span class="line"><span class="comment"># count  1.884600e+04</span></span><br><span class="line"><span class="comment"># mean   5.790807e+04</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示前三条，用作预览</span></span><br><span class="line">dump.head(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取值 loc/iloc, loc 通过名字，iloc 通过数字标签</span></span><br><span class="line"><span class="comment"># 取1,2 行, size 到 receive_data 矩阵, 和 python 的语法不一样的是这个表达式会包含第二行</span></span><br><span class="line">dump.loc[<span class="number">1</span>:<span class="number">2</span>, <span class="string">&#x27;size&#x27;</span>:]</span><br><span class="line"><span class="comment">#     size         receive_date</span></span><br><span class="line"><span class="comment"># 1  11593  2015-08-06T08:36:19</span></span><br><span class="line"><span class="comment"># 2  15863  2017-08-06T08:09:36</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接到方括号可以选择列</span></span><br><span class="line">dump[<span class="string">&#x27;size&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看矩阵大小</span></span><br><span class="line">dump.shape</span><br><span class="line"><span class="comment"># (15, 6)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 size &gt; 3M 的行</span></span><br><span class="line">dump[dump[<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">2000000</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画直方图, bins 如果是数字的话表示你想分成几个 bar</span></span><br><span class="line">dump[<span class="string">&#x27;size&#x27;</span>].hist(bins=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas 的直方图可选项比较少，画图可以用 matplotlib</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = [<span class="number">2500</span>*sub <span class="keyword">for</span> sub <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">22</span>)]</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.hist(main[<span class="string">&#x27;size&#x27;</span>].values, bins=range(<span class="number">0</span>, <span class="number">50000</span>+<span class="number">1</span>, <span class="number">2500</span>))</span><br><span class="line">plt.grid()</span><br><span class="line">plt.xticks(x, [<span class="string">&#x27;&#123;:.1f&#125;KB&#x27;</span>.format(sub/<span class="number">1000</span>) <span class="keyword">for</span> sub <span class="keyword">in</span> x])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产次云, 通过 scale 控制清晰度</span></span><br><span class="line">titles = dump[<span class="string">&#x27;subject&#x27;</span>]</span><br><span class="line">titletxt = <span class="string">&#x27; &#x27;</span>.join(titles)</span><br><span class="line">wordcloud = WordCloud(scale=<span class="number">10</span>).generate(titletxt)</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.imshow(wordcloud, interpolation=<span class="string">&#x27;bilinear&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="修改-pandas-describe-格式"><a href="#修改-pandas-describe-格式" class="headerlink" title="修改 pandas describe 格式"></a>修改 pandas describe 格式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.set_option(<span class="string">&#x27;display.float_format&#x27;</span>, <span class="keyword">lambda</span> x: <span class="string">&#x27;&#123;:.2f&#125;KB&#x27;</span>.format(x/<span class="number">1000</span>))</span><br><span class="line">dump.describe()</span><br><span class="line"><span class="comment">#            size</span></span><br><span class="line"><span class="comment"># count   18.85KB</span></span><br><span class="line"><span class="comment"># mean    57.91KB</span></span><br><span class="line"><span class="comment"># std    143.28KB</span></span><br><span class="line"><span class="comment"># min      3.21KB</span></span><br><span class="line"><span class="comment"># 25%     11.09KB</span></span><br><span class="line"><span class="comment"># 50%     23.72KB</span></span><br><span class="line"><span class="comment"># 75%     42.62KB</span></span><br><span class="line"><span class="comment"># max   5235.50KB</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Poetry 快速入门</title>
    <url>/hexo/2020/07/17/Poetry-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>Poetry 类 pipenv 工具，据说 lock 什么的速度更快，而且有集成发布功能，刚好 rich 这个项目有用这个，刚好在看源码的时候体验一把</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># powershell 输入</span></span><br><span class="line">(Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py -UseBasicParsing).Content | python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示 error, 原因是 DNS 污染</span></span><br><span class="line">Invoke-WebRequest : 未能解析此远程名称: <span class="string">&#x27;raw.githubusercontent.com&#x27;</span></span><br><span class="line">所在位置 行:1 字符: 2</span><br><span class="line">+ (Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poet ...</span><br><span class="line">+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest]，WebExce</span><br><span class="line">    ption</span><br><span class="line">    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决方案：修改 host 文件</span></span><br><span class="line"><span class="comment"># 目录：C:/Windows/System32/drivers/etc/</span></span><br><span class="line"><span class="comment"># 管理员模式打开，添加文本: 151.101.0.133 raw.githubusercontent.com</span></span><br><span class="line"><span class="comment"># 刷新DNS</span></span><br><span class="line">ipconfig /flushdns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接成功，但是报其他错误</span></span><br><span class="line">Invoke-WebRequest : 基础连接已经关闭: 发送时发生错误。</span><br><span class="line">所在位置 行:1 字符: 2</span><br><span class="line">+ (Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poet ...</span><br><span class="line">+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest]，WebExce</span><br><span class="line">    ption</span><br><span class="line">    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改完之后各种报错，烦躁。这个命令就是下载一个 get-poetry.py 的 raw 文件，然后使用 python get-poetry.py 安装。我直接下载这个文件然后安装了。。。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尼玛，被墙了安装超级慢 (╬▔皿▔)╯ 最后用小飞机开启全局代理， 再 CMD 窗口 python get-poetry.py 安装成功</span></span><br><span class="line"></span><br><span class="line">Retrieving Poetry metadata</span><br><span class="line"></span><br><span class="line">Before we start, please answer the following questions.</span><br><span class="line">You may simply press the Enter key to leave unchanged.</span><br><span class="line">Modify PATH variable? ([y]/n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Welcome to Poetry!</span></span><br><span class="line">This will download and install the latest version of Poetry,</span><br><span class="line">a dependency and package manager <span class="keyword">for</span> Python.</span><br><span class="line">It will add the `poetry` <span class="built_in">command</span> to Poetry<span class="string">&#x27;s bin directory, located at:</span></span><br><span class="line"><span class="string">%USERPROFILE%\.poetry\bin</span></span><br><span class="line"><span class="string">This path will then be added to your `PATH` environment variable by</span></span><br><span class="line"><span class="string">modifying the `HKEY_CURRENT_USER/Environment/PATH` registry key.</span></span><br><span class="line"><span class="string">You can uninstall at any time by executing this script with the --uninstall option,</span></span><br><span class="line"><span class="string">and these changes will be reverted.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Installing version: 1.0.10</span></span><br><span class="line"><span class="string">  - Downloading poetry-1.0.10-win32.tar.gz (11.96MB)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Poetry (1.0.10) is installed now. Great!</span></span><br><span class="line"><span class="string">To get started you need Poetry&#x27;</span>s bin directory (%USERPROFILE%\.poetry\bin) <span class="keyword">in</span> your `PATH`</span><br><span class="line">environment variable. Future applications will automatically have the</span><br><span class="line">correct environment, but you may need to restart your current shell.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启一下终端，输入命令检测安装</span></span><br><span class="line">poetry --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是在 vscode 的终端中还是不能识别，手动将 user\.poetry\bin 添加到系统 path 中重启 vscode, 识别成功</span></span><br></pre></td></tr></table></figure>

<p>PS: 国内安装各种软件有助于增长火气！！！</p>
<h2 id="常用-Command"><a href="#常用-Command" class="headerlink" title="常用 Command"></a>常用 Command</h2><h3 id="poetry-new-project-name"><a href="#poetry-new-project-name" class="headerlink" title="poetry new project-name"></a>poetry new project-name</h3><p>初始化项目, 创建必要文件。你可以在 git 上先建一个空的仓库然后，本地做完 poetry init 和 git init 之后 match 一下</p>
<p>初始化后目录为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">job-spider</span><br><span class="line">├── pyproject.toml</span><br><span class="line">├── README.rst</span><br><span class="line">├── job_spider</span><br><span class="line">│   └── __init__.py</span><br><span class="line">└── tests</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── test_job_spider.py</span><br></pre></td></tr></table></figure>

<p>通过配置 toml 文件指定国内源加速</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[[tool.poetry.source]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;douban&quot;</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">&quot;https://pypi.doubanio.com/simple/&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="poetry-config-–list"><a href="#poetry-config-–list" class="headerlink" title="poetry config –list"></a>poetry config –list</h3><p>查看配置，比如 virtualenv 会创建在哪里之类的。这个 cmd 还是很有帮助的，可以通过它知道你的虚拟环境创建在哪里，是不是要在 project 创建 venv 等</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ poetry config --list</span><br><span class="line">cache-dir = <span class="string">&quot;/Users/jack/Library/Caches/pypoetry&quot;</span></span><br><span class="line">virtualenvs.create = <span class="literal">true</span></span><br><span class="line">virtualenvs.in-project = <span class="literal">false</span></span><br><span class="line">virtualenvs.path = <span class="string">&quot;&#123;cache-dir&#125;/virtualenvs&quot;</span> <span class="comment"># /Users/jack/Library/Caches/pypoetry/virtualenvs</span></span><br></pre></td></tr></table></figure>

<p>通过指定 <code>poetry config virtualenvs.in-project true</code> 可以指定将虚拟环境创建到 project 目录下面，方便管理</p>
<h3 id="poetry-shell"><a href="#poetry-shell" class="headerlink" title="poetry shell"></a>poetry shell</h3><p>激活环境, 如果还没有创建过虚拟环境，他还会根据 toml 文件新建一个</p>
<h3 id="poetry-install"><a href="#poetry-install" class="headerlink" title="poetry install"></a>poetry install</h3><p>并不是安装依赖，而是根据 toml 文件安装项目依赖，对标 <code>pipenv sync</code></p>
<h3 id="poetry-add"><a href="#poetry-add" class="headerlink" title="poetry add"></a>poetry add</h3><p>对标 pipenv 中的 <code>pipenv install</code>, 使用 <code>add --dev/-D flask</code> 安装 dev 相关的包</p>
<h3 id="poetry-env-info"><a href="#poetry-env-info" class="headerlink" title="poetry env info"></a>poetry env info</h3><p><code>poetry env info</code>: 显示运行环境信息，包括本地 OS 和虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Virtualenv</span><br><span class="line">Python:         3.7.5</span><br><span class="line">Implementation: CPython</span><br><span class="line">Path:           /Users/jack/gitStore/mycommands/.venv</span><br><span class="line">Valid:          True</span><br><span class="line"></span><br><span class="line">System</span><br><span class="line">Platform: darwin</span><br><span class="line">OS:       posix</span><br><span class="line">Python:   /Library/Frameworks/Python.framework/Versions/3.7</span><br></pre></td></tr></table></figure>

<p><code>poetry env list</code>: 显示可用的 env 列表</p>
<p>官方推荐 poetry 结合 pyenv 管理各种版本的虚拟环境</p>
<h2 id="poetry-show"><a href="#poetry-show" class="headerlink" title="poetry show"></a>poetry show</h2><p>显示已安装的依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">poetry show</span><br><span class="line">atomicwrites       1.4.0  Atomic file writes.</span><br><span class="line">attrs              19.3.0 Classes Without Boilerplate</span><br><span class="line">click              7.1.2  Composable <span class="built_in">command</span> line interface toolkit</span><br><span class="line">flask              1.1.2  A simple framework <span class="keyword">for</span> building complex web applications.</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="Resolving-dependency-挺慢"><a href="#Resolving-dependency-挺慢" class="headerlink" title="Resolving dependency 挺慢"></a>Resolving dependency 挺慢</h3><p>在安装更新的时候 resolving dependency 挺慢的，等了好一会儿，一度认为进程死了。但是第二次就快多了，可能是有 cache</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\jack\gitStore\job-spider\job_spider&gt;poetry install --verbose</span><br><span class="line">Updating dependencies</span><br><span class="line">Resolving dependencies...</span><br></pre></td></tr></table></figure>

<h3 id="编译器识别有问题"><a href="#编译器识别有问题" class="headerlink" title="编译器识别有问题"></a>编译器识别有问题</h3><p>观察 VSCode 的左下角，python 编译器经常选择有问题，会找不到自己创建的虚拟环境路径。可以点击它，然后根据 poetry shell 的提示手动设置，路径如 <code>C:\Users\jack\AppData\Local\pypoetry\Cache\virtualenvs\job-spider-UlnXzhyt-py3.7</code> 做完后他会自动保存到 <code>.vscode</code> 的工程文件夹下。但是我默认这个文件是不 check in 的，所以然并卵 ┑(￣Д ￣)┍</p>
<h3 id="Win-启动-flask-失败"><a href="#Win-启动-flask-失败" class="headerlink" title="Win 启动 flask 失败"></a>Win 启动 flask 失败</h3><p>新建了一个 flask demo，启动的时候报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\jack\gitStore\job-spider&gt; poetry run .\job_spider\main.py</span><br><span class="line"></span><br><span class="line">[OSError]</span><br><span class="line">[WinError 193] %1 不是有效的 Win32 应用程序。</span><br></pre></td></tr></table></figure>

<p>据说是 windows 上安装了 64 位的 python， 调用了 32 位的 dll 会报这个错，换个 32 位的 python 就能解决。将原有的 64 位卸载，删除各种环境变量，重新安装 32 位 python，然并卵，要自闭了 (￣ε(#￣)</p>
<p>暂时没有什么其他更好的解决方案，打算用虚拟机或者在 MacOS 上完成开发以节省时间</p>
<p>今天在 Mac 上用 3.7.8 的版本也会抛同样的错误！！！难道是版本有问题？果断用 <code>3.6.6</code>, <code>3.7.3</code> 试试，可行。。。。回去再到 Windows 的机子上试试这个版本。</p>
<p>在 Win 上换 3.7.3 之后一切正常 ╰(艹皿艹 )</p>
<h3 id="MacOS-poetry-install-报错"><a href="#MacOS-poetry-install-报错" class="headerlink" title="MacOS poetry install 报错"></a>MacOS poetry install 报错</h3><p>切换到 3.6.5 之后 poetry install 报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[EnvCommandError]</span><br><span class="line">Command [<span class="string">&#x27;/Users/jack/gitStore/splunk-collector/.venv/bin/pip&#x27;</span>, <span class="string">&#x27;install&#x27;</span>, <span class="string">&#x27;--no-deps&#x27;</span>, <span class="string">&#x27;zipp==3.1.0&#x27;</span>] errored with the following <span class="built_in">return</span> code 1, and output:</span><br><span class="line">pip is configured with locations that require TLS/SSL, however the ssl module <span class="keyword">in</span> Python is not available.</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>是 OpenSSL 包缺失导致的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修复，第一行可以不运行，下载包经常卡住</span></span><br><span class="line">brew update &amp;&amp; brew upgrade</span><br><span class="line">brew uninstall --ignore-dependencies openssl; brew install https://github.com/tebelorg/Tump/releases/download/v1.0.0/openssl.rb</span><br><span class="line"></span><br><span class="line">brew reinstall python</span><br></pre></td></tr></table></figure>

<p>这之后还重新将 pyenv 管理的 python 重新卸载安装了一下，问题解决</p>
<h3 id="MacOS-poetry-run"><a href="#MacOS-poetry-run" class="headerlink" title="MacOS poetry run"></a>MacOS poetry run</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> poetry run splunk_collector/main.py</span><br><span class="line"></span><br><span class="line">[PermissionError]</span><br><span class="line">[Errno 13] Permission denied</span><br></pre></td></tr></table></figure>

<p>运行 flask demo, permission 报错。完全搞错了。。。。flask 并不是那样运行的。保存完文件之后, 通过如下方式运行，而不是直接用 poetry 或者 python 运行，我 凸^-^凸</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> FLASK_APP=hello.py</span><br><span class="line">$ flask run</span><br><span class="line"> * Running on http://127.0.0.1:5000/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>poetry</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中常用的代码段</title>
    <url>/hexo/2020/01/23/Python%20%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BB%A3%E7%A0%81%E6%AE%B5/</url>
    <content><![CDATA[<p>记录一些我经常查找的 python 方法作为备忘</p>
<h2 id="Generate-random-int-list-or-just-a-requirement-of-loop-N-times"><a href="#Generate-random-int-list-or-just-a-requirement-of-loop-N-times" class="headerlink" title="Generate random int list, or just a requirement of loop N times"></a>Generate random int list, or just a requirement of loop N times</h2><p>it’s a common requirement and some guys achieve this goal by using Numpy lib, but it’s too heavy. you can do in this way:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">  print(random.randint(<span class="number">0</span>, <span class="number">100</span>))</span><br><span class="line">  </span><br><span class="line"><span class="comment"># the _ is from 0 - 9</span></span><br></pre></td></tr></table></figure>

<h2 id="Get-index-and-val-at-the-same-time"><a href="#Get-index-and-val-at-the-same-time" class="headerlink" title="Get index and val at the same time"></a>Get index and val at the same time</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> idx, val <span class="keyword">in</span> enumerate(a):</span><br><span class="line">   print(<span class="string">f&#x27;idx = <span class="subst">&#123;idx&#125;</span>, val = <span class="subst">&#123;val&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># idx = 0, val = a</span></span><br><span class="line"><span class="comment"># idx = 1, val = b</span></span><br><span class="line"><span class="comment"># idx = 2, val = c</span></span><br><span class="line"><span class="comment"># idx = 3, val = d</span></span><br></pre></td></tr></table></figure>

<p>if you want to specify the start index, you can add a second parameter to enumerate func</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># in this case, idx would start from 3</span></span><br><span class="line">a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> idx, val <span class="keyword">in</span> enumerate(a, <span class="number">3</span>):</span><br><span class="line">  print(<span class="string">f&#x27;idx = <span class="subst">&#123;idx&#125;</span>, val = <span class="subst">&#123;val&#125;</span>&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># idx = 3, val = a</span></span><br><span class="line"><span class="comment"># idx = 4, val = b</span></span><br><span class="line"><span class="comment"># idx = 5, val = c</span></span><br><span class="line"><span class="comment"># idx = 6, val = d</span></span><br></pre></td></tr></table></figure>

<h2 id="Ipython-交互界面重新引入修改后的包"><a href="#Ipython-交互界面重新引入修改后的包" class="headerlink" title="Ipython 交互界面重新引入修改后的包"></a>Ipython 交互界面重新引入修改后的包</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">importlib.reload(some_module)</span><br></pre></td></tr></table></figure>

<h2 id="for-loop-one-line-mode"><a href="#for-loop-one-line-mode" class="headerlink" title="for loop one line mode"></a>for loop one line mode</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_ids = [record[<span class="string">&#x27;login&#x27;</span>] <span class="keyword">for</span> record <span class="keyword">in</span> resp]</span><br><span class="line"></span><br><span class="line"><span class="comment"># if you need if condition</span></span><br><span class="line">list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">filter = [str(sub + <span class="string">&quot;tt&quot;</span>) <span class="keyword">for</span> sub <span class="keyword">in</span> list <span class="keyword">if</span> sub &gt;= <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<h2 id="repr-Vs-str"><a href="#repr-Vs-str" class="headerlink" title="repr Vs str"></a><strong>repr</strong> Vs <strong>str</strong></h2><ul>
<li>只重写 <strong>str</strong> 只定制在 print() 时的输出</li>
<li>只重写 <strong>repr</strong> print() 和 调用都输出定制内容</li>
<li>重写 <strong>str</strong> + <strong>repr</strong> print() 输出 str 定制内容，调用输出 repr 内容</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">N1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;N1: data=%s&#x27;</span> % self.data</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">N2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;N2: data=%s&#x27;</span> % self.data</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">N3</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;N3 repr: data=%s&#x27;</span> % self.data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;N3 str: data=%s&#x27;</span> % self.data</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;output</span></span><br><span class="line"><span class="string">n1 = N1(1)</span></span><br><span class="line"><span class="string"># In [30]: n1</span></span><br><span class="line"><span class="string"># Out[30]: &lt;BinaryTree.N1 at 0x10853fd30&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(n1)</span></span><br><span class="line"><span class="string"># N1: data=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n2 = N2(2)</span></span><br><span class="line"><span class="string"># In [33]: n2</span></span><br><span class="line"><span class="string"># Out[33]: N2: data=2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(n2)</span></span><br><span class="line"><span class="string"># N2: data=2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n3 = N3(3)</span></span><br><span class="line"><span class="string"># Out[36]: N3 repr: data=3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(n3)</span></span><br><span class="line"><span class="string"># N3 str: data=3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="How-to-print-in-string-formant"><a href="#How-to-print-in-string-formant" class="headerlink" title="How to print in string formant"></a>How to print in string formant</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;&#123; Test-&#123;&#125; &#125;&#125;&#x27;</span>.format(<span class="string">&#x27;output&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output: &#123; Test-output &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="遍历子目录"><a href="#遍历子目录" class="headerlink" title="遍历子目录"></a>遍历子目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">    <span class="keyword">for</span> sub <span class="keyword">in</span> files:</span><br><span class="line">        print(<span class="string">&#x27;name: %s&#x27;</span> %(os.path.join(root, sub)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者也可以使用 glob</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line">glob.glob(<span class="string">&#x27;./**/*.png&#x27;</span>, recursive=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中的 import 关键字</title>
    <url>/hexo/2020/01/23/Python%20%E4%B8%AD%E7%9A%84%20import%20%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<p>看 you-get 源码时卡在了 import package 这个点，特此记录一下搜索资料的结果</p>
<h2 id="Import-Of-Python"><a href="#Import-Of-Python" class="headerlink" title="Import Of Python"></a>Import Of Python</h2><p>你在看 python 代码的时候经常会在文件头部发现一串代码，格式类似 <code>import xxx</code> 或者 <code>from xxx import xxx</code>。功能都是一样的，引入代码重复利用。分两种，一种是引入 module，另一种是映入 package。</p>
<ul>
<li>module 简单理解就是组织好的 python 文件</li>
<li>package 即使用文件夹形式组织 python 文件，在 package 的更目录下会有一个 <code>__init__.py</code> 文件作为 package 的入口</li>
</ul>
<h2 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h2><p>clone 了 rich 的源码通过 <code>python ./styled.py</code> 运行时报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(rich-2qeSub0j-py3.7)  i306454@C02TW719HTD5  ~/gitStore/rich/rich   master  python ./styled.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;./styled.py&quot;</span>, line 3, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from .measure import Measurement</span><br><span class="line">ImportError: attempted relative import with no known parent package</span><br></pre></td></tr></table></figure>

<p>这是因为对应的文件中采用了相对引用就是类似 <code>from .style import StyleType</code> 的语法，我们可以通过在上一级目录下输入 <code>python -m rich.styled</code> 运行。注意命令没有 <code>.py</code> 后缀</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/yan-lei/p/7828871.html">cnlogs - Python学习者</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>import</tag>
        <tag>module</tag>
        <tag>package</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 优雅的换行</title>
    <url>/hexo/2020/07/08/Python-%E4%BC%98%E9%9B%85%E7%9A%84%E6%8D%A2%E8%A1%8C/</url>
    <content><![CDATA[<p>记录一下查了无数遍的换行方法备用，总结一下就是使用 ‘’ + \ + ‘’ 类似的语法做链接，只可使用 ‘xxxx\xxx’ 的话会出现空格</p>
<h2 id="无缝连接"><a href="#无缝连接" class="headerlink" title="无缝连接"></a>无缝连接</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;1111111&#x27;</span>\</span><br><span class="line">    <span class="string">&#x27;2222222&#x27;</span>\</span><br><span class="line">    <span class="string">&#x27;3333333&#x27;</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># &#x27;111111122222223333333&#x27;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;aaaaaaaaa&#x27;</span></span><br><span class="line">    <span class="string">&#x27;bbbbbbbbb&#x27;</span></span><br><span class="line">    <span class="string">&#x27;ccccccccc&#x27;</span>)</span><br><span class="line"><span class="comment"># aaaaaaaaabbbbbbbbbccccccccc</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;aaaaaaaaa&#x27;</span>\</span><br><span class="line">        <span class="string">&#x27;bbbbbbbbb&#x27;</span>\</span><br><span class="line">        <span class="string">&#x27;ccccccccc&#x27;</span>)</span><br><span class="line"><span class="comment"># aaaaaaaaabbbbbbbbbccccccccc</span></span><br></pre></td></tr></table></figure>

<h2 id="有缝连接"><a href="#有缝连接" class="headerlink" title="有缝连接"></a>有缝连接</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;&#x27;&#x27;11111111</span></span><br><span class="line"><span class="string">       22222222</span></span><br><span class="line"><span class="string">       33333333&#x27;&#x27;&#x27;</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># &#x27;11111111\n       22222222\n       33333333&#x27;</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;11111111\</span></span><br><span class="line"><span class="string">     22222222\</span></span><br><span class="line"><span class="string">     33333333&#x27;</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># &#x27;11111111     22222222     33333333&#x27;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;&#x27;&#x27;55555555555</span></span><br><span class="line"><span class="string">        66666666666</span></span><br><span class="line"><span class="string">        77777777777&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 55555555555</span></span><br><span class="line"><span class="comment">#                66666666666</span></span><br><span class="line"><span class="comment">#                77777777777</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 使用 json 序列化</title>
    <url>/hexo/2020/06/13/Python-%E4%BD%BF%E7%94%A8-json-%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="dump-Vs-dumps"><a href="#dump-Vs-dumps" class="headerlink" title="dump Vs dumps"></a>dump Vs dumps</h2><p>这两个函数都可以用来做序列化，唯一的区别是 dump 需要指定一个 io，比如打开的文件作为输出的地方，而 dumps 默认是以 stdout 做为输出端的，也就是打印在终端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">a = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jack&#x27;</span>&#125;</span><br><span class="line">json.dump(a)</span><br><span class="line"><span class="comment"># Out[6]: &#x27;&#123;&quot;name&quot;: &quot;jack&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json.dump([a, a], file)</span><br><span class="line"><span class="comment"># 当前目录下会生产名为 data.json 的文件，内容为 [&#123;&quot;name&quot;: &quot;jack&quot;&#125;, &#123;&quot;name&quot;: &quot;jack&quot;&#125;]</span></span><br></pre></td></tr></table></figure>

<h2 id="load-Vs-loads"><a href="#load-Vs-loads" class="headerlink" title="load Vs loads"></a>load Vs loads</h2><p>有了前面的基础，理解 load 和 loads 也是一个套路，一个直接从你指定的 string 加载，一个从你指定的文件加载</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = json.loads(<span class="string">&#x27;&#123;&quot;name&quot;: &quot;jack&quot;&#125;&#x27;</span>)</span><br><span class="line">ret, type(ret)</span><br><span class="line"><span class="comment"># Out[11]: (&#123;&#x27;name&#x27;: &#x27;jack&#x27;&#125;, dict)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;data.json&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    ret = json.load(file)</span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># [&#123;&#x27;name&#x27;: &#x27;jack&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;jack&#x27;&#125;]</span></span><br></pre></td></tr></table></figure>

<h2 id="支持中文"><a href="#支持中文" class="headerlink" title="支持中文"></a>支持中文</h2><p>写入文件是指定 encoding 和 ensure_ascii 参数，读取时指定 encoding 就可以了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">me = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;我&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;dump3.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json.dump(me, file, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;dump3.json&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    ret = json.load(file)</span><br><span class="line">    print(ret)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;我&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="序列化-Object"><a href="#序列化-Object" class="headerlink" title="序列化 Object"></a>序列化 Object</h2><p>序列化对象时可以在 dump(s) 的方法中指定一个自己的序列化规则类, 一种是通过 cls 参数，一种是通过 default 参数。不过有一个需要注意的点是，使用时并不指代整个对象的序列化逻辑，而是对那些不知道怎么序列化的部分给出逻辑，这块挺绕的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该例子中，Person 是自定义的类，所以调用 dumps 时，如果直接传入，会抛 exception: TypeError: Object of type Person is not JSON serializable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过指定 default 参数，给出转化规则</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PersonConvert</span>(<span class="params">person</span>):</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(person, Person):</span><br><span class="line">        <span class="keyword">return</span> person.__dict__</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError</span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;jack&#x27;</span>,<span class="number">30</span>)</span><br><span class="line">json.dumps(p, default=PersonConvert)</span><br><span class="line"><span class="comment"># Out[28]: &#x27;&#123;&quot;name&quot;: &quot;jack&quot;, &quot;age&quot;: 30&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以通过指定 cls 参数，给出转化规则</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonEncoder</span>(<span class="params">json.JSONEncoder</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(obj, Person):</span><br><span class="line">            <span class="keyword">return</span> obj.__dict__</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> json.JSONEncoder.default(self, obj)</span><br><span class="line"></span><br><span class="line">json.dumps(p, cls=PersonEncoder)</span><br><span class="line"><span class="comment"># Out[30]: &#x27;&#123;&quot;name&quot;: &quot;jack&quot;, &quot;age&quot;: 30&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果此时我们对 Person 做一下升级，添加一个 datetime 属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.create_date = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 那么之前的函数就不够用了，我们除了要处理 Person 的逻辑，还要处理 datetime 的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PersonConvertV2</span>(<span class="params">obj</span>):</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(obj, Person):</span><br><span class="line">        <span class="keyword">return</span> obj.__dict__</span><br><span class="line">    <span class="keyword">elif</span> isinstance(obj, datetime):</span><br><span class="line">        <span class="keyword">return</span> obj.timestamp()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError</span><br><span class="line"></span><br><span class="line">p2 = Person(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">31</span>)</span><br><span class="line">json.dumps(p2, default=PersonConvertV2)</span><br><span class="line"><span class="comment"># Out[46]: &#x27;&#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 31, &quot;create_date&quot;: 1592802400.657711&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网上有给出比较多经典的转化方式，在转化过程中会携带 class, module 的信息，为反序列化做准备</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">obj_to_dict</span>(<span class="params">obj</span>):</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(obj, Person):</span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        d[<span class="string">&#x27;__class__&#x27;</span>] = obj.__class__.__name__</span><br><span class="line">        d[<span class="string">&#x27;__module__&#x27;</span>] = obj.__module__</span><br><span class="line">        d.update(obj.__dict__)</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">        <span class="keyword">elif</span> isinstance(obj, datetime):</span><br><span class="line">            <span class="keyword">return</span> obj.timestamp()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError</span><br><span class="line"></span><br><span class="line">json.dumps(p2, default=obj_to_dict)</span><br><span class="line"><span class="comment"># Out[54]: &#x27;&#123;&quot;__class__&quot;: &quot;Person&quot;, &quot;__module__&quot;: &quot;__main__&quot;, &quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 31, &quot;create_date&quot;: 1592802400.657711&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>理解了 encode 的逻辑，decode 也差不多。不过逻辑稍微有点区别，他是在遇到 dict 的时候去做判断的。而且从他的输出看，应该是由内而外的进行解析的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">dict_to_obj</span>(<span class="params">d</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;level01&quot;</span> <span class="keyword">in</span> d:</span><br><span class="line">        print(<span class="string">&quot;l1: %s&quot;</span> % d)</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;level02&quot;</span> <span class="keyword">in</span> d:</span><br><span class="line">        print(<span class="string">&quot;l2: %s&quot;</span> %d)</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError</span><br><span class="line"></span><br><span class="line">json.loads(jstr, object_hook=dict_to_obj)</span><br><span class="line"><span class="comment"># l2: &#123;&#x27;level02&#x27;: &#x27;true&#x27;, &#x27;age&#x27;: 30&#125;</span></span><br><span class="line"><span class="comment"># l1: &#123;&#x27;level01&#x27;: &#x27;true&#x27;, &#x27;name&#x27;: &#x27;jack&#x27;, &#x27;info&#x27;: &#123;&#x27;level02&#x27;: &#x27;true&#x27;, &#x27;age&#x27;: 30&#125;&#125;     </span></span><br><span class="line"><span class="comment"># Out[13]: &#123;&#x27;level01&#x27;: &#x27;true&#x27;, &#x27;name&#x27;: &#x27;jack&#x27;, &#x27;info&#x27;: &#123;&#x27;level02&#x27;: &#x27;true&#x27;, &#x27;age&#x27;: 30&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dict_to_obj</span>(<span class="params">our_dict</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Function that takes in a dict and returns a custom object associated with the dict.</span></span><br><span class="line"><span class="string">    This function makes use of the &quot;__module__&quot; and &quot;__class__&quot; metadata in the dictionary</span></span><br><span class="line"><span class="string">    to know which object type to create.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;__class__&quot;</span> <span class="keyword">in</span> our_dict:</span><br><span class="line">        <span class="comment"># Pop ensures we remove metadata from the dict to leave only the instance arguments</span></span><br><span class="line">        class_name = our_dict.pop(<span class="string">&quot;__class__&quot;</span>)</span><br><span class="line">        <span class="comment"># Get the module name from the dict and import it</span></span><br><span class="line">        module_name = our_dict.pop(<span class="string">&quot;__module__&quot;</span>)</span><br><span class="line">        <span class="comment"># We use the built in __import__ function since the module name is not yet known at runtime</span></span><br><span class="line">        module = __import__(module_name)</span><br><span class="line">        <span class="comment"># Get the class from the module</span></span><br><span class="line">        class_ = getattr(module,class_name)</span><br><span class="line">        <span class="comment"># Use dictionary unpacking to initialize the object</span></span><br><span class="line">        obj = class_.__new__(class_)</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> our_dict.items():</span><br><span class="line">            <span class="keyword">if</span> key == <span class="string">&#x27;create_date&#x27;</span>:</span><br><span class="line">                value = datetime.fromtimestamp(value)</span><br><span class="line">            setattr(obj, key, value)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        obj = our_dict</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">jstr = <span class="string">&#x27;&#123;&quot;__class__&quot;: &quot;Person&quot;, &quot;__module__&quot;: &quot;__main__&quot;, &quot;name&quot;: &quot;Jack&quot;, &quot;age&quot;: 30, &quot;create_date&quot;: 1592805275.55762&#125;&#x27;</span></span><br><span class="line">jstr = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;jack&quot;, &quot;info&quot;:&#123;&quot;level02&quot;: &quot;true&quot;, &quot;age&quot;:30&#125;&#125;&#x27;</span></span><br><span class="line">o = json.loads(jstr, object_hook=dict_to_obj)</span><br><span class="line">print(o.create_date)</span><br><span class="line">print(type(o.create_date))</span><br><span class="line"><span class="comment"># 2020-06-22 13:54:35.557620</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;datetime.datetime&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="其他的一些收获"><a href="#其他的一些收获" class="headerlink" title="其他的一些收获"></a>其他的一些收获</h2><ul>
<li>在 class 的方法中可以有一个 toJSON 的方法快速得到序列化的字符串</li>
<li>在 class 的构造函数里可以有一个 dict 参数用来快速构造对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person04</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name=<span class="string">&#x27;&#x27;</span>, age=<span class="number">-1</span>, pairs=None</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        <span class="keyword">if</span> pairs:</span><br><span class="line">            self.__dict__ = pairs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toJSON</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> json.dumps(self,</span><br><span class="line">                            default=<span class="keyword">lambda</span> o: o.__dict__,</span><br><span class="line">                            sort_keys=<span class="literal">True</span>,</span><br><span class="line">                            indent=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 日期和时间</title>
    <url>/hexo/2020/06/18/Python-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<p>对 python 中涉及到时间的类库做一个大致的了解并收集一些常用的 sample。类库包括：time, date, datetime, timezone 等</p>
<h2 id="datetime-日期时间"><a href="#datetime-日期时间" class="headerlink" title="datetime 日期时间"></a>datetime 日期时间</h2><p>时间类型分为感知型和简单型，感知型包含 timezone 信息，简单型则没有这种意义。</p>
<ul>
<li>date 都是简单型的</li>
<li>time 和 datetime 可以是简单型也可以是感知型，通过 d.tzinfo 不等于 None 或者 d.tzinfo.utcoffset(d) 部位 None 来确定</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间</span></span><br><span class="line">datetime.now()</span><br><span class="line"><span class="comment"># Out[18]: datetime.datetime(2020, 6, 18, 17, 2, 48, 14847)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 感知型 now</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timezone</span><br><span class="line">dt =datetime.now(timezone.utc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime 得到 s</span></span><br><span class="line">dt.timestamp()</span><br><span class="line"><span class="comment"># Out[41]: 1592472504.59345</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s 转 datetime, ms 的话把时间除1000.0即可 1592472504.59345/1000.0</span></span><br><span class="line">d = datetime.fromtimestamp(<span class="number">1592472504.59345</span>)</span><br><span class="line"><span class="comment"># Out[43]: datetime.datetime(2020, 6, 18, 17, 28, 24, 593450)</span></span><br></pre></td></tr></table></figure>

<p>date, time, datetime 都支持 strftime(), 只有 datetime 支持 strptime()。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># strftime: string from time, 即格式化输出时间, 对象方法</span></span><br><span class="line">now = datetime.now()</span><br><span class="line">now.strftime(<span class="string">&#x27;[%y%m%d]-[%H:%M:%S]&#x27;</span>)</span><br><span class="line"><span class="comment"># Out[22]: &#x27;[200618]-[17:12:46]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># strptime: string parse to time, 即将字符串转化为时间, 类方法</span></span><br><span class="line">dt = datetime.strptime(<span class="string">&#x27;[200618]-[17:12:46]&#x27;</span>, <span class="string">&#x27;[%y%m%d]-[%H:%M:%S]&#x27;</span>)</span><br><span class="line"><span class="comment"># Out[24]: datetime.datetime(2020, 6, 18, 17, 12, 46)</span></span><br></pre></td></tr></table></figure>

<h2 id="deltatime-时间间隔"><a href="#deltatime-时间间隔" class="headerlink" title="deltatime 时间间隔"></a>deltatime 时间间隔</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">delta = timedelta(days=<span class="number">50</span>, seconds=<span class="number">27</span>, microseconds=<span class="number">10</span>, milliseconds=<span class="number">29000</span>, minutes=<span class="number">5</span>, hours=<span class="number">8</span>, weeks=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># Out[16]: datetime.timedelta(days=64, seconds=29156, microseconds=10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过 datetime 做计算得到</span></span><br><span class="line">now - dt</span><br><span class="line"><span class="comment"># Out[26]: datetime.timedelta(seconds=329, microseconds=894908)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 版本管理-pyenv</title>
    <url>/hexo/2020/07/29/Python-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86-pyenv/</url>
    <content><![CDATA[<p>poetry 推荐使用 pyenv 进行本地 python 的多版本管理，以前用过，但是也没什么特别的印象了，特此记录一下使用情况</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><a href="https://github.com/pyenv/pyenv">官方教程</a></li>
</ul>
<p>Win 平台不支持这个工具，残念。。。</p>
<p>通过 brew 安装, brew 加速的教程在另一篇教程里有提到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure>

<p>在 profile 中添加配置使能，我本地用的 zsh, 各版本的 shell 稍有区别，指定的文件不一样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval &quot;$(pyenv init -)&quot;\nfi&#x27;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>安装推荐的工具机，各种系统不一样</p>
<p>For MacOS, install Xcode Command Line Tools (xcode-select –install) and HomeBrew, then optional but best install</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install openssl readline sqlite3 xz zlib</span><br></pre></td></tr></table></figure>

<p>在系统中可以通过输入 <code>echo $(pyenv root)</code> 拿到目录地址</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>直接输入 <code>pyenv</code> 查看所有的 cmd 信息</p>
<h3 id="安装某个版本的-python"><a href="#安装某个版本的-python" class="headerlink" title="安装某个版本的 python"></a>安装某个版本的 python</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install 3.7.8</span><br></pre></td></tr></table></figure>

<p>如果没打全，他会给提示可用的版本，很人性化。安装的 python 版本会被放到 <code>~/.pyenv/versions/</code> 管理</p>
<h3 id="删除对应版本"><a href="#删除对应版本" class="headerlink" title="删除对应版本"></a>删除对应版本</h3><p><code>pyenv uninstall 3.7.8</code> 或直接去 versions 文件夹下删除</p>
<h3 id="显示可用版本"><a href="#显示可用版本" class="headerlink" title="显示可用版本"></a>显示可用版本</h3><p><code>pyenv versions</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv versions</span><br><span class="line">* system (<span class="built_in">set</span> by /Users/jack/.python-version)</span><br><span class="line">  3.6.5</span><br><span class="line">  3.7.8</span><br></pre></td></tr></table></figure>

<h3 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h3><p>多用 <code>pyenv version</code> 查看当前的环境版本信息</p>
<p>使用前的情况：系统自带 python 版本 2.7.16， pyenv 可用版本 3.6.5 和 3.7.8。此时 cmd 输入 <code>python -V</code> 给出版本 <code>2.7.16</code></p>
<p>全局切换版本 <code>pyenv gloabl 3.7.8</code>，他会将这个版本存放到 <code>.pyenv/version</code> 文件中，再打开终端查看版本，变为 <code>3.7.8</code>。</p>
<p><code>pyenv local 3.6.5</code> 可以指定 folder 下的 python 版本，他会将版本信息写入当前目录下的 <code>.python-version</code> 文件中</p>
<p>如果想要指定终端的 python 版本，可以用 <code>pyenv shell xxx</code>, 这个我到时没有亲测</p>
<p>作用范围和其编程语言一样，范围最小的那个生效 <code>shell &gt; local &gt; gloabl</code></p>
<h3 id="查看-python-路径"><a href="#查看-python-路径" class="headerlink" title="查看 python 路径"></a>查看 python 路径</h3><p><code>pyenv which python</code></p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>每次新安装版本，记得跑一下 <code>pyenv rehash</code> 更新信息</p>
<h2 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h2><p>pyenv install 下载失败, 报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> Jack &gt; ~ &gt; pyenv install 3.7.3</span><br><span class="line">python-build: use openssl@1.1 from homebrew</span><br><span class="line">python-build: use readline from homebrew</span><br><span class="line">Downloading Python-3.7.3.tar.xz...</span><br><span class="line">-&gt; https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz</span><br><span class="line">error: failed to download Python-3.7.3.tar.xz</span><br><span class="line"></span><br><span class="line">BUILD FAILED (OS X 10.15.6 using python-build 20180424)</span><br></pre></td></tr></table></figure>

<p>可以自行下载对应的 tar.xz 文件然后放到 pyenv 的 cache 文件夹下，pyenv install 的时候会取对应的安装包进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -P $(pyenv root)/cache https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz</span><br></pre></td></tr></table></figure>


<h2 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h2><ul>
<li><a href="http://einverne.github.io/post/2017/04/pyenv.html">参考</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pyenv</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 脚本高频报错</title>
    <url>/hexo/2020/06/12/Python-%E8%84%9A%E6%9C%AC%E9%AB%98%E9%A2%91%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h2 id="requests-lib-SSLError"><a href="#requests-lib-SSLError" class="headerlink" title="requests lib SSLError"></a>requests lib SSLError</h2><p>在使用 requests 发送 API 请求的时候，如果网站是 https 的，如果你没有对应的证书就会抛 SSLError, 示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers  = &#123;<span class="string">&#x27;Authorization&#x27;</span> : <span class="string">&#x27;token xxx&#x27;</span>&#125;</span><br><span class="line">url = <span class="string">&#x27;https://github.domain.com/api/v3/users/ixxx&#x27;</span></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; Error show as:</span></span><br><span class="line"><span class="string">SSLError: HTTPSConnectionPool(host=&#x27;github.wdf.sap.corp&#x27;, port=443): Max retries exceeded with url: /api/v3/users/i332399 (Caused by SSLError(SSLCertVerificationError(1, &#x27;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1076)&#x27;)))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [7]: resp = requests.get(url, headers=headers, verify=False)</span></span><br><span class="line"><span class="string">/Users/i306454/gitStore/mycommands/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py:851: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</span></span><br><span class="line"><span class="string">  InsecureRequestWarning)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>解决方案有两个</p>
<ol>
<li>跳过verify</li>
<li>指定证书</li>
</ol>
<blockquote>
<p>方案一</p>
</blockquote>
<p>requests.get(url, auth=(), verify=False)<br>但是，这种方式会在发完request之后抛warning，对于强迫症患者说简直不能忍。</p>
<blockquote>
<p>方案二</p>
</blockquote>
<p>在request中指定证书路径 <code>requests.get(url, auth=auth, verify=&#39;/Users/jack/Downloads/my.crt&#39;)</code></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 解析 PDF</title>
    <url>/hexo/2020/06/19/Python-%E8%A7%A3%E6%9E%90-PDF/</url>
    <content><![CDATA[<p>使用 python 解析 PDF 文件，提取文件中表格的数据。随便在网上找了一个 PDF 文件做样本。使用 <code>filetype:pdf 价格表格</code> 的到样本文件。</p>
<p>稍微检索了一下，当下貌似名为 camelot 的 python lib 很火，就用这个做实验吧</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这一步还挺复杂，需要安装挺多依赖，具体参考官方文档，这里只记录我本地环境的安装步骤</p>
<p>MacOS:</p>
<ol>
<li><code>brew install tcl-tk ghostscript</code>, 然后终端输入 <code>gs -version</code>, 在 python 命令行中输入 <code>import tkinter</code> 验证依赖是否安装成功</li>
<li><code>pip3 install camelot-py[cv] --user</code> 安装报错，是 zsh 的锅，切换回 bash 安装即可</li>
</ol>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>运行了一下官方给的例子，成功。但是我自己下载的中文 pdf 有问题，查了下，是说 camelot 基于 PyPDF2，然后这个 lib 是不支持处理中文字符的，不过可以通过修改对应 lib 的源码实现支持，网上有教程。不过我暂时只处理英文文档，就不纠结了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> camelot</span><br><span class="line">tables = camelot.read_pdf(<span class="string">&#x27;foo.pdf&#x27;</span>)</span><br><span class="line">tables[<span class="number">0</span>].df</span><br><span class="line"><span class="comment"># 输出表格，foo.pdf 在官方教程中有给下载链接</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 解析 csv 文件</title>
    <url>/hexo/2020/06/18/Python-%E8%A7%A3%E6%9E%90-csv-%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>有一个 csv 文件，其中有个 column 名为 ‘_raw’ 包含我们需要的信息，写一段脚本解析之</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">_raw 中文本为</span><br><span class="line"></span><br><span class="line">08:42:50,222 INFO  [RESTCallbackSubscriber] [customerId,customerId,null,null,SFAPI,null,null] [IrisSubscriber Container[queue_seb.subscriber.pillar.deactivateuser]1]Postback for event com.company.hermes.core.SFEvent=&#123;meta:Meta=&#123;priority:0,proxyId:&quot;null&quot;,serverName:&quot;null&quot;,topic:&quot;com.company.platform.mobile.deactivateuser&quot;,ptpName:null,companyId:&quot;customerId&quot;,eventId:&quot;a3b43584-3ceb-4760-9c01-699d635f4461&quot;,type:&quot;null&quot;,sourceArea:&quot;null&quot;,effectiveStartDate:&quot;null&quot;,publishedAt:&quot;2020-05-31 08:42:39&quot;,publishBy:&quot;SFAPI&quot;,publishServer:&quot;serverip&quot;,externalAllowed:false,filterParameters:&#123;&#123;companyId=customerId, userId=SFAPI, type=null, sourceArea=null, effectiveStartDate=null, publishedAt=1590914553205, publishedBy=SFAPI, externalAllowed=false, publishServer=serverip, priority=0, proxyId=null, serverName=null, topic=com.company.platform.mobile.deactivateuser, ptpName=null&#125;&#125;&#125;,body:&#123;&quot;companyId&quot;: &quot;customerId&quot;, &quot;inactiveUserId&quot;: [&quot;E_UUU_21934&quot;,&quot;E_UUU_21935&quot;]&#125;&#125; sent to https://domain/api/deactivate, (HTTP/1.1 200 OK)</span><br><span class="line"></span><br><span class="line">提取目标：publishedAt, publishedAt of filterParameters, inactiveUserId</span><br></pre></td></tr></table></figure>

<h2 id="Impl"><a href="#Impl" class="headerlink" title="Impl"></a>Impl</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拿到 csv 的 _raw 列数据</span></span><br><span class="line">context = []</span><br><span class="line">rows = []</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;dump_csv.csv&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">   contexts = csv.reader(csvfile)</span><br><span class="line">   <span class="comment"># 使用 reader = csv.DictReader(csvfile) 的话可以使用 column name 取值</span></span><br><span class="line">   <span class="comment"># 例如: reader[&#x27;companyId&#x27;], 不过缺点是要在 with loop 中处理完数据</span></span><br><span class="line">   rows = [row[<span class="number">16</span>] <span class="keyword">for</span> row <span class="keyword">in</span> contexts]</span><br><span class="line">   rows = [<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析 _raw 数据特性，决定使用正则匹配数据</span></span><br><span class="line"><span class="comment"># publishedAt:&quot;(.*?)&quot; 加 ? 表示 非贪婪</span></span><br><span class="line"><span class="comment"># publishedAt=(\d+)</span></span><br><span class="line"><span class="comment"># inactiveUserId&quot;: (\[.*?\])</span></span><br><span class="line"><span class="comment"># 以上表达式取 group 1 数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># re.findAll</span></span><br><span class="line"><span class="comment"># re.match() 从开头开始匹配</span></span><br><span class="line"><span class="comment"># re.search(reg, src) 匹配任意位置</span></span><br><span class="line"></span><br><span class="line">reg1 = <span class="string">&#x27;publishedAt:&quot;(.*?)&quot;&#x27;</span></span><br><span class="line">reg2 = <span class="string">&#x27;publishedAt=(\d+)&#x27;</span></span><br><span class="line">reg3 = <span class="string">&#x27;inactiveUserId&quot;: (\[.*?\])&#x27;</span></span><br><span class="line"></span><br><span class="line">rowlist = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    infolist = []</span><br><span class="line">    timestr01 = re.search(reg1, row).group(<span class="number">1</span>)</span><br><span class="line">    d1 = datetime.strptime(timestr01, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    infolist.append(d1)</span><br><span class="line"></span><br><span class="line">    timestr2 = int(re.search(reg2, row).group(<span class="number">1</span>))</span><br><span class="line">    d2 = datetime.fromtimestamp(timestr2/<span class="number">1000.0</span>)</span><br><span class="line">    infolist.append(d2)</span><br><span class="line"></span><br><span class="line">    users = re.search(reg3, row).group(<span class="number">1</span>)</span><br><span class="line">    ulist = eval(users) <span class="comment"># string 转化为 list</span></span><br><span class="line">    infolist.append(ulist)</span><br><span class="line">    rowlist.append(infolist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把数据根据时间先后排序</span></span><br><span class="line">sortedList = sorted(rowlist, key=<span class="keyword">lambda</span> sub: sub[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printList</span>(<span class="params">line</span>):</span></span><br><span class="line">    formatStr01 = <span class="string">&#x27;%y-%m-%d %H:%M:%S&#x27;</span></span><br><span class="line">    print(line[<span class="number">0</span>].strftime(formatStr01), end=<span class="string">&#x27; | &#x27;</span>)</span><br><span class="line">    print(<span class="string">&quot;%15f&quot;</span> % (line[<span class="number">1</span>].timestamp()), end=<span class="string">&#x27; | &#x27;</span>)</span><br><span class="line">    arrStr = str(line[<span class="number">2</span>][:<span class="number">5</span>]) + <span class="string">&quot;...&quot;</span> + str(len(line[<span class="number">2</span>])) <span class="keyword">if</span> len(line[<span class="number">2</span>]) &gt; <span class="number">5</span> <span class="keyword">else</span> str(line[<span class="number">2</span>])</span><br><span class="line">    print(arrStr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sub <span class="keyword">in</span> sortedList:</span><br><span class="line">    printList(sub)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>csv</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 会如何处理同名同路径的类</title>
    <url>/hexo/2020/08/07/Same-Name-Same-Path-In-Java/</url>
    <content><![CDATA[<p>问题记录：</p>
<p>项目由多个 repo 组成，当这些 repo 中存在相同路径，相同名称的类时，JVM 会怎么处理？</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索小技巧</title>
    <url>/hexo/2020/06/14/Search-Tips/</url>
    <content><![CDATA[<p>搜索引擎使用小技巧</p>
<ol>
<li><code>-</code> + 关键词：排除不想看到的关键词</li>
<li>“关键词加”：锁定关键词</li>
<li>site:域名 + 关键词， 在指定网站内搜索</li>
<li>filetype:文件格式 + 关键词</li>
<li>intitile: + 关键词，指定标题搜素</li>
<li>intext/allintext: + 关键词,两种指定范围搜索</li>
<li>以上技巧叠加使用</li>
</ol>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 shadowsocks client</title>
    <url>/hexo/2019/12/02/Shadowsocks-Client-Installation/</url>
    <content><![CDATA[<p>安装 shadowsocks 本地客户端记录</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>查看是否已经安装 python 和 pip, 这里用的是 python3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -v</span><br><span class="line">pip3 -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有安装运行</span></span><br><span class="line">sudo apt-get install python3</span><br><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure>

<p>配置 douban 源加速</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跳转到 $HOME 目录下</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line"><span class="comment"># 创建 .pip 目录</span></span><br><span class="line">mkdir .pip</span><br><span class="line"><span class="comment"># 创建 config 文件</span></span><br><span class="line">vim pip.conf</span><br><span class="line"><span class="comment"># 将如下内容写进 config 文件，保存退出</span></span><br><span class="line">[global]</span><br><span class="line">timeout = 60</span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br><span class="line">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure>

<p>安装 python shadowsocks 包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip3 install shadowsocks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果嫌 sudo 累赘，也可以用</span></span><br><span class="line">pip3 install --user shadowsocks</span><br></pre></td></tr></table></figure>

<p>安装完毕，配置本地 client 端，创建文件 <code>ssclient.json</code>（名字可以自选，不一定要这个），写入内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;server&quot;</span>:<span class="string">&quot;xxx.xxx.xxx.xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;server_port&quot;</span>:8989,</span><br><span class="line"><span class="string">&quot;local_address&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line"><span class="string">&quot;local_port&quot;</span>:1080,</span><br><span class="line"><span class="string">&quot;password&quot;</span>:<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;timeout&quot;</span>:300,</span><br><span class="line"><span class="string">&quot;method&quot;</span>:<span class="string">&quot;aes-256-cfb&quot;</span>,</span><br><span class="line"><span class="string">&quot;fast_open&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;workers&quot;</span>: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>端口信息根据实际情况修改，完毕后运行 <code>sslocal -c /path/to/ssclient.json</code>，报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jack@DESKTOP-9TGTFK1:~/ss$ sslocal  -c ssclient.json</span><br><span class="line">INFO: loading config from shadowsocks.json</span><br><span class="line">2019-12-02 21:02:09 INFO     loading libcrypto from libcrypto.so.1.1</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/usr/local/bin/sslocal&quot;</span>, line 11, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    load_entry_point(<span class="string">&#x27;shadowsocks==2.8.2&#x27;</span>, <span class="string">&#x27;console_scripts&#x27;</span>, <span class="string">&#x27;sslocal&#x27;</span>)()</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/local.py&quot;</span>, line 39, <span class="keyword">in</span> main</span><br><span class="line">    config = shell.get_config(True)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/shell.py&quot;</span>, line 262, <span class="keyword">in</span> get_config</span><br><span class="line">    check_config(config, is_local)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/shell.py&quot;</span>, line 124, <span class="keyword">in</span> check_config</span><br><span class="line">    encrypt.try_cipher(config[<span class="string">&#x27;password&#x27;</span>], config[<span class="string">&#x27;method&#x27;</span>])</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/encrypt.py&quot;</span>, line 44, <span class="keyword">in</span> try_cipher</span><br><span class="line">    Encryptor(key, method)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/encrypt.py&quot;</span>, line 83, <span class="keyword">in</span> __init__</span><br><span class="line">    random_string(self._method_info[1]))</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/encrypt.py&quot;</span>, line 109, <span class="keyword">in</span> get_cipher</span><br><span class="line">    <span class="built_in">return</span> m[2](method, key, iv, op)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/crypto/openssl.py&quot;</span>, line 76, <span class="keyword">in</span> __init__</span><br><span class="line">    load_openssl()</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.6/dist-packages/shadowsocks/crypto/openssl.py&quot;</span>, line 52, <span class="keyword">in</span> load_openssl</span><br><span class="line">    libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,)</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3.6/ctypes/__init__.py&quot;</span>, line 361, <span class="keyword">in</span> __getattr__</span><br><span class="line">    func = self.__getitem__(name)</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3.6/ctypes/__init__.py&quot;</span>, line 366, <span class="keyword">in</span> __getitem__</span><br><span class="line">    func = self._FuncPtr((name_or_ordinal, self))</span><br><span class="line">AttributeError: /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1: undefined symbol: EVP_CIPHER_CTX_cleanup</span><br><span class="line">jack@DESKTOP-9TGTFK1:~/ss$</span><br></pre></td></tr></table></figure>

<p>这是因为在openssl 1.1.0中废弃了 EVP_CIPHER_CTX_cleanup() 函数而引入了 EVE_CIPHER_CTX_reset() 函数，具体可以查看<a href="https://www.openssl.org/docs/man1.1.0/man3/EVP_CIPHER_CTX_reset.html">官方文档</a>, 修复如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在错误日志中找到 openssl.py 文件路径, 通过 vim 修改</span></span><br><span class="line">sudo vim /usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/shadowsocks/crypto/openssl.py</span><br><span class="line"><span class="comment"># 替换关键自</span></span><br><span class="line">:%s/cleanup/reset/</span><br><span class="line"><span class="comment"># 保存推出</span></span><br><span class="line">:x</span><br></pre></td></tr></table></figure>

<p>再运行 sslocal，成功</p>
<ul>
<li>MacOS 升级到 10.15 Catalina 之后就跑不起来了</li>
</ul>
<p>据说是应为升级之后，一些包比如 openssl, dyid 什么的不兼容了导致的，重新安装一下就行了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update &amp;&amp; brew upgrade</span><br><span class="line"></span><br><span class="line">brew uninstall --ignore-dependencies openssl; brew install https://github.com/tebelorg/Tump/releases/download/v1.0.0/openssl.rb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 pip install 不好使了，可以试试重装一下</span></span><br><span class="line">brew reinstall python</span><br></pre></td></tr></table></figure>

<p>然后在 <code>.zshrc</code> 里面添加配置 <code>export DYLD_LIBRARY_PATH=/usr/local/opt/openssl/lib:$DYLD_LIBRARY_PATH</code></p>
<h3 id="终端-Git-下载加速"><a href="#终端-Git-下载加速" class="headerlink" title="终端 Git 下载加速"></a>终端 Git 下载加速</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># config your &#96;~&#x2F;.gitconfig&#96; file</span><br><span class="line">[http]</span><br><span class="line">proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">sslVerify &#x3D; false</span><br><span class="line"></span><br><span class="line">[https]</span><br><span class="line">proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">  </span><br><span class="line"># or you can config it by typing terminal</span><br><span class="line">git config --global http.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">git config --global http.sslVerify false</span><br><span class="line"></span><br><span class="line"># turn off proxy, 开启后 git commit 会受影响</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>

<p>慢的话肯定是vps不给力，之前用 Vultr 的时候也是龟速，用了 google cloud, 芜湖，起飞！！！</p>
<h2 id="MacOS-安装-SS-客户端"><a href="#MacOS-安装-SS-客户端" class="headerlink" title="MacOS 安装 SS 客户端"></a>MacOS 安装 SS 客户端</h2><p>Git 上有一个客户端，用了下还挺香的 <a href="https://github.com/shadowsocks/ShadowsocksX-NG">ShadowsocksX-NG</a>。README 上有下载地址，直接下载后，解压将安装文件拖至 Application 文件夹下就行了。</p>
<p>配置注意点：</p>
<ol>
<li>Servers -&gt; Server Preference 添加自己的 SS 节点</li>
<li>Preferences 里面可以看到 proxy 设置，需要注意的是它为 Socks5 和 HTTP 设置了不同端口，Sock5 是 1086，HTTP 是 1087</li>
<li>安装了这个应用之后貌似就不需要单独配置终端 proxy 了， 可以通用，或者使用 global mode</li>
</ol>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>Splunk 快速入门</title>
    <url>/hexo/2020/09/10/Splunk-Quick-Guide/</url>
    <content><![CDATA[<h2 id="常用-Query"><a href="#常用-Query" class="headerlink" title="常用 Query"></a>常用 Query</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- event 出现的次数</span></span><br><span class="line">search=index | stats sum(linecount) as Total</span><br><span class="line"><span class="comment">-- or</span></span><br><span class="line">search=index | stats count as Total</span><br></pre></td></tr></table></figure>

<h3 id="查询-event-的日均量"><a href="#查询-event-的日均量" class="headerlink" title="查询 event 的日均量"></a>查询 event 的日均量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eventtype=<span class="string">&quot;searchAccountLocked&quot;</span> | timechart span=1d count | stats avg(count)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在此基础上，计算 7 天的平均值</span></span><br><span class="line">eventtype=<span class="string">&quot;searchAccountLocked&quot;</span> | timechart span=1d count | stats avg(count) as avgc ｜ <span class="built_in">eval</span> n=exact(1 * avgc)</span><br></pre></td></tr></table></figure>

<h2 id="通过-Regex-匹配得到目标百分比"><a href="#通过-Regex-匹配得到目标百分比" class="headerlink" title="通过 Regex 匹配得到目标百分比"></a>通过 Regex 匹配得到目标百分比</h2><ul>
<li><a href="https://community.splunk.com/t5/Splunk-Search/Get-percentage-of-matchin-to-all-events/td-p/39113">社区类似问题</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索全部 event, 通过 regex 匹配到目标，计算百分比</span></span><br><span class="line">UserChangeEvent MessageBox | stats count(<span class="built_in">eval</span>(match(field1, <span class="string">&quot;.*updatedFields\&quot;:\[&#123;\&quot;fieldName\&quot;:\&quot;jobCode\&quot;.*&quot;</span>))) as JCEvent count as total | <span class="built_in">eval</span> JC_pct=JCEvent/total*100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级版，计算多个百分比情况</span></span><br><span class="line"><span class="comment"># EMP_PCT 内容是空的 event 在所有 jobcode event 中的占比，和 jobcode 在所有 event 中的占比</span></span><br><span class="line">UserChangeEvent MessageBox | stats count(<span class="built_in">eval</span>(match(field1, <span class="string">&quot;.*updatedFields\&quot;:\[&#123;\&quot;fieldName\&quot;:\&quot;jobCode\&quot;.*&quot;</span>))) as totalJCEvent count(<span class="built_in">eval</span>(match(field1, <span class="string">&quot;.*updatedFields\&quot;:\[&#123;\&quot;fieldName\&quot;:\&quot;jobCode\&quot;,\&quot;fieldType\&quot;:\&quot;java.lang.String\&quot;,\&quot;afterValue\&quot;:\&quot;\&quot;&#125;\].*&quot;</span>))) as emptyEvent count as total | <span class="built_in">eval</span> EMP_PCT=emptyEvent/totalJCEvent*100, JC_PCT=totalJCEvent/total*100</span><br></pre></td></tr></table></figure>

<h2 id="取两位小数"><a href="#取两位小数" class="headerlink" title="取两位小数"></a>取两位小数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">| 7xAVG=round((7*total/1), 2)</span><br></pre></td></tr></table></figure>

<h2 id="通过正则创建新-field"><a href="#通过正则创建新-field" class="headerlink" title="通过正则创建新 field"></a>通过正则创建新 field</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选出结果集，从输出信息中匹配 &#x27;Company: &#x27; 开头 &#x27;, total CommonField&#x27; 结尾的部分并命名为 cname 统计出现次数</span></span><br><span class="line"><span class="comment"># _raw 表示 record 内容</span></span><br><span class="line">search condition | rex field=_raw <span class="string">&quot;Company: (?&lt;cname&gt;.*), total CommonField&quot;</span> | stats count by cname</span><br></pre></td></tr></table></figure>

<h2 id="stats-和-eval-的区别"><a href="#stats-和-eval-的区别" class="headerlink" title="stats 和 eval 的区别"></a>stats 和 eval 的区别</h2><p>stats 是对已经有的 field 的删选，而 eval 是通过已有的 field 计算出新的 field 加到结果集中进行删选，等价于新增 field</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删选 event, 新建一个 field 名叫 is_prod, 当 host 匹配 pattern 时赋值 yes_prod</span></span><br><span class="line">search event | <span class="built_in">eval</span> is_prod=<span class="keyword">if</span>(like(host, <span class="string">&quot;pc%&quot;</span>), <span class="string">&quot;yes_prod&quot;</span>, <span class="string">&quot;not_prod&quot;</span>) | stats count by is_prod</span><br></pre></td></tr></table></figure>

<p>其中 eval 还支持多种删选条件，可塑性好高</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计各环境的 event 数量并统计比例</span></span><br><span class="line">search event | <span class="built_in">eval</span> env=<span class="keyword">case</span>(like(host, <span class="string">&quot;pc%&quot;</span>), <span class="string">&quot;prod&quot;</span>, like(host, <span class="string">&quot;sc%&quot;</span>), <span class="string">&quot;prov&quot;</span>, like(host, <span class="string">&quot;*&quot;</span>), <span class="string">&quot;others&quot;</span>) | stats count by env</span><br></pre></td></tr></table></figure>

<h2 id="Splunk-SDK"><a href="#Splunk-SDK" class="headerlink" title="Splunk SDK"></a>Splunk SDK</h2><p>尝试了 python 版本的 SDK，香！</p>
<p>参考 <a href="https://dev.splunk.com/enterprise/docs/python/sdk-python/examplespython/commandline">官方文档</a> 下载依赖，在本地配置 <code>.splunkrc</code> 文件写入连接信息方便调用。第一次用的时候密码配错了，还以为内网不可用，需要用 vlab，再测试的时候发现了这个问题。总的来说很可以。</p>
<p>Steps:</p>
<ol>
<li>clone git 开源项目 <a href="https://github.com/splunk/splunk-sdk-python">Splunk SDK Python</a></li>
<li>用户目录下创建 <code>.splunkrc</code> 文件</li>
<li>cd 到 <code>splunk-sdk-python/examples</code> folder 下，运行命令 <code>python search.py &quot;search * | head 10&quot; --earliest_time=&quot;2011-08-10T17:15:00.000-07:00&quot; --rf=&quot;desc&quot; --output_mode=json</code> 可以看到对应时间戳下的前 10 条记录</li>
</ol>
<p><code>.splunkrc</code> 文件模板</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Splunk host (default: localhost)</span><br><span class="line">host&#x3D;xxx.xxx.xxx</span><br><span class="line"># Splunk admin port (default: 8089)</span><br><span class="line">port&#x3D;8089</span><br><span class="line"># Splunk username</span><br><span class="line">username&#x3D;jack</span><br><span class="line"># Splunk password</span><br><span class="line">password&#x3D;mypwd</span><br><span class="line"># Access scheme (default: https)</span><br><span class="line">scheme&#x3D;https</span><br><span class="line"># Your version of Splunk (default: 5.0)</span><br><span class="line">version&#x3D;7.1.2</span><br></pre></td></tr></table></figure>

<h2 id="三个小例子快速入门"><a href="#三个小例子快速入门" class="headerlink" title="三个小例子快速入门"></a>三个小例子快速入门</h2><h3 id="搜索-event-并通过饼图展示"><a href="#搜索-event-并通过饼图展示" class="headerlink" title="搜索 event 并通过饼图展示"></a>搜索 event 并通过饼图展示</h3><ol>
<li>输入时间节点和关键词：<code>MessageBox topic=com.successfactors.usermanagement.event.UserChangeEvent | stats count by servername</code></li>
<li>选择可视化 tab</li>
<li>选择饼图</li>
</ol>
<p><img src="pie.png" alt="饼图"></p>
<h3 id="显示每天的-event-量"><a href="#显示每天的-event-量" class="headerlink" title="显示每天的 event 量"></a>显示每天的 event 量</h3><ol>
<li>选择时间</li>
<li>输入搜索条件: <code>MessageBox topic=com.successfactors.usermanagement.event.UserChangeEvent | timechart count span=1d</code></li>
<li>选择图形</li>
</ol>
<p><img src="bar.png" alt="柱状图"></p>
<h3 id="通过正则删选-event-并计算百分比"><a href="#通过正则删选-event-并计算百分比" class="headerlink" title="通过正则删选 event 并计算百分比"></a>通过正则删选 event 并计算百分比</h3><ol>
<li>选择时间</li>
<li>输入删选条件: <code>MessageBox topic=com.successfactors.usermanagement.event.UserChangeEvent | stats count as total count(eval(match(field1, &quot;companyId&quot;))) as containsCID | eval CID_PCT=round(containsCID/total*100, 2)</code></li>
</ol>
<p><img src="regex.png" alt="百分比表"></p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>splunk</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring5 note</title>
    <url>/hexo/2020/09/08/Spring5-note/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1WE411d7Dv">B 站狂神 Spring5 教程笔记</a></p>
<h2 id="Spring-基本概念"><a href="#Spring-基本概念" class="headerlink" title="Spring 基本概念"></a>Spring 基本概念</h2><p>七大组成</p>
<ol>
<li>AOP</li>
<li>ORM</li>
<li>Web</li>
<li>DAO</li>
<li>Context</li>
<li>Web MVC</li>
<li>Core</li>
</ol>
<ul>
<li>Spring Boot<ul>
<li>快速开发脚手架</li>
<li>快速开发单个微服务</li>
<li>约定大于配置</li>
</ul>
</li>
<li>Spring Cloud<ul>
<li>基于 SpringBoot 实现的</li>
</ul>
</li>
</ul>
<p>弊端：发展太久，违背原来的理念。配置繁琐，人称 ‘配置地狱’</p>
<h2 id="IoC-理论推导-（Inversion-of-Control）"><a href="#IoC-理论推导-（Inversion-of-Control）" class="headerlink" title="IoC 理论推导 （Inversion of Control）"></a>IoC 理论推导 （Inversion of Control）</h2><p>原来的实现</p>
<ol>
<li>UserDao 接口</li>
<li>UserDaoImpl 实现类</li>
<li>UserService 业务接口</li>
<li>UserServiceImpl 业务实现类</li>
</ol>
<p>用户的需求可能影响到原来的代码，我们需要根据用户需求修改源代码（修改 UserDaoImpl 中的 Dao 生成）</p>
<p>通过 set 方法主入后，实现被动接受对象，需求由外部决定。不在管理对象创建，专注于扩展业务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 set 动态注入实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IoC-的本质"><a href="#IoC-的本质" class="headerlink" title="IoC 的本质"></a>IoC 的本质</h2><p>控制反转是一种<strong>设计思想</strong>，DI（Dependency Injection） 是 IoC 的一种实现方式，将对象的创建交给第三方，获取对象的方式的反转。</p>
<p>Spring 是一种实现控制反转的 IoC 容器，常见的有两种对象控制方式，XML 和 注解。XML 配置 Bean, 定义和实现是分离的。注解方式则把两者结合在了一起，从而达到零配置。</p>
<p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-metadata">Spring Framework 官方文档</a></p>
<h2 id="IoC创建对象的方式"><a href="#IoC创建对象的方式" class="headerlink" title="IoC创建对象的方式"></a>IoC创建对象的方式</h2><ol>
<li>默认使用无参构造创建对象</li>
<li>通过 constructor-arg 标签实现带参构造器功能</li>
</ol>
<p>在 xml 加载完后，配置的对象就已经被创建了</p>
<h2 id="Spring-配置说明"><a href="#Spring-配置说明" class="headerlink" title="Spring 配置说明"></a>Spring 配置说明</h2><ol>
<li>alias 别名，和 bean 的 name 属性重复，而且 name 更灵活</li>
<li>bean 对象生成配置</li>
<li>import 合并多个 xml 配置文件</li>
</ol>
<h2 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI - 依赖注入"></a>DI - 依赖注入</h2><ol>
<li>构造器注入</li>
<li>Set方式注入 - 即依赖注入</li>
<li>其他注入</li>
</ol>
<p>依赖： bean 对象的创建依赖容器<br>注入： bean 对象的所有属性由容器来注入</p>
<h2 id="P-C命名空间注入"><a href="#P-C命名空间注入" class="headerlink" title="P/C命名空间注入"></a>P/C命名空间注入</h2><p>在 xml 中导入约束即可使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line"> xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure>

<p>P 可以扩展属性注入，一个 tag 解决，不用嵌套xml了</p>
<p>C 可以扩展构造器</p>
<h2 id="Bean-的-作用域-scope"><a href="#Bean-的-作用域-scope" class="headerlink" title="Bean 的 作用域(scope)"></a>Bean 的 作用域(scope)</h2><ol>
<li>singleton - 默认域</li>
<li>prototype - 每次取 bean 都会产生新对象</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.something.DefaultAccountService&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.something.DefaultAccountService&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Bean-的自动装配"><a href="#Bean-的自动装配" class="headerlink" title="Bean 的自动装配"></a>Bean 的自动装配</h2><ul>
<li>自动装配是 Spring 满足 bean 依赖的一种方式</li>
<li>Spring 在上下文中自动寻找，并自动给 bean 装配属性</li>
</ul>
<p>Spring 三种装配方式：</p>
<ol>
<li>xml</li>
<li>注解</li>
<li>隐式的自动装配 bean</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>TestNG Jmockit 使用案例</title>
    <url>/hexo/2020/07/07/TestNG-Jmockit-Examples/</url>
    <content><![CDATA[<p>记录一下工作中常用到的 TestNG, Jmockit 使用案例</p>
<h2 id="DataProvider"><a href="#DataProvider" class="headerlink" title="DataProvider"></a>DataProvider</h2><h3 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DataProvider(name = &quot;singleParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object[][] singleParam() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">            &#123;<span class="string">&quot;Jerry&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;Tom&quot;</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test(dataProvider = &quot;singleParam&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">single_data</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Get username: &quot;</span> + username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DataProvider(name = &quot;multiParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object[][] multiParam() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">            &#123;<span class="string">&quot;Jerry&quot;</span>, <span class="number">12</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;Tom&quot;</span>, <span class="number">11</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test(dataProvider = &quot;multiParam&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">single_data</span><span class="params">(String username, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Get username: &quot;</span> + username + <span class="string">&quot;, age: &quot;</span> + age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mocked-作用域"><a href="#Mocked-作用域" class="headerlink" title="Mocked 作用域"></a>Mocked 作用域</h2><p>如果是 global 参数，那么所有 class 内的 case 都会有影响，如果是 method level 的那只有对应的 case 有影响</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> String name = <span class="string">&quot;unnamed&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mocked</span> Teacher teacher;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; System.out.println(teacher.name); &#125; <span class="comment">//output: null</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span> <span class="params">()</span> </span>&#123; System.out.println(<span class="keyword">new</span> Teacher(<span class="string">&quot;Jack&quot;</span>).name); &#125; <span class="comment">//output: null</span></span><br></pre></td></tr></table></figure>

<p>如果做 method level 的 mock, 只作用 case 本身</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="meta">@Mocked</span> Teacher teacher)</span> </span>&#123; System.out.println(teacher.name); &#125; <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span> <span class="params">()</span> </span>&#123; System.out.println(<span class="keyword">new</span> Teacher(<span class="string">&quot;Jack&quot;</span>).name); &#125; <span class="comment">// Jack</span></span><br></pre></td></tr></table></figure>

<h2 id="Jmockit-和-TestNG-兼容性问题"><a href="#Jmockit-和-TestNG-兼容性问题" class="headerlink" title="Jmockit 和 TestNG 兼容性问题"></a>Jmockit 和 TestNG 兼容性问题</h2><p>TestNG 6.9.11+ 和 Jmockit 有兼容性问题，将 @Mocked 通过参数方式传入会抛 Exception</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompatibleTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="meta">@Mocked</span> UserBean userBean)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">// org.testng.internal.reflect.MethodMatcherException:</span></span><br><span class="line"><span class="comment">// Data provider mismatch</span></span><br><span class="line"><span class="comment">// Method: test([Parameter&#123;index=0, type=com.objects.UserBean, declaredAnnotations=[@mockit.Mocked(stubOutClassInitialization=false)]&#125;])</span></span><br><span class="line"><span class="comment">// Arguments: []</span></span><br></pre></td></tr></table></figure>

<p>修复方法：将 @Mocked 部分提取改为 global 的变量即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompatibleTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Mocked</span> UserBean userBean;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我还想保留这种 case level 的使用，需要做点什么？这种 case level 的使用在作用域控制上更好</p>
<p>TODO</p>
<h2 id="Mock-不带默认构造函数的对象"><a href="#Mock-不带默认构造函数的对象" class="headerlink" title="Mock 不带默认构造函数的对象"></a>Mock 不带默认构造函数的对象</h2><p>构建一个测试对象时，如果他没有模式构造函数的话需要为参数声明 @Injectable</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompatibleTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Tested</span> Dog dog;</span><br><span class="line">  <span class="meta">@Injectable</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; dog.getName(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没加的话抛出异常</span></span><br><span class="line"><span class="comment">// java.lang.IllegalArgumentException: No constructor in tested class that can be satisfied by available injectables</span></span><br><span class="line"><span class="comment">//   public com.successfactors.legacy.service.provisioning.impl.Dog(String)</span></span><br><span class="line"><span class="comment">//     disregarded because no injectable was found for parameter &quot;name&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Mockup-工厂方法"><a href="#Mockup-工厂方法" class="headerlink" title="Mockup 工厂方法"></a>Mockup 工厂方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* new object + mockup, new object 发生在 mock 之后，所以 mock 生效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mock_factory_using_mockup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> MockUp&lt;NPCFactory&gt;() &#123;</span><br><span class="line">        <span class="meta">@Mock</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">getNPC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">&quot;mock&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ClassRoom classRoom = <span class="keyword">new</span> ClassRoom();</span><br><span class="line">    assertEquals(<span class="string">&quot;mock&quot;</span>, classRoom.getNPCName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassRoom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Person npc = NPCFactory.getNPC();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNPCName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> npc.getName(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用-Deencapsulation-设置私有变量，高版本已经-deprecated"><a href="#使用-Deencapsulation-设置私有变量，高版本已经-deprecated" class="headerlink" title="使用 Deencapsulation 设置私有变量，高版本已经 deprecated"></a>使用 Deencapsulation 设置私有变量，高版本已经 deprecated</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* new object + expectations, new object 发生在 mock 之后，所以 mock 生效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mock_factory_using_deencapsulation</span><span class="params">(<span class="meta">@Mocked</span> <span class="keyword">final</span> Person person)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Expectations() &#123;&#123;</span><br><span class="line">        person.getName();</span><br><span class="line">        result = <span class="string">&quot;deenMock&quot;</span>;</span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    Deencapsulation.setField(room, <span class="string">&quot;npc&quot;</span>, person);</span><br><span class="line">    assertEquals(<span class="string">&quot;deenMock&quot;</span>, room.getNPCName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="通过-Expectations-case-level-mock-静态方法"><a href="#通过-Expectations-case-level-mock-静态方法" class="headerlink" title="通过 Expectations case level mock 静态方法"></a>通过 Expectations case level mock 静态方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* new object + expectations, new object 发生在 mock 之后，所以 mock 生效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mock_factory_using_expectations</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Expectations(NPCFactory.class) &#123;&#123;</span><br><span class="line">    NPCFactory.getNPC();</span><br><span class="line">    result = <span class="keyword">new</span> Person(<span class="string">&quot;expMock&quot;</span>, <span class="number">2</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line">ClassRoom classRoom = <span class="keyword">new</span> ClassRoom();</span><br><span class="line">assertEquals(<span class="string">&quot;expMock&quot;</span>, classRoom.getNPCName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="部分-mock-PartialMock"><a href="#部分-mock-PartialMock" class="headerlink" title="部分 mock/PartialMock"></a>部分 mock/PartialMock</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Tested</span> Person person;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">person_name_jack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Expectations(person) &#123;&#123;</span><br><span class="line">        person.getName();</span><br><span class="line">        result = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="string">&quot;jack&quot;</span>, person.getName());</span><br><span class="line">    assertEquals(<span class="number">0</span>, person.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>partial 对非修饰类型有效吗？有效</p>
<p><code>new Expectations(ClassA.class)</code> 会对这个 class 的所有实例生效，<code>new Expectations(instance)</code> 则只会对当前这个 instance 起作用，范围更精确</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>testng</tag>
        <tag>jmockit</tag>
      </tags>
  </entry>
  <entry>
    <title>访问者模式</title>
    <url>/hexo/2020/09/09/The-Visitor-Pattern/</url>
    <content><![CDATA[<p>GoF 定义: Allows for one or more operation to be applied to a set of objects at runtime, decoupling the operations from the object structure. </p>
<p>行为模式之一，目的是将<strong>行为</strong>和<strong>对象</strong>分开。</p>
<p>缺点：<strong>每增</strong>加一种支持的 object，你就必须在 visitor 及其实现类中添加新的方法支持这个改动。</p>
<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>被访问者就是上文中的 object，他持有数据，我们想把他和数据运算分离，保持起独立性</p>
<p>访问者代表着 operations，通过它可以实现数据运算</p>
<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p>TODO</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="From-DZone"><a href="#From-DZone" class="headerlink" title="From DZone"></a>From DZone</h3><ul>
<li><a href="https://dzone.com/articles/design-patterns-visitor">DZone - Visitor Pattern</a></li>
</ul>
<p>抽象一个邮寄业务，计算购物车中所有的物件总的邮费。每样物件都有自己的属性，比如价格，重量之类的。我们将邮费计算的规则单独封装在 Visitor 中，在物件类中通过调用 accept 实现计算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代表 object 的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 accept 的实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price = <span class="number">8.0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> weight = <span class="number">3.2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// visitor 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Book book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Shoes shoes)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// visitor 实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostageVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> totalPostageForCart;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// rule to calculate book postage cost</span></span><br><span class="line">        <span class="comment">// if price over 10, free postage.</span></span><br><span class="line">        <span class="keyword">if</span>(book.getPrice() &lt; <span class="number">10.0</span>) &#123;</span><br><span class="line">            totalPostageForCart += book.getWeight() * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Shoes shoes)</span> </span>&#123; <span class="comment">//TODO &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalPostageForCart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.totalPostageForCart;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        Shoes shoes = <span class="keyword">new</span> Shoes();</span><br><span class="line">        PostageVisitor postageVisitor = <span class="keyword">new</span> PostageVisitor();</span><br><span class="line"></span><br><span class="line">        book.accept(postageVisitor);</span><br><span class="line">        shoes.accept(postageVisitor);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Total cost: &quot;</span> + postageVisitor.getTotalPostageForCart());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="From-Refactoring-Guru"><a href="#From-Refactoring-Guru" class="headerlink" title="From Refactoring Guru"></a>From Refactoring Guru</h3><ul>
<li><a href="https://refactoringguru.cn/design-patterns/visitor/java/example">重构大师</a></li>
</ul>
<p>根据定义的图形打印信息到 XML 文件中，这个例子本质上和前一个没什么区别，但是他提供了组合类型的 object 支持，并且输出 xml, 还有 format 都让我眼前一亮。反正感觉很赞！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义持有 accept 的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dot</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dot</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// move shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// draw shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.visitDot(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getter + setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义组合类型的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompoundShape</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Shape&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CompoundShape</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// move shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// draw shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.visitCompoundGraphic(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Shape shape)</span> </span>&#123;</span><br><span class="line">        children.add(shape);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 visitor 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">visitDot</span><span class="params">(Dot dot)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">visitCircle</span><span class="params">(Circle circle)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">visitRectangle</span><span class="params">(Rectangle rectangle)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">visitCompoundGraphic</span><span class="params">(CompoundShape cg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// visitor 实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLExportVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">export</span><span class="params">(Shape... args)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : args) &#123;</span><br><span class="line">            sb.append(shape.accept(<span class="keyword">this</span>)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">visitDot</span><span class="params">(Dot d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;dot&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;id&gt;&quot;</span> + d.getId() + <span class="string">&quot;&lt;/id&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;x&gt;&quot;</span> + d.getX() + <span class="string">&quot;&lt;/x&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;y&gt;&quot;</span> + d.getY() + <span class="string">&quot;&lt;/y&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/dot&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">visitCompoundGraphic</span><span class="params">(CompoundShape cg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;compound_graphic&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;   &lt;id&gt;&quot;</span> + cg.getId() + <span class="string">&quot;&lt;/id&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                _visitCompoundGraphic(cg) +</span><br><span class="line">                <span class="string">&quot;&lt;/compound_graphic&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">_visitCompoundGraphic</span><span class="params">(CompoundShape cg)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : cg.children) &#123;</span><br><span class="line">            String obj = shape.accept(<span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">// Proper indentation for sub-objects.</span></span><br><span class="line">            obj = <span class="string">&quot;    &quot;</span> + obj.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;\n    &quot;</span>) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            sb.append(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dot dot = <span class="keyword">new</span> Dot(<span class="number">1</span>, <span class="number">10</span>, <span class="number">55</span>);</span><br><span class="line">        Circle circle = <span class="keyword">new</span> Circle(<span class="number">2</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">10</span>);</span><br><span class="line">        Rectangle rectangle = <span class="keyword">new</span> Rectangle(<span class="number">3</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        CompoundShape compoundShape = <span class="keyword">new</span> CompoundShape(<span class="number">4</span>);</span><br><span class="line">        compoundShape.add(dot);</span><br><span class="line">        compoundShape.add(circle);</span><br><span class="line">        compoundShape.add(rectangle);</span><br><span class="line"></span><br><span class="line">        CompoundShape c = <span class="keyword">new</span> CompoundShape(<span class="number">5</span>);</span><br><span class="line">        c.add(dot);</span><br><span class="line">        compoundShape.add(c);</span><br><span class="line"></span><br><span class="line">        export(circle, compoundShape);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">export</span><span class="params">(Shape... shapes)</span> </span>&#123;</span><br><span class="line">        XMLExportVisitor exportVisitor = <span class="keyword">new</span> XMLExportVisitor();</span><br><span class="line">        System.out.println(exportVisitor.export(shapes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 小贴士</title>
    <url>/hexo/2019/12/14/VSCode%20%E5%B0%8F%E8%B4%B4%E5%A3%AB/</url>
    <content><![CDATA[<p>记录一些 VSCode 常用快捷键和使用技巧，提高工作效率 (´▽｀)</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li>跳转到定义：CMD + 键盘单击</li>
<li>从定义返回：Ctr + _ 或者  Option + CMD + 方向键</li>
</ul>
<h2 id="很酷的操作"><a href="#很酷的操作" class="headerlink" title="很酷的操作"></a>很酷的操作</h2><blockquote>
<p>批量修改字符串，比如第 1，3，5 行 ‘est’ 关键字前添加 ‘T’, 即多光标操作</p>
</blockquote>
<ol>
<li><code>option + 鼠标左键</code> 自定义操作锚点</li>
<li><code>cmd + d</code> 向下选中相同的部分</li>
<li>选中行 <code>shift + option + i</code> 统一相对为止操作</li>
</ol>
<ul>
<li><a href="https://geek-docs.com/vscode/vscode-tutorials/vs-code-multi-cursor.html">很棒的 VSCode 文档</a></li>
</ul>
<blockquote>
<p>在 VSCode 中复制代码并黏贴到 Outlook 等客户端时，会把背景颜色也黏贴过去，可以通过如下设置避免</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Preference -&gt; settings, 搜索关键字 editor.copyWithSyntaxHighlighting 然后 disable 就行了</span><br></pre></td></tr></table></figure>

<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul>
<li>Ascii Tree Generator: 快速生产 Ascii 类型的目录树，在写文档的时候很游泳，喜欢 (´▽｀)</li>
<li>Markdown All in One: 他的 format 功能简直太赞了！</li>
<li>VSCode Icons: 为目录树上中的文件添加类型图标</li>
<li>Bracket Pair Colorizer: 括号色彩标识</li>
</ul>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>插件</tag>
        <tag>快捷键</tag>
        <tag>vscode</tag>
        <tag>小知识</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode setup python 环境</title>
    <url>/hexo/2020/06/12/VSCode-setup-python-%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>VSCode setup python 独立运行环境</p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ol>
<li>安装 pipenv <code>pip install pipenv --user</code></li>
<li>创建独立环境 <code>pipenv shell</code>, 还可以通过 <code>pipenv --three/two</code> 指定 python 版本</li>
<li>修改 pipfile, 使用国内源加速</li>
<li>安装依赖 <code>pipenv install pdfminer.six</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[source]]</span><br><span class="line">name &#x3D; &quot;pypi&quot;</span><br><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&quot;</span><br><span class="line">verify_ssl &#x3D; true</span><br></pre></td></tr></table></figure>

<p>查看 VSCode 左下角的运行环境是不是你新建的那个，不是的话 <code>pipenv --venv</code> 查看新建 venv 路径， <code>Ctrl + Shift + p</code> 搜索 <code>python: select interpreter</code> 选择你新建的那个 env</p>
<h2 id="reload-module-after-update"><a href="#reload-module-after-update" class="headerlink" title="reload module after update"></a>reload module after update</h2><p>如果某些方法正在进行中，可能频繁修改，在 ipython 中调试的时候可以用 reload 来重新加载，也可以指定 ipython 到自动重加载模式 <a href="https://ipython.org/ipython-doc/stable/config/extensions/autoreload.html">autoreload mode</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">importlib.reload(PDFParser)</span><br></pre></td></tr></table></figure>

<h2 id="Debug-Click-command"><a href="#Debug-Click-command" class="headerlink" title="Debug Click command"></a>Debug Click command</h2><p>测试代码，接收 count, name 参数并在终端输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(&#x27;--count&#x27;, default=1, help=&#x27;Number of greetings.&#x27;)</span></span><br><span class="line"><span class="meta">@click.option(&#x27;--name&#x27;, prompt=&#x27;Your name&#x27;,</span></span><br><span class="line">              help=<span class="string">&#x27;The person to greet.&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">count, name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simple program that greets NAME for a total of COUNT times.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(count):</span><br><span class="line">        click.echo(<span class="string">&#x27;Hello %s!&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    hello()</span><br></pre></td></tr></table></figure>

<p>配置 launch.json 运行文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;console&quot;</span>: <span class="string">&quot;integratedTerminal&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;--count&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;--name&quot;</span>, <span class="string">&quot;jaaack&quot;</span></span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击菜单栏的 debug 按钮，选择配置的 ‘click’ run config，点击这个配置<strong>左边</strong>的运行按钮，直接运行即可。需要注意的点：</p>
<ol>
<li>别点右上角那个，那个是直接运行当前文件的，不会接收配置的参数！！</li>
<li>当断点生效时，VSCode 还提供了一个 DEBUG CONSOLE 来给你操作运行时的变量，真是太酷了</li>
<li>如果你想要输入多行，使用 <code>Shift + Enter</code> 实现换行</li>
</ol>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>当你打印 Hello World 的时候到底发生了什么？</title>
    <url>/hexo/2020/08/24/What-Happend-When-You-Print-Hello-World/</url>
    <content><![CDATA[<p>一个最简单的例子，当我们在 IDE 中写入 Hello World 代码，并右键运行后，控制台会打印出来 <code>Hello World!</code> 的字符串，那么这中间到底发生了什么？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    String name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hello test = <span class="keyword">new</span> Hello();</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello &quot;</span> + test.name);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写入 IDE 里的代码都是存到 <code>.java</code> 文件中的，在保存后 IDE 会将它编译为 <code>.class</code> 文件。这个文件也叫字节码文件，有自己的一套规则。之后当我们运行这个字节码文件时，一个 JVM 虚拟机被启动，解析这个文件，将文件中的各种变量，方法分配到虚拟机的各功能区。运行代码中的打印逻辑，并输出到终端。</p>
<h2 id="java-gt-class"><a href="#java-gt-class" class="headerlink" title="java -&gt; class"></a>java -&gt; class</h2><p>从 java 文件到 class 的功能可以简单概括为 javac 命令的功能。其中主要涉及到编译器的相关只是，可以参考 编译原理 加深了解。简单概括步骤有：词法分析 -&gt; 语法分析 -&gt; 语义分析 -&gt; 字节码生成</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>运行主要涉及到 JVM 启动，类加载，逻辑执行，可以通过看 深入理解JVM虚拟机 加深了解</p>
<h3 id="jmap-查看堆中对象分布"><a href="#jmap-查看堆中对象分布" class="headerlink" title="jmap 查看堆中对象分布"></a>jmap 查看堆中对象分布</h3><p>运行示例代码，通过 <code>ps -ef | grep Hello</code> 拿到线程 pid. 然后使用 <code>jmap -heap &lt;pid&gt;</code> 查看对象情况。结果失败。。。</p>
<p>PS: jps 可以很方便的查看 java 程序 pid</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Jack &gt; ~ &gt; jmap -heap 68202</span><br><span class="line">Attaching to process ID 68202, please <span class="built_in">wait</span>...</span><br><span class="line">ERROR: attach: task_for_pid(68202) failed: <span class="string">&#x27;(os/kern) failure&#x27;</span> (5)</span><br><span class="line">Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can<span class="string">&#x27;t attach to the process. Could be caused by an incorrect pid or lack of privileges.</span></span><br><span class="line"><span class="string">sun.jvm.hotspot.debugger.DebuggerException: sun.jvm.hotspot.debugger.DebuggerException: Can&#x27;</span>t attach to the process. Could be caused by an incorrect pid or lack of privileges.</span><br></pre></td></tr></table></figure>

<p>操作系统为 MacOS, java1.8。一开始说是权限问题，但是用了 root 也不顶用，然后说是 1.8 以前不支持。本地安装 j14 然后按照之前的步骤运行 cmd 还是一样的错误。在 14 版本中，命令变了，j9 之后需要使用 <code>jhsdb jmap --heap --pid  68633</code> 做查询。难道是 MacOS 需要什么特殊设置 (´Д` ) 容我找太其他系统的机子试试水先。。。</p>
<p>可能就是系统问题把，或者公司的机子有什么限制？用家里的 Windows 试了下是可以 work 的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\jack&gt; jhsdb jmap --heap --pid 10648</span><br><span class="line">Attaching to process ID 10648, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 11.0.6+8-LTS</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Garbage-First (G1) GC with 4 thread(s)</span><br><span class="line"></span><br><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         = 40</span><br><span class="line">   MaxHeapFreeRatio         = 70</span><br><span class="line">   MaxHeapSize              = 2118123520 (2020.0MB)</span><br><span class="line">   NewSize                  = 1363144 (1.2999954223632812MB)</span><br><span class="line">   MaxNewSize               = 1270874112 (1212.0MB)</span><br><span class="line">   OldSize                  = 5452592 (5.1999969482421875MB)</span><br><span class="line">   NewRatio                 = 2</span><br><span class="line">   SurvivorRatio            = 8</span><br><span class="line">   MetaspaceSize            = 21807104 (20.796875MB)</span><br><span class="line">   CompressedClassSpaceSize = 1073741824 (1024.0MB)</span><br><span class="line">   MaxMetaspaceSize         = 17592186044415 MB</span><br><span class="line">   G1HeapRegionSize         = 1048576 (1.0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line">G1 Heap:</span><br><span class="line">   regions  = 2020</span><br><span class="line">   capacity = 2118123520 (2020.0MB)</span><br><span class="line">   used     = 1048576 (1.0MB)</span><br><span class="line">   free     = 2117074944 (2019.0MB)</span><br><span class="line">   0.04950495049504951% used</span><br><span class="line">G1 Young Generation:</span><br><span class="line">Eden Space:</span><br><span class="line">   regions  = 1</span><br><span class="line">   capacity = 15728640 (15.0MB)</span><br><span class="line">   used     = 1048576 (1.0MB)</span><br><span class="line">   free     = 14680064 (14.0MB)</span><br><span class="line">   6.666666666666667% used</span><br><span class="line">Survivor Space:</span><br><span class="line">   regions  = 0</span><br><span class="line">   capacity = 0 (0.0MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 0 (0.0MB)</span><br><span class="line">   0.0% used</span><br><span class="line">G1 Old Generation:</span><br><span class="line">   regions  = 0</span><br><span class="line">   capacity = 118489088 (113.0MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 118489088 (113.0MB)</span><br><span class="line">   0.0% used</span><br></pre></td></tr></table></figure>

<p>使用 histo 参数查看对象大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\jack&gt; jhsdb jmap --histo --pid 10648</span><br><span class="line">Attaching to process ID 10648, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 11.0.6+8-LTS</span><br><span class="line">Iterating over heap. This may take a <span class="keyword">while</span>...</span><br><span class="line">Object Histogram:</span><br><span class="line"></span><br><span class="line">num       <span class="comment">#instances    #bytes  Class description</span></span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line">1:              551     357184  char[]</span><br><span class="line">2:              3641    258616  byte[]</span><br><span class="line">3:              1629    98808   java.lang.Object[]</span><br><span class="line">...</span><br><span class="line">304:            1       16      <span class="built_in">float</span>[]</span><br><span class="line">305:            1       16      boolean[]</span><br><span class="line">306:            1       16      Hello</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 安装 WSL 并集成 VSCode</title>
    <url>/hexo/2019/12/02/Win10%20%E5%AE%89%E8%A3%85%20WSL%20%E5%B9%B6%E9%9B%86%E6%88%90%20VSCode/</url>
    <content><![CDATA[<p>在 Win10 下用 VSCode + WSL 开发，体验还是不错的，一开始看了下官方文档，好长，好复杂。但是实际操作下来，其实很简单，赶紧搞起来，甚香( •̀ ω •́ )✧</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>首次使用 WSL 需要做一下系统设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">win快捷搜索-&gt; 启用或关闭Windows功能-&gt; 勾选 适用于Linux的Windows子系统</span><br></pre></td></tr></table></figure>

<p><img src="enable_wsl.png" alt="开启子系统选项"></p>
<p>到微软商城，搜所 wsl, 可以看到可用的 linux 版本，比如 kail, Ubuntu 等, 点击安装</p>
<p><img src="win_wsl_search.png" alt="搜索界面"></p>
<p>安装完毕后使用敲击 win 键卡开快捷搜索，输入 wsl 回车，快速打开，第一次打开时需要配置一下子系统用户名密码信息</p>
<p>安装 VSCode + Remote-WSL 插件</p>
<p><img src="remote_wsl_plugin.png" alt="VSCode插件"></p>
<p>启动 WSL 子系统，默认会到 <code>jack@DESKTOP-9TGTFK1:/mnt/c/Windows/system32$</code> 路径下，选一个你喜欢的路径，我这里新建了目录 vscode_dir 用来测试, 然后输入 <code>code .</code> 第一次输入时 WSL 会安装一些包，然后打开 VSCode。到这里基本就安装完了</p>
<p><img src="wsl_vscode_lib.png" alt="WSL安装VSCode包"></p>
<p>新打开的 remote VSCode 界面，注意左下角，如果显示的时下载的 Linux 版本就表明链接成功了</p>
<p><img src="vscode_connection.png" alt="VSCode-WSL连接"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://code.visualstudio.com/docs/remote/wsl">官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>function 包简介</title>
    <url>/hexo/2020/06/03/function-%E5%8C%85%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>对 java 的 lang 包下的 function 包做一下简要的总结， 写本篇文章时参考的 java 11 的源代码。是实话，我中觉得函数接口的定义，语义上很奇葩，不怎么读的懂，比如源码中 Predicate 的 isEquals 方法是这样定义的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">isEqual</span><span class="params">(Object targetRef)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">null</span> == targetRef)</span><br><span class="line">            ? Objects::isNull</span><br><span class="line">            : object -&gt; targetRef.equals(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简直是看的我一脸的黑人问好啊 ？？？ 这 TM 什么鬼，有空再研究一下怎么自定义函数接口。</p>
<h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>function 包是函数接口的集合，包路径为： <code>java.util.function.*</code>， 接口可以大致分为 5 类</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>作用</th>
<th>个数</th>
</tr>
</thead>
<tbody><tr>
<td>Consumer</td>
<td>接收参数做计算，无返回</td>
<td>8</td>
</tr>
<tr>
<td>Supplier</td>
<td>生成数据，对象</td>
<td>5</td>
</tr>
<tr>
<td>Predicate</td>
<td>根据参数做返回 Boolean 值的计算</td>
<td>5</td>
</tr>
<tr>
<td>Function</td>
<td>接受参数，返会计算值</td>
<td>17</td>
</tr>
<tr>
<td>Operator</td>
<td>接受数据并返回计算值</td>
<td>8</td>
</tr>
</tbody></table>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>拿到参数， 运算， 无返回值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>它有一些变种，比如 BiConsumer, Bi 是 Binary 的缩写，表示复数， 两个的意思。这里表示 Consumer 接收两个参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BiConsumer&lt;String, String&gt; biConsumer = (name, action) -&gt; &#123;</span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;Name: %s is %s ing...&quot;</span>, name, action));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">biConsumer.accept(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;run&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>其他变种，比如 DoubleConsumer, 只接受 Double 做参数， 类似的还有 LongConsumer, IntConsumer 等，限制一样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DoubleConsumer consumer = (val) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Val: &quot;</span> + val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">consumer.accept(<span class="number">1.0</span>); <span class="comment">// output: Val: 1.0</span></span><br><span class="line"><span class="comment">// consumer.accept(&quot;test&quot;); - 编译报错</span></span><br><span class="line"><span class="comment">// consumer.accept(1.0L); - 编译报错</span></span><br></pre></td></tr></table></figure>

<p>还有一类变种，比如 ObjDoubleConsumer, ObjIntConsumer 和 ObjLongConsumer， 表示接收两个参数，但是其中一个是对象类型的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设计一个 lambda， 接受 person 对象和 int 值，并用 int 对 person 的年龄 field 赋值</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 省略 getter/setter/toString 方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ObjIntConsumer&lt;Person&gt; consumer = Person::setAge;</span><br><span class="line">Person p = <span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">consumer.accept(p, <span class="number">30</span>);</span><br><span class="line">System.out.println(p);</span><br><span class="line"><span class="comment">// output: Person&#123;name=&#x27;Jack&#x27;, age=30&#125;</span></span><br></pre></td></tr></table></figure>

<p>大多数 *Consumer 接口看书中还有另外一个方法，叫 <code>andThen()</code> 可以达到组合拳的效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义两个 lambda, 一个做大写转化，一个做小写转化。 就是他的这个级联的语法总有一种很奇葩的感觉，要先写 andThan 再写 accept 才合法</span></span><br><span class="line">Consumer&lt;String&gt; consumer01 = (val) -&gt; &#123;</span><br><span class="line">    String toUp = val.toUpperCase();</span><br><span class="line">    System.out.print(toUp);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Consumer&lt;String&gt; consumer02 = (val) -&gt; &#123;</span><br><span class="line">    String toUp = val.toLowerCase();</span><br><span class="line">    System.out.println(toUp);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;B&quot;</span>).forEach(consumer01.andThen(consumer02).accept);</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Aa</span></span><br><span class="line"><span class="comment">// Bb</span></span><br></pre></td></tr></table></figure>

<h3 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h3><p>生成数据并返回，和工厂方法很像</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Supplier supplier = Math::random;</span><br><span class="line">System.out.println(supplier.get());</span><br><span class="line">System.out.println(supplier.get());</span><br><span class="line"><span class="comment">// output: 0.21716622238340733</span></span><br><span class="line"><span class="comment">// output: 0.06868488591912514</span></span><br></pre></td></tr></table></figure>

<p>和 Consumer 一样，他也有指定返回类型的 type, 像 BooleanSupplier, DoubleSupplier, IntSupplier 和 LongSupplier</p>
<h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p>接受参数，然后再 lambda 中计算，得出一个 Boolean 的结果值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对准备的 3 个 string 做过滤，输出空字串的个数</span></span><br><span class="line"><span class="keyword">long</span> count = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;  &quot;</span>, <span class="string">&quot;B&quot;</span>).filter(String::isBlank).count();</span><br><span class="line">System.out.println(count);</span><br><span class="line"><span class="comment">// output: 1</span></span><br></pre></td></tr></table></figure>

<p>filter 中接受的就是 Predicate 类型的表达式，如果计算结果为 true，则保留参数对象，否则过滤掉。</p>
<p>对应的它也有多个变种形式，变种的处理方式和前面的雷同： BiPredicate, DoublePredicate, IntPredicate 和 LongPredicate。</p>
<p>除此之外，大多数的 *Predicate 接口中除了 test() 外还有 and(), negate()， or() 和 isEqual() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Predicate&lt;String&gt; checkLength = val -&gt; val.length() &gt; <span class="number">5</span>;</span><br><span class="line">Predicate&lt;String&gt; startWith = val -&gt; val.startsWith(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">List&lt;String&gt; ret = Stream.of(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;BBC&quot;</span>).filter(checkLength.and(startWith)).collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">&quot;-------------- Test AND result--------------&quot;</span>);</span><br><span class="line">ret.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">ret = Stream.of(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;BBC&quot;</span>).filter(checkLength.or(startWith)).collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">&quot;-------------- Test OR result--------------&quot;</span>);</span><br><span class="line">ret.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">ret = Stream.of(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;BBC&quot;</span>).filter(checkLength.negate()).collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">&quot;-------------- Test NEGATE result--------------&quot;</span>);</span><br><span class="line">ret.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">ret = Stream.of(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;BBC&quot;</span>).filter(Predicate.not(checkLength)).collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">&quot;-------------- Test NOT result--------------&quot;</span>);</span><br><span class="line">ret.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-------------- Test EQUALS result--------------&quot;</span>);</span><br><span class="line">System.out.println(Predicate.isEqual(<span class="string">&quot;abc&quot;</span>).test(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line">-------------- Test AND result--------------</span><br><span class="line">Banana</span><br><span class="line">-------------- Test OR result--------------</span><br><span class="line">Banana</span><br><span class="line">BBC</span><br><span class="line">-------------- Test NEGATE result--------------</span><br><span class="line">Apple</span><br><span class="line">BBC</span><br><span class="line">-------------- Test NOT result--------------</span><br><span class="line">Apple</span><br><span class="line">BBC</span><br><span class="line">-------------- Test EQUALS result--------------</span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>接受参数，计算并返回所得的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收一个字符串并将其转化成 integer 类型</span></span><br><span class="line">Function&lt;String, Integer&gt; func = Integer::valueOf;</span><br><span class="line"><span class="keyword">int</span> ret = func.apply(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">System.out.println(ret);</span><br><span class="line"><span class="comment">// output: 100</span></span><br></pre></td></tr></table></figure>

<p>同样，他也有变种，而且特别多</p>
<table>
<thead>
<tr>
<th>name</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>BiFunction</td>
<td>接收两个参数, 返回值类型自定</td>
</tr>
<tr>
<td>DoubleFunction</td>
<td>接收 Double 参数，返回值自定</td>
</tr>
<tr>
<td>IntFunction</td>
<td>接收 Int 参数，返回值自定</td>
</tr>
<tr>
<td>LongFunction</td>
<td>接收 Long 参数，返回值自定</td>
</tr>
<tr>
<td>DoubleToIntFunction</td>
<td>接收 Double 返回 Int</td>
</tr>
<tr>
<td>DoubleToLongFunction</td>
<td>接收 Double 返回 Long</td>
</tr>
<tr>
<td>IntToDoubleFunction</td>
<td>接收 Int 返回 Double</td>
</tr>
<tr>
<td>IntToLongFunction</td>
<td>接收 Int 返回 Long</td>
</tr>
<tr>
<td>LongToDoubleFunction</td>
<td>接收 Long 返回 Double</td>
</tr>
<tr>
<td>LongToIntFunction</td>
<td>接收 Long 返回 Int</td>
</tr>
<tr>
<td>ToDoubleFunction</td>
<td>接收参数类型自定，返回 Double</td>
</tr>
<tr>
<td>ToIntFunction</td>
<td>接收参数类型自定，返回 Int</td>
</tr>
<tr>
<td>ToLongFunction</td>
<td>接收参数类型自定，返回 Long</td>
</tr>
<tr>
<td>ToIntBiFunction</td>
<td>接收两个参数, 返回 Int</td>
</tr>
<tr>
<td>ToLongBiFunction</td>
<td>接收两个参数, 返回 Long</td>
</tr>
<tr>
<td>ToDoubleBiFunction</td>
<td>接收两个参数, 返回 Double</td>
</tr>
</tbody></table>
<p>相比其他的几个 *Function 接口， BiFunction 和 Function 要更特殊一点，他们除了最基本的 apply() 之外还有一些额外的方法。</p>
<p>Function 和 BiFunction 还有一个相同的 <code>andThen()</code> 方法，他会再前一个返回值的基础上再做计算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对 Stream 中的数进行 x 100 -10 操作</span></span><br><span class="line">Function&lt;Integer, Integer&gt; funcx100 = val -&gt; val * <span class="number">100</span>;</span><br><span class="line">Function&lt;Integer, Integer&gt; funcMinus10 = val -&gt; val - <span class="number">10</span>;</span><br><span class="line">List&lt;Integer&gt; ret = Stream.of(<span class="number">1</span>, <span class="number">2</span>).map(funcx100.andThen(funcMinus10)).collect(Collectors.toList());</span><br><span class="line">ret.forEach(System.out::println);</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// 90</span></span><br><span class="line"><span class="comment">// 190</span></span><br></pre></td></tr></table></figure>

<p>初此之外 Function 还有几个特殊的方法， compose() 他是再 apply() 之前执行的，注意泛型返回值的承接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设计两个 lambda 函数，将测试字符串中的数字部分抽出来，并格式化</span></span><br><span class="line">Function&lt;String, Integer&gt; funcComp = val -&gt; &#123;String intVal = val.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> Integer.valueOf(intVal);&#125;;</span><br><span class="line">Function&lt;Integer, String&gt; func = val -&gt; <span class="string">&quot;[&quot;</span> + val + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">List&lt;String&gt; ret = Stream.of(<span class="string">&quot;Jack:30&quot;</span>, <span class="string">&quot;Jerry:18&quot;</span>).map(func.compose(funcComp)).collect(Collectors.toList());</span><br><span class="line">ret.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>Function 还有一个 identity() 方法，传入什么返回什么，完全不能领会它有什么用，到是网上一些例子中，可以用来快速生成 map 的用法让人挺印象深刻的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; map = Stream.of(<span class="string">&quot;i&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>).collect(Collectors.toMap(Function.identity(), String::length));</span><br><span class="line">System.out.println(map);</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// &#123;love=4, i=1, you=3&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h3><p>一个计算表达式，最基本的类型为 UnaryOperator， 翻译为 <code>一元表达式</code>, 它是 Function 的一个子类, 可以看成是定制版/特殊形式的 Function，只用于计算，看网上的例子貌似是这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UnaryOperator&lt;Integer&gt; operator = val -&gt; val ^ <span class="number">2</span>;</span><br><span class="line">System.out.println(operator.apply(<span class="number">4</span>));</span><br><span class="line"><span class="comment">// output: 6</span></span><br></pre></td></tr></table></figure>
<p>与之类似的还有 LongUnaryOperator 表示 long 类型的一元运算， 同理推至 IntUnaryOperator， DoubleUnaryOperator。</p>
<p>DoubleBinaryOperator 两个 Double 类型数据的运算，同理推至 IntBinaryOperator 和 LongBinaryOperator。</p>
<p>再 *Operator 一族中，比较特殊的是 BinaryOperator, 再他的方法中有两个计算最值的方法 <code>minBy()</code> 和 <code>maxBy()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BinaryOperator&lt;Integer&gt; max = BinaryOperator.maxBy(Comparator.naturalOrder());</span><br><span class="line">System.out.println(max.apply(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">BinaryOperator&lt;Integer&gt; min = BinaryOperator.minBy(Comparator.naturalOrder());</span><br><span class="line">System.out.println(min.apply(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">//output: 2 1</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>jenv 快速上手</title>
    <url>/hexo/2020/08/25/jenv-quick-start/</url>
    <content><![CDATA[<p>jenv 是和 pyenv 一个类型的工具，应对多版本 java 的需求进行管理。简单记录一下 jenv 安装使用方法。<a href="https://www.jenv.be/">官方教程</a>。需要注意的是在配置文件里添加完设置之后需要重起终端，不然文件夹什么还没有创建出来。</p>
<h2 id="CMDs"><a href="#CMDs" class="headerlink" title="CMDs"></a>CMDs</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install jenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># local 已经安装的版本检测</span></span><br><span class="line"><span class="built_in">which</span> java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装多版本 java, 可以通过 java11, java12 等指定版本。默认最新版</span></span><br><span class="line">brew cask install java</span><br><span class="line"><span class="comment"># 安装成功会给出路径信息：Moving Generic Artifact &#x27;jdk-14.0.2.jdk&#x27; to &#x27;/Library/Java/JavaVirtualMachines/openjdk-14.0.2.jdk&#x27;.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># jenv 添加 home 路径</span></span><br><span class="line">jenv add /Library/Java/JavaVirtualMachines/openjdk-14.0.2.jdk/Contents/Home</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看可用版本</span></span><br><span class="line">jenv versions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想要只在某个路径下面指定 java 版本，可以使用</span></span><br><span class="line">jenv <span class="built_in">local</span> 14</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>you-get 终端下载工具</title>
    <url>/hexo/2019/11/27/you-get%20%E7%BB%88%E7%AB%AF%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>作为一个新世纪的社会主义接班人，怎么能不关注国家大事呢，于是我开始有意识的培养看新闻联播的习惯。但是问题来了，新闻联播要三十分钟，而且不能倍速播放。都 9012 年了啊，官网用的还是 flash, 也是醉了。合计了一下，打算使用工具将视频下载下来后本地用 Potplayer 加速播放。一开始找了 IDM，总的来说，用起来还不错，但是有些时候新闻联播官网抓到的 ts 文件，还得自己合并，不开心 (｡ ́︿ ̀｡)</p>
<p>最后在 Gayhub 上找到了 you-get 很赞 ↖(^ω^)↗ 而且他还支持很多网站的下载 b站，youku 什么的都不在话下，而且有人维护，贡献很积极呦</p>
<ul>
<li><a href="https://github.com/soimort/you-get">Github you-get</a></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Win10 OS</p>
<p>准备工作：安装 python 3.2+, FFmpeg。前者用来下载后者用来合并视频，如果 FFmpeg 没有安装的还，下载还能成功，但是合并就不行了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install you-get</span><br></pre></td></tr></table></figure>

<p>安装 FFmpeg, 前往<a href="https://ffmpeg.org/">官网</a>下载压缩包，解压后将 bin 文件加到系统配置的 path 中，path 选系统 level 的，user level 的可能会出问题，视屏不能合并，别问我为什么知道的 ┑(￣Д ￣)┍</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示可用的下载选项，然后根据提示操作就行了</span></span><br><span class="line">you-get -i [URL]</span><br></pre></td></tr></table></figure>

<p>官方文档写的很详细，不懂就看 you-get 官方文档好了，有<a href="https://github.com/soimort/you-get/wiki/%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E">中文版</a>呦</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>终端</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title>创建 Date 对象</title>
    <url>/hexo/2020/01/03/%E5%88%9B%E5%BB%BA%20Date%20%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>简单记录一下 java 中 Date 类的使用</p>
<h3 id="通过-Date-创建"><a href="#通过-Date-创建" class="headerlink" title="通过 Date 创建"></a>通过 Date 创建</h3><p>默认构造函数会创建当前时间点的 Date 对象, 另外还可以通过 <code>Date(long milliseconds)</code> 的构造器创建指定时间的日期对象</p>
<p>主要方法：</p>
<ul>
<li>getTime() - return milliseconds</li>
<li>before(Date) - if date is before target date</li>
<li>after(Date)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="comment">// The default date fromat is: &quot;EEE MMM dd HH:mm:ss zzz yyyy&quot;;</span></span><br><span class="line">    System.out.println(date);</span><br><span class="line">    System.out.println(date.getTime());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Fri Jan 03 17:47:16 CST 2020</span></span><br><span class="line"><span class="comment">// 1578045256817</span></span><br></pre></td></tr></table></figure>

<h3 id="通过-SimpleDateFormat-创建"><a href="#通过-SimpleDateFormat-创建" class="headerlink" title="通过 SimpleDateFormat 创建"></a>通过 SimpleDateFormat 创建</h3><p>相比于上一种方式，这种更易懂一点，而且可以指定输出格式呦(´▽｀)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">    Date simpleDate = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>).parse(<span class="string">&quot;2020-01-03&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(simpleDate);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;MM-dd-yyyy&quot;</span>).format(simpleDate));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Fri Jan 03 00:00:00 CST 2020</span></span><br><span class="line"><span class="comment">// 01-03-2020</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>date</tag>
      </tags>
  </entry>
  <entry>
    <title>原码，反码和补码</title>
    <url>/hexo/2019/12/07/%E5%8E%9F%E7%A0%81%EF%BC%8C%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81/</url>
    <content><![CDATA[<p>本篇简要介绍一下计算机存储中原码，反码，补码的一些基本知识，给出一些我自己的概括，不严谨，想了解更多参考我给的链接</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>二进制数表示带符号值时，最高位位符号位，0表示正数，1表示负数，以四位二进制数来说明</p>
<p>原码：人能直接读出来的数，比如 1 二进制表示为 0001，-1 二进制 1001<br>反码：正数反码等于原码，负数反码符号为不变，其他各位取反 -1 反码 1110<br>补码：正数补码等于原码，负数补码等于反码 +1， -1 补码 1111</p>
<p>这样设计的原因是为了简化计算机计算，计算机这个东西，他虽然快，但是论复杂逻辑思考，真的弱得一匹 ┑(￣Д ￣)┍</p>
<h2 id="尝试复述一下设计原理"><a href="#尝试复述一下设计原理" class="headerlink" title="尝试复述一下设计原理"></a>尝试复述一下设计原理</h2><p>人的思路：1 - 1 = 1 + (-1) = 0，但是这个套路机器不懂啊，从它开来 1 + (-1) = 0001 + 1001 = -2。 为了弥补这个 gap, 人们就搞出了反码这个东西，这样机器计算的时候 1 + (-1) = 0001 + 1110 = 1111[反] = 1000[原] = -0。计算结果为题解决了，但随之带来了新的问题，出现了 0 和 -0 两个重复的数。所以人们又做了一次改进，搞出了补码这个东西，从此机器码中 1 + (-1) = 0001[补] + 1111[补] = 1,0000 = 0000, 因为是四位计算，最高位溢出不计算了，完美解决问题 ↖(^ω^)↗</p>
<p>原来多出来 -0 用来表示四位最大的负数 -64。这个数是没有原码和反码的。</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul>
<li>反码和取反是两个东西</li>
<li>取反和非很像，但是有区别，取反是0/1计算，非是逻辑运算</li>
<li>最大的那个负数没有原码和反码</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html">CSDN-原码, 反码, 补码 详解</a></li>
</ul>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
      <tags>
        <tag>原码</tag>
        <tag>反码</tag>
        <tag>补码</tag>
      </tags>
  </entry>
  <entry>
    <title>各种常用小工具</title>
    <url>/hexo/2020/05/16/%E5%90%84%E7%A7%8D%E5%B8%B8%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>常用小工具记录</p>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p>想要截取一下某堂公开课的课件，但是他是嵌入在页面的 scroller bar 组件当中的，截取很不方便，试了一些像 FireShot 之类的 Chrome 扩展，也不能很好的完成任务。最后通过 FastStone Capture 解决了问题</p>
<ul>
<li>FastStone Capture：一个 Windows 平台下的截图工具，功能还挺多，也挺全，不过应该有点年头了，界面很复古。应该是之支持 Win 平台的，20$ 不过送了 30 天的体验，还是很良心的，滚动截图简直优秀</li>
<li>如果光是 Chrome 的话，根本不需要安装插件，<code>Ctrl + Shift + I</code> 调出调试界面， <code>Ctrl + Shift + P</code> 调出 Chrome 终端界面，然后输入关键字 <code>screen</code> 选择 <code>Capture all screen</code> 就可以截取全部网页了。 在选中节点的情况下，也可以通过选择 <code>Capture node screen</code> 截取单个元素的图片，很方便，但是我那种情况并不好使。。。</li>
</ul>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>是不是还在为迅雷的各种广告，各种资源不能下载而烦恼，试试 Motrix 这个开源项目，还不错。已经有官方支持了，不需要什么操作直接下载安装就行，还多平台支持，溜的一批。</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>common</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统Tips</title>
    <url>/hexo/2020/07/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FTips/</url>
    <content><![CDATA[<h2 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h2><ul>
<li>最大化窗口：CMD + Ctrl + F</li>
<li>Item2 最大化终端：CMD + Enter</li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>数字进制转化</title>
    <url>/hexo/2019/12/04/%E6%95%B0%E5%AD%97%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8C%96/</url>
    <content><![CDATA[<p>罗列常用语言中的数字转化方法</p>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>Python 中已经集成了很多用来做这个事情的内部方法，都不需要引入额外的包，很方便。主要集中在 str.format() 和其他一些内置函数比如 int(), hex () 等</p>
<p>str.format 转化格式如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">format_spec     ::=  [[fill]align][sign][<span class="comment">#][0][width][grouping_option][.precision][type]</span></span><br><span class="line">fill            ::=  &lt;any character&gt;</span><br><span class="line">align           ::=  <span class="string">&quot;&lt;&quot;</span> | <span class="string">&quot;&gt;&quot;</span> | <span class="string">&quot;=&quot;</span> | <span class="string">&quot;^&quot;</span></span><br><span class="line">sign            ::=  <span class="string">&quot;+&quot;</span> | <span class="string">&quot;-&quot;</span> | <span class="string">&quot; &quot;</span></span><br><span class="line">width           ::=  digit+</span><br><span class="line">grouping_option ::=  <span class="string">&quot;_&quot;</span> | <span class="string">&quot;,&quot;</span></span><br><span class="line">precision       ::=  digit+</span><br><span class="line"><span class="built_in">type</span>            ::=  <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span> | <span class="string">&quot;d&quot;</span> | <span class="string">&quot;e&quot;</span> | <span class="string">&quot;E&quot;</span> | <span class="string">&quot;f&quot;</span> | <span class="string">&quot;F&quot;</span> | <span class="string">&quot;g&quot;</span> | <span class="string">&quot;G&quot;</span> | <span class="string">&quot;n&quot;</span> | <span class="string">&quot;o&quot;</span> | <span class="string">&quot;s&quot;</span> | <span class="string">&quot;x&quot;</span> | <span class="string">&quot;X&quot;</span> | <span class="string">&quot;%&quot;</span></span><br></pre></td></tr></table></figure>

<p>一些例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 十进制 8 转化成二进制，8位宽，左对齐，空位补 -, format 里面的只能是十进制的数</span></span><br><span class="line"><span class="string">&#x27;&#123;:-&lt;8b&#125;&#x27;</span>.format(<span class="number">8</span>)</span><br><span class="line"><span class="comment"># &#x27;1000----&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0xff 转化成二进制，可以先把十六进制转成十进制，再转成二进制, 0x 可以省略</span></span><br><span class="line"><span class="string">&#x27;&#123;:b&#125;&#x27;</span>.format(int(<span class="string">&#x27;0xff&#x27;</span>, <span class="number">16</span>))</span><br><span class="line"><span class="comment"># &#x27;11111111&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bin 函数也可以用来做二进制转化，基数是10</span></span><br><span class="line">bin(<span class="number">8</span>)</span><br><span class="line"><span class="comment"># &#x27;0b1000&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str.format 加上 # 可以变成和 bin 一样的效果</span></span><br><span class="line"><span class="string">&#x27;&#123;:#b&#125;&#x27;</span>.format(int(<span class="string">&#x27;0xff&#x27;</span>, <span class="number">16</span>))</span><br><span class="line"><span class="comment"># &#x27;0b11111111&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内置函数 format 也可以实现和 str.format 一样的功能</span></span><br><span class="line">format(<span class="number">255</span>, <span class="string">&#x27;#b&#x27;</span>)</span><br><span class="line"><span class="comment"># &#x27;0b11111111&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再介绍一种 format 的简写形式</span></span><br><span class="line">f&#x27;&#123;255:#b&#125;&#x27;</span><br><span class="line"><span class="comment"># &#x27;0b11111111&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.python.org/3/library/string.html#grammar-token-precision">Python 官方文档</a></li>
<li><a href="https://stackoverflow.com/questions/1425493/convert-hex-to-binary/7373476">StackOverflow, convert hexo to binary</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>func</tag>
        <tag>hex</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派搭建 FastDFS 服务</title>
    <url>/hexo/2020/03/08/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BA%20FastDFS%20%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>树莓派搭建 FastDFS 服务记录</p>
<p>小结写在最前面：此方案可行，稍微有点坑，但是踩踩还是可以过的</p>
<h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><p>FastDFS 分布式文件存储系统，阿里系程序员<strong>余庆</strong>开发完成</p>
<p>FastDFS 只负责存储，不提供web支持，所以一般要搭配 nginx 使用</p>
<p>工作模式： client -&gt; (tracker server + storage server), tracker 信息负责管理， storage 负责存储</p>
<p>树莓派的默认账号： pi | raspberry</p>
<p>可以通过终端输入: ssh pi@host 链接</p>
<h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><ul>
<li><a href="https://github.com/happyfish100/fastdfs/wiki">官方文档</a></li>
<li><a href="https://www.youtube.com/watch?v=6Y2NihvPijQ">视频教程，不过要翻墙</a></li>
</ul>
<p>依赖关系：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── FastDFS-nginx-module</span><br><span class="line">├── fastdfs(tracker + storage)</span><br><span class="line">│   ├── GCC</span><br><span class="line">│   ├── libevent</span><br><span class="line">│   └── perl</span><br><span class="line">├── libfastcommon</span><br><span class="line">└── nginx</span><br><span class="line">    ├── pcre-devel</span><br><span class="line">    └── zlib-devel</span><br></pre></td></tr></table></figure>

<h3 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h3><p>一些包的名字在 RedHat 和 Debain 下的名字不一样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install git gcc make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel wget vim</span><br><span class="line"></span><br><span class="line">E: Unable to locate package gcc-c++</span><br><span class="line">E: Unable to locate package pcre</span><br><span class="line">E: Unable to locate package pcre-devel</span><br><span class="line">E: Unable to locate package zlib</span><br><span class="line">E: Unable to locate package zlib-devel</span><br><span class="line">E: Unable to locate package openssl-devel</span><br><span class="line"></span><br><span class="line">gcc-c++ 可以用 g++ 代替，不过好像 gcc 安装之后自动就装好了</span><br><span class="line"></span><br><span class="line">pcre，pcre-devel 用 libpcre3 libpcre3-dev 代替</span><br><span class="line"></span><br><span class="line">zlib： zlib1g</span><br><span class="line">openssl-devel: libssl-dev</span><br></pre></td></tr></table></figure>

<p>按照教程走，输入 ./make.sh &amp;&amp; ./make.sh install 还是报错，说 permission denied. 试试 <code>sudo -i</code></p>
<blockquote>
<p>启动 nginx:</p>
</blockquote>
<ol>
<li>cd 到 root@raspberrypi:/usr/local/nginx/sbin# 路径下运行 ./nginx</li>
<li>如果是重启就 ./nginx -s reload</li>
</ol>
<blockquote>
<p>wget 下载文件并重命名:</p>
</blockquote>
<p>wget -c ‘url’ -O ‘rename’</p>
<blockquote>
<p>查看已经上传的图片  </p>
</blockquote>
<p>根据 storage 配置找到路径，各种 cd 进去可以看到你已经上传的文件，我本地测试的时候是在这里 <code>/home/dfs/data/00/00</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  00 ls -al</span><br><span class="line">total 1072</span><br><span class="line">drwxr-xr-x   2 root root    4096 Mar 14 15:10 .</span><br><span class="line">drwxr-xr-x 258 root root    4096 Mar  8 11:38 ..</span><br><span class="line">-rw-r--r--   1 root root 1024694 Mar  8 11:44 wKgBal5k2qGAQv4CAA-itrfn0m4.tar.gz</span><br><span class="line">-rw-r--r--   1 root root   20002 Mar  8 12:52 wKgBal5k6pmAa4jlAABOIgA5mas34.jpeg</span><br><span class="line">-rw-r--r--   1 root root   20002 Mar  8 15:41 wKgBal5lEiyAfaT6AABOIgA5mas88.jpeg</span><br><span class="line">-rw-r--r--   1 root root   20002 Mar 14 15:10 wKgBal5s8_eAYY_fAABOIgA5mas81.jpeg</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试图片访问可以在 nginx 启动之后访问 host:8888/group1/M00/00/00/wKgBal5s8_eAYY_fAABOIgA5mas81.jpeg 这样的路径查看</p>
</blockquote>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>pi</tag>
        <tag>FastDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>生活小常识</title>
    <url>/hexo/2020/06/07/%E7%94%9F%E6%B4%BB%E5%B0%8F%E5%B8%B8%E8%AF%86/</url>
    <content><![CDATA[<p>别用 iPhone 来购买会员之类的虚拟产品!</p>
<blockquote>
<p>iPhone 在购买虚拟产品，比如网易云音乐之类的会员时，要比安卓，或者PC直接购买要贵，比例还挺高 20-30% 之间，这是 IOS 平台的雁过拔毛策略。。。直接在费 IOS 平台就可以</p>
</blockquote>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>小常识</tag>
      </tags>
  </entry>
  <entry>
    <title>词条</title>
    <url>/hexo/2020/05/28/%E8%AF%8D%E6%9D%A1/</url>
    <content><![CDATA[<blockquote>
<p>Q: 什么是反向代理</p>
</blockquote>
<p>反向代理是相对正向代理来说的。正向代理隐藏了客户端，反向代理隐藏了服务器端。比如我们搭建 VPS 服务器翻墙就是一个正向代理的例子。我们可以通过代理服务器对 Google 发起请求拿到信息。相对的，<a href="http://www.google.cn">www.google.cn</a> 就是一个反向代理，这个域名的背后有很多服务器，但我们不 care，他代表谷歌，这就足够了。</p>
<blockquote>
<p>Q: 为什么 BiFunction 可以表示为两个参数的函数接口</p>
</blockquote>
<p>这个命名还是很贴切的，在英语中 bi 前缀有两个的意思，来源于拉丁语。类似的单词还有 bifocal(河流分叉)，bifurcate(双面显微镜)等。</p>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
      <tags>
        <tag>解释</tag>
      </tags>
  </entry>
</search>
